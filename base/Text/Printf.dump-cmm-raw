
==================== Raw Cmm ====================
2018-03-16 16:07:04.763648876 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:04.765468254 UTC

[section ""data" . Text.Printf.toChar_closure" {
     Text.Printf.toChar_closure:
         const Text.Printf.toChar_info;
 },
 Text.Printf.toChar_entry() //  [R2]
         { []
         }
     {offset
       ccfXu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccfXv; else goto ccfXw;
       ccfXv: // global
           R2 = R2;
           R1 = Text.Printf.toChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccfXw: // global
           I64[Sp - 8] = block_ccfXr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucfXA; else goto ccfXs;
       ucfXA: // global
           call _ccfXr(R1) args: 0, res: 0, upd: 0;
       ccfXs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.toChar_info" {
     Text.Printf.toChar_info:
         const Text.Printf.toChar_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccfXr() //  [R1]
         { []
         }
     {offset
       ccfXr: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccfXr_info" {
     block_ccfXr_info:
         const _ccfXr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.771175007 UTC

[section ""data" . Text.Printf.fromChar_closure" {
     Text.Printf.fromChar_closure:
         const Text.Printf.fromChar_info;
 },
 Text.Printf.fromChar_entry() //  [R2]
         { []
         }
     {offset
       ccfXR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccfXS; else goto ccfXT;
       ccfXS: // global
           R2 = R2;
           R1 = Text.Printf.fromChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccfXT: // global
           I64[Sp - 8] = block_ccfXO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucfXX; else goto ccfXP;
       ucfXX: // global
           call _ccfXO(R1) args: 0, res: 0, upd: 0;
       ccfXP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fromChar_info" {
     Text.Printf.fromChar_info:
         const Text.Printf.fromChar_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccfXO() //  [R1]
         { []
         }
     {offset
       ccfXO: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccfXO_info" {
     block_ccfXO_info:
         const _ccfXO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.779188636 UTC

[section ""data" . Text.Printf.formatArg_closure" {
     Text.Printf.formatArg_closure:
         const Text.Printf.formatArg_info;
 },
 Text.Printf.formatArg_entry() //  [R2]
         { []
         }
     {offset
       ccfYe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccfYf; else goto ccfYg;
       ccfYf: // global
           R2 = R2;
           R1 = Text.Printf.formatArg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccfYg: // global
           I64[Sp - 8] = block_ccfYb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucfYk; else goto ccfYc;
       ucfYk: // global
           call _ccfYb(R1) args: 0, res: 0, upd: 0;
       ccfYc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.formatArg_info" {
     Text.Printf.formatArg_info:
         const Text.Printf.formatArg_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccfYb() //  [R1]
         { []
         }
     {offset
       ccfYb: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccfYb_info" {
     block_ccfYb_info:
         const _ccfYb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.784600553 UTC

[section ""data" . Text.Printf.parseFormat_closure" {
     Text.Printf.parseFormat_closure:
         const Text.Printf.parseFormat_info;
 },
 Text.Printf.parseFormat_entry() //  [R2]
         { []
         }
     {offset
       ccfYB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccfYC; else goto ccfYD;
       ccfYC: // global
           R2 = R2;
           R1 = Text.Printf.parseFormat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccfYD: // global
           I64[Sp - 8] = block_ccfYy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucfYH; else goto ccfYz;
       ucfYH: // global
           call _ccfYy(R1) args: 0, res: 0, upd: 0;
       ccfYz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.parseFormat_info" {
     Text.Printf.parseFormat_info:
         const Text.Printf.parseFormat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccfYy() //  [R1]
         { []
         }
     {offset
       ccfYy: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccfYy_info" {
     block_ccfYy_info:
         const _ccfYy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.78956038 UTC

[section ""data" . Text.Printf.hspr_closure" {
     Text.Printf.hspr_closure:
         const Text.Printf.hspr_info;
 },
 Text.Printf.hspr_entry() //  [R2]
         { []
         }
     {offset
       ccfYV: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.hspr_info" {
     Text.Printf.hspr_info:
         const Text.Printf.hspr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.792756726 UTC

[section ""data" . Text.Printf.spr_closure" {
     Text.Printf.spr_closure:
         const Text.Printf.spr_info;
 },
 Text.Printf.spr_entry() //  [R2]
         { []
         }
     {offset
       ccfZ6: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.spr_info" {
     Text.Printf.spr_info:
         const Text.Printf.spr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.796365014 UTC

[section ""data" . Text.Printf.$fIsCharChar_$cfromChar_closure" {
     Text.Printf.$fIsCharChar_$cfromChar_closure:
         const Text.Printf.$fIsCharChar_$cfromChar_info;
 },
 Text.Printf.$fIsCharChar_$cfromChar_entry() //  [R2]
         { []
         }
     {offset
       ccfZh: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fIsCharChar_$cfromChar_info" {
     Text.Printf.$fIsCharChar_$cfromChar_info:
         const Text.Printf.$fIsCharChar_$cfromChar_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.79944369 UTC

[section ""data" . Text.Printf.$fIsCharChar_closure" {
     Text.Printf.$fIsCharChar_closure:
         const Text.Printf.C:IsChar_con_info;
         const Text.Printf.$fIsCharChar_$cfromChar_closure+1;
         const Text.Printf.$fIsCharChar_$cfromChar_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.80262421 UTC

[section ""data" . Text.Printf.$fHPrintfType(->)_$chspr_closure" {
     Text.Printf.$fHPrintfType(->)_$chspr_closure:
         const Text.Printf.$fHPrintfType(->)_$chspr_info;
 },
 sat_sccdo_entry() //  [R1]
         { []
         }
     {offset
       ccfZz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccfZA; else goto ccfZB;
       ccfZA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccfZB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.Printf.formatArg_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccdo_info" {
     sat_sccdo_info:
         const sat_sccdo_entry;
         const 2;
         const 18;
 },
 sat_sccdn_entry() //  [R1]
         { []
         }
     {offset
       ccfZG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccfZH; else goto ccfZI;
       ccfZH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccfZI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.Printf.parseFormat_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccdn_info" {
     sat_sccdn_info:
         const sat_sccdn_entry;
         const 2;
         const 18;
 },
 Text.Printf.$fHPrintfType(->)_$chspr_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       ccfZL: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccfZP; else goto ccfZO;
       ccfZP: // global
           HpAlloc = 112;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fHPrintfType(->)_$chspr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       ccfZO: // global
           I64[Hp - 104] = sat_sccdo_info;
           P64[Hp - 88] = R2;
           _sccdm::P64 = P64[Sp];
           P64[Hp - 80] = _sccdm::P64;
           I64[Hp - 72] = sat_sccdn_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = _sccdm::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = Hp - 104;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = R6;
           _sccdj::P64 = R4;
           R4 = Hp - 14;
           _sccdi::P64 = R3;
           R3 = R5;
           R2 = _sccdj::P64;
           R1 = _sccdi::P64;
           Sp = Sp + 8;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fHPrintfType(->)_$chspr_info" {
     Text.Printf.$fHPrintfType(->)_$chspr_info:
         const Text.Printf.$fHPrintfType(->)_$chspr_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.811078869 UTC

[section ""data" . Text.Printf.$fHPrintfType(->)_closure" {
     Text.Printf.$fHPrintfType(->)_closure:
         const Text.Printf.$fHPrintfType(->)_info;
 },
 Text.Printf.$fHPrintfType(->)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccg0b: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Printf.$fHPrintfType(->)_$chspr_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fHPrintfType(->)_info" {
     Text.Printf.$fHPrintfType(->)_info:
         const Text.Printf.$fHPrintfType(->)_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.815593523 UTC

[section ""data" . Text.Printf.$fPrintfType(->)_$cspr_closure" {
     Text.Printf.$fPrintfType(->)_$cspr_closure:
         const Text.Printf.$fPrintfType(->)_$cspr_info;
 },
 sat_sccdx_entry() //  [R1]
         { []
         }
     {offset
       ccg0q: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccg0r; else goto ccg0s;
       ccg0r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccg0s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.Printf.formatArg_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccdx_info" {
     sat_sccdx_info:
         const sat_sccdx_entry;
         const 2;
         const 18;
 },
 sat_sccdw_entry() //  [R1]
         { []
         }
     {offset
       ccg0x: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccg0y; else goto ccg0z;
       ccg0y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccg0z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.Printf.parseFormat_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccdw_info" {
     sat_sccdw_info:
         const sat_sccdw_entry;
         const 2;
         const 18;
 },
 Text.Printf.$fPrintfType(->)_$cspr_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccg0C: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccg0G; else goto ccg0F;
       ccg0G: // global
           HpAlloc = 112;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfType(->)_$cspr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccg0F: // global
           I64[Hp - 104] = sat_sccdx_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R6;
           I64[Hp - 72] = sat_sccdw_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R6;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = Hp - 104;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = R5;
           _sccds::P64 = R3;
           R3 = Hp - 14;
           R2 = R4;
           R1 = _sccds::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfType(->)_$cspr_info" {
     Text.Printf.$fPrintfType(->)_$cspr_info:
         const Text.Printf.$fPrintfType(->)_$cspr_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.822709434 UTC

[section ""data" . Text.Printf.$fPrintfType(->)_closure" {
     Text.Printf.$fPrintfType(->)_closure:
         const Text.Printf.$fPrintfType(->)_info;
 },
 Text.Printf.$fPrintfType(->)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccg12: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Printf.$fPrintfType(->)_$cspr_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfType(->)_info" {
     Text.Printf.$fPrintfType(->)_info:
         const Text.Printf.$fPrintfType(->)_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.826786519 UTC

[section ""data" . Text.Printf.fmtChar_closure" {
     Text.Printf.fmtChar_closure:
         const Text.Printf.fmtChar_info;
 },
 Text.Printf.fmtChar_entry() //  [R2]
         { []
         }
     {offset
       ccg1g: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccg1h; else goto ccg1i;
       ccg1h: // global
           R2 = R2;
           R1 = Text.Printf.fmtChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccg1i: // global
           I64[Sp - 8] = block_ccg1d_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucg1m; else goto ccg1e;
       ucg1m: // global
           call _ccg1d(R1) args: 0, res: 0, upd: 0;
       ccg1e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fmtChar_info" {
     Text.Printf.fmtChar_info:
         const Text.Printf.fmtChar_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccg1d() //  [R1]
         { []
         }
     {offset
       ccg1d: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccg1d_info" {
     block_ccg1d_info:
         const _ccg1d;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.832140843 UTC

[section ""data" . Text.Printf.fmtModifiers_closure" {
     Text.Printf.fmtModifiers_closure:
         const Text.Printf.fmtModifiers_info;
 },
 Text.Printf.fmtModifiers_entry() //  [R2]
         { []
         }
     {offset
       ccg1F: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccg1G; else goto ccg1H;
       ccg1G: // global
           R2 = R2;
           R1 = Text.Printf.fmtModifiers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccg1H: // global
           I64[Sp - 8] = block_ccg1C_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucg1L; else goto ccg1D;
       ucg1L: // global
           call _ccg1C(R1) args: 0, res: 0, upd: 0;
       ccg1D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fmtModifiers_info" {
     Text.Printf.fmtModifiers_info:
         const Text.Printf.fmtModifiers_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccg1C() //  [R1]
         { []
         }
     {offset
       ccg1C: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccg1C_info" {
     block_ccg1C_info:
         const _ccg1C;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.837447762 UTC

[section ""data" . Text.Printf.fmtAlternate_closure" {
     Text.Printf.fmtAlternate_closure:
         const Text.Printf.fmtAlternate_info;
 },
 Text.Printf.fmtAlternate_entry() //  [R2]
         { []
         }
     {offset
       ccg24: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccg25; else goto ccg26;
       ccg25: // global
           R2 = R2;
           R1 = Text.Printf.fmtAlternate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccg26: // global
           I64[Sp - 8] = block_ccg21_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucg2a; else goto ccg22;
       ucg2a: // global
           call _ccg21(R1) args: 0, res: 0, upd: 0;
       ccg22: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fmtAlternate_info" {
     Text.Printf.fmtAlternate_info:
         const Text.Printf.fmtAlternate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccg21() //  [R1]
         { []
         }
     {offset
       ccg21: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccg21_info" {
     block_ccg21_info:
         const _ccg21;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.842815192 UTC

[section ""data" . Text.Printf.fmtSign_closure" {
     Text.Printf.fmtSign_closure:
         const Text.Printf.fmtSign_info;
 },
 Text.Printf.fmtSign_entry() //  [R2]
         { []
         }
     {offset
       ccg2t: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccg2u; else goto ccg2v;
       ccg2u: // global
           R2 = R2;
           R1 = Text.Printf.fmtSign_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccg2v: // global
           I64[Sp - 8] = block_ccg2q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucg2z; else goto ccg2r;
       ucg2z: // global
           call _ccg2q(R1) args: 0, res: 0, upd: 0;
       ccg2r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fmtSign_info" {
     Text.Printf.fmtSign_info:
         const Text.Printf.fmtSign_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccg2q() //  [R1]
         { []
         }
     {offset
       ccg2q: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccg2q_info" {
     block_ccg2q_info:
         const _ccg2q;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.848713272 UTC

[section ""data" . Text.Printf.fmtAdjust_closure" {
     Text.Printf.fmtAdjust_closure:
         const Text.Printf.fmtAdjust_info;
 },
 Text.Printf.fmtAdjust_entry() //  [R2]
         { []
         }
     {offset
       ccg2S: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccg2T; else goto ccg2U;
       ccg2T: // global
           R2 = R2;
           R1 = Text.Printf.fmtAdjust_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccg2U: // global
           I64[Sp - 8] = block_ccg2P_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucg2Y; else goto ccg2Q;
       ucg2Y: // global
           call _ccg2P(R1) args: 0, res: 0, upd: 0;
       ccg2Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fmtAdjust_info" {
     Text.Printf.fmtAdjust_info:
         const Text.Printf.fmtAdjust_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccg2P() //  [R1]
         { []
         }
     {offset
       ccg2P: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccg2P_info" {
     block_ccg2P_info:
         const _ccg2P;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.854467478 UTC

[section ""data" . Text.Printf.fmtPrecision_closure" {
     Text.Printf.fmtPrecision_closure:
         const Text.Printf.fmtPrecision_info;
 },
 Text.Printf.fmtPrecision_entry() //  [R2]
         { []
         }
     {offset
       ccg3h: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccg3i; else goto ccg3j;
       ccg3i: // global
           R2 = R2;
           R1 = Text.Printf.fmtPrecision_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccg3j: // global
           I64[Sp - 8] = block_ccg3e_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucg3n; else goto ccg3f;
       ucg3n: // global
           call _ccg3e(R1) args: 0, res: 0, upd: 0;
       ccg3f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fmtPrecision_info" {
     Text.Printf.fmtPrecision_info:
         const Text.Printf.fmtPrecision_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccg3e() //  [R1]
         { []
         }
     {offset
       ccg3e: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccg3e_info" {
     block_ccg3e_info:
         const _ccg3e;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.859804372 UTC

[section ""data" . Text.Printf.fmtWidth_closure" {
     Text.Printf.fmtWidth_closure:
         const Text.Printf.fmtWidth_info;
 },
 Text.Printf.fmtWidth_entry() //  [R2]
         { []
         }
     {offset
       ccg3G: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccg3H; else goto ccg3I;
       ccg3H: // global
           R2 = R2;
           R1 = Text.Printf.fmtWidth_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccg3I: // global
           I64[Sp - 8] = block_ccg3D_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucg3M; else goto ccg3E;
       ucg3M: // global
           call _ccg3D(R1) args: 0, res: 0, upd: 0;
       ccg3E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fmtWidth_info" {
     Text.Printf.fmtWidth_info:
         const Text.Printf.fmtWidth_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccg3D() //  [R1]
         { []
         }
     {offset
       ccg3D: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccg3D_info" {
     block_ccg3D_info:
         const _ccg3D;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.865101396 UTC

[section ""data" . Text.Printf.fpRest_closure" {
     Text.Printf.fpRest_closure:
         const Text.Printf.fpRest_info;
 },
 Text.Printf.fpRest_entry() //  [R2]
         { []
         }
     {offset
       ccg45: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccg46; else goto ccg47;
       ccg46: // global
           R2 = R2;
           R1 = Text.Printf.fpRest_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccg47: // global
           I64[Sp - 8] = block_ccg42_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucg4b; else goto ccg43;
       ucg4b: // global
           call _ccg42(R1) args: 0, res: 0, upd: 0;
       ccg43: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fpRest_info" {
     Text.Printf.fpRest_info:
         const Text.Printf.fpRest_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccg42() //  [R1]
         { []
         }
     {offset
       ccg42: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccg42_info" {
     block_ccg42_info:
         const _ccg42;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.870444036 UTC

[section ""data" . Text.Printf.fpChar_closure" {
     Text.Printf.fpChar_closure:
         const Text.Printf.fpChar_info;
 },
 Text.Printf.fpChar_entry() //  [R2]
         { []
         }
     {offset
       ccg4u: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccg4v; else goto ccg4w;
       ccg4v: // global
           R2 = R2;
           R1 = Text.Printf.fpChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccg4w: // global
           I64[Sp - 8] = block_ccg4r_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucg4A; else goto ccg4s;
       ucg4A: // global
           call _ccg4r(R1) args: 0, res: 0, upd: 0;
       ccg4s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fpChar_info" {
     Text.Printf.fpChar_info:
         const Text.Printf.fpChar_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccg4r() //  [R1]
         { []
         }
     {offset
       ccg4r: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccg4r_info" {
     block_ccg4r_info:
         const _ccg4r;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.876189346 UTC

[section ""data" . Text.Printf.fpModifiers_closure" {
     Text.Printf.fpModifiers_closure:
         const Text.Printf.fpModifiers_info;
 },
 Text.Printf.fpModifiers_entry() //  [R2]
         { []
         }
     {offset
       ccg4T: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccg4U; else goto ccg4V;
       ccg4U: // global
           R2 = R2;
           R1 = Text.Printf.fpModifiers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccg4V: // global
           I64[Sp - 8] = block_ccg4Q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucg4Z; else goto ccg4R;
       ucg4Z: // global
           call _ccg4Q(R1) args: 0, res: 0, upd: 0;
       ccg4R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fpModifiers_info" {
     Text.Printf.fpModifiers_info:
         const Text.Printf.fpModifiers_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccg4Q() //  [R1]
         { []
         }
     {offset
       ccg4Q: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccg4Q_info" {
     block_ccg4Q_info:
         const _ccg4Q;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.881765747 UTC

[section ""data" . Text.Printf.printf_closure" {
     Text.Printf.printf_closure:
         const Text.Printf.printf_info;
 },
 Text.Printf.printf_entry() //  [R2, R3]
         { []
         }
     {offset
       ccg5f: // global
           _scceR::P64 = R3;
           R3 = GHC.Types.[]_closure+1;
           _scceQ::P64 = R2;
           R2 = _scceR::P64;
           R1 = _scceQ::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.printf_info" {
     Text.Printf.printf_info:
         const Text.Printf.printf_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.885206544 UTC

[section ""data" . Text.Printf.hPrintf_closure" {
     Text.Printf.hPrintf_closure:
         const Text.Printf.hPrintf_info;
 },
 Text.Printf.hPrintf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       ccg5q: // global
           _scceU::P64 = R4;
           R4 = GHC.Types.[]_closure+1;
           _scceT::P64 = R3;
           R3 = _scceU::P64;
           _scceS::P64 = R2;
           R2 = _scceT::P64;
           R1 = _scceS::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.hPrintf_info" {
     Text.Printf.hPrintf_info:
         const Text.Printf.hPrintf_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.889950554 UTC

[section ""data" . Text.Printf.vFmt_closure" {
     Text.Printf.vFmt_closure:
         const Text.Printf.vFmt_info;
 },
 Text.Printf.vFmt_entry() //  [R2, R3]
         { []
         }
     {offset
       ccg5E: // global
           if ((Sp + -72) < SpLim) (likely: False) goto ccg5I; else goto ccg5J;
       ccg5I: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.vFmt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccg5J: // global
           I64[Sp - 16] = block_ccg5B_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucg60; else goto ccg5C;
       ucg60: // global
           call _ccg5B(R1) args: 0, res: 0, upd: 0;
       ccg5C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.vFmt_info" {
     Text.Printf.vFmt_info:
         const Text.Printf.vFmt_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccg5B() //  [R1]
         { []
         }
     {offset
       ccg5B: // global
           I64[Sp - 56] = block_ccg5H_info;
           _scceX::P64 = R1;
           _scceY::P64 = P64[R1 + 7];
           _scceZ::P64 = P64[R1 + 15];
           _sccf0::P64 = P64[R1 + 23];
           _sccf1::P64 = P64[R1 + 31];
           _sccf2::P64 = P64[R1 + 39];
           _sccf3::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 48] = _scceY::P64;
           P64[Sp - 40] = _scceZ::P64;
           P64[Sp - 32] = _sccf0::P64;
           P64[Sp - 24] = _sccf1::P64;
           P64[Sp - 16] = _sccf2::P64;
           P64[Sp - 8] = _sccf3::P64;
           P64[Sp] = _scceX::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ucg5Z; else goto ccg5L;
       ucg5Z: // global
           call _ccg5H(R1) args: 0, res: 0, upd: 0;
       ccg5L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccg5B_info" {
     block_ccg5B_info:
         const _ccg5B;
         const 1;
         const 30;
 },
 _ccg5H() //  [R1]
         { []
         }
     {offset
       ccg5H: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccg5R; else goto ccg5Q;
       ccg5R: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccg5Q: // global
           if (I64[R1 + 7] == 118) goto ccg5Y; else goto ccg5U;
       ccg5Y: // global
           I64[Hp - 56] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 64];
           R1 = Hp - 55;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccg5U: // global
           Hp = Hp - 64;
           R1 = P64[Sp + 56] & (-8);
           Sp = Sp + 72;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccg5H_info" {
     block_ccg5H_info:
         const _ccg5H;
         const 8;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.897593775 UTC

[section ""cstring" . lvl_rccbg_bytes" {
     lvl_rccbg_bytes:
         I8[] [112,114,105,110,116,102,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.899858405 UTC

[section ""data" . Text.Printf.perror_closure" {
     Text.Printf.perror_closure:
         const Text.Printf.perror_info;
         const 0;
 },
 Text.Printf.perror_entry() //  [R2]
         { []
         }
     {offset
       ccg6v: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccg6w; else goto ccg6x;
       ccg6w: // global
           R2 = R2;
           R1 = Text.Printf.perror_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccg6x: // global
           I64[Sp - 8] = block_ccg6t_info;
           R3 = R2;
           R2 = lvl_rccbg_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.perror_info" {
     Text.Printf.perror_info:
         const Text.Printf.perror_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SccKB_srt;
 },
 _ccg6t() //  [R1]
         { []
         }
     {offset
       ccg6t: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccg6t_info" {
     block_ccg6t_info:
         const _ccg6t;
         const 0;
         const 4294967326;
         const SccKB_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.904368881 UTC

[section ""data" . lvl1_rccbh_closure" {
     lvl1_rccbh_closure:
         const :_con_info;
         const GHC.Show.$fShowChar3_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.906047573 UTC

[section ""cstring" . lvl2_rccbi_bytes" {
     lvl2_rccbi_bytes:
         I8[] [98,97,100,32,102,111,114,109,97,116,116,105,110,103,32,99,104,97,114,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.910393342 UTC

[section ""data" . Text.Printf.$werrorBadFormat_closure" {
     Text.Printf.$werrorBadFormat_closure:
         const Text.Printf.$werrorBadFormat_info;
         const 0;
 },
 sat_sccfc_entry() //  [R1]
         { []
         }
     {offset
       ccg73: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccg74; else goto ccg75;
       ccg74: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccg75: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl1_rccbh_closure+2;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$wshowLitChar_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccfc_info" {
     sat_sccfc_info:
         const sat_sccfc_entry;
         const 4294967296;
         const 4294967313;
         const SccKB_srt+16;
 },
 sat_sccfd_entry() //  [R1]
         { []
         }
     {offset
       ccg79: // global
           _sccfd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccg7a; else goto ccg7b;
       ccg7b: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccg7d; else goto ccg7c;
       ccg7d: // global
           HpAlloc = 48;
           goto ccg7a;
       ccg7a: // global
           R1 = _sccfd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccg7c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sccfd::P64;
           _sccfb::I64 = I64[_sccfd::P64 + 16];
           if (_sccfb::I64 != 39) goto ccg77; else goto ccg78;
       ccg77: // global
           I64[Hp - 40] = sat_sccfc_info;
           I64[Hp - 24] = _sccfb::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShowChar3_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccg78: // global
           Hp = Hp - 48;
           R1 = GHC.Show.$fShowChar1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccfd_info" {
     sat_sccfd_info:
         const sat_sccfd_entry;
         const 4294967296;
         const 12884901905;
         const SccKB_srt+16;
 },
 sat_sccfe_entry() //  [R1]
         { []
         }
     {offset
       ccg7f: // global
           _sccfe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccg7g; else goto ccg7h;
       ccg7h: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccg7j; else goto ccg7i;
       ccg7j: // global
           HpAlloc = 24;
           goto ccg7g;
       ccg7g: // global
           R1 = _sccfe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccg7i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sccfe::P64;
           _sccfa::I64 = I64[_sccfe::P64 + 16];
           I64[Hp - 16] = sat_sccfd_info;
           I64[Hp] = _sccfa::I64;
           R3 = Hp - 16;
           R2 = lvl2_rccbi_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccfe_info" {
     sat_sccfe_info:
         const sat_sccfe_entry;
         const 4294967296;
         const 12884901905;
         const SccKB_srt+16;
 },
 Text.Printf.$werrorBadFormat_entry() //  [R2]
         { []
         }
     {offset
       ccg7m: // global
           _sccfa::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto ccg7n; else goto ccg7o;
       ccg7o: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccg7q; else goto ccg7p;
       ccg7q: // global
           HpAlloc = 24;
           goto ccg7n;
       ccg7n: // global
           R2 = _sccfa::I64;
           R1 = Text.Printf.$werrorBadFormat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccg7p: // global
           I64[Hp - 16] = sat_sccfe_info;
           I64[Hp] = _sccfa::I64;
           I64[Sp - 8] = block_ccg7k_info;
           R3 = Hp - 16;
           R2 = lvl_rccbg_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$werrorBadFormat_info" {
     Text.Printf.$werrorBadFormat_info:
         const Text.Printf.$werrorBadFormat_entry;
         const 0;
         const 124554051598;
         const 4294967300;
         const SccKB_srt;
 },
 _ccg7k() //  [R1]
         { []
         }
     {offset
       ccg7k: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccg7k_info" {
     block_ccg7k_info:
         const _ccg7k;
         const 0;
         const 4294967326;
         const SccKB_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.92179868 UTC

[section ""data" . Text.Printf.errorBadFormat_closure" {
     Text.Printf.errorBadFormat_closure:
         const Text.Printf.errorBadFormat_info;
         const 0;
 },
 Text.Printf.errorBadFormat_entry() //  [R2]
         { []
         }
     {offset
       ccg7Y: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccg7Z; else goto ccg80;
       ccg7Z: // global
           R2 = R2;
           R1 = Text.Printf.errorBadFormat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccg80: // global
           I64[Sp - 8] = block_ccg7V_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucg84; else goto ccg7W;
       ucg84: // global
           call _ccg7V(R1) args: 0, res: 0, upd: 0;
       ccg7W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.errorBadFormat_info" {
     Text.Printf.errorBadFormat_info:
         const Text.Printf.errorBadFormat_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SccKB_srt+32;
 },
 _ccg7V() //  [R1]
         { []
         }
     {offset
       ccg7V: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call Text.Printf.$werrorBadFormat_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccg7V_info" {
     block_ccg7V_info:
         const _ccg7V;
         const 0;
         const 4294967326;
         const SccKB_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.926483756 UTC

[section ""cstring" . lvl3_rccbj_bytes" {
     lvl3_rccbj_bytes:
         I8[] [112,114,105,110,116,102,58,32,102,111,114,109,97,116,116,105,110,103,32,115,116,114,105,110,103,32,101,110,100,101,100,32,112,114,101,109,97,116,117,114,101,108,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.928934778 UTC

[section ""data" . Text.Printf.errorShortFormat_closure" {
     Text.Printf.errorShortFormat_closure:
         const Text.Printf.errorShortFormat_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.errorShortFormat_entry() //  [R1]
         { []
         }
     {offset
       ccg8n: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccg8o; else goto ccg8p;
       ccg8o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccg8p: // global
           (_ccg8i::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccg8i::I64 == 0) goto ccg8k; else goto ccg8j;
       ccg8k: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccg8j: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccg8i::I64;
           I64[Sp - 24] = block_ccg8l_info;
           R2 = lvl3_rccbj_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.errorShortFormat_info" {
     Text.Printf.errorShortFormat_info:
         const Text.Printf.errorShortFormat_entry;
         const 0;
         const 4294967317;
         const SccKB_srt;
 },
 _ccg8l() //  [R1]
         { []
         }
     {offset
       ccg8l: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccg8l_info" {
     block_ccg8l_info:
         const _ccg8l;
         const 0;
         const 4294967326;
         const SccKB_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.938011057 UTC

[section ""data" . Text.Printf.$dmparseFormat_closure" {
     Text.Printf.$dmparseFormat_closure:
         const Text.Printf.$dmparseFormat_info;
         const 0;
 },
 Text.Printf.$dmparseFormat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       ccg8O: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccg8P; else goto ccg8Q;
       ccg8P: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$dmparseFormat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccg8Q: // global
           I64[Sp - 8] = block_ccg8H_info;
           R1 = R4;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucg90; else goto ccg8I;
       ucg90: // global
           call _ccg8H(R1) args: 0, res: 0, upd: 0;
       ccg8I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$dmparseFormat_info" {
     Text.Printf.$dmparseFormat_info:
         const Text.Printf.$dmparseFormat_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SccKB_srt+48;
 },
 _ccg8H() //  [R1]
         { []
         }
     {offset
       ccg8H: // global
           if (R1 & 7 == 1) goto ccg8L; else goto ccg8M;
       ccg8L: // global
           R1 = Text.Printf.errorShortFormat_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       ccg8M: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccg8Z; else goto ccg8Y;
       ccg8Z: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccg8Y: // global
           _sccfo::P64 = P64[R1 + 6];
           _sccfp::P64 = P64[R1 + 14];
           I64[Hp - 24] = Text.Printf.FormatParse_con_info;
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           P64[Hp - 8] = _sccfo::P64;
           P64[Hp] = _sccfp::P64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccg8H_info" {
     block_ccg8H_info:
         const _ccg8H;
         const 0;
         const 4294967326;
         const SccKB_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.944253984 UTC

[section ""cstring" . lvl4_rccbk_bytes" {
     lvl4_rccbk_bytes:
         I8[] [112,114,105,110,116,102,58,32,97,114,103,117,109,101,110,116,32,108,105,115,116,32,101,110,100,101,100,32,112,114,101,109,97,116,117,114,101,108,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.947018708 UTC

[section ""data" . Text.Printf.errorMissingArgument_closure" {
     Text.Printf.errorMissingArgument_closure:
         const Text.Printf.errorMissingArgument_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.errorMissingArgument_entry() //  [R1]
         { []
         }
     {offset
       ccg9m: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccg9n; else goto ccg9o;
       ccg9n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccg9o: // global
           (_ccg9h::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccg9h::I64 == 0) goto ccg9j; else goto ccg9i;
       ccg9j: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccg9i: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccg9h::I64;
           I64[Sp - 24] = block_ccg9k_info;
           R2 = lvl4_rccbk_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.errorMissingArgument_info" {
     Text.Printf.errorMissingArgument_info:
         const Text.Printf.errorMissingArgument_entry;
         const 0;
         const 4294967317;
         const SccKB_srt;
 },
 _ccg9k() //  [R1]
         { []
         }
     {offset
       ccg9k: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccg9k_info" {
     block_ccg9k_info:
         const _ccg9k;
         const 0;
         const 4294967326;
         const SccKB_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.953711546 UTC

[section ""cstring" . lvl5_rccbl_bytes" {
     lvl5_rccbl_bytes:
         I8[] [112,114,105,110,116,102,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.956528603 UTC

[section ""data" . Text.Printf.errorBadArgument_closure" {
     Text.Printf.errorBadArgument_closure:
         const Text.Printf.errorBadArgument_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.errorBadArgument_entry() //  [R1]
         { []
         }
     {offset
       ccg9L: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccg9M; else goto ccg9N;
       ccg9M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccg9N: // global
           (_ccg9G::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccg9G::I64 == 0) goto ccg9I; else goto ccg9H;
       ccg9I: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccg9H: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccg9G::I64;
           I64[Sp - 24] = block_ccg9J_info;
           R2 = lvl5_rccbl_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.errorBadArgument_info" {
     Text.Printf.errorBadArgument_info:
         const Text.Printf.errorBadArgument_entry;
         const 0;
         const 4294967317;
         const SccKB_srt;
 },
 _ccg9J() //  [R1]
         { []
         }
     {offset
       ccg9J: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccg9J_info" {
     block_ccg9J_info:
         const _ccg9J;
         const 0;
         const 4294967326;
         const SccKB_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.962219655 UTC

[section ""cstring" . Text.Printf.$fPrintfArgDouble9_bytes" {
     Text.Printf.$fPrintfArgDouble9_bytes:
         I8[] [45]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.964772241 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble8_closure" {
     Text.Printf.$fPrintfArgDouble8_closure:
         const Text.Printf.$fPrintfArgDouble8_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgDouble8_entry() //  [R1]
         { []
         }
     {offset
       ccga8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccga9; else goto ccgaa;
       ccga9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgaa: // global
           (_ccga5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccga5::I64 == 0) goto ccga7; else goto ccga6;
       ccga7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccga6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccga5::I64;
           R2 = Text.Printf.$fPrintfArgDouble9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgDouble8_info" {
     Text.Printf.$fPrintfArgDouble8_info:
         const Text.Printf.$fPrintfArgDouble8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.969587398 UTC

[section ""cstring" . lvl6_rccbm_bytes" {
     lvl6_rccbm_bytes:
         I8[] [112,114,105,110,116,102,58,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,105,109,112,111,115,115,105,98,108,101,32,100,102,109,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.972274303 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble7_closure" {
     Text.Printf.$fPrintfArgDouble7_closure:
         const Text.Printf.$fPrintfArgDouble7_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgDouble7_entry() //  [R1]
         { []
         }
     {offset
       ccgar: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccgas; else goto ccgat;
       ccgas: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgat: // global
           (_ccgam::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgam::I64 == 0) goto ccgao; else goto ccgan;
       ccgao: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgan: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgam::I64;
           I64[Sp - 24] = block_ccgap_info;
           R2 = lvl6_rccbm_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgDouble7_info" {
     Text.Printf.$fPrintfArgDouble7_info:
         const Text.Printf.$fPrintfArgDouble7_entry;
         const 0;
         const 4294967317;
         const SccKB_srt;
 },
 _ccgap() //  [R1]
         { []
         }
     {offset
       ccgap: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgap_info" {
     block_ccgap_info:
         const _ccgap;
         const 0;
         const 4294967326;
         const SccKB_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:04.983931173 UTC

[section ""data" . Text.Printf.$w$sdfmt_closure" {
     Text.Printf.$w$sdfmt_closure:
         const Text.Printf.$w$sdfmt_info;
         const 0;
 },
 Text.Printf.$w$sdfmt_slow() //  [R1]
         { []
         }
     {offset
       ccgaI: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Text.Printf.$w$sdfmt_entry(R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Printf.$w$sdfmt_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       ccgaO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccgaP; else goto ccgaQ;
       ccgaP: // global
           R1 = Text.Printf.$w$sdfmt_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       ccgaQ: // global
           _sccfw::P64 = R5;
           _sccfv::P64 = R4;
           _sccfu::P64 = R3;
           (_sccfB::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswupper(R2);
           (_sccfG::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towlower(R2);
           if (_sccfG::I64 > 1114111) goto ccgb5; else goto ccgdJ;
       ccgb5: // global
           R2 = _sccfG::I64;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       ccgdJ: // global
           if (_sccfG::I64 < 103) goto ucgdO; else goto ucgdQ;
       ucgdO: // global
           if (_sccfG::I64 < 102) goto ucgdP; else goto ccgcw;
       ucgdP: // global
           if (_sccfG::I64 < 101) goto ccgc6; else goto ccgck;
       ccgck: // global
           I64[Sp - 24] = block_ccgce_info;
           R1 = _sccfw::P64;
           P64[Sp - 16] = _sccfu::P64;
           I64[Sp - 8] = _sccfB::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucgdY; else goto ccgcf;
       ucgdY: // global
           call _ccgce(R1) args: 0, res: 0, upd: 0;
       ccgcf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccgcw: // global
           I64[Sp - 32] = block_ccgcv_info;
           R1 = _sccfv::P64;
           P64[Sp - 24] = _sccfu::P64;
           P64[Sp - 16] = _sccfw::P64;
           I64[Sp - 8] = _sccfB::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucgdZ; else goto ccgcy;
       ucgdZ: // global
           call _ccgcv(R1) args: 0, res: 0, upd: 0;
       ccgcy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucgdQ: // global
           if (_sccfG::I64 >= 104) goto ccgc6; else goto ccgda;
       ccgc6: // global
           R1 = Text.Printf.$fPrintfArgDouble7_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       ccgda: // global
           I64[Sp - 32] = block_ccgd9_info;
           R1 = _sccfv::P64;
           P64[Sp - 24] = _sccfu::P64;
           P64[Sp - 16] = _sccfw::P64;
           I64[Sp - 8] = _sccfB::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucge0; else goto ccgdc;
       ucge0: // global
           call _ccgd9(R1) args: 0, res: 0, upd: 0;
       ccgdc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sdfmt_info" {
     Text.Printf.$w$sdfmt_info:
         const Text.Printf.$w$sdfmt_entry;
         const 0;
         const 270582939662;
         const 17179869184;
         const SccKB_srt+64;
         const 68;
         const Text.Printf.$w$sdfmt_slow;
 },
 _ccgce() //  [R1]
         { []
         }
     {offset
       ccgce: // global
           _sccfu::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccgcj_info;
           D1 = F64[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = _sccfu::P64;
           R2 = GHC.Float.FFExponent_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgce_info" {
     block_ccgce_info:
         const _ccgce;
         const 130;
         const 81604378654;
         const SccKB_srt+72;
 },
 _ccgcj() //  [R1]
         { []
         }
     {offset
       ccgcj: // global
           P64[Sp] = R1;
           call _sccfK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgcj_info" {
     block_ccgcj_info:
         const _ccgcj;
         const 65;
         const 73014444062;
         const SccKB_srt+72;
 },
 _ccgcv() //  [R1]
         { []
         }
     {offset
       ccgcv: // global
           _sccfw::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccgcK; else goto ccgcZ;
       ccgcK: // global
           I64[Sp] = block_ccgcC_info;
           R1 = _sccfw::P64;
           if (R1 & 7 != 0) goto ucge6; else goto ccgcD;
       ucge6: // global
           call _ccgcC(R1) args: 0, res: 0, upd: 0;
       ccgcD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccgcZ: // global
           I64[Sp] = block_ccgcS_info;
           R1 = _sccfw::P64;
           if (R1 & 7 != 0) goto ucge7; else goto ccgcT;
       ucge7: // global
           call _ccgcS(R1) args: 0, res: 0, upd: 0;
       ccgcT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgcv_info" {
     block_ccgcv_info:
         const _ccgcv;
         const 259;
         const 81604378654;
         const SccKB_srt+72;
 },
 _ccgcC() //  [R1]
         { []
         }
     {offset
       ccgcC: // global
           I64[Sp + 16] = block_ccgcH_info;
           D1 = F64[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFFixed_closure+2;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgcC_info" {
     block_ccgcC_info:
         const _ccgcC;
         const 387;
         const 81604378654;
         const SccKB_srt+72;
 },
 _ccgcH() //  [R1]
         { []
         }
     {offset
       ccgcH: // global
           P64[Sp] = R1;
           call _sccfK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgcH_info" {
     block_ccgcH_info:
         const _ccgcH;
         const 65;
         const 73014444062;
         const SccKB_srt+72;
 },
 _ccgcS() //  [R1]
         { []
         }
     {offset
       ccgcS: // global
           I64[Sp + 16] = block_ccgcX_info;
           D1 = F64[R1 + 7];
           R4 = GHC.Types.True_closure+2;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFFixed_closure+2;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgcS_info" {
     block_ccgcS_info:
         const _ccgcS;
         const 387;
         const 81604378654;
         const SccKB_srt+72;
 },
 _ccgcX() //  [R1]
         { []
         }
     {offset
       ccgcX: // global
           P64[Sp] = R1;
           call _sccfK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgcX_info" {
     block_ccgcX_info:
         const _ccgcX;
         const 65;
         const 73014444062;
         const SccKB_srt+72;
 },
 _ccgd9() //  [R1]
         { []
         }
     {offset
       ccgd9: // global
           _sccfw::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccgdo; else goto ccgdD;
       ccgdo: // global
           I64[Sp] = block_ccgdg_info;
           R1 = _sccfw::P64;
           if (R1 & 7 != 0) goto ucgea; else goto ccgdh;
       ucgea: // global
           call _ccgdg(R1) args: 0, res: 0, upd: 0;
       ccgdh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccgdD: // global
           I64[Sp] = block_ccgdw_info;
           R1 = _sccfw::P64;
           if (R1 & 7 != 0) goto ucgeb; else goto ccgdx;
       ucgeb: // global
           call _ccgdw(R1) args: 0, res: 0, upd: 0;
       ccgdx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgd9_info" {
     block_ccgd9_info:
         const _ccgd9;
         const 259;
         const 81604378654;
         const SccKB_srt+72;
 },
 _ccgdg() //  [R1]
         { []
         }
     {offset
       ccgdg: // global
           I64[Sp + 16] = block_ccgdl_info;
           D1 = F64[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFGeneric_closure+3;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgdg_info" {
     block_ccgdg_info:
         const _ccgdg;
         const 387;
         const 81604378654;
         const SccKB_srt+72;
 },
 _ccgdl() //  [R1]
         { []
         }
     {offset
       ccgdl: // global
           P64[Sp] = R1;
           call _sccfK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgdl_info" {
     block_ccgdl_info:
         const _ccgdl;
         const 65;
         const 73014444062;
         const SccKB_srt+72;
 },
 _ccgdw() //  [R1]
         { []
         }
     {offset
       ccgdw: // global
           I64[Sp + 16] = block_ccgdB_info;
           D1 = F64[R1 + 7];
           R4 = GHC.Types.True_closure+2;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFGeneric_closure+3;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgdw_info" {
     block_ccgdw_info:
         const _ccgdw;
         const 387;
         const 81604378654;
         const SccKB_srt+72;
 },
 _ccgdB() //  [R1]
         { []
         }
     {offset
       ccgdB: // global
           P64[Sp] = R1;
           call _sccfK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgdB_info" {
     block_ccgdB_info:
         const _ccgdB;
         const 65;
         const 73014444062;
         const SccKB_srt+72;
 },
 _sccfK() //  []
         { []
         }
     {offset
       sccfK: // global
           _sccfL::P64 = P64[Sp];
           if (I64[Sp + 8] == 0) goto ccgbF; else goto ccgbi;
       ccgbF: // global
           I64[Sp + 8] = block_ccgbE_info;
           R1 = _sccfL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucgee; else goto ccgbG;
       ucgee: // global
           call _ccgbE(R1) args: 0, res: 0, upd: 0;
       ccgbG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccgbi: // global
           I64[Sp + 8] = block_ccgbg_info;
           R3 = _sccfL::P64;
           R2 = GHC.Unicode.toUpper_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccgbE() //  [R1]
         { []
         }
     {offset
       ccgbE: // global
           if (R1 & 7 == 1) goto ucgdX; else goto ccgbR;
       ucgdX: // global
           Sp = Sp + 8;
           call _ccgbM() args: 0, res: 0, upd: 0;
       ccgbR: // global
           I64[Sp - 16] = block_ccgbP_info;
           _sccfT::P64 = R1;
           _sccfV::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sccfV::P64;
           P64[Sp] = _sccfT::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucge3; else goto ccgbS;
       ucge3: // global
           call _ccgbP(R1) args: 0, res: 0, upd: 0;
       ccgbS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgbE_info" {
     block_ccgbE_info:
         const _ccgbE;
         const 0;
         const 4294967326;
         const SccKB_srt+104;
 },
 _ccgbP() //  [R1]
         { []
         }
     {offset
       ccgbP: // global
           if (I64[R1 + 7] == 45) goto ccgc0; else goto ccgbZ;
       ccgc0: // global
           R2 = P64[Sp + 8];
           R1 = Text.Printf.$fPrintfArgDouble8_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccgbZ: // global
           R2 = P64[Sp + 16];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgbP_info" {
     block_ccgbP_info:
         const _ccgbP;
         const 2;
         const 4294967326;
         const SccKB_srt+104;
 },
 _ccgbg() //  [R1]
         { []
         }
     {offset
       ccgbg: // global
           if (R1 & 7 == 1) goto ucgdW; else goto ccgbt;
       ucgdW: // global
           Sp = Sp + 8;
           call _ccgbM() args: 0, res: 0, upd: 0;
       ccgbt: // global
           I64[Sp - 16] = block_ccgbr_info;
           _sccfN::P64 = R1;
           _sccfP::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sccfP::P64;
           P64[Sp] = _sccfN::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucge1; else goto ccgbu;
       ucge1: // global
           call _ccgbr(R1) args: 0, res: 0, upd: 0;
       ccgbu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgbg_info" {
     block_ccgbg_info:
         const _ccgbg;
         const 0;
         const 4294967326;
         const SccKB_srt+104;
 },
 _ccgbM() //  []
         { []
         }
     {offset
       ccgbM: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccgbr() //  [R1]
         { []
         }
     {offset
       ccgbr: // global
           if (I64[R1 + 7] == 45) goto ccgbC; else goto ccgbB;
       ccgbC: // global
           R2 = P64[Sp + 8];
           R1 = Text.Printf.$fPrintfArgDouble8_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccgbB: // global
           R2 = P64[Sp + 16];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgbr_info" {
     block_ccgbr_info:
         const _ccgbr;
         const 2;
         const 4294967326;
         const SccKB_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.017681816 UTC

[section ""data" . Text.Printf.$fPrintfArgFloat1_closure" {
     Text.Printf.$fPrintfArgFloat1_closure:
         const Text.Printf.$fPrintfArgFloat1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgFloat1_entry() //  [R1]
         { []
         }
     {offset
       ccgfH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccgfI; else goto ccgfJ;
       ccgfI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgfJ: // global
           (_ccgfC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgfC::I64 == 0) goto ccgfE; else goto ccgfD;
       ccgfE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgfD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgfC::I64;
           I64[Sp - 24] = block_ccgfF_info;
           R2 = lvl6_rccbm_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgFloat1_info" {
     Text.Printf.$fPrintfArgFloat1_info:
         const Text.Printf.$fPrintfArgFloat1_entry;
         const 0;
         const 4294967317;
         const SccKB_srt;
 },
 _ccgfF() //  [R1]
         { []
         }
     {offset
       ccgfF: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgfF_info" {
     block_ccgfF_info:
         const _ccgfF;
         const 0;
         const 4294967326;
         const SccKB_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.02937019 UTC

[section ""data" . Text.Printf.$w$sdfmt1_closure" {
     Text.Printf.$w$sdfmt1_closure:
         const Text.Printf.$w$sdfmt1_info;
         const 0;
 },
 Text.Printf.$w$sdfmt1_slow() //  [R1]
         { []
         }
     {offset
       ccgfY: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Text.Printf.$w$sdfmt1_entry(R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Printf.$w$sdfmt1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       ccgg4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccgg5; else goto ccgg6;
       ccgg5: // global
           R1 = Text.Printf.$w$sdfmt1_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       ccgg6: // global
           _sccgm::P64 = R5;
           _sccgl::P64 = R4;
           _sccgk::P64 = R3;
           (_sccgr::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswupper(R2);
           (_sccgw::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towlower(R2);
           if (_sccgw::I64 > 1114111) goto ccggl; else goto ccgiZ;
       ccggl: // global
           R2 = _sccgw::I64;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       ccgiZ: // global
           if (_sccgw::I64 < 103) goto ucgj4; else goto ucgj6;
       ucgj4: // global
           if (_sccgw::I64 < 102) goto ucgj5; else goto ccghM;
       ucgj5: // global
           if (_sccgw::I64 < 101) goto ccghm; else goto ccghA;
       ccghA: // global
           I64[Sp - 24] = block_ccghu_info;
           R1 = _sccgm::P64;
           P64[Sp - 16] = _sccgk::P64;
           I64[Sp - 8] = _sccgr::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucgje; else goto ccghv;
       ucgje: // global
           call _ccghu(R1) args: 0, res: 0, upd: 0;
       ccghv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccghM: // global
           I64[Sp - 32] = block_ccghL_info;
           R1 = _sccgl::P64;
           P64[Sp - 24] = _sccgk::P64;
           P64[Sp - 16] = _sccgm::P64;
           I64[Sp - 8] = _sccgr::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucgjf; else goto ccghO;
       ucgjf: // global
           call _ccghL(R1) args: 0, res: 0, upd: 0;
       ccghO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucgj6: // global
           if (_sccgw::I64 >= 104) goto ccghm; else goto ccgiq;
       ccghm: // global
           R1 = Text.Printf.$fPrintfArgFloat1_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       ccgiq: // global
           I64[Sp - 32] = block_ccgip_info;
           R1 = _sccgl::P64;
           P64[Sp - 24] = _sccgk::P64;
           P64[Sp - 16] = _sccgm::P64;
           I64[Sp - 8] = _sccgr::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucgjg; else goto ccgis;
       ucgjg: // global
           call _ccgip(R1) args: 0, res: 0, upd: 0;
       ccgis: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sdfmt1_info" {
     Text.Printf.$w$sdfmt1_info:
         const Text.Printf.$w$sdfmt1_entry;
         const 0;
         const 2074469203982;
         const 17179869184;
         const SccKB_srt+64;
         const 68;
         const Text.Printf.$w$sdfmt1_slow;
 },
 _ccghu() //  [R1]
         { []
         }
     {offset
       ccghu: // global
           _sccgk::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccghz_info;
           F1 = F32[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = _sccgk::P64;
           R2 = GHC.Float.FFExponent_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccghu_info" {
     block_ccghu_info:
         const _ccghu;
         const 130;
         const 210453397534;
         const SccKB_srt+72;
 },
 _ccghz() //  [R1]
         { []
         }
     {offset
       ccghz: // global
           P64[Sp] = R1;
           call _sccgA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccghz_info" {
     block_ccghz_info:
         const _ccghz;
         const 65;
         const 73014444062;
         const SccKB_srt+72;
 },
 _ccghL() //  [R1]
         { []
         }
     {offset
       ccghL: // global
           _sccgm::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccgi0; else goto ccgif;
       ccgi0: // global
           I64[Sp] = block_ccghS_info;
           R1 = _sccgm::P64;
           if (R1 & 7 != 0) goto ucgjm; else goto ccghT;
       ucgjm: // global
           call _ccghS(R1) args: 0, res: 0, upd: 0;
       ccghT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccgif: // global
           I64[Sp] = block_ccgi8_info;
           R1 = _sccgm::P64;
           if (R1 & 7 != 0) goto ucgjn; else goto ccgi9;
       ucgjn: // global
           call _ccgi8(R1) args: 0, res: 0, upd: 0;
       ccgi9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccghL_info" {
     block_ccghL_info:
         const _ccghL;
         const 259;
         const 210453397534;
         const SccKB_srt+72;
 },
 _ccghS() //  [R1]
         { []
         }
     {offset
       ccghS: // global
           I64[Sp + 16] = block_ccghX_info;
           F1 = F32[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFFixed_closure+2;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccghS_info" {
     block_ccghS_info:
         const _ccghS;
         const 387;
         const 210453397534;
         const SccKB_srt+72;
 },
 _ccghX() //  [R1]
         { []
         }
     {offset
       ccghX: // global
           P64[Sp] = R1;
           call _sccgA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccghX_info" {
     block_ccghX_info:
         const _ccghX;
         const 65;
         const 73014444062;
         const SccKB_srt+72;
 },
 _ccgi8() //  [R1]
         { []
         }
     {offset
       ccgi8: // global
           I64[Sp + 16] = block_ccgid_info;
           F1 = F32[R1 + 7];
           R4 = GHC.Types.True_closure+2;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFFixed_closure+2;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgi8_info" {
     block_ccgi8_info:
         const _ccgi8;
         const 387;
         const 210453397534;
         const SccKB_srt+72;
 },
 _ccgid() //  [R1]
         { []
         }
     {offset
       ccgid: // global
           P64[Sp] = R1;
           call _sccgA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgid_info" {
     block_ccgid_info:
         const _ccgid;
         const 65;
         const 73014444062;
         const SccKB_srt+72;
 },
 _ccgip() //  [R1]
         { []
         }
     {offset
       ccgip: // global
           _sccgm::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccgiE; else goto ccgiT;
       ccgiE: // global
           I64[Sp] = block_ccgiw_info;
           R1 = _sccgm::P64;
           if (R1 & 7 != 0) goto ucgjq; else goto ccgix;
       ucgjq: // global
           call _ccgiw(R1) args: 0, res: 0, upd: 0;
       ccgix: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccgiT: // global
           I64[Sp] = block_ccgiM_info;
           R1 = _sccgm::P64;
           if (R1 & 7 != 0) goto ucgjr; else goto ccgiN;
       ucgjr: // global
           call _ccgiM(R1) args: 0, res: 0, upd: 0;
       ccgiN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgip_info" {
     block_ccgip_info:
         const _ccgip;
         const 259;
         const 210453397534;
         const SccKB_srt+72;
 },
 _ccgiw() //  [R1]
         { []
         }
     {offset
       ccgiw: // global
           I64[Sp + 16] = block_ccgiB_info;
           F1 = F32[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFGeneric_closure+3;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgiw_info" {
     block_ccgiw_info:
         const _ccgiw;
         const 387;
         const 210453397534;
         const SccKB_srt+72;
 },
 _ccgiB() //  [R1]
         { []
         }
     {offset
       ccgiB: // global
           P64[Sp] = R1;
           call _sccgA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgiB_info" {
     block_ccgiB_info:
         const _ccgiB;
         const 65;
         const 73014444062;
         const SccKB_srt+72;
 },
 _ccgiM() //  [R1]
         { []
         }
     {offset
       ccgiM: // global
           I64[Sp + 16] = block_ccgiR_info;
           F1 = F32[R1 + 7];
           R4 = GHC.Types.True_closure+2;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFGeneric_closure+3;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgiM_info" {
     block_ccgiM_info:
         const _ccgiM;
         const 387;
         const 210453397534;
         const SccKB_srt+72;
 },
 _ccgiR() //  [R1]
         { []
         }
     {offset
       ccgiR: // global
           P64[Sp] = R1;
           call _sccgA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgiR_info" {
     block_ccgiR_info:
         const _ccgiR;
         const 65;
         const 73014444062;
         const SccKB_srt+72;
 },
 _sccgA() //  []
         { []
         }
     {offset
       sccgA: // global
           _sccgB::P64 = P64[Sp];
           if (I64[Sp + 8] == 0) goto ccggV; else goto ccggy;
       ccggV: // global
           I64[Sp + 8] = block_ccggU_info;
           R1 = _sccgB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucgju; else goto ccggW;
       ucgju: // global
           call _ccggU(R1) args: 0, res: 0, upd: 0;
       ccggW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccggy: // global
           I64[Sp + 8] = block_ccggw_info;
           R3 = _sccgB::P64;
           R2 = GHC.Unicode.toUpper_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccggU() //  [R1]
         { []
         }
     {offset
       ccggU: // global
           if (R1 & 7 == 1) goto ucgjd; else goto ccgh7;
       ucgjd: // global
           Sp = Sp + 8;
           call _ccgh2() args: 0, res: 0, upd: 0;
       ccgh7: // global
           I64[Sp - 16] = block_ccgh5_info;
           _sccgJ::P64 = R1;
           _sccgL::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sccgL::P64;
           P64[Sp] = _sccgJ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucgjj; else goto ccgh8;
       ucgjj: // global
           call _ccgh5(R1) args: 0, res: 0, upd: 0;
       ccgh8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccggU_info" {
     block_ccggU_info:
         const _ccggU;
         const 0;
         const 4294967326;
         const SccKB_srt+104;
 },
 _ccgh5() //  [R1]
         { []
         }
     {offset
       ccgh5: // global
           if (I64[R1 + 7] == 45) goto ccghg; else goto ccghf;
       ccghg: // global
           R2 = P64[Sp + 8];
           R1 = Text.Printf.$fPrintfArgDouble8_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccghf: // global
           R2 = P64[Sp + 16];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgh5_info" {
     block_ccgh5_info:
         const _ccgh5;
         const 2;
         const 4294967326;
         const SccKB_srt+104;
 },
 _ccggw() //  [R1]
         { []
         }
     {offset
       ccggw: // global
           if (R1 & 7 == 1) goto ucgjc; else goto ccggJ;
       ucgjc: // global
           Sp = Sp + 8;
           call _ccgh2() args: 0, res: 0, upd: 0;
       ccggJ: // global
           I64[Sp - 16] = block_ccggH_info;
           _sccgD::P64 = R1;
           _sccgF::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sccgF::P64;
           P64[Sp] = _sccgD::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucgjh; else goto ccggK;
       ucgjh: // global
           call _ccggH(R1) args: 0, res: 0, upd: 0;
       ccggK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccggw_info" {
     block_ccggw_info:
         const _ccggw;
         const 0;
         const 4294967326;
         const SccKB_srt+104;
 },
 _ccgh2() //  []
         { []
         }
     {offset
       ccgh2: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccggH() //  [R1]
         { []
         }
     {offset
       ccggH: // global
           if (I64[R1 + 7] == 45) goto ccggS; else goto ccggR;
       ccggS: // global
           R2 = P64[Sp + 8];
           R1 = Text.Printf.$fPrintfArgDouble8_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccggR: // global
           R2 = P64[Sp + 16];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccggH_info" {
     block_ccggH_info:
         const _ccggH;
         const 2;
         const 4294967326;
         const SccKB_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.062134051 UTC

[section ""data" . Text.Printf.formatRealFloat1_closure" {
     Text.Printf.formatRealFloat1_closure:
         const Text.Printf.formatRealFloat1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.formatRealFloat1_entry() //  [R1]
         { []
         }
     {offset
       ccgkX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccgkY; else goto ccgkZ;
       ccgkY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgkZ: // global
           (_ccgkS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgkS::I64 == 0) goto ccgkU; else goto ccgkT;
       ccgkU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgkT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgkS::I64;
           I64[Sp - 24] = block_ccgkV_info;
           R2 = lvl6_rccbm_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.formatRealFloat1_info" {
     Text.Printf.formatRealFloat1_info:
         const Text.Printf.formatRealFloat1_entry;
         const 0;
         const 4294967317;
         const SccKB_srt;
 },
 _ccgkV() //  [R1]
         { []
         }
     {offset
       ccgkV: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgkV_info" {
     block_ccgkV_info:
         const _ccgkV;
         const 0;
         const 4294967326;
         const SccKB_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.073047691 UTC

[section ""data" . Text.Printf.$wdfmt_closure" {
     Text.Printf.$wdfmt_closure:
         const Text.Printf.$wdfmt_info;
         const 0;
 },
 Text.Printf.$wdfmt_slow() //  [R1]
         { []
         }
     {offset
       ccgle: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$wdfmt_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Printf.$wdfmt_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccglk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccgll; else goto ccglm;
       ccgll: // global
           R1 = Text.Printf.$wdfmt_closure;
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       ccglm: // global
           _scchd::P64 = R6;
           _scchc::P64 = R5;
           _scchb::P64 = R4;
           _sccha::I64 = R3;
           _ccglp::I64 = R3;
           (_scchi::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswupper(_ccglp::I64);
           (_scchn::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towlower(_sccha::I64);
           if (_scchn::I64 > 1114111) goto ccglB; else goto ccgnL;
       ccglB: // global
           R2 = _scchn::I64;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       ccgnL: // global
           if (_scchn::I64 < 103) goto ucgnQ; else goto ucgnS;
       ucgnQ: // global
           if (_scchn::I64 < 102) goto ucgnR; else goto ccgmW;
       ucgnR: // global
           if (_scchn::I64 < 101) goto ccgmC; else goto ccgmL;
       ccgmL: // global
           I64[Sp - 16] = block_ccgmK_info;
           R6 = _scchd::P64;
           R5 = GHC.Types.False_closure+1;
           R4 = _scchb::P64;
           R3 = GHC.Float.FFExponent_closure+1;
           R2 = R2;
           I64[Sp - 8] = _scchi::I64;
           Sp = Sp - 16;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
       ccgmW: // global
           I64[Sp - 40] = block_ccgmV_info;
           R1 = _scchc::P64;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = _scchb::P64;
           P64[Sp - 16] = _scchd::P64;
           I64[Sp - 8] = _scchi::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucgo0; else goto ccgmY;
       ucgo0: // global
           call _ccgmV(R1) args: 0, res: 0, upd: 0;
       ccgmY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucgnS: // global
           if (_scchn::I64 >= 104) goto ccgmC; else goto ccgno;
       ccgmC: // global
           R1 = Text.Printf.formatRealFloat1_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       ccgno: // global
           I64[Sp - 40] = block_ccgnn_info;
           R1 = _scchc::P64;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = _scchb::P64;
           P64[Sp - 16] = _scchd::P64;
           I64[Sp - 8] = _scchi::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucgo1; else goto ccgnq;
       ucgo1: // global
           call _ccgnn(R1) args: 0, res: 0, upd: 0;
       ccgnq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wdfmt_info" {
     Text.Printf.$wdfmt_info:
         const Text.Printf.$wdfmt_entry;
         const 0;
         const 15543486644238;
         const 21474836480;
         const SccKB_srt+64;
         const 133;
         const Text.Printf.$wdfmt_slow;
 },
 _ccgmK() //  [R1]
         { []
         }
     {offset
       ccgmK: // global
           P64[Sp] = R1;
           call _scchr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgmK_info" {
     block_ccgmK_info:
         const _ccgmK;
         const 65;
         const 73014444062;
         const SccKB_srt+72;
 },
 _ccgmV() //  [R1]
         { []
         }
     {offset
       ccgmV: // global
           _scch9::P64 = P64[Sp + 8];
           _scchb::P64 = P64[Sp + 16];
           _scchd::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto ccgn5; else goto ccgne;
       ccgn5: // global
           I64[Sp + 24] = block_ccgn2_info;
           R6 = _scchd::P64;
           R5 = GHC.Types.False_closure+1;
           R4 = _scchb::P64;
           R3 = GHC.Float.FFFixed_closure+2;
           R2 = _scch9::P64;
           Sp = Sp + 24;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
       ccgne: // global
           I64[Sp + 24] = block_ccgnc_info;
           R6 = _scchd::P64;
           R5 = GHC.Types.True_closure+2;
           R4 = _scchb::P64;
           R3 = GHC.Float.FFFixed_closure+2;
           R2 = _scch9::P64;
           Sp = Sp + 24;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgmV_info" {
     block_ccgmV_info:
         const _ccgmV;
         const 516;
         const 1172526071838;
         const SccKB_srt+72;
 },
 _ccgn2() //  [R1]
         { []
         }
     {offset
       ccgn2: // global
           P64[Sp] = R1;
           call _scchr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgn2_info" {
     block_ccgn2_info:
         const _ccgn2;
         const 65;
         const 73014444062;
         const SccKB_srt+72;
 },
 _ccgnc() //  [R1]
         { []
         }
     {offset
       ccgnc: // global
           P64[Sp] = R1;
           call _scchr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgnc_info" {
     block_ccgnc_info:
         const _ccgnc;
         const 65;
         const 73014444062;
         const SccKB_srt+72;
 },
 _ccgnn() //  [R1]
         { []
         }
     {offset
       ccgnn: // global
           _scch9::P64 = P64[Sp + 8];
           _scchb::P64 = P64[Sp + 16];
           _scchd::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto ccgnx; else goto ccgnG;
       ccgnx: // global
           I64[Sp + 24] = block_ccgnu_info;
           R6 = _scchd::P64;
           R5 = GHC.Types.False_closure+1;
           R4 = _scchb::P64;
           R3 = GHC.Float.FFGeneric_closure+3;
           R2 = _scch9::P64;
           Sp = Sp + 24;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
       ccgnG: // global
           I64[Sp + 24] = block_ccgnE_info;
           R6 = _scchd::P64;
           R5 = GHC.Types.True_closure+2;
           R4 = _scchb::P64;
           R3 = GHC.Float.FFGeneric_closure+3;
           R2 = _scch9::P64;
           Sp = Sp + 24;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgnn_info" {
     block_ccgnn_info:
         const _ccgnn;
         const 516;
         const 1172526071838;
         const SccKB_srt+72;
 },
 _ccgnu() //  [R1]
         { []
         }
     {offset
       ccgnu: // global
           P64[Sp] = R1;
           call _scchr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgnu_info" {
     block_ccgnu_info:
         const _ccgnu;
         const 65;
         const 73014444062;
         const SccKB_srt+72;
 },
 _ccgnE() //  [R1]
         { []
         }
     {offset
       ccgnE: // global
           P64[Sp] = R1;
           call _scchr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgnE_info" {
     block_ccgnE_info:
         const _ccgnE;
         const 65;
         const 73014444062;
         const SccKB_srt+72;
 },
 _scchr() //  []
         { []
         }
     {offset
       scchr: // global
           _scchs::P64 = P64[Sp];
           if (I64[Sp + 8] == 0) goto ccgmb; else goto ccglO;
       ccgmb: // global
           I64[Sp + 8] = block_ccgma_info;
           R1 = _scchs::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucgob; else goto ccgmc;
       ucgob: // global
           call _ccgma(R1) args: 0, res: 0, upd: 0;
       ccgmc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccglO: // global
           I64[Sp + 8] = block_ccglM_info;
           R3 = _scchs::P64;
           R2 = GHC.Unicode.toUpper_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccgma() //  [R1]
         { []
         }
     {offset
       ccgma: // global
           if (R1 & 7 == 1) goto ucgnZ; else goto ccgmn;
       ucgnZ: // global
           Sp = Sp + 8;
           call _ccgmi() args: 0, res: 0, upd: 0;
       ccgmn: // global
           I64[Sp - 16] = block_ccgml_info;
           _scchA::P64 = R1;
           _scchC::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scchC::P64;
           P64[Sp] = _scchA::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucgo4; else goto ccgmo;
       ucgo4: // global
           call _ccgml(R1) args: 0, res: 0, upd: 0;
       ccgmo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgma_info" {
     block_ccgma_info:
         const _ccgma;
         const 0;
         const 4294967326;
         const SccKB_srt+104;
 },
 _ccgml() //  [R1]
         { []
         }
     {offset
       ccgml: // global
           if (I64[R1 + 7] == 45) goto ccgmw; else goto ccgmv;
       ccgmw: // global
           R2 = P64[Sp + 8];
           R1 = Text.Printf.$fPrintfArgDouble8_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccgmv: // global
           R2 = P64[Sp + 16];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgml_info" {
     block_ccgml_info:
         const _ccgml;
         const 2;
         const 4294967326;
         const SccKB_srt+104;
 },
 _ccglM() //  [R1]
         { []
         }
     {offset
       ccglM: // global
           if (R1 & 7 == 1) goto ucgnY; else goto ccglZ;
       ucgnY: // global
           Sp = Sp + 8;
           call _ccgmi() args: 0, res: 0, upd: 0;
       ccglZ: // global
           I64[Sp - 16] = block_ccglX_info;
           _scchu::P64 = R1;
           _scchw::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scchw::P64;
           P64[Sp] = _scchu::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucgo2; else goto ccgm0;
       ucgo2: // global
           call _ccglX(R1) args: 0, res: 0, upd: 0;
       ccgm0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccglM_info" {
     block_ccglM_info:
         const _ccglM;
         const 0;
         const 4294967326;
         const SccKB_srt+104;
 },
 _ccgmi() //  []
         { []
         }
     {offset
       ccgmi: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccglX() //  [R1]
         { []
         }
     {offset
       ccglX: // global
           if (I64[R1 + 7] == 45) goto ccgm8; else goto ccgm7;
       ccgm8: // global
           R2 = P64[Sp + 8];
           R1 = Text.Printf.$fPrintfArgDouble8_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccgm7: // global
           R2 = P64[Sp + 16];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccglX_info" {
     block_ccglX_info:
         const _ccglX;
         const 2;
         const 4294967326;
         const SccKB_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.098224621 UTC

[section ""cstring" . Text.Printf.$trModule4_bytes" {
     Text.Printf.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.099844255 UTC

[section ""data" . Text.Printf.$trModule3_closure" {
     Text.Printf.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.101762441 UTC

[section ""cstring" . Text.Printf.$trModule2_bytes" {
     Text.Printf.$trModule2_bytes:
         I8[] [84,101,120,116,46,80,114,105,110,116,102]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.103425425 UTC

[section ""data" . Text.Printf.$trModule1_closure" {
     Text.Printf.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.105098928 UTC

[section ""data" . Text.Printf.$trModule_closure" {
     Text.Printf.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.Printf.$trModule3_closure+1;
         const Text.Printf.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.106835012 UTC

[section ""data" . $krep_rccbn_closure" {
     $krep_rccbn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.109053951 UTC

[section ""data" . $krep1_rccbo_closure" {
     $krep1_rccbo_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.1108089 UTC

[section ""data" . $krep2_rccbp_closure" {
     $krep2_rccbp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcHandle_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.112534197 UTC

[section ""data" . $krep3_rccbq_closure" {
     $krep3_rccbq_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.114364632 UTC

[section ""data" . $krep4_rccbr_closure" {
     $krep4_rccbr_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.116134622 UTC

[section ""data" . $krep5_rccbs_closure" {
     $krep5_rccbs_closure:
         const :_con_info;
         const $krep1_rccbo_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.117878169 UTC

[section ""data" . $krep6_rccbt_closure" {
     $krep6_rccbt_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep5_rccbs_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.119649096 UTC

[section ""data" . $krep7_rccbu_closure" {
     $krep7_rccbu_closure:
         const :_con_info;
         const $krep3_rccbq_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.121834621 UTC

[section ""data" . $krep8_rccbv_closure" {
     $krep8_rccbv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep7_rccbu_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.123496424 UTC

[section ""data" . $krep9_rccbw_closure" {
     $krep9_rccbw_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rccbv_closure+1;
         const $krep8_rccbv_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.125266038 UTC

[section ""data" . Text.Printf.$tcHPrintfType1_closure" {
     Text.Printf.$tcHPrintfType1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep4_rccbr_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.126979206 UTC

[section ""data" . $krep10_rccbx_closure" {
     $krep10_rccbx_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.128672936 UTC

[section ""data" . $krep11_rccby_closure" {
     $krep11_rccby_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rccbx_closure+2;
         const $krep3_rccbq_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.130405698 UTC

[section ""data" . $krep12_rccbz_closure" {
     $krep12_rccbz_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rccbq_closure+1;
         const $krep10_rccbx_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.132132415 UTC

[section ""cstring" . Text.Printf.$tcIsChar2_bytes" {
     Text.Printf.$tcIsChar2_bytes:
         I8[] [73,115,67,104,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.134282294 UTC

[section ""data" . Text.Printf.$tcIsChar1_closure" {
     Text.Printf.$tcIsChar1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tcIsChar2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.136170181 UTC

[section ""data" . Text.Printf.$tcIsChar_closure" {
     Text.Printf.$tcIsChar_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tcIsChar1_closure+1;
         const Text.Printf.$tcHPrintfType1_closure+4;
         const 660225335504909605;
         const 5800397900948792736;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.138573862 UTC

[section ""data" . $krep13_rccbA_closure" {
     $krep13_rccbA_closure:
         const :_con_info;
         const $krep10_rccbx_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.140257109 UTC

[section ""data" . $krep14_rccbB_closure" {
     $krep14_rccbB_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Printf.$tcIsChar_closure+1;
         const $krep13_rccbA_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.142039964 UTC

[section ""data" . $krep15_rccbC_closure" {
     $krep15_rccbC_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_rccbz_closure+4;
         const $krep14_rccbB_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.143676831 UTC

[section ""data" . Text.Printf.$tc'C:IsChar1_closure" {
     Text.Printf.$tc'C:IsChar1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_rccby_closure+4;
         const $krep15_rccbC_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.145284626 UTC

[section ""cstring" . Text.Printf.$tc'C:IsChar3_bytes" {
     Text.Printf.$tc'C:IsChar3_bytes:
         I8[] [39,67,58,73,115,67,104,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.146877472 UTC

[section ""data" . Text.Printf.$tc'C:IsChar2_closure" {
     Text.Printf.$tc'C:IsChar2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'C:IsChar3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.148632361 UTC

[section ""data" . Text.Printf.$tc'C:IsChar_closure" {
     Text.Printf.$tc'C:IsChar_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'C:IsChar2_closure+1;
         const Text.Printf.$tc'C:IsChar1_closure+4;
         const 15586488259906363003;
         const 17643381548147423706;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.150453151 UTC

[section ""cstring" . Text.Printf.$tcFormatAdjustment2_bytes" {
     Text.Printf.$tcFormatAdjustment2_bytes:
         I8[] [70,111,114,109,97,116,65,100,106,117,115,116,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.15215437 UTC

[section ""data" . Text.Printf.$tcFormatAdjustment1_closure" {
     Text.Printf.$tcFormatAdjustment1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tcFormatAdjustment2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.153946807 UTC

[section ""data" . Text.Printf.$tcFormatAdjustment_closure" {
     Text.Printf.$tcFormatAdjustment_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tcFormatAdjustment1_closure+1;
         const GHC.Types.krep$*_closure;
         const 7532892403054408380;
         const 17299592949916286280;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.155691875 UTC

[section ""data" . Text.Printf.$tc'LeftAdjust1_closure" {
     Text.Printf.$tc'LeftAdjust1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Printf.$tcFormatAdjustment_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.157400633 UTC

[section ""cstring" . Text.Printf.$tc'LeftAdjust3_bytes" {
     Text.Printf.$tc'LeftAdjust3_bytes:
         I8[] [39,76,101,102,116,65,100,106,117,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.159109981 UTC

[section ""data" . Text.Printf.$tc'LeftAdjust2_closure" {
     Text.Printf.$tc'LeftAdjust2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'LeftAdjust3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.161856392 UTC

[section ""data" . Text.Printf.$tc'LeftAdjust_closure" {
     Text.Printf.$tc'LeftAdjust_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'LeftAdjust2_closure+1;
         const Text.Printf.$tc'LeftAdjust1_closure+1;
         const 3724221440131574524;
         const 12430068224974793646;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.163551904 UTC

[section ""cstring" . Text.Printf.$tc'ZeroPad2_bytes" {
     Text.Printf.$tc'ZeroPad2_bytes:
         I8[] [39,90,101,114,111,80,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.16530388 UTC

[section ""data" . Text.Printf.$tc'ZeroPad1_closure" {
     Text.Printf.$tc'ZeroPad1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'ZeroPad2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.167016518 UTC

[section ""data" . Text.Printf.$tc'ZeroPad_closure" {
     Text.Printf.$tc'ZeroPad_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'ZeroPad1_closure+1;
         const Text.Printf.$tc'LeftAdjust1_closure+1;
         const 4688343247861108158;
         const 7307113320833774212;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.168886463 UTC

[section ""data" . $krep16_rccbD_closure" {
     $krep16_rccbD_closure:
         const :_con_info;
         const Text.Printf.$tc'LeftAdjust1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.170664661 UTC

[section ""data" . $krep17_rccbE_closure" {
     $krep17_rccbE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep16_rccbD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.172385262 UTC

[section ""cstring" . Text.Printf.$tcFormatSign2_bytes" {
     Text.Printf.$tcFormatSign2_bytes:
         I8[] [70,111,114,109,97,116,83,105,103,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.174073394 UTC

[section ""data" . Text.Printf.$tcFormatSign1_closure" {
     Text.Printf.$tcFormatSign1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tcFormatSign2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.175784783 UTC

[section ""data" . Text.Printf.$tcFormatSign_closure" {
     Text.Printf.$tcFormatSign_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tcFormatSign1_closure+1;
         const GHC.Types.krep$*_closure;
         const 35986971025498593;
         const 9833165860459639351;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.178271874 UTC

[section ""data" . Text.Printf.$tc'SignPlus1_closure" {
     Text.Printf.$tc'SignPlus1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Printf.$tcFormatSign_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.179982703 UTC

[section ""cstring" . Text.Printf.$tc'SignPlus3_bytes" {
     Text.Printf.$tc'SignPlus3_bytes:
         I8[] [39,83,105,103,110,80,108,117,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.18178185 UTC

[section ""data" . Text.Printf.$tc'SignPlus2_closure" {
     Text.Printf.$tc'SignPlus2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'SignPlus3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.183475693 UTC

[section ""data" . Text.Printf.$tc'SignPlus_closure" {
     Text.Printf.$tc'SignPlus_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'SignPlus2_closure+1;
         const Text.Printf.$tc'SignPlus1_closure+1;
         const 18302065795158432479;
         const 11830941225366619964;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.185219572 UTC

[section ""cstring" . Text.Printf.$tc'SignSpace2_bytes" {
     Text.Printf.$tc'SignSpace2_bytes:
         I8[] [39,83,105,103,110,83,112,97,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.187452749 UTC

[section ""data" . Text.Printf.$tc'SignSpace1_closure" {
     Text.Printf.$tc'SignSpace1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'SignSpace2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.189171745 UTC

[section ""data" . Text.Printf.$tc'SignSpace_closure" {
     Text.Printf.$tc'SignSpace_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'SignSpace1_closure+1;
         const Text.Printf.$tc'SignPlus1_closure+1;
         const 111286303843533919;
         const 13624428119758319457;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.191016129 UTC

[section ""data" . $krep18_rccbF_closure" {
     $krep18_rccbF_closure:
         const :_con_info;
         const Text.Printf.$tc'SignPlus1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.192765097 UTC

[section ""data" . $krep19_rccbG_closure" {
     $krep19_rccbG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep18_rccbF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.194962919 UTC

[section ""cstring" . Text.Printf.$tcFieldFormat2_bytes" {
     Text.Printf.$tcFieldFormat2_bytes:
         I8[] [70,105,101,108,100,70,111,114,109,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.19664952 UTC

[section ""data" . Text.Printf.$tcFieldFormat1_closure" {
     Text.Printf.$tcFieldFormat1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tcFieldFormat2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.198390451 UTC

[section ""data" . Text.Printf.$tcFieldFormat_closure" {
     Text.Printf.$tcFieldFormat_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tcFieldFormat1_closure+1;
         const GHC.Types.krep$*_closure;
         const 12330325036165183082;
         const 5846211506648458401;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.200121399 UTC

[section ""data" . $krep20_rccbH_closure" {
     $krep20_rccbH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Printf.$tcFieldFormat_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.201794699 UTC

[section ""data" . $krep21_rccbI_closure" {
     $krep21_rccbI_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep20_rccbH_closure+1;
         const $krep9_rccbw_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.203500783 UTC

[section ""data" . $krep22_rccbJ_closure" {
     $krep22_rccbJ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rccbx_closure+2;
         const $krep21_rccbI_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.205218941 UTC

[section ""data" . $krep23_rccbK_closure" {
     $krep23_rccbK_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rccbq_closure+1;
         const $krep20_rccbH_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.207356608 UTC

[section ""data" . $krep24_rccbL_closure" {
     $krep24_rccbL_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rccbv_closure+1;
         const $krep23_rccbK_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.209043306 UTC

[section ""data" . $krep25_rccbM_closure" {
     $krep25_rccbM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rccbn_closure+1;
         const $krep24_rccbL_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.210817921 UTC

[section ""data" . $krep26_rccbN_closure" {
     $krep26_rccbN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep19_rccbG_closure+1;
         const $krep25_rccbM_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.213008798 UTC

[section ""data" . $krep27_rccbO_closure" {
     $krep27_rccbO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_rccbE_closure+1;
         const $krep26_rccbN_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.214743072 UTC

[section ""data" . $krep28_rccbP_closure" {
     $krep28_rccbP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rccbt_closure+1;
         const $krep27_rccbO_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.216449741 UTC

[section ""data" . Text.Printf.$tc'FieldFormat1_closure" {
     Text.Printf.$tc'FieldFormat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rccbt_closure+1;
         const $krep28_rccbP_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.218202676 UTC

[section ""cstring" . Text.Printf.$tc'FieldFormat3_bytes" {
     Text.Printf.$tc'FieldFormat3_bytes:
         I8[] [39,70,105,101,108,100,70,111,114,109,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.219820372 UTC

[section ""data" . Text.Printf.$tc'FieldFormat2_closure" {
     Text.Printf.$tc'FieldFormat2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'FieldFormat3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.221899822 UTC

[section ""data" . Text.Printf.$tc'FieldFormat_closure" {
     Text.Printf.$tc'FieldFormat_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'FieldFormat2_closure+1;
         const Text.Printf.$tc'FieldFormat1_closure+4;
         const 11348432599023007686;
         const 6814357301696130957;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.223633403 UTC

[section ""cstring" . Text.Printf.$tcFormatParse2_bytes" {
     Text.Printf.$tcFormatParse2_bytes:
         I8[] [70,111,114,109,97,116,80,97,114,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.225286699 UTC

[section ""data" . Text.Printf.$tcFormatParse1_closure" {
     Text.Printf.$tcFormatParse1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tcFormatParse2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.227068193 UTC

[section ""data" . Text.Printf.$tcFormatParse_closure" {
     Text.Printf.$tcFormatParse_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tcFormatParse1_closure+1;
         const GHC.Types.krep$*_closure;
         const 5517048358589873764;
         const 8326725038359313810;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.228889437 UTC

[section ""data" . $krep29_rccbQ_closure" {
     $krep29_rccbQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Printf.$tcFormatParse_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.230662561 UTC

[section ""data" . $krep30_rccbR_closure" {
     $krep30_rccbR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rccbv_closure+1;
         const $krep29_rccbQ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.232352663 UTC

[section ""data" . $krep31_rccbS_closure" {
     $krep31_rccbS_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rccbx_closure+2;
         const $krep30_rccbR_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.234563949 UTC

[section ""data" . $krep32_rccbT_closure" {
     $krep32_rccbT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rccbq_closure+1;
         const $krep30_rccbR_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.236273338 UTC

[section ""data" . Text.Printf.$tc'FormatParse1_closure" {
     Text.Printf.$tc'FormatParse1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rccbv_closure+1;
         const $krep32_rccbT_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.238423099 UTC

[section ""cstring" . Text.Printf.$tc'FormatParse3_bytes" {
     Text.Printf.$tc'FormatParse3_bytes:
         I8[] [39,70,111,114,109,97,116,80,97,114,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.240139801 UTC

[section ""data" . Text.Printf.$tc'FormatParse2_closure" {
     Text.Printf.$tc'FormatParse2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'FormatParse3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.241875071 UTC

[section ""data" . Text.Printf.$tc'FormatParse_closure" {
     Text.Printf.$tc'FormatParse_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'FormatParse2_closure+1;
         const Text.Printf.$tc'FormatParse1_closure+4;
         const 549767054447046648;
         const 1116614444935710689;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.243656158 UTC

[section ""data" . $krep33_rccbU_closure" {
     $krep33_rccbU_closure:
         const :_con_info;
         const $krep21_rccbI_closure+4;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.245305249 UTC

[section ""data" . $krep34_rccbV_closure" {
     $krep34_rccbV_closure:
         const :_con_info;
         const $krep30_rccbR_closure+4;
         const $krep33_rccbU_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.246975072 UTC

[section ""data" . $krep35_rccbW_closure" {
     $krep35_rccbW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep34_rccbV_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.248670769 UTC

[section ""data" . $krep36_rccbX_closure" {
     $krep36_rccbX_closure:
         const :_con_info;
         const $krep35_rccbW_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.250360193 UTC

[section ""data" . $krep37_rccbY_closure" {
     $krep37_rccbY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep36_rccbX_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.252108826 UTC

[section ""data" . $krep38_rccbZ_closure" {
     $krep38_rccbZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_rccbY_closure+1;
         const $krep10_rccbx_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.25389996 UTC

[section ""data" . $krep39_rccc0_closure" {
     $krep39_rccc0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rccbv_closure+1;
         const $krep38_rccbZ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.255576189 UTC

[section ""data" . $krep40_rccc1_closure" {
     $krep40_rccc1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rccbp_closure+1;
         const $krep39_rccc0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.257225447 UTC

[section ""cstring" . Text.Printf.$tcPrintfArg2_bytes" {
     Text.Printf.$tcPrintfArg2_bytes:
         I8[] [80,114,105,110,116,102,65,114,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.259269862 UTC

[section ""data" . Text.Printf.$tcPrintfArg1_closure" {
     Text.Printf.$tcPrintfArg1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tcPrintfArg2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.26097332 UTC

[section ""data" . Text.Printf.$tcPrintfArg_closure" {
     Text.Printf.$tcPrintfArg_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tcPrintfArg1_closure+1;
         const Text.Printf.$tcHPrintfType1_closure+4;
         const 14684532792197610005;
         const 5760551473172190061;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.26278719 UTC

[section ""data" . $krep41_rccc2_closure" {
     $krep41_rccc2_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Printf.$tcPrintfArg_closure+1;
         const $krep13_rccbA_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.265084178 UTC

[section ""data" . $krep42_rccc3_closure" {
     $krep42_rccc3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep31_rccbS_closure+4;
         const $krep41_rccc2_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.266797925 UTC

[section ""data" . Text.Printf.$tc'C:PrintfArg1_closure" {
     Text.Printf.$tc'C:PrintfArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_rccbJ_closure+4;
         const $krep42_rccc3_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.268556114 UTC

[section ""cstring" . Text.Printf.$tc'C:PrintfArg3_bytes" {
     Text.Printf.$tc'C:PrintfArg3_bytes:
         I8[] [39,67,58,80,114,105,110,116,102,65,114,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.27105173 UTC

[section ""data" . Text.Printf.$tc'C:PrintfArg2_closure" {
     Text.Printf.$tc'C:PrintfArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'C:PrintfArg3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.272807914 UTC

[section ""data" . Text.Printf.$tc'C:PrintfArg_closure" {
     Text.Printf.$tc'C:PrintfArg_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'C:PrintfArg2_closure+1;
         const Text.Printf.$tc'C:PrintfArg1_closure+4;
         const 11923342243699112506;
         const 8346787778082712340;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.274658679 UTC

[section ""cstring" . Text.Printf.$tcHPrintfType3_bytes" {
     Text.Printf.$tcHPrintfType3_bytes:
         I8[] [72,80,114,105,110,116,102,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.276329243 UTC

[section ""data" . Text.Printf.$tcHPrintfType2_closure" {
     Text.Printf.$tcHPrintfType2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tcHPrintfType3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.278112813 UTC

[section ""data" . Text.Printf.$tcHPrintfType_closure" {
     Text.Printf.$tcHPrintfType_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tcHPrintfType2_closure+1;
         const Text.Printf.$tcHPrintfType1_closure+4;
         const 13104883804062546050;
         const 15477829653093370802;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.28000083 UTC

[section ""data" . $krep43_rccc4_closure" {
     $krep43_rccc4_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Printf.$tcHPrintfType_closure+1;
         const $krep13_rccbA_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.281712659 UTC

[section ""data" . Text.Printf.$tc'C:HPrintfType1_closure" {
     Text.Printf.$tc'C:HPrintfType1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep40_rccc1_closure+4;
         const $krep43_rccc4_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.283502093 UTC

[section ""cstring" . Text.Printf.$tc'C:HPrintfType3_bytes" {
     Text.Printf.$tc'C:HPrintfType3_bytes:
         I8[] [39,67,58,72,80,114,105,110,116,102,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.285197059 UTC

[section ""data" . Text.Printf.$tc'C:HPrintfType2_closure" {
     Text.Printf.$tc'C:HPrintfType2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'C:HPrintfType3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.287306019 UTC

[section ""data" . Text.Printf.$tc'C:HPrintfType_closure" {
     Text.Printf.$tc'C:HPrintfType_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'C:HPrintfType2_closure+1;
         const Text.Printf.$tc'C:HPrintfType1_closure+4;
         const 16716104921226462095;
         const 4043378586122981700;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.289114335 UTC

[section ""cstring" . Text.Printf.$tcPrintfType2_bytes" {
     Text.Printf.$tcPrintfType2_bytes:
         I8[] [80,114,105,110,116,102,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.29135716 UTC

[section ""data" . Text.Printf.$tcPrintfType1_closure" {
     Text.Printf.$tcPrintfType1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tcPrintfType2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.293042099 UTC

[section ""data" . Text.Printf.$tcPrintfType_closure" {
     Text.Printf.$tcPrintfType_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tcPrintfType1_closure+1;
         const Text.Printf.$tcHPrintfType1_closure+4;
         const 16100185319445667829;
         const 10371264040433388740;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.294875236 UTC

[section ""data" . $krep44_rccc5_closure" {
     $krep44_rccc5_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Printf.$tcPrintfType_closure+1;
         const $krep13_rccbA_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.296571157 UTC

[section ""data" . Text.Printf.$tc'C:PrintfType1_closure" {
     Text.Printf.$tc'C:PrintfType1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep39_rccc0_closure+4;
         const $krep44_rccc5_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.29873519 UTC

[section ""cstring" . Text.Printf.$tc'C:PrintfType3_bytes" {
     Text.Printf.$tc'C:PrintfType3_bytes:
         I8[] [39,67,58,80,114,105,110,116,102,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.300320165 UTC

[section ""data" . Text.Printf.$tc'C:PrintfType2_closure" {
     Text.Printf.$tc'C:PrintfType2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'C:PrintfType3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.302064936 UTC

[section ""data" . Text.Printf.$tc'C:PrintfType_closure" {
     Text.Printf.$tc'C:PrintfType_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'C:PrintfType2_closure+1;
         const Text.Printf.$tc'C:PrintfType1_closure+4;
         const 6199067271817529220;
         const 10070277982064886839;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.303872693 UTC

[section ""cstring" . Text.Printf.$fPrintfArgChar24_bytes" {
     Text.Printf.$fPrintfArgChar24_bytes:
         I8[] [104,104]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.306258731 UTC

[section ""data" . Text.Printf.$fPrintfArgChar23_closure" {
     Text.Printf.$fPrintfArgChar23_closure:
         const Text.Printf.$fPrintfArgChar23_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar23_entry() //  [R1]
         { []
         }
     {offset
       ccgr8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgr9; else goto ccgra;
       ccgr9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgra: // global
           (_ccgr5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgr5::I64 == 0) goto ccgr7; else goto ccgr6;
       ccgr7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgr6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgr5::I64;
           R2 = Text.Printf.$fPrintfArgChar24_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar23_info" {
     Text.Printf.$fPrintfArgChar23_info:
         const Text.Printf.$fPrintfArgChar23_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.310012217 UTC

[section ""data" . sat_scchP_closure" {
     sat_scchP_closure:
         const GHC.Types.I#_con_info;
         const 128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.311774339 UTC

[section ""data" . sat_scchQ_closure" {
     sat_scchQ_closure:
         const :_con_info;
         const sat_scchP_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.31406695 UTC

[section ""data" . Text.Printf.$fPrintfArgChar22_closure" {
     Text.Printf.$fPrintfArgChar22_closure:
         const Text.Printf.$fPrintfArgChar22_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar22_entry() //  [R1]
         { []
         }
     {offset
       ccgrq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgrr; else goto ccgrs;
       ccgrr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgrs: // global
           (_ccgrn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgrn::I64 == 0) goto ccgrp; else goto ccgro;
       ccgrp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgro: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgrn::I64;
           R3 = sat_scchQ_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar22_info" {
     Text.Printf.$fPrintfArgChar22_info:
         const Text.Printf.$fPrintfArgChar22_entry;
         const 0;
         const 4294967317;
         const SccKB_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.317936074 UTC

[section ""data" . Text.Printf.$fPrintfArgChar21_closure" {
     Text.Printf.$fPrintfArgChar21_closure:
         const (,)_con_info;
         const Text.Printf.$fPrintfArgChar23_closure;
         const Text.Printf.$fPrintfArgChar22_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.320177776 UTC

[section ""cstring" . Text.Printf.$fPrintfArgChar20_bytes" {
     Text.Printf.$fPrintfArgChar20_bytes:
         I8[] [104]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.322367039 UTC

[section ""data" . Text.Printf.$fPrintfArgChar19_closure" {
     Text.Printf.$fPrintfArgChar19_closure:
         const Text.Printf.$fPrintfArgChar19_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar19_entry() //  [R1]
         { []
         }
     {offset
       ccgrI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgrJ; else goto ccgrK;
       ccgrJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgrK: // global
           (_ccgrF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgrF::I64 == 0) goto ccgrH; else goto ccgrG;
       ccgrH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgrG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgrF::I64;
           R2 = Text.Printf.$fPrintfArgChar20_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar19_info" {
     Text.Printf.$fPrintfArgChar19_info:
         const Text.Printf.$fPrintfArgChar19_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.326029602 UTC

[section ""data" . sat_scchR_closure" {
     sat_scchR_closure:
         const GHC.Types.I#_con_info;
         const 32768;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.327653862 UTC

[section ""data" . sat_scchS_closure" {
     sat_scchS_closure:
         const :_con_info;
         const sat_scchR_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.329942292 UTC

[section ""data" . Text.Printf.$fPrintfArgChar18_closure" {
     Text.Printf.$fPrintfArgChar18_closure:
         const Text.Printf.$fPrintfArgChar18_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar18_entry() //  [R1]
         { []
         }
     {offset
       ccgs0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgs1; else goto ccgs2;
       ccgs1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgs2: // global
           (_ccgrX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgrX::I64 == 0) goto ccgrZ; else goto ccgrY;
       ccgrZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgrY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgrX::I64;
           R3 = sat_scchS_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar18_info" {
     Text.Printf.$fPrintfArgChar18_info:
         const Text.Printf.$fPrintfArgChar18_entry;
         const 0;
         const 4294967317;
         const SccKB_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.333515141 UTC

[section ""data" . Text.Printf.$fPrintfArgChar17_closure" {
     Text.Printf.$fPrintfArgChar17_closure:
         const (,)_con_info;
         const Text.Printf.$fPrintfArgChar19_closure;
         const Text.Printf.$fPrintfArgChar18_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.335064061 UTC

[section ""cstring" . Text.Printf.$fPrintfArgChar16_bytes" {
     Text.Printf.$fPrintfArgChar16_bytes:
         I8[] [108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.337711726 UTC

[section ""data" . Text.Printf.$fPrintfArgChar15_closure" {
     Text.Printf.$fPrintfArgChar15_closure:
         const Text.Printf.$fPrintfArgChar15_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar15_entry() //  [R1]
         { []
         }
     {offset
       ccgsi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgsj; else goto ccgsk;
       ccgsj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgsk: // global
           (_ccgsf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgsf::I64 == 0) goto ccgsh; else goto ccgsg;
       ccgsh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgsg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgsf::I64;
           R2 = Text.Printf.$fPrintfArgChar16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar15_info" {
     Text.Printf.$fPrintfArgChar15_info:
         const Text.Printf.$fPrintfArgChar15_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.341215331 UTC

[section ""data" . sat_scchU_closure" {
     sat_scchU_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.342960312 UTC

[section ""data" . sat_scchV_closure" {
     sat_scchV_closure:
         const :_con_info;
         const sat_scchU_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.344575931 UTC

[section ""data" . sat_scchT_closure" {
     sat_scchT_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.346332145 UTC

[section ""data" . sat_scchW_closure" {
     sat_scchW_closure:
         const :_con_info;
         const sat_scchT_closure+1;
         const sat_scchV_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.349235701 UTC

[section ""data" . Text.Printf.$fPrintfArgChar14_closure" {
     Text.Printf.$fPrintfArgChar14_closure:
         const Text.Printf.$fPrintfArgChar14_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar14_entry() //  [R1]
         { []
         }
     {offset
       ccgsC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgsD; else goto ccgsE;
       ccgsD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgsE: // global
           (_ccgsz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgsz::I64 == 0) goto ccgsB; else goto ccgsA;
       ccgsB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgsA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgsz::I64;
           R3 = sat_scchW_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar14_info" {
     Text.Printf.$fPrintfArgChar14_info:
         const Text.Printf.$fPrintfArgChar14_entry;
         const 0;
         const 4294967317;
         const SccKB_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.35297862 UTC

[section ""data" . Text.Printf.$fPrintfArgChar13_closure" {
     Text.Printf.$fPrintfArgChar13_closure:
         const (,)_con_info;
         const Text.Printf.$fPrintfArgChar15_closure;
         const Text.Printf.$fPrintfArgChar14_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.354732053 UTC

[section ""cstring" . Text.Printf.$fPrintfArgChar12_bytes" {
     Text.Printf.$fPrintfArgChar12_bytes:
         I8[] [108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.356994096 UTC

[section ""data" . Text.Printf.$fPrintfArgChar11_closure" {
     Text.Printf.$fPrintfArgChar11_closure:
         const Text.Printf.$fPrintfArgChar11_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar11_entry() //  [R1]
         { []
         }
     {offset
       ccgsU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgsV; else goto ccgsW;
       ccgsV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgsW: // global
           (_ccgsR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgsR::I64 == 0) goto ccgsT; else goto ccgsS;
       ccgsT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgsS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgsR::I64;
           R2 = Text.Printf.$fPrintfArgChar12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar11_info" {
     Text.Printf.$fPrintfArgChar11_info:
         const Text.Printf.$fPrintfArgChar11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.360943829 UTC

[section ""data" . sat_scchZ_closure" {
     sat_scchZ_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.362737479 UTC

[section ""data" . sat_scci0_closure" {
     sat_scci0_closure:
         const :_con_info;
         const sat_scchZ_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.364392949 UTC

[section ""data" . sat_scchY_closure" {
     sat_scchY_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.366093233 UTC

[section ""data" . sat_scci1_closure" {
     sat_scci1_closure:
         const :_con_info;
         const sat_scchY_closure+1;
         const sat_scci0_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.367813051 UTC

[section ""data" . sat_scchX_closure" {
     sat_scchX_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.369491302 UTC

[section ""data" . sat_scci2_closure" {
     sat_scci2_closure:
         const :_con_info;
         const sat_scchX_closure+1;
         const sat_scci1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.371916023 UTC

[section ""data" . Text.Printf.$fPrintfArgChar7_closure" {
     Text.Printf.$fPrintfArgChar7_closure:
         const Text.Printf.$fPrintfArgChar7_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar7_entry() //  [R1]
         { []
         }
     {offset
       ccgtg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgth; else goto ccgti;
       ccgth: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgti: // global
           (_ccgtd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgtd::I64 == 0) goto ccgtf; else goto ccgte;
       ccgtf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgte: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgtd::I64;
           R3 = sat_scci2_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar7_info" {
     Text.Printf.$fPrintfArgChar7_info:
         const Text.Printf.$fPrintfArgChar7_entry;
         const 0;
         const 4294967317;
         const SccKB_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.375711841 UTC

[section ""data" . Text.Printf.$fPrintfArgChar10_closure" {
     Text.Printf.$fPrintfArgChar10_closure:
         const (,)_con_info;
         const Text.Printf.$fPrintfArgChar11_closure;
         const Text.Printf.$fPrintfArgChar7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.378450605 UTC

[section ""cstring" . Text.Printf.$fPrintfArgChar9_bytes" {
     Text.Printf.$fPrintfArgChar9_bytes:
         I8[] [76]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.380727341 UTC

[section ""data" . Text.Printf.$fPrintfArgChar8_closure" {
     Text.Printf.$fPrintfArgChar8_closure:
         const Text.Printf.$fPrintfArgChar8_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar8_entry() //  [R1]
         { []
         }
     {offset
       ccgty: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgtz; else goto ccgtA;
       ccgtz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgtA: // global
           (_ccgtv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgtv::I64 == 0) goto ccgtx; else goto ccgtw;
       ccgtx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgtw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgtv::I64;
           R2 = Text.Printf.$fPrintfArgChar9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar8_info" {
     Text.Printf.$fPrintfArgChar8_info:
         const Text.Printf.$fPrintfArgChar8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.384382281 UTC

[section ""data" . Text.Printf.$fPrintfArgChar6_closure" {
     Text.Printf.$fPrintfArgChar6_closure:
         const (,)_con_info;
         const Text.Printf.$fPrintfArgChar8_closure;
         const Text.Printf.$fPrintfArgChar7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.386146486 UTC

[section ""data" . Text.Printf.$fPrintfArgChar5_closure" {
     Text.Printf.$fPrintfArgChar5_closure:
         const :_con_info;
         const Text.Printf.$fPrintfArgChar6_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.387872865 UTC

[section ""data" . Text.Printf.$fPrintfArgChar4_closure" {
     Text.Printf.$fPrintfArgChar4_closure:
         const :_con_info;
         const Text.Printf.$fPrintfArgChar10_closure+1;
         const Text.Printf.$fPrintfArgChar5_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.389679778 UTC

[section ""data" . Text.Printf.$fPrintfArgChar3_closure" {
     Text.Printf.$fPrintfArgChar3_closure:
         const :_con_info;
         const Text.Printf.$fPrintfArgChar13_closure+1;
         const Text.Printf.$fPrintfArgChar4_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.391397268 UTC

[section ""data" . Text.Printf.$fPrintfArgChar2_closure" {
     Text.Printf.$fPrintfArgChar2_closure:
         const :_con_info;
         const Text.Printf.$fPrintfArgChar17_closure+1;
         const Text.Printf.$fPrintfArgChar3_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.393127653 UTC

[section ""data" . Text.Printf.intModifierMap_closure" {
     Text.Printf.intModifierMap_closure:
         const :_con_info;
         const Text.Printf.$fPrintfArgChar21_closure+1;
         const Text.Printf.$fPrintfArgChar2_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.394830054 UTC

[section ""cstring" . lvl7_rccc6_bytes" {
     lvl7_rccc6_bytes:
         I8[] [112,114,105,110,116,102,58,32,117,110,107,110,111,119,110,32,102,111,114,109,97,116,32,109,111,100,105,102,105,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.397864292 UTC

[section ""data" . Text.Printf.$fPrintfArgInt2_closure" {
     Text.Printf.$fPrintfArgInt2_closure:
         const Text.Printf.$fPrintfArgInt2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgInt2_entry() //  [R1]
         { []
         }
     {offset
       ccgtX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccgtY; else goto ccgtZ;
       ccgtY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgtZ: // global
           (_ccgtS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgtS::I64 == 0) goto ccgtU; else goto ccgtT;
       ccgtU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgtT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgtS::I64;
           I64[Sp - 24] = block_ccgtV_info;
           R2 = lvl7_rccc6_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgInt2_info" {
     Text.Printf.$fPrintfArgInt2_info:
         const Text.Printf.$fPrintfArgInt2_entry;
         const 0;
         const 4294967317;
         const SccKB_srt;
 },
 _ccgtV() //  [R1]
         { []
         }
     {offset
       ccgtV: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgtV_info" {
     block_ccgtV_info:
         const _ccgtV;
         const 0;
         const 4294967326;
         const SccKB_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.403928297 UTC

[section ""data" . Text.Printf.$wfixupMods_closure" {
     Text.Printf.$wfixupMods_closure:
         const Text.Printf.$wfixupMods_info;
         const 0;
 },
 Text.Printf.$wfixupMods_entry() //  [R2, R3]
         { []
         }
     {offset
       ccguo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgup; else goto ccguq;
       ccgup: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$wfixupMods_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccguq: // global
           I64[Sp - 16] = block_ccguh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucguJ; else goto ccgui;
       ucguJ: // global
           call _ccguh(R1) args: 0, res: 0, upd: 0;
       ccgui: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wfixupMods_info" {
     Text.Printf.$wfixupMods_info:
         const Text.Printf.$wfixupMods_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SccKB_srt+192;
 },
 _ccguh() //  [R1]
         { []
         }
     {offset
       ccguh: // global
           if (R1 & 7 == 1) goto ccgul; else goto ccgum;
       ccgul: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccgum: // global
           I64[Sp + 8] = block_ccguw_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           Sp = Sp + 8;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccguh_info" {
     block_ccguh_info:
         const _ccguh;
         const 1;
         const 21474836510;
         const SccKB_srt+192;
 },
 _ccguw() //  [R1]
         { []
         }
     {offset
       ccguw: // global
           if (R1 & 7 == 1) goto ccguD; else goto ccguH;
       ccguD: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccguH: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccguw_info" {
     block_ccguw_info:
         const _ccguw;
         const 0;
         const 4294967326;
         const SccKB_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.411785063 UTC

[section ""data" . Text.Printf.fixupMods_closure" {
     Text.Printf.fixupMods_closure:
         const Text.Printf.fixupMods_info;
         const 0;
 },
 Text.Printf.fixupMods_entry() //  [R2, R3]
         { []
         }
     {offset
       ccgvc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgvd; else goto ccgve;
       ccgvd: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.fixupMods_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccgve: // global
           I64[Sp - 16] = block_ccgv9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucgvi; else goto ccgva;
       ucgvi: // global
           call _ccgv9(R1) args: 0, res: 0, upd: 0;
       ccgva: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fixupMods_info" {
     Text.Printf.fixupMods_info:
         const Text.Printf.fixupMods_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SccKB_srt+200;
 },
 _ccgv9() //  [R1]
         { []
         }
     {offset
       ccgv9: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 47];
           Sp = Sp + 16;
           call Text.Printf.$wfixupMods_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgv9_info" {
     block_ccgv9_info:
         const _ccgv9;
         const 1;
         const 4294967326;
         const SccKB_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.423274626 UTC

[section ""data" . Text.Printf.$wparseIntFormat_closure" {
     Text.Printf.$wparseIntFormat_closure:
         const Text.Printf.$wparseIntFormat_info;
         const 0;
 },
 go_sccim_entry() //  [R1, R2]
         { []
         }
     {offset
       ccgvI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccgvJ; else goto ccgvK;
       ccgvJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccgvK: // global
           I64[Sp - 24] = block_ccgvB_info;
           _sccim::P64 = R1;
           _sccil::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sccil::P64;
           P64[Sp - 8] = _sccim::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucgxz; else goto ccgvC;
       ucgxz: // global
           call _ccgvB(R1) args: 0, res: 0, upd: 0;
       ccgvC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sccim_info" {
     go_sccim_info:
         const go_sccim_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SccKB_srt+48;
 },
 _ccgvB() //  [R1]
         { []
         }
     {offset
       ccgvB: // global
           if (R1 & 7 == 1) goto ucgxr; else goto ccgvG;
       ucgxr: // global
           Sp = Sp + 24;
           call _ccgwa() args: 0, res: 0, upd: 0;
       ccgvG: // global
           I64[Sp - 8] = block_ccgvQ_info;
           _scciq::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scciq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucgxx; else goto ccgvS;
       ucgxx: // global
           call _ccgvQ(R1) args: 0, res: 0, upd: 0;
       ccgvS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgvB_info" {
     block_ccgvB_info:
         const _ccgvB;
         const 2;
         const 4294967326;
         const SccKB_srt+48;
 },
 _ccgvQ() //  [R1]
         { []
         }
     {offset
       ccgvQ: // global
           _scciq::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccgvW_info;
           R2 = _scciq::P64;
           _sccis::P64 = P64[R1 + 7];
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _sccis::P64;
           Sp = Sp + 8;
           call go_sccim_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgvQ_info" {
     block_ccgvQ_info:
         const _ccgvQ;
         const 3;
         const 4294967326;
         const SccKB_srt+48;
 },
 _ccgvW() //  [R1]
         { []
         }
     {offset
       ccgvW: // global
           if (R1 & 7 == 1) goto ccgw4; else goto ccgwI;
       ccgw4: // global
           _sccil::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccgw1_info;
           R4 = _sccil::P64;
           R3 = P64[Sp + 16];
           R2 = GHC.Classes.$fEqChar_closure;
           Sp = Sp + 8;
           call Data.OldList.stripPrefix_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
       ccgwI: // global
           I64[Sp - 8] = block_ccgwx_info;
           _scciu::P64 = R1;
           R1 = P64[R1 + 6];
           P64[Sp] = _scciu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucgxA; else goto ccgwy;
       ucgxA: // global
           call _ccgwx(R1) args: 0, res: 0, upd: 0;
       ccgwy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgvW_info" {
     block_ccgvW_info:
         const _ccgvW;
         const 2;
         const 4294967326;
         const SccKB_srt+48;
 },
 _ccgw1() //  [R1]
         { []
         }
     {offset
       ccgw1: // global
           if (R1 & 7 == 1) goto ucgxv; else goto ccgwf;
       ucgxv: // global
           Sp = Sp + 16;
           call _ccgwa() args: 0, res: 0, upd: 0;
       ccgwf: // global
           I64[Sp] = block_ccgwd_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucgxB; else goto ccgwg;
       ucgxB: // global
           call _ccgwd(R1) args: 0, res: 0, upd: 0;
       ccgwg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgw1_info" {
     block_ccgw1_info:
         const _ccgw1;
         const 1;
         const 4294967326;
         const SccKB_srt+48;
 },
 _ccgwa() //  []
         { []
         }
     {offset
       ccgwa: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccgwd() //  [R1]
         { []
         }
     {offset
       ccgwd: // global
           if (R1 & 7 == 1) goto ucgxw; else goto ccgwr;
       ucgxw: // global
           Sp = Sp + 16;
           call _ccgxc() args: 0, res: 0, upd: 0;
       ccgwr: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccgwu; else goto ccgwt;
       ccgwu: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccgwt: // global
           _scciy::P64 = P64[R1 + 6];
           _scciz::P64 = P64[R1 + 14];
           I64[Hp - 40] = Text.Printf.FormatParse_con_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _scciy::P64;
           P64[Hp - 16] = _scciz::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgwd_info" {
     block_ccgwd_info:
         const _ccgwd;
         const 1;
         const 4294967326;
         const SccKB_srt+48;
 },
 _ccgwx() //  [R1]
         { []
         }
     {offset
       ccgwx: // global
           I64[Sp] = block_ccgwC_info;
           R3 = 0;
           R2 = P64[R1 + 7];
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgwx_info" {
     block_ccgwx_info:
         const _ccgwx;
         const 3;
         const 4294967326;
         const SccKB_srt+48;
 },
 _ccgwC() //  [R1]
         { []
         }
     {offset
       ccgwC: // global
           I64[Sp - 8] = block_ccgwG_info;
           R3 = 0;
           R2 = P64[Sp + 24];
           I64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgwC_info" {
     block_ccgwC_info:
         const _ccgwC;
         const 3;
         const 4294967326;
         const SccKB_srt+48;
 },
 _ccgwG() //  [R1]
         { []
         }
     {offset
       ccgwG: // global
           if (%MO_S_Lt_W64(I64[Sp + 8], R1)) goto ccgwU; else goto ucgxs;
       ccgwU: // global
           I64[Sp + 8] = block_ccgwS_info;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 32];
           R2 = GHC.Classes.$fEqChar_closure;
           Sp = Sp + 8;
           call Data.OldList.stripPrefix_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
       ucgxs: // global
           Sp = Sp + 16;
           call _ccgxl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgwG_info" {
     block_ccgwG_info:
         const _ccgwG;
         const 68;
         const 4294967326;
         const SccKB_srt+48;
 },
 _ccgwS() //  [R1]
         { []
         }
     {offset
       ccgwS: // global
           if (R1 & 7 == 1) goto ucgxt; else goto ccgx5;
       ucgxt: // global
           Sp = Sp + 8;
           call _ccgxl() args: 0, res: 0, upd: 0;
       ccgx5: // global
           I64[Sp + 16] = block_ccgx3_info;
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ucgxF; else goto ccgx6;
       ucgxF: // global
           call _ccgx3(R1) args: 0, res: 0, upd: 0;
       ccgx6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgwS_info" {
     block_ccgwS_info:
         const _ccgwS;
         const 131;
         const 4294967326;
         const SccKB_srt+48;
 },
 _ccgx3() //  [R1]
         { []
         }
     {offset
       ccgx3: // global
           if (R1 & 7 == 1) goto ucgxu; else goto ccgxh;
       ucgxu: // global
           Sp = Sp + 16;
           call _ccgxc() args: 0, res: 0, upd: 0;
       ccgxh: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccgxk; else goto ccgxj;
       ccgxk: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccgxj: // global
           _scciN::P64 = P64[R1 + 6];
           _scciO::P64 = P64[R1 + 14];
           I64[Hp - 40] = Text.Printf.FormatParse_con_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _scciN::P64;
           P64[Hp - 16] = _scciO::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgx3_info" {
     block_ccgx3_info:
         const _ccgx3;
         const 1;
         const 4294967326;
         const SccKB_srt+48;
 },
 _ccgxc() //  []
         { []
         }
     {offset
       ccgxc: // global
           R1 = Text.Printf.errorShortFormat_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccgxl() //  []
         { []
         }
     {offset
       ccgxl: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Printf.$wparseIntFormat_entry() //  [R2]
         { []
         }
     {offset
       ccgxO: // global
           _sccil::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto ccgxP; else goto ccgxQ;
       ccgxQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccgxS; else goto ccgxR;
       ccgxS: // global
           HpAlloc = 16;
           goto ccgxP;
       ccgxP: // global
           R2 = _sccil::P64;
           R1 = Text.Printf.$wparseIntFormat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccgxR: // global
           I64[Hp - 8] = go_sccim_info;
           P64[Hp] = _sccil::P64;
           I64[Sp - 16] = block_ccgxI_info;
           R2 = Text.Printf.intModifierMap_closure+2;
           R1 = Hp - 7;
           P64[Sp - 8] = _sccil::P64;
           Sp = Sp - 16;
           call go_sccim_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wparseIntFormat_info" {
     Text.Printf.$wparseIntFormat_info:
         const Text.Printf.$wparseIntFormat_entry;
         const 0;
         const 19140302711291918;
         const 4294967301;
         const SccKB_srt+48;
 },
 _ccgxI() //  [R1]
         { []
         }
     {offset
       ccgxI: // global
           if (R1 & 7 == 1) goto ccgxL; else goto ccgxM;
       ccgxL: // global
           _sccil::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccgxV_info;
           R1 = _sccil::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucgyf; else goto ccgxX;
       ucgyf: // global
           call _ccgxV(R1) args: 0, res: 0, upd: 0;
       ccgxX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccgxM: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgxI_info" {
     block_ccgxI_info:
         const _ccgxI;
         const 1;
         const 4294967326;
         const SccKB_srt+48;
 },
 _ccgxV() //  [R1]
         { []
         }
     {offset
       ccgxV: // global
           if (R1 & 7 == 1) goto ccgy3; else goto ccgy7;
       ccgy3: // global
           R1 = Text.Printf.errorShortFormat_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       ccgy7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccgya; else goto ccgy9;
       ccgya: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccgy9: // global
           _scciS::P64 = P64[R1 + 6];
           _scciT::P64 = P64[R1 + 14];
           I64[Hp - 24] = Text.Printf.FormatParse_con_info;
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           P64[Hp - 8] = _scciS::P64;
           P64[Hp] = _scciT::P64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgxV_info" {
     block_ccgxV_info:
         const _ccgxV;
         const 0;
         const 4294967326;
         const SccKB_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.451576661 UTC

[section ""data" . Text.Printf.parseIntFormat_closure" {
     Text.Printf.parseIntFormat_closure:
         const Text.Printf.parseIntFormat_info;
         const 0;
 },
 Text.Printf.parseIntFormat_entry() //  [R3]
         { []
         }
     {offset
       ccgzH: // global
           R2 = R3;
           call Text.Printf.$wparseIntFormat_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.parseIntFormat_info" {
     Text.Printf.parseIntFormat_info:
         const Text.Printf.parseIntFormat_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SccKB_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.454543391 UTC

[section ""cstring" . lvl8_rccc7_bytes" {
     lvl8_rccc7_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.45663196 UTC

[section ""data" . lvl9_rccc8_closure" {
     lvl9_rccc8_closure:
         const lvl9_rccc8_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_rccc8_entry() //  [R1]
         { []
         }
     {offset
       ccgzV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgzW; else goto ccgzX;
       ccgzW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgzX: // global
           (_ccgzS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgzS::I64 == 0) goto ccgzU; else goto ccgzT;
       ccgzU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgzT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgzS::I64;
           R2 = lvl8_rccc7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_rccc8_info" {
     lvl9_rccc8_info:
         const lvl9_rccc8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.460546216 UTC

[section ""data" . lvl10_rccc9_closure" {
     lvl10_rccc9_closure:
         const lvl10_rccc9_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_rccc9_entry() //  [R1]
         { []
         }
     {offset
       ccgAb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgAc; else goto ccgAd;
       ccgAc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgAd: // global
           (_ccgA8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgA8::I64 == 0) goto ccgAa; else goto ccgA9;
       ccgAa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgA9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgA8::I64;
           R2 = Text.Printf.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl10_rccc9_info" {
     lvl10_rccc9_info:
         const lvl10_rccc9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.464734439 UTC

[section ""data" . lvl11_rccca_closure" {
     lvl11_rccca_closure:
         const lvl11_rccca_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_rccca_entry() //  [R1]
         { []
         }
     {offset
       ccgAr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgAs; else goto ccgAt;
       ccgAs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgAt: // global
           (_ccgAo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgAo::I64 == 0) goto ccgAq; else goto ccgAp;
       ccgAq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgAp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgAo::I64;
           R2 = Text.Printf.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_rccca_info" {
     lvl11_rccca_info:
         const lvl11_rccca_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.468172153 UTC

[section ""cstring" . lvl12_rcccb_bytes" {
     lvl12_rcccb_bytes:
         I8[] [46,47,84,101,120,116,47,80,114,105,110,116,102,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.470310817 UTC

[section ""data" . lvl13_rcccc_closure" {
     lvl13_rcccc_closure:
         const lvl13_rcccc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_rcccc_entry() //  [R1]
         { []
         }
     {offset
       ccgAI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgAJ; else goto ccgAK;
       ccgAJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgAK: // global
           (_ccgAF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgAF::I64 == 0) goto ccgAH; else goto ccgAG;
       ccgAH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgAG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgAF::I64;
           R2 = lvl12_rcccb_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_rcccc_info" {
     lvl13_rcccc_info:
         const lvl13_rcccc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.474255017 UTC

[section ""data" . lvl14_rcccd_closure" {
     lvl14_rcccd_closure:
         const GHC.Types.I#_con_info;
         const 323;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.475850689 UTC

[section ""data" . lvl15_rccce_closure" {
     lvl15_rccce_closure:
         const GHC.Types.I#_con_info;
         const 40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.477495277 UTC

[section ""data" . lvl16_rcccf_closure" {
     lvl16_rcccf_closure:
         const GHC.Types.I#_con_info;
         const 49;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.479311087 UTC

[section ""data" . lvl17_rcccg_closure" {
     lvl17_rcccg_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl10_rccc9_closure;
         const lvl11_rccca_closure;
         const lvl13_rcccc_closure;
         const lvl14_rcccd_closure+1;
         const lvl15_rccce_closure+1;
         const lvl14_rcccd_closure+1;
         const lvl16_rcccf_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.481608104 UTC

[section ""data" . lvl18_rccch_closure" {
     lvl18_rccch_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl9_rccc8_closure;
         const lvl17_rcccg_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.483937701 UTC

[section ""data" . Text.Printf.$fPrintfArgChar1_closure" {
     Text.Printf.$fPrintfArgChar1_closure:
         const Text.Printf.$fPrintfArgChar1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar1_entry() //  [R1]
         { []
         }
     {offset
       ccgB3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgB4; else goto ccgB5;
       ccgB4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgB5: // global
           (_ccgB0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgB0::I64 == 0) goto ccgB2; else goto ccgB1;
       ccgB2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgB1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgB0::I64;
           R2 = lvl18_rccch_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar1_info" {
     Text.Printf.$fPrintfArgChar1_info:
         const Text.Printf.$fPrintfArgChar1_entry;
         const 0;
         const 12884901909;
         const SccKB_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.487816856 UTC

[section ""data" . Text.Printf.$fPrintfArgChar_$cparseFormat_closure" {
     Text.Printf.$fPrintfArgChar_$cparseFormat_closure:
         const Text.Printf.$fPrintfArgChar_$cparseFormat_info;
         const 0;
 },
 Text.Printf.$fPrintfArgChar_$cparseFormat_entry() //  [R3]
         { []
         }
     {offset
       ccgBh: // global
           R2 = R3;
           call Text.Printf.$wparseIntFormat_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar_$cparseFormat_info" {
     Text.Printf.$fPrintfArgChar_$cparseFormat_info:
         const Text.Printf.$fPrintfArgChar_$cparseFormat_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SccKB_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.49109571 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble5_closure" {
     Text.Printf.$fPrintfArgDouble5_closure:
         const GHC.Types.C#_con_info;
         const 48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.496793378 UTC

[section ""data" . integral_prec_rc8qj_closure" {
     integral_prec_rc8qj_closure:
         const integral_prec_rc8qj_info;
 },
 sat_sccjf_entry() //  [R1]
         { []
         }
     {offset
       ccgC8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgC9; else goto ccgCa;
       ccgC9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgCa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs_sccjb_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccjf_info" {
     sat_sccjf_info:
         const sat_sccjf_entry;
         const 4294967297;
         const 19;
 },
 $wxs_sccjb_entry() //  [R1, R2]
         { []
         }
     {offset
       ccgCe: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccgCi; else goto ccgCh;
       ccgCi: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccgCh: // global
           if (R2 == 1) goto ccgCd; else goto ccgCc;
       ccgCd: // global
           _sccja::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _sccja::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccgCc: // global
           I64[Hp - 48] = sat_sccjf_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Text.Printf.$fPrintfArgDouble5_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs_sccjb_info" {
     $wxs_sccjb_info:
         const $wxs_sccjb_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 integral_prec_rc8qj_entry() //  [R2, R3]
         { []
         }
     {offset
       ccgCo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccgCp; else goto ccgCq;
       ccgCp: // global
           R3 = R3;
           R2 = R2;
           R1 = integral_prec_rc8qj_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccgCq: // global
           I64[Sp - 16] = block_ccgBt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucgDr; else goto ccgBu;
       ucgDr: // global
           call _ccgBt(R1) args: 0, res: 0, upd: 0;
       ccgBu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . integral_prec_rc8qj_info" {
     integral_prec_rc8qj_info:
         const integral_prec_rc8qj_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccgBt() //  [R1]
         { []
         }
     {offset
       ccgBt: // global
           if (R1 & 7 == 1) goto ccgCl; else goto ccgCm;
       ccgCl: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccgCm: // global
           I64[Sp] = block_ccgBz_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucgDo; else goto ccgBA;
       ucgDo: // global
           call _ccgBz(R1) args: 0, res: 0, upd: 0;
       ccgBA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgBt_info" {
     block_ccgBt_info:
         const _ccgBt;
         const 1;
         const 30;
 },
 _ccgBz() //  [R1]
         { []
         }
     {offset
       ccgBz: // global
           _sccj4::I64 = I64[R1 + 7];
           if (_sccj4::I64 == 0) goto ccgCI; else goto ucgDk;
       ccgCI: // global
           I64[Sp - 8] = block_ccgCH_info;
           R1 = P64[Sp + 8];
           I64[Sp] = _sccj4::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucgDp; else goto ccgCJ;
       ucgDp: // global
           call _ccgCH(R1) args: 0, res: 0, upd: 0;
       ccgCJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucgDk: // global
           I64[Sp] = _sccj4::I64;
           call _sccj5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgBz_info" {
     block_ccgBz_info:
         const _ccgBz;
         const 1;
         const 30;
 },
 _ccgCH() //  [R1]
         { []
         }
     {offset
       ccgCH: // global
           if (R1 & 7 == 1) goto ucgDl; else goto ccgCU;
       ucgDl: // global
           Sp = Sp + 8;
           call _sccj5() args: 0, res: 0, upd: 0;
       ccgCU: // global
           I64[Sp - 8] = block_ccgCS_info;
           _sccjj::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sccjj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucgDs; else goto ccgCV;
       ucgDs: // global
           call _ccgCS(R1) args: 0, res: 0, upd: 0;
       ccgCV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgCH_info" {
     block_ccgCH_info:
         const _ccgCH;
         const 66;
         const 30;
 },
 _ccgCS() //  [R1]
         { []
         }
     {offset
       ccgCS: // global
           if (I64[R1 + 7] == 48) goto ccgD6; else goto ucgDm;
       ccgD6: // global
           _sccjj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccgD5_info;
           R1 = _sccjj::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucgDu; else goto ccgD7;
       ucgDu: // global
           call _ccgD5(R1) args: 0, res: 0, upd: 0;
       ccgD7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucgDm: // global
           Sp = Sp + 16;
           call _sccj5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgCS_info" {
     block_ccgCS_info:
         const _ccgCS;
         const 131;
         const 30;
 },
 _ccgD5() //  [R1]
         { []
         }
     {offset
       ccgD5: // global
           if (R1 & 7 == 1) goto ccgDd; else goto ucgDn;
       ccgDd: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ucgDn: // global
           Sp = Sp + 8;
           call _sccj5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgD5_info" {
     block_ccgD5_info:
         const _ccgD5;
         const 66;
         const 30;
 },
 _sccj5() //  []
         { []
         }
     {offset
       sccj5: // global
           I64[Sp - 8] = block_ccgBJ_info;
           R3 = 0;
           R2 = P64[Sp + 8];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccgBJ() //  [R1]
         { []
         }
     {offset
       ccgBJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccgCy; else goto ccgCx;
       ccgCy: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccgCx: // global
           _sccj0::P64 = P64[Sp + 16];
           _sccj8::I64 = I64[Sp + 8] - R1;
           if (%MO_S_Ge_W64(0, _sccj8::I64)) goto ccgCA; else goto ccgCB;
       ccgCA: // global
           Hp = Hp - 40;
           R1 = _sccj0::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccgCB: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Text.Printf.$fPrintfArgDouble5_closure+1;
           P64[Hp - 16] = _sccj0::P64;
           I64[Hp - 8] = $wxs_sccjb_info;
           P64[Hp] = Hp - 30;
           R2 = _sccj8::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call $wxs_sccjb_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgBJ_info" {
     block_ccgBJ_info:
         const _ccgBJ;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.514426035 UTC

[section ""cstring" . lvl19_rccci_bytes" {
     lvl19_rccci_bytes:
         I8[] [84,101,120,116,47,80,114,105,110,116,102,46,104,115,58,55,49,52,58,55,45,51,57,124,40,34,34,44,32,115,41]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.517282087 UTC

[section ""data" . lvl20_rcccj_closure" {
     lvl20_rcccj_closure:
         const lvl20_rcccj_info;
         const 0;
         const 0;
         const 0;
 },
 lvl20_rcccj_entry() //  [R1]
         { []
         }
     {offset
       ccgEw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgEx; else goto ccgEy;
       ccgEx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgEy: // global
           (_ccgEt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgEt::I64 == 0) goto ccgEv; else goto ccgEu;
       ccgEv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgEu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgEt::I64;
           R2 = lvl19_rccci_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.patError_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl20_rcccj_info" {
     lvl20_rcccj_info:
         const lvl20_rcccj_entry;
         const 0;
         const 4294967317;
         const SccKB_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.522125186 UTC

[section ""data" . Text.Printf.formatChar2_closure" {
     Text.Printf.formatChar2_closure:
         const Text.Printf.formatChar2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.formatChar2_entry() //  [R1]
         { []
         }
     {offset
       ccgEM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgEN; else goto ccgEO;
       ccgEN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgEO: // global
           (_ccgEJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgEJ::I64 == 0) goto ccgEL; else goto ccgEK;
       ccgEL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgEK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgEJ::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.formatChar2_info" {
     Text.Printf.formatChar2_info:
         const Text.Printf.formatChar2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.526122095 UTC

[section ""data" . sat_sccjq_closure" {
     sat_sccjq_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.527797467 UTC

[section ""data" . sat_sccjr_closure" {
     sat_sccjr_closure:
         const :_con_info;
         const sat_sccjq_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.530172548 UTC

[section ""data" . lvl21_rccck_closure" {
     lvl21_rccck_closure:
         const lvl21_rccck_info;
         const 0;
         const 0;
         const 0;
 },
 lvl21_rccck_entry() //  [R1]
         { []
         }
     {offset
       ccgF4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgF5; else goto ccgF6;
       ccgF5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgF6: // global
           (_ccgF1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgF1::I64 == 0) goto ccgF3; else goto ccgF2;
       ccgF3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgF2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgF1::I64;
           R3 = sat_sccjr_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl21_rccck_info" {
     lvl21_rccck_info:
         const lvl21_rccck_entry;
         const 0;
         const 4294967317;
         const SccKB_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.543468617 UTC

[section ""data" . $wfmtu_rcccl_closure" {
     $wfmtu_rcccl_closure:
         const $wfmtu_rcccl_info;
         const 0;
 },
 sat_sccjG_entry() //  [R1]
         { []
         }
     {offset
       ccgFL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccgFM; else goto ccgFN;
       ccgFM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgFN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 24];
           R5 = GHC.Show.intToDigit_closure+1;
           R4 = P64[R1 + 16];
           R3 = GHC.Show.$fShowInteger_closure;
           R2 = GHC.Real.$fIntegralInteger_closure;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 24;
           call Numeric.showIntAtBase_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 32, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccjG_info" {
     sat_sccjG_info:
         const sat_sccjG_entry;
         const 2;
         const 64424509458;
         const SccKB_srt+264;
 },
 sat_sccjL_entry() //  [R1]
         { []
         }
     {offset
       ccgG4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgG5; else goto ccgG6;
       ccgG5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgG6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call integral_prec_rc8qj_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccjL_info" {
     sat_sccjL_info:
         const sat_sccjL_entry;
         const 2;
         const 18;
 },
 fmtu'_sccjy_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccgGe: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccgGf; else goto ucgHj;
       ccgGf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ucgHj: // global
           P64[Sp - 32] = R1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call _ccgFp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . fmtu'_sccjy_info" {
     fmtu'_sccjy_info:
         const fmtu'_sccjy_entry;
         const 1;
         const 1095216660489;
         const 12884901911;
         const SccKB_srt+264;
 },
 _ccgFp() //  []
         { []
         }
     {offset
       ccgFp: // global
           _sccjs::P64 = P64[P64[Sp] + 5];
           I64[Sp - 8] = block_ccgG7_info;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sccjs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucgHq; else goto ccgG8;
       ucgHq: // global
           call _ccgG7(R1) args: 0, res: 0, upd: 0;
       ccgG8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccgG7() //  [R1]
         { []
         }
     {offset
       ccgG7: // global
           if (R1 & 7 == 1) goto ucgHk; else goto ccgGc;
       ucgHk: // global
           Sp = Sp + 8;
           call _sccjC() args: 0, res: 0, upd: 0;
       ccgGc: // global
           I64[Sp - 8] = block_ccgGQ_info;
           R3 = Text.Printf.formatChar2_closure;
           R2 = P64[Sp + 32];
           P64[Sp] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgG7_info" {
     block_ccgG7_info:
         const _ccgG7;
         const 4;
         const 1095216660510;
         const SccKB_srt+264;
 },
 _ccgGQ() //  [R1]
         { []
         }
     {offset
       ccgGQ: // global
           if (R1 == 1) goto ccgHa; else goto ucgHl;
       ccgHa: // global
           _sccjN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccgH0_info;
           R3 = _sccjN::P64;
           R2 = lvl21_rccck_closure;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       ucgHl: // global
           Sp = Sp + 16;
           call _sccjC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgGQ_info" {
     block_ccgGQ_info:
         const _ccgGQ;
         const 5;
         const 1095216660510;
         const SccKB_srt+264;
 },
 _ccgH0() //  [R1]
         { []
         }
     {offset
       ccgH0: // global
           I64[Sp] = block_ccgH4_info;
           R2 = R1;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgH0_info" {
     block_ccgH0_info:
         const _ccgH0;
         const 260;
         const 1095216660510;
         const SccKB_srt+264;
 },
 _ccgH4() //  [R1]
         { []
         }
     {offset
       ccgH4: // global
           I64[Sp] = block_ccgH8_info;
           R3 = P64[Sp + 32];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgH4_info" {
     block_ccgH4_info:
         const _ccgH4;
         const 260;
         const 1095216660510;
         const SccKB_srt+264;
 },
 _ccgH8() //  [R1]
         { []
         }
     {offset
       ccgH8: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = GHC.Base.Nothing_closure+1;
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _ccgFp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgH8_info" {
     block_ccgH8_info:
         const _ccgH8;
         const 772;
         const 1095216660510;
         const SccKB_srt+264;
 },
 _sccjC() //  []
         { []
         }
     {offset
       sccjC: // global
           I64[Sp - 8] = block_ccgFx_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucgHy; else goto ccgFy;
       ucgHy: // global
           call _ccgFx(R1) args: 0, res: 0, upd: 0;
       ccgFy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccgFx() //  [R1]
         { []
         }
     {offset
       ccgFx: // global
           _sccjB::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto ccgGk; else goto ccgGv;
       ccgGk: // global
           I64[Sp + 16] = block_ccgFC_info;
           R3 = Text.Printf.formatChar2_closure;
           R2 = _sccjB::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       ccgGv: // global
           I64[Sp] = block_ccgFQ_info;
           R3 = Text.Printf.formatChar2_closure;
           R2 = _sccjB::P64;
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgFx_info" {
     block_ccgFx_info:
         const _ccgFx;
         const 132;
         const 1095216660510;
         const SccKB_srt+264;
 },
 _ccgFC() //  [R1]
         { []
         }
     {offset
       ccgFC: // global
           if (R1 == 1) goto ccgGq; else goto ucgHp;
       ccgGq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccgGt; else goto ccgGs;
       ccgGt: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccgGs: // global
           I64[Hp - 40] = sat_sccjG_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ucgHp: // global
           Sp = Sp + 24;
           call _ccgGF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgFC_info" {
     block_ccgFC_info:
         const _ccgFC;
         const 2;
         const 64424509470;
         const SccKB_srt+264;
 },
 _ccgFQ() //  [R1]
         { []
         }
     {offset
       ccgFQ: // global
           if (R1 == 1) goto ccgGB; else goto ucgHn;
       ccgGB: // global
           I64[Sp + 16] = block_ccgFV_info;
           R4 = P64[Sp + 32];
           R3 = GHC.Base.Nothing_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call fmtu'_sccjy_entry(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       ucgHn: // global
           Sp = Sp + 40;
           call _ccgGF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgFQ_info" {
     block_ccgFQ_info:
         const _ccgFQ;
         const 132;
         const 1095216660510;
         const SccKB_srt+264;
 },
 _ccgFV() //  [R1]
         { []
         }
     {offset
       ccgFV: // global
           if (R1 & 7 == 1) goto ucgHo; else goto ccgGH;
       ucgHo: // global
           Sp = Sp + 24;
           call _ccgGF() args: 0, res: 0, upd: 0;
       ccgGH: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccgGK; else goto ccgGJ;
       ccgGK: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccgGJ: // global
           _sccjK::P64 = P64[R1 + 6];
           I64[Hp - 40] = sat_sccjL_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sccjK::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgFV_info" {
     block_ccgFV_info:
         const _ccgFV;
         const 130;
         const 30;
 },
 _ccgGF() //  []
         { []
         }
     {offset
       ccgGF: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 s_sccjW_entry() //  [R1]
         { []
         }
     {offset
       ccgHO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccgHP; else goto ccgHQ;
       ccgHP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgHQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccgHF_info;
           R6 = P64[R1 + 40];
           R5 = P64[R1 + 32];
           R4 = P64[R1 + 24];
           R3 = GHC.Base.Nothing_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . s_sccjW_info" {
     s_sccjW_info:
         const s_sccjW_entry;
         const 4;
         const 12884901903;
         const SccKB_srt+328;
 },
 _ccgHF() //  [R1, R2]
         { []
         }
     {offset
       ccgHF: // global
           I64[Sp - 8] = block_ccgHH_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucgHY; else goto ccgHI;
       ucgHY: // global
           call _ccgHH(R1) args: 0, res: 0, upd: 0;
       ccgHI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgHF_info" {
     block_ccgHF_info:
         const _ccgHF;
         const 0;
         const 4294967326;
         const SccKB_srt+328;
 },
 _ccgHH() //  [R1]
         { []
         }
     {offset
       ccgHH: // global
           if (R1 & 7 == 1) goto ccgHL; else goto ccgHM;
       ccgHL: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ccgHM: // global
           R1 = lvl20_rcccj_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgHH_info" {
     block_ccgHH_info:
         const _ccgHH;
         const 1;
         const 4294967326;
         const SccKB_srt+328;
 },
 $wfmtu_rcccl_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccgI3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccgI4; else goto ccgI5;
       ccgI4: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wfmtu_rcccl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccgI5: // global
           I64[Sp - 40] = block_ccgFi_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucgJq; else goto ccgFj;
       ucgJq: // global
           call _ccgFi(R1) args: 0, res: 0, upd: 0;
       ccgFj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wfmtu_rcccl_info" {
     $wfmtu_rcccl_info:
         const $wfmtu_rcccl_entry;
         const 0;
         const 8791798054926;
         const 21474836505;
         const SccKB_srt+264;
 },
 _ccgFi() //  [R1]
         { []
         }
     {offset
       ccgFi: // global
           _sccjs::P64 = P64[Sp + 8];
           _sccju::P64 = P64[Sp + 16];
           _sccjv::P64 = P64[Sp + 24];
           _sccjw::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto ccgI0; else goto ccgI1;
       ccgI0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccgI9; else goto ccgI8;
       ccgI9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccgI8: // global
           I64[Hp - 8] = fmtu'_sccjy_info;
           P64[Hp] = _sccjs::P64;
           I64[Sp + 32] = block_ccgI6_info;
           R4 = _sccjw::P64;
           R3 = _sccjv::P64;
           R2 = _sccju::P64;
           R1 = Hp - 5;
           Sp = Sp + 32;
           call fmtu'_sccjy_entry(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       ccgI1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccgIn; else goto ccgIm;
       ccgIn: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccgIm: // global
           _sccjV::P64 = P64[R1 + 6];
           I64[Hp - 40] = s_sccjW_info;
           P64[Hp - 24] = _sccjs::P64;
           P64[Hp - 16] = _sccju::P64;
           P64[Hp - 8] = _sccjv::P64;
           P64[Hp] = _sccjw::P64;
           I64[Sp + 24] = block_ccgIk_info;
           R1 = _sccjV::P64;
           P64[Sp + 32] = Hp - 40;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto ucgJp; else goto ccgIo;
       ucgJp: // global
           call _ccgIk(R1) args: 0, res: 0, upd: 0;
       ccgIo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgFi_info" {
     block_ccgFi_info:
         const _ccgFi;
         const 4;
         const 8791798054942;
         const SccKB_srt+264;
 },
 _ccgI6() //  [R1]
         { []
         }
     {offset
       ccgI6: // global
           if (R1 & 7 == 1) goto ccgIf; else goto ccgIj;
       ccgIf: // global
           R1 = Text.Printf.errorBadArgument_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       ccgIj: // global
           R2 = P64[R1 + 6];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgI6_info" {
     block_ccgI6_info:
         const _ccgI6;
         const 0;
         const 4294967326;
         const SccKB_srt+344;
 },
 _ccgIk() //  [R1]
         { []
         }
     {offset
       ccgIk: // global
           if (R1 & 7 == 1) goto ccgIu; else goto ccgIz;
       ccgIu: // global
           R2 = P64[Sp + 8];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccgIz: // global
           I64[Sp - 16] = block_ccgIx_info;
           _scck4::P64 = R1;
           _scck6::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scck6::P64;
           P64[Sp] = _scck4::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucgJr; else goto ccgIA;
       ucgJr: // global
           call _ccgIx(R1) args: 0, res: 0, upd: 0;
       ccgIA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgIk_info" {
     block_ccgIk_info:
         const _ccgIk;
         const 1;
         const 30;
 },
 _ccgIx() //  [R1]
         { []
         }
     {offset
       ccgIx: // global
           if (I64[R1 + 7] == 48) goto ccgIL; else goto ucgJn;
       ccgIL: // global
           _scck6::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccgIK_info;
           R1 = _scck6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucgJs; else goto ccgIM;
       ucgJs: // global
           call _ccgIK(R1) args: 0, res: 0, upd: 0;
       ccgIM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucgJn: // global
           Sp = Sp + 16;
           call _ccgJi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgIx_info" {
     block_ccgIx_info:
         const _ccgIx;
         const 3;
         const 30;
 },
 _ccgIK() //  [R1]
         { []
         }
     {offset
       ccgIK: // global
           if (R1 & 7 == 1) goto ccgIT; else goto ucgJo;
       ccgIT: // global
           I64[Sp] = block_ccgIQ_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto ucgJu; else goto ccgIU;
       ucgJu: // global
           call _ccgIQ(R1) args: 0, res: 0, upd: 0;
       ccgIU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucgJo: // global
           Sp = Sp + 8;
           call _ccgJi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgIK_info" {
     block_ccgIK_info:
         const _ccgIK;
         const 2;
         const 30;
 },
 _ccgIQ() //  [R1]
         { []
         }
     {offset
       ccgIQ: // global
           if (R1 & 7 == 1) goto ccgJ0; else goto ccgJ5;
       ccgJ0: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccgJ5: // global
           I64[Sp] = block_ccgJ3_info;
           _scckb::P64 = R1;
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _scckb::P64;
           if (R1 & 7 != 0) goto ucgJw; else goto ccgJ6;
       ucgJw: // global
           call _ccgJ3(R1) args: 0, res: 0, upd: 0;
       ccgJ6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgIQ_info" {
     block_ccgIQ_info:
         const _ccgIQ;
         const 130;
         const 30;
 },
 _ccgJ3() //  [R1]
         { []
         }
     {offset
       ccgJ3: // global
           _scckb::P64 = P64[Sp + 16];
           if (I64[R1 + 7] == 48) goto ccgJe; else goto ccgJd;
       ccgJe: // global
           R2 = _scckb::P64;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccgJd: // global
           R2 = _scckb::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgJ3_info" {
     block_ccgJ3_info:
         const _ccgJ3;
         const 2;
         const 30;
 },
 _ccgJi() //  []
         { []
         }
     {offset
       ccgJi: // global
           R2 = P64[Sp + 8];
           R1 = P64[Sp];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.591764106 UTC

[section ""data" . $wfmti_rcccm_closure" {
     $wfmti_rcccm_closure:
         const $wfmti_rcccm_info;
         const 0;
 },
 sat_scckq_entry() //  [R1]
         { []
         }
     {offset
       ccgLT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccgLU; else goto ccgLV;
       ccgLU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgLV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccgLQ_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 24];
           R2 = 0;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scckq_info" {
     sat_scckq_info:
         const sat_scckq_entry;
         const 2;
         const 4294967314;
         const SccKB_srt+352;
 },
 _ccgLQ() //  [R1, R2]
         { []
         }
     {offset
       ccgLQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccgLY; else goto ccgLX;
       ccgLY: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccgLX: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 14;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call integral_prec_rc8qj_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgLQ_info" {
     block_ccgLQ_info:
         const _ccgLQ;
         const 1;
         const 30;
 },
 sat_scckw_entry() //  [R1]
         { []
         }
     {offset
       ccgM7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccgMd; else goto ccgMe;
       ccgMd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgMe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccgM5_info;
           R2 = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scckw_info" {
     sat_scckw_info:
         const sat_scckw_entry;
         const 2;
         const 4294967314;
         const SccKB_srt+352;
 },
 _ccgM5() //  [R1]
         { []
         }
     {offset
       ccgM5: // global
           I64[Sp] = block_ccgMa_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = R1;
           R2 = 0;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgM5_info" {
     block_ccgM5_info:
         const _ccgM5;
         const 1;
         const 4294967326;
         const SccKB_srt+352;
 },
 _ccgMa() //  [R1, R2]
         { []
         }
     {offset
       ccgMa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccgMi; else goto ccgMh;
       ccgMi: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccgMh: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 14;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call integral_prec_rc8qj_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgMa_info" {
     block_ccgMa_info:
         const _ccgMa;
         const 1;
         const 30;
 },
 section ""relreadonly" . ucgMv_srtd" {
     ucgMv_srtd:
         const SccKB_srt+104;
         const 33;
         const 6509559809;
 },
 $wfmti_rcccm_entry() //  [R2, R3]
         { []
         }
     {offset
       ccgMm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccgMn; else goto ccgMo;
       ccgMn: // global
           R3 = R3;
           R2 = R2;
           R1 = $wfmti_rcccm_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccgMo: // global
           I64[Sp - 24] = block_ccgLI_info;
           _scckk::P64 = R3;
           R3 = Text.Printf.formatChar2_closure;
           _scckj::P64 = R2;
           R2 = _scckk::P64;
           P64[Sp - 16] = _scckj::P64;
           P64[Sp - 8] = _scckk::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wfmti_rcccm_info" {
     $wfmti_rcccm_info:
         const $wfmti_rcccm_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ucgMv_srtd;
 },
 _ccgLI() //  [R1]
         { []
         }
     {offset
       ccgLI: // global
           _scckj::P64 = P64[Sp + 8];
           _scckk::P64 = P64[Sp + 16];
           if (R1 == 1) goto ccgMl; else goto ccgMk;
       ccgMl: // global
           Hp = Hp + 32;
           _scckl::I64 = R1;
           if (Hp > HpLim) (likely: False) goto ccgMu; else goto ccgMt;
       ccgMt: // global
           I64[Hp - 24] = sat_scckw_info;
           P64[Hp - 8] = _scckj::P64;
           P64[Hp] = _scckk::P64;
           R2 = Hp - 24;
           R1 = Text.Printf.$fPrintfArgDouble8_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccgMk: // global
           Hp = Hp + 32;
           _scckl::I64 = R1;
           if (Hp > HpLim) (likely: False) goto ccgMu; else goto ccgMq;
       ccgMu: // global
           HpAlloc = 32;
           R1 = _scckl::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccgMq: // global
           I64[Hp - 24] = sat_scckq_info;
           P64[Hp - 8] = _scckj::P64;
           P64[Hp] = _scckk::P64;
           R2 = Hp - 24;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgLI_info" {
     block_ccgLI_info:
         const _ccgLI;
         const 2;
         const 9223372041149743134;
         const SccKB_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.606823067 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble6_closure" {
     Text.Printf.$fPrintfArgDouble6_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.616804663 UTC

[section ""data" . Text.Printf.$wadjust_closure" {
     Text.Printf.$wadjust_closure:
         const Text.Printf.$wadjust_info;
 },
 x1_scckM_entry() //  [R1]
         { []
         }
     {offset
       ccgNR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccgNS; else goto ccgNT;
       ccgNS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgNT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccgNK_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucgOh; else goto ccgNL;
       ucgOh: // global
           call _ccgNK(R1) args: 0, res: 0, upd: 0;
       ccgNL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . x1_scckM_info" {
     x1_scckM_info:
         const x1_scckM_entry;
         const 1;
         const 16;
 },
 _ccgNK() //  [R1]
         { []
         }
     {offset
       ccgNK: // global
           if (R1 & 7 == 1) goto ucgOd; else goto ccgNP;
       ucgOd: // global
           Sp = Sp + 8;
           call _ccgO7() args: 0, res: 0, upd: 0;
       ccgNP: // global
           I64[Sp] = block_ccgNZ_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucgOf; else goto ccgO1;
       ucgOf: // global
           call _ccgNZ(R1) args: 0, res: 0, upd: 0;
       ccgO1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgNK_info" {
     block_ccgNK_info:
         const _ccgNK;
         const 0;
         const 30;
 },
 _ccgNZ() //  [R1]
         { []
         }
     {offset
       ccgNZ: // global
           if (R1 & 7 == 1) goto ucgOe; else goto ccgOb;
       ucgOe: // global
           Sp = Sp + 8;
           call _ccgO7() args: 0, res: 0, upd: 0;
       ccgOb: // global
           R1 = Text.Printf.$fPrintfArgDouble5_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgNZ_info" {
     block_ccgNZ_info:
         const _ccgNZ;
         const 0;
         const 30;
 },
 _ccgO7() //  []
         { []
         }
     {offset
       ccgO7: // global
           R1 = Text.Printf.$fPrintfArgDouble6_closure+1;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scckV_entry() //  [R1]
         { []
         }
     {offset
       ccgOx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgOy; else goto ccgOz;
       ccgOy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgOz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs_scckR_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scckV_info" {
     sat_scckV_info:
         const sat_scckV_entry;
         const 4294967297;
         const 19;
 },
 $wxs_scckR_entry() //  [R1, R2]
         { []
         }
     {offset
       ccgOD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccgOH; else goto ccgOG;
       ccgOH: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccgOG: // global
           if (R2 == 1) goto ccgOC; else goto ccgOB;
       ccgOC: // global
           _scckQ::P64 = P64[R1 + 15];
           Hp = Hp - 56;
           R1 = _scckQ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccgOB: // global
           _scckM::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_scckV_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scckM::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs_scckR_info" {
     $wxs_scckR_info:
         const $wxs_scckR_entry;
         const 2;
         const 11;
         const 4294967300;
 },
 fill_scckB_entry() //  [R1]
         { []
         }
     {offset
       ccgON: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccgOO; else goto ccgOP;
       ccgOO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgOP: // global
           I64[Sp - 32] = block_ccgN9_info;
           _sccky::P64 = P64[R1 + 24];
           _scckz::P64 = P64[R1 + 32];
           _scckA::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sccky::P64;
           P64[Sp - 16] = _scckz::P64;
           P64[Sp - 8] = _scckA::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucgP5; else goto ccgNa;
       ucgP5: // global
           call _ccgN9(R1) args: 0, res: 0, upd: 0;
       ccgNa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . fill_scckB_info" {
     fill_scckB_info:
         const fill_scckB_entry;
         const 4;
         const 15;
 },
 _ccgN9() //  [R1]
         { []
         }
     {offset
       ccgN9: // global
           if (R1 & 7 == 1) goto ccgOK; else goto ccgOL;
       ccgOK: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccgOL: // global
           I64[Sp] = block_ccgNf_info;
           R3 = 0;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 6];
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgN9_info" {
     block_ccgN9_info:
         const _ccgN9;
         const 3;
         const 30;
 },
 _ccgNf() //  [R1]
         { []
         }
     {offset
       ccgNf: // global
           I64[Sp] = block_ccgNj_info;
           R3 = 0;
           R2 = P64[Sp + 24];
           I64[Sp + 24] = R1;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgNf_info" {
     block_ccgNf_info:
         const _ccgNf;
         const 3;
         const 30;
 },
 _ccgNj() //  [R1]
         { []
         }
     {offset
       ccgNj: // global
           I64[Sp] = block_ccgNn_info;
           _scckF::I64 = R1;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _scckF::I64;
           if (R1 & 7 != 0) goto ucgP4; else goto ccgNo;
       ucgP4: // global
           call _ccgNn(R1) args: 0, res: 0, upd: 0;
       ccgNo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgNj_info" {
     block_ccgNj_info:
         const _ccgNj;
         const 259;
         const 30;
 },
 _ccgNn() //  [R1]
         { []
         }
     {offset
       ccgNn: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccgOX; else goto ccgOW;
       ccgOX: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccgOW: // global
           _scckH::I64 = I64[R1 + 7];
           _scckI::I64 = I64[Sp + 24] + I64[Sp + 16];
           if (%MO_S_Ge_W64(_scckI::I64,
                            _scckH::I64)) goto ccgP1; else goto ccgP3;
       ccgP3: // global
           _scckK::I64 = _scckH::I64 - _scckI::I64;
           if (%MO_S_Ge_W64(0, _scckK::I64)) goto ccgP1; else goto ccgP2;
       ccgP1: // global
           Hp = Hp - 72;
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccgP2: // global
           I64[Hp - 64] = x1_scckM_info;
           P64[Hp - 48] = P64[Sp + 8];
           I64[Hp - 40] = :_con_info;
           _ccgNG::P64 = Hp - 64;
           P64[Hp - 32] = _ccgNG::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = $wxs_scckR_info;
           P64[Hp - 8] = _ccgNG::P64;
           P64[Hp] = Hp - 38;
           R2 = _scckK::I64;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call $wxs_scckR_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgNn_info" {
     block_ccgNn_info:
         const _ccgNn;
         const 387;
         const 30;
 },
 sat_scckY_entry() //  [R1]
         { []
         }
     {offset
       ccgPk: // global
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scckY_info" {
     sat_scckY_info:
         const sat_scckY_entry;
         const 2;
         const 18;
 },
 sat_sccl1_entry() //  [R1]
         { []
         }
     {offset
       ccgPy: // global
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccl1_info" {
     sat_sccl1_info:
         const sat_sccl1_entry;
         const 2;
         const 18;
 },
 sat_sccl2_entry() //  [R1]
         { []
         }
     {offset
       ccgPH: // global
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccl2_info" {
     sat_sccl2_info:
         const sat_sccl2_entry;
         const 2;
         const 18;
 },
 sat_sccl6_entry() //  [R1]
         { []
         }
     {offset
       ccgPZ: // global
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccl6_info" {
     sat_sccl6_info:
         const sat_sccl6_entry;
         const 2;
         const 18;
 },
 Text.Printf.$wadjust_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       ccgQ6: // global
           _scckA::P64 = R5;
           _scckz::P64 = R4;
           _sccky::P64 = R3;
           _scckx::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto ccgQ7; else goto ccgQ8;
       ccgQ8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccgQa; else goto ccgQ9;
       ccgQa: // global
           HpAlloc = 48;
           goto ccgQ7;
       ccgQ7: // global
           R5 = _scckA::P64;
           R4 = _scckz::P64;
           R3 = _sccky::P64;
           R2 = _scckx::P64;
           R1 = Text.Printf.$wadjust_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccgQ9: // global
           I64[Hp - 40] = fill_scckB_info;
           P64[Hp - 24] = _scckx::P64;
           P64[Hp - 16] = _sccky::P64;
           P64[Hp - 8] = _scckz::P64;
           P64[Hp] = _scckA::P64;
           I64[Sp - 40] = block_ccgPK_info;
           R1 = _sccky::P64;
           P64[Sp - 32] = Hp - 40;
           P64[Sp - 24] = _sccky::P64;
           P64[Sp - 16] = _scckz::P64;
           P64[Sp - 8] = _scckA::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucgQN; else goto ccgPL;
       ucgQN: // global
           call _ccgPK(R1) args: 0, res: 0, upd: 0;
       ccgPL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wadjust_info" {
     Text.Printf.$wadjust_info:
         const Text.Printf.$wadjust_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _ccgPK() //  [R1]
         { []
         }
     {offset
       ccgPK: // global
           if (R1 & 7 == 1) goto ucgQH; else goto ccgQ4;
       ucgQH: // global
           Sp = Sp + 8;
           call _scckW() args: 0, res: 0, upd: 0;
       ccgQ4: // global
           I64[Sp] = block_ccgPQ_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucgQK; else goto ccgPR;
       ucgQK: // global
           call _ccgPQ(R1) args: 0, res: 0, upd: 0;
       ccgPR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgPK_info" {
     block_ccgPK_info:
         const _ccgPK;
         const 4;
         const 30;
 },
 _ccgPQ() //  [R1]
         { []
         }
     {offset
       ccgPQ: // global
           if (R1 & 7 == 1) goto ccgQw; else goto ucgQI;
       ccgQw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccgQz; else goto ccgQy;
       ccgQz: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccgQy: // global
           I64[Hp - 24] = sat_sccl6_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 24;
           R2 = P64[Sp + 24];
           Sp = Sp + 40;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       ucgQI: // global
           Sp = Sp + 8;
           call _scckW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccgPQ_info" {
     block_ccgPQ_info:
         const _ccgPQ;
         const 4;
         const 30;
 },
 _scckW() //  []
         { []
         }
     {offset
       scckW: // global
           I64[Sp - 8] = block_ccgPb_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucgQO; else goto ccgPc;
       ucgQO: // global
           call _ccgPb(R1) args: 0, res: 0, upd: 0;
       ccgPc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccgPb() //  [R1]
         { []
         }
     {offset
       ccgPb: // global
           if (R1 & 7 == 1) goto ccgQd; else goto ccgQi;
       ccgQd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccgQg; else goto ccgQf;
       ccgQg: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccgQf: // global
           I64[Hp - 24] = sat_scckY_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R3 = Hp - 24;
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       ccgQi: // global
           I64[Sp] = block_ccgPp_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucgQJ; else goto ccgPq;
       ucgQJ: // global
           call _ccgPp(R1) args: 0, res: 0, upd: 0;
       ccgPq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgPb_info" {
     block_ccgPb_info:
         const _ccgPb;
         const 132;
         const 30;
 },
 _ccgPp() //  [R1]
         { []
         }
     {offset
       ccgPp: // global
           _ccgN5::P64 = P64[Sp + 8];
           _scckz::P64 = P64[Sp + 24];
           _scckA::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto ccgQk; else goto ccgQo;
       ccgQk: // global
           Hp = Hp + 32;
           _sccl0::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccgQr; else goto ccgQm;
       ccgQm: // global
           I64[Hp - 24] = sat_sccl1_info;
           P64[Hp - 8] = _scckz::P64;
           P64[Hp] = _scckA::P64;
           R3 = Hp - 24;
           R2 = _ccgN5::P64;
           Sp = Sp + 40;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       ccgQo: // global
           Hp = Hp + 32;
           _sccl0::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccgQr; else goto ccgQq;
       ccgQr: // global
           HpAlloc = 32;
           R1 = _sccl0::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccgQq: // global
           I64[Hp - 24] = sat_sccl2_info;
           P64[Hp - 8] = _scckA::P64;
           P64[Hp] = _ccgN5::P64;
           R3 = Hp - 24;
           R2 = _scckz::P64;
           Sp = Sp + 40;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgPp_info" {
     block_ccgPp_info:
         const _ccgPp;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.652749966 UTC

[section ""cstring" . Text.Printf.$fPrintfArgDouble4_bytes" {
     Text.Printf.$fPrintfArgDouble4_bytes:
         I8[] [43]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.655174903 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble3_closure" {
     Text.Printf.$fPrintfArgDouble3_closure:
         const Text.Printf.$fPrintfArgDouble3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgDouble3_entry() //  [R1]
         { []
         }
     {offset
       ccgSE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgSF; else goto ccgSG;
       ccgSF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgSG: // global
           (_ccgSB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgSB::I64 == 0) goto ccgSD; else goto ccgSC;
       ccgSD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgSC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgSB::I64;
           R2 = Text.Printf.$fPrintfArgDouble4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgDouble3_info" {
     Text.Printf.$fPrintfArgDouble3_info:
         const Text.Printf.$fPrintfArgDouble3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.658989002 UTC

[section ""cstring" . Text.Printf.$fPrintfArgDouble2_bytes" {
     Text.Printf.$fPrintfArgDouble2_bytes:
         I8[] [32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.661153913 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble1_closure" {
     Text.Printf.$fPrintfArgDouble1_closure:
         const Text.Printf.$fPrintfArgDouble1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgDouble1_entry() //  [R1]
         { []
         }
     {offset
       ccgSV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccgSW; else goto ccgSX;
       ccgSW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgSX: // global
           (_ccgSS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccgSS::I64 == 0) goto ccgSU; else goto ccgST;
       ccgSU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccgST: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccgSS::I64;
           R2 = Text.Printf.$fPrintfArgDouble2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgDouble1_info" {
     Text.Printf.$fPrintfArgDouble1_info:
         const Text.Printf.$fPrintfArgDouble1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.666997227 UTC

[section ""data" . Text.Printf.$wadjustSigned_closure" {
     Text.Printf.$wadjustSigned_closure:
         const Text.Printf.$wadjustSigned_info;
         const 0;
 },
 Text.Printf.$wadjustSigned_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccgTg: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccgTh; else goto ccgTi;
       ccgTh: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$wadjustSigned_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccgTi: // global
           I64[Sp - 40] = block_ccgT9_info;
           R1 = R4;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucgU3; else goto ccgTa;
       ucgU3: // global
           call _ccgT9(R1) args: 0, res: 0, upd: 0;
       ccgTa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wadjustSigned_info" {
     Text.Printf.$wadjustSigned_info:
         const Text.Printf.$wadjustSigned_entry;
         const 0;
         const 30064771086;
         const 21474836505;
         const SccKB_srt+368;
 },
 _ccgT9() //  [R1]
         { []
         }
     {offset
       ccgT9: // global
           if (R1 & 7 == 1) goto ccgTd; else goto ccgTe;
       ccgTd: // global
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
       ccgTe: // global
           I64[Sp] = block_ccgTo_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucgU2; else goto ccgTq;
       ucgU2: // global
           call _ccgTo(R1) args: 0, res: 0, upd: 0;
       ccgTq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgT9_info" {
     block_ccgT9_info:
         const _ccgT9;
         const 4;
         const 12884901918;
         const SccKB_srt+376;
 },
 _ccgTo() //  [R1]
         { []
         }
     {offset
       ccgTo: // global
           _sccla::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto ccgTx; else goto ccgTN;
       ccgTx: // global
           I64[Sp] = block_ccgTu_info;
           R1 = _sccla::P64;
           if (R1 & 7 != 0) goto ucgU4; else goto ccgTy;
       ucgU4: // global
           call _ccgTu(R1) args: 0, res: 0, upd: 0;
       ccgTy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccgTN: // global
           I64[Sp] = block_ccgTL_info;
           R1 = _sccla::P64;
           if (R1 & 7 != 0) goto ucgU5; else goto ccgTO;
       ucgU5: // global
           call _ccgTL(R1) args: 0, res: 0, upd: 0;
       ccgTO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgTo_info" {
     block_ccgTo_info:
         const _ccgTo;
         const 4;
         const 12884901918;
         const SccKB_srt+376;
 },
 _ccgTu() //  [R1]
         { []
         }
     {offset
       ccgTu: // global
           _sccl7::P64 = P64[Sp + 8];
           _sccl8::P64 = P64[Sp + 16];
           _scclb::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto ccgTE; else goto ccgTI;
       ccgTE: // global
           R5 = _scclb::P64;
           R4 = Text.Printf.$fPrintfArgDouble3_closure;
           R3 = _sccl8::P64;
           R2 = _sccl7::P64;
           Sp = Sp + 40;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
       ccgTI: // global
           R5 = _scclb::P64;
           R4 = R1;
           R3 = _sccl8::P64;
           R2 = _sccl7::P64;
           Sp = Sp + 40;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgTu_info" {
     block_ccgTu_info:
         const _ccgTu;
         const 260;
         const 4294967326;
         const SccKB_srt+384;
 },
 _ccgTL() //  [R1]
         { []
         }
     {offset
       ccgTL: // global
           _sccl7::P64 = P64[Sp + 8];
           _sccl8::P64 = P64[Sp + 16];
           _scclb::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto ccgTU; else goto ccgTY;
       ccgTU: // global
           R5 = _scclb::P64;
           R4 = Text.Printf.$fPrintfArgDouble1_closure;
           R3 = _sccl8::P64;
           R2 = _sccl7::P64;
           Sp = Sp + 40;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
       ccgTY: // global
           R5 = _scclb::P64;
           R4 = R1;
           R3 = _sccl8::P64;
           R2 = _sccl7::P64;
           Sp = Sp + 40;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgTL_info" {
     block_ccgTL_info:
         const _ccgTL;
         const 260;
         const 4294967326;
         const SccKB_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.688404919 UTC

[section ""data" . Text.Printf.$w$sformatRealFloat_closure" {
     Text.Printf.$w$sformatRealFloat_closure:
         const Text.Printf.$w$sformatRealFloat_info;
         const 0;
 },
 Text.Printf.$w$sformatRealFloat_slow() //  [R1]
         { []
         }
     {offset
       ccgUA: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$w$sformatRealFloat_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ucgWh_srtd" {
     ucgWh_srtd:
         const SccKB_srt+88;
         const 36;
         const 34359738369;
 },
 sat_scclw_entry() //  [R1]
         { []
         }
     {offset
       ccgUN: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccgUO; else goto ccgUP;
       ccgUO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgUP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccgUL_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 69;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scclw_info" {
     sat_scclw_info:
         const sat_scclw_entry;
         const 6;
         const 18446744069414584335;
         const ucgWh_srtd;
 },
 _ccgUL() //  [R1, R2]
         { []
         }
     {offset
       ccgUL: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgUL_info" {
     block_ccgUL_info:
         const _ccgUL;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 section ""relreadonly" . ucgWi_srtd" {
     ucgWi_srtd:
         const SccKB_srt+88;
         const 36;
         const 34359738369;
 },
 sat_scclA_entry() //  [R1]
         { []
         }
     {offset
       ccgUY: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccgUZ; else goto ccgV0;
       ccgUZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgV0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccgUW_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 70;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scclA_info" {
     sat_scclA_info:
         const sat_scclA_entry;
         const 6;
         const 18446744069414584335;
         const ucgWi_srtd;
 },
 _ccgUW() //  [R1, R2]
         { []
         }
     {offset
       ccgUW: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgUW_info" {
     block_ccgUW_info:
         const _ccgUW;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 section ""relreadonly" . ucgWj_srtd" {
     ucgWj_srtd:
         const SccKB_srt+88;
         const 36;
         const 34359738369;
 },
 sat_scclE_entry() //  [R1]
         { []
         }
     {offset
       ccgV9: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccgVa; else goto ccgVb;
       ccgVa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgVb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccgV7_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 71;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scclE_info" {
     sat_scclE_info:
         const sat_scclE_entry;
         const 6;
         const 18446744069414584335;
         const ucgWj_srtd;
 },
 _ccgV7() //  [R1, R2]
         { []
         }
     {offset
       ccgV7: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgV7_info" {
     block_ccgV7_info:
         const _ccgV7;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 section ""relreadonly" . ucgWk_srtd" {
     ucgWk_srtd:
         const SccKB_srt+88;
         const 36;
         const 34359738369;
 },
 sat_scclI_entry() //  [R1]
         { []
         }
     {offset
       ccgVk: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccgVl; else goto ccgVm;
       ccgVl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgVm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccgVi_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 101;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scclI_info" {
     sat_scclI_info:
         const sat_scclI_entry;
         const 6;
         const 18446744069414584335;
         const ucgWk_srtd;
 },
 _ccgVi() //  [R1, R2]
         { []
         }
     {offset
       ccgVi: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgVi_info" {
     block_ccgVi_info:
         const _ccgVi;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 section ""relreadonly" . ucgWl_srtd" {
     ucgWl_srtd:
         const SccKB_srt+88;
         const 36;
         const 34359738369;
 },
 sat_scclM_entry() //  [R1]
         { []
         }
     {offset
       ccgVv: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccgVw; else goto ccgVx;
       ccgVw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgVx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccgVt_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 102;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scclM_info" {
     sat_scclM_info:
         const sat_scclM_entry;
         const 6;
         const 18446744069414584335;
         const ucgWl_srtd;
 },
 _ccgVt() //  [R1, R2]
         { []
         }
     {offset
       ccgVt: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgVt_info" {
     block_ccgVt_info:
         const _ccgVt;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 section ""relreadonly" . ucgWm_srtd" {
     ucgWm_srtd:
         const SccKB_srt+88;
         const 36;
         const 34359738369;
 },
 sat_scclQ_entry() //  [R1]
         { []
         }
     {offset
       ccgVG: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccgVH; else goto ccgVI;
       ccgVH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgVI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccgVE_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 103;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scclQ_info" {
     sat_scclQ_info:
         const sat_scclQ_entry;
         const 6;
         const 18446744069414584335;
         const ucgWm_srtd;
 },
 _ccgVE() //  [R1, R2]
         { []
         }
     {offset
       ccgVE: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgVE_info" {
     block_ccgVE_info:
         const _ccgVE;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 section ""relreadonly" . ucgWn_srtd" {
     ucgWn_srtd:
         const SccKB_srt+88;
         const 36;
         const 34359738369;
 },
 sat_scclU_entry() //  [R1]
         { []
         }
     {offset
       ccgVR: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccgVS; else goto ccgVT;
       ccgVS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgVT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccgVP_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 103;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scclU_info" {
     sat_scclU_info:
         const sat_scclU_entry;
         const 6;
         const 18446744069414584335;
         const ucgWn_srtd;
 },
 _ccgVP() //  [R1, R2]
         { []
         }
     {offset
       ccgVP: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgVP_info" {
     block_ccgVP_info:
         const _ccgVP;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 section ""relreadonly" . ucgWo_srtd" {
     ucgWo_srtd:
         const SccKB_srt+32;
         const 46;
         const 39582418600065;
 },
 Text.Printf.$w$sformatRealFloat_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccgW4: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccgW8; else goto ccgW7;
       ccgW8: // global
           HpAlloc = 64;
           R1 = Text.Printf.$w$sformatRealFloat_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       ccgW7: // global
           _scclq::P64 = P64[Sp];
           _sccls::I64 = I64[Sp + 8];
           if (_sccls::I64 < 101) goto ucgW9; else goto ucgWd;
       ucgW9: // global
           if (_sccls::I64 < 71) goto ucgWa; else goto ucgWc;
       ucgWa: // global
           if (_sccls::I64 < 70) goto ucgWb; else goto ccgVY;
       ucgWb: // global
           if (_sccls::I64 < 69) goto ccgVW; else goto ccgVX;
       ccgVX: // global
           I64[Hp - 56] = sat_scclw_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _scclq::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       ccgVY: // global
           I64[Hp - 56] = sat_scclA_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _scclq::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       ucgWc: // global
           if (_sccls::I64 >= 72) goto ccgVW; else goto ccgVZ;
       ccgVZ: // global
           I64[Hp - 56] = sat_scclE_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _scclq::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       ucgWd: // global
           if (_sccls::I64 < 103) goto ucgWe; else goto ucgWf;
       ucgWe: // global
           if (_sccls::I64 < 102) goto ccgW0; else goto ccgW1;
       ccgW0: // global
           I64[Hp - 56] = sat_scclI_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _scclq::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       ccgW1: // global
           I64[Hp - 56] = sat_scclM_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _scclq::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       ucgWf: // global
           if (_sccls::I64 < 104) goto ccgW2; else goto ucgWg;
       ccgW2: // global
           I64[Hp - 56] = sat_scclQ_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _scclq::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       ucgWg: // global
           if (_sccls::I64 != 118) goto ccgVW; else goto ccgW3;
       ccgVW: // global
           Hp = Hp - 64;
           R2 = _sccls::I64;
           Sp = Sp + 16;
           call Text.Printf.$werrorBadFormat_entry(R2) args: 8, res: 0, upd: 8;
       ccgW3: // global
           I64[Hp - 56] = sat_scclU_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _scclq::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sformatRealFloat_info" {
     Text.Printf.$w$sformatRealFloat_info:
         const Text.Printf.$w$sformatRealFloat_entry;
         const 0;
         const 18446744069414584334;
         const 30064771072;
         const ucgWo_srtd;
         const 4103;
         const Text.Printf.$w$sformatRealFloat_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.72856967 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble_$sformatRealFloat_closure" {
     Text.Printf.$fPrintfArgDouble_$sformatRealFloat_closure:
         const Text.Printf.$fPrintfArgDouble_$sformatRealFloat_info;
         const 0;
 },
 Text.Printf.$fPrintfArgDouble_$sformatRealFloat_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       ccgXS: // global
           if ((Sp + -56) < SpLim) (likely: False) goto ccgXW; else goto ccgXX;
       ccgXW: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgDouble_$sformatRealFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccgXX: // global
           I64[Sp - 16] = block_ccgXP_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucgY5; else goto ccgXQ;
       ucgY5: // global
           call _ccgXP(R1) args: 0, res: 0, upd: 0;
       ccgXQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgDouble_$sformatRealFloat_info" {
     Text.Printf.$fPrintfArgDouble_$sformatRealFloat_info:
         const Text.Printf.$fPrintfArgDouble_$sformatRealFloat_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SccKB_srt+392;
 },
 _ccgXP() //  [R1]
         { []
         }
     {offset
       ccgXP: // global
           I64[Sp - 40] = block_ccgXV_info;
           _scclY::P64 = P64[R1 + 7];
           _scclZ::P64 = P64[R1 + 15];
           _sccm0::P64 = P64[R1 + 23];
           _sccm1::P64 = P64[R1 + 31];
           _sccm2::P64 = P64[R1 + 39];
           R1 = P64[R1 + 55];
           P64[Sp - 32] = _scclZ::P64;
           P64[Sp - 24] = _sccm0::P64;
           P64[Sp - 16] = _sccm1::P64;
           P64[Sp - 8] = _sccm2::P64;
           P64[Sp] = _scclY::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucgY4; else goto ccgXZ;
       ucgY4: // global
           call _ccgXV(R1) args: 0, res: 0, upd: 0;
       ccgXZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgXP_info" {
     block_ccgXP_info:
         const _ccgXP;
         const 1;
         const 4294967326;
         const SccKB_srt+392;
 },
 _ccgXV() //  [R1]
         { []
         }
     {offset
       ccgXV: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 48];
           P64[Sp + 40] = P64[Sp + 32];
           I64[Sp + 48] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$w$sformatRealFloat_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccgXV_info" {
     block_ccgXV_info:
         const _ccgXV;
         const 6;
         const 4294967326;
         const SccKB_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.743817102 UTC

[section ""data" . Text.Printf.$w$sformatRealFloat1_closure" {
     Text.Printf.$w$sformatRealFloat1_closure:
         const Text.Printf.$w$sformatRealFloat1_info;
         const 0;
 },
 Text.Printf.$w$sformatRealFloat1_slow() //  [R1]
         { []
         }
     {offset
       ccgYm: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$w$sformatRealFloat1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_sccmi_entry() //  [R1]
         { []
         }
     {offset
       ccgYz: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccgYA; else goto ccgYB;
       ccgYA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgYB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccgYx_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 69;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccmi_info" {
     sat_sccmi_info:
         const sat_sccmi_entry;
         const 6;
         const 9223372041149743119;
         const SccKB_srt+120;
 },
 _ccgYx() //  [R1, R2]
         { []
         }
     {offset
       ccgYx: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgYx_info" {
     block_ccgYx_info:
         const _ccgYx;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 sat_sccmm_entry() //  [R1]
         { []
         }
     {offset
       ccgYK: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccgYL; else goto ccgYM;
       ccgYL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgYM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccgYI_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 70;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccmm_info" {
     sat_sccmm_info:
         const sat_sccmm_entry;
         const 6;
         const 9223372041149743119;
         const SccKB_srt+120;
 },
 _ccgYI() //  [R1, R2]
         { []
         }
     {offset
       ccgYI: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgYI_info" {
     block_ccgYI_info:
         const _ccgYI;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 sat_sccmq_entry() //  [R1]
         { []
         }
     {offset
       ccgYV: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccgYW; else goto ccgYX;
       ccgYW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgYX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccgYT_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 71;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccmq_info" {
     sat_sccmq_info:
         const sat_sccmq_entry;
         const 6;
         const 9223372041149743119;
         const SccKB_srt+120;
 },
 _ccgYT() //  [R1, R2]
         { []
         }
     {offset
       ccgYT: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgYT_info" {
     block_ccgYT_info:
         const _ccgYT;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 sat_sccmu_entry() //  [R1]
         { []
         }
     {offset
       ccgZ6: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccgZ7; else goto ccgZ8;
       ccgZ7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgZ8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccgZ4_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 101;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccmu_info" {
     sat_sccmu_info:
         const sat_sccmu_entry;
         const 6;
         const 9223372041149743119;
         const SccKB_srt+120;
 },
 _ccgZ4() //  [R1, R2]
         { []
         }
     {offset
       ccgZ4: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgZ4_info" {
     block_ccgZ4_info:
         const _ccgZ4;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 sat_sccmy_entry() //  [R1]
         { []
         }
     {offset
       ccgZh: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccgZi; else goto ccgZj;
       ccgZi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgZj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccgZf_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 102;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccmy_info" {
     sat_sccmy_info:
         const sat_sccmy_entry;
         const 6;
         const 9223372041149743119;
         const SccKB_srt+120;
 },
 _ccgZf() //  [R1, R2]
         { []
         }
     {offset
       ccgZf: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgZf_info" {
     block_ccgZf_info:
         const _ccgZf;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 sat_sccmC_entry() //  [R1]
         { []
         }
     {offset
       ccgZs: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccgZt; else goto ccgZu;
       ccgZt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgZu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccgZq_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 103;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccmC_info" {
     sat_sccmC_info:
         const sat_sccmC_entry;
         const 6;
         const 9223372041149743119;
         const SccKB_srt+120;
 },
 _ccgZq() //  [R1, R2]
         { []
         }
     {offset
       ccgZq: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgZq_info" {
     block_ccgZq_info:
         const _ccgZq;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 sat_sccmG_entry() //  [R1]
         { []
         }
     {offset
       ccgZD: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccgZE; else goto ccgZF;
       ccgZE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccgZF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccgZB_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 103;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccmG_info" {
     sat_sccmG_info:
         const sat_sccmG_entry;
         const 6;
         const 9223372041149743119;
         const SccKB_srt+120;
 },
 _ccgZB() //  [R1, R2]
         { []
         }
     {offset
       ccgZB: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccgZB_info" {
     block_ccgZB_info:
         const _ccgZB;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 section ""relreadonly" . uch03_srtd" {
     uch03_srtd:
         const SccKB_srt+32;
         const 48;
         const 145135534868481;
 },
 Text.Printf.$w$sformatRealFloat1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccgZQ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccgZU; else goto ccgZT;
       ccgZU: // global
           HpAlloc = 64;
           R1 = Text.Printf.$w$sformatRealFloat1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       ccgZT: // global
           _sccmc::P64 = P64[Sp];
           _sccme::I64 = I64[Sp + 8];
           if (_sccme::I64 < 101) goto ucgZV; else goto ucgZZ;
       ucgZV: // global
           if (_sccme::I64 < 71) goto ucgZW; else goto ucgZY;
       ucgZW: // global
           if (_sccme::I64 < 70) goto ucgZX; else goto ccgZK;
       ucgZX: // global
           if (_sccme::I64 < 69) goto ccgZI; else goto ccgZJ;
       ccgZJ: // global
           I64[Hp - 56] = sat_sccmi_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sccmc::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       ccgZK: // global
           I64[Hp - 56] = sat_sccmm_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sccmc::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       ucgZY: // global
           if (_sccme::I64 >= 72) goto ccgZI; else goto ccgZL;
       ccgZL: // global
           I64[Hp - 56] = sat_sccmq_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sccmc::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       ucgZZ: // global
           if (_sccme::I64 < 103) goto uch00; else goto uch01;
       uch00: // global
           if (_sccme::I64 < 102) goto ccgZM; else goto ccgZN;
       ccgZM: // global
           I64[Hp - 56] = sat_sccmu_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sccmc::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       ccgZN: // global
           I64[Hp - 56] = sat_sccmy_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sccmc::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uch01: // global
           if (_sccme::I64 < 104) goto ccgZO; else goto uch02;
       ccgZO: // global
           I64[Hp - 56] = sat_sccmC_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sccmc::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uch02: // global
           if (_sccme::I64 != 118) goto ccgZI; else goto ccgZP;
       ccgZI: // global
           Hp = Hp - 64;
           R2 = _sccme::I64;
           Sp = Sp + 16;
           call Text.Printf.$werrorBadFormat_entry(R2) args: 8, res: 0, upd: 8;
       ccgZP: // global
           I64[Hp - 56] = sat_sccmG_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sccmc::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sformatRealFloat1_info" {
     Text.Printf.$w$sformatRealFloat1_info:
         const Text.Printf.$w$sformatRealFloat1_entry;
         const 0;
         const 18446744069414584334;
         const 30064771072;
         const uch03_srtd;
         const 4103;
         const Text.Printf.$w$sformatRealFloat1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.775200783 UTC

[section ""data" . Text.Printf.$fPrintfArgFloat_$sformatRealFloat_closure" {
     Text.Printf.$fPrintfArgFloat_$sformatRealFloat_closure:
         const Text.Printf.$fPrintfArgFloat_$sformatRealFloat_info;
         const 0;
 },
 Text.Printf.$fPrintfArgFloat_$sformatRealFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       cch1q: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cch1u; else goto cch1v;
       cch1u: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgFloat_$sformatRealFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cch1v: // global
           I64[Sp - 16] = block_cch1n_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uch1D; else goto cch1o;
       uch1D: // global
           call _cch1n(R1) args: 0, res: 0, upd: 0;
       cch1o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgFloat_$sformatRealFloat_info" {
     Text.Printf.$fPrintfArgFloat_$sformatRealFloat_info:
         const Text.Printf.$fPrintfArgFloat_$sformatRealFloat_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SccKB_srt+408;
 },
 _cch1n() //  [R1]
         { []
         }
     {offset
       cch1n: // global
           I64[Sp - 40] = block_cch1t_info;
           _sccmK::P64 = P64[R1 + 7];
           _sccmL::P64 = P64[R1 + 15];
           _sccmM::P64 = P64[R1 + 23];
           _sccmN::P64 = P64[R1 + 31];
           _sccmO::P64 = P64[R1 + 39];
           R1 = P64[R1 + 55];
           P64[Sp - 32] = _sccmL::P64;
           P64[Sp - 24] = _sccmM::P64;
           P64[Sp - 16] = _sccmN::P64;
           P64[Sp - 8] = _sccmO::P64;
           P64[Sp] = _sccmK::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uch1C; else goto cch1x;
       uch1C: // global
           call _cch1t(R1) args: 0, res: 0, upd: 0;
       cch1x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cch1n_info" {
     block_cch1n_info:
         const _cch1n;
         const 1;
         const 4294967326;
         const SccKB_srt+408;
 },
 _cch1t() //  [R1]
         { []
         }
     {offset
       cch1t: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 48];
           P64[Sp + 40] = P64[Sp + 32];
           I64[Sp + 48] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$w$sformatRealFloat1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cch1t_info" {
     block_cch1t_info:
         const _cch1t;
         const 6;
         const 4294967326;
         const SccKB_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.790036577 UTC

[section ""data" . Text.Printf.$wformatRealFloat_closure" {
     Text.Printf.$wformatRealFloat_closure:
         const Text.Printf.$wformatRealFloat_info;
         const 0;
 },
 Text.Printf.$wformatRealFloat_slow() //  [R1]
         { []
         }
     {offset
       cch1U: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$wformatRealFloat_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sccn5_entry() //  [R1]
         { []
         }
     {offset
       cch27: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cch28; else goto cch29;
       cch28: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cch29: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cch25_info;
           R6 = P64[R1 + 24];
           R5 = P64[R1 + 64];
           R4 = P64[R1 + 40];
           R3 = 69;
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 48;
           call Text.Printf.$wdfmt_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccn5_info" {
     sat_sccn5_info:
         const sat_sccn5_entry;
         const 7;
         const 1152921508901814287;
         const SccKB_srt+144;
 },
 _cch25() //  [R1, R2]
         { []
         }
     {offset
       cch25: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cch25_info" {
     block_cch25_info:
         const _cch25;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 sat_sccn9_entry() //  [R1]
         { []
         }
     {offset
       cch2i: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cch2j; else goto cch2k;
       cch2j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cch2k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cch2g_info;
           R6 = P64[R1 + 24];
           R5 = P64[R1 + 64];
           R4 = P64[R1 + 40];
           R3 = 70;
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 48;
           call Text.Printf.$wdfmt_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccn9_info" {
     sat_sccn9_info:
         const sat_sccn9_entry;
         const 7;
         const 1152921508901814287;
         const SccKB_srt+144;
 },
 _cch2g() //  [R1, R2]
         { []
         }
     {offset
       cch2g: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cch2g_info" {
     block_cch2g_info:
         const _cch2g;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 sat_sccnd_entry() //  [R1]
         { []
         }
     {offset
       cch2t: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cch2u; else goto cch2v;
       cch2u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cch2v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cch2r_info;
           R6 = P64[R1 + 24];
           R5 = P64[R1 + 64];
           R4 = P64[R1 + 40];
           R3 = 71;
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 48;
           call Text.Printf.$wdfmt_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccnd_info" {
     sat_sccnd_info:
         const sat_sccnd_entry;
         const 7;
         const 1152921508901814287;
         const SccKB_srt+144;
 },
 _cch2r() //  [R1, R2]
         { []
         }
     {offset
       cch2r: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cch2r_info" {
     block_cch2r_info:
         const _cch2r;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 sat_sccnh_entry() //  [R1]
         { []
         }
     {offset
       cch2E: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cch2F; else goto cch2G;
       cch2F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cch2G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cch2C_info;
           R6 = P64[R1 + 24];
           R5 = P64[R1 + 64];
           R4 = P64[R1 + 40];
           R3 = 101;
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 48;
           call Text.Printf.$wdfmt_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccnh_info" {
     sat_sccnh_info:
         const sat_sccnh_entry;
         const 7;
         const 1152921508901814287;
         const SccKB_srt+144;
 },
 _cch2C() //  [R1, R2]
         { []
         }
     {offset
       cch2C: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cch2C_info" {
     block_cch2C_info:
         const _cch2C;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 sat_sccnl_entry() //  [R1]
         { []
         }
     {offset
       cch2P: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cch2Q; else goto cch2R;
       cch2Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cch2R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cch2N_info;
           R6 = P64[R1 + 24];
           R5 = P64[R1 + 64];
           R4 = P64[R1 + 40];
           R3 = 102;
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 48;
           call Text.Printf.$wdfmt_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccnl_info" {
     sat_sccnl_info:
         const sat_sccnl_entry;
         const 7;
         const 1152921508901814287;
         const SccKB_srt+144;
 },
 _cch2N() //  [R1, R2]
         { []
         }
     {offset
       cch2N: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cch2N_info" {
     block_cch2N_info:
         const _cch2N;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 sat_sccnp_entry() //  [R1]
         { []
         }
     {offset
       cch30: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cch31; else goto cch32;
       cch31: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cch32: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cch2Y_info;
           R6 = P64[R1 + 24];
           R5 = P64[R1 + 64];
           R4 = P64[R1 + 40];
           R3 = 103;
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 48;
           call Text.Printf.$wdfmt_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccnp_info" {
     sat_sccnp_info:
         const sat_sccnp_entry;
         const 7;
         const 1152921508901814287;
         const SccKB_srt+144;
 },
 _cch2Y() //  [R1, R2]
         { []
         }
     {offset
       cch2Y: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cch2Y_info" {
     block_cch2Y_info:
         const _cch2Y;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 sat_sccnt_entry() //  [R1]
         { []
         }
     {offset
       cch3b: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cch3c; else goto cch3d;
       cch3c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cch3d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cch39_info;
           R6 = P64[R1 + 24];
           R5 = P64[R1 + 64];
           R4 = P64[R1 + 40];
           R3 = 103;
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 48;
           call Text.Printf.$wdfmt_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccnt_info" {
     sat_sccnt_info:
         const sat_sccnt_entry;
         const 7;
         const 1152921508901814287;
         const SccKB_srt+144;
 },
 _cch39() //  [R1, R2]
         { []
         }
     {offset
       cch39: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cch39_info" {
     block_cch39_info:
         const _cch39;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 section ""relreadonly" . uch3B_srtd" {
     uch3B_srtd:
         const SccKB_srt+32;
         const 50;
         const 567347999948801;
 },
 Text.Printf.$wformatRealFloat_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cch3o: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cch3s; else goto cch3r;
       cch3s: // global
           HpAlloc = 72;
           R1 = Text.Printf.$wformatRealFloat_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cch3r: // global
           _sccmY::P64 = P64[Sp];
           _sccmZ::P64 = P64[Sp + 8];
           _sccn1::I64 = I64[Sp + 16];
           if (_sccn1::I64 < 101) goto uch3t; else goto uch3x;
       uch3t: // global
           if (_sccn1::I64 < 71) goto uch3u; else goto uch3w;
       uch3u: // global
           if (_sccn1::I64 < 70) goto uch3v; else goto cch3i;
       uch3v: // global
           if (_sccn1::I64 < 69) goto cch3g; else goto cch3h;
       cch3h: // global
           I64[Hp - 64] = sat_sccn5_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = _sccmY::P64;
           P64[Hp] = _sccmZ::P64;
           R2 = Hp - 64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cch3i: // global
           I64[Hp - 64] = sat_sccn9_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = _sccmY::P64;
           P64[Hp] = _sccmZ::P64;
           R2 = Hp - 64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uch3w: // global
           if (_sccn1::I64 >= 72) goto cch3g; else goto cch3j;
       cch3j: // global
           I64[Hp - 64] = sat_sccnd_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = _sccmY::P64;
           P64[Hp] = _sccmZ::P64;
           R2 = Hp - 64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uch3x: // global
           if (_sccn1::I64 < 103) goto uch3y; else goto uch3z;
       uch3y: // global
           if (_sccn1::I64 < 102) goto cch3k; else goto cch3l;
       cch3k: // global
           I64[Hp - 64] = sat_sccnh_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = _sccmY::P64;
           P64[Hp] = _sccmZ::P64;
           R2 = Hp - 64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cch3l: // global
           I64[Hp - 64] = sat_sccnl_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = _sccmY::P64;
           P64[Hp] = _sccmZ::P64;
           R2 = Hp - 64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uch3z: // global
           if (_sccn1::I64 < 104) goto cch3m; else goto uch3A;
       cch3m: // global
           I64[Hp - 64] = sat_sccnp_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = _sccmY::P64;
           P64[Hp] = _sccmZ::P64;
           R2 = Hp - 64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uch3A: // global
           if (_sccn1::I64 != 118) goto cch3g; else goto cch3n;
       cch3g: // global
           Hp = Hp - 72;
           R2 = _sccn1::I64;
           Sp = Sp + 24;
           call Text.Printf.$werrorBadFormat_entry(R2) args: 8, res: 0, upd: 8;
       cch3n: // global
           I64[Hp - 64] = sat_sccnt_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = _sccmY::P64;
           P64[Hp] = _sccmZ::P64;
           R2 = Hp - 64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wformatRealFloat_info" {
     Text.Printf.$wformatRealFloat_info:
         const Text.Printf.$wformatRealFloat_entry;
         const 0;
         const 18446744069414584334;
         const 34359738368;
         const uch3B_srtd;
         const 8200;
         const Text.Printf.$wformatRealFloat_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.822080017 UTC

[section ""data" . Text.Printf.formatRealFloat_closure" {
     Text.Printf.formatRealFloat_closure:
         const Text.Printf.formatRealFloat_info;
         const 0;
 },
 Text.Printf.formatRealFloat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cch4Y: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cch52; else goto cch53;
       cch52: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.formatRealFloat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cch53: // global
           I64[Sp - 24] = block_cch4V_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uch5b; else goto cch4W;
       uch5b: // global
           call _cch4V(R1) args: 0, res: 0, upd: 0;
       cch4W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.formatRealFloat_info" {
     Text.Printf.formatRealFloat_info:
         const Text.Printf.formatRealFloat_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SccKB_srt+424;
 },
 _cch4V() //  [R1]
         { []
         }
     {offset
       cch4V: // global
           I64[Sp - 40] = block_cch51_info;
           _sccny::P64 = P64[R1 + 7];
           _sccnz::P64 = P64[R1 + 15];
           _sccnA::P64 = P64[R1 + 23];
           _sccnB::P64 = P64[R1 + 31];
           _sccnC::P64 = P64[R1 + 39];
           R1 = P64[R1 + 55];
           P64[Sp - 32] = _sccnz::P64;
           P64[Sp - 24] = _sccnA::P64;
           P64[Sp - 16] = _sccnB::P64;
           P64[Sp - 8] = _sccnC::P64;
           P64[Sp] = _sccny::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uch5a; else goto cch55;
       uch5a: // global
           call _cch51(R1) args: 0, res: 0, upd: 0;
       cch55: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cch4V_info" {
     block_cch4V_info:
         const _cch4V;
         const 2;
         const 4294967326;
         const SccKB_srt+424;
 },
 _cch51() //  [R1]
         { []
         }
     {offset
       cch51: // global
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 56];
           R2 = P64[Sp + 48];
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = P64[Sp + 32];
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$wformatRealFloat_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cch51_info" {
     block_cch51_info:
         const _cch51;
         const 7;
         const 4294967326;
         const SccKB_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.830580007 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble_$cparseFormat_closure" {
     Text.Printf.$fPrintfArgDouble_$cparseFormat_closure:
         const Text.Printf.$fPrintfArgDouble_$cparseFormat_info;
         const 0;
 },
 Text.Printf.$fPrintfArgDouble_$cparseFormat_entry() //  [R2, R3]
         { []
         }
     {offset
       cch5D: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cch5E; else goto cch5F;
       cch5E: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgDouble_$cparseFormat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cch5F: // global
           I64[Sp - 8] = block_cch5w_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uch5P; else goto cch5x;
       uch5P: // global
           call _cch5w(R1) args: 0, res: 0, upd: 0;
       cch5x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgDouble_$cparseFormat_info" {
     Text.Printf.$fPrintfArgDouble_$cparseFormat_info:
         const Text.Printf.$fPrintfArgDouble_$cparseFormat_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SccKB_srt+440;
 },
 _cch5w() //  [R1]
         { []
         }
     {offset
       cch5w: // global
           if (R1 & 7 == 1) goto cch5A; else goto cch5B;
       cch5A: // global
           R1 = Text.Printf.errorShortFormat_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cch5B: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cch5O; else goto cch5N;
       cch5O: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cch5N: // global
           _sccnK::P64 = P64[R1 + 6];
           _sccnL::P64 = P64[R1 + 14];
           I64[Hp - 24] = Text.Printf.FormatParse_con_info;
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           P64[Hp - 8] = _sccnK::P64;
           P64[Hp] = _sccnL::P64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cch5w_info" {
     block_cch5w_info:
         const _cch5w;
         const 0;
         const 4294967326;
         const SccKB_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.836118664 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble_closure" {
     Text.Printf.$fPrintfArgDouble_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgDouble_$sformatRealFloat_closure+2;
         const Text.Printf.$fPrintfArgDouble_$cparseFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.838882555 UTC

[section ""data" . Text.Printf.$fPrintfArgFloat_$cparseFormat_closure" {
     Text.Printf.$fPrintfArgFloat_$cparseFormat_closure:
         const Text.Printf.$fPrintfArgFloat_$cparseFormat_info;
         const 0;
 },
 Text.Printf.$fPrintfArgFloat_$cparseFormat_entry() //  [R2, R3]
         { []
         }
     {offset
       cch6e: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cch6f; else goto cch6g;
       cch6f: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgFloat_$cparseFormat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cch6g: // global
           I64[Sp - 8] = block_cch67_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uch6q; else goto cch68;
       uch6q: // global
           call _cch67(R1) args: 0, res: 0, upd: 0;
       cch68: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgFloat_$cparseFormat_info" {
     Text.Printf.$fPrintfArgFloat_$cparseFormat_info:
         const Text.Printf.$fPrintfArgFloat_$cparseFormat_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SccKB_srt+448;
 },
 _cch67() //  [R1]
         { []
         }
     {offset
       cch67: // global
           if (R1 & 7 == 1) goto cch6b; else goto cch6c;
       cch6b: // global
           R1 = Text.Printf.errorShortFormat_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cch6c: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cch6p; else goto cch6o;
       cch6p: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cch6o: // global
           _sccnP::P64 = P64[R1 + 6];
           _sccnQ::P64 = P64[R1 + 14];
           I64[Hp - 24] = Text.Printf.FormatParse_con_info;
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           P64[Hp - 8] = _sccnP::P64;
           P64[Hp] = _sccnQ::P64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cch67_info" {
     block_cch67_info:
         const _cch67;
         const 0;
         const 4294967326;
         const SccKB_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.844201515 UTC

[section ""data" . Text.Printf.$fPrintfArgFloat_closure" {
     Text.Printf.$fPrintfArgFloat_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgFloat_$sformatRealFloat_closure+2;
         const Text.Printf.$fPrintfArgFloat_$cparseFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.849716939 UTC

[section ""data" . Text.Printf.$w$sformatString_closure" {
     Text.Printf.$w$sformatString_closure:
         const Text.Printf.$w$sformatString_info;
         const 0;
 },
 Text.Printf.$w$sformatString_slow() //  [R1]
         { []
         }
     {offset
       cch6F: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$w$sformatString_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scco5_entry() //  [R1]
         { []
         }
     {offset
       cch76: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cch77; else goto cch78;
       cch77: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cch78: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cch6Z_info;
           _sccnR::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sccnR::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uch7r; else goto cch70;
       uch7r: // global
           call _cch6Z(R1) args: 0, res: 0, upd: 0;
       cch70: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scco5_info" {
     sat_scco5_info:
         const sat_scco5_entry;
         const 2;
         const 18;
 },
 _cch6Z() //  [R1]
         { []
         }
     {offset
       cch6Z: // global
           if (R1 & 7 == 1) goto cch73; else goto cch74;
       cch73: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cch74: // global
           I64[Sp] = block_cch7e_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uch7q; else goto cch7g;
       uch7q: // global
           call _cch7e(R1) args: 0, res: 0, upd: 0;
       cch7g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cch6Z_info" {
     block_cch6Z_info:
         const _cch6Z;
         const 1;
         const 30;
 },
 _cch7e() //  [R1]
         { []
         }
     {offset
       cch7e: // global
           _scco3::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(0, _scco3::I64)) goto cch7o; else goto cch7p;
       cch7o: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cch7p: // global
           R3 = P64[Sp + 8];
           R2 = _scco3::I64;
           Sp = Sp + 16;
           call GHC.List.$wunsafeTake_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cch7e_info" {
     block_cch7e_info:
         const _cch7e;
         const 1;
         const 30;
 },
 g_sccnZ_entry() //  [R1]
         { []
         }
     {offset
       cch7s: // global
           _sccnZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cch7t; else goto cch7u;
       cch7u: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cch7w; else goto cch7v;
       cch7w: // global
           HpAlloc = 32;
           goto cch7t;
       cch7t: // global
           R1 = _sccnZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cch7v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sccnZ::P64;
           _sccnR::P64 = P64[_sccnZ::P64 + 16];
           _sccnS::P64 = P64[_sccnZ::P64 + 24];
           _sccnT::P64 = P64[_sccnZ::P64 + 32];
           _sccnU::P64 = P64[_sccnZ::P64 + 40];
           I64[Hp - 24] = sat_scco5_info;
           P64[Hp - 8] = _sccnR::P64;
           P64[Hp] = _sccnT::P64;
           R5 = Hp - 24;
           R4 = GHC.Types.[]_closure+1;
           R3 = _sccnU::P64;
           R2 = _sccnS::P64;
           Sp = Sp - 16;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sccnZ_info" {
     g_sccnZ_info:
         const g_sccnZ_entry;
         const 4;
         const 15;
 },
 Text.Printf.$w$sformatString_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cch7B: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cch7C; else goto cch7D;
       cch7C: // global
           R1 = Text.Printf.$w$sformatString_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cch7D: // global
           if (R6 == 118) goto cch7A; else goto cch7z;
       cch7A: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = 115;
           Sp = Sp - 40;
           goto uch7P;
       cch7z: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           goto uch7P;
       uch7P: // global
           call _cch6M() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sformatString_info" {
     Text.Printf.$w$sformatString_info:
         const Text.Printf.$w$sformatString_entry;
         const 0;
         const 12884901902;
         const 21474836480;
         const SccKB_srt+464;
         const 1029;
         const Text.Printf.$w$sformatString_slow;
 },
 _cch6M() //  []
         { []
         }
     {offset
       cch6M: // global
           Hp = Hp + 48;
           _sccnX::I64 = I64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto cch7G; else goto cch7F;
       cch7G: // global
           HpAlloc = 48;
           I64[Sp - 8] = block_cch6L_info;
           R1 = _sccnX::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cch7F: // global
           if (_sccnX::I64 == 115) goto cch7J; else goto cch7I;
       cch7J: // global
           I64[Hp - 40] = g_sccnZ_info;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 40;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cch7I: // global
           Hp = Hp - 48;
           R2 = _sccnX::I64;
           Sp = Sp + 40;
           call Text.Printf.$werrorBadFormat_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _cch6L() //  [R1]
         { []
         }
     {offset
       cch6L: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _cch6M() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cch6L_info" {
     block_cch6L_info:
         const _cch6L;
         const 1029;
         const 4294967326;
         const SccKB_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.87139953 UTC

[section ""data" . Text.Printf.$wformatString_closure" {
     Text.Printf.$wformatString_closure:
         const Text.Printf.$wformatString_info;
         const 0;
 },
 Text.Printf.$wformatString_slow() //  [R1]
         { []
         }
     {offset
       cch8s: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$wformatString_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 16, res: 0, upd: 8;
     }
 },
 sat_sccoj_entry() //  [R1]
         { []
         }
     {offset
       cch8V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cch8W; else goto cch8X;
       cch8W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cch8X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Printf.toChar_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccoj_info" {
     sat_sccoj_info:
         const sat_sccoj_entry;
         const 1;
         const 16;
 },
 sat_sccox_entry() //  [R1]
         { []
         }
     {offset
       cch9s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cch9t; else goto cch9u;
       cch9t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cch9u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 32] - 1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_sccoo_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccox_info" {
     sat_sccox_info:
         const sat_sccox_entry;
         const 4294967298;
         const 15;
 },
 sat_sccov_entry() //  [R1]
         { []
         }
     {offset
       cch9z: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cch9A; else goto cch9B;
       cch9A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cch9B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.Printf.toChar_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccov_info" {
     sat_sccov_info:
         const sat_sccov_entry;
         const 2;
         const 18;
 },
 sat_sccoy_entry() //  [R1]
         { []
         }
     {offset
       cch9H: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cch9I; else goto cch9J;
       cch9I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cch9J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.Printf.toChar_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccoy_info" {
     sat_sccoy_info:
         const sat_sccoy_entry;
         const 2;
         const 18;
 },
 $wgo_sccoo_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cch9O: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cch9P; else goto cch9Q;
       cch9P: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cch9Q: // global
           I64[Sp - 32] = block_cch9e_info;
           _sccoo::P64 = R1;
           _scco8::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 24] = _scco8::P64;
           P64[Sp - 16] = _sccoo::P64;
           I64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucha1; else goto cch9f;
       ucha1: // global
           call _cch9e(R1) args: 0, res: 0, upd: 0;
       cch9f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_sccoo_info" {
     $wgo_sccoo_info:
         const $wgo_sccoo_entry;
         const 1;
         const 9;
         const 8589934606;
 },
 _cch9e() //  [R1]
         { []
         }
     {offset
       cch9e: // global
           if (R1 & 7 == 1) goto cch9L; else goto cch9M;
       cch9L: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cch9M: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cch9V; else goto cch9U;
       cch9V: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cch9U: // global
           _scco8::P64 = P64[Sp + 8];
           _sccos::P64 = P64[R1 + 6];
           _sccou::I64 = I64[Sp + 24];
           if (_sccou::I64 != 1) goto cch9Y; else goto ccha0;
       cch9Y: // global
           _sccot::P64 = P64[R1 + 14];
           I64[Hp - 88] = sat_sccox_info;
           P64[Hp - 72] = P64[Sp + 16];
           P64[Hp - 64] = _sccot::P64;
           I64[Hp - 56] = _sccou::I64;
           I64[Hp - 48] = sat_sccov_info;
           P64[Hp - 32] = _scco8::P64;
           P64[Hp - 24] = _sccos::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccha0: // global
           I64[Hp - 88] = sat_sccoy_info;
           P64[Hp - 72] = _scco8::P64;
           P64[Hp - 64] = _sccos::P64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 88;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cch9Z::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cch9Z::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cch9e_info" {
     block_cch9e_info:
         const _cch9e;
         const 259;
         const 30;
 },
 sat_sccoz_entry() //  [R1]
         { []
         }
     {offset
       ccha6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccha7; else goto ccha8;
       ccha7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccha8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cch8M_info;
           _scco8::P64 = P64[R1 + 16];
           _scco9::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _scco8::P64;
           P64[Sp - 24] = _scco9::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uchak; else goto cch8N;
       uchak: // global
           call _cch8M(R1) args: 0, res: 0, upd: 0;
       cch8N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccoz_info" {
     sat_sccoz_info:
         const sat_sccoz_entry;
         const 3;
         const 15;
 },
 _cch8M() //  [R1]
         { []
         }
     {offset
       cch8M: // global
           if (R1 & 7 == 1) goto ccha3; else goto ccha4;
       ccha3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cchab; else goto cchaa;
       cchab: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cchaa: // global
           I64[Hp - 16] = sat_sccoj_info;
           P64[Hp] = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = Hp - 16;
           Sp = Sp + 24;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
       ccha4: // global
           I64[Sp] = block_cch90_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uchaj; else goto cch91;
       uchaj: // global
           call _cch90(R1) args: 0, res: 0, upd: 0;
       cch91: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cch8M_info" {
     block_cch8M_info:
         const _cch8M;
         const 2;
         const 30;
 },
 _cch90() //  [R1]
         { []
         }
     {offset
       cch90: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cchaf; else goto cchae;
       cchaf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cchae: // global
           _sccom::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(0, _sccom::I64)) goto cchah; else goto cchai;
       cchah: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cchai: // global
           I64[Hp - 8] = $wgo_sccoo_info;
           P64[Hp] = P64[Sp + 8];
           R3 = _sccom::I64;
           R2 = P64[Sp + 16];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call $wgo_sccoo_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cch90_info" {
     block_cch90_info:
         const _cch90;
         const 2;
         const 30;
 },
 g_sccoh_entry() //  [R1]
         { []
         }
     {offset
       cchal: // global
           _sccoh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccham; else goto cchan;
       cchan: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cchap; else goto cchao;
       cchap: // global
           HpAlloc = 40;
           goto ccham;
       ccham: // global
           R1 = _sccoh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchao: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sccoh::P64;
           _scco8::P64 = P64[_sccoh::P64 + 16];
           _scco9::P64 = P64[_sccoh::P64 + 24];
           _sccoa::P64 = P64[_sccoh::P64 + 32];
           _sccob::P64 = P64[_sccoh::P64 + 40];
           _sccoc::P64 = P64[_sccoh::P64 + 48];
           I64[Hp - 32] = sat_sccoz_info;
           P64[Hp - 16] = _scco8::P64;
           P64[Hp - 8] = _scco9::P64;
           P64[Hp] = _sccob::P64;
           R5 = Hp - 32;
           R4 = GHC.Types.[]_closure+1;
           R3 = _sccoc::P64;
           R2 = _sccoa::P64;
           Sp = Sp - 16;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sccoh_info" {
     g_sccoh_info:
         const g_sccoh_entry;
         const 5;
         const 15;
 },
 Text.Printf.$wformatString_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cchau: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cchav; else goto cchaw;
       cchav: // global
           R1 = Text.Printf.$wformatString_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       cchaw: // global
           _sccoB::I64 = I64[Sp];
           if (_sccoB::I64 == 118) goto cchat; else goto cchas;
       cchat: // global
           P64[Sp] = R2;
           P64[Sp - 40] = R3;
           P64[Sp - 32] = R4;
           P64[Sp - 24] = R5;
           P64[Sp - 16] = R6;
           I64[Sp - 8] = 115;
           Sp = Sp - 40;
           goto uchaI;
       cchas: // global
           P64[Sp - 40] = R3;
           P64[Sp - 32] = R4;
           P64[Sp - 24] = R5;
           P64[Sp - 16] = R6;
           I64[Sp - 8] = _sccoB::I64;
           P64[Sp] = R2;
           Sp = Sp - 40;
           goto uchaI;
       uchaI: // global
           call _cch8z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Text.Printf.$wformatString_info" {
     Text.Printf.$wformatString_info:
         const Text.Printf.$wformatString_entry;
         const 0;
         const 12884901902;
         const 25769803776;
         const SccKB_srt+472;
         const 2054;
         const Text.Printf.$wformatString_slow;
 },
 _cch8z() //  []
         { []
         }
     {offset
       cch8z: // global
           Hp = Hp + 56;
           _sccof::I64 = I64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto cchaz; else goto cchay;
       cchaz: // global
           HpAlloc = 56;
           I64[Sp - 8] = block_cch8y_info;
           R1 = _sccof::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cchay: // global
           if (_sccof::I64 == 115) goto cchaC; else goto cchaB;
       cchaC: // global
           I64[Hp - 48] = g_sccoh_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 48;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cchaB: // global
           Hp = Hp - 56;
           R2 = _sccof::I64;
           Sp = Sp + 48;
           call Text.Printf.$werrorBadFormat_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _cch8y() //  [R1]
         { []
         }
     {offset
       cch8y: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _cch8z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cch8y_info" {
     block_cch8y_info:
         const _cch8y;
         const 1030;
         const 4294967326;
         const SccKB_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.897865634 UTC

[section ""data" . Text.Printf.formatString_closure" {
     Text.Printf.formatString_closure:
         const Text.Printf.formatString_info;
         const 0;
 },
 Text.Printf.formatString_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cchc2: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cchc6; else goto cchc7;
       cchc6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.formatString_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cchc7: // global
           I64[Sp - 24] = block_cchbZ_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uchcf; else goto cchc0;
       uchcf: // global
           call _cchbZ(R1) args: 0, res: 0, upd: 0;
       cchc0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.formatString_info" {
     Text.Printf.formatString_info:
         const Text.Printf.formatString_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SccKB_srt+480;
 },
 _cchbZ() //  [R1]
         { []
         }
     {offset
       cchbZ: // global
           I64[Sp - 24] = block_cchc5_info;
           _sccoG::P64 = P64[R1 + 7];
           _sccoH::P64 = P64[R1 + 15];
           _sccoI::P64 = P64[R1 + 23];
           R1 = P64[R1 + 55];
           P64[Sp - 16] = _sccoH::P64;
           P64[Sp - 8] = _sccoI::P64;
           P64[Sp] = _sccoG::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uchce; else goto cchc9;
       uchce: // global
           call _cchc5(R1) args: 0, res: 0, upd: 0;
       cchc9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchbZ_info" {
     block_cchbZ_info:
         const _cchbZ;
         const 2;
         const 4294967326;
         const SccKB_srt+480;
 },
 _cchc5() //  [R1]
         { []
         }
     {offset
       cchc5: // global
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           I64[Sp + 40] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$wformatString_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchc5_info" {
     block_cchc5_info:
         const _cchc5;
         const 5;
         const 4294967326;
         const SccKB_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.905914591 UTC

[section ""data" . lvl22_rcccn_closure" {
     lvl22_rcccn_closure:
         const lvl22_rcccn_info;
         const 0;
 },
 lvl22_rcccn_entry() //  [R2, R3]
         { []
         }
     {offset
       cchcF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cchcG; else goto cchcH;
       cchcG: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl22_rcccn_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cchcH: // global
           I64[Sp - 8] = block_cchcy_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchcR; else goto cchcz;
       uchcR: // global
           call _cchcy(R1) args: 0, res: 0, upd: 0;
       cchcz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl22_rcccn_info" {
     lvl22_rcccn_info:
         const lvl22_rcccn_entry;
         const 0;
         const 279172874254;
         const 8589934607;
         const SccKB_srt+448;
 },
 _cchcy() //  [R1]
         { []
         }
     {offset
       cchcy: // global
           if (R1 & 7 == 1) goto cchcC; else goto cchcD;
       cchcC: // global
           R1 = Text.Printf.errorShortFormat_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cchcD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cchcQ; else goto cchcP;
       cchcQ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchcP: // global
           _sccoS::P64 = P64[R1 + 6];
           _sccoT::P64 = P64[R1 + 14];
           I64[Hp - 24] = Text.Printf.FormatParse_con_info;
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           P64[Hp - 8] = _sccoS::P64;
           P64[Hp] = _sccoT::P64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchcy_info" {
     block_cchcy_info:
         const _cchcy;
         const 0;
         const 4294967326;
         const SccKB_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.912472629 UTC

[section ""data" . Text.Printf.$fPrintfArg[]_closure" {
     Text.Printf.$fPrintfArg[]_closure:
         const Text.Printf.$fPrintfArg[]_info;
         const 0;
 },
 sat_sccoV_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cchdd: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Text.Printf.formatString_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccoV_info" {
     sat_sccoV_info:
         const sat_sccoV_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SccKB_srt+488;
 },
 Text.Printf.$fPrintfArg[]_entry() //  [R2]
         { []
         }
     {offset
       cchdh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cchdl; else goto cchdk;
       cchdl: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArg[]_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cchdk: // global
           I64[Hp - 32] = sat_sccoV_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.Printf.C:PrintfArg_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = lvl22_rcccn_closure+2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArg[]_info" {
     Text.Printf.$fPrintfArg[]_info:
         const Text.Printf.$fPrintfArg[]_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SccKB_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.917499453 UTC

[section ""data" . lvl23_rccco_closure" {
     lvl23_rccco_closure:
         const GHC.Types.C#_con_info;
         const 100;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.919141848 UTC

[section ""data" . sat_sccoW_closure" {
     sat_sccoW_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.920816899 UTC

[section ""data" . sat_sccoX_closure" {
     sat_sccoX_closure:
         const :_con_info;
         const sat_sccoW_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.923248906 UTC

[section ""data" . lvl24_rcccp_closure" {
     lvl24_rcccp_closure:
         const lvl24_rcccp_info;
         const 0;
         const 0;
         const 0;
 },
 lvl24_rcccp_entry() //  [R1]
         { []
         }
     {offset
       cchdE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchdF; else goto cchdG;
       cchdF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchdG: // global
           (_cchdB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cchdB::I64 == 0) goto cchdD; else goto cchdC;
       cchdD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cchdC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cchdB::I64;
           R3 = sat_sccoX_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl24_rcccp_info" {
     lvl24_rcccp_info:
         const lvl24_rcccp_entry;
         const 0;
         const 4294967317;
         const SccKB_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.926793328 UTC

[section ""cstring" . lvl25_rcccq_bytes" {
     lvl25_rcccq_bytes:
         I8[] [48,88]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.928932799 UTC

[section ""data" . lvl26_rcccr_closure" {
     lvl26_rcccr_closure:
         const lvl26_rcccr_info;
         const 0;
         const 0;
         const 0;
 },
 lvl26_rcccr_entry() //  [R1]
         { []
         }
     {offset
       cchdV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchdW; else goto cchdX;
       cchdW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchdX: // global
           (_cchdS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cchdS::I64 == 0) goto cchdU; else goto cchdT;
       cchdU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cchdT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cchdS::I64;
           R2 = lvl25_rcccq_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl26_rcccr_info" {
     lvl26_rcccr_info:
         const lvl26_rcccr_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.932500831 UTC

[section ""cstring" . lvl27_rcccs_bytes" {
     lvl27_rcccs_bytes:
         I8[] [48,98]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.934956925 UTC

[section ""data" . lvl28_rccct_closure" {
     lvl28_rccct_closure:
         const lvl28_rccct_info;
         const 0;
         const 0;
         const 0;
 },
 lvl28_rccct_entry() //  [R1]
         { []
         }
     {offset
       cchec: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cched; else goto cchee;
       cched: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchee: // global
           (_cche9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cche9::I64 == 0) goto ccheb; else goto cchea;
       ccheb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cchea: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cche9::I64;
           R2 = lvl27_rcccs_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl28_rccct_info" {
     lvl28_rccct_info:
         const lvl28_rccct_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.938324978 UTC

[section ""cstring" . lvl29_rcccu_bytes" {
     lvl29_rcccu_bytes:
         I8[] [112,114,105,110,116,102,58,32,105,108,108,101,103,97,108,32,99,104,97,114,32,99,111,110,118,101,114,115,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.941287868 UTC

[section ""data" . lvl30_rcccv_closure" {
     lvl30_rcccv_closure:
         const lvl30_rcccv_info;
         const 0;
         const 0;
         const 0;
 },
 lvl30_rcccv_entry() //  [R1]
         { []
         }
     {offset
       cchev: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cchew; else goto cchex;
       cchew: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchex: // global
           (_ccheq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccheq::I64 == 0) goto cches; else goto ccher;
       cches: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccher: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccheq::I64;
           I64[Sp - 24] = block_cchet_info;
           R2 = lvl29_rcccu_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl30_rcccv_info" {
     lvl30_rcccv_info:
         const lvl30_rcccv_entry;
         const 0;
         const 4294967317;
         const SccKB_srt+520;
 },
 _cchet() //  [R1]
         { []
         }
     {offset
       cchet: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchet_info" {
     block_cchet_info:
         const _cchet;
         const 0;
         const 4294967326;
         const SccKB_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.946056552 UTC

[section ""data" . sat_sccoZ_closure" {
     sat_sccoZ_closure:
         const GHC.Types.I#_con_info;
         const 1114111;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.947644542 UTC

[section ""data" . sat_sccp0_closure" {
     sat_sccp0_closure:
         const :_con_info;
         const sat_sccoZ_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.950314105 UTC

[section ""data" . lvl31_rcccw_closure" {
     lvl31_rcccw_closure:
         const lvl31_rcccw_info;
         const 0;
         const 0;
         const 0;
 },
 lvl31_rcccw_entry() //  [R1]
         { []
         }
     {offset
       ccheT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccheU; else goto ccheV;
       ccheU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccheV: // global
           (_ccheQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccheQ::I64 == 0) goto ccheS; else goto ccheR;
       ccheS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccheR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccheQ::I64;
           R3 = sat_sccp0_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl31_rcccw_info" {
     lvl31_rcccw_info:
         const lvl31_rcccw_entry;
         const 0;
         const 4294967317;
         const SccKB_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.953728162 UTC

[section ""data" . sat_sccp1_closure" {
     sat_sccp1_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.955435098 UTC

[section ""data" . sat_sccp2_closure" {
     sat_sccp2_closure:
         const :_con_info;
         const sat_sccp1_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.957688369 UTC

[section ""data" . lvl32_rcccx_closure" {
     lvl32_rcccx_closure:
         const lvl32_rcccx_info;
         const 0;
         const 0;
         const 0;
 },
 lvl32_rcccx_entry() //  [R1]
         { []
         }
     {offset
       cchfb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchfc; else goto cchfd;
       cchfc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchfd: // global
           (_cchf8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cchf8::I64 == 0) goto cchfa; else goto cchf9;
       cchfa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cchf9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cchf8::I64;
           R3 = sat_sccp2_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl32_rcccx_info" {
     lvl32_rcccx_info:
         const lvl32_rcccx_entry;
         const 0;
         const 4294967317;
         const SccKB_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.961095559 UTC

[section ""cstring" . lvl33_rcccy_bytes" {
     lvl33_rcccy_bytes:
         I8[] [48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.963310636 UTC

[section ""data" . lvl34_rcccz_closure" {
     lvl34_rcccz_closure:
         const lvl34_rcccz_info;
         const 0;
         const 0;
         const 0;
 },
 lvl34_rcccz_entry() //  [R1]
         { []
         }
     {offset
       cchfs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchft; else goto cchfu;
       cchft: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchfu: // global
           (_cchfp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cchfp::I64 == 0) goto cchfr; else goto cchfq;
       cchfr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cchfq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cchfp::I64;
           R2 = lvl33_rcccy_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl34_rcccz_info" {
     lvl34_rcccz_info:
         const lvl34_rcccz_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.96709486 UTC

[section ""data" . sat_sccp3_closure" {
     sat_sccp3_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.968735167 UTC

[section ""data" . sat_sccp4_closure" {
     sat_sccp4_closure:
         const :_con_info;
         const sat_sccp3_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.971483707 UTC

[section ""data" . lvl35_rcccA_closure" {
     lvl35_rcccA_closure:
         const lvl35_rcccA_info;
         const 0;
         const 0;
         const 0;
 },
 lvl35_rcccA_entry() //  [R1]
         { []
         }
     {offset
       cchfK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchfL; else goto cchfM;
       cchfL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchfM: // global
           (_cchfH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cchfH::I64 == 0) goto cchfJ; else goto cchfI;
       cchfJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cchfI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cchfH::I64;
           R3 = sat_sccp4_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl35_rcccA_info" {
     lvl35_rcccA_info:
         const lvl35_rcccA_entry;
         const 0;
         const 4294967317;
         const SccKB_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.974886458 UTC

[section ""cstring" . lvl36_rcccB_bytes" {
     lvl36_rcccB_bytes:
         I8[] [48,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.977017376 UTC

[section ""data" . lvl37_rcccC_closure" {
     lvl37_rcccC_closure:
         const lvl37_rcccC_info;
         const 0;
         const 0;
         const 0;
 },
 lvl37_rcccC_entry() //  [R1]
         { []
         }
     {offset
       cchg1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchg2; else goto cchg3;
       cchg2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchg3: // global
           (_cchfY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cchfY::I64 == 0) goto cchg0; else goto cchfZ;
       cchg0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cchfZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cchfY::I64;
           R2 = lvl36_rcccB_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl37_rcccC_info" {
     lvl37_rcccC_info:
         const lvl37_rcccC_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.980297508 UTC

[section ""data" . lvl38_rcccD_closure" {
     lvl38_rcccD_closure:
         const GHC.Base.Just_con_info;
         const lvl26_rcccr_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.98231113 UTC

[section ""data" . lvl39_rcccE_closure" {
     lvl39_rcccE_closure:
         const GHC.Base.Just_con_info;
         const lvl28_rccct_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.983932771 UTC

[section ""data" . lvl40_rcccF_closure" {
     lvl40_rcccF_closure:
         const GHC.Base.Just_con_info;
         const lvl34_rcccz_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:05.985564908 UTC

[section ""data" . lvl41_rcccG_closure" {
     lvl41_rcccG_closure:
         const GHC.Base.Just_con_info;
         const lvl37_rcccC_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.01026511 UTC

[section ""data" . Text.Printf.$wformatIntegral_closure" {
     Text.Printf.$wformatIntegral_closure:
         const Text.Printf.$wformatIntegral_info;
         const 0;
 },
 Text.Printf.$wformatIntegral_slow() //  [R1]
         { []
         }
     {offset
       cchgg: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sccpt_entry() //  [R1]
         { []
         }
     {offset
       cchhu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchhv; else goto cchhw;
       cchhv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchhw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.toUpper_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccpt_info" {
     sat_sccpt_info:
         const sat_sccpt_entry;
         const 1;
         const 4294967312;
         const SccKB_srt+552;
 },
 sat_sccpx_entry() //  [R1]
         { []
         }
     {offset
       cchhF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchhG; else goto cchhH;
       cchhG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchhH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.toUpper_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccpx_info" {
     sat_sccpx_info:
         const sat_sccpx_entry;
         const 1;
         const 4294967312;
         const SccKB_srt+552;
 },
 sat_sccpB_entry() //  [R1]
         { []
         }
     {offset
       cchhQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchhR; else goto cchhS;
       cchhR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchhS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.toUpper_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccpB_info" {
     sat_sccpB_info:
         const sat_sccpB_entry;
         const 1;
         const 4294967312;
         const SccKB_srt+552;
 },
 section ""relreadonly" . uchnu_srtd" {
     uchnu_srtd:
         const SccKB_srt+312;
         const 33;
         const 7516192777;
 },
 sat_sccpC_entry() //  [R1]
         { []
         }
     {offset
       cchhW: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cchhX; else goto cchhY;
       cchhX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchhY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_cchhf_info;
           R3 = Text.Printf.formatChar2_closure;
           _sccp6::P64 = P64[R1 + 24];
           R2 = _sccp6::P64;
           P64[Sp - 64] = P64[R1 + 16];
           P64[Sp - 56] = _sccp6::P64;
           P64[Sp - 48] = P64[R1 + 32];
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 72;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccpC_info" {
     sat_sccpC_info:
         const sat_sccpC_entry;
         const 6;
         const 18446744069414584335;
         const uchnu_srtd;
 },
 _cchhf() //  [R1]
         { []
         }
     {offset
       cchhf: // global
           if (R1 == 1) goto cchhV; else goto cchhU;
       cchhV: // global
           _sccp8::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cchhK_info;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = _sccp8::P64;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl24_rcccp_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
       cchhU: // global
           I64[Sp] = block_cchhj_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto uchig; else goto cchhk;
       uchig: // global
           call _cchhj(R1) args: 0, res: 0, upd: 0;
       cchhk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cchhf_info" {
     block_cchhf_info:
         const _cchhf;
         const 6;
         const 4035225270418931742;
         const SccKB_srt+336;
 },
 _cchhK() //  [R1, R2]
         { []
         }
     {offset
       cchhK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cchie; else goto cchid;
       cchie: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cchid: // global
           I64[Hp - 16] = sat_sccpB_info;
           P64[Hp] = R2;
           R5 = Hp - 16;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchhK_info" {
     block_cchhK_info:
         const _cchhK;
         const 259;
         const 4294967326;
         const SccKB_srt+552;
 },
 _cchhj() //  [R1]
         { []
         }
     {offset
       cchhj: // global
           _sccp5::P64 = P64[Sp + 8];
           _sccp6::P64 = P64[Sp + 16];
           _sccp8::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cchi2; else goto cchi7;
       cchi2: // global
           I64[Sp + 24] = block_cchho_info;
           R6 = _sccp6::P64;
           R5 = _sccp5::P64;
           R4 = _sccp8::P64;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl24_rcccp_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
       cchi7: // global
           I64[Sp + 24] = block_cchhz_info;
           R6 = _sccp6::P64;
           R5 = _sccp5::P64;
           R4 = _sccp8::P64;
           R3 = lvl38_rcccD_closure+2;
           R2 = lvl24_rcccp_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cchhj_info" {
     block_cchhj_info:
         const _cchhj;
         const 2054;
         const 4035225270418931742;
         const SccKB_srt+336;
 },
 _cchho() //  [R1, R2]
         { []
         }
     {offset
       cchho: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cchi5; else goto cchi4;
       cchi5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cchi4: // global
           I64[Hp - 16] = sat_sccpt_info;
           P64[Hp] = R2;
           R5 = Hp - 16;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchho_info" {
     block_cchho_info:
         const _cchho;
         const 259;
         const 4294967326;
         const SccKB_srt+552;
 },
 _cchhz() //  [R1, R2]
         { []
         }
     {offset
       cchhz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cchia; else goto cchi9;
       cchia: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cchi9: // global
           I64[Hp - 16] = sat_sccpx_info;
           P64[Hp] = R2;
           R5 = Hp - 16;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchhz_info" {
     block_cchhz_info:
         const _cchhz;
         const 259;
         const 4294967326;
         const SccKB_srt+552;
 },
 section ""relreadonly" . uchnv_srtd" {
     uchnv_srtd:
         const SccKB_srt+312;
         const 34;
         const 8589934603;
 },
 sat_sccpO_entry() //  [R1]
         { []
         }
     {offset
       cchir: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cchis; else goto cchit;
       cchis: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchit: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_cchim_info;
           R3 = Text.Printf.formatChar2_closure;
           _sccp6::P64 = P64[R1 + 24];
           R2 = _sccp6::P64;
           P64[Sp - 64] = P64[R1 + 16];
           P64[Sp - 56] = _sccp6::P64;
           P64[Sp - 48] = P64[R1 + 32];
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 72;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccpO_info" {
     sat_sccpO_info:
         const sat_sccpO_entry;
         const 6;
         const 18446744069414584335;
         const uchnv_srtd;
 },
 section ""relreadonly" . uchnw_srtd" {
     uchnw_srtd:
         const SccKB_srt+320;
         const 33;
         const 4294967301;
 },
 _cchim() //  [R1]
         { []
         }
     {offset
       cchim: // global
           if (R1 == 1) goto cchiq; else goto cchip;
       cchiq: // global
           _sccp8::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cchiR_info;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = _sccp8::P64;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl21_rccck_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
       cchip: // global
           I64[Sp] = block_cchiw_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto uchiW; else goto cchiy;
       uchiW: // global
           call _cchiw(R1) args: 0, res: 0, upd: 0;
       cchiy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cchim_info" {
     block_cchim_info:
         const _cchim;
         const 6;
         const 18446744069414584350;
         const uchnw_srtd;
 },
 _cchiR() //  [R1, R2]
         { []
         }
     {offset
       cchiR: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchiR_info" {
     block_cchiR_info:
         const _cchiR;
         const 259;
         const 30;
 },
 section ""relreadonly" . uchnx_srtd" {
     uchnx_srtd:
         const SccKB_srt+320;
         const 33;
         const 4294967301;
 },
 _cchiw() //  [R1]
         { []
         }
     {offset
       cchiw: // global
           _sccp5::P64 = P64[Sp + 8];
           _sccp6::P64 = P64[Sp + 16];
           _sccp8::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cchiF; else goto cchiM;
       cchiF: // global
           I64[Sp + 24] = block_cchiC_info;
           R6 = _sccp6::P64;
           R5 = _sccp5::P64;
           R4 = _sccp8::P64;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl21_rccck_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
       cchiM: // global
           I64[Sp + 24] = block_cchiK_info;
           R6 = _sccp6::P64;
           R5 = _sccp5::P64;
           R4 = _sccp8::P64;
           R3 = lvl39_rcccE_closure+2;
           R2 = lvl21_rccck_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cchiw_info" {
     block_cchiw_info:
         const _cchiw;
         const 2054;
         const 18446744069414584350;
         const uchnx_srtd;
 },
 _cchiC() //  [R1, R2]
         { []
         }
     {offset
       cchiC: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchiC_info" {
     block_cchiC_info:
         const _cchiC;
         const 259;
         const 30;
 },
 _cchiK() //  [R1, R2]
         { []
         }
     {offset
       cchiK: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchiK_info" {
     block_cchiK_info:
         const _cchiK;
         const 259;
         const 30;
 },
 sat_sccpX_entry() //  [R1]
         { []
         }
     {offset
       cchjo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cchjp; else goto cchjq;
       cchjp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchjq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cchjm_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccpX_info" {
     sat_sccpX_info:
         const sat_sccpX_entry;
         const 1;
         const 4294967312;
         const SccKB_srt+584;
 },
 _cchjm() //  [R1]
         { []
         }
     {offset
       cchjm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cchjv; else goto cchju;
       cchjv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       cchju: // global
           if (R1 > 1114111) goto cchjC; else goto cchjJ;
       cchjC: // global
           Hp = Hp - 16;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       cchjJ: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchjm_info" {
     block_cchjm_info:
         const _cchjm;
         const 0;
         const 4294967326;
         const SccKB_srt+584;
 },
 sat_sccq3_entry() //  [R1]
         { []
         }
     {offset
       cchjR: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cchjS; else goto cchjT;
       cchjS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchjT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cchjP_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call $wfmti_rcccm_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccq3_info" {
     sat_sccq3_info:
         const sat_sccq3_entry;
         const 5;
         const 12884901903;
         const SccKB_srt+360;
 },
 _cchjP() //  [R1, R2]
         { []
         }
     {offset
       cchjP: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchjP_info" {
     block_cchjP_info:
         const _cchjP;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 sat_sccq7_entry() //  [R1]
         { []
         }
     {offset
       cchk2: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cchk3; else goto cchk4;
       cchk3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchk4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cchk0_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call $wfmti_rcccm_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccq7_info" {
     sat_sccq7_info:
         const sat_sccq7_entry;
         const 5;
         const 12884901903;
         const SccKB_srt+360;
 },
 _cchk0() //  [R1, R2]
         { []
         }
     {offset
       cchk0: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchk0_info" {
     block_cchk0_info:
         const _cchk0;
         const 3;
         const 4294967326;
         const SccKB_srt+368;
 },
 sat_sccqj_entry() //  [R1]
         { []
         }
     {offset
       cchkg: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cchkh; else goto cchki;
       cchkh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchki: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_cchkb_info;
           R3 = Text.Printf.formatChar2_closure;
           _sccp6::P64 = P64[R1 + 24];
           R2 = _sccp6::P64;
           P64[Sp - 64] = P64[R1 + 16];
           P64[Sp - 56] = _sccp6::P64;
           P64[Sp - 48] = P64[R1 + 32];
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 72;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccqj_info" {
     sat_sccqj_info:
         const sat_sccqj_entry;
         const 6;
         const 64424509455;
         const SccKB_srt+592;
 },
 _cchkb() //  [R1]
         { []
         }
     {offset
       cchkb: // global
           if (R1 == 1) goto cchkf; else goto cchke;
       cchkf: // global
           _sccp8::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cchkG_info;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = _sccp8::P64;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl32_rcccx_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
       cchke: // global
           I64[Sp] = block_cchkl_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto uchkL; else goto cchkn;
       uchkL: // global
           call _cchkl(R1) args: 0, res: 0, upd: 0;
       cchkn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cchkb_info" {
     block_cchkb_info:
         const _cchkb;
         const 6;
         const 30064771102;
         const SccKB_srt+592;
 },
 _cchkG() //  [R1, R2]
         { []
         }
     {offset
       cchkG: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchkG_info" {
     block_cchkG_info:
         const _cchkG;
         const 259;
         const 30;
 },
 _cchkl() //  [R1]
         { []
         }
     {offset
       cchkl: // global
           _sccp5::P64 = P64[Sp + 8];
           _sccp6::P64 = P64[Sp + 16];
           _sccp8::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cchku; else goto cchkB;
       cchku: // global
           I64[Sp + 24] = block_cchkr_info;
           R6 = _sccp6::P64;
           R5 = _sccp5::P64;
           R4 = _sccp8::P64;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl32_rcccx_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
       cchkB: // global
           I64[Sp + 24] = block_cchkz_info;
           R6 = _sccp6::P64;
           R5 = _sccp5::P64;
           R4 = _sccp8::P64;
           R3 = lvl40_rcccF_closure+2;
           R2 = lvl32_rcccx_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cchkl_info" {
     block_cchkl_info:
         const _cchkl;
         const 2054;
         const 30064771102;
         const SccKB_srt+592;
 },
 _cchkr() //  [R1, R2]
         { []
         }
     {offset
       cchkr: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchkr_info" {
     block_cchkr_info:
         const _cchkr;
         const 259;
         const 30;
 },
 _cchkz() //  [R1, R2]
         { []
         }
     {offset
       cchkz: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchkz_info" {
     block_cchkz_info:
         const _cchkz;
         const 259;
         const 30;
 },
 sat_sccqn_entry() //  [R1]
         { []
         }
     {offset
       cchkT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cchkU; else goto cchkV;
       cchkU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchkV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cchkR_info;
           R6 = P64[R1 + 24];
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 32];
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl35_rcccA_closure;
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 40;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccqn_info" {
     sat_sccqn_info:
         const sat_sccqn_entry;
         const 5;
         const 21474836495;
         const SccKB_srt+608;
 },
 _cchkR() //  [R1, R2]
         { []
         }
     {offset
       cchkR: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchkR_info" {
     block_cchkR_info:
         const _cchkR;
         const 2;
         const 30;
 },
 sat_sccqz_entry() //  [R1]
         { []
         }
     {offset
       cchl7: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cchl8; else goto cchl9;
       cchl8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchl9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_cchl2_info;
           R3 = Text.Printf.formatChar2_closure;
           _sccp6::P64 = P64[R1 + 24];
           R2 = _sccp6::P64;
           P64[Sp - 64] = P64[R1 + 16];
           P64[Sp - 56] = _sccp6::P64;
           P64[Sp - 48] = P64[R1 + 32];
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 72;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccqz_info" {
     sat_sccqz_info:
         const sat_sccqz_entry;
         const 6;
         const 3027951943695;
         const SccKB_srt+560;
 },
 _cchl2() //  [R1]
         { []
         }
     {offset
       cchl2: // global
           if (R1 == 1) goto cchl6; else goto cchl5;
       cchl6: // global
           _sccp8::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cchlx_info;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = _sccp8::P64;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl24_rcccp_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
       cchl5: // global
           I64[Sp] = block_cchlc_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto uchlC; else goto cchle;
       uchlC: // global
           call _cchlc(R1) args: 0, res: 0, upd: 0;
       cchle: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cchl2_info" {
     block_cchl2_info:
         const _cchl2;
         const 6;
         const 2478196129822;
         const SccKB_srt+560;
 },
 _cchlx() //  [R1, R2]
         { []
         }
     {offset
       cchlx: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchlx_info" {
     block_cchlx_info:
         const _cchlx;
         const 259;
         const 30;
 },
 _cchlc() //  [R1]
         { []
         }
     {offset
       cchlc: // global
           _sccp5::P64 = P64[Sp + 8];
           _sccp6::P64 = P64[Sp + 16];
           _sccp8::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cchll; else goto cchls;
       cchll: // global
           I64[Sp + 24] = block_cchli_info;
           R6 = _sccp6::P64;
           R5 = _sccp5::P64;
           R4 = _sccp8::P64;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl24_rcccp_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
       cchls: // global
           I64[Sp + 24] = block_cchlq_info;
           R6 = _sccp6::P64;
           R5 = _sccp5::P64;
           R4 = _sccp8::P64;
           R3 = lvl41_rcccG_closure+2;
           R2 = lvl24_rcccp_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cchlc_info" {
     block_cchlc_info:
         const _cchlc;
         const 2054;
         const 2478196129822;
         const SccKB_srt+560;
 },
 _cchli() //  [R1, R2]
         { []
         }
     {offset
       cchli: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchli_info" {
     block_cchli_info:
         const _cchli;
         const 259;
         const 30;
 },
 _cchlq() //  [R1, R2]
         { []
         }
     {offset
       cchlq: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchlq_info" {
     block_cchlq_info:
         const _cchlq;
         const 259;
         const 30;
 },
 section ""relreadonly" . uchny_srtd" {
     uchny_srtd:
         const SccKB_srt+320;
         const 43;
         const 8795556937825;
 },
 Text.Printf.$wformatIntegral_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cchlH: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cchlI; else goto cchlJ;
       cchlI: // global
           R1 = Text.Printf.$wformatIntegral_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cchlJ: // global
           I64[Sp - 48] = block_cchgm_info;
           R1 = R5;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchnt; else goto cchgn;
       uchnt: // global
           call _cchgm(R1) args: 0, res: 0, upd: 0;
       cchgn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wformatIntegral_info" {
     Text.Printf.$wformatIntegral_info:
         const Text.Printf.$wformatIntegral_entry;
         const 0;
         const 18446744069414584334;
         const 38654705664;
         const uchny_srtd;
         const 16393;
         const Text.Printf.$wformatIntegral_slow;
 },
 section ""relreadonly" . uchnz_srtd" {
     uchnz_srtd:
         const SccKB_srt+320;
         const 43;
         const 7696045310049;
 },
 _cchgm() //  [R1]
         { []
         }
     {offset
       cchgm: // global
           _sccp9::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto cchlE; else goto cchlF;
       cchlE: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cchmr; else goto cchmq;
       cchmr: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchmq: // global
           _sccp7::P64 = P64[Sp + 24];
           _sccpa::P64 = P64[Sp + 48];
           _sccpb::P64 = P64[Sp + 56];
           _sccpc::P64 = P64[Sp + 64];
           _sccqB::I64 = I64[Sp + 72];
           if (_sccqB::I64 != 118) goto cchmt; else goto cchmu;
       cchmt: // global
           I64[Hp - 72] = GHC.Types.C#_con_info;
           I64[Hp - 64] = _sccqB::I64;
           I64[Hp - 56] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 48] = _sccp7::P64;
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = _sccp9::P64;
           P64[Hp - 24] = _sccpa::P64;
           P64[Hp - 16] = _sccpb::P64;
           P64[Hp - 8] = _sccpc::P64;
           P64[Hp] = Hp - 71;
           P64[Sp + 72] = _sccp7::P64;
           P64[Sp + 64] = GHC.Base.Nothing_closure+1;
           P64[Sp + 56] = _sccp9::P64;
           P64[Sp + 48] = _sccpa::P64;
           P64[Sp + 40] = _sccpb::P64;
           P64[Sp + 24] = _sccpc::P64;
           I64[Sp] = _sccqB::I64;
           Sp = Sp - 8;
           goto uchng;
       cchmu: // global
           I64[Hp - 72] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 64] = _sccp7::P64;
           P64[Hp - 56] = GHC.Base.Nothing_closure+1;
           P64[Hp - 48] = _sccp9::P64;
           P64[Hp - 40] = _sccpa::P64;
           P64[Hp - 32] = _sccpb::P64;
           P64[Hp - 24] = _sccpc::P64;
           P64[Hp - 16] = lvl23_rccco_closure+1;
           _cchgw::P64 = Hp - 71;
           Hp = Hp - 16;
           P64[Sp + 72] = _sccp7::P64;
           P64[Sp + 64] = GHC.Base.Nothing_closure+1;
           P64[Sp + 56] = _sccp9::P64;
           P64[Sp + 48] = _sccpa::P64;
           P64[Sp + 40] = _sccpb::P64;
           P64[Sp + 24] = _sccpc::P64;
           I64[Sp] = 100;
           Sp = Sp - 8;
           goto uchng;
       uchng: // global
           call _cchh5() args: 0, res: 0, upd: 0;
       cchlF: // global
           I64[Sp] = block_cchgz_info;
           _sccqA::P64 = R1;
           R1 = _sccp9::P64;
           P64[Sp + 40] = _sccqA::P64;
           if (R1 & 7 != 0) goto uchne; else goto cchgA;
       uchne: // global
           call _cchgz(R1) args: 0, res: 0, upd: 0;
       cchgA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchgm_info" {
     block_cchgm_info:
         const _cchgm;
         const 16393;
         const 18446744069414584350;
         const uchnz_srtd;
 },
 section ""relreadonly" . uchnA_srtd" {
     uchnA_srtd:
         const SccKB_srt+320;
         const 43;
         const 7696045310049;
 },
 _cchgz() //  [R1]
         { []
         }
     {offset
       cchgz: // global
           if (R1 & 7 == 1) goto cchmx; else goto cchmF;
       cchmx: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cchmA; else goto cchmz;
       cchmA: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchmz: // global
           _sccp7::P64 = P64[Sp + 24];
           _sccpa::P64 = P64[Sp + 48];
           _sccpb::P64 = P64[Sp + 56];
           _sccpc::P64 = P64[Sp + 64];
           _sccqA::P64 = P64[Sp + 40];
           _sccqH::I64 = I64[Sp + 72];
           if (_sccqH::I64 != 118) goto cchmC; else goto cchmD;
       cchmC: // global
           I64[Hp - 72] = GHC.Types.C#_con_info;
           I64[Hp - 64] = _sccqH::I64;
           I64[Hp - 56] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 48] = _sccp7::P64;
           P64[Hp - 40] = _sccqA::P64;
           P64[Hp - 32] = GHC.Base.Nothing_closure+1;
           P64[Hp - 24] = _sccpa::P64;
           P64[Hp - 16] = _sccpb::P64;
           P64[Hp - 8] = _sccpc::P64;
           P64[Hp] = Hp - 71;
           P64[Sp + 72] = _sccp7::P64;
           P64[Sp + 64] = _sccqA::P64;
           P64[Sp + 56] = GHC.Base.Nothing_closure+1;
           P64[Sp + 48] = _sccpa::P64;
           P64[Sp + 40] = _sccpb::P64;
           P64[Sp + 24] = _sccpc::P64;
           I64[Sp] = _sccqH::I64;
           Sp = Sp - 8;
           goto uchnj;
       cchmD: // global
           I64[Hp - 72] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 64] = _sccp7::P64;
           P64[Hp - 56] = _sccqA::P64;
           P64[Hp - 48] = GHC.Base.Nothing_closure+1;
           P64[Hp - 40] = _sccpa::P64;
           P64[Hp - 32] = _sccpb::P64;
           P64[Hp - 24] = _sccpc::P64;
           P64[Hp - 16] = lvl23_rccco_closure+1;
           _cchgJ::P64 = Hp - 71;
           Hp = Hp - 16;
           P64[Sp + 72] = _sccp7::P64;
           P64[Sp + 64] = _sccqA::P64;
           P64[Sp + 56] = GHC.Base.Nothing_closure+1;
           P64[Sp + 48] = _sccpa::P64;
           P64[Sp + 40] = _sccpb::P64;
           P64[Sp + 24] = _sccpc::P64;
           I64[Sp] = 100;
           Sp = Sp - 8;
           goto uchnj;
       uchnj: // global
           call _cchh5() args: 0, res: 0, upd: 0;
       cchmF: // global
           I64[Sp - 8] = block_cchgM_info;
           _sccqG::P64 = R1;
           R1 = P64[R1 + 6];
           P64[Sp] = _sccqG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchnh; else goto cchgN;
       uchnh: // global
           call _cchgM(R1) args: 0, res: 0, upd: 0;
       cchgN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchgz_info" {
     block_cchgz_info:
         const _cchgz;
         const 16393;
         const 18446744069414584350;
         const uchnA_srtd;
 },
 section ""relreadonly" . uchnB_srtd" {
     uchnB_srtd:
         const SccKB_srt+320;
         const 43;
         const 7696045310049;
 },
 _cchgM() //  [R1]
         { []
         }
     {offset
       cchgM: // global
           _sccp7::P64 = P64[Sp + 32];
           _sccpa::P64 = P64[Sp + 56];
           _sccpb::P64 = P64[Sp + 64];
           _sccpc::P64 = P64[Sp + 72];
           _sccpd::I64 = I64[Sp + 80];
           _sccqA::P64 = P64[Sp + 48];
           if (R1 & 7 == 1) goto cchmH; else goto cchmO;
       cchmH: // global
           Hp = Hp + 80;
           _sccqM::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cchmR; else goto cchmJ;
       cchmJ: // global
           _sccqG::P64 = P64[Sp + 8];
           if (_sccpd::I64 == 118) goto cchmN; else goto cchmM;
       cchmN: // global
           I64[Hp - 72] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 64] = _sccp7::P64;
           P64[Hp - 56] = _sccqA::P64;
           P64[Hp - 48] = _sccqG::P64;
           P64[Hp - 40] = _sccpa::P64;
           P64[Hp - 32] = _sccpb::P64;
           P64[Hp - 24] = _sccpc::P64;
           P64[Hp - 16] = lvl23_rccco_closure+1;
           _cchgW::P64 = Hp - 71;
           Hp = Hp - 16;
           P64[Sp + 80] = _sccp7::P64;
           P64[Sp + 72] = _sccqA::P64;
           P64[Sp + 64] = _sccqG::P64;
           P64[Sp + 56] = _sccpa::P64;
           P64[Sp + 48] = _sccpb::P64;
           P64[Sp + 32] = _sccpc::P64;
           I64[Sp + 8] = 100;
           goto uchnn;
       cchmM: // global
           I64[Hp - 72] = GHC.Types.C#_con_info;
           I64[Hp - 64] = _sccpd::I64;
           I64[Hp - 56] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 48] = _sccp7::P64;
           P64[Hp - 40] = _sccqA::P64;
           P64[Hp - 32] = _sccqG::P64;
           P64[Hp - 24] = _sccpa::P64;
           P64[Hp - 16] = _sccpb::P64;
           P64[Hp - 8] = _sccpc::P64;
           P64[Hp] = Hp - 71;
           P64[Sp + 80] = _sccp7::P64;
           P64[Sp + 72] = _sccqA::P64;
           P64[Sp + 64] = _sccqG::P64;
           P64[Sp + 56] = _sccpa::P64;
           P64[Sp + 48] = _sccpb::P64;
           P64[Sp + 32] = _sccpc::P64;
           I64[Sp + 8] = _sccpd::I64;
           goto uchnn;
       cchmO: // global
           Hp = Hp + 80;
           _sccqM::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cchmR; else goto cchmQ;
       cchmR: // global
           HpAlloc = 80;
           R1 = _sccqM::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchmQ: // global
           if (_sccpd::I64 == 118) goto cchmU; else goto cchmT;
       cchmU: // global
           I64[Hp - 72] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 64] = _sccp7::P64;
           P64[Hp - 56] = _sccqA::P64;
           P64[Hp - 48] = GHC.Base.Nothing_closure+1;
           P64[Hp - 40] = _sccpa::P64;
           P64[Hp - 32] = _sccpb::P64;
           P64[Hp - 24] = _sccpc::P64;
           P64[Hp - 16] = lvl23_rccco_closure+1;
           _cchh4::P64 = Hp - 71;
           Hp = Hp - 16;
           P64[Sp + 80] = _sccp7::P64;
           P64[Sp + 72] = _sccqA::P64;
           P64[Sp + 64] = GHC.Base.Nothing_closure+1;
           P64[Sp + 56] = _sccpa::P64;
           P64[Sp + 48] = _sccpb::P64;
           P64[Sp + 32] = _sccpc::P64;
           I64[Sp + 8] = 100;
           goto uchnn;
       cchmT: // global
           I64[Hp - 72] = GHC.Types.C#_con_info;
           I64[Hp - 64] = _sccpd::I64;
           I64[Hp - 56] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 48] = _sccp7::P64;
           P64[Hp - 40] = _sccqA::P64;
           P64[Hp - 32] = GHC.Base.Nothing_closure+1;
           P64[Hp - 24] = _sccpa::P64;
           P64[Hp - 16] = _sccpb::P64;
           P64[Hp - 8] = _sccpc::P64;
           P64[Hp] = Hp - 71;
           I64[Sp + 8] = _sccpd::I64;
           P64[Sp + 32] = _sccpc::P64;
           P64[Sp + 48] = _sccpb::P64;
           P64[Sp + 56] = _sccpa::P64;
           P64[Sp + 64] = GHC.Base.Nothing_closure+1;
           P64[Sp + 72] = _sccqA::P64;
           P64[Sp + 80] = _sccp7::P64;
           goto uchnn;
       uchnn: // global
           call _cchh5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cchgM_info" {
     block_cchgM_info:
         const _cchgM;
         const 32778;
         const 18446744069414584350;
         const uchnB_srtd;
 },
 section ""relreadonly" . uchnC_srtd" {
     uchnC_srtd:
         const SccKB_srt+320;
         const 43;
         const 7696045310049;
 },
 _cchh5() //  []
         { []
         }
     {offset
       cchh5: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cchlM; else goto cchlL;
       cchlM: // global
           HpAlloc = 64;
           I64[Sp] = block_cchh5_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cchlL: // global
           _sccpn::I64 = I64[Sp + 8];
           if (_sccpn::I64 >= 121) goto cchlO; else goto uchmZ;
       uchmZ: // global
           _sccp5::P64 = P64[Sp + 16];
           _sccp6::P64 = P64[Sp + 24];
           _sccp8::P64 = P64[Sp + 40];
           _sccpf::P64 = P64[Sp + 80];
           _sccph::P64 = P64[Sp + 64];
           _sccpj::P64 = P64[Sp + 48];
           if (_sccpn::I64 < 98) goto uchn0; else goto uchn1;
       uchn0: // global
           if (_sccpn::I64 != 88) goto cchlO; else goto cchlP;
       cchlP: // global
           I64[Hp - 56] = sat_sccpC_info;
           P64[Hp - 40] = _sccp5::P64;
           P64[Hp - 32] = _sccp6::P64;
           P64[Hp - 24] = _sccp8::P64;
           P64[Hp - 16] = _sccpf::P64;
           P64[Hp - 8] = _sccph::P64;
           P64[Hp] = _sccpj::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 88;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uchn1: // global
           _sccpi::P64 = P64[Sp + 56];
           switch [98 .. 120] _sccpn::I64 {
               case 98 : goto cchlQ;
               case 99 : goto cchlR;
               case 100 : goto cchmk;
               case 105 : goto cchml;
               case 111 : goto cchmm;
               case 117 : goto cchmn;
               case 120 : goto cchmo;
               default: {goto cchlO;}
           }
       cchmo: // global
           I64[Hp - 56] = sat_sccqz_info;
           P64[Hp - 40] = _sccp5::P64;
           P64[Hp - 32] = _sccp6::P64;
           P64[Hp - 24] = _sccp8::P64;
           P64[Hp - 16] = _sccpf::P64;
           P64[Hp - 8] = _sccph::P64;
           P64[Hp] = _sccpj::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 88;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cchmn: // global
           I64[Hp - 56] = sat_sccqn_info;
           P64[Hp - 40] = _sccp5::P64;
           P64[Hp - 32] = _sccp6::P64;
           P64[Hp - 24] = _sccp8::P64;
           P64[Hp - 16] = _sccpf::P64;
           P64[Hp - 8] = _sccph::P64;
           _cchkN::P64 = Hp - 56;
           Hp = Hp - 8;
           R2 = _cchkN::P64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 88;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cchmm: // global
           I64[Hp - 56] = sat_sccqj_info;
           P64[Hp - 40] = _sccp5::P64;
           P64[Hp - 32] = _sccp6::P64;
           P64[Hp - 24] = _sccp8::P64;
           P64[Hp - 16] = _sccpf::P64;
           P64[Hp - 8] = _sccph::P64;
           P64[Hp] = _sccpj::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 88;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cchml: // global
           I64[Hp - 56] = sat_sccq7_info;
           P64[Hp - 40] = _sccp6::P64;
           P64[Hp - 32] = _sccp8::P64;
           P64[Hp - 24] = _sccpf::P64;
           P64[Hp - 16] = _sccph::P64;
           P64[Hp - 8] = _sccpi::P64;
           _cchjW::P64 = Hp - 56;
           Hp = Hp - 8;
           R2 = _cchjW::P64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 88;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cchmk: // global
           I64[Hp - 56] = sat_sccq3_info;
           P64[Hp - 40] = _sccp6::P64;
           P64[Hp - 32] = _sccp8::P64;
           P64[Hp - 24] = _sccpf::P64;
           P64[Hp - 16] = _sccph::P64;
           P64[Hp - 8] = _sccpi::P64;
           _cchjL::P64 = Hp - 56;
           Hp = Hp - 8;
           R2 = _cchjL::P64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 88;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cchlR: // global
           Hp = Hp - 64;
           I64[Sp + 16] = block_cchiY_info;
           R3 = Text.Printf.formatChar2_closure;
           R2 = _sccp6::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       cchlQ: // global
           I64[Hp - 56] = sat_sccpO_info;
           P64[Hp - 40] = _sccp5::P64;
           P64[Hp - 32] = _sccp6::P64;
           P64[Hp - 24] = _sccp8::P64;
           P64[Hp - 16] = _sccpf::P64;
           P64[Hp - 8] = _sccph::P64;
           P64[Hp] = _sccpj::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 88;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cchlO: // global
           Hp = Hp - 64;
           R2 = _sccpn::I64;
           Sp = Sp + 88;
           call Text.Printf.$werrorBadFormat_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchh5_info" {
     block_cchh5_info:
         const _cchh5;
         const 74;
         const 18446744069414584350;
         const uchnC_srtd;
 },
 _cchiY() //  [R1]
         { []
         }
     {offset
       cchiY: // global
           if (R1 == 1) goto cchlX; else goto uchna;
       cchlX: // global
           I64[Sp] = block_cchj3_info;
           R3 = lvl31_rcccw_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       uchna: // global
           Sp = Sp + 72;
           call _cchmj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cchiY_info" {
     block_cchiY_info:
         const _cchiY;
         const 1800;
         const 108227132840214558;
         const SccKB_srt+464;
 },
 _cchj3() //  [R1]
         { []
         }
     {offset
       cchj3: // global
           if (R1 == 1) goto cchm3; else goto uchnb;
       cchm3: // global
           I64[Sp] = block_cchj8_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto uchnp; else goto cchj9;
       uchnp: // global
           call _cchj8(R1) args: 0, res: 0, upd: 0;
       cchj9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       uchnb: // global
           Sp = Sp + 72;
           call _cchmj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cchj3_info" {
     block_cchj3_info:
         const _cchj3;
         const 1800;
         const 36169538802286622;
         const SccKB_srt+464;
 },
 _cchj8() //  [R1]
         { []
         }
     {offset
       cchj8: // global
           if (R1 & 7 == 1) goto cchm6; else goto uchnc;
       cchm6: // global
           I64[Sp] = block_cchjd_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[Sp + 16];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       uchnc: // global
           Sp = Sp + 72;
           call _cchmj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cchj8_info" {
     block_cchj8_info:
         const _cchj8;
         const 5896;
         const 36169538802286622;
         const SccKB_srt+464;
 },
 _cchjd() //  [R1]
         { []
         }
     {offset
       cchjd: // global
           if (R1 & 7 == 1) goto uchnd; else goto cchmc;
       uchnd: // global
           Sp = Sp + 72;
           call _cchmj() args: 0, res: 0, upd: 0;
       cchmc: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cchmf; else goto cchme;
       cchmf: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchme: // global
           I64[Hp - 40] = sat_sccpX_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.Types.[]_closure+1;
           R6 = 115;
           R5 = P64[Sp + 48];
           R4 = GHC.Base.Nothing_closure+1;
           R3 = P64[Sp + 64];
           R2 = Hp - 14;
           Sp = Sp + 72;
           call Text.Printf.$w$sformatString_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchjd_info" {
     block_cchjd_info:
         const _cchjd;
         const 6024;
         const 36169538802286622;
         const SccKB_srt+464;
 },
 _cchmj() //  []
         { []
         }
     {offset
       cchmj: // global
           R1 = lvl30_rcccv_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.106694983 UTC

[section ""data" . Text.Printf.formatIntegral_closure" {
     Text.Printf.formatIntegral_closure:
         const Text.Printf.formatIntegral_info;
         const 0;
 },
 Text.Printf.formatIntegral_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cchrj: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cchrn; else goto cchro;
       cchrn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.formatIntegral_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cchro: // global
           I64[Sp - 24] = block_cchrg_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uchrw; else goto cchrh;
       uchrw: // global
           call _cchrg(R1) args: 0, res: 0, upd: 0;
       cchrh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.formatIntegral_info" {
     Text.Printf.formatIntegral_info:
         const Text.Printf.formatIntegral_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const SccKB_srt+640;
 },
 _cchrg() //  [R1]
         { []
         }
     {offset
       cchrg: // global
           I64[Sp - 48] = block_cchrm_info;
           _sccqZ::P64 = P64[R1 + 7];
           _sccr0::P64 = P64[R1 + 15];
           _sccr1::P64 = P64[R1 + 23];
           _sccr2::P64 = P64[R1 + 31];
           _sccr3::P64 = P64[R1 + 39];
           _sccr4::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sccr0::P64;
           P64[Sp - 32] = _sccr1::P64;
           P64[Sp - 24] = _sccr2::P64;
           P64[Sp - 16] = _sccr3::P64;
           P64[Sp - 8] = _sccr4::P64;
           P64[Sp] = _sccqZ::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchrv; else goto cchrq;
       uchrv: // global
           call _cchrm(R1) args: 0, res: 0, upd: 0;
       cchrq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchrg_info" {
     block_cchrg_info:
         const _cchrg;
         const 2;
         const 4294967326;
         const SccKB_srt+640;
 },
 _cchrm() //  [R1]
         { []
         }
     {offset
       cchrm: // global
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 64];
           R2 = P64[Sp + 56];
           _sccr4::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = P64[Sp + 32];
           P64[Sp + 56] = _sccr4::P64;
           I64[Sp + 64] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchrm_info" {
     block_cchrm_info:
         const _cchrm;
         const 8;
         const 4294967326;
         const SccKB_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.113706563 UTC

[section ""data" . Text.Printf.formatChar1_closure" {
     Text.Printf.formatChar1_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.formatChar2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.11794036 UTC

[section ""data" . Text.Printf.$wformatChar_closure" {
     Text.Printf.$wformatChar_closure:
         const Text.Printf.$wformatChar_info;
         const 0;
 },
 Text.Printf.$wformatChar_slow() //  [R1]
         { []
         }
     {offset
       cchrP: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$wformatChar_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sccrk_entry() //  [R1]
         { []
         }
     {offset
       cchs2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cchs3; else goto cchs4;
       cchs3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchs4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cchrZ_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uchs9; else goto cchs0;
       uchs9: // global
           call _cchrZ(R1) args: 0, res: 0, upd: 0;
       cchs0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccrk_info" {
     sat_sccrk_info:
         const sat_sccrk_entry;
         const 1;
         const 16;
 },
 _cchrZ() //  [R1]
         { []
         }
     {offset
       cchrZ: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchrZ_info" {
     block_cchrZ_info:
         const _cchrZ;
         const 0;
         const 30;
 },
 sat_sccro_entry() //  [R1]
         { []
         }
     {offset
       cchsi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cchsj; else goto cchsk;
       cchsj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchsk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cchsf_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uchsp; else goto cchsg;
       uchsp: // global
           call _cchsf(R1) args: 0, res: 0, upd: 0;
       cchsg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccro_info" {
     sat_sccro_info:
         const sat_sccro_entry;
         const 1;
         const 16;
 },
 _cchsf() //  [R1]
         { []
         }
     {offset
       cchsf: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchsf_info" {
     block_cchsf_info:
         const _cchsf;
         const 0;
         const 30;
 },
 Text.Printf.$wformatChar_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cchst: // global
           _sccrc::P64 = R6;
           _sccrb::P64 = R5;
           _sccra::P64 = R4;
           _sccr9::P64 = R3;
           _sccr8::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cchsu; else goto cchsv;
       cchsv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cchsx; else goto cchsw;
       cchsx: // global
           HpAlloc = 24;
           goto cchsu;
       cchsu: // global
           R1 = Text.Printf.$wformatChar_closure;
           P64[Sp - 40] = _sccr8::P64;
           P64[Sp - 32] = _sccr9::P64;
           P64[Sp - 24] = _sccra::P64;
           P64[Sp - 16] = _sccrb::P64;
           P64[Sp - 8] = _sccrc::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cchsw: // global
           _sccrg::I64 = I64[Sp + 16];
           if (_sccrg::I64 != 118) goto cchsr; else goto cchss;
       cchsr: // global
           I64[Hp - 16] = sat_sccrk_info;
           P64[Hp] = _sccr8::P64;
           R6 = _sccrb::P64;
           R5 = _sccra::P64;
           R4 = _sccr9::P64;
           R3 = Hp - 16;
           R2 = Text.Printf.formatChar1_closure+2;
           P64[Sp - 8] = _sccrc::P64;
           I64[Sp + 16] = _sccrg::I64;
           Sp = Sp - 8;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
       cchss: // global
           I64[Hp - 16] = sat_sccro_info;
           P64[Hp] = _sccr8::P64;
           R6 = _sccrb::P64;
           R5 = _sccra::P64;
           R4 = _sccr9::P64;
           R3 = Hp - 16;
           R2 = Text.Printf.formatChar1_closure+2;
           P64[Sp - 8] = _sccrc::P64;
           I64[Sp + 16] = 99;
           Sp = Sp - 8;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wformatChar_info" {
     Text.Printf.$wformatChar_info:
         const Text.Printf.$wformatChar_entry;
         const 0;
         const 210453397518;
         const 34359738368;
         const SccKB_srt+640;
         const 8200;
         const Text.Printf.$wformatChar_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.130413538 UTC

[section ""data" . Text.Printf.formatChar_closure" {
     Text.Printf.formatChar_closure:
         const Text.Printf.formatChar_info;
         const 0;
 },
 Text.Printf.formatChar_entry() //  [R2, R3]
         { []
         }
     {offset
       ccht2: // global
           if ((Sp + -64) < SpLim) (likely: False) goto ccht6; else goto ccht7;
       ccht6: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.formatChar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccht7: // global
           I64[Sp - 16] = block_cchsZ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uchtf; else goto ccht0;
       uchtf: // global
           call _cchsZ(R1) args: 0, res: 0, upd: 0;
       ccht0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.formatChar_info" {
     Text.Printf.formatChar_info:
         const Text.Printf.formatChar_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SccKB_srt+672;
 },
 _cchsZ() //  [R1]
         { []
         }
     {offset
       cchsZ: // global
           I64[Sp - 48] = block_ccht5_info;
           _sccrs::P64 = P64[R1 + 7];
           _sccrt::P64 = P64[R1 + 15];
           _sccru::P64 = P64[R1 + 23];
           _sccrv::P64 = P64[R1 + 31];
           _sccrw::P64 = P64[R1 + 39];
           _sccrx::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sccrt::P64;
           P64[Sp - 32] = _sccru::P64;
           P64[Sp - 24] = _sccrv::P64;
           P64[Sp - 16] = _sccrw::P64;
           P64[Sp - 8] = _sccrx::P64;
           P64[Sp] = _sccrs::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchte; else goto ccht9;
       uchte: // global
           call _ccht5(R1) args: 0, res: 0, upd: 0;
       ccht9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchsZ_info" {
     block_cchsZ_info:
         const _cchsZ;
         const 1;
         const 4294967326;
         const SccKB_srt+672;
 },
 _ccht5() //  [R1]
         { []
         }
     {offset
       ccht5: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 56];
           _sccrx::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 32];
           P64[Sp + 48] = _sccrx::P64;
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$wformatChar_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccht5_info" {
     block_ccht5_info:
         const _ccht5;
         const 7;
         const 4294967326;
         const SccKB_srt+672;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.137119619 UTC

[section ""data" . Text.Printf.$fPrintfArgChar_closure" {
     Text.Printf.$fPrintfArgChar_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.formatChar_closure+2;
         const Text.Printf.$fPrintfArgChar_$cparseFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.138908412 UTC

[section ""data" . Text.Printf.$fPrintfArgWord1_closure" {
     Text.Printf.$fPrintfArgWord1_closure:
         const GHC.Types.C#_con_info;
         const 117;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.144410294 UTC

[section ""data" . Text.Printf.$w$sformatInt3_closure" {
     Text.Printf.$w$sformatInt3_closure:
         const Text.Printf.$w$sformatInt3_info;
         const 0;
 },
 Text.Printf.$w$sformatInt3_slow() //  [R1]
         { []
         }
     {offset
       cchty: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt3_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sccrZ_entry() //  [R1]
         { []
         }
     {offset
       cchtT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchtU; else goto cchtV;
       cchtU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchtV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Word.$fIntegralWord64_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccrZ_info" {
     sat_sccrZ_info:
         const sat_sccrZ_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uchuG_srtd" {
     uchuG_srtd:
         const SccKB_srt+192;
         const 62;
         const 2305843009213693957;
 },
 sat_sccrY_entry() //  [R1]
         { []
         }
     {offset
       cchu7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cchu8; else goto cchu9;
       cchu8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchu9: // global
           I64[Sp - 8] = block_cchu0_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchus; else goto cchu1;
       uchus: // global
           call _cchu0(R1) args: 0, res: 0, upd: 0;
       cchu1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccrY_info" {
     sat_sccrY_info:
         const sat_sccrY_entry;
         const 1;
         const 18446744069414584336;
         const uchuG_srtd;
 },
 section ""relreadonly" . uchuH_srtd" {
     uchuH_srtd:
         const SccKB_srt+192;
         const 62;
         const 2305843009213693957;
 },
 _cchu0() //  [R1]
         { []
         }
     {offset
       cchu0: // global
           if (R1 & 7 == 1) goto cchu4; else goto cchu5;
       cchu4: // global
           R1 = Text.Printf.formatChar1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cchu5: // global
           I64[Sp] = block_cchuf_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchu0_info" {
     block_cchu0_info:
         const _cchu0;
         const 0;
         const 18446744069414584350;
         const uchuH_srtd;
 },
 _cchuf() //  [R1]
         { []
         }
     {offset
       cchuf: // global
           if (R1 & 7 == 1) goto cchum; else goto cchuq;
       cchum: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cchuq: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchuf_info" {
     block_cchuf_info:
         const _cchuf;
         const 0;
         const 4294967326;
         const SccKB_srt+696;
 },
 section ""relreadonly" . uchuI_srtd" {
     uchuI_srtd:
         const SccKB_srt+192;
         const 65;
         const 11601272640106397697;
         const 1;
 },
 Text.Printf.$w$sformatInt3_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cchuw: // global
           _sccrF::P64 = R6;
           _sccrE::P64 = R5;
           _sccrD::P64 = R4;
           _sccrC::P64 = R3;
           _sccrB::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cchux; else goto cchuy;
       cchuy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cchuA; else goto cchuz;
       cchuA: // global
           HpAlloc = 16;
           goto cchux;
       cchux: // global
           R1 = Text.Printf.$w$sformatInt3_closure;
           P64[Sp - 40] = _sccrB::P64;
           P64[Sp - 32] = _sccrC::P64;
           P64[Sp - 24] = _sccrD::P64;
           P64[Sp - 16] = _sccrE::P64;
           P64[Sp - 8] = _sccrF::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cchuz: // global
           _sccrG::P64 = P64[Sp];
           _sccrH::P64 = P64[Sp + 8];
           _sccs0::I64 = I64[Sp + 16];
           if (_sccs0::I64 != 118) goto cchuu; else goto cchuv;
       cchuu: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sccs0::I64;
           _sccrQ::P64 = Hp - 7;
           _sccrP::P64 = _sccrH::P64;
           _sccrO::P64 = _sccrG::P64;
           _sccrN::P64 = _sccrF::P64;
           _sccrM::P64 = _sccrE::P64;
           _sccrL::P64 = _sccrD::P64;
           _sccrK::P64 = _sccrC::P64;
           goto sccrJ;
       cchuv: // global
           Hp = Hp - 16;
           _sccrQ::P64 = Text.Printf.$fPrintfArgWord1_closure+1;
           _sccrP::P64 = _sccrH::P64;
           _sccrO::P64 = _sccrG::P64;
           _sccrN::P64 = _sccrF::P64;
           _sccrM::P64 = _sccrE::P64;
           _sccrL::P64 = _sccrD::P64;
           _sccrK::P64 = _sccrC::P64;
           goto sccrJ;
       sccrJ: // global
           I64[Sp - 48] = block_cchtK_info;
           R1 = _sccrQ::P64;
           P64[Sp - 40] = _sccrL::P64;
           P64[Sp - 32] = _sccrM::P64;
           P64[Sp - 24] = _sccrN::P64;
           P64[Sp - 16] = _sccrO::P64;
           P64[Sp - 8] = _sccrP::P64;
           P64[Sp] = _sccrK::P64;
           P64[Sp + 16] = _sccrB::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchuF; else goto cchtL;
       uchuF: // global
           call _cchtK(R1) args: 0, res: 0, upd: 0;
       cchtL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sformatInt3_info" {
     Text.Printf.$w$sformatInt3_info:
         const Text.Printf.$w$sformatInt3_entry;
         const 0;
         const 18446744069414584334;
         const 34359738368;
         const uchuI_srtd;
         const 8200;
         const Text.Printf.$w$sformatInt3_slow;
 },
 section ""relreadonly" . uchuJ_srtd" {
     uchuJ_srtd:
         const SccKB_srt+192;
         const 64;
         const 11601272640106397697;
 },
 _cchtK() //  [R1]
         { []
         }
     {offset
       cchtK: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cchuE; else goto cchuD;
       cchuE: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchuD: // global
           _sccrS::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sccrZ_info;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = sat_sccrY_info;
           P64[Hp] = P64[Sp + 56];
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sccrP::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = P64[Sp + 32];
           P64[Sp + 56] = _sccrP::P64;
           I64[Sp + 64] = _sccrS::I64;
           Sp = Sp + 40;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchtK_info" {
     block_cchtK_info:
         const _cchtK;
         const 8;
         const 18446744069414584350;
         const uchuJ_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.162683155 UTC

[section ""data" . Text.Printf.$fPrintfArgWord64_$sformatInt_closure" {
     Text.Printf.$fPrintfArgWord64_$sformatInt_closure:
         const Text.Printf.$fPrintfArgWord64_$sformatInt_info;
         const 0;
 },
 Text.Printf.$fPrintfArgWord64_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cchvx: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cchvB; else goto cchvC;
       cchvB: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgWord64_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cchvC: // global
           I64[Sp - 16] = block_cchvu_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uchvK; else goto cchvv;
       uchvK: // global
           call _cchvu(R1) args: 0, res: 0, upd: 0;
       cchvv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgWord64_$sformatInt_info" {
     Text.Printf.$fPrintfArgWord64_$sformatInt_info:
         const Text.Printf.$fPrintfArgWord64_$sformatInt_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SccKB_srt+704;
 },
 _cchvu() //  [R1]
         { []
         }
     {offset
       cchvu: // global
           I64[Sp - 48] = block_cchvA_info;
           _sccs5::P64 = P64[R1 + 7];
           _sccs6::P64 = P64[R1 + 15];
           _sccs7::P64 = P64[R1 + 23];
           _sccs8::P64 = P64[R1 + 31];
           _sccs9::P64 = P64[R1 + 39];
           _sccsa::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sccs6::P64;
           P64[Sp - 32] = _sccs7::P64;
           P64[Sp - 24] = _sccs8::P64;
           P64[Sp - 16] = _sccs9::P64;
           P64[Sp - 8] = _sccsa::P64;
           P64[Sp] = _sccs5::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchvJ; else goto cchvE;
       uchvJ: // global
           call _cchvA(R1) args: 0, res: 0, upd: 0;
       cchvE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchvu_info" {
     block_cchvu_info:
         const _cchvu;
         const 1;
         const 4294967326;
         const SccKB_srt+704;
 },
 _cchvA() //  [R1]
         { []
         }
     {offset
       cchvA: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 56];
           _sccsa::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 32];
           P64[Sp + 48] = _sccsa::P64;
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt3_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchvA_info" {
     block_cchvA_info:
         const _cchvA;
         const 7;
         const 4294967326;
         const SccKB_srt+704;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.173120723 UTC

[section ""data" . Text.Printf.$w$sformatInt2_closure" {
     Text.Printf.$w$sformatInt2_closure:
         const Text.Printf.$w$sformatInt2_info;
         const 0;
 },
 Text.Printf.$w$sformatInt2_slow() //  [R1]
         { []
         }
     {offset
       cchw1: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt2_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sccsC_entry() //  [R1]
         { []
         }
     {offset
       cchwm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchwn; else goto cchwo;
       cchwn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchwo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Word.$ctoInteger2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccsC_info" {
     sat_sccsC_info:
         const sat_sccsC_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uchx9_srtd" {
     uchx9_srtd:
         const SccKB_srt+192;
         const 64;
         const 11529215046068469761;
 },
 sat_sccsB_entry() //  [R1]
         { []
         }
     {offset
       cchwA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cchwB; else goto cchwC;
       cchwB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchwC: // global
           I64[Sp - 8] = block_cchwt_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchwV; else goto cchwu;
       uchwV: // global
           call _cchwt(R1) args: 0, res: 0, upd: 0;
       cchwu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccsB_info" {
     sat_sccsB_info:
         const sat_sccsB_entry;
         const 1;
         const 18446744069414584336;
         const uchx9_srtd;
 },
 section ""relreadonly" . uchxa_srtd" {
     uchxa_srtd:
         const SccKB_srt+192;
         const 64;
         const 11529215046068469761;
 },
 _cchwt() //  [R1]
         { []
         }
     {offset
       cchwt: // global
           if (R1 & 7 == 1) goto cchwx; else goto cchwy;
       cchwx: // global
           R1 = Text.Printf.formatChar1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cchwy: // global
           I64[Sp] = block_cchwI_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchwt_info" {
     block_cchwt_info:
         const _cchwt;
         const 0;
         const 18446744069414584350;
         const uchxa_srtd;
 },
 _cchwI() //  [R1]
         { []
         }
     {offset
       cchwI: // global
           if (R1 & 7 == 1) goto cchwP; else goto cchwT;
       cchwP: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cchwT: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchwI_info" {
     block_cchwI_info:
         const _cchwI;
         const 0;
         const 4294967326;
         const SccKB_srt+696;
 },
 section ""relreadonly" . uchxb_srtd" {
     uchxb_srtd:
         const SccKB_srt+192;
         const 67;
         const 11601272640106397697;
         const 4;
 },
 Text.Printf.$w$sformatInt2_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cchwZ: // global
           _sccsi::P64 = R6;
           _sccsh::P64 = R5;
           _sccsg::P64 = R4;
           _sccsf::P64 = R3;
           _sccse::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cchx0; else goto cchx1;
       cchx1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cchx3; else goto cchx2;
       cchx3: // global
           HpAlloc = 16;
           goto cchx0;
       cchx0: // global
           R1 = Text.Printf.$w$sformatInt2_closure;
           P64[Sp - 40] = _sccse::P64;
           P64[Sp - 32] = _sccsf::P64;
           P64[Sp - 24] = _sccsg::P64;
           P64[Sp - 16] = _sccsh::P64;
           P64[Sp - 8] = _sccsi::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cchx2: // global
           _sccsj::P64 = P64[Sp];
           _sccsk::P64 = P64[Sp + 8];
           _sccsD::I64 = I64[Sp + 16];
           if (_sccsD::I64 != 118) goto cchwX; else goto cchwY;
       cchwX: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sccsD::I64;
           _sccst::P64 = Hp - 7;
           _sccss::P64 = _sccsk::P64;
           _sccsr::P64 = _sccsj::P64;
           _sccsq::P64 = _sccsi::P64;
           _sccsp::P64 = _sccsh::P64;
           _sccso::P64 = _sccsg::P64;
           _sccsn::P64 = _sccsf::P64;
           goto sccsm;
       cchwY: // global
           Hp = Hp - 16;
           _sccst::P64 = Text.Printf.$fPrintfArgWord1_closure+1;
           _sccss::P64 = _sccsk::P64;
           _sccsr::P64 = _sccsj::P64;
           _sccsq::P64 = _sccsi::P64;
           _sccsp::P64 = _sccsh::P64;
           _sccso::P64 = _sccsg::P64;
           _sccsn::P64 = _sccsf::P64;
           goto sccsm;
       sccsm: // global
           I64[Sp - 48] = block_cchwd_info;
           R1 = _sccst::P64;
           P64[Sp - 40] = _sccso::P64;
           P64[Sp - 32] = _sccsp::P64;
           P64[Sp - 24] = _sccsq::P64;
           P64[Sp - 16] = _sccsr::P64;
           P64[Sp - 8] = _sccss::P64;
           P64[Sp] = _sccsn::P64;
           P64[Sp + 16] = _sccse::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchx8; else goto cchwe;
       uchx8: // global
           call _cchwd(R1) args: 0, res: 0, upd: 0;
       cchwe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sformatInt2_info" {
     Text.Printf.$w$sformatInt2_info:
         const Text.Printf.$w$sformatInt2_entry;
         const 0;
         const 18446744069414584334;
         const 34359738368;
         const uchxb_srtd;
         const 8200;
         const Text.Printf.$w$sformatInt2_slow;
 },
 section ""relreadonly" . uchxc_srtd" {
     uchxc_srtd:
         const SccKB_srt+192;
         const 64;
         const 11601272640106397697;
 },
 _cchwd() //  [R1]
         { []
         }
     {offset
       cchwd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cchx7; else goto cchx6;
       cchx7: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchx6: // global
           _sccsv::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sccsC_info;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = sat_sccsB_info;
           P64[Hp] = P64[Sp + 56];
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sccss::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = P64[Sp + 32];
           P64[Sp + 56] = _sccss::P64;
           I64[Sp + 64] = _sccsv::I64;
           Sp = Sp + 40;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchwd_info" {
     block_cchwd_info:
         const _cchwd;
         const 8;
         const 18446744069414584350;
         const uchxc_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.19144758 UTC

[section ""data" . Text.Printf.$fPrintfArgWord32_$sformatInt_closure" {
     Text.Printf.$fPrintfArgWord32_$sformatInt_closure:
         const Text.Printf.$fPrintfArgWord32_$sformatInt_info;
         const 0;
 },
 Text.Printf.$fPrintfArgWord32_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cchy0: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cchy4; else goto cchy5;
       cchy4: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgWord32_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cchy5: // global
           I64[Sp - 16] = block_cchxX_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uchyd; else goto cchxY;
       uchyd: // global
           call _cchxX(R1) args: 0, res: 0, upd: 0;
       cchxY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgWord32_$sformatInt_info" {
     Text.Printf.$fPrintfArgWord32_$sformatInt_info:
         const Text.Printf.$fPrintfArgWord32_$sformatInt_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SccKB_srt+720;
 },
 _cchxX() //  [R1]
         { []
         }
     {offset
       cchxX: // global
           I64[Sp - 48] = block_cchy3_info;
           _sccsI::P64 = P64[R1 + 7];
           _sccsJ::P64 = P64[R1 + 15];
           _sccsK::P64 = P64[R1 + 23];
           _sccsL::P64 = P64[R1 + 31];
           _sccsM::P64 = P64[R1 + 39];
           _sccsN::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sccsJ::P64;
           P64[Sp - 32] = _sccsK::P64;
           P64[Sp - 24] = _sccsL::P64;
           P64[Sp - 16] = _sccsM::P64;
           P64[Sp - 8] = _sccsN::P64;
           P64[Sp] = _sccsI::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchyc; else goto cchy7;
       uchyc: // global
           call _cchy3(R1) args: 0, res: 0, upd: 0;
       cchy7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchxX_info" {
     block_cchxX_info:
         const _cchxX;
         const 1;
         const 4294967326;
         const SccKB_srt+720;
 },
 _cchy3() //  [R1]
         { []
         }
     {offset
       cchy3: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 56];
           _sccsN::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 32];
           P64[Sp + 48] = _sccsN::P64;
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt2_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchy3_info" {
     block_cchy3_info:
         const _cchy3;
         const 7;
         const 4294967326;
         const SccKB_srt+720;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.202027857 UTC

[section ""data" . Text.Printf.$w$sformatInt1_closure" {
     Text.Printf.$w$sformatInt1_closure:
         const Text.Printf.$w$sformatInt1_info;
         const 0;
 },
 Text.Printf.$w$sformatInt1_slow() //  [R1]
         { []
         }
     {offset
       cchyu: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt1_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_scctf_entry() //  [R1]
         { []
         }
     {offset
       cchyP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchyQ; else goto cchyR;
       cchyQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchyR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Word.$ctoInteger1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scctf_info" {
     sat_scctf_info:
         const sat_scctf_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uchzC_srtd" {
     uchzC_srtd:
         const SccKB_srt+192;
         const 64;
         const 11529215046068469761;
 },
 sat_sccte_entry() //  [R1]
         { []
         }
     {offset
       cchz3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cchz4; else goto cchz5;
       cchz4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchz5: // global
           I64[Sp - 8] = block_cchyW_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchzo; else goto cchyX;
       uchzo: // global
           call _cchyW(R1) args: 0, res: 0, upd: 0;
       cchyX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccte_info" {
     sat_sccte_info:
         const sat_sccte_entry;
         const 1;
         const 18446744069414584336;
         const uchzC_srtd;
 },
 section ""relreadonly" . uchzD_srtd" {
     uchzD_srtd:
         const SccKB_srt+192;
         const 64;
         const 11529215046068469761;
 },
 _cchyW() //  [R1]
         { []
         }
     {offset
       cchyW: // global
           if (R1 & 7 == 1) goto cchz0; else goto cchz1;
       cchz0: // global
           R1 = Text.Printf.formatChar1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cchz1: // global
           I64[Sp] = block_cchzb_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchyW_info" {
     block_cchyW_info:
         const _cchyW;
         const 0;
         const 18446744069414584350;
         const uchzD_srtd;
 },
 _cchzb() //  [R1]
         { []
         }
     {offset
       cchzb: // global
           if (R1 & 7 == 1) goto cchzi; else goto cchzm;
       cchzi: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cchzm: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchzb_info" {
     block_cchzb_info:
         const _cchzb;
         const 0;
         const 4294967326;
         const SccKB_srt+696;
 },
 section ""relreadonly" . uchzE_srtd" {
     uchzE_srtd:
         const SccKB_srt+192;
         const 69;
         const 11601272640106397697;
         const 16;
 },
 Text.Printf.$w$sformatInt1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cchzs: // global
           _sccsV::P64 = R6;
           _sccsU::P64 = R5;
           _sccsT::P64 = R4;
           _sccsS::P64 = R3;
           _sccsR::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cchzt; else goto cchzu;
       cchzu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cchzw; else goto cchzv;
       cchzw: // global
           HpAlloc = 16;
           goto cchzt;
       cchzt: // global
           R1 = Text.Printf.$w$sformatInt1_closure;
           P64[Sp - 40] = _sccsR::P64;
           P64[Sp - 32] = _sccsS::P64;
           P64[Sp - 24] = _sccsT::P64;
           P64[Sp - 16] = _sccsU::P64;
           P64[Sp - 8] = _sccsV::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cchzv: // global
           _sccsW::P64 = P64[Sp];
           _sccsX::P64 = P64[Sp + 8];
           _scctg::I64 = I64[Sp + 16];
           if (_scctg::I64 != 118) goto cchzq; else goto cchzr;
       cchzq: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _scctg::I64;
           _scct6::P64 = Hp - 7;
           _scct5::P64 = _sccsX::P64;
           _scct4::P64 = _sccsW::P64;
           _scct3::P64 = _sccsV::P64;
           _scct2::P64 = _sccsU::P64;
           _scct1::P64 = _sccsT::P64;
           _scct0::P64 = _sccsS::P64;
           goto sccsZ;
       cchzr: // global
           Hp = Hp - 16;
           _scct6::P64 = Text.Printf.$fPrintfArgWord1_closure+1;
           _scct5::P64 = _sccsX::P64;
           _scct4::P64 = _sccsW::P64;
           _scct3::P64 = _sccsV::P64;
           _scct2::P64 = _sccsU::P64;
           _scct1::P64 = _sccsT::P64;
           _scct0::P64 = _sccsS::P64;
           goto sccsZ;
       sccsZ: // global
           I64[Sp - 48] = block_cchyG_info;
           R1 = _scct6::P64;
           P64[Sp - 40] = _scct1::P64;
           P64[Sp - 32] = _scct2::P64;
           P64[Sp - 24] = _scct3::P64;
           P64[Sp - 16] = _scct4::P64;
           P64[Sp - 8] = _scct5::P64;
           P64[Sp] = _scct0::P64;
           P64[Sp + 16] = _sccsR::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchzB; else goto cchyH;
       uchzB: // global
           call _cchyG(R1) args: 0, res: 0, upd: 0;
       cchyH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sformatInt1_info" {
     Text.Printf.$w$sformatInt1_info:
         const Text.Printf.$w$sformatInt1_entry;
         const 0;
         const 18446744069414584334;
         const 34359738368;
         const uchzE_srtd;
         const 8200;
         const Text.Printf.$w$sformatInt1_slow;
 },
 section ""relreadonly" . uchzF_srtd" {
     uchzF_srtd:
         const SccKB_srt+192;
         const 64;
         const 11601272640106397697;
 },
 _cchyG() //  [R1]
         { []
         }
     {offset
       cchyG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cchzA; else goto cchzz;
       cchzA: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchzz: // global
           _scct8::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_scctf_info;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = sat_sccte_info;
           P64[Hp] = P64[Sp + 56];
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _scct5::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = P64[Sp + 32];
           P64[Sp + 56] = _scct5::P64;
           I64[Sp + 64] = _scct8::I64;
           Sp = Sp + 40;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchyG_info" {
     block_cchyG_info:
         const _cchyG;
         const 8;
         const 18446744069414584350;
         const uchzF_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.21943721 UTC

[section ""data" . Text.Printf.$fPrintfArgWord16_$sformatInt_closure" {
     Text.Printf.$fPrintfArgWord16_$sformatInt_closure:
         const Text.Printf.$fPrintfArgWord16_$sformatInt_info;
         const 0;
 },
 Text.Printf.$fPrintfArgWord16_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cchAt: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cchAx; else goto cchAy;
       cchAx: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgWord16_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cchAy: // global
           I64[Sp - 16] = block_cchAq_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uchAG; else goto cchAr;
       uchAG: // global
           call _cchAq(R1) args: 0, res: 0, upd: 0;
       cchAr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgWord16_$sformatInt_info" {
     Text.Printf.$fPrintfArgWord16_$sformatInt_info:
         const Text.Printf.$fPrintfArgWord16_$sformatInt_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SccKB_srt+736;
 },
 _cchAq() //  [R1]
         { []
         }
     {offset
       cchAq: // global
           I64[Sp - 48] = block_cchAw_info;
           _scctl::P64 = P64[R1 + 7];
           _scctm::P64 = P64[R1 + 15];
           _scctn::P64 = P64[R1 + 23];
           _sccto::P64 = P64[R1 + 31];
           _scctp::P64 = P64[R1 + 39];
           _scctq::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _scctm::P64;
           P64[Sp - 32] = _scctn::P64;
           P64[Sp - 24] = _sccto::P64;
           P64[Sp - 16] = _scctp::P64;
           P64[Sp - 8] = _scctq::P64;
           P64[Sp] = _scctl::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchAF; else goto cchAA;
       uchAF: // global
           call _cchAw(R1) args: 0, res: 0, upd: 0;
       cchAA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchAq_info" {
     block_cchAq_info:
         const _cchAq;
         const 1;
         const 4294967326;
         const SccKB_srt+736;
 },
 _cchAw() //  [R1]
         { []
         }
     {offset
       cchAw: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 56];
           _scctq::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 32];
           P64[Sp + 48] = _scctq::P64;
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt1_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchAw_info" {
     block_cchAw_info:
         const _cchAw;
         const 7;
         const 4294967326;
         const SccKB_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.231067914 UTC

[section ""data" . Text.Printf.$w$sformatInt4_closure" {
     Text.Printf.$w$sformatInt4_closure:
         const Text.Printf.$w$sformatInt4_info;
         const 0;
 },
 Text.Printf.$w$sformatInt4_slow() //  [R1]
         { []
         }
     {offset
       cchAX: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt4_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_scctS_entry() //  [R1]
         { []
         }
     {offset
       cchBi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchBj; else goto cchBk;
       cchBj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchBk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Word.$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scctS_info" {
     sat_scctS_info:
         const sat_scctS_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uchC5_srtd" {
     uchC5_srtd:
         const SccKB_srt+192;
         const 64;
         const 11529215046068469761;
 },
 sat_scctR_entry() //  [R1]
         { []
         }
     {offset
       cchBw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cchBx; else goto cchBy;
       cchBx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchBy: // global
           I64[Sp - 8] = block_cchBp_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchBR; else goto cchBq;
       uchBR: // global
           call _cchBp(R1) args: 0, res: 0, upd: 0;
       cchBq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scctR_info" {
     sat_scctR_info:
         const sat_scctR_entry;
         const 1;
         const 18446744069414584336;
         const uchC5_srtd;
 },
 section ""relreadonly" . uchC6_srtd" {
     uchC6_srtd:
         const SccKB_srt+192;
         const 64;
         const 11529215046068469761;
 },
 _cchBp() //  [R1]
         { []
         }
     {offset
       cchBp: // global
           if (R1 & 7 == 1) goto cchBt; else goto cchBu;
       cchBt: // global
           R1 = Text.Printf.formatChar1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cchBu: // global
           I64[Sp] = block_cchBE_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchBp_info" {
     block_cchBp_info:
         const _cchBp;
         const 0;
         const 18446744069414584350;
         const uchC6_srtd;
 },
 _cchBE() //  [R1]
         { []
         }
     {offset
       cchBE: // global
           if (R1 & 7 == 1) goto cchBL; else goto cchBP;
       cchBL: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cchBP: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchBE_info" {
     block_cchBE_info:
         const _cchBE;
         const 0;
         const 4294967326;
         const SccKB_srt+696;
 },
 section ""relreadonly" . uchC7_srtd" {
     uchC7_srtd:
         const SccKB_srt+192;
         const 71;
         const 11601272640106397697;
         const 64;
 },
 Text.Printf.$w$sformatInt4_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cchBV: // global
           _sccty::P64 = R6;
           _scctx::P64 = R5;
           _scctw::P64 = R4;
           _scctv::P64 = R3;
           _scctu::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cchBW; else goto cchBX;
       cchBX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cchBZ; else goto cchBY;
       cchBZ: // global
           HpAlloc = 16;
           goto cchBW;
       cchBW: // global
           R1 = Text.Printf.$w$sformatInt4_closure;
           P64[Sp - 40] = _scctu::P64;
           P64[Sp - 32] = _scctv::P64;
           P64[Sp - 24] = _scctw::P64;
           P64[Sp - 16] = _scctx::P64;
           P64[Sp - 8] = _sccty::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cchBY: // global
           _scctz::P64 = P64[Sp];
           _scctA::P64 = P64[Sp + 8];
           _scctT::I64 = I64[Sp + 16];
           if (_scctT::I64 != 118) goto cchBT; else goto cchBU;
       cchBT: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _scctT::I64;
           _scctJ::P64 = Hp - 7;
           _scctI::P64 = _scctA::P64;
           _scctH::P64 = _scctz::P64;
           _scctG::P64 = _sccty::P64;
           _scctF::P64 = _scctx::P64;
           _scctE::P64 = _scctw::P64;
           _scctD::P64 = _scctv::P64;
           goto scctC;
       cchBU: // global
           Hp = Hp - 16;
           _scctJ::P64 = Text.Printf.$fPrintfArgWord1_closure+1;
           _scctI::P64 = _scctA::P64;
           _scctH::P64 = _scctz::P64;
           _scctG::P64 = _sccty::P64;
           _scctF::P64 = _scctx::P64;
           _scctE::P64 = _scctw::P64;
           _scctD::P64 = _scctv::P64;
           goto scctC;
       scctC: // global
           I64[Sp - 48] = block_cchB9_info;
           R1 = _scctJ::P64;
           P64[Sp - 40] = _scctE::P64;
           P64[Sp - 32] = _scctF::P64;
           P64[Sp - 24] = _scctG::P64;
           P64[Sp - 16] = _scctH::P64;
           P64[Sp - 8] = _scctI::P64;
           P64[Sp] = _scctD::P64;
           P64[Sp + 16] = _scctu::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchC4; else goto cchBa;
       uchC4: // global
           call _cchB9(R1) args: 0, res: 0, upd: 0;
       cchBa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sformatInt4_info" {
     Text.Printf.$w$sformatInt4_info:
         const Text.Printf.$w$sformatInt4_entry;
         const 0;
         const 18446744069414584334;
         const 34359738368;
         const uchC7_srtd;
         const 8200;
         const Text.Printf.$w$sformatInt4_slow;
 },
 section ""relreadonly" . uchC8_srtd" {
     uchC8_srtd:
         const SccKB_srt+192;
         const 64;
         const 11601272640106397697;
 },
 _cchB9() //  [R1]
         { []
         }
     {offset
       cchB9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cchC3; else goto cchC2;
       cchC3: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchC2: // global
           _scctL::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_scctS_info;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = sat_scctR_info;
           P64[Hp] = P64[Sp + 56];
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _scctI::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = P64[Sp + 32];
           P64[Sp + 56] = _scctI::P64;
           I64[Sp + 64] = _scctL::I64;
           Sp = Sp + 40;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchB9_info" {
     block_cchB9_info:
         const _cchB9;
         const 8;
         const 18446744069414584350;
         const uchC8_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.248570271 UTC

[section ""data" . Text.Printf.$fPrintfArgWord8_$sformatInt_closure" {
     Text.Printf.$fPrintfArgWord8_$sformatInt_closure:
         const Text.Printf.$fPrintfArgWord8_$sformatInt_info;
         const 0;
 },
 Text.Printf.$fPrintfArgWord8_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cchCW: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cchD0; else goto cchD1;
       cchD0: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgWord8_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cchD1: // global
           I64[Sp - 16] = block_cchCT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uchD9; else goto cchCU;
       uchD9: // global
           call _cchCT(R1) args: 0, res: 0, upd: 0;
       cchCU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgWord8_$sformatInt_info" {
     Text.Printf.$fPrintfArgWord8_$sformatInt_info:
         const Text.Printf.$fPrintfArgWord8_$sformatInt_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SccKB_srt+752;
 },
 _cchCT() //  [R1]
         { []
         }
     {offset
       cchCT: // global
           I64[Sp - 48] = block_cchCZ_info;
           _scctY::P64 = P64[R1 + 7];
           _scctZ::P64 = P64[R1 + 15];
           _sccu0::P64 = P64[R1 + 23];
           _sccu1::P64 = P64[R1 + 31];
           _sccu2::P64 = P64[R1 + 39];
           _sccu3::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _scctZ::P64;
           P64[Sp - 32] = _sccu0::P64;
           P64[Sp - 24] = _sccu1::P64;
           P64[Sp - 16] = _sccu2::P64;
           P64[Sp - 8] = _sccu3::P64;
           P64[Sp] = _scctY::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchD8; else goto cchD3;
       uchD8: // global
           call _cchCZ(R1) args: 0, res: 0, upd: 0;
       cchD3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchCT_info" {
     block_cchCT_info:
         const _cchCT;
         const 1;
         const 4294967326;
         const SccKB_srt+752;
 },
 _cchCZ() //  [R1]
         { []
         }
     {offset
       cchCZ: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 56];
           _sccu3::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 32];
           P64[Sp + 48] = _sccu3::P64;
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt4_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchCZ_info" {
     block_cchCZ_info:
         const _cchCZ;
         const 7;
         const 4294967326;
         const SccKB_srt+752;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.258896438 UTC

[section ""data" . Text.Printf.$w$sformatInt_closure" {
     Text.Printf.$w$sformatInt_closure:
         const Text.Printf.$w$sformatInt_info;
         const 0;
 },
 Text.Printf.$w$sformatInt_slow() //  [R1]
         { []
         }
     {offset
       cchDq: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2,
                                                R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sccuv_entry() //  [R1]
         { []
         }
     {offset
       cchDL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchDM; else goto cchDN;
       cchDM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchDN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fIntegralWord_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccuv_info" {
     sat_sccuv_info:
         const sat_sccuv_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uchEy_srtd" {
     uchEy_srtd:
         const SccKB_srt+192;
         const 64;
         const 11529215046068469761;
 },
 sat_sccuu_entry() //  [R1]
         { []
         }
     {offset
       cchDZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cchE0; else goto cchE1;
       cchE0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchE1: // global
           I64[Sp - 8] = block_cchDS_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchEk; else goto cchDT;
       uchEk: // global
           call _cchDS(R1) args: 0, res: 0, upd: 0;
       cchDT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccuu_info" {
     sat_sccuu_info:
         const sat_sccuu_entry;
         const 1;
         const 18446744069414584336;
         const uchEy_srtd;
 },
 section ""relreadonly" . uchEz_srtd" {
     uchEz_srtd:
         const SccKB_srt+192;
         const 64;
         const 11529215046068469761;
 },
 _cchDS() //  [R1]
         { []
         }
     {offset
       cchDS: // global
           if (R1 & 7 == 1) goto cchDW; else goto cchDX;
       cchDW: // global
           R1 = Text.Printf.formatChar1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cchDX: // global
           I64[Sp] = block_cchE7_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchDS_info" {
     block_cchDS_info:
         const _cchDS;
         const 0;
         const 18446744069414584350;
         const uchEz_srtd;
 },
 _cchE7() //  [R1]
         { []
         }
     {offset
       cchE7: // global
           if (R1 & 7 == 1) goto cchEe; else goto cchEi;
       cchEe: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cchEi: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchE7_info" {
     block_cchE7_info:
         const _cchE7;
         const 0;
         const 4294967326;
         const SccKB_srt+696;
 },
 section ""relreadonly" . uchEA_srtd" {
     uchEA_srtd:
         const SccKB_srt+192;
         const 73;
         const 11601272640106397697;
         const 256;
 },
 Text.Printf.$w$sformatInt_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cchEo: // global
           _sccub::P64 = R6;
           _sccua::P64 = R5;
           _sccu9::P64 = R4;
           _sccu8::P64 = R3;
           _sccu7::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cchEp; else goto cchEq;
       cchEq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cchEs; else goto cchEr;
       cchEs: // global
           HpAlloc = 16;
           goto cchEp;
       cchEp: // global
           R1 = Text.Printf.$w$sformatInt_closure;
           P64[Sp - 40] = _sccu7::P64;
           P64[Sp - 32] = _sccu8::P64;
           P64[Sp - 24] = _sccu9::P64;
           P64[Sp - 16] = _sccua::P64;
           P64[Sp - 8] = _sccub::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cchEr: // global
           _sccuc::P64 = P64[Sp];
           _sccud::P64 = P64[Sp + 8];
           _sccuw::I64 = I64[Sp + 16];
           if (_sccuw::I64 != 118) goto cchEm; else goto cchEn;
       cchEm: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sccuw::I64;
           _sccum::P64 = Hp - 7;
           _sccul::P64 = _sccud::P64;
           _sccuk::P64 = _sccuc::P64;
           _sccuj::P64 = _sccub::P64;
           _sccui::P64 = _sccua::P64;
           _sccuh::P64 = _sccu9::P64;
           _sccug::P64 = _sccu8::P64;
           goto sccuf;
       cchEn: // global
           Hp = Hp - 16;
           _sccum::P64 = Text.Printf.$fPrintfArgWord1_closure+1;
           _sccul::P64 = _sccud::P64;
           _sccuk::P64 = _sccuc::P64;
           _sccuj::P64 = _sccub::P64;
           _sccui::P64 = _sccua::P64;
           _sccuh::P64 = _sccu9::P64;
           _sccug::P64 = _sccu8::P64;
           goto sccuf;
       sccuf: // global
           I64[Sp - 48] = block_cchDC_info;
           R1 = _sccum::P64;
           P64[Sp - 40] = _sccuh::P64;
           P64[Sp - 32] = _sccui::P64;
           P64[Sp - 24] = _sccuj::P64;
           P64[Sp - 16] = _sccuk::P64;
           P64[Sp - 8] = _sccul::P64;
           P64[Sp] = _sccug::P64;
           P64[Sp + 16] = _sccu7::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchEx; else goto cchDD;
       uchEx: // global
           call _cchDC(R1) args: 0, res: 0, upd: 0;
       cchDD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sformatInt_info" {
     Text.Printf.$w$sformatInt_info:
         const Text.Printf.$w$sformatInt_entry;
         const 0;
         const 18446744069414584334;
         const 34359738368;
         const uchEA_srtd;
         const 8200;
         const Text.Printf.$w$sformatInt_slow;
 },
 section ""relreadonly" . uchEB_srtd" {
     uchEB_srtd:
         const SccKB_srt+192;
         const 64;
         const 11601272640106397697;
 },
 _cchDC() //  [R1]
         { []
         }
     {offset
       cchDC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cchEw; else goto cchEv;
       cchEw: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchEv: // global
           _sccuo::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sccuv_info;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = sat_sccuu_info;
           P64[Hp] = P64[Sp + 56];
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sccul::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = P64[Sp + 32];
           P64[Sp + 56] = _sccul::P64;
           I64[Sp + 64] = _sccuo::I64;
           Sp = Sp + 40;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchDC_info" {
     block_cchDC_info:
         const _cchDC;
         const 8;
         const 18446744069414584350;
         const uchEB_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.277635929 UTC

[section ""data" . Text.Printf.$fPrintfArgWord_$sformatInt_closure" {
     Text.Printf.$fPrintfArgWord_$sformatInt_closure:
         const Text.Printf.$fPrintfArgWord_$sformatInt_info;
         const 0;
 },
 Text.Printf.$fPrintfArgWord_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cchFp: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cchFt; else goto cchFu;
       cchFt: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgWord_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cchFu: // global
           I64[Sp - 16] = block_cchFm_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uchFC; else goto cchFn;
       uchFC: // global
           call _cchFm(R1) args: 0, res: 0, upd: 0;
       cchFn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgWord_$sformatInt_info" {
     Text.Printf.$fPrintfArgWord_$sformatInt_info:
         const Text.Printf.$fPrintfArgWord_$sformatInt_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SccKB_srt+768;
 },
 _cchFm() //  [R1]
         { []
         }
     {offset
       cchFm: // global
           I64[Sp - 48] = block_cchFs_info;
           _sccuB::P64 = P64[R1 + 7];
           _sccuC::P64 = P64[R1 + 15];
           _sccuD::P64 = P64[R1 + 23];
           _sccuE::P64 = P64[R1 + 31];
           _sccuF::P64 = P64[R1 + 39];
           _sccuG::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sccuC::P64;
           P64[Sp - 32] = _sccuD::P64;
           P64[Sp - 24] = _sccuE::P64;
           P64[Sp - 16] = _sccuF::P64;
           P64[Sp - 8] = _sccuG::P64;
           P64[Sp] = _sccuB::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchFB; else goto cchFw;
       uchFB: // global
           call _cchFs(R1) args: 0, res: 0, upd: 0;
       cchFw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchFm_info" {
     block_cchFm_info:
         const _cchFm;
         const 1;
         const 4294967326;
         const SccKB_srt+768;
 },
 _cchFs() //  [R1]
         { []
         }
     {offset
       cchFs: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 56];
           _sccuG::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 32];
           P64[Sp + 48] = _sccuG::P64;
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchFs_info" {
     block_cchFs_info:
         const _cchFs;
         const 7;
         const 4294967326;
         const SccKB_srt+768;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.284590376 UTC

[section ""data" . Text.Printf.$fPrintfArgInt1_closure" {
     Text.Printf.$fPrintfArgInt1_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.$fPrintfArgChar7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.289835932 UTC

[section ""data" . Text.Printf.$fPrintfArgInt64_$sformatInt_closure" {
     Text.Printf.$fPrintfArgInt64_$sformatInt_closure:
         const Text.Printf.$fPrintfArgInt64_$sformatInt_info;
         const 0;
 },
 sat_sccv2_entry() //  [R1]
         { []
         }
     {offset
       cchGb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchGc; else goto cchGd;
       cchGc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchGd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Int.$fIntegralInt64_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccv2_info" {
     sat_sccv2_info:
         const sat_sccv2_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uchGU_srtd" {
     uchGU_srtd:
         const SccKB_srt+192;
         const 75;
         const 9223372036854775809;
         const 1024;
 },
 sat_sccv1_entry() //  [R1]
         { []
         }
     {offset
       cchGp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cchGq; else goto cchGr;
       cchGq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchGr: // global
           I64[Sp - 8] = block_cchGi_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchGK; else goto cchGj;
       uchGK: // global
           call _cchGi(R1) args: 0, res: 0, upd: 0;
       cchGj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccv1_info" {
     sat_sccv1_info:
         const sat_sccv1_entry;
         const 1;
         const 18446744069414584336;
         const uchGU_srtd;
 },
 section ""relreadonly" . uchGV_srtd" {
     uchGV_srtd:
         const SccKB_srt+192;
         const 75;
         const 9223372036854775809;
         const 1024;
 },
 _cchGi() //  [R1]
         { []
         }
     {offset
       cchGi: // global
           if (R1 & 7 == 1) goto cchGm; else goto cchGn;
       cchGm: // global
           R1 = Text.Printf.$fPrintfArgInt1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cchGn: // global
           I64[Sp] = block_cchGx_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchGi_info" {
     block_cchGi_info:
         const _cchGi;
         const 0;
         const 18446744069414584350;
         const uchGV_srtd;
 },
 _cchGx() //  [R1]
         { []
         }
     {offset
       cchGx: // global
           if (R1 & 7 == 1) goto cchGE; else goto cchGI;
       cchGE: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cchGI: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchGx_info" {
     block_cchGx_info:
         const _cchGx;
         const 0;
         const 4294967326;
         const SccKB_srt+696;
 },
 section ""relreadonly" . uchGW_srtd" {
     uchGW_srtd:
         const SccKB_srt+192;
         const 76;
         const 9295429630892703745;
         const 3072;
 },
 Text.Printf.$fPrintfArgInt64_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cchGL: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cchGM; else goto cchGN;
       cchGM: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgInt64_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cchGN: // global
           I64[Sp - 16] = block_cchFX_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uchGT; else goto cchFY;
       uchGT: // global
           call _cchFX(R1) args: 0, res: 0, upd: 0;
       cchFY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgInt64_$sformatInt_info" {
     Text.Printf.$fPrintfArgInt64_$sformatInt_info:
         const Text.Printf.$fPrintfArgInt64_$sformatInt_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uchGW_srtd;
 },
 section ""relreadonly" . uchGX_srtd" {
     uchGX_srtd:
         const SccKB_srt+192;
         const 75;
         const 9295429630892703745;
         const 1024;
 },
 _cchFX() //  [R1]
         { []
         }
     {offset
       cchFX: // global
           I64[Sp - 48] = block_cchG2_info;
           _sccuN::P64 = P64[R1 + 7];
           _sccuO::P64 = P64[R1 + 15];
           _sccuP::P64 = P64[R1 + 23];
           _sccuQ::P64 = P64[R1 + 31];
           _sccuR::P64 = P64[R1 + 39];
           _sccuS::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sccuO::P64;
           P64[Sp - 32] = _sccuP::P64;
           P64[Sp - 24] = _sccuQ::P64;
           P64[Sp - 16] = _sccuR::P64;
           P64[Sp - 8] = _sccuS::P64;
           P64[Sp] = _sccuN::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchGS; else goto cchG3;
       uchGS: // global
           call _cchG2(R1) args: 0, res: 0, upd: 0;
       cchG3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchFX_info" {
     block_cchFX_info:
         const _cchFX;
         const 1;
         const 18446744069414584350;
         const uchGX_srtd;
 },
 section ""relreadonly" . uchGY_srtd" {
     uchGY_srtd:
         const SccKB_srt+192;
         const 75;
         const 9295429630892703745;
         const 1024;
 },
 _cchG2() //  [R1]
         { []
         }
     {offset
       cchG2: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cchGR; else goto cchGQ;
       cchGR: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchGQ: // global
           _sccuV::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sccv2_info;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = sat_sccv1_info;
           _sccuS::P64 = P64[Sp + 40];
           P64[Hp] = _sccuS::P64;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sccuR::P64 = P64[Sp + 32];
           P64[Sp + 32] = P64[Sp + 24];
           P64[Sp + 40] = _sccuR::P64;
           P64[Sp + 48] = _sccuS::P64;
           I64[Sp + 56] = _sccuV::I64;
           Sp = Sp + 32;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchG2_info" {
     block_cchG2_info:
         const _cchG2;
         const 7;
         const 18446744069414584350;
         const uchGY_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.306517581 UTC

[section ""data" . Text.Printf.$fPrintfArgInt4_closure" {
     Text.Printf.$fPrintfArgInt4_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.$fPrintfArgChar14_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.312228493 UTC

[section ""data" . Text.Printf.$fPrintfArgInt32_$sformatInt_closure" {
     Text.Printf.$fPrintfArgInt32_$sformatInt_closure:
         const Text.Printf.$fPrintfArgInt32_$sformatInt_info;
         const 0;
 },
 sat_sccvl_entry() //  [R1]
         { []
         }
     {offset
       cchHZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchI0; else goto cchI1;
       cchI0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchI1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Int.$fIntegralInt32_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccvl_info" {
     sat_sccvl_info:
         const sat_sccvl_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uchII_srtd" {
     uchII_srtd:
         const SccKB_srt+192;
         const 77;
         const 9223372036854775809;
         const 4096;
 },
 sat_sccvk_entry() //  [R1]
         { []
         }
     {offset
       cchId: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cchIe; else goto cchIf;
       cchIe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchIf: // global
           I64[Sp - 8] = block_cchI6_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchIy; else goto cchI7;
       uchIy: // global
           call _cchI6(R1) args: 0, res: 0, upd: 0;
       cchI7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccvk_info" {
     sat_sccvk_info:
         const sat_sccvk_entry;
         const 1;
         const 18446744069414584336;
         const uchII_srtd;
 },
 section ""relreadonly" . uchIJ_srtd" {
     uchIJ_srtd:
         const SccKB_srt+192;
         const 77;
         const 9223372036854775809;
         const 4096;
 },
 _cchI6() //  [R1]
         { []
         }
     {offset
       cchI6: // global
           if (R1 & 7 == 1) goto cchIa; else goto cchIb;
       cchIa: // global
           R1 = Text.Printf.$fPrintfArgInt4_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cchIb: // global
           I64[Sp] = block_cchIl_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchI6_info" {
     block_cchI6_info:
         const _cchI6;
         const 0;
         const 18446744069414584350;
         const uchIJ_srtd;
 },
 _cchIl() //  [R1]
         { []
         }
     {offset
       cchIl: // global
           if (R1 & 7 == 1) goto cchIs; else goto cchIw;
       cchIs: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cchIw: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchIl_info" {
     block_cchIl_info:
         const _cchIl;
         const 0;
         const 4294967326;
         const SccKB_srt+696;
 },
 section ""relreadonly" . uchIK_srtd" {
     uchIK_srtd:
         const SccKB_srt+192;
         const 78;
         const 9295429630892703745;
         const 12288;
 },
 Text.Printf.$fPrintfArgInt32_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cchIz: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cchIA; else goto cchIB;
       cchIA: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgInt32_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cchIB: // global
           I64[Sp - 16] = block_cchHL_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uchIH; else goto cchHM;
       uchIH: // global
           call _cchHL(R1) args: 0, res: 0, upd: 0;
       cchHM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgInt32_$sformatInt_info" {
     Text.Printf.$fPrintfArgInt32_$sformatInt_info:
         const Text.Printf.$fPrintfArgInt32_$sformatInt_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uchIK_srtd;
 },
 section ""relreadonly" . uchIL_srtd" {
     uchIL_srtd:
         const SccKB_srt+192;
         const 77;
         const 9295429630892703745;
         const 4096;
 },
 _cchHL() //  [R1]
         { []
         }
     {offset
       cchHL: // global
           I64[Sp - 48] = block_cchHQ_info;
           _sccv6::P64 = P64[R1 + 7];
           _sccv7::P64 = P64[R1 + 15];
           _sccv8::P64 = P64[R1 + 23];
           _sccv9::P64 = P64[R1 + 31];
           _sccva::P64 = P64[R1 + 39];
           _sccvb::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sccv7::P64;
           P64[Sp - 32] = _sccv8::P64;
           P64[Sp - 24] = _sccv9::P64;
           P64[Sp - 16] = _sccva::P64;
           P64[Sp - 8] = _sccvb::P64;
           P64[Sp] = _sccv6::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchIG; else goto cchHR;
       uchIG: // global
           call _cchHQ(R1) args: 0, res: 0, upd: 0;
       cchHR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchHL_info" {
     block_cchHL_info:
         const _cchHL;
         const 1;
         const 18446744069414584350;
         const uchIL_srtd;
 },
 section ""relreadonly" . uchIM_srtd" {
     uchIM_srtd:
         const SccKB_srt+192;
         const 77;
         const 9295429630892703745;
         const 4096;
 },
 _cchHQ() //  [R1]
         { []
         }
     {offset
       cchHQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cchIF; else goto cchIE;
       cchIF: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchIE: // global
           _sccve::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sccvl_info;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = sat_sccvk_info;
           _sccvb::P64 = P64[Sp + 40];
           P64[Hp] = _sccvb::P64;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sccva::P64 = P64[Sp + 32];
           P64[Sp + 32] = P64[Sp + 24];
           P64[Sp + 40] = _sccva::P64;
           P64[Sp + 48] = _sccvb::P64;
           I64[Sp + 56] = _sccve::I64;
           Sp = Sp + 32;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchHQ_info" {
     block_cchHQ_info:
         const _cchHQ;
         const 7;
         const 18446744069414584350;
         const uchIM_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.328891694 UTC

[section ""data" . Text.Printf.$fPrintfArgInt3_closure" {
     Text.Printf.$fPrintfArgInt3_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.$fPrintfArgChar18_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.333907918 UTC

[section ""data" . Text.Printf.$fPrintfArgInt16_$sformatInt_closure" {
     Text.Printf.$fPrintfArgInt16_$sformatInt_closure:
         const Text.Printf.$fPrintfArgInt16_$sformatInt_info;
         const 0;
 },
 sat_sccvE_entry() //  [R1]
         { []
         }
     {offset
       cchJN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchJO; else goto cchJP;
       cchJO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchJP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Int.$fIntegralInt16_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccvE_info" {
     sat_sccvE_info:
         const sat_sccvE_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uchKw_srtd" {
     uchKw_srtd:
         const SccKB_srt+192;
         const 79;
         const 9223372036854775809;
         const 16384;
 },
 sat_sccvD_entry() //  [R1]
         { []
         }
     {offset
       cchK1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cchK2; else goto cchK3;
       cchK2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchK3: // global
           I64[Sp - 8] = block_cchJU_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchKm; else goto cchJV;
       uchKm: // global
           call _cchJU(R1) args: 0, res: 0, upd: 0;
       cchJV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccvD_info" {
     sat_sccvD_info:
         const sat_sccvD_entry;
         const 1;
         const 18446744069414584336;
         const uchKw_srtd;
 },
 section ""relreadonly" . uchKx_srtd" {
     uchKx_srtd:
         const SccKB_srt+192;
         const 79;
         const 9223372036854775809;
         const 16384;
 },
 _cchJU() //  [R1]
         { []
         }
     {offset
       cchJU: // global
           if (R1 & 7 == 1) goto cchJY; else goto cchJZ;
       cchJY: // global
           R1 = Text.Printf.$fPrintfArgInt3_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cchJZ: // global
           I64[Sp] = block_cchK9_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchJU_info" {
     block_cchJU_info:
         const _cchJU;
         const 0;
         const 18446744069414584350;
         const uchKx_srtd;
 },
 _cchK9() //  [R1]
         { []
         }
     {offset
       cchK9: // global
           if (R1 & 7 == 1) goto cchKg; else goto cchKk;
       cchKg: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cchKk: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchK9_info" {
     block_cchK9_info:
         const _cchK9;
         const 0;
         const 4294967326;
         const SccKB_srt+696;
 },
 section ""relreadonly" . uchKy_srtd" {
     uchKy_srtd:
         const SccKB_srt+192;
         const 80;
         const 9295429630892703745;
         const 49152;
 },
 Text.Printf.$fPrintfArgInt16_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cchKn: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cchKo; else goto cchKp;
       cchKo: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgInt16_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cchKp: // global
           I64[Sp - 16] = block_cchJz_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uchKv; else goto cchJA;
       uchKv: // global
           call _cchJz(R1) args: 0, res: 0, upd: 0;
       cchJA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgInt16_$sformatInt_info" {
     Text.Printf.$fPrintfArgInt16_$sformatInt_info:
         const Text.Printf.$fPrintfArgInt16_$sformatInt_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uchKy_srtd;
 },
 section ""relreadonly" . uchKz_srtd" {
     uchKz_srtd:
         const SccKB_srt+192;
         const 79;
         const 9295429630892703745;
         const 16384;
 },
 _cchJz() //  [R1]
         { []
         }
     {offset
       cchJz: // global
           I64[Sp - 48] = block_cchJE_info;
           _sccvp::P64 = P64[R1 + 7];
           _sccvq::P64 = P64[R1 + 15];
           _sccvr::P64 = P64[R1 + 23];
           _sccvs::P64 = P64[R1 + 31];
           _sccvt::P64 = P64[R1 + 39];
           _sccvu::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sccvq::P64;
           P64[Sp - 32] = _sccvr::P64;
           P64[Sp - 24] = _sccvs::P64;
           P64[Sp - 16] = _sccvt::P64;
           P64[Sp - 8] = _sccvu::P64;
           P64[Sp] = _sccvp::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchKu; else goto cchJF;
       uchKu: // global
           call _cchJE(R1) args: 0, res: 0, upd: 0;
       cchJF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchJz_info" {
     block_cchJz_info:
         const _cchJz;
         const 1;
         const 18446744069414584350;
         const uchKz_srtd;
 },
 section ""relreadonly" . uchKA_srtd" {
     uchKA_srtd:
         const SccKB_srt+192;
         const 79;
         const 9295429630892703745;
         const 16384;
 },
 _cchJE() //  [R1]
         { []
         }
     {offset
       cchJE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cchKt; else goto cchKs;
       cchKt: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchKs: // global
           _sccvx::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sccvE_info;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = sat_sccvD_info;
           _sccvu::P64 = P64[Sp + 40];
           P64[Hp] = _sccvu::P64;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sccvt::P64 = P64[Sp + 32];
           P64[Sp + 32] = P64[Sp + 24];
           P64[Sp + 40] = _sccvt::P64;
           P64[Sp + 48] = _sccvu::P64;
           I64[Sp + 56] = _sccvx::I64;
           Sp = Sp + 32;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchJE_info" {
     block_cchJE_info:
         const _cchJE;
         const 7;
         const 18446744069414584350;
         const uchKA_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.35138057 UTC

[section ""data" . Text.Printf.$fPrintfArgInt5_closure" {
     Text.Printf.$fPrintfArgInt5_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.$fPrintfArgChar22_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.356462727 UTC

[section ""data" . Text.Printf.$fPrintfArgInt8_$sformatInt_closure" {
     Text.Printf.$fPrintfArgInt8_$sformatInt_closure:
         const Text.Printf.$fPrintfArgInt8_$sformatInt_info;
         const 0;
 },
 sat_sccvX_entry() //  [R1]
         { []
         }
     {offset
       cchLB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchLC; else goto cchLD;
       cchLC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchLD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Int.$fIntegralInt8_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccvX_info" {
     sat_sccvX_info:
         const sat_sccvX_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uchMk_srtd" {
     uchMk_srtd:
         const SccKB_srt+192;
         const 81;
         const 9223372036854775809;
         const 65536;
 },
 sat_sccvW_entry() //  [R1]
         { []
         }
     {offset
       cchLP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cchLQ; else goto cchLR;
       cchLQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchLR: // global
           I64[Sp - 8] = block_cchLI_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchMa; else goto cchLJ;
       uchMa: // global
           call _cchLI(R1) args: 0, res: 0, upd: 0;
       cchLJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccvW_info" {
     sat_sccvW_info:
         const sat_sccvW_entry;
         const 1;
         const 18446744069414584336;
         const uchMk_srtd;
 },
 section ""relreadonly" . uchMl_srtd" {
     uchMl_srtd:
         const SccKB_srt+192;
         const 81;
         const 9223372036854775809;
         const 65536;
 },
 _cchLI() //  [R1]
         { []
         }
     {offset
       cchLI: // global
           if (R1 & 7 == 1) goto cchLM; else goto cchLN;
       cchLM: // global
           R1 = Text.Printf.$fPrintfArgInt5_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cchLN: // global
           I64[Sp] = block_cchLX_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchLI_info" {
     block_cchLI_info:
         const _cchLI;
         const 0;
         const 18446744069414584350;
         const uchMl_srtd;
 },
 _cchLX() //  [R1]
         { []
         }
     {offset
       cchLX: // global
           if (R1 & 7 == 1) goto cchM4; else goto cchM8;
       cchM4: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cchM8: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchLX_info" {
     block_cchLX_info:
         const _cchLX;
         const 0;
         const 4294967326;
         const SccKB_srt+696;
 },
 section ""relreadonly" . uchMm_srtd" {
     uchMm_srtd:
         const SccKB_srt+192;
         const 82;
         const 9295429630892703745;
         const 196608;
 },
 Text.Printf.$fPrintfArgInt8_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cchMb: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cchMc; else goto cchMd;
       cchMc: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgInt8_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cchMd: // global
           I64[Sp - 16] = block_cchLn_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uchMj; else goto cchLo;
       uchMj: // global
           call _cchLn(R1) args: 0, res: 0, upd: 0;
       cchLo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgInt8_$sformatInt_info" {
     Text.Printf.$fPrintfArgInt8_$sformatInt_info:
         const Text.Printf.$fPrintfArgInt8_$sformatInt_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uchMm_srtd;
 },
 section ""relreadonly" . uchMn_srtd" {
     uchMn_srtd:
         const SccKB_srt+192;
         const 81;
         const 9295429630892703745;
         const 65536;
 },
 _cchLn() //  [R1]
         { []
         }
     {offset
       cchLn: // global
           I64[Sp - 48] = block_cchLs_info;
           _sccvI::P64 = P64[R1 + 7];
           _sccvJ::P64 = P64[R1 + 15];
           _sccvK::P64 = P64[R1 + 23];
           _sccvL::P64 = P64[R1 + 31];
           _sccvM::P64 = P64[R1 + 39];
           _sccvN::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sccvJ::P64;
           P64[Sp - 32] = _sccvK::P64;
           P64[Sp - 24] = _sccvL::P64;
           P64[Sp - 16] = _sccvM::P64;
           P64[Sp - 8] = _sccvN::P64;
           P64[Sp] = _sccvI::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchMi; else goto cchLt;
       uchMi: // global
           call _cchLs(R1) args: 0, res: 0, upd: 0;
       cchLt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchLn_info" {
     block_cchLn_info:
         const _cchLn;
         const 1;
         const 18446744069414584350;
         const uchMn_srtd;
 },
 section ""relreadonly" . uchMo_srtd" {
     uchMo_srtd:
         const SccKB_srt+192;
         const 81;
         const 9295429630892703745;
         const 65536;
 },
 _cchLs() //  [R1]
         { []
         }
     {offset
       cchLs: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cchMh; else goto cchMg;
       cchMh: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchMg: // global
           _sccvQ::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sccvX_info;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = sat_sccvW_info;
           _sccvN::P64 = P64[Sp + 40];
           P64[Hp] = _sccvN::P64;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sccvM::P64 = P64[Sp + 32];
           P64[Sp + 32] = P64[Sp + 24];
           P64[Sp + 40] = _sccvM::P64;
           P64[Sp + 48] = _sccvN::P64;
           I64[Sp + 56] = _sccvQ::I64;
           Sp = Sp + 32;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchLs_info" {
     block_cchLs_info:
         const _cchLs;
         const 7;
         const 18446744069414584350;
         const uchMo_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.376538798 UTC

[section ""data" . Text.Printf.$fPrintfArgInt_$sformatInt_closure" {
     Text.Printf.$fPrintfArgInt_$sformatInt_closure:
         const Text.Printf.$fPrintfArgInt_$sformatInt_info;
         const 0;
 },
 sat_sccwg_entry() //  [R1]
         { []
         }
     {offset
       cchNo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchNp; else goto cchNq;
       cchNp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchNq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fIntegralInt_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccwg_info" {
     sat_sccwg_info:
         const sat_sccwg_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uchO7_srtd" {
     uchO7_srtd:
         const SccKB_srt+192;
         const 75;
         const 9223372036854775809;
         const 1024;
 },
 sat_sccwf_entry() //  [R1]
         { []
         }
     {offset
       cchNC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cchND; else goto cchNE;
       cchND: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchNE: // global
           I64[Sp - 8] = block_cchNv_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchNX; else goto cchNw;
       uchNX: // global
           call _cchNv(R1) args: 0, res: 0, upd: 0;
       cchNw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccwf_info" {
     sat_sccwf_info:
         const sat_sccwf_entry;
         const 1;
         const 18446744069414584336;
         const uchO7_srtd;
 },
 section ""relreadonly" . uchO8_srtd" {
     uchO8_srtd:
         const SccKB_srt+192;
         const 75;
         const 9223372036854775809;
         const 1024;
 },
 _cchNv() //  [R1]
         { []
         }
     {offset
       cchNv: // global
           if (R1 & 7 == 1) goto cchNz; else goto cchNA;
       cchNz: // global
           R1 = Text.Printf.$fPrintfArgInt1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cchNA: // global
           I64[Sp] = block_cchNK_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchNv_info" {
     block_cchNv_info:
         const _cchNv;
         const 0;
         const 18446744069414584350;
         const uchO8_srtd;
 },
 _cchNK() //  [R1]
         { []
         }
     {offset
       cchNK: // global
           if (R1 & 7 == 1) goto cchNR; else goto cchNV;
       cchNR: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cchNV: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchNK_info" {
     block_cchNK_info:
         const _cchNK;
         const 0;
         const 4294967326;
         const SccKB_srt+696;
 },
 section ""relreadonly" . uchO9_srtd" {
     uchO9_srtd:
         const SccKB_srt+192;
         const 83;
         const 9295429630892703745;
         const 263168;
 },
 Text.Printf.$fPrintfArgInt_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cchNY: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cchNZ; else goto cchO0;
       cchNZ: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgInt_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cchO0: // global
           I64[Sp - 16] = block_cchNa_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uchO6; else goto cchNb;
       uchO6: // global
           call _cchNa(R1) args: 0, res: 0, upd: 0;
       cchNb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgInt_$sformatInt_info" {
     Text.Printf.$fPrintfArgInt_$sformatInt_info:
         const Text.Printf.$fPrintfArgInt_$sformatInt_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uchO9_srtd;
 },
 section ""relreadonly" . uchOa_srtd" {
     uchOa_srtd:
         const SccKB_srt+192;
         const 75;
         const 9295429630892703745;
         const 1024;
 },
 _cchNa() //  [R1]
         { []
         }
     {offset
       cchNa: // global
           I64[Sp - 48] = block_cchNf_info;
           _sccw1::P64 = P64[R1 + 7];
           _sccw2::P64 = P64[R1 + 15];
           _sccw3::P64 = P64[R1 + 23];
           _sccw4::P64 = P64[R1 + 31];
           _sccw5::P64 = P64[R1 + 39];
           _sccw6::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sccw2::P64;
           P64[Sp - 32] = _sccw3::P64;
           P64[Sp - 24] = _sccw4::P64;
           P64[Sp - 16] = _sccw5::P64;
           P64[Sp - 8] = _sccw6::P64;
           P64[Sp] = _sccw1::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchO5; else goto cchNg;
       uchO5: // global
           call _cchNf(R1) args: 0, res: 0, upd: 0;
       cchNg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchNa_info" {
     block_cchNa_info:
         const _cchNa;
         const 1;
         const 18446744069414584350;
         const uchOa_srtd;
 },
 section ""relreadonly" . uchOb_srtd" {
     uchOb_srtd:
         const SccKB_srt+192;
         const 75;
         const 9295429630892703745;
         const 1024;
 },
 _cchNf() //  [R1]
         { []
         }
     {offset
       cchNf: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cchO4; else goto cchO3;
       cchO4: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchO3: // global
           _sccw9::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sccwg_info;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = sat_sccwf_info;
           _sccw6::P64 = P64[Sp + 40];
           P64[Hp] = _sccw6::P64;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sccw5::P64 = P64[Sp + 32];
           P64[Sp + 32] = P64[Sp + 24];
           P64[Sp + 40] = _sccw5::P64;
           P64[Sp + 48] = _sccw6::P64;
           I64[Sp + 56] = _sccw9::I64;
           Sp = Sp + 32;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchNf_info" {
     block_cchNf_info:
         const _cchNf;
         const 7;
         const 18446744069414584350;
         const uchOb_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.399831386 UTC

[section ""data" . Text.Printf.$wformatInt_closure" {
     Text.Printf.$wformatInt_closure:
         const Text.Printf.$wformatInt_info;
         const 0;
 },
 Text.Printf.$wformatInt_slow() //  [R1]
         { []
         }
     {offset
       cchOU: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$wformatInt_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_sccws_entry() //  [R1]
         { []
         }
     {offset
       cchPi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchPj; else goto cchPk;
       cchPj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchPk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccws_info" {
     sat_sccws_info:
         const sat_sccws_entry;
         const 1;
         const 16;
 },
 sat_sccwJ_entry() //  [R1]
         { []
         }
     {offset
       cchPx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cchPy; else goto cchPz;
       cchPy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchPz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Real.toInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccwJ_info" {
     sat_sccwJ_info:
         const sat_sccwJ_entry;
         const 2;
         const 18;
 },
 section ""relreadonly" . uchQx_srtd" {
     uchQx_srtd:
         const SccKB_srt+192;
         const 64;
         const 9223372036854775809;
 },
 sat_sccwI_entry() //  [R1]
         { []
         }
     {offset
       cchPL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchPM; else goto cchPN;
       cchPM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchPN: // global
           I64[Sp - 16] = block_cchPE_info;
           _sccwr::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 8] = _sccwr::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uchQ9; else goto cchPF;
       uchQ9: // global
           call _cchPE(R1) args: 0, res: 0, upd: 0;
       cchPF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccwI_info" {
     sat_sccwI_info:
         const sat_sccwI_entry;
         const 2;
         const 18446744069414584338;
         const uchQx_srtd;
 },
 section ""relreadonly" . uchQy_srtd" {
     uchQy_srtd:
         const SccKB_srt+192;
         const 64;
         const 9223372036854775809;
 },
 _cchPE() //  [R1]
         { []
         }
     {offset
       cchPE: // global
           if (R1 & 7 == 1) goto cchPI; else goto cchPJ;
       cchPI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cchPT; else goto cchPS;
       cchPT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchPS: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cchPJ: // global
           I64[Sp + 8] = block_cchPW_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           Sp = Sp + 8;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchPE_info" {
     block_cchPE_info:
         const _cchPE;
         const 1;
         const 18446744069414584350;
         const uchQy_srtd;
 },
 _cchPW() //  [R1]
         { []
         }
     {offset
       cchPW: // global
           if (R1 & 7 == 1) goto cchQ3; else goto cchQ7;
       cchQ3: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cchQ7: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchPW_info" {
     block_cchPW_info:
         const _cchPW;
         const 0;
         const 4294967326;
         const SccKB_srt+696;
 },
 section ""relreadonly" . uchQz_srtd" {
     uchQz_srtd:
         const SccKB_srt+192;
         const 84;
         const 9304436830147444737;
         const 524288;
 },
 Text.Printf.$wformatInt_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cchQa: // global
           _sccwl::P64 = R6;
           _sccwk::P64 = R5;
           _sccwj::P64 = R4;
           _sccwi::P64 = R3;
           _sccwh::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cchQb; else goto cchQc;
       cchQc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cchQe; else goto cchQd;
       cchQe: // global
           HpAlloc = 24;
           goto cchQb;
       cchQb: // global
           R1 = Text.Printf.$wformatInt_closure;
           P64[Sp - 40] = _sccwh::P64;
           P64[Sp - 32] = _sccwi::P64;
           P64[Sp - 24] = _sccwj::P64;
           P64[Sp - 16] = _sccwk::P64;
           P64[Sp - 8] = _sccwl::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cchQd: // global
           I64[Hp - 16] = sat_sccws_info;
           P64[Hp] = _sccwi::P64;
           I64[Sp - 40] = block_cchP0_info;
           R2 = _sccwh::P64;
           I64[Sp - 56] = stg_ap_p_info;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 32] = _sccwh::P64;
           P64[Sp - 24] = _sccwj::P64;
           P64[Sp - 16] = _sccwk::P64;
           P64[Sp - 8] = _sccwl::P64;
           Sp = Sp - 56;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wformatInt_info" {
     Text.Printf.$wformatInt_info:
         const Text.Printf.$wformatInt_entry;
         const 0;
         const 18446744069414584334;
         const 42949672960;
         const uchQz_srtd;
         const 32778;
         const Text.Printf.$wformatInt_slow;
 },
 section ""relreadonly" . uchQA_srtd" {
     uchQA_srtd:
         const SccKB_srt+192;
         const 64;
         const 9304436830147444737;
 },
 _cchP0() //  [R1]
         { []
         }
     {offset
       cchP0: // global
           I64[Sp - 8] = block_cchP6_info;
           R3 = Text.Printf.formatChar2_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchP0_info" {
     block_cchP0_info:
         const _cchP0;
         const 16393;
         const 18446744069414584350;
         const uchQA_srtd;
 },
 section ""relreadonly" . uchQB_srtd" {
     uchQB_srtd:
         const SccKB_srt+192;
         const 64;
         const 9295429630892703745;
 },
 _cchP6() //  [R1]
         { []
         }
     {offset
       cchP6: // global
           _sccwk::P64 = P64[Sp + 32];
           _sccwl::P64 = P64[Sp + 40];
           _sccwm::P64 = P64[Sp + 48];
           _sccwn::P64 = P64[Sp + 56];
           _sccwo::P64 = P64[Sp + 64];
           _sccwp::P64 = P64[Sp + 72];
           _sccwq::I64 = I64[Sp + 80];
           if (R1 == 1) goto cchQp; else goto cchQl;
       cchQp: // global
           Hp = Hp + 16;
           _sccwK::I64 = R1;
           if (Hp > HpLim) (likely: False) goto cchQs; else goto cchQr;
       cchQr: // global
           if (_sccwq::I64 == 118) goto cchQv; else goto cchQu;
       cchQv: // global
           Hp = Hp - 16;
           _sccwA::P64 = Text.Printf.$fPrintfArgWord1_closure+1;
           _sccwz::P64 = _sccwp::P64;
           _sccwy::P64 = _sccwo::P64;
           _sccwx::P64 = _sccwn::P64;
           _sccww::P64 = _sccwm::P64;
           _sccwv::P64 = _sccwl::P64;
           _sccwu::P64 = _sccwk::P64;
           goto sccwt;
       cchQu: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sccwq::I64;
           _sccwA::P64 = Hp - 7;
           _sccwz::P64 = _sccwp::P64;
           _sccwy::P64 = _sccwo::P64;
           _sccwx::P64 = _sccwn::P64;
           _sccww::P64 = _sccwm::P64;
           _sccwv::P64 = _sccwl::P64;
           _sccwu::P64 = _sccwk::P64;
           goto sccwt;
       cchQl: // global
           Hp = Hp + 16;
           _sccwK::I64 = R1;
           if (Hp > HpLim) (likely: False) goto cchQs; else goto cchQn;
       cchQs: // global
           HpAlloc = 16;
           R1 = _sccwK::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cchQn: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sccwq::I64;
           _sccwA::P64 = Hp - 7;
           _sccwz::P64 = _sccwp::P64;
           _sccwy::P64 = _sccwo::P64;
           _sccwx::P64 = _sccwn::P64;
           _sccww::P64 = _sccwm::P64;
           _sccwv::P64 = _sccwl::P64;
           _sccwu::P64 = _sccwk::P64;
           goto sccwt;
       sccwt: // global
           I64[Sp] = block_cchPo_info;
           R1 = _sccwA::P64;
           P64[Sp + 32] = _sccwz::P64;
           P64[Sp + 40] = _sccwy::P64;
           P64[Sp + 48] = _sccwx::P64;
           P64[Sp + 56] = _sccww::P64;
           P64[Sp + 64] = _sccwv::P64;
           P64[Sp + 80] = _sccwu::P64;
           if (R1 & 7 != 0) goto uchQw; else goto cchPp;
       uchQw: // global
           call _cchPo(R1) args: 0, res: 0, upd: 0;
       cchPp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchP6_info" {
     block_cchP6_info:
         const _cchP6;
         const 32778;
         const 18446744069414584350;
         const uchQB_srtd;
 },
 section ""relreadonly" . uchQC_srtd" {
     uchQC_srtd:
         const SccKB_srt+192;
         const 64;
         const 9295429630892703745;
 },
 _cchPo() //  [R1]
         { []
         }
     {offset
       cchPo: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cchQj; else goto cchQi;
       cchQj: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchQi: // global
           _sccwC::I64 = I64[R1 + 7];
           I64[Hp - 56] = sat_sccwJ_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = sat_sccwI_info;
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 8];
           R6 = P64[Sp + 56];
           R5 = P64[Sp + 64];
           R4 = P64[Sp + 80];
           R3 = Hp - 56;
           R2 = Hp - 24;
           P64[Sp + 56] = P64[Sp + 48];
           P64[Sp + 64] = P64[Sp + 40];
           P64[Sp + 72] = P64[Sp + 32];
           I64[Sp + 80] = _sccwC::I64;
           Sp = Sp + 56;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchPo_info" {
     block_cchPo_info:
         const _cchPo;
         const 10;
         const 18446744069414584350;
         const uchQC_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.426332502 UTC

[section ""data" . Text.Printf.formatInt_closure" {
     Text.Printf.formatInt_closure:
         const Text.Printf.formatInt_info;
         const 0;
 },
 Text.Printf.formatInt_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cchRI: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cchRM; else goto cchRN;
       cchRM: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.formatInt_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cchRN: // global
           I64[Sp - 32] = block_cchRF_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uchRV; else goto cchRG;
       uchRV: // global
           call _cchRF(R1) args: 0, res: 0, upd: 0;
       cchRG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.formatInt_info" {
     Text.Printf.formatInt_info:
         const Text.Printf.formatInt_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SccKB_srt+856;
 },
 _cchRF() //  [R1]
         { []
         }
     {offset
       cchRF: // global
           I64[Sp - 48] = block_cchRL_info;
           _sccwT::P64 = P64[R1 + 7];
           _sccwU::P64 = P64[R1 + 15];
           _sccwV::P64 = P64[R1 + 23];
           _sccwW::P64 = P64[R1 + 31];
           _sccwX::P64 = P64[R1 + 39];
           _sccwY::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sccwU::P64;
           P64[Sp - 32] = _sccwV::P64;
           P64[Sp - 24] = _sccwW::P64;
           P64[Sp - 16] = _sccwX::P64;
           P64[Sp - 8] = _sccwY::P64;
           P64[Sp] = _sccwT::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchRU; else goto cchRP;
       uchRU: // global
           call _cchRL(R1) args: 0, res: 0, upd: 0;
       cchRP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchRF_info" {
     block_cchRF_info:
         const _cchRF;
         const 3;
         const 4294967326;
         const SccKB_srt+856;
 },
 _cchRL() //  [R1]
         { []
         }
     {offset
       cchRL: // global
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 48];
           R4 = P64[Sp + 72];
           R3 = P64[Sp + 64];
           R2 = P64[Sp + 56];
           _sccwY::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 16];
           P64[Sp + 48] = P64[Sp + 24];
           P64[Sp + 56] = P64[Sp + 32];
           P64[Sp + 64] = _sccwY::P64;
           I64[Sp + 72] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$wformatInt_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchRL_info" {
     block_cchRL_info:
         const _cchRL;
         const 9;
         const 4294967326;
         const SccKB_srt+856;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.43425106 UTC

[section ""data" . Text.Printf.$fPrintfArgWord64_closure" {
     Text.Printf.$fPrintfArgWord64_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgWord64_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.436204569 UTC

[section ""data" . Text.Printf.$fPrintfArgWord32_closure" {
     Text.Printf.$fPrintfArgWord32_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgWord32_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.438069166 UTC

[section ""data" . Text.Printf.$fPrintfArgWord16_closure" {
     Text.Printf.$fPrintfArgWord16_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgWord16_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.439772227 UTC

[section ""data" . Text.Printf.$fPrintfArgWord8_closure" {
     Text.Printf.$fPrintfArgWord8_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgWord8_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.441636488 UTC

[section ""data" . Text.Printf.$fPrintfArgWord_closure" {
     Text.Printf.$fPrintfArgWord_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgWord_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.443453124 UTC

[section ""data" . Text.Printf.$fPrintfArgInt64_closure" {
     Text.Printf.$fPrintfArgInt64_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgInt64_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.445487298 UTC

[section ""data" . Text.Printf.$fPrintfArgInt32_closure" {
     Text.Printf.$fPrintfArgInt32_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgInt32_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.447279367 UTC

[section ""data" . Text.Printf.$fPrintfArgInt16_closure" {
     Text.Printf.$fPrintfArgInt16_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgInt16_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.44902144 UTC

[section ""data" . Text.Printf.$fPrintfArgInt8_closure" {
     Text.Printf.$fPrintfArgInt8_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgInt8_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.450720237 UTC

[section ""data" . Text.Printf.$fPrintfArgInt_closure" {
     Text.Printf.$fPrintfArgInt_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgInt_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.455413236 UTC

[section ""data" . Text.Printf.formatInteger_closure" {
     Text.Printf.formatInteger_closure:
         const Text.Printf.formatInteger_info;
         const 0;
 },
 section ""relreadonly" . uchTh_srtd" {
     uchTh_srtd:
         const SccKB_srt+192;
         const 64;
         const 9223372036854775809;
 },
 sat_sccxj_entry() //  [R1]
         { []
         }
     {offset
       cchSM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cchSN; else goto cchSO;
       cchSN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchSO: // global
           I64[Sp - 8] = block_cchSF_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchT7; else goto cchSG;
       uchT7: // global
           call _cchSF(R1) args: 0, res: 0, upd: 0;
       cchSG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccxj_info" {
     sat_sccxj_info:
         const sat_sccxj_entry;
         const 1;
         const 18446744069414584336;
         const uchTh_srtd;
 },
 section ""relreadonly" . uchTi_srtd" {
     uchTi_srtd:
         const SccKB_srt+192;
         const 64;
         const 9223372036854775809;
 },
 _cchSF() //  [R1]
         { []
         }
     {offset
       cchSF: // global
           if (R1 & 7 == 1) goto cchSJ; else goto cchSK;
       cchSJ: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cchSK: // global
           I64[Sp] = block_cchSU_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchSF_info" {
     block_cchSF_info:
         const _cchSF;
         const 0;
         const 18446744069414584350;
         const uchTi_srtd;
 },
 _cchSU() //  [R1]
         { []
         }
     {offset
       cchSU: // global
           if (R1 & 7 == 1) goto cchT1; else goto cchT5;
       cchT1: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cchT5: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchSU_info" {
     block_cchSU_info:
         const _cchSU;
         const 0;
         const 4294967326;
         const SccKB_srt+696;
 },
 section ""relreadonly" . uchTj_srtd" {
     uchTj_srtd:
         const SccKB_srt+192;
         const 86;
         const 9295429630892703745;
         const 2097152;
 },
 Text.Printf.formatInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       cchT8: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cchT9; else goto cchTa;
       cchT9: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.formatInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cchTa: // global
           I64[Sp - 16] = block_cchSr_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uchTg; else goto cchSs;
       uchTg: // global
           call _cchSr(R1) args: 0, res: 0, upd: 0;
       cchSs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.formatInteger_info" {
     Text.Printf.formatInteger_info:
         const Text.Printf.formatInteger_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uchTj_srtd;
 },
 section ""relreadonly" . uchTk_srtd" {
     uchTk_srtd:
         const SccKB_srt+192;
         const 64;
         const 9295429630892703745;
 },
 _cchSr() //  [R1]
         { []
         }
     {offset
       cchSr: // global
           I64[Sp - 48] = block_cchSw_info;
           _sccx5::P64 = P64[R1 + 7];
           _sccx6::P64 = P64[R1 + 15];
           _sccx7::P64 = P64[R1 + 23];
           _sccx8::P64 = P64[R1 + 31];
           _sccx9::P64 = P64[R1 + 39];
           _sccxa::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sccx6::P64;
           P64[Sp - 32] = _sccx7::P64;
           P64[Sp - 24] = _sccx8::P64;
           P64[Sp - 16] = _sccx9::P64;
           P64[Sp - 8] = _sccxa::P64;
           P64[Sp] = _sccx5::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchTf; else goto cchSx;
       uchTf: // global
           call _cchSw(R1) args: 0, res: 0, upd: 0;
       cchSx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchSr_info" {
     block_cchSr_info:
         const _cchSr;
         const 1;
         const 18446744069414584350;
         const uchTk_srtd;
 },
 section ""relreadonly" . uchTl_srtd" {
     uchTl_srtd:
         const SccKB_srt+192;
         const 64;
         const 9295429630892703745;
 },
 _cchSw() //  [R1]
         { []
         }
     {offset
       cchSw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cchTe; else goto cchTd;
       cchTe: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchTd: // global
           _sccxd::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sccxj_info;
           _sccxa::P64 = P64[Sp + 40];
           P64[Hp] = _sccxa::P64;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 56];
           R2 = Hp - 16;
           _sccx9::P64 = P64[Sp + 32];
           P64[Sp + 32] = P64[Sp + 24];
           P64[Sp + 40] = _sccx9::P64;
           P64[Sp + 48] = _sccxa::P64;
           I64[Sp + 56] = _sccxd::I64;
           Sp = Sp + 32;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchSw_info" {
     block_cchSw_info:
         const _cchSw;
         const 7;
         const 18446744069414584350;
         const uchTl_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.474712356 UTC

[section ""data" . Text.Printf.$fPrintfArgNatural_$cformatArg_closure" {
     Text.Printf.$fPrintfArgNatural_$cformatArg_closure:
         const Text.Printf.$fPrintfArgNatural_$cformatArg_info;
         const 0;
 },
 section ""relreadonly" . uchUS_srtd" {
     uchUS_srtd:
         const SccKB_srt+192;
         const 64;
         const 9223372036854775809;
 },
 sat_sccxB_entry() //  [R1]
         { []
         }
     {offset
       cchUn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cchUo; else goto cchUp;
       cchUo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchUp: // global
           I64[Sp - 8] = block_cchUg_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchUI; else goto cchUh;
       uchUI: // global
           call _cchUg(R1) args: 0, res: 0, upd: 0;
       cchUh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccxB_info" {
     sat_sccxB_info:
         const sat_sccxB_entry;
         const 1;
         const 18446744069414584336;
         const uchUS_srtd;
 },
 section ""relreadonly" . uchUT_srtd" {
     uchUT_srtd:
         const SccKB_srt+192;
         const 64;
         const 9223372036854775809;
 },
 _cchUg() //  [R1]
         { []
         }
     {offset
       cchUg: // global
           if (R1 & 7 == 1) goto cchUk; else goto cchUl;
       cchUk: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cchUl: // global
           I64[Sp] = block_cchUv_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchUg_info" {
     block_cchUg_info:
         const _cchUg;
         const 0;
         const 18446744069414584350;
         const uchUT_srtd;
 },
 _cchUv() //  [R1]
         { []
         }
     {offset
       cchUv: // global
           if (R1 & 7 == 1) goto cchUC; else goto cchUG;
       cchUC: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cchUG: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchUv_info" {
     block_cchUv_info:
         const _cchUv;
         const 0;
         const 4294967326;
         const SccKB_srt+696;
 },
 section ""relreadonly" . uchUU_srtd" {
     uchUU_srtd:
         const SccKB_srt+192;
         const 87;
         const 9295429630892703745;
         const 4194304;
 },
 Text.Printf.$fPrintfArgNatural_$cformatArg_entry() //  [R2, R3]
         { []
         }
     {offset
       cchUJ: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cchUK; else goto cchUL;
       cchUK: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgNatural_$cformatArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cchUL: // global
           I64[Sp - 16] = block_cchU2_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uchUR; else goto cchU3;
       uchUR: // global
           call _cchU2(R1) args: 0, res: 0, upd: 0;
       cchU3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgNatural_$cformatArg_info" {
     Text.Printf.$fPrintfArgNatural_$cformatArg_info:
         const Text.Printf.$fPrintfArgNatural_$cformatArg_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uchUU_srtd;
 },
 section ""relreadonly" . uchUV_srtd" {
     uchUV_srtd:
         const SccKB_srt+192;
         const 64;
         const 9295429630892703745;
 },
 _cchU2() //  [R1]
         { []
         }
     {offset
       cchU2: // global
           I64[Sp - 48] = block_cchU7_info;
           _sccxn::P64 = P64[R1 + 7];
           _sccxo::P64 = P64[R1 + 15];
           _sccxp::P64 = P64[R1 + 23];
           _sccxq::P64 = P64[R1 + 31];
           _sccxr::P64 = P64[R1 + 39];
           _sccxs::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sccxo::P64;
           P64[Sp - 32] = _sccxp::P64;
           P64[Sp - 24] = _sccxq::P64;
           P64[Sp - 16] = _sccxr::P64;
           P64[Sp - 8] = _sccxs::P64;
           P64[Sp] = _sccxn::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uchUQ; else goto cchU8;
       uchUQ: // global
           call _cchU7(R1) args: 0, res: 0, upd: 0;
       cchU8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchU2_info" {
     block_cchU2_info:
         const _cchU2;
         const 1;
         const 18446744069414584350;
         const uchUV_srtd;
 },
 section ""relreadonly" . uchUW_srtd" {
     uchUW_srtd:
         const SccKB_srt+192;
         const 64;
         const 9295429630892703745;
 },
 _cchU7() //  [R1]
         { []
         }
     {offset
       cchU7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cchUP; else goto cchUO;
       cchUP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchUO: // global
           _sccxv::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sccxB_info;
           _sccxs::P64 = P64[Sp + 40];
           P64[Hp] = _sccxs::P64;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 56];
           R2 = Hp - 16;
           _sccxr::P64 = P64[Sp + 32];
           P64[Sp + 32] = P64[Sp + 24];
           P64[Sp + 40] = _sccxr::P64;
           P64[Sp + 48] = _sccxs::P64;
           I64[Sp + 56] = _sccxv::I64;
           Sp = Sp + 32;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchU7_info" {
     block_cchU7_info:
         const _cchU7;
         const 7;
         const 18446744069414584350;
         const uchUW_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.489631998 UTC

[section ""data" . Text.Printf.$fPrintfArgNatural_closure" {
     Text.Printf.$fPrintfArgNatural_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgNatural_$cformatArg_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.491421491 UTC

[section ""data" . Text.Printf.$fPrintfArgInteger_closure" {
     Text.Printf.$fPrintfArgInteger_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.formatInteger_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.493938851 UTC

[section ""data" . lvl42_rcccH_closure" {
     lvl42_rcccH_closure:
         const lvl42_rcccH_info;
         const 0;
         const 0;
         const 0;
 },
 lvl42_rcccH_entry() //  [R1]
         { []
         }
     {offset
       cchVH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchVI; else goto cchVJ;
       cchVI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchVJ: // global
           (_cchVE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cchVE::I64 == 0) goto cchVG; else goto cchVF;
       cchVG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cchVF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cchVE::I64;
           R4 = Text.Read.readEither7_closure+1;
           R3 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R2 = GHC.Read.$fReadInt2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.$fReadInt_$sreadNumber_entry(R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl42_rcccH_info" {
     lvl42_rcccH_info:
         const lvl42_rcccH_entry;
         const 0;
         const 12884901909;
         const SccKB_srt+888;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.498030586 UTC

[section ""data" . lvl43_rcccI_closure" {
     lvl43_rcccI_closure:
         const Text.Printf.FieldFormat_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const GHC.Types.False_closure+1;
         const GHC.Types.[]_closure+1;
         const lvl23_rccco_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.50034406 UTC

[section ""data" . lvl44_rcccJ_closure" {
     lvl44_rcccJ_closure:
         const lvl44_rcccJ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl44_rcccJ_entry() //  [R1]
         { []
         }
     {offset
       cchVY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchVZ; else goto cchW0;
       cchVZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchW0: // global
           (_cchVV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cchVV::I64 == 0) goto cchVX; else goto cchVW;
       cchVX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cchVW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cchVV::I64;
           R2 = Text.Read.readEither5_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl44_rcccJ_info" {
     lvl44_rcccJ_info:
         const lvl44_rcccJ_entry;
         const 0;
         const 12884901909;
         const SccKB_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.504505554 UTC

[section ""data" . lvl45_rcccK_closure" {
     lvl45_rcccK_closure:
         const lvl45_rcccK_info;
         const 0;
         const 0;
         const 0;
 },
 lvl45_rcccK_entry() //  [R1]
         { []
         }
     {offset
       cchWe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchWf; else goto cchWg;
       cchWf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchWg: // global
           (_cchWb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cchWb::I64 == 0) goto cchWd; else goto cchWc;
       cchWd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cchWc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cchWb::I64;
           R2 = Text.Read.readEither2_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl45_rcccK_info" {
     lvl45_rcccK_info:
         const lvl45_rcccK_entry;
         const 0;
         const 12884901909;
         const SccKB_srt+912;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.510976904 UTC

[section ""data" . $wgetStar_rcccL_closure" {
     $wgetStar_rcccL_closure:
         const $wgetStar_rcccL_info;
         const 0;
 },
 sat_sccxK_entry() //  [R1]
         { []
         }
     {offset
       cchWL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchWM; else goto cchWN;
       cchWM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchWN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = lvl43_rcccI_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccxK_info" {
     sat_sccxK_info:
         const sat_sccxK_entry;
         const 1;
         const 16;
 },
 sat_sccxS_entry() //  [R1]
         { []
         }
     {offset
       cchWQ: // global
           _sccxS::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cchWR; else goto cchWS;
       cchWS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cchWU; else goto cchWT;
       cchWU: // global
           HpAlloc = 24;
           goto cchWR;
       cchWR: // global
           R1 = _sccxS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchWT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sccxS::P64;
           _sccxJ::P64 = P64[_sccxS::P64 + 16];
           I64[Hp - 16] = sat_sccxK_info;
           P64[Hp] = _sccxJ::P64;
           I64[Sp - 24] = block_cchWO_info;
           R3 = Hp - 16;
           R2 = lvl42_rcccH_closure;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccxS_info" {
     sat_sccxS_info:
         const sat_sccxS_entry;
         const 1;
         const 30064771088;
         const SccKB_srt+928;
 },
 _cchWO() //  [R1]
         { []
         }
     {offset
       cchWO: // global
           I64[Sp] = block_cchWX_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cchWO_info" {
     block_cchWO_info:
         const _cchWO;
         const 0;
         const 12884901918;
         const SccKB_srt+936;
 },
 _cchWX() //  [R1]
         { []
         }
     {offset
       cchWX: // global
           if (R1 & 7 == 1) goto cchX4; else goto cchX9;
       cchX4: // global
           R1 = lvl44_rcccJ_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cchX9: // global
           I64[Sp - 8] = block_cchX7_info;
           _sccxN::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sccxN::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchXn; else goto cchXa;
       uchXn: // global
           call _cchX7(R1) args: 0, res: 0, upd: 0;
       cchXa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cchWX_info" {
     block_cchWX_info:
         const _cchWX;
         const 0;
         const 12884901918;
         const SccKB_srt+936;
 },
 _cchX7() //  [R1]
         { []
         }
     {offset
       cchX7: // global
           if (R1 & 7 == 1) goto cchXg; else goto cchXk;
       cchXg: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cchXk: // global
           R1 = lvl45_rcccK_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchX7_info" {
     block_cchX7_info:
         const _cchX7;
         const 1;
         const 4294967326;
         const SccKB_srt+944;
 },
 $wgetStar_rcccL_entry() //  [R2]
         { []
         }
     {offset
       cchXs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cchXt; else goto cchXu;
       cchXt: // global
           R2 = R2;
           R1 = $wgetStar_rcccL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cchXu: // global
           I64[Sp - 8] = block_cchWs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchXC; else goto cchWt;
       uchXC: // global
           call _cchWs(R1) args: 0, res: 0, upd: 0;
       cchWt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgetStar_rcccL_info" {
     $wgetStar_rcccL_info:
         const $wgetStar_rcccL_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const SccKB_srt+928;
 },
 _cchWs() //  [R1]
         { []
         }
     {offset
       cchWs: // global
           if (R1 & 7 == 1) goto cchXp; else goto cchXq;
       cchXp: // global
           R1 = Text.Printf.errorMissingArgument_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cchXq: // global
           I64[Sp - 8] = block_cchWy_info;
           _sccxG::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sccxG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchXB; else goto cchWz;
       uchXB: // global
           call _cchWy(R1) args: 0, res: 0, upd: 0;
       cchWz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cchWs_info" {
     block_cchWs_info:
         const _cchWs;
         const 0;
         const 64424509470;
         const SccKB_srt+928;
 },
 _cchWy() //  [R1]
         { []
         }
     {offset
       cchWy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cchXA; else goto cchXz;
       cchXA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cchXz: // global
           _sccxJ::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_sccxS_info;
           P64[Hp] = _sccxJ::P64;
           R2 = Hp - 16;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cchWy_info" {
     block_cchWy_info:
         const _cchWy;
         const 1;
         const 30064771102;
         const SccKB_srt+928;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.525969831 UTC

[section ""data" . lvl46_rcccM_closure" {
     lvl46_rcccM_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.527700327 UTC

[section ""data" . lvl47_rcccN_closure" {
     lvl47_rcccN_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.LeftAdjust_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.529424626 UTC

[section ""data" . lvl48_rcccO_closure" {
     lvl48_rcccO_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.ZeroPad_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.534069008 UTC

[section ""data" . lvl49_rcccP_closure" {
     lvl49_rcccP_closure:
         const lvl49_rcccP_info;
         const 0;
         const 0;
         const 0;
 },
 sat_sccy6_entry() //  [R1]
         { []
         }
     {offset
       cchYG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cchYH; else goto cchYI;
       cchYH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchYI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cchYE_info;
           R3 = P64[R1 + 16];
           R2 = lvl42_rcccH_closure;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccy6_info" {
     sat_sccy6_info:
         const sat_sccy6_entry;
         const 1;
         const 30064771088;
         const SccKB_srt+928;
 },
 _cchYE() //  [R1]
         { []
         }
     {offset
       cchYE: // global
           I64[Sp] = block_cchYL_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cchYE_info" {
     block_cchYE_info:
         const _cchYE;
         const 0;
         const 12884901918;
         const SccKB_srt+936;
 },
 _cchYL() //  [R1]
         { []
         }
     {offset
       cchYL: // global
           if (R1 & 7 == 1) goto cchYS; else goto cchYX;
       cchYS: // global
           R1 = lvl44_rcccJ_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cchYX: // global
           I64[Sp - 8] = block_cchYV_info;
           _sccy1::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sccy1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchZb; else goto cchYY;
       uchZb: // global
           call _cchYV(R1) args: 0, res: 0, upd: 0;
       cchYY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cchYL_info" {
     block_cchYL_info:
         const _cchYL;
         const 0;
         const 12884901918;
         const SccKB_srt+936;
 },
 _cchYV() //  [R1]
         { []
         }
     {offset
       cchYV: // global
           if (R1 & 7 == 1) goto cchZ4; else goto cchZ8;
       cchZ4: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cchZ8: // global
           R1 = lvl45_rcccK_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchYV_info" {
     block_cchYV_info:
         const _cchYV;
         const 1;
         const 4294967326;
         const SccKB_srt+944;
 },
 lvl49_rcccP_entry() //  [R1]
         { []
         }
     {offset
       cchZg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cchZh; else goto cchZi;
       cchZh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cchZi: // global
           (_cchYp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cchYp::I64 == 0) goto cchYr; else goto cchYq;
       cchYr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cchYq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cchYp::I64;
           I64[Sp - 24] = block_cchYs_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Unicode.isDigit_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl49_rcccP_info" {
     lvl49_rcccP_info:
         const lvl49_rcccP_entry;
         const 0;
         const 30064771093;
         const SccKB_srt+928;
 },
 _cchYs() //  [R1, R2]
         { []
         }
     {offset
       cchYs: // global
           I64[Sp - 8] = block_cchYu_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uchZt; else goto cchYv;
       uchZt: // global
           call _cchYu(R1) args: 0, res: 0, upd: 0;
       cchYv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cchYs_info" {
     block_cchYs_info:
         const _cchYs;
         const 0;
         const 30064771102;
         const SccKB_srt+928;
 },
 _cchYu() //  [R1]
         { []
         }
     {offset
       cchYu: // global
           _sccxV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cchZd; else goto cchZe;
       cchZd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cchZo; else goto cchZn;
       cchZo: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cchZn: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl46_rcccM_closure+1;
           P64[Hp] = _sccxV::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cchZe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cchZs; else goto cchZr;
       cchZs: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cchZr: // global
           I64[Hp - 40] = sat_sccy6_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _sccxV::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cchYu_info" {
     block_cchYu_info:
         const _cchYu;
         const 1;
         const 30064771102;
         const SccKB_srt+928;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.548338405 UTC

[section ""data" . lvl50_rcccQ_closure" {
     lvl50_rcccQ_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.SignPlus_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.551005624 UTC

[section ""data" . lvl51_rcccR_closure" {
     lvl51_rcccR_closure:
         const lvl51_rcccR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl51_rcccR_entry() //  [R1]
         { []
         }
     {offset
       cci0j: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cci0k; else goto cci0l;
       cci0k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cci0l: // global
           (_cci0d::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cci0d::I64 == 0) goto cci0f; else goto cci0e;
       cci0f: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cci0e: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cci0d::I64;
           I64[Sp - 24] = block_cci0g_info;
           R1 = lvl49_rcccP_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uci0p; else goto cci0h;
       uci0p: // global
           call _cci0g(R1) args: 0, res: 0, upd: 0;
       cci0h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl51_rcccR_info" {
     lvl51_rcccR_info:
         const lvl51_rcccR_entry;
         const 0;
         const 4294967317;
         const SccKB_srt+968;
 },
 _cci0g() //  [R1]
         { []
         }
     {offset
       cci0g: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci0g_info" {
     block_cci0g_info:
         const _cci0g;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.556071738 UTC

[section ""data" . lvl52_rcccS_closure" {
     lvl52_rcccS_closure:
         const GHC.Base.Just_con_info;
         const lvl51_rcccR_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.5586412 UTC

[section ""data" . lvl53_rcccT_closure" {
     lvl53_rcccT_closure:
         const lvl53_rcccT_info;
         const 0;
         const 0;
         const 0;
 },
 lvl53_rcccT_entry() //  [R1]
         { []
         }
     {offset
       cci0N: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cci0O; else goto cci0P;
       cci0O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cci0P: // global
           (_cci0H::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cci0H::I64 == 0) goto cci0J; else goto cci0I;
       cci0J: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cci0I: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cci0H::I64;
           I64[Sp - 24] = block_cci0K_info;
           R1 = lvl49_rcccP_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uci0T; else goto cci0L;
       uci0T: // global
           call _cci0K(R1) args: 0, res: 0, upd: 0;
       cci0L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl53_rcccT_info" {
     lvl53_rcccT_info:
         const lvl53_rcccT_entry;
         const 0;
         const 4294967317;
         const SccKB_srt+968;
 },
 _cci0K() //  [R1]
         { []
         }
     {offset
       cci0K: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci0K_info" {
     block_cci0K_info:
         const _cci0K;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.563566662 UTC

[section ""data" . lvl54_rcccU_closure" {
     lvl54_rcccU_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.SignSpace_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.606260037 UTC

[section ""data" . $wgetSpecs_rcccV_closure" {
     $wgetSpecs_rcccV_closure:
         const $wgetSpecs_rcccV_info;
         const 0;
 },
 ds3_sccyu_entry() //  [R1]
         { []
         }
     {offset
       cci1O: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cci1P; else goto cci1Q;
       cci1P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cci1Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cci1H_info;
           _sccyj::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sccyj::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uci24; else goto cci1I;
       uci24: // global
           call _cci1H(R1) args: 0, res: 0, upd: 0;
       cci1I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds3_sccyu_info" {
     ds3_sccyu_info:
         const ds3_sccyu_entry;
         const 2;
         const 4294967314;
         const SccKB_srt+952;
 },
 _cci1H() //  [R1]
         { []
         }
     {offset
       cci1H: // global
           if (R1 & 7 == 1) goto cci1L; else goto cci1M;
       cci1L: // global
           R1 = Text.Printf.errorMissingArgument_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cci1M: // global
           I64[Sp] = block_cci1W_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uci23; else goto cci1Y;
       uci23: // global
           call _cci1W(R1) args: 0, res: 0, upd: 0;
       cci1Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cci1H_info" {
     block_cci1H_info:
         const _cci1H;
         const 1;
         const 4294967326;
         const SccKB_srt+952;
 },
 _cci1W() //  [R1]
         { []
         }
     {offset
       cci1W: // global
           R2 = P64[Sp + 8];
           R1 = P64[R1 + 7];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci1W_info" {
     block_cci1W_info:
         const _cci1W;
         const 1;
         const 30;
 },
 sat_sccyD_entry() //  [R1]
         { []
         }
     {offset
       cci2j: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cci2k; else goto cci2l;
       cci2k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cci2l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cci2c_info;
           _sccye::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sccye::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uci2G; else goto cci2d;
       uci2G: // global
           call _cci2c(R1) args: 0, res: 0, upd: 0;
       cci2d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccyD_info" {
     sat_sccyD_info:
         const sat_sccyD_entry;
         const 2;
         const 18;
 },
 _cci2c() //  [R1]
         { []
         }
     {offset
       cci2c: // global
           if (R1 & 7 == 1) goto cci2g; else goto cci2h;
       cci2g: // global
           _sccye::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cci2o_info;
           R1 = _sccye::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uci2F; else goto cci2q;
       uci2F: // global
           call _cci2o(R1) args: 0, res: 0, upd: 0;
       cci2q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cci2h: // global
           R1 = lvl47_rcccN_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci2c_info" {
     block_cci2c_info:
         const _cci2c;
         const 1;
         const 30;
 },
 _cci2o() //  [R1]
         { []
         }
     {offset
       cci2o: // global
           if (R1 & 7 == 1) goto cci2w; else goto cci2A;
       cci2w: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cci2A: // global
           R1 = lvl48_rcccO_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci2o_info" {
     block_cci2o_info:
         const _cci2o;
         const 0;
         const 30;
 },
 sat_sccz8_entry() //  [R1]
         { []
         }
     {offset
       cci30: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cci31; else goto cci32;
       cci31: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cci32: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cci2Y_info;
           R3 = P64[R1 + 16];
           R2 = lvl42_rcccH_closure;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccz8_info" {
     sat_sccz8_info:
         const sat_sccz8_entry;
         const 1;
         const 30064771088;
         const SccKB_srt+928;
 },
 _cci2Y() //  [R1]
         { []
         }
     {offset
       cci2Y: // global
           I64[Sp] = block_cci35_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cci2Y_info" {
     block_cci2Y_info:
         const _cci2Y;
         const 0;
         const 12884901918;
         const SccKB_srt+936;
 },
 _cci35() //  [R1]
         { []
         }
     {offset
       cci35: // global
           if (R1 & 7 == 1) goto cci3c; else goto cci3h;
       cci3c: // global
           R1 = lvl44_rcccJ_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cci3h: // global
           I64[Sp - 8] = block_cci3f_info;
           _sccz3::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sccz3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uci3v; else goto cci3i;
       uci3v: // global
           call _cci3f(R1) args: 0, res: 0, upd: 0;
       cci3i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cci35_info" {
     block_cci35_info:
         const _cci35;
         const 0;
         const 12884901918;
         const SccKB_srt+936;
 },
 _cci3f() //  [R1]
         { []
         }
     {offset
       cci3f: // global
           if (R1 & 7 == 1) goto cci3o; else goto cci3s;
       cci3o: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cci3s: // global
           R1 = lvl45_rcccK_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci3f_info" {
     block_cci3f_info:
         const _cci3f;
         const 1;
         const 4294967326;
         const SccKB_srt+944;
 },
 ds3_sccyU_entry() //  [R1]
         { []
         }
     {offset
       cci3A: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cci3B; else goto cci3C;
       cci3B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cci3C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cci2M_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.isDigit_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds3_sccyU_info" {
     ds3_sccyU_info:
         const ds3_sccyU_entry;
         const 1;
         const 30064771088;
         const SccKB_srt+928;
 },
 _cci2M() //  [R1, R2]
         { []
         }
     {offset
       cci2M: // global
           I64[Sp - 8] = block_cci2O_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uci3N; else goto cci2P;
       uci3N: // global
           call _cci2O(R1) args: 0, res: 0, upd: 0;
       cci2P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cci2M_info" {
     block_cci2M_info:
         const _cci2M;
         const 0;
         const 30064771102;
         const SccKB_srt+928;
 },
 _cci2O() //  [R1]
         { []
         }
     {offset
       cci2O: // global
           _sccyX::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cci3x; else goto cci3y;
       cci3x: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cci3I; else goto cci3H;
       cci3I: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cci3H: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl46_rcccM_closure+1;
           P64[Hp] = _sccyX::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cci3y: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cci3M; else goto cci3L;
       cci3M: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cci3L: // global
           I64[Hp - 40] = sat_sccz8_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _sccyX::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci2O_info" {
     block_cci2O_info:
         const _cci2O;
         const 1;
         const 30064771102;
         const SccKB_srt+928;
 },
 sat_scczD_entry() //  [R1]
         { []
         }
     {offset
       cci4G: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cci4H; else goto cci4I;
       cci4H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cci4I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cci4E_info;
           R3 = P64[R1 + 16];
           R2 = lvl42_rcccH_closure;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scczD_info" {
     sat_scczD_info:
         const sat_scczD_entry;
         const 1;
         const 30064771088;
         const SccKB_srt+928;
 },
 _cci4E() //  [R1]
         { []
         }
     {offset
       cci4E: // global
           I64[Sp] = block_cci4L_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cci4E_info" {
     block_cci4E_info:
         const _cci4E;
         const 0;
         const 12884901918;
         const SccKB_srt+936;
 },
 _cci4L() //  [R1]
         { []
         }
     {offset
       cci4L: // global
           if (R1 & 7 == 1) goto cci4S; else goto cci4X;
       cci4S: // global
           R1 = lvl44_rcccJ_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cci4X: // global
           I64[Sp - 8] = block_cci4V_info;
           _scczy::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scczy::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uci5b; else goto cci4Y;
       uci5b: // global
           call _cci4V(R1) args: 0, res: 0, upd: 0;
       cci4Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cci4L_info" {
     block_cci4L_info:
         const _cci4L;
         const 0;
         const 12884901918;
         const SccKB_srt+936;
 },
 _cci4V() //  [R1]
         { []
         }
     {offset
       cci4V: // global
           if (R1 & 7 == 1) goto cci54; else goto cci58;
       cci54: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cci58: // global
           R1 = lvl45_rcccK_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci4V_info" {
     block_cci4V_info:
         const _cci4V;
         const 1;
         const 4294967326;
         const SccKB_srt+944;
 },
 ds12_scczp_entry() //  [R1]
         { []
         }
     {offset
       cci5g: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cci5h; else goto cci5i;
       cci5h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cci5i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cci4s_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.isDigit_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds12_scczp_info" {
     ds12_scczp_info:
         const ds12_scczp_entry;
         const 1;
         const 30064771088;
         const SccKB_srt+928;
 },
 _cci4s() //  [R1, R2]
         { []
         }
     {offset
       cci4s: // global
           I64[Sp - 8] = block_cci4u_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uci5t; else goto cci4v;
       uci5t: // global
           call _cci4u(R1) args: 0, res: 0, upd: 0;
       cci4v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cci4s_info" {
     block_cci4s_info:
         const _cci4s;
         const 0;
         const 30064771102;
         const SccKB_srt+928;
 },
 _cci4u() //  [R1]
         { []
         }
     {offset
       cci4u: // global
           _scczs::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cci5d; else goto cci5e;
       cci5d: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cci5o; else goto cci5n;
       cci5o: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cci5n: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl46_rcccM_closure+1;
           P64[Hp] = _scczs::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cci5e: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cci5s; else goto cci5r;
       cci5s: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cci5r: // global
           I64[Hp - 40] = sat_scczD_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _scczs::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci4u_info" {
     block_cci4u_info:
         const _cci4u;
         const 1;
         const 30064771102;
         const SccKB_srt+928;
 },
 ds12_scczN_entry() //  [R1]
         { []
         }
     {offset
       cci5C: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cci5D; else goto cci5E;
       cci5D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cci5E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cci5z_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgetStar_rcccL_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds12_scczN_info" {
     ds12_scczN_info:
         const ds12_scczN_entry;
         const 1;
         const 4294967312;
         const SccKB_srt+960;
 },
 _cci5z() //  [R1, R2]
         { []
         }
     {offset
       cci5z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cci5H; else goto cci5G;
       cci5H: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cci5G: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci5z_info" {
     block_cci5z_info:
         const _cci5z;
         const 0;
         const 30;
 },
 ds4_sccz9_entry() //  [R1]
         { []
         }
     {offset
       cci5I: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cci5J; else goto cci5K;
       cci5J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cci5K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cci3S_info;
           _sccyi::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sccyi::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uci6v; else goto cci3T;
       uci6v: // global
           call _cci3S(R1) args: 0, res: 0, upd: 0;
       cci3T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_sccz9_info" {
     ds4_sccz9_info:
         const ds4_sccz9_entry;
         const 2;
         const 923417968658;
         const SccKB_srt+928;
 },
 _cci3S() //  [R1]
         { []
         }
     {offset
       cci3S: // global
           I64[Sp] = block_cci3X_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto uci6r; else goto cci3Y;
       uci6r: // global
           call _cci3X(R1) args: 0, res: 0, upd: 0;
       cci3Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cci3S_info" {
     block_cci3S_info:
         const _cci3S;
         const 1;
         const 923417968670;
         const SccKB_srt+928;
 },
 _cci3X() //  [R1]
         { []
         }
     {offset
       cci3X: // global
           if (R1 & 7 == 1) goto cci5P; else goto cci5U;
       cci5P: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cci5S; else goto cci5R;
       cci5S: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cci5R: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = GHC.Base.Nothing_closure+1;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cci5U: // global
           I64[Sp - 16] = block_cci43_info;
           _scczd::P64 = R1;
           _scczf::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scczf::P64;
           P64[Sp] = _scczd::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uci6s; else goto cci44;
       uci6s: // global
           call _cci43(R1) args: 0, res: 0, upd: 0;
       cci44: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cci3X_info" {
     block_cci3X_info:
         const _cci3X;
         const 1;
         const 923417968670;
         const SccKB_srt+928;
 },
 _cci43() //  [R1]
         { []
         }
     {offset
       cci43: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cci5X; else goto cci5W;
       cci5X: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cci5W: // global
           if (I64[R1 + 7] == 46) goto cci61; else goto cci60;
       cci61: // global
           Hp = Hp - 32;
           I64[Sp + 16] = block_cci4b_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uci6t; else goto cci4c;
       uci6t: // global
           call _cci4b(R1) args: 0, res: 0, upd: 0;
       cci4c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cci60: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = GHC.Base.Nothing_closure+1;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci43_info" {
     block_cci43_info:
         const _cci43;
         const 3;
         const 923417968670;
         const SccKB_srt+928;
 },
 _cci4b() //  [R1]
         { []
         }
     {offset
       cci4b: // global
           if (R1 & 7 == 1) goto cci65; else goto cci6a;
       cci65: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cci68; else goto cci67;
       cci68: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cci67: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = lvl52_rcccS_closure+2;
           P64[Hp - 8] = lvl53_rcccT_closure;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cci6a: // global
           I64[Sp - 16] = block_cci4h_info;
           _scczj::P64 = R1;
           _scczl::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scczl::P64;
           P64[Sp] = _scczj::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uci6u; else goto cci4i;
       uci6u: // global
           call _cci4h(R1) args: 0, res: 0, upd: 0;
       cci4i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cci4b_info" {
     block_cci4b_info:
         const _cci4b;
         const 1;
         const 923417968670;
         const SccKB_srt+928;
 },
 _cci4h() //  [R1]
         { []
         }
     {offset
       cci4h: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cci6d; else goto cci6c;
       cci6d: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cci6c: // global
           _sccyi::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 42) goto cci6o; else goto cci6j;
       cci6o: // global
           I64[Hp - 112] = ds12_scczN_info;
           P64[Hp - 96] = _sccyi::P64;
           I64[Hp - 88] = stg_sel_0_upd_info;
           _cci5v::P64 = Hp - 112;
           P64[Hp - 72] = _cci5v::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cci5v::P64;
           I64[Hp - 40] = GHC.Base.Just_con_info;
           P64[Hp - 32] = Hp - 64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 88;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cci6j: // global
           I64[Hp - 112] = ds12_scczp_info;
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = stg_sel_1_upd_info;
           _cci4o::P64 = Hp - 112;
           P64[Hp - 72] = _cci4o::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cci4o::P64;
           I64[Hp - 40] = GHC.Base.Just_con_info;
           P64[Hp - 32] = Hp - 64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 88;
           P64[Hp] = _sccyi::P64;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci4h_info" {
     block_cci4h_info:
         const _cci4h;
         const 3;
         const 98784247838;
         const SccKB_srt+928;
 },
 ds5_sccA0_entry() //  [R1]
         { []
         }
     {offset
       cci6D: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cci6E; else goto cci6F;
       cci6E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cci6F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cci6A_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uci73; else goto cci6B;
       uci73: // global
           call _cci6A(R1) args: 0, res: 0, upd: 0;
       cci6B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds5_sccA0_info" {
     ds5_sccA0_info:
         const ds5_sccA0_entry;
         const 1;
         const 4294967312;
         const SccKB_srt+952;
 },
 _cci6A() //  [R1]
         { []
         }
     {offset
       cci6A: // global
           I64[Sp - 8] = block_cci6I_info;
           _sccA3::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp] = _sccA3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uci72; else goto cci6K;
       uci72: // global
           call _cci6I(R1) args: 0, res: 0, upd: 0;
       cci6K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cci6A_info" {
     block_cci6A_info:
         const _cci6A;
         const 0;
         const 4294967326;
         const SccKB_srt+952;
 },
 _cci6I() //  [R1]
         { []
         }
     {offset
       cci6I: // global
           if (R1 & 7 == 1) goto cci6Q; else goto cci6V;
       cci6Q: // global
           R1 = Text.Printf.errorMissingArgument_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cci6V: // global
           I64[Sp] = block_cci6T_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uci74; else goto cci6W;
       uci74: // global
           call _cci6T(R1) args: 0, res: 0, upd: 0;
       cci6W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cci6I_info" {
     block_cci6I_info:
         const _cci6I;
         const 1;
         const 4294967326;
         const SccKB_srt+952;
 },
 _cci6T() //  [R1]
         { []
         }
     {offset
       cci6T: // global
           R2 = P64[Sp + 8];
           R1 = P64[R1 + 7];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci6T_info" {
     block_cci6T_info:
         const _cci6T;
         const 1;
         const 30;
 },
 sat_sccAx_entry() //  [R1]
         { []
         }
     {offset
       cci7g: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cci7k; else goto cci7l;
       cci7k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cci7l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cci7d_info;
           _sccyd::P64 = P64[R1 + 16];
           _sccye::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sccyd::P64;
           P64[Sp - 24] = _sccye::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uci81; else goto cci7e;
       uci81: // global
           call _cci7d(R1) args: 0, res: 0, upd: 0;
       cci7e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccAx_info" {
     sat_sccAx_info:
         const sat_sccAx_entry;
         const 3;
         const 15;
 },
 _cci7d() //  [R1]
         { []
         }
     {offset
       cci7d: // global
           I64[Sp] = block_cci7j_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto uci80; else goto cci7n;
       uci80: // global
           call _cci7j(R1) args: 0, res: 0, upd: 0;
       cci7n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cci7d_info" {
     block_cci7d_info:
         const _cci7d;
         const 2;
         const 30;
 },
 _cci7j() //  [R1]
         { []
         }
     {offset
       cci7j: // global
           if (%MO_S_Ge_W64(I64[R1 + 7], 0)) goto cci7x; else goto uci7Y;
       cci7x: // global
           _sccyd::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cci7v_info;
           R1 = _sccyd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uci82; else goto cci7y;
       uci82: // global
           call _cci7v(R1) args: 0, res: 0, upd: 0;
       cci7y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       uci7Y: // global
           Sp = Sp + 24;
           call _cci7V() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cci7j_info" {
     block_cci7j_info:
         const _cci7j;
         const 2;
         const 30;
 },
 _cci7v() //  [R1]
         { []
         }
     {offset
       cci7v: // global
           if (R1 & 7 == 1) goto cci7F; else goto uci7Z;
       cci7F: // global
           _sccye::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cci7C_info;
           R1 = _sccye::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uci84; else goto cci7G;
       uci84: // global
           call _cci7C(R1) args: 0, res: 0, upd: 0;
       cci7G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       uci7Z: // global
           Sp = Sp + 16;
           call _cci7V() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cci7v_info" {
     block_cci7v_info:
         const _cci7v;
         const 1;
         const 30;
 },
 _cci7C() //  [R1]
         { []
         }
     {offset
       cci7C: // global
           if (R1 & 7 == 1) goto cci7M; else goto cci7Q;
       cci7M: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cci7Q: // global
           R1 = lvl48_rcccO_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci7C_info" {
     block_cci7C_info:
         const _cci7C;
         const 0;
         const 30;
 },
 _cci7V() //  []
         { []
         }
     {offset
       cci7V: // global
           R1 = lvl47_rcccN_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sccAi_entry() //  [R1]
         { []
         }
     {offset
       cci8e: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cci8i; else goto cci8j;
       cci8i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cci8j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cci8b_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uci8D; else goto cci8c;
       uci8D: // global
           call _cci8b(R1) args: 0, res: 0, upd: 0;
       cci8c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccAi_info" {
     sat_sccAi_info:
         const sat_sccAi_entry;
         const 1;
         const 16;
 },
 _cci8b() //  [R1]
         { []
         }
     {offset
       cci8b: // global
           I64[Sp] = block_cci8h_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto uci8C; else goto cci8l;
       uci8C: // global
           call _cci8h(R1) args: 0, res: 0, upd: 0;
       cci8l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cci8b_info" {
     block_cci8b_info:
         const _cci8b;
         const 0;
         const 30;
 },
 _cci8h() //  [R1]
         { []
         }
     {offset
       cci8h: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cci8r; else goto cci8q;
       cci8r: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cci8q: // global
           _sccAf::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_sccAf::I64, 0)) goto cci8A; else goto cci8B;
       cci8A: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -_sccAf::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cci8B: // global
           Hp = Hp - 16;
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci8h_info" {
     block_cci8h_info:
         const _cci8h;
         const 0;
         const 30;
 },
 sat_sccAW_entry() //  [R1]
         { []
         }
     {offset
       cci8O: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cci8P; else goto cci8Q;
       cci8P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cci8Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cci8H_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uci9e; else goto cci8I;
       uci9e: // global
           call _cci8H(R1) args: 0, res: 0, upd: 0;
       cci8I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccAW_info" {
     sat_sccAW_info:
         const sat_sccAW_entry;
         const 1;
         const 16;
 },
 _cci8H() //  [R1]
         { []
         }
     {offset
       cci8H: // global
           if (R1 & 7 == 1) goto uci9a; else goto cci8M;
       uci9a: // global
           Sp = Sp + 8;
           call _cci98() args: 0, res: 0, upd: 0;
       cci8M: // global
           I64[Sp] = block_cci8W_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uci9c; else goto cci8Y;
       uci9c: // global
           call _cci8W(R1) args: 0, res: 0, upd: 0;
       cci8Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cci8H_info" {
     block_cci8H_info:
         const _cci8H;
         const 0;
         const 30;
 },
 _cci8W() //  [R1]
         { []
         }
     {offset
       cci8W: // global
           if (R1 & 7 == 1) goto cci94; else goto uci9b;
       cci94: // global
           R1 = lvl50_rcccQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uci9b: // global
           Sp = Sp + 8;
           call _cci98() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cci8W_info" {
     block_cci8W_info:
         const _cci8W;
         const 0;
         const 30;
 },
 _cci98() //  []
         { []
         }
     {offset
       cci98: // global
           R1 = lvl54_rcccU_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds3_sccAX_entry() //  [R1]
         { []
         }
     {offset
       cci9p: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cci9q; else goto cci9r;
       cci9q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cci9r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cci9m_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgetStar_rcccL_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds3_sccAX_info" {
     ds3_sccAX_info:
         const ds3_sccAX_entry;
         const 1;
         const 4294967312;
         const SccKB_srt+960;
 },
 _cci9m() //  [R1, R2]
         { []
         }
     {offset
       cci9m: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cci9u; else goto cci9t;
       cci9u: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cci9t: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci9m_info" {
     block_cci9m_info:
         const _cci9m;
         const 0;
         const 30;
 },
 sat_sccBE_entry() //  [R1]
         { []
         }
     {offset
       cciai: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cciaj; else goto cciak;
       cciaj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cciak: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cciag_info;
           R3 = P64[R1 + 16];
           R2 = lvl42_rcccH_closure;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccBE_info" {
     sat_sccBE_info:
         const sat_sccBE_entry;
         const 1;
         const 30064771088;
         const SccKB_srt+928;
 },
 _cciag() //  [R1]
         { []
         }
     {offset
       cciag: // global
           I64[Sp] = block_ccian_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cciag_info" {
     block_cciag_info:
         const _cciag;
         const 0;
         const 12884901918;
         const SccKB_srt+936;
 },
 _ccian() //  [R1]
         { []
         }
     {offset
       ccian: // global
           if (R1 & 7 == 1) goto cciau; else goto cciaz;
       cciau: // global
           R1 = lvl44_rcccJ_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cciaz: // global
           I64[Sp - 8] = block_cciax_info;
           _sccBz::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sccBz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uciaN; else goto cciaA;
       uciaN: // global
           call _cciax(R1) args: 0, res: 0, upd: 0;
       cciaA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccian_info" {
     block_ccian_info:
         const _ccian;
         const 0;
         const 12884901918;
         const SccKB_srt+936;
 },
 _cciax() //  [R1]
         { []
         }
     {offset
       cciax: // global
           if (R1 & 7 == 1) goto cciaG; else goto cciaK;
       cciaG: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cciaK: // global
           R1 = lvl45_rcccK_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cciax_info" {
     block_cciax_info:
         const _cciax;
         const 1;
         const 4294967326;
         const SccKB_srt+944;
 },
 ds12_sccBq_entry() //  [R1]
         { []
         }
     {offset
       cciaS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cciaT; else goto cciaU;
       cciaT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cciaU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccia4_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.isDigit_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds12_sccBq_info" {
     ds12_sccBq_info:
         const ds12_sccBq_entry;
         const 1;
         const 30064771088;
         const SccKB_srt+928;
 },
 _ccia4() //  [R1, R2]
         { []
         }
     {offset
       ccia4: // global
           I64[Sp - 8] = block_ccia6_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucib5; else goto ccia7;
       ucib5: // global
           call _ccia6(R1) args: 0, res: 0, upd: 0;
       ccia7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccia4_info" {
     block_ccia4_info:
         const _ccia4;
         const 0;
         const 30064771102;
         const SccKB_srt+928;
 },
 _ccia6() //  [R1]
         { []
         }
     {offset
       ccia6: // global
           _sccBt::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cciaP; else goto cciaQ;
       cciaP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccib0; else goto cciaZ;
       ccib0: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cciaZ: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl46_rcccM_closure+1;
           P64[Hp] = _sccBt::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cciaQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccib4; else goto ccib3;
       ccib4: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccib3: // global
           I64[Hp - 40] = sat_sccBE_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _sccBt::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccia6_info" {
     block_ccia6_info:
         const _ccia6;
         const 1;
         const 30064771102;
         const SccKB_srt+928;
 },
 ds12_sccBS_entry() //  [R1]
         { []
         }
     {offset
       ccibe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccibk; else goto ccibl;
       ccibk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccibl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccibb_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucibq; else goto ccibc;
       ucibq: // global
           call _ccibb(R1) args: 0, res: 0, upd: 0;
       ccibc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds12_sccBS_info" {
     ds12_sccBS_info:
         const ds12_sccBS_entry;
         const 1;
         const 4294967312;
         const SccKB_srt+960;
 },
 _ccibb() //  [R1]
         { []
         }
     {offset
       ccibb: // global
           I64[Sp] = block_ccibh_info;
           R2 = P64[R1 + 7];
           call $wgetStar_rcccL_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccibb_info" {
     block_ccibb_info:
         const _ccibb;
         const 0;
         const 4294967326;
         const SccKB_srt+960;
 },
 _ccibh() //  [R1, R2]
         { []
         }
     {offset
       ccibh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccibp; else goto ccibo;
       ccibp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccibo: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccibh_info" {
     block_ccibh_info:
         const _ccibh;
         const 0;
         const 30;
 },
 ds4_sccB1_entry() //  [R1]
         { []
         }
     {offset
       ccibv: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccibw; else goto ccibx;
       ccibw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccibx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cci9z_info;
           _sccAX::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sccAX::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucicg; else goto cci9A;
       ucicg: // global
           call _cci9z(R1) args: 0, res: 0, upd: 0;
       cci9A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_sccB1_info" {
     ds4_sccB1_info:
         const ds4_sccB1_entry;
         const 2;
         const 923417968658;
         const SccKB_srt+928;
 },
 _cci9z() //  [R1]
         { []
         }
     {offset
       cci9z: // global
           if (R1 & 7 == 1) goto ccibs; else goto ccibt;
       ccibs: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccibD; else goto ccibC;
       ccibD: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccibC: // global
           I64[Hp - 48] = stg_sel_0_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = GHC.Base.Nothing_closure+1;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccibt: // global
           I64[Sp - 16] = block_cci9F_info;
           _sccB2::P64 = R1;
           _sccB8::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sccB8::P64;
           P64[Sp] = _sccB2::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucicd; else goto cci9G;
       ucicd: // global
           call _cci9F(R1) args: 0, res: 0, upd: 0;
       cci9G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cci9z_info" {
     block_cci9z_info:
         const _cci9z;
         const 1;
         const 923417968670;
         const SccKB_srt+928;
 },
 _cci9F() //  [R1]
         { []
         }
     {offset
       cci9F: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccibH; else goto ccibG;
       ccibH: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccibG: // global
           if (I64[R1 + 7] == 46) goto ccibM; else goto ccibL;
       ccibM: // global
           Hp = Hp - 56;
           I64[Sp + 16] = block_cci9N_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ucice; else goto cci9O;
       ucice: // global
           call _cci9N(R1) args: 0, res: 0, upd: 0;
       cci9O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       ccibL: // global
           I64[Hp - 48] = stg_sel_0_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = GHC.Base.Nothing_closure+1;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci9F_info" {
     block_cci9F_info:
         const _cci9F;
         const 3;
         const 923417968670;
         const SccKB_srt+928;
 },
 _cci9N() //  [R1]
         { []
         }
     {offset
       cci9N: // global
           if (R1 & 7 == 1) goto ccibR; else goto ccibW;
       ccibR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccibU; else goto ccibT;
       ccibU: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccibT: // global
           I64[Hp - 48] = stg_sel_0_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = lvl52_rcccS_closure+2;
           P64[Hp - 8] = lvl53_rcccT_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccibW: // global
           I64[Sp - 16] = block_cci9T_info;
           _sccBg::P64 = R1;
           _sccBm::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sccBm::P64;
           P64[Sp] = _sccBg::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucicf; else goto cci9U;
       ucicf: // global
           call _cci9T(R1) args: 0, res: 0, upd: 0;
       cci9U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cci9N_info" {
     block_cci9N_info:
         const _cci9N;
         const 1;
         const 923417968670;
         const SccKB_srt+928;
 },
 _cci9T() //  [R1]
         { []
         }
     {offset
       cci9T: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccibZ; else goto ccibY;
       ccibZ: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccibY: // global
           _sccAX::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 42) goto ccicb; else goto ccic6;
       ccicb: // global
           I64[Hp - 136] = ds12_sccBS_info;
           P64[Hp - 120] = _sccAX::P64;
           I64[Hp - 112] = stg_sel_0_upd_info;
           _ccib7::P64 = Hp - 136;
           P64[Hp - 96] = _ccib7::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccib7::P64;
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = Hp - 88;
           I64[Hp - 48] = (,,)_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = Hp - 112;
           _ccica::P64 = Hp - 47;
           Hp = Hp - 24;
           R1 = _ccica::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccic6: // global
           I64[Hp - 136] = ds12_sccBq_info;
           P64[Hp - 120] = P64[Sp + 16];
           I64[Hp - 112] = stg_sel_0_upd_info;
           P64[Hp - 96] = _sccAX::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           _ccia0::P64 = Hp - 136;
           P64[Hp - 72] = _ccia0::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _ccia0::P64;
           I64[Hp - 40] = GHC.Base.Just_con_info;
           P64[Hp - 32] = Hp - 64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 88;
           P64[Hp] = Hp - 112;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cci9T_info" {
     block_cci9T_info:
         const _cci9T;
         const 3;
         const 98784247838;
         const SccKB_srt+928;
 },
 ds5_sccC8_entry() //  [R1]
         { []
         }
     {offset
       ccico: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccicp; else goto ccicq;
       ccicp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccicq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccicl_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucicO; else goto ccicm;
       ucicO: // global
           call _ccicl(R1) args: 0, res: 0, upd: 0;
       ccicm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds5_sccC8_info" {
     ds5_sccC8_info:
         const ds5_sccC8_entry;
         const 1;
         const 4294967312;
         const SccKB_srt+952;
 },
 _ccicl() //  [R1]
         { []
         }
     {offset
       ccicl: // global
           I64[Sp - 8] = block_ccict_info;
           _sccCb::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp] = _sccCb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucicN; else goto ccicv;
       ucicN: // global
           call _ccict(R1) args: 0, res: 0, upd: 0;
       ccicv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccicl_info" {
     block_ccicl_info:
         const _ccicl;
         const 0;
         const 4294967326;
         const SccKB_srt+952;
 },
 _ccict() //  [R1]
         { []
         }
     {offset
       ccict: // global
           if (R1 & 7 == 1) goto ccicB; else goto ccicG;
       ccicB: // global
           R1 = Text.Printf.errorMissingArgument_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       ccicG: // global
           I64[Sp] = block_ccicE_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucicP; else goto ccicH;
       ucicP: // global
           call _ccicE(R1) args: 0, res: 0, upd: 0;
       ccicH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccict_info" {
     block_ccict_info:
         const _ccict;
         const 1;
         const 4294967326;
         const SccKB_srt+952;
 },
 _ccicE() //  [R1]
         { []
         }
     {offset
       ccicE: // global
           R2 = P64[Sp + 8];
           R1 = P64[R1 + 7];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccicE_info" {
     block_ccicE_info:
         const _ccicE;
         const 1;
         const 30;
 },
 sat_sccCF_entry() //  [R1]
         { []
         }
     {offset
       ccid1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccid5; else goto ccid6;
       ccid5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccid6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_ccicY_info;
           _sccyd::P64 = P64[R1 + 16];
           _sccye::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sccyd::P64;
           P64[Sp - 24] = _sccye::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucidM; else goto ccicZ;
       ucidM: // global
           call _ccicY(R1) args: 0, res: 0, upd: 0;
       ccicZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccCF_info" {
     sat_sccCF_info:
         const sat_sccCF_entry;
         const 3;
         const 15;
 },
 _ccicY() //  [R1]
         { []
         }
     {offset
       ccicY: // global
           I64[Sp] = block_ccid4_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucidL; else goto ccid8;
       ucidL: // global
           call _ccid4(R1) args: 0, res: 0, upd: 0;
       ccid8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccicY_info" {
     block_ccicY_info:
         const _ccicY;
         const 2;
         const 30;
 },
 _ccid4() //  [R1]
         { []
         }
     {offset
       ccid4: // global
           if (%MO_S_Ge_W64(I64[R1 + 7], 0)) goto ccidi; else goto ucidJ;
       ccidi: // global
           _sccyd::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccidg_info;
           R1 = _sccyd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucidN; else goto ccidj;
       ucidN: // global
           call _ccidg(R1) args: 0, res: 0, upd: 0;
       ccidj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       ucidJ: // global
           Sp = Sp + 24;
           call _ccidG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccid4_info" {
     block_ccid4_info:
         const _ccid4;
         const 2;
         const 30;
 },
 _ccidg() //  [R1]
         { []
         }
     {offset
       ccidg: // global
           if (R1 & 7 == 1) goto ccidq; else goto ucidK;
       ccidq: // global
           _sccye::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccidn_info;
           R1 = _sccye::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucidP; else goto ccidr;
       ucidP: // global
           call _ccidn(R1) args: 0, res: 0, upd: 0;
       ccidr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       ucidK: // global
           Sp = Sp + 16;
           call _ccidG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccidg_info" {
     block_ccidg_info:
         const _ccidg;
         const 1;
         const 30;
 },
 _ccidn() //  [R1]
         { []
         }
     {offset
       ccidn: // global
           if (R1 & 7 == 1) goto ccidx; else goto ccidB;
       ccidx: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccidB: // global
           R1 = lvl48_rcccO_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccidn_info" {
     block_ccidn_info:
         const _ccidn;
         const 0;
         const 30;
 },
 _ccidG() //  []
         { []
         }
     {offset
       ccidG: // global
           R1 = lvl47_rcccN_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sccCq_entry() //  [R1]
         { []
         }
     {offset
       ccidZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccie3; else goto ccie4;
       ccie3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccie4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccidW_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucieo; else goto ccidX;
       ucieo: // global
           call _ccidW(R1) args: 0, res: 0, upd: 0;
       ccidX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccCq_info" {
     sat_sccCq_info:
         const sat_sccCq_entry;
         const 1;
         const 16;
 },
 _ccidW() //  [R1]
         { []
         }
     {offset
       ccidW: // global
           I64[Sp] = block_ccie2_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucien; else goto ccie6;
       ucien: // global
           call _ccie2(R1) args: 0, res: 0, upd: 0;
       ccie6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccidW_info" {
     block_ccidW_info:
         const _ccidW;
         const 0;
         const 30;
 },
 _ccie2() //  [R1]
         { []
         }
     {offset
       ccie2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cciec; else goto ccieb;
       cciec: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccieb: // global
           _sccCn::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_sccCn::I64, 0)) goto cciel; else goto cciem;
       cciel: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -_sccCn::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cciem: // global
           Hp = Hp - 16;
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccie2_info" {
     block_ccie2_info:
         const _ccie2;
         const 0;
         const 30;
 },
 sat_sccDo_entry() //  [R1]
         { []
         }
     {offset
       ccieX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccieY; else goto ccieZ;
       ccieY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccieZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccieV_info;
           R3 = P64[R1 + 16];
           R2 = lvl42_rcccH_closure;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccDo_info" {
     sat_sccDo_info:
         const sat_sccDo_entry;
         const 1;
         const 30064771088;
         const SccKB_srt+928;
 },
 _ccieV() //  [R1]
         { []
         }
     {offset
       ccieV: // global
           I64[Sp] = block_ccif2_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccieV_info" {
     block_ccieV_info:
         const _ccieV;
         const 0;
         const 12884901918;
         const SccKB_srt+936;
 },
 _ccif2() //  [R1]
         { []
         }
     {offset
       ccif2: // global
           if (R1 & 7 == 1) goto ccif9; else goto ccife;
       ccif9: // global
           R1 = lvl44_rcccJ_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ccife: // global
           I64[Sp - 8] = block_ccifc_info;
           _sccDj::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sccDj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucifs; else goto cciff;
       ucifs: // global
           call _ccifc(R1) args: 0, res: 0, upd: 0;
       cciff: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccif2_info" {
     block_ccif2_info:
         const _ccif2;
         const 0;
         const 12884901918;
         const SccKB_srt+936;
 },
 _ccifc() //  [R1]
         { []
         }
     {offset
       ccifc: // global
           if (R1 & 7 == 1) goto ccifl; else goto ccifp;
       ccifl: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ccifp: // global
           R1 = lvl45_rcccK_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccifc_info" {
     block_ccifc_info:
         const _ccifc;
         const 1;
         const 4294967326;
         const SccKB_srt+944;
 },
 ds7_sccDp_entry() //  [R1]
         { []
         }
     {offset
       ccifB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccifC; else goto ccifD;
       ccifC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccifD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccify_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgetStar_rcccL_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds7_sccDp_info" {
     ds7_sccDp_info:
         const ds7_sccDp_entry;
         const 1;
         const 4294967312;
         const SccKB_srt+960;
 },
 _ccify() //  [R1, R2]
         { []
         }
     {offset
       ccify: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccifG; else goto ccifF;
       ccifG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccifF: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccify_info" {
     block_ccify_info:
         const _ccify;
         const 0;
         const 30;
 },
 ds3_sccD1_entry() //  [R1]
         { []
         }
     {offset
       ccifL: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccifM; else goto ccifN;
       ccifM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccifN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cciew_info;
           _sccyi::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sccyi::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucigq; else goto cciex;
       ucigq: // global
           call _cciew(R1) args: 0, res: 0, upd: 0;
       cciex: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds3_sccD1_info" {
     ds3_sccD1_info:
         const ds3_sccD1_entry;
         const 2;
         const 236223201298;
         const SccKB_srt+928;
 },
 _cciew() //  [R1]
         { []
         }
     {offset
       cciew: // global
           if (R1 & 7 == 1) goto ccifI; else goto ccifJ;
       ccifI: // global
           I64[Sp] = block_ccifP_info;
           R1 = lvl49_rcccP_closure;
           if (R1 & 7 != 0) goto ucign; else goto ccifQ;
       ucign: // global
           call _ccifP(R1) args: 0, res: 0, upd: 0;
       ccifQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       ccifJ: // global
           I64[Sp - 16] = block_ccieC_info;
           _sccD2::P64 = R1;
           _sccD7::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sccD7::P64;
           P64[Sp] = _sccD2::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucigo; else goto ccieD;
       ucigo: // global
           call _ccieC(R1) args: 0, res: 0, upd: 0;
       ccieD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cciew_info" {
     block_cciew_info:
         const _cciew;
         const 1;
         const 236223201310;
         const SccKB_srt+928;
 },
 _ccifP() //  [R1]
         { []
         }
     {offset
       ccifP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccifY; else goto ccifX;
       ccifY: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccifX: // global
           _sccD4::P64 = P64[R1 + 7];
           _sccD5::P64 = P64[R1 + 15];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = _sccD4::P64;
           P64[Hp - 8] = _sccD5::P64;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccifP_info" {
     block_ccifP_info:
         const _ccifP;
         const 1;
         const 30;
 },
 _ccieC() //  [R1]
         { []
         }
     {offset
       ccieC: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccig2; else goto ccig1;
       ccig2: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccig1: // global
           if (I64[R1 + 7] == 42) goto ccigl; else goto ccig4;
       ccigl: // global
           I64[Hp - 96] = ds7_sccDp_info;
           P64[Hp - 80] = P64[Sp + 24];
           I64[Hp - 72] = stg_sel_0_upd_info;
           _ccifu::P64 = Hp - 96;
           P64[Hp - 56] = _ccifu::P64;
           I64[Hp - 48] = stg_sel_1_upd_info;
           P64[Hp - 32] = _ccifu::P64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 72;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccig4: // global
           Hp = Hp - 104;
           _sccD2::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_ccieJ_info;
           R3 = _sccD2::P64;
           R2 = GHC.Unicode.isDigit_closure+1;
           Sp = Sp + 16;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccieC_info" {
     block_ccieC_info:
         const _ccieC;
         const 3;
         const 98784247838;
         const SccKB_srt+928;
 },
 _ccieJ() //  [R1, R2]
         { []
         }
     {offset
       ccieJ: // global
           I64[Sp - 8] = block_ccieL_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucigp; else goto ccieM;
       ucigp: // global
           call _ccieL(R1) args: 0, res: 0, upd: 0;
       ccieM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccieJ_info" {
     block_ccieJ_info:
         const _ccieJ;
         const 1;
         const 30064771102;
         const SccKB_srt+928;
 },
 _ccieL() //  [R1]
         { []
         }
     {offset
       ccieL: // global
           _sccyi::P64 = P64[Sp + 16];
           _sccDd::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccig9; else goto ccige;
       ccig9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccigc; else goto ccigb;
       ccigc: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccigb: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = lvl46_rcccM_closure+1;
           P64[Hp - 8] = _sccDd::P64;
           P64[Hp] = _sccyi::P64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccige: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccigh; else goto ccigg;
       ccigh: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccigg: // global
           I64[Hp - 48] = sat_sccDo_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = _sccDd::P64;
           P64[Hp] = _sccyi::P64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccieL_info" {
     block_ccieL_info:
         const _ccieL;
         const 2;
         const 30064771102;
         const SccKB_srt+928;
 },
 ds4_sccDB_entry() //  [R1]
         { []
         }
     {offset
       ccigy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccigz; else goto ccigA;
       ccigz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccigA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccigv_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucigY; else goto ccigw;
       ucigY: // global
           call _ccigv(R1) args: 0, res: 0, upd: 0;
       ccigw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_sccDB_info" {
     ds4_sccDB_info:
         const ds4_sccDB_entry;
         const 1;
         const 4294967312;
         const SccKB_srt+952;
 },
 _ccigv() //  [R1]
         { []
         }
     {offset
       ccigv: // global
           I64[Sp - 8] = block_ccigD_info;
           _sccDE::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp] = _sccDE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucigX; else goto ccigF;
       ucigX: // global
           call _ccigD(R1) args: 0, res: 0, upd: 0;
       ccigF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccigv_info" {
     block_ccigv_info:
         const _ccigv;
         const 0;
         const 4294967326;
         const SccKB_srt+952;
 },
 _ccigD() //  [R1]
         { []
         }
     {offset
       ccigD: // global
           if (R1 & 7 == 1) goto ccigL; else goto ccigQ;
       ccigL: // global
           R1 = Text.Printf.errorMissingArgument_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       ccigQ: // global
           I64[Sp] = block_ccigO_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucigZ; else goto ccigR;
       ucigZ: // global
           call _ccigO(R1) args: 0, res: 0, upd: 0;
       ccigR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccigD_info" {
     block_ccigD_info:
         const _ccigD;
         const 1;
         const 4294967326;
         const SccKB_srt+952;
 },
 _ccigO() //  [R1]
         { []
         }
     {offset
       ccigO: // global
           R2 = P64[Sp + 8];
           R1 = P64[R1 + 7];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccigO_info" {
     block_ccigO_info:
         const _ccigO;
         const 1;
         const 30;
 },
 sat_sccDU_entry() //  [R1]
         { []
         }
     {offset
       ccihf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccihg; else goto ccihh;
       ccihg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccihh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccih8_info;
           _sccye::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sccye::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucihC; else goto ccih9;
       ucihC: // global
           call _ccih8(R1) args: 0, res: 0, upd: 0;
       ccih9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccDU_info" {
     sat_sccDU_info:
         const sat_sccDU_entry;
         const 2;
         const 18;
 },
 _ccih8() //  [R1]
         { []
         }
     {offset
       ccih8: // global
           if (R1 & 7 == 1) goto ccihc; else goto ccihd;
       ccihc: // global
           _sccye::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccihk_info;
           R1 = _sccye::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucihB; else goto ccihm;
       ucihB: // global
           call _ccihk(R1) args: 0, res: 0, upd: 0;
       ccihm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       ccihd: // global
           R1 = lvl47_rcccN_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccih8_info" {
     block_ccih8_info:
         const _ccih8;
         const 1;
         const 30;
 },
 _ccihk() //  [R1]
         { []
         }
     {offset
       ccihk: // global
           if (R1 & 7 == 1) goto ccihs; else goto ccihw;
       ccihs: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccihw: // global
           R1 = lvl48_rcccO_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccihk_info" {
     block_ccihk_info:
         const _ccihk;
         const 0;
         const 30;
 },
 section ""relreadonly" . uciiq_srtd" {
     uciiq_srtd:
         const SccKB_srt+448;
         const 69;
         const 17293822569102704641;
         const 31;
 },
 $wgetSpecs_rcccV_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccihH: // global
           if ((Sp + -56) < SpLim) (likely: False) goto ccihI; else goto uciic;
       ccihI: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wgetSpecs_rcccV_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       uciic: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call _cci19() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wgetSpecs_rcccV_info" {
     $wgetSpecs_rcccV_info:
         const $wgetSpecs_rcccV_entry;
         const 0;
         const 18446744069414584334;
         const 25769803802;
         const uciiq_srtd;
 },
 _cci19() //  []
         { []
         }
     {offset
       cci19: // global
           I64[Sp - 8] = block_cci1c_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uciii; else goto cci1d;
       uciii: // global
           call _cci1c(R1) args: 0, res: 0, upd: 0;
       cci1d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . uciir_srtd" {
     uciir_srtd:
         const SccKB_srt+448;
         const 68;
         const 17293822569102704641;
         const 15;
 },
 _cci1c() //  [R1]
         { []
         }
     {offset
       cci1c: // global
           if (R1 & 7 == 1) goto ccihE; else goto ccihF;
       ccihE: // global
           R1 = Text.Printf.errorShortFormat_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       ccihF: // global
           I64[Sp - 8] = block_cci1i_info;
           _sccyj::P64 = R1;
           _sccym::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sccym::P64;
           P64[Sp + 40] = _sccyj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uciij; else goto cci1j;
       uciij: // global
           call _cci1i(R1) args: 0, res: 0, upd: 0;
       cci1j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cci1c_info" {
     block_cci1c_info:
         const _cci1c;
         const 1030;
         const 18446744069414584350;
         const uciir_srtd;
 },
 section ""relreadonly" . uciis_srtd" {
     uciis_srtd:
         const SccKB_srt+448;
         const 68;
         const 17293822569102704641;
         const 15;
 },
 _cci1i() //  [R1]
         { []
         }
     {offset
       cci1i: // global
           Hp = Hp + 344;
           if (Hp > HpLim) (likely: False) goto ccihP; else goto ccihO;
       ccihP: // global
           HpAlloc = 344;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccihO: // global
           _sccyd::P64 = P64[Sp + 16];
           _sccye::P64 = P64[Sp + 24];
           _sccyf::P64 = P64[Sp + 32];
           _sccyg::P64 = P64[Sp + 40];
           _sccyi::P64 = P64[Sp + 56];
           _sccyj::P64 = P64[Sp + 48];
           _sccyp::I64 = I64[R1 + 7];
           if (_sccyp::I64 >= 49) goto ccihX; else goto uciia;
       uciia: // global
           if (_sccyp::I64 < 32) goto ccihX; else goto uciib;
       uciib: // global
           _sccym::P64 = P64[Sp + 8];
           switch [32 .. 48] _sccyp::I64 {
               case 32 : goto ccihY;
               case 35 : goto ccihZ;
               case 42 : goto ccii2;
               case 43 : goto ccii3;
               case 45 : goto ccii4;
               case 46 : goto ccii8;
               case 48 : goto ccii9;
               default: {goto ccihX;}
           }
       ccii9: // global
           Hp = Hp - 344;
           P64[Sp + 16] = _sccyd::P64;
           P64[Sp + 24] = GHC.Types.True_closure+2;
           P64[Sp + 32] = _sccyf::P64;
           P64[Sp + 40] = _sccyg::P64;
           P64[Sp + 48] = _sccym::P64;
           P64[Sp + 56] = _sccyi::P64;
           Sp = Sp + 16;
           goto uciio;
       ccii8: // global
           I64[Hp - 336] = ds3_sccD1_info;
           P64[Hp - 320] = _sccyi::P64;
           P64[Hp - 312] = _sccym::P64;
           I64[Hp - 304] = ds4_sccDB_info;
           _ccies::P64 = Hp - 336;
           P64[Hp - 288] = _ccies::P64;
           I64[Hp - 280] = stg_sel_2_upd_info;
           P64[Hp - 264] = _ccies::P64;
           I64[Hp - 256] = stg_sel_2_upd_info;
           _ccigr::P64 = Hp - 304;
           P64[Hp - 240] = _ccigr::P64;
           I64[Hp - 232] = stg_sel_1_upd_info;
           P64[Hp - 216] = _ccigr::P64;
           I64[Hp - 208] = stg_sel_0_upd_info;
           P64[Hp - 192] = _ccigr::P64;
           I64[Hp - 184] = sat_sccDU_info;
           P64[Hp - 168] = _sccyd::P64;
           P64[Hp - 160] = _sccye::P64;
           I64[Hp - 152] = stg_sel_0_upd_info;
           P64[Hp - 136] = _ccies::P64;
           I64[Hp - 128] = GHC.Base.Just_con_info;
           P64[Hp - 120] = Hp - 152;
           I64[Hp - 112] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 104] = GHC.Base.Nothing_closure+1;
           P64[Hp - 96] = Hp - 126;
           P64[Hp - 88] = Hp - 184;
           P64[Hp - 80] = _sccyf::P64;
           P64[Hp - 72] = _sccyg::P64;
           P64[Hp - 64] = Hp - 208;
           P64[Hp - 56] = Hp - 232;
           _ccih0::P64 = Hp - 280;
           _ccih1::P64 = Hp - 256;
           _ccii7::P64 = Hp - 111;
           Hp = Hp - 56;
           R3 = _ccih0::P64;
           R2 = _ccih1::P64;
           R1 = _ccii7::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccii4: // global
           Hp = Hp - 344;
           P64[Sp + 16] = GHC.Types.True_closure+2;
           P64[Sp + 24] = _sccye::P64;
           P64[Sp + 32] = _sccyf::P64;
           P64[Sp + 40] = _sccyg::P64;
           P64[Sp + 48] = _sccym::P64;
           P64[Sp + 56] = _sccyi::P64;
           Sp = Sp + 16;
           goto uciio;
       ccii3: // global
           Hp = Hp - 344;
           P64[Sp + 16] = _sccyd::P64;
           P64[Sp + 24] = _sccye::P64;
           P64[Sp + 32] = lvl50_rcccQ_closure+2;
           P64[Sp + 40] = _sccyg::P64;
           P64[Sp + 48] = _sccym::P64;
           P64[Sp + 56] = _sccyi::P64;
           Sp = Sp + 16;
           goto uciio;
       ccii2: // global
           I64[Hp - 336] = ds3_sccAX_info;
           P64[Hp - 320] = _sccyi::P64;
           I64[Hp - 312] = ds4_sccB1_info;
           P64[Hp - 296] = _sccym::P64;
           _cci9i::P64 = Hp - 336;
           P64[Hp - 288] = _cci9i::P64;
           I64[Hp - 280] = ds5_sccC8_info;
           _cci9v::P64 = Hp - 312;
           P64[Hp - 264] = _cci9v::P64;
           I64[Hp - 256] = stg_sel_2_upd_info;
           P64[Hp - 240] = _cci9v::P64;
           I64[Hp - 232] = stg_sel_2_upd_info;
           _ccich::P64 = Hp - 280;
           P64[Hp - 216] = _ccich::P64;
           I64[Hp - 208] = stg_sel_1_upd_info;
           P64[Hp - 192] = _ccich::P64;
           I64[Hp - 184] = stg_sel_0_upd_info;
           P64[Hp - 168] = _ccich::P64;
           I64[Hp - 160] = sat_sccCF_info;
           P64[Hp - 144] = _sccyd::P64;
           P64[Hp - 136] = _sccye::P64;
           P64[Hp - 128] = _cci9i::P64;
           I64[Hp - 120] = stg_sel_0_upd_info;
           P64[Hp - 104] = _cci9v::P64;
           I64[Hp - 96] = sat_sccCq_info;
           P64[Hp - 80] = _cci9i::P64;
           I64[Hp - 72] = GHC.Base.Just_con_info;
           P64[Hp - 64] = Hp - 96;
           I64[Hp - 56] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 48] = Hp - 70;
           P64[Hp - 40] = Hp - 120;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = _sccyf::P64;
           P64[Hp - 16] = _sccyg::P64;
           P64[Hp - 8] = Hp - 184;
           P64[Hp] = Hp - 208;
           R3 = Hp - 256;
           R2 = Hp - 232;
           R1 = Hp - 55;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccihZ: // global
           Hp = Hp - 344;
           P64[Sp + 16] = _sccyd::P64;
           P64[Sp + 24] = _sccye::P64;
           P64[Sp + 32] = _sccyf::P64;
           P64[Sp + 40] = GHC.Types.True_closure+2;
           P64[Sp + 48] = _sccym::P64;
           P64[Sp + 56] = _sccyi::P64;
           Sp = Sp + 16;
           goto uciio;
       ccihY: // global
           I64[Hp - 336] = sat_sccAW_info;
           P64[Hp - 320] = _sccyf::P64;
           _cci1q::P64 = Hp - 336;
           Hp = Hp - 320;
           P64[Sp + 16] = _sccyd::P64;
           P64[Sp + 24] = _sccye::P64;
           P64[Sp + 32] = _cci1q::P64;
           P64[Sp + 40] = _sccyg::P64;
           P64[Sp + 48] = _sccym::P64;
           P64[Sp + 56] = _sccyi::P64;
           Sp = Sp + 16;
           goto uciio;
       uciio: // global
           call _cci19() args: 0, res: 0, upd: 0;
       ccihX: // global
           if ((_sccyp::I64 + -48) > 9) goto ccihS; else goto ccihV;
       ccihS: // global
           I64[Hp - 336] = ds3_sccyu_info;
           P64[Hp - 320] = _sccyi::P64;
           P64[Hp - 312] = _sccyj::P64;
           I64[Hp - 304] = stg_sel_2_upd_info;
           _cci1D::P64 = Hp - 336;
           P64[Hp - 288] = _cci1D::P64;
           I64[Hp - 280] = stg_sel_1_upd_info;
           P64[Hp - 264] = _cci1D::P64;
           I64[Hp - 256] = stg_sel_0_upd_info;
           P64[Hp - 240] = _cci1D::P64;
           I64[Hp - 232] = sat_sccyD_info;
           P64[Hp - 216] = _sccyd::P64;
           P64[Hp - 208] = _sccye::P64;
           I64[Hp - 200] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 192] = GHC.Base.Nothing_closure+1;
           P64[Hp - 184] = GHC.Base.Nothing_closure+1;
           P64[Hp - 176] = Hp - 232;
           P64[Hp - 168] = _sccyf::P64;
           P64[Hp - 160] = _sccyg::P64;
           P64[Hp - 152] = Hp - 256;
           P64[Hp - 144] = Hp - 280;
           _cci25::P64 = Hp - 304;
           _ccihQ::P64 = Hp - 199;
           Hp = Hp - 144;
           R3 = _sccyi::P64;
           R2 = _cci25::P64;
           R1 = _ccihQ::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccihV: // global
           I64[Hp - 336] = ds3_sccyU_info;
           P64[Hp - 320] = _sccyj::P64;
           I64[Hp - 312] = ds4_sccz9_info;
           P64[Hp - 296] = _sccyi::P64;
           _cci2I::P64 = Hp - 336;
           P64[Hp - 288] = _cci2I::P64;
           I64[Hp - 280] = ds5_sccA0_info;
           _cci3O::P64 = Hp - 312;
           P64[Hp - 264] = _cci3O::P64;
           I64[Hp - 256] = stg_sel_2_upd_info;
           P64[Hp - 240] = _cci3O::P64;
           I64[Hp - 232] = stg_sel_2_upd_info;
           _cci6w::P64 = Hp - 280;
           P64[Hp - 216] = _cci6w::P64;
           I64[Hp - 208] = stg_sel_1_upd_info;
           P64[Hp - 192] = _cci6w::P64;
           I64[Hp - 184] = stg_sel_0_upd_info;
           P64[Hp - 168] = _cci6w::P64;
           I64[Hp - 160] = sat_sccAx_info;
           P64[Hp - 144] = _sccyd::P64;
           P64[Hp - 136] = _sccye::P64;
           P64[Hp - 128] = _cci2I::P64;
           I64[Hp - 120] = stg_sel_0_upd_info;
           P64[Hp - 104] = _cci3O::P64;
           I64[Hp - 96] = sat_sccAi_info;
           P64[Hp - 80] = _cci2I::P64;
           I64[Hp - 72] = GHC.Base.Just_con_info;
           P64[Hp - 64] = Hp - 96;
           I64[Hp - 56] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 48] = Hp - 70;
           P64[Hp - 40] = Hp - 120;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = _sccyf::P64;
           P64[Hp - 16] = _sccyg::P64;
           P64[Hp - 8] = Hp - 184;
           P64[Hp] = Hp - 208;
           R3 = Hp - 256;
           R2 = Hp - 232;
           R1 = Hp - 55;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cci1i_info" {
     block_cci1i_info:
         const _cci1i;
         const 7;
         const 18446744069414584350;
         const uciis_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.780797543 UTC

[section ""data" . f_rcccW_closure" {
     f_rcccW_closure:
         const GHC.Types.C#_con_info;
         const 37;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.789084974 UTC

[section ""data" . Text.Printf.uprintfs_closure" {
     Text.Printf.uprintfs_closure:
         const Text.Printf.uprintfs_info;
         const 0;
 },
 sat_sccEt_entry() //  [R1]
         { []
         }
     {offset
       ccirT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccirU; else goto ccirV;
       ccirU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccirV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 16;
           call Text.Printf.uprintfs_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccEt_info" {
     sat_sccEt_info:
         const sat_sccEt_entry;
         const 3;
         const 4294967311;
         const SccKB_srt+1000;
 },
 sat_sccEL_entry() //  [R1]
         { []
         }
     {offset
       ccisp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccisq; else goto ccisr;
       ccisq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccisr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.Printf.uprintfs_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccEL_info" {
     sat_sccEL_info:
         const sat_sccEL_entry;
         const 3;
         const 4294967311;
         const SccKB_srt+1000;
 },
 sat_sccES_entry() //  [R1]
         { []
         }
     {offset
       ccisK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccisL; else goto ccisM;
       ccisL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccisM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 16;
           call Text.Printf.uprintfs_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccES_info" {
     sat_sccES_info:
         const sat_sccES_entry;
         const 3;
         const 4294967311;
         const SccKB_srt+1000;
 },
 section ""relreadonly" . uciu4_srtd" {
     uciu4_srtd:
         const SccKB_srt+448;
         const 70;
         const 9223372036854775809;
         const 48;
 },
 Text.Printf.uprintfs_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       ccisR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccisS; else goto ccisT;
       ccisS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.uprintfs_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccisT: // global
           I64[Sp - 24] = block_ccirC_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uciu2; else goto ccirD;
       uciu2: // global
           call _ccirC(R1) args: 0, res: 0, upd: 0;
       ccirD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.uprintfs_info" {
     Text.Printf.uprintfs_info:
         const Text.Printf.uprintfs_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const uciu4_srtd;
 },
 section ""relreadonly" . uciu5_srtd" {
     uciu5_srtd:
         const SccKB_srt+448;
         const 70;
         const 9223372036854775809;
         const 48;
 },
 _ccirC() //  [R1]
         { []
         }
     {offset
       ccirC: // global
           if (R1 & 7 == 1) goto ccisO; else goto ccisP;
       ccisO: // global
           _sccEh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccisV_info;
           R1 = _sccEh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucitS; else goto ccisX;
       ucitS: // global
           call _ccisV(R1) args: 0, res: 0, upd: 0;
       ccisX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccisP: // global
           I64[Sp - 8] = block_ccirI_info;
           _sccEp::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sccEp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucitT; else goto ccirJ;
       ucitT: // global
           call _ccirI(R1) args: 0, res: 0, upd: 0;
       ccirJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccirC_info" {
     block_ccirC_info:
         const _ccirC;
         const 2;
         const 18446744069414584350;
         const uciu5_srtd;
 },
 _ccisV() //  [R1]
         { []
         }
     {offset
       ccisV: // global
           if (R1 & 7 == 1) goto ccit3; else goto ccit7;
       ccit3: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccit7: // global
           R1 = Text.Printf.errorShortFormat_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccisV_info" {
     block_ccisV_info:
         const _ccisV;
         const 1;
         const 4294967326;
         const SccKB_srt+1008;
 },
 _ccirI() //  [R1]
         { []
         }
     {offset
       ccirI: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccitb; else goto ccita;
       ccitb: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccita: // global
           _sccEp::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 37) goto ccitw; else goto ccite;
       ccitw: // global
           Hp = Hp - 64;
           I64[Sp] = block_cciss_info;
           R1 = _sccEp::P64;
           if (R1 & 7 != 0) goto ucitU; else goto ccist;
       ucitU: // global
           call _cciss(R1) args: 0, res: 0, upd: 0;
       ccist: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccite: // global
           I64[Hp - 56] = sat_sccEt_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = _sccEp::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccirI_info" {
     block_ccirI_info:
         const _ccirI;
         const 3;
         const 416611827742;
         const SccKB_srt+952;
 },
 _cciss() //  [R1]
         { []
         }
     {offset
       cciss: // global
           if (R1 & 7 == 1) goto ucitO; else goto ccitC;
       ucitO: // global
           Sp = Sp + 8;
           call _sccEu() args: 0, res: 0, upd: 0;
       ccitC: // global
           I64[Sp - 8] = block_ccisy_info;
           _sccEO::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sccEO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucitZ; else goto ccisz;
       ucitZ: // global
           call _ccisy(R1) args: 0, res: 0, upd: 0;
       ccisz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cciss_info" {
     block_cciss_info:
         const _cciss;
         const 3;
         const 416611827742;
         const SccKB_srt+952;
 },
 _ccisy() //  [R1]
         { []
         }
     {offset
       ccisy: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccitF; else goto ccitE;
       ccitF: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccitE: // global
           if (I64[R1 + 7] == 37) goto ccitJ; else goto ccitH;
       ccitJ: // global
           I64[Hp - 56] = sat_sccES_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = f_rcccW_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccitH: // global
           Hp = Hp - 64;
           Sp = Sp + 16;
           call _sccEu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccisy_info" {
     block_ccisy_info:
         const _ccisy;
         const 4;
         const 416611827742;
         const SccKB_srt+952;
 },
 _sccEu() //  []
         { []
         }
     {offset
       sccEu: // global
           I64[Sp - 8] = block_ccis2_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uciu3; else goto ccis3;
       uciu3: // global
           call _ccis2(R1) args: 0, res: 0, upd: 0;
       ccis3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccis2() //  [R1]
         { []
         }
     {offset
       ccis2: // global
           if (R1 & 7 == 1) goto ucitQ; else goto ccitl;
       ucitQ: // global
           Sp = Sp + 32;
           call _ccitq() args: 0, res: 0, upd: 0;
       ccitl: // global
           I64[Sp + 16] = block_ccis8_info;
           R6 = P64[Sp + 8];
           R5 = GHC.Types.False_closure+1;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = GHC.Types.False_closure+1;
           R2 = GHC.Types.False_closure+1;
           P64[Sp + 8] = R1;
           Sp = Sp + 8;
           call $wgetSpecs_rcccV_entry(R6,
                                       R5,
                                       R4,
                                       R3,
                                       R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccis2_info" {
     block_ccis2_info:
         const _ccis2;
         const 131;
         const 416611827742;
         const SccKB_srt+952;
 },
 _ccis8() //  [R1, R2, R3]
         { []
         }
     {offset
       ccis8: // global
           I64[Sp - 16] = block_ccisa_info;
           _sccEB::P64 = R1;
           R1 = R3;
           P64[Sp - 8] = R2;
           P64[Sp] = _sccEB::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucitW; else goto ccisb;
       ucitW: // global
           call _ccisa(R1) args: 0, res: 0, upd: 0;
       ccisb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccis8_info" {
     block_ccis8_info:
         const _ccis8;
         const 1;
         const 279172874270;
         const SccKB_srt+952;
 },
 _ccisa() //  [R1]
         { []
         }
     {offset
       ccisa: // global
           if (R1 & 7 == 1) goto ucitR; else goto ccits;
       ucitR: // global
           Sp = Sp + 32;
           call _ccitq() args: 0, res: 0, upd: 0;
       ccits: // global
           I64[Sp - 8] = block_ccisg_info;
           _sccEH::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sccEH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucitX; else goto ccish;
       ucitX: // global
           call _ccisg(R1) args: 0, res: 0, upd: 0;
       ccish: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccisa_info" {
     block_ccisa_info:
         const _ccisa;
         const 3;
         const 279172874270;
         const SccKB_srt+952;
 },
 _ccitq() //  []
         { []
         }
     {offset
       ccitq: // global
           R1 = Text.Printf.errorMissingArgument_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccisg() //  [R1]
         { []
         }
     {offset
       ccisg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccitv; else goto ccitu;
       ccitv: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccitu: // global
           _sccEK::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sccEL_info;
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 32;
           R2 = P64[Sp + 24];
           R1 = _sccEK::P64;
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccisg_info" {
     block_ccisg_info:
         const _ccisg;
         const 4;
         const 4294967326;
         const SccKB_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.818499014 UTC

[section ""data" . Text.Printf.$fPrintfTypeIO_$cspr_closure" {
     Text.Printf.$fPrintfTypeIO_$cspr_closure:
         const Text.Printf.$fPrintfTypeIO_$cspr_info;
         const 0;
 },
 sat_sccEW_entry() //  [R1]
         { []
         }
     {offset
       ccivE: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccEW_info" {
     sat_sccEW_info:
         const sat_sccEW_entry;
         const 1;
         const 16;
 },
 sat_sccEX_entry() //  [R1]
         { []
         }
     {offset
       ccivH: // global
           _sccEX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccivI; else goto ccivJ;
       ccivJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccivL; else goto ccivK;
       ccivL: // global
           HpAlloc = 24;
           goto ccivI;
       ccivI: // global
           R1 = _sccEX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccivK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sccEX::P64;
           _sccEU::P64 = P64[_sccEX::P64 + 16];
           _sccEV::P64 = P64[_sccEX::P64 + 24];
           I64[Hp - 16] = sat_sccEW_info;
           P64[Hp] = _sccEV::P64;
           R4 = GHC.Types.[]_closure+1;
           R3 = Hp - 16;
           R2 = _sccEU::P64;
           Sp = Sp - 16;
           call Text.Printf.uprintfs_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccEX_info" {
     sat_sccEX_info:
         const sat_sccEX_entry;
         const 2;
         const 4294967314;
         const SccKB_srt+1000;
 },
 Text.Printf.$fPrintfTypeIO_$cspr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       ccivM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccivN; else goto ccivO;
       ccivN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfTypeIO_$cspr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccivO: // global
           I64[Sp - 24] = block_ccivu_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfTypeIO_$cspr_info" {
     Text.Printf.$fPrintfTypeIO_$cspr_info:
         const Text.Printf.$fPrintfTypeIO_$cspr_entry;
         const 0;
         const 124554051598;
         const 12884901911;
         const SccKB_srt+1000;
 },
 _ccivu() //  []
         { []
         }
     {offset
       ccivu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccivR; else goto ccivQ;
       ccivR: // global
           HpAlloc = 32;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       ccivQ: // global
           I64[Hp - 24] = sat_sccEX_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R4 = GHC.Types.False_closure+1;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.FD.stdout_closure;
           R1 = GHC.IO.Handle.Text.hPutStr'_closure+4;
           Sp = Sp + 24;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccivu_info" {
     block_ccivu_info:
         const _ccivu;
         const 2;
         const 55834574878;
         const SccKB_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.827498144 UTC

[section ""data" . Text.Printf.$fPrintfTypeIO_closure" {
     Text.Printf.$fPrintfTypeIO_closure:
         const Text.Printf.$fPrintfTypeIO_info;
         const 0;
 },
 Text.Printf.$fPrintfTypeIO_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cciwd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Printf.$fPrintfTypeIO_$cspr_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfTypeIO_info" {
     Text.Printf.$fPrintfTypeIO_info:
         const Text.Printf.$fPrintfTypeIO_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SccKB_srt+1032;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.832215198 UTC

[section ""data" . Text.Printf.$fPrintfType[]_$cspr_closure" {
     Text.Printf.$fPrintfType[]_$cspr_closure:
         const Text.Printf.$fPrintfType[]_$cspr_info;
         const 0;
 },
 sat_sccF2_entry() //  [R1]
         { []
         }
     {offset
       cciws: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccF2_info" {
     sat_sccF2_info:
         const sat_sccF2_entry;
         const 1;
         const 16;
 },
 sat_sccF1_entry() //  [R1]
         { []
         }
     {offset
       cciwD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cciwE; else goto cciwF;
       cciwE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cciwF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Printf.fromChar_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccF1_info" {
     sat_sccF1_info:
         const sat_sccF1_entry;
         const 1;
         const 16;
 },
 Text.Printf.$fPrintfType[]_$cspr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cciwG: // global
           _sccF0::P64 = R4;
           _sccEZ::P64 = R3;
           _sccEY::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cciwH; else goto cciwI;
       cciwI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cciwK; else goto cciwJ;
       cciwK: // global
           HpAlloc = 24;
           goto cciwH;
       cciwH: // global
           R4 = _sccF0::P64;
           R3 = _sccEZ::P64;
           R2 = _sccEY::P64;
           R1 = Text.Printf.$fPrintfType[]_$cspr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cciwJ: // global
           I64[Hp - 16] = sat_sccF2_info;
           P64[Hp] = _sccF0::P64;
           I64[Sp - 16] = block_cciwv_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = Hp - 16;
           R2 = _sccEZ::P64;
           P64[Sp - 8] = _sccEY::P64;
           Sp = Sp - 16;
           call Text.Printf.uprintfs_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfType[]_$cspr_info" {
     Text.Printf.$fPrintfType[]_$cspr_info:
         const Text.Printf.$fPrintfType[]_$cspr_entry;
         const 0;
         const 141733920782;
         const 12884901911;
         const SccKB_srt+1000;
 },
 _cciwv() //  [R1]
         { []
         }
     {offset
       cciwv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cciwN; else goto cciwM;
       cciwN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cciwM: // global
           I64[Hp - 16] = sat_sccF1_info;
           P64[Hp] = P64[Sp + 8];
           R3 = R1;
           R2 = Hp - 16;
           Sp = Sp + 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cciwv_info" {
     block_cciwv_info:
         const _cciwv;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.841801042 UTC

[section ""data" . Text.Printf.$fPrintfType[]_closure" {
     Text.Printf.$fPrintfType[]_closure:
         const Text.Printf.$fPrintfType[]_info;
         const 0;
 },
 Text.Printf.$fPrintfType[]_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       ccix8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Printf.$fPrintfType[]_$cspr_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfType[]_info" {
     Text.Printf.$fPrintfType[]_info:
         const Text.Printf.$fPrintfType[]_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SccKB_srt+1040;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.846560979 UTC

[section ""data" . Text.Printf.$fHPrintfTypeIO_$chspr_closure" {
     Text.Printf.$fHPrintfTypeIO_$chspr_closure:
         const Text.Printf.$fHPrintfTypeIO_$chspr_info;
         const 0;
 },
 sat_sccF8_entry() //  [R1]
         { []
         }
     {offset
       ccixt: // global
           R2 = P64[R1 + 16];
           call GHC.List.reverse_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sccF8_info" {
     sat_sccF8_info:
         const sat_sccF8_entry;
         const 1;
         const 16;
 },
 sat_sccF9_entry() //  [R1]
         { []
         }
     {offset
       ccixw: // global
           _sccF9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccixx; else goto ccixy;
       ccixy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccixA; else goto ccixz;
       ccixA: // global
           HpAlloc = 24;
           goto ccixx;
       ccixx: // global
           R1 = _sccF9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccixz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sccF9::P64;
           _sccF6::P64 = P64[_sccF9::P64 + 16];
           _sccF7::P64 = P64[_sccF9::P64 + 24];
           I64[Hp - 16] = sat_sccF8_info;
           P64[Hp] = _sccF7::P64;
           R4 = GHC.Types.[]_closure+1;
           R3 = Hp - 16;
           R2 = _sccF6::P64;
           Sp = Sp - 16;
           call Text.Printf.uprintfs_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sccF9_info" {
     sat_sccF9_info:
         const sat_sccF9_entry;
         const 2;
         const 4294967314;
         const SccKB_srt+1000;
 },
 Text.Printf.$fHPrintfTypeIO_$chspr_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       ccixB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccixC; else goto ccixD;
       ccixC: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fHPrintfTypeIO_$chspr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccixD: // global
           I64[Sp - 32] = block_ccixj_info;
           R2 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fHPrintfTypeIO_$chspr_info" {
     Text.Printf.$fHPrintfTypeIO_$chspr_info:
         const Text.Printf.$fHPrintfTypeIO_$chspr_entry;
         const 0;
         const 313532612622;
         const 17179869208;
         const SccKB_srt+1000;
 },
 _ccixj() //  []
         { []
         }
     {offset
       ccixj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccixG; else goto ccixF;
       ccixG: // global
           HpAlloc = 32;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       ccixF: // global
           I64[Hp - 24] = sat_sccF9_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R4 = GHC.Types.False_closure+1;
           R3 = Hp - 24;
           R2 = P64[Sp + 8];
           R1 = GHC.IO.Handle.Text.hPutStr'_closure+4;
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccixj_info" {
     block_ccixj_info:
         const _ccixj;
         const 3;
         const 38654705694;
         const SccKB_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.85539555 UTC

[section ""data" . Text.Printf.$fHPrintfTypeIO_closure" {
     Text.Printf.$fHPrintfTypeIO_closure:
         const Text.Printf.$fHPrintfTypeIO_info;
         const 0;
 },
 Text.Printf.$fHPrintfTypeIO_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cciy2: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Printf.$fHPrintfTypeIO_$chspr_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fHPrintfTypeIO_info" {
     Text.Printf.$fHPrintfTypeIO_info:
         const Text.Printf.$fHPrintfTypeIO_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SccKB_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.85896923 UTC

[section ""data" . Text.Printf.FormatParse_closure" {
     Text.Printf.FormatParse_closure:
         const Text.Printf.FormatParse_info;
 },
 Text.Printf.FormatParse_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cciye: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cciyi; else goto cciyh;
       cciyi: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.FormatParse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cciyh: // global
           I64[Hp - 24] = Text.Printf.FormatParse_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.FormatParse_info" {
     Text.Printf.FormatParse_info:
         const Text.Printf.FormatParse_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.863528806 UTC

[section ""data" . Text.Printf.FieldFormat_closure" {
     Text.Printf.FieldFormat_closure:
         const Text.Printf.FieldFormat_info;
 },
 Text.Printf.FieldFormat_slow() //  [R1]
         { []
         }
     {offset
       cciyp: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.FieldFormat_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 24, res: 0, upd: 8;
     }
 },
 Text.Printf.FieldFormat_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cciyu: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cciyy; else goto cciyx;
       cciyy: // global
           HpAlloc = 64;
           R1 = Text.Printf.FieldFormat_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cciyx: // global
           I64[Hp - 56] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.FieldFormat_info" {
     Text.Printf.FieldFormat_info:
         const Text.Printf.FieldFormat_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Text.Printf.FieldFormat_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.867998554 UTC

[section ""data" . Text.Printf.SignPlus_closure" {
     Text.Printf.SignPlus_closure:
         const Text.Printf.SignPlus_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.869789745 UTC

[section ""data" . Text.Printf.SignSpace_closure" {
     Text.Printf.SignSpace_closure:
         const Text.Printf.SignSpace_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.871981935 UTC

[section ""data" . Text.Printf.LeftAdjust_closure" {
     Text.Printf.LeftAdjust_closure:
         const Text.Printf.LeftAdjust_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.874003978 UTC

[section ""data" . Text.Printf.ZeroPad_closure" {
     Text.Printf.ZeroPad_closure:
         const Text.Printf.ZeroPad_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.876275114 UTC

[section ""data" . Text.Printf.C:IsChar_closure" {
     Text.Printf.C:IsChar_closure:
         const Text.Printf.C:IsChar_info;
 },
 Text.Printf.C:IsChar_entry() //  [R2, R3]
         { []
         }
     {offset
       cciyR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cciyV; else goto cciyU;
       cciyV: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.C:IsChar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cciyU: // global
           I64[Hp - 16] = Text.Printf.C:IsChar_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.C:IsChar_info" {
     Text.Printf.C:IsChar_info:
         const Text.Printf.C:IsChar_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.880202844 UTC

[section ""data" . Text.Printf.C:PrintfArg_closure" {
     Text.Printf.C:PrintfArg_closure:
         const Text.Printf.C:PrintfArg_info;
 },
 Text.Printf.C:PrintfArg_entry() //  [R2, R3]
         { []
         }
     {offset
       cciz6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cciza; else goto cciz9;
       cciza: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.C:PrintfArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cciz9: // global
           I64[Hp - 16] = Text.Printf.C:PrintfArg_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.C:PrintfArg_info" {
     Text.Printf.C:PrintfArg_info:
         const Text.Printf.C:PrintfArg_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.883742269 UTC

[section ""cstring" . icfX8_str" {
     icfX8_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,114,105,110,116,102,46,70,111,114,109,97,116,80,97,114,115,101]
 },
 Text.Printf.FormatParse_con_entry() //  [R1]
         { []
         }
     {offset
       ccizg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.FormatParse_con_info" {
     Text.Printf.FormatParse_con_info:
         const Text.Printf.FormatParse_con_entry;
         const 3;
         const 1;
         const icfX8_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.887013704 UTC

[section ""cstring" . icfXa_str" {
     icfXa_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,114,105,110,116,102,46,70,105,101,108,100,70,111,114,109,97,116]
 },
 Text.Printf.FieldFormat_con_entry() //  [R1]
         { []
         }
     {offset
       ccizm: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.FieldFormat_con_info" {
     Text.Printf.FieldFormat_con_info:
         const Text.Printf.FieldFormat_con_entry;
         const 7;
         const 1;
         const icfXa_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.890346904 UTC

[section ""relreadonly" . Text.Printf.FormatSign_closure_tbl" {
     Text.Printf.FormatSign_closure_tbl:
         const Text.Printf.SignPlus_closure+1;
         const Text.Printf.SignSpace_closure+2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.892281485 UTC

[section ""cstring" . icfXc_str" {
     icfXc_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,114,105,110,116,102,46,83,105,103,110,80,108,117,115]
 },
 Text.Printf.SignPlus_con_entry() //  [R1]
         { []
         }
     {offset
       ccizt: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.SignPlus_con_info" {
     Text.Printf.SignPlus_con_info:
         const Text.Printf.SignPlus_con_entry;
         const 4294967296;
         const 3;
         const icfXc_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.895484737 UTC

[section ""cstring" . icfXe_str" {
     icfXe_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,114,105,110,116,102,46,83,105,103,110,83,112,97,99,101]
 },
 Text.Printf.SignSpace_con_entry() //  [R1]
         { []
         }
     {offset
       ccizz: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.SignSpace_con_info" {
     Text.Printf.SignSpace_con_info:
         const Text.Printf.SignSpace_con_entry;
         const 4294967296;
         const 4294967299;
         const icfXe_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.898593531 UTC

[section ""relreadonly" . Text.Printf.FormatAdjustment_closure_tbl" {
     Text.Printf.FormatAdjustment_closure_tbl:
         const Text.Printf.LeftAdjust_closure+1;
         const Text.Printf.ZeroPad_closure+2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.900456865 UTC

[section ""cstring" . icfXg_str" {
     icfXg_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,114,105,110,116,102,46,76,101,102,116,65,100,106,117,115,116]
 },
 Text.Printf.LeftAdjust_con_entry() //  [R1]
         { []
         }
     {offset
       ccizG: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.LeftAdjust_con_info" {
     Text.Printf.LeftAdjust_con_info:
         const Text.Printf.LeftAdjust_con_entry;
         const 4294967296;
         const 3;
         const icfXg_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.904156286 UTC

[section ""cstring" . icfXi_str" {
     icfXi_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,114,105,110,116,102,46,90,101,114,111,80,97,100]
 },
 Text.Printf.ZeroPad_con_entry() //  [R1]
         { []
         }
     {offset
       ccizM: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.ZeroPad_con_info" {
     Text.Printf.ZeroPad_con_info:
         const Text.Printf.ZeroPad_con_entry;
         const 4294967296;
         const 4294967299;
         const icfXi_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.907771825 UTC

[section ""cstring" . icfXk_str" {
     icfXk_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,114,105,110,116,102,46,67,58,73,115,67,104,97,114]
 },
 Text.Printf.C:IsChar_con_entry() //  [R1]
         { []
         }
     {offset
       ccizS: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.C:IsChar_con_info" {
     Text.Printf.C:IsChar_con_info:
         const Text.Printf.C:IsChar_con_entry;
         const 2;
         const 4;
         const icfXk_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.911015364 UTC

[section ""cstring" . icfXm_str" {
     icfXm_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,114,105,110,116,102,46,67,58,80,114,105,110,116,102,65,114,103]
 },
 Text.Printf.C:PrintfArg_con_entry() //  [R1]
         { []
         }
     {offset
       ccizY: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.C:PrintfArg_con_info" {
     Text.Printf.C:PrintfArg_con_info:
         const Text.Printf.C:PrintfArg_con_entry;
         const 2;
         const 4;
         const icfXm_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:06.914833942 UTC

[section ""relreadonly" . SccKB_srt" {
     SccKB_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.Printf.perror_closure;
         const GHC.Show.$wshowLitChar_closure;
         const GHC.Show.$fShowChar1_closure;
         const Text.Printf.$werrorBadFormat_closure;
         const Text.Printf.errorBadFormat_closure;
         const Text.Printf.errorShortFormat_closure;
         const Text.Printf.$dmparseFormat_closure;
         const GHC.Char.$wlvl_closure;
         const GHC.Unicode.toUpper_closure;
         const GHC.Float.$w$sformatRealFloatAlt_closure;
         const Text.Printf.$w$sdfmt_closure;
         const Text.Printf.$fPrintfArgDouble7_closure;
         const Text.Printf.$fPrintfArgDouble8_closure;
         const GHC.Float.$w$sformatRealFloatAlt1_closure;
         const Text.Printf.$w$sdfmt1_closure;
         const Text.Printf.$fPrintfArgFloat1_closure;
         const GHC.Float.formatRealFloatAlt_closure;
         const Text.Printf.$wdfmt_closure;
         const Text.Printf.formatRealFloat1_closure;
         const sat_scchQ_closure;
         const sat_scchS_closure;
         const sat_scchW_closure;
         const sat_scci2_closure;
         const Text.Printf.intModifierMap_closure;
         const Text.Printf.$wfixupMods_closure;
         const Text.Printf.$fPrintfArgInt2_closure;
         const Text.Printf.fixupMods_closure;
         const Text.Printf.$wparseIntFormat_closure;
         const GHC.Err.undefined_closure;
         const lvl18_rccch_closure;
         const Control.Exception.Base.patError_closure;
         const sat_sccjr_closure;
         const GHC.Show.intToDigit_closure;
         const GHC.Show.$fShowInteger_closure;
         const GHC.Real.$fIntegralInteger_closure;
         const Numeric.showIntAtBase_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const Text.Printf.formatChar2_closure;
         const lvl21_rccck_closure;
         const lvl20_rcccj_closure;
         const $wfmtu_rcccl_closure;
         const Text.Printf.errorBadArgument_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const $wfmti_rcccm_closure;
         const Text.Printf.$wadjustSigned_closure;
         const Text.Printf.$fPrintfArgDouble1_closure;
         const Text.Printf.$fPrintfArgDouble3_closure;
         const Text.Printf.$w$sformatRealFloat_closure;
         const Text.Printf.$fPrintfArgDouble_$sformatRealFloat_closure;
         const Text.Printf.$w$sformatRealFloat1_closure;
         const Text.Printf.$fPrintfArgFloat_$sformatRealFloat_closure;
         const Text.Printf.$wformatRealFloat_closure;
         const Text.Printf.formatRealFloat_closure;
         const Text.Printf.$fPrintfArgDouble_$cparseFormat_closure;
         const Text.Printf.errorShortFormat_closure;
         const Text.Printf.$fPrintfArgFloat_$cparseFormat_closure;
         const Text.Printf.$w$sformatString_closure;
         const Text.Printf.$werrorBadFormat_closure;
         const Text.Printf.$wformatString_closure;
         const Text.Printf.formatString_closure;
         const lvl22_rcccn_closure;
         const Text.Printf.$fPrintfArg[]_closure;
         const sat_sccoX_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const sat_sccp0_closure;
         const sat_sccp2_closure;
         const sat_sccp4_closure;
         const GHC.Unicode.toUpper_closure;
         const lvl24_rcccp_closure;
         const lvl38_rcccD_closure;
         const lvl39_rcccE_closure;
         const GHC.Char.$wlvl_closure;
         const lvl32_rcccx_closure;
         const lvl40_rcccF_closure;
         const $wfmtu_rcccl_closure;
         const Text.Printf.formatChar2_closure;
         const lvl35_rcccA_closure;
         const lvl41_rcccG_closure;
         const Text.Printf.$wformatIntegral_closure;
         const lvl30_rcccv_closure;
         const lvl31_rcccw_closure;
         const Text.Printf.formatIntegral_closure;
         const Text.Printf.$wformatChar_closure;
         const Text.Printf.formatChar1_closure;
         const Text.Printf.formatChar_closure;
         const Text.Printf.$fPrintfArgInt2_closure;
         const Text.Printf.$w$sformatInt3_closure;
         const Text.Printf.$fPrintfArgWord64_$sformatInt_closure;
         const Text.Printf.$w$sformatInt2_closure;
         const Text.Printf.$fPrintfArgWord32_$sformatInt_closure;
         const Text.Printf.$w$sformatInt1_closure;
         const Text.Printf.$fPrintfArgWord16_$sformatInt_closure;
         const Text.Printf.$w$sformatInt4_closure;
         const Text.Printf.$fPrintfArgWord8_$sformatInt_closure;
         const Text.Printf.$w$sformatInt_closure;
         const Text.Printf.$fPrintfArgWord_$sformatInt_closure;
         const Text.Printf.$fPrintfArgInt1_closure;
         const Text.Printf.$fPrintfArgInt64_$sformatInt_closure;
         const Text.Printf.$fPrintfArgInt4_closure;
         const Text.Printf.$fPrintfArgInt32_$sformatInt_closure;
         const Text.Printf.$fPrintfArgInt3_closure;
         const Text.Printf.$fPrintfArgInt16_$sformatInt_closure;
         const Text.Printf.$fPrintfArgInt5_closure;
         const Text.Printf.$fPrintfArgInt8_$sformatInt_closure;
         const Text.Printf.$fPrintfArgInt_$sformatInt_closure;
         const Text.Printf.$wformatInt_closure;
         const Text.Printf.formatInt_closure;
         const Text.Printf.formatInteger_closure;
         const Text.Printf.$fPrintfArgNatural_$cformatArg_closure;
         const GHC.Read.$fReadInt2_closure;
         const GHC.Read.$fReadInt_$sreadNumber_closure;
         const Text.Read.readEither5_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.Read.readEither2_closure;
         const lvl42_rcccH_closure;
         const lvl44_rcccJ_closure;
         const lvl45_rcccK_closure;
         const Text.Printf.errorMissingArgument_closure;
         const $wgetStar_rcccL_closure;
         const lvl49_rcccP_closure;
         const lvl52_rcccS_closure;
         const lvl53_rcccT_closure;
         const $wgetSpecs_rcccV_closure;
         const Text.Printf.uprintfs_closure;
         const Text.Printf.errorShortFormat_closure;
         const GHC.IO.Handle.FD.stdout_closure;
         const GHC.IO.Handle.Text.hPutStr'_closure;
         const Text.Printf.$fPrintfTypeIO_$cspr_closure;
         const Text.Printf.$fPrintfType[]_$cspr_closure;
         const Text.Printf.$fHPrintfTypeIO_$chspr_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.708583561 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:12.710597255 UTC

[section ""data" . Text.Printf.toChar_closure" {
     Text.Printf.toChar_closure:
         const Text.Printf.toChar_info;
 },
 Text.Printf.toChar_entry() //  [R2]
         { []
         }
     {offset
       ccj2o: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccj2p; else goto ccj2q;
       ccj2p: // global
           R2 = R2;
           R1 = Text.Printf.toChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccj2q: // global
           I64[Sp - 8] = block_ccj2l_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucj2u; else goto ccj2m;
       ucj2u: // global
           call _ccj2l(R1) args: 0, res: 0, upd: 0;
       ccj2m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.toChar_info" {
     Text.Printf.toChar_info:
         const Text.Printf.toChar_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccj2l() //  [R1]
         { []
         }
     {offset
       ccj2l: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccj2l_info" {
     block_ccj2l_info:
         const _ccj2l;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.716243553 UTC

[section ""data" . Text.Printf.fromChar_closure" {
     Text.Printf.fromChar_closure:
         const Text.Printf.fromChar_info;
 },
 Text.Printf.fromChar_entry() //  [R2]
         { []
         }
     {offset
       ccj2M: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccj2N; else goto ccj2O;
       ccj2N: // global
           R2 = R2;
           R1 = Text.Printf.fromChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccj2O: // global
           I64[Sp - 8] = block_ccj2J_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucj2S; else goto ccj2K;
       ucj2S: // global
           call _ccj2J(R1) args: 0, res: 0, upd: 0;
       ccj2K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fromChar_info" {
     Text.Printf.fromChar_info:
         const Text.Printf.fromChar_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccj2J() //  [R1]
         { []
         }
     {offset
       ccj2J: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccj2J_info" {
     block_ccj2J_info:
         const _ccj2J;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.72178562 UTC

[section ""data" . Text.Printf.formatArg_closure" {
     Text.Printf.formatArg_closure:
         const Text.Printf.formatArg_info;
 },
 Text.Printf.formatArg_entry() //  [R2]
         { []
         }
     {offset
       ccj3a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccj3b; else goto ccj3c;
       ccj3b: // global
           R2 = R2;
           R1 = Text.Printf.formatArg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccj3c: // global
           I64[Sp - 8] = block_ccj37_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucj3g; else goto ccj38;
       ucj3g: // global
           call _ccj37(R1) args: 0, res: 0, upd: 0;
       ccj38: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.formatArg_info" {
     Text.Printf.formatArg_info:
         const Text.Printf.formatArg_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccj37() //  [R1]
         { []
         }
     {offset
       ccj37: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccj37_info" {
     block_ccj37_info:
         const _ccj37;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.727315295 UTC

[section ""data" . Text.Printf.parseFormat_closure" {
     Text.Printf.parseFormat_closure:
         const Text.Printf.parseFormat_info;
 },
 Text.Printf.parseFormat_entry() //  [R2]
         { []
         }
     {offset
       ccj3y: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccj3z; else goto ccj3A;
       ccj3z: // global
           R2 = R2;
           R1 = Text.Printf.parseFormat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccj3A: // global
           I64[Sp - 8] = block_ccj3v_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucj3E; else goto ccj3w;
       ucj3E: // global
           call _ccj3v(R1) args: 0, res: 0, upd: 0;
       ccj3w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.parseFormat_info" {
     Text.Printf.parseFormat_info:
         const Text.Printf.parseFormat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccj3v() //  [R1]
         { []
         }
     {offset
       ccj3v: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccj3v_info" {
     block_ccj3v_info:
         const _ccj3v;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.733027114 UTC

[section ""data" . Text.Printf.hspr_closure" {
     Text.Printf.hspr_closure:
         const Text.Printf.hspr_info;
 },
 Text.Printf.hspr_entry() //  [R2]
         { []
         }
     {offset
       ccj3T: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.hspr_info" {
     Text.Printf.hspr_info:
         const Text.Printf.hspr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.739749536 UTC

[section ""data" . Text.Printf.spr_closure" {
     Text.Printf.spr_closure:
         const Text.Printf.spr_info;
 },
 Text.Printf.spr_entry() //  [R2]
         { []
         }
     {offset
       ccj44: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.spr_info" {
     Text.Printf.spr_info:
         const Text.Printf.spr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.743664435 UTC

[section ""data" . Text.Printf.$fIsCharChar_$cfromChar_closure" {
     Text.Printf.$fIsCharChar_$cfromChar_closure:
         const Text.Printf.$fIsCharChar_$cfromChar_info;
 },
 Text.Printf.$fIsCharChar_$cfromChar_entry() //  [R2]
         { []
         }
     {offset
       ccj4f: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fIsCharChar_$cfromChar_info" {
     Text.Printf.$fIsCharChar_$cfromChar_info:
         const Text.Printf.$fIsCharChar_$cfromChar_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.746887637 UTC

[section ""data" . Text.Printf.$fIsCharChar_closure" {
     Text.Printf.$fIsCharChar_closure:
         const Text.Printf.C:IsChar_con_info;
         const Text.Printf.$fIsCharChar_$cfromChar_closure+1;
         const Text.Printf.$fIsCharChar_$cfromChar_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.750412601 UTC

[section ""data" . Text.Printf.$fHPrintfType(->)_$chspr_closure" {
     Text.Printf.$fHPrintfType(->)_$chspr_closure:
         const Text.Printf.$fHPrintfType(->)_$chspr_info;
 },
 sat_sciAv_entry() //  [R1]
         { []
         }
     {offset
       ccj4x: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccj4y; else goto ccj4z;
       ccj4y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccj4z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.Printf.formatArg_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciAv_info" {
     sat_sciAv_info:
         const sat_sciAv_entry;
         const 2;
         const 18;
 },
 sat_sciAu_entry() //  [R1]
         { []
         }
     {offset
       ccj4E: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccj4F; else goto ccj4G;
       ccj4F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccj4G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.Printf.parseFormat_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciAu_info" {
     sat_sciAu_info:
         const sat_sciAu_entry;
         const 2;
         const 18;
 },
 Text.Printf.$fHPrintfType(->)_$chspr_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       ccj4J: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccj4N; else goto ccj4M;
       ccj4N: // global
           HpAlloc = 112;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fHPrintfType(->)_$chspr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       ccj4M: // global
           I64[Hp - 104] = sat_sciAv_info;
           P64[Hp - 88] = R2;
           _sciAt::P64 = P64[Sp];
           P64[Hp - 80] = _sciAt::P64;
           I64[Hp - 72] = sat_sciAu_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = _sciAt::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = Hp - 104;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = R6;
           _sciAq::P64 = R4;
           R4 = Hp - 14;
           _sciAp::P64 = R3;
           R3 = R5;
           R2 = _sciAq::P64;
           R1 = _sciAp::P64;
           Sp = Sp + 8;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fHPrintfType(->)_$chspr_info" {
     Text.Printf.$fHPrintfType(->)_$chspr_info:
         const Text.Printf.$fHPrintfType(->)_$chspr_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.75852488 UTC

[section ""data" . Text.Printf.$fHPrintfType(->)_closure" {
     Text.Printf.$fHPrintfType(->)_closure:
         const Text.Printf.$fHPrintfType(->)_info;
 },
 Text.Printf.$fHPrintfType(->)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccj5h: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Printf.$fHPrintfType(->)_$chspr_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fHPrintfType(->)_info" {
     Text.Printf.$fHPrintfType(->)_info:
         const Text.Printf.$fHPrintfType(->)_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.763209913 UTC

[section ""data" . Text.Printf.$fPrintfType(->)_$cspr_closure" {
     Text.Printf.$fPrintfType(->)_$cspr_closure:
         const Text.Printf.$fPrintfType(->)_$cspr_info;
 },
 sat_sciAE_entry() //  [R1]
         { []
         }
     {offset
       ccj5w: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccj5x; else goto ccj5y;
       ccj5x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccj5y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.Printf.formatArg_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciAE_info" {
     sat_sciAE_info:
         const sat_sciAE_entry;
         const 2;
         const 18;
 },
 sat_sciAD_entry() //  [R1]
         { []
         }
     {offset
       ccj5D: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccj5E; else goto ccj5F;
       ccj5E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccj5F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.Printf.parseFormat_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciAD_info" {
     sat_sciAD_info:
         const sat_sciAD_entry;
         const 2;
         const 18;
 },
 Text.Printf.$fPrintfType(->)_$cspr_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccj5I: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccj5M; else goto ccj5L;
       ccj5M: // global
           HpAlloc = 112;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfType(->)_$cspr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccj5L: // global
           I64[Hp - 104] = sat_sciAE_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R6;
           I64[Hp - 72] = sat_sciAD_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R6;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = Hp - 104;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = R5;
           _sciAz::P64 = R3;
           R3 = Hp - 14;
           R2 = R4;
           R1 = _sciAz::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfType(->)_$cspr_info" {
     Text.Printf.$fPrintfType(->)_$cspr_info:
         const Text.Printf.$fPrintfType(->)_$cspr_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.772199402 UTC

[section ""data" . Text.Printf.$fPrintfType(->)_closure" {
     Text.Printf.$fPrintfType(->)_closure:
         const Text.Printf.$fPrintfType(->)_info;
 },
 Text.Printf.$fPrintfType(->)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccj6g: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Printf.$fPrintfType(->)_$cspr_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfType(->)_info" {
     Text.Printf.$fPrintfType(->)_info:
         const Text.Printf.$fPrintfType(->)_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.778430264 UTC

[section ""data" . Text.Printf.fmtChar_closure" {
     Text.Printf.fmtChar_closure:
         const Text.Printf.fmtChar_info;
 },
 Text.Printf.fmtChar_entry() //  [R2]
         { []
         }
     {offset
       ccj6u: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccj6v; else goto ccj6w;
       ccj6v: // global
           R2 = R2;
           R1 = Text.Printf.fmtChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccj6w: // global
           I64[Sp - 8] = block_ccj6r_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucj6A; else goto ccj6s;
       ucj6A: // global
           call _ccj6r(R1) args: 0, res: 0, upd: 0;
       ccj6s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fmtChar_info" {
     Text.Printf.fmtChar_info:
         const Text.Printf.fmtChar_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccj6r() //  [R1]
         { []
         }
     {offset
       ccj6r: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccj6r_info" {
     block_ccj6r_info:
         const _ccj6r;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.787151049 UTC

[section ""data" . Text.Printf.fmtModifiers_closure" {
     Text.Printf.fmtModifiers_closure:
         const Text.Printf.fmtModifiers_info;
 },
 Text.Printf.fmtModifiers_entry() //  [R2]
         { []
         }
     {offset
       ccj6U: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccj6V; else goto ccj6W;
       ccj6V: // global
           R2 = R2;
           R1 = Text.Printf.fmtModifiers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccj6W: // global
           I64[Sp - 8] = block_ccj6R_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucj70; else goto ccj6S;
       ucj70: // global
           call _ccj6R(R1) args: 0, res: 0, upd: 0;
       ccj6S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fmtModifiers_info" {
     Text.Printf.fmtModifiers_info:
         const Text.Printf.fmtModifiers_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccj6R() //  [R1]
         { []
         }
     {offset
       ccj6R: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccj6R_info" {
     block_ccj6R_info:
         const _ccj6R;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.795516356 UTC

[section ""data" . Text.Printf.fmtAlternate_closure" {
     Text.Printf.fmtAlternate_closure:
         const Text.Printf.fmtAlternate_info;
 },
 Text.Printf.fmtAlternate_entry() //  [R2]
         { []
         }
     {offset
       ccj7k: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccj7l; else goto ccj7m;
       ccj7l: // global
           R2 = R2;
           R1 = Text.Printf.fmtAlternate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccj7m: // global
           I64[Sp - 8] = block_ccj7h_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucj7q; else goto ccj7i;
       ucj7q: // global
           call _ccj7h(R1) args: 0, res: 0, upd: 0;
       ccj7i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fmtAlternate_info" {
     Text.Printf.fmtAlternate_info:
         const Text.Printf.fmtAlternate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccj7h() //  [R1]
         { []
         }
     {offset
       ccj7h: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccj7h_info" {
     block_ccj7h_info:
         const _ccj7h;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.804156483 UTC

[section ""data" . Text.Printf.fmtSign_closure" {
     Text.Printf.fmtSign_closure:
         const Text.Printf.fmtSign_info;
 },
 Text.Printf.fmtSign_entry() //  [R2]
         { []
         }
     {offset
       ccj7K: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccj7L; else goto ccj7M;
       ccj7L: // global
           R2 = R2;
           R1 = Text.Printf.fmtSign_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccj7M: // global
           I64[Sp - 8] = block_ccj7H_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucj7Q; else goto ccj7I;
       ucj7Q: // global
           call _ccj7H(R1) args: 0, res: 0, upd: 0;
       ccj7I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fmtSign_info" {
     Text.Printf.fmtSign_info:
         const Text.Printf.fmtSign_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccj7H() //  [R1]
         { []
         }
     {offset
       ccj7H: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccj7H_info" {
     block_ccj7H_info:
         const _ccj7H;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.812467273 UTC

[section ""data" . Text.Printf.fmtAdjust_closure" {
     Text.Printf.fmtAdjust_closure:
         const Text.Printf.fmtAdjust_info;
 },
 Text.Printf.fmtAdjust_entry() //  [R2]
         { []
         }
     {offset
       ccj8a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccj8b; else goto ccj8c;
       ccj8b: // global
           R2 = R2;
           R1 = Text.Printf.fmtAdjust_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccj8c: // global
           I64[Sp - 8] = block_ccj87_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucj8g; else goto ccj88;
       ucj8g: // global
           call _ccj87(R1) args: 0, res: 0, upd: 0;
       ccj88: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fmtAdjust_info" {
     Text.Printf.fmtAdjust_info:
         const Text.Printf.fmtAdjust_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccj87() //  [R1]
         { []
         }
     {offset
       ccj87: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccj87_info" {
     block_ccj87_info:
         const _ccj87;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.821523723 UTC

[section ""data" . Text.Printf.fmtPrecision_closure" {
     Text.Printf.fmtPrecision_closure:
         const Text.Printf.fmtPrecision_info;
 },
 Text.Printf.fmtPrecision_entry() //  [R2]
         { []
         }
     {offset
       ccj8A: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccj8B; else goto ccj8C;
       ccj8B: // global
           R2 = R2;
           R1 = Text.Printf.fmtPrecision_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccj8C: // global
           I64[Sp - 8] = block_ccj8x_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucj8G; else goto ccj8y;
       ucj8G: // global
           call _ccj8x(R1) args: 0, res: 0, upd: 0;
       ccj8y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fmtPrecision_info" {
     Text.Printf.fmtPrecision_info:
         const Text.Printf.fmtPrecision_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccj8x() //  [R1]
         { []
         }
     {offset
       ccj8x: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccj8x_info" {
     block_ccj8x_info:
         const _ccj8x;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.830981157 UTC

[section ""data" . Text.Printf.fmtWidth_closure" {
     Text.Printf.fmtWidth_closure:
         const Text.Printf.fmtWidth_info;
 },
 Text.Printf.fmtWidth_entry() //  [R2]
         { []
         }
     {offset
       ccj90: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccj91; else goto ccj92;
       ccj91: // global
           R2 = R2;
           R1 = Text.Printf.fmtWidth_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccj92: // global
           I64[Sp - 8] = block_ccj8X_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucj96; else goto ccj8Y;
       ucj96: // global
           call _ccj8X(R1) args: 0, res: 0, upd: 0;
       ccj8Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fmtWidth_info" {
     Text.Printf.fmtWidth_info:
         const Text.Printf.fmtWidth_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccj8X() //  [R1]
         { []
         }
     {offset
       ccj8X: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccj8X_info" {
     block_ccj8X_info:
         const _ccj8X;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.839762757 UTC

[section ""data" . Text.Printf.fpRest_closure" {
     Text.Printf.fpRest_closure:
         const Text.Printf.fpRest_info;
 },
 Text.Printf.fpRest_entry() //  [R2]
         { []
         }
     {offset
       ccj9q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccj9r; else goto ccj9s;
       ccj9r: // global
           R2 = R2;
           R1 = Text.Printf.fpRest_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccj9s: // global
           I64[Sp - 8] = block_ccj9n_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucj9w; else goto ccj9o;
       ucj9w: // global
           call _ccj9n(R1) args: 0, res: 0, upd: 0;
       ccj9o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fpRest_info" {
     Text.Printf.fpRest_info:
         const Text.Printf.fpRest_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccj9n() //  [R1]
         { []
         }
     {offset
       ccj9n: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccj9n_info" {
     block_ccj9n_info:
         const _ccj9n;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.847751888 UTC

[section ""data" . Text.Printf.fpChar_closure" {
     Text.Printf.fpChar_closure:
         const Text.Printf.fpChar_info;
 },
 Text.Printf.fpChar_entry() //  [R2]
         { []
         }
     {offset
       ccj9Q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccj9R; else goto ccj9S;
       ccj9R: // global
           R2 = R2;
           R1 = Text.Printf.fpChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccj9S: // global
           I64[Sp - 8] = block_ccj9N_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucj9W; else goto ccj9O;
       ucj9W: // global
           call _ccj9N(R1) args: 0, res: 0, upd: 0;
       ccj9O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fpChar_info" {
     Text.Printf.fpChar_info:
         const Text.Printf.fpChar_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccj9N() //  [R1]
         { []
         }
     {offset
       ccj9N: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccj9N_info" {
     block_ccj9N_info:
         const _ccj9N;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.854350464 UTC

[section ""data" . Text.Printf.fpModifiers_closure" {
     Text.Printf.fpModifiers_closure:
         const Text.Printf.fpModifiers_info;
 },
 Text.Printf.fpModifiers_entry() //  [R2]
         { []
         }
     {offset
       ccjag: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccjah; else goto ccjai;
       ccjah: // global
           R2 = R2;
           R1 = Text.Printf.fpModifiers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccjai: // global
           I64[Sp - 8] = block_ccjad_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucjam; else goto ccjae;
       ucjam: // global
           call _ccjad(R1) args: 0, res: 0, upd: 0;
       ccjae: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fpModifiers_info" {
     Text.Printf.fpModifiers_info:
         const Text.Printf.fpModifiers_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccjad() //  [R1]
         { []
         }
     {offset
       ccjad: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjad_info" {
     block_ccjad_info:
         const _ccjad;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.859575826 UTC

[section ""data" . Text.Printf.printf_closure" {
     Text.Printf.printf_closure:
         const Text.Printf.printf_info;
 },
 Text.Printf.printf_entry() //  [R2, R3]
         { []
         }
     {offset
       ccjaD: // global
           _sciBY::P64 = R3;
           R3 = GHC.Types.[]_closure+1;
           _sciBX::P64 = R2;
           R2 = _sciBY::P64;
           R1 = _sciBX::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.printf_info" {
     Text.Printf.printf_info:
         const Text.Printf.printf_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.863455037 UTC

[section ""data" . Text.Printf.hPrintf_closure" {
     Text.Printf.hPrintf_closure:
         const Text.Printf.hPrintf_info;
 },
 Text.Printf.hPrintf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       ccjaP: // global
           _sciC1::P64 = R4;
           R4 = GHC.Types.[]_closure+1;
           _sciC0::P64 = R3;
           R3 = _sciC1::P64;
           _sciBZ::P64 = R2;
           R2 = _sciC0::P64;
           R1 = _sciBZ::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.hPrintf_info" {
     Text.Printf.hPrintf_info:
         const Text.Printf.hPrintf_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.868710547 UTC

[section ""data" . Text.Printf.vFmt_closure" {
     Text.Printf.vFmt_closure:
         const Text.Printf.vFmt_info;
 },
 Text.Printf.vFmt_entry() //  [R2, R3]
         { []
         }
     {offset
       ccjb4: // global
           if ((Sp + -72) < SpLim) (likely: False) goto ccjb8; else goto ccjb9;
       ccjb8: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.vFmt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccjb9: // global
           I64[Sp - 16] = block_ccjb1_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucjbq; else goto ccjb2;
       ucjbq: // global
           call _ccjb1(R1) args: 0, res: 0, upd: 0;
       ccjb2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.vFmt_info" {
     Text.Printf.vFmt_info:
         const Text.Printf.vFmt_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccjb1() //  [R1]
         { []
         }
     {offset
       ccjb1: // global
           I64[Sp - 56] = block_ccjb7_info;
           _sciC4::P64 = R1;
           _sciC5::P64 = P64[R1 + 7];
           _sciC6::P64 = P64[R1 + 15];
           _sciC7::P64 = P64[R1 + 23];
           _sciC8::P64 = P64[R1 + 31];
           _sciC9::P64 = P64[R1 + 39];
           _sciCa::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 48] = _sciC5::P64;
           P64[Sp - 40] = _sciC6::P64;
           P64[Sp - 32] = _sciC7::P64;
           P64[Sp - 24] = _sciC8::P64;
           P64[Sp - 16] = _sciC9::P64;
           P64[Sp - 8] = _sciCa::P64;
           P64[Sp] = _sciC4::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ucjbp; else goto ccjbb;
       ucjbp: // global
           call _ccjb7(R1) args: 0, res: 0, upd: 0;
       ccjbb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjb1_info" {
     block_ccjb1_info:
         const _ccjb1;
         const 1;
         const 30;
 },
 _ccjb7() //  [R1]
         { []
         }
     {offset
       ccjb7: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccjbh; else goto ccjbg;
       ccjbh: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccjbg: // global
           if (I64[R1 + 7] == 118) goto ccjbo; else goto ccjbk;
       ccjbo: // global
           I64[Hp - 56] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 64];
           R1 = Hp - 55;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccjbk: // global
           Hp = Hp - 64;
           R1 = P64[Sp + 56] & (-8);
           Sp = Sp + 72;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjb7_info" {
     block_ccjb7_info:
         const _ccjb7;
         const 8;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.87720458 UTC

[section ""cstring" . lvl_rccbg_bytes" {
     lvl_rccbg_bytes:
         I8[] [112,114,105,110,116,102,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.879794168 UTC

[section ""data" . Text.Printf.perror_closure" {
     Text.Printf.perror_closure:
         const Text.Printf.perror_info;
         const 0;
 },
 Text.Printf.perror_entry() //  [R2]
         { []
         }
     {offset
       ccjbY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccjbZ; else goto ccjc0;
       ccjbZ: // global
           R2 = R2;
           R1 = Text.Printf.perror_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccjc0: // global
           I64[Sp - 8] = block_ccjbW_info;
           R3 = R2;
           R2 = lvl_rccbg_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.perror_info" {
     Text.Printf.perror_info:
         const Text.Printf.perror_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Scjc4_srt;
 },
 _ccjbW() //  [R1]
         { []
         }
     {offset
       ccjbW: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjbW_info" {
     block_ccjbW_info:
         const _ccjbW;
         const 0;
         const 4294967326;
         const Scjc4_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.884778926 UTC

[section ""data" . lvl1_rccbh_closure" {
     lvl1_rccbh_closure:
         const :_con_info;
         const GHC.Show.$fShowChar3_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.886558653 UTC

[section ""cstring" . lvl2_rccbi_bytes" {
     lvl2_rccbi_bytes:
         I8[] [98,97,100,32,102,111,114,109,97,116,116,105,110,103,32,99,104,97,114,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.890717712 UTC

[section ""data" . Text.Printf.$werrorBadFormat_closure" {
     Text.Printf.$werrorBadFormat_closure:
         const Text.Printf.$werrorBadFormat_info;
         const 0;
 },
 sat_sciCj_entry() //  [R1]
         { []
         }
     {offset
       ccjcy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjcz; else goto ccjcA;
       ccjcz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjcA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl1_rccbh_closure+2;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$wshowLitChar_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciCj_info" {
     sat_sciCj_info:
         const sat_sciCj_entry;
         const 4294967296;
         const 4294967313;
         const Scjc4_srt+16;
 },
 sat_sciCk_entry() //  [R1]
         { []
         }
     {offset
       ccjcE: // global
           _sciCk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccjcF; else goto ccjcG;
       ccjcG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccjcI; else goto ccjcH;
       ccjcI: // global
           HpAlloc = 48;
           goto ccjcF;
       ccjcF: // global
           R1 = _sciCk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjcH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sciCk::P64;
           _sciCi::I64 = I64[_sciCk::P64 + 16];
           if (_sciCi::I64 != 39) goto ccjcC; else goto ccjcD;
       ccjcC: // global
           I64[Hp - 40] = sat_sciCj_info;
           I64[Hp - 24] = _sciCi::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShowChar3_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccjcD: // global
           Hp = Hp - 48;
           R1 = GHC.Show.$fShowChar1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciCk_info" {
     sat_sciCk_info:
         const sat_sciCk_entry;
         const 4294967296;
         const 12884901905;
         const Scjc4_srt+16;
 },
 sat_sciCl_entry() //  [R1]
         { []
         }
     {offset
       ccjcK: // global
           _sciCl::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccjcL; else goto ccjcM;
       ccjcM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccjcO; else goto ccjcN;
       ccjcO: // global
           HpAlloc = 24;
           goto ccjcL;
       ccjcL: // global
           R1 = _sciCl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjcN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sciCl::P64;
           _sciCh::I64 = I64[_sciCl::P64 + 16];
           I64[Hp - 16] = sat_sciCk_info;
           I64[Hp] = _sciCh::I64;
           R3 = Hp - 16;
           R2 = lvl2_rccbi_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciCl_info" {
     sat_sciCl_info:
         const sat_sciCl_entry;
         const 4294967296;
         const 12884901905;
         const Scjc4_srt+16;
 },
 Text.Printf.$werrorBadFormat_entry() //  [R2]
         { []
         }
     {offset
       ccjcR: // global
           _sciCh::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto ccjcS; else goto ccjcT;
       ccjcT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccjcV; else goto ccjcU;
       ccjcV: // global
           HpAlloc = 24;
           goto ccjcS;
       ccjcS: // global
           R2 = _sciCh::I64;
           R1 = Text.Printf.$werrorBadFormat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccjcU: // global
           I64[Hp - 16] = sat_sciCl_info;
           I64[Hp] = _sciCh::I64;
           I64[Sp - 8] = block_ccjcP_info;
           R3 = Hp - 16;
           R2 = lvl_rccbg_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$werrorBadFormat_info" {
     Text.Printf.$werrorBadFormat_info:
         const Text.Printf.$werrorBadFormat_entry;
         const 0;
         const 124554051598;
         const 4294967300;
         const Scjc4_srt;
 },
 _ccjcP() //  [R1]
         { []
         }
     {offset
       ccjcP: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjcP_info" {
     block_ccjcP_info:
         const _ccjcP;
         const 0;
         const 4294967326;
         const Scjc4_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.902393198 UTC

[section ""data" . Text.Printf.errorBadFormat_closure" {
     Text.Printf.errorBadFormat_closure:
         const Text.Printf.errorBadFormat_info;
         const 0;
 },
 Text.Printf.errorBadFormat_entry() //  [R2]
         { []
         }
     {offset
       ccjdC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccjdD; else goto ccjdE;
       ccjdD: // global
           R2 = R2;
           R1 = Text.Printf.errorBadFormat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccjdE: // global
           I64[Sp - 8] = block_ccjdz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucjdI; else goto ccjdA;
       ucjdI: // global
           call _ccjdz(R1) args: 0, res: 0, upd: 0;
       ccjdA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.errorBadFormat_info" {
     Text.Printf.errorBadFormat_info:
         const Text.Printf.errorBadFormat_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Scjc4_srt+32;
 },
 _ccjdz() //  [R1]
         { []
         }
     {offset
       ccjdz: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call Text.Printf.$werrorBadFormat_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjdz_info" {
     block_ccjdz_info:
         const _ccjdz;
         const 0;
         const 4294967326;
         const Scjc4_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.907509363 UTC

[section ""cstring" . lvl3_rccbj_bytes" {
     lvl3_rccbj_bytes:
         I8[] [112,114,105,110,116,102,58,32,102,111,114,109,97,116,116,105,110,103,32,115,116,114,105,110,103,32,101,110,100,101,100,32,112,114,101,109,97,116,117,114,101,108,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.911192093 UTC

[section ""data" . Text.Printf.errorShortFormat_closure" {
     Text.Printf.errorShortFormat_closure:
         const Text.Printf.errorShortFormat_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.errorShortFormat_entry() //  [R1]
         { []
         }
     {offset
       ccje2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccje3; else goto ccje4;
       ccje3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccje4: // global
           (_ccjdX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjdX::I64 == 0) goto ccjdZ; else goto ccjdY;
       ccjdZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjdY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjdX::I64;
           I64[Sp - 24] = block_ccje0_info;
           R2 = lvl3_rccbj_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.errorShortFormat_info" {
     Text.Printf.errorShortFormat_info:
         const Text.Printf.errorShortFormat_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt;
 },
 _ccje0() //  [R1]
         { []
         }
     {offset
       ccje0: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccje0_info" {
     block_ccje0_info:
         const _ccje0;
         const 0;
         const 4294967326;
         const Scjc4_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.917753063 UTC

[section ""data" . Text.Printf.$dmparseFormat_closure" {
     Text.Printf.$dmparseFormat_closure:
         const Text.Printf.$dmparseFormat_info;
         const 0;
 },
 Text.Printf.$dmparseFormat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       ccjev: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccjew; else goto ccjex;
       ccjew: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$dmparseFormat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccjex: // global
           I64[Sp - 8] = block_ccjeo_info;
           R1 = R4;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucjeH; else goto ccjep;
       ucjeH: // global
           call _ccjeo(R1) args: 0, res: 0, upd: 0;
       ccjep: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$dmparseFormat_info" {
     Text.Printf.$dmparseFormat_info:
         const Text.Printf.$dmparseFormat_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Scjc4_srt+48;
 },
 _ccjeo() //  [R1]
         { []
         }
     {offset
       ccjeo: // global
           if (R1 & 7 == 1) goto ccjes; else goto ccjet;
       ccjes: // global
           R1 = Text.Printf.errorShortFormat_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       ccjet: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccjeG; else goto ccjeF;
       ccjeG: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccjeF: // global
           _sciCv::P64 = P64[R1 + 6];
           _sciCw::P64 = P64[R1 + 14];
           I64[Hp - 24] = Text.Printf.FormatParse_con_info;
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           P64[Hp - 8] = _sciCv::P64;
           P64[Hp] = _sciCw::P64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjeo_info" {
     block_ccjeo_info:
         const _ccjeo;
         const 0;
         const 4294967326;
         const Scjc4_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.923260539 UTC

[section ""cstring" . lvl4_rccbk_bytes" {
     lvl4_rccbk_bytes:
         I8[] [112,114,105,110,116,102,58,32,97,114,103,117,109,101,110,116,32,108,105,115,116,32,101,110,100,101,100,32,112,114,101,109,97,116,117,114,101,108,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.926323996 UTC

[section ""data" . Text.Printf.errorMissingArgument_closure" {
     Text.Printf.errorMissingArgument_closure:
         const Text.Printf.errorMissingArgument_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.errorMissingArgument_entry() //  [R1]
         { []
         }
     {offset
       ccjf7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccjf8; else goto ccjf9;
       ccjf8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjf9: // global
           (_ccjf2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjf2::I64 == 0) goto ccjf4; else goto ccjf3;
       ccjf4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjf3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjf2::I64;
           I64[Sp - 24] = block_ccjf5_info;
           R2 = lvl4_rccbk_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.errorMissingArgument_info" {
     Text.Printf.errorMissingArgument_info:
         const Text.Printf.errorMissingArgument_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt;
 },
 _ccjf5() //  [R1]
         { []
         }
     {offset
       ccjf5: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccjf5_info" {
     block_ccjf5_info:
         const _ccjf5;
         const 0;
         const 4294967326;
         const Scjc4_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.931512383 UTC

[section ""cstring" . lvl5_rccbl_bytes" {
     lvl5_rccbl_bytes:
         I8[] [112,114,105,110,116,102,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.934137763 UTC

[section ""data" . Text.Printf.errorBadArgument_closure" {
     Text.Printf.errorBadArgument_closure:
         const Text.Printf.errorBadArgument_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.errorBadArgument_entry() //  [R1]
         { []
         }
     {offset
       ccjfy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccjfz; else goto ccjfA;
       ccjfz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjfA: // global
           (_ccjft::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjft::I64 == 0) goto ccjfv; else goto ccjfu;
       ccjfv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjfu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjft::I64;
           I64[Sp - 24] = block_ccjfw_info;
           R2 = lvl5_rccbl_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.errorBadArgument_info" {
     Text.Printf.errorBadArgument_info:
         const Text.Printf.errorBadArgument_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt;
 },
 _ccjfw() //  [R1]
         { []
         }
     {offset
       ccjfw: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccjfw_info" {
     block_ccjfw_info:
         const _ccjfw;
         const 0;
         const 4294967326;
         const Scjc4_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.93934243 UTC

[section ""cstring" . Text.Printf.$fPrintfArgDouble9_bytes" {
     Text.Printf.$fPrintfArgDouble9_bytes:
         I8[] [45]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.941781618 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble8_closure" {
     Text.Printf.$fPrintfArgDouble8_closure:
         const Text.Printf.$fPrintfArgDouble8_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgDouble8_entry() //  [R1]
         { []
         }
     {offset
       ccjfX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjfY; else goto ccjfZ;
       ccjfY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjfZ: // global
           (_ccjfU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjfU::I64 == 0) goto ccjfW; else goto ccjfV;
       ccjfW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjfV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjfU::I64;
           R2 = Text.Printf.$fPrintfArgDouble9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgDouble8_info" {
     Text.Printf.$fPrintfArgDouble8_info:
         const Text.Printf.$fPrintfArgDouble8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.946509008 UTC

[section ""cstring" . lvl6_rccbm_bytes" {
     lvl6_rccbm_bytes:
         I8[] [112,114,105,110,116,102,58,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,105,109,112,111,115,115,105,98,108,101,32,100,102,109,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.9490279 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble7_closure" {
     Text.Printf.$fPrintfArgDouble7_closure:
         const Text.Printf.$fPrintfArgDouble7_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgDouble7_entry() //  [R1]
         { []
         }
     {offset
       ccjgh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccjgi; else goto ccjgj;
       ccjgi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjgj: // global
           (_ccjgc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjgc::I64 == 0) goto ccjge; else goto ccjgd;
       ccjge: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjgd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjgc::I64;
           I64[Sp - 24] = block_ccjgf_info;
           R2 = lvl6_rccbm_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgDouble7_info" {
     Text.Printf.$fPrintfArgDouble7_info:
         const Text.Printf.$fPrintfArgDouble7_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt;
 },
 _ccjgf() //  [R1]
         { []
         }
     {offset
       ccjgf: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccjgf_info" {
     block_ccjgf_info:
         const _ccjgf;
         const 0;
         const 4294967326;
         const Scjc4_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.961278184 UTC

[section ""data" . Text.Printf.$w$sdfmt_closure" {
     Text.Printf.$w$sdfmt_closure:
         const Text.Printf.$w$sdfmt_info;
         const 0;
 },
 Text.Printf.$w$sdfmt_slow() //  [R1]
         { []
         }
     {offset
       ccjgA: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Text.Printf.$w$sdfmt_entry(R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Printf.$w$sdfmt_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       ccjgG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccjgH; else goto ccjgI;
       ccjgH: // global
           R1 = Text.Printf.$w$sdfmt_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       ccjgI: // global
           _sciCD::P64 = R5;
           _sciCC::P64 = R4;
           _sciCB::P64 = R3;
           (_sciCI::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswupper(R2);
           (_sciCN::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towlower(R2);
           if (_sciCN::I64 > 1114111) goto ccjgX; else goto ccjjB;
       ccjgX: // global
           R2 = _sciCN::I64;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       ccjjB: // global
           if (_sciCN::I64 < 103) goto ucjjG; else goto ucjjI;
       ucjjG: // global
           if (_sciCN::I64 < 102) goto ucjjH; else goto ccjio;
       ucjjH: // global
           if (_sciCN::I64 < 101) goto ccjhY; else goto ccjic;
       ccjic: // global
           I64[Sp - 24] = block_ccji6_info;
           R1 = _sciCD::P64;
           P64[Sp - 16] = _sciCB::P64;
           I64[Sp - 8] = _sciCI::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucjjQ; else goto ccji7;
       ucjjQ: // global
           call _ccji6(R1) args: 0, res: 0, upd: 0;
       ccji7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccjio: // global
           I64[Sp - 32] = block_ccjin_info;
           R1 = _sciCC::P64;
           P64[Sp - 24] = _sciCB::P64;
           P64[Sp - 16] = _sciCD::P64;
           I64[Sp - 8] = _sciCI::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucjjR; else goto ccjiq;
       ucjjR: // global
           call _ccjin(R1) args: 0, res: 0, upd: 0;
       ccjiq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucjjI: // global
           if (_sciCN::I64 >= 104) goto ccjhY; else goto ccjj2;
       ccjhY: // global
           R1 = Text.Printf.$fPrintfArgDouble7_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       ccjj2: // global
           I64[Sp - 32] = block_ccjj1_info;
           R1 = _sciCC::P64;
           P64[Sp - 24] = _sciCB::P64;
           P64[Sp - 16] = _sciCD::P64;
           I64[Sp - 8] = _sciCI::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucjjS; else goto ccjj4;
       ucjjS: // global
           call _ccjj1(R1) args: 0, res: 0, upd: 0;
       ccjj4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sdfmt_info" {
     Text.Printf.$w$sdfmt_info:
         const Text.Printf.$w$sdfmt_entry;
         const 0;
         const 270582939662;
         const 17179869184;
         const Scjc4_srt+64;
         const 68;
         const Text.Printf.$w$sdfmt_slow;
 },
 _ccji6() //  [R1]
         { []
         }
     {offset
       ccji6: // global
           _sciCB::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccjib_info;
           D1 = F64[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = _sciCB::P64;
           R2 = GHC.Float.FFExponent_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccji6_info" {
     block_ccji6_info:
         const _ccji6;
         const 130;
         const 81604378654;
         const Scjc4_srt+72;
 },
 _ccjib() //  [R1]
         { []
         }
     {offset
       ccjib: // global
           P64[Sp] = R1;
           call _sciCR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjib_info" {
     block_ccjib_info:
         const _ccjib;
         const 65;
         const 73014444062;
         const Scjc4_srt+72;
 },
 _ccjin() //  [R1]
         { []
         }
     {offset
       ccjin: // global
           _sciCD::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccjiC; else goto ccjiR;
       ccjiC: // global
           I64[Sp] = block_ccjiu_info;
           R1 = _sciCD::P64;
           if (R1 & 7 != 0) goto ucjjY; else goto ccjiv;
       ucjjY: // global
           call _ccjiu(R1) args: 0, res: 0, upd: 0;
       ccjiv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccjiR: // global
           I64[Sp] = block_ccjiK_info;
           R1 = _sciCD::P64;
           if (R1 & 7 != 0) goto ucjjZ; else goto ccjiL;
       ucjjZ: // global
           call _ccjiK(R1) args: 0, res: 0, upd: 0;
       ccjiL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjin_info" {
     block_ccjin_info:
         const _ccjin;
         const 259;
         const 81604378654;
         const Scjc4_srt+72;
 },
 _ccjiu() //  [R1]
         { []
         }
     {offset
       ccjiu: // global
           I64[Sp + 16] = block_ccjiz_info;
           D1 = F64[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFFixed_closure+2;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjiu_info" {
     block_ccjiu_info:
         const _ccjiu;
         const 387;
         const 81604378654;
         const Scjc4_srt+72;
 },
 _ccjiz() //  [R1]
         { []
         }
     {offset
       ccjiz: // global
           P64[Sp] = R1;
           call _sciCR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjiz_info" {
     block_ccjiz_info:
         const _ccjiz;
         const 65;
         const 73014444062;
         const Scjc4_srt+72;
 },
 _ccjiK() //  [R1]
         { []
         }
     {offset
       ccjiK: // global
           I64[Sp + 16] = block_ccjiP_info;
           D1 = F64[R1 + 7];
           R4 = GHC.Types.True_closure+2;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFFixed_closure+2;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjiK_info" {
     block_ccjiK_info:
         const _ccjiK;
         const 387;
         const 81604378654;
         const Scjc4_srt+72;
 },
 _ccjiP() //  [R1]
         { []
         }
     {offset
       ccjiP: // global
           P64[Sp] = R1;
           call _sciCR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjiP_info" {
     block_ccjiP_info:
         const _ccjiP;
         const 65;
         const 73014444062;
         const Scjc4_srt+72;
 },
 _ccjj1() //  [R1]
         { []
         }
     {offset
       ccjj1: // global
           _sciCD::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccjjg; else goto ccjjv;
       ccjjg: // global
           I64[Sp] = block_ccjj8_info;
           R1 = _sciCD::P64;
           if (R1 & 7 != 0) goto ucjk2; else goto ccjj9;
       ucjk2: // global
           call _ccjj8(R1) args: 0, res: 0, upd: 0;
       ccjj9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccjjv: // global
           I64[Sp] = block_ccjjo_info;
           R1 = _sciCD::P64;
           if (R1 & 7 != 0) goto ucjk3; else goto ccjjp;
       ucjk3: // global
           call _ccjjo(R1) args: 0, res: 0, upd: 0;
       ccjjp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjj1_info" {
     block_ccjj1_info:
         const _ccjj1;
         const 259;
         const 81604378654;
         const Scjc4_srt+72;
 },
 _ccjj8() //  [R1]
         { []
         }
     {offset
       ccjj8: // global
           I64[Sp + 16] = block_ccjjd_info;
           D1 = F64[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFGeneric_closure+3;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjj8_info" {
     block_ccjj8_info:
         const _ccjj8;
         const 387;
         const 81604378654;
         const Scjc4_srt+72;
 },
 _ccjjd() //  [R1]
         { []
         }
     {offset
       ccjjd: // global
           P64[Sp] = R1;
           call _sciCR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjjd_info" {
     block_ccjjd_info:
         const _ccjjd;
         const 65;
         const 73014444062;
         const Scjc4_srt+72;
 },
 _ccjjo() //  [R1]
         { []
         }
     {offset
       ccjjo: // global
           I64[Sp + 16] = block_ccjjt_info;
           D1 = F64[R1 + 7];
           R4 = GHC.Types.True_closure+2;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFGeneric_closure+3;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjjo_info" {
     block_ccjjo_info:
         const _ccjjo;
         const 387;
         const 81604378654;
         const Scjc4_srt+72;
 },
 _ccjjt() //  [R1]
         { []
         }
     {offset
       ccjjt: // global
           P64[Sp] = R1;
           call _sciCR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjjt_info" {
     block_ccjjt_info:
         const _ccjjt;
         const 65;
         const 73014444062;
         const Scjc4_srt+72;
 },
 _sciCR() //  []
         { []
         }
     {offset
       sciCR: // global
           _sciCS::P64 = P64[Sp];
           if (I64[Sp + 8] == 0) goto ccjhx; else goto ccjha;
       ccjhx: // global
           I64[Sp + 8] = block_ccjhw_info;
           R1 = _sciCS::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucjk6; else goto ccjhy;
       ucjk6: // global
           call _ccjhw(R1) args: 0, res: 0, upd: 0;
       ccjhy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccjha: // global
           I64[Sp + 8] = block_ccjh8_info;
           R3 = _sciCS::P64;
           R2 = GHC.Unicode.toUpper_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccjhw() //  [R1]
         { []
         }
     {offset
       ccjhw: // global
           if (R1 & 7 == 1) goto ucjjP; else goto ccjhJ;
       ucjjP: // global
           Sp = Sp + 8;
           call _ccjhE() args: 0, res: 0, upd: 0;
       ccjhJ: // global
           I64[Sp - 16] = block_ccjhH_info;
           _sciD0::P64 = R1;
           _sciD2::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sciD2::P64;
           P64[Sp] = _sciD0::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucjjV; else goto ccjhK;
       ucjjV: // global
           call _ccjhH(R1) args: 0, res: 0, upd: 0;
       ccjhK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjhw_info" {
     block_ccjhw_info:
         const _ccjhw;
         const 0;
         const 4294967326;
         const Scjc4_srt+104;
 },
 _ccjhH() //  [R1]
         { []
         }
     {offset
       ccjhH: // global
           if (I64[R1 + 7] == 45) goto ccjhS; else goto ccjhR;
       ccjhS: // global
           R2 = P64[Sp + 8];
           R1 = Text.Printf.$fPrintfArgDouble8_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccjhR: // global
           R2 = P64[Sp + 16];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjhH_info" {
     block_ccjhH_info:
         const _ccjhH;
         const 2;
         const 4294967326;
         const Scjc4_srt+104;
 },
 _ccjh8() //  [R1]
         { []
         }
     {offset
       ccjh8: // global
           if (R1 & 7 == 1) goto ucjjO; else goto ccjhl;
       ucjjO: // global
           Sp = Sp + 8;
           call _ccjhE() args: 0, res: 0, upd: 0;
       ccjhl: // global
           I64[Sp - 16] = block_ccjhj_info;
           _sciCU::P64 = R1;
           _sciCW::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sciCW::P64;
           P64[Sp] = _sciCU::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucjjT; else goto ccjhm;
       ucjjT: // global
           call _ccjhj(R1) args: 0, res: 0, upd: 0;
       ccjhm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjh8_info" {
     block_ccjh8_info:
         const _ccjh8;
         const 0;
         const 4294967326;
         const Scjc4_srt+104;
 },
 _ccjhE() //  []
         { []
         }
     {offset
       ccjhE: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccjhj() //  [R1]
         { []
         }
     {offset
       ccjhj: // global
           if (I64[R1 + 7] == 45) goto ccjhu; else goto ccjht;
       ccjhu: // global
           R2 = P64[Sp + 8];
           R1 = Text.Printf.$fPrintfArgDouble8_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccjht: // global
           R2 = P64[Sp + 16];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjhj_info" {
     block_ccjhj_info:
         const _ccjhj;
         const 2;
         const 4294967326;
         const Scjc4_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:12.99714622 UTC

[section ""data" . Text.Printf.$fPrintfArgFloat1_closure" {
     Text.Printf.$fPrintfArgFloat1_closure:
         const Text.Printf.$fPrintfArgFloat1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgFloat1_entry() //  [R1]
         { []
         }
     {offset
       ccjm4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccjm5; else goto ccjm6;
       ccjm5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjm6: // global
           (_ccjlZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjlZ::I64 == 0) goto ccjm1; else goto ccjm0;
       ccjm1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjm0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjlZ::I64;
           I64[Sp - 24] = block_ccjm2_info;
           R2 = lvl6_rccbm_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgFloat1_info" {
     Text.Printf.$fPrintfArgFloat1_info:
         const Text.Printf.$fPrintfArgFloat1_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt;
 },
 _ccjm2() //  [R1]
         { []
         }
     {offset
       ccjm2: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccjm2_info" {
     block_ccjm2_info:
         const _ccjm2;
         const 0;
         const 4294967326;
         const Scjc4_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.009292016 UTC

[section ""data" . Text.Printf.$w$sdfmt1_closure" {
     Text.Printf.$w$sdfmt1_closure:
         const Text.Printf.$w$sdfmt1_info;
         const 0;
 },
 Text.Printf.$w$sdfmt1_slow() //  [R1]
         { []
         }
     {offset
       ccjmn: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Text.Printf.$w$sdfmt1_entry(R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Printf.$w$sdfmt1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       ccjmt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccjmu; else goto ccjmv;
       ccjmu: // global
           R1 = Text.Printf.$w$sdfmt1_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       ccjmv: // global
           _sciDt::P64 = R5;
           _sciDs::P64 = R4;
           _sciDr::P64 = R3;
           (_sciDy::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswupper(R2);
           (_sciDD::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towlower(R2);
           if (_sciDD::I64 > 1114111) goto ccjmK; else goto ccjpo;
       ccjmK: // global
           R2 = _sciDD::I64;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       ccjpo: // global
           if (_sciDD::I64 < 103) goto ucjpt; else goto ucjpv;
       ucjpt: // global
           if (_sciDD::I64 < 102) goto ucjpu; else goto ccjob;
       ucjpu: // global
           if (_sciDD::I64 < 101) goto ccjnL; else goto ccjnZ;
       ccjnZ: // global
           I64[Sp - 24] = block_ccjnT_info;
           R1 = _sciDt::P64;
           P64[Sp - 16] = _sciDr::P64;
           I64[Sp - 8] = _sciDy::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucjpD; else goto ccjnU;
       ucjpD: // global
           call _ccjnT(R1) args: 0, res: 0, upd: 0;
       ccjnU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccjob: // global
           I64[Sp - 32] = block_ccjoa_info;
           R1 = _sciDs::P64;
           P64[Sp - 24] = _sciDr::P64;
           P64[Sp - 16] = _sciDt::P64;
           I64[Sp - 8] = _sciDy::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucjpE; else goto ccjod;
       ucjpE: // global
           call _ccjoa(R1) args: 0, res: 0, upd: 0;
       ccjod: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucjpv: // global
           if (_sciDD::I64 >= 104) goto ccjnL; else goto ccjoP;
       ccjnL: // global
           R1 = Text.Printf.$fPrintfArgFloat1_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       ccjoP: // global
           I64[Sp - 32] = block_ccjoO_info;
           R1 = _sciDs::P64;
           P64[Sp - 24] = _sciDr::P64;
           P64[Sp - 16] = _sciDt::P64;
           I64[Sp - 8] = _sciDy::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucjpF; else goto ccjoR;
       ucjpF: // global
           call _ccjoO(R1) args: 0, res: 0, upd: 0;
       ccjoR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sdfmt1_info" {
     Text.Printf.$w$sdfmt1_info:
         const Text.Printf.$w$sdfmt1_entry;
         const 0;
         const 2074469203982;
         const 17179869184;
         const Scjc4_srt+64;
         const 68;
         const Text.Printf.$w$sdfmt1_slow;
 },
 _ccjnT() //  [R1]
         { []
         }
     {offset
       ccjnT: // global
           _sciDr::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccjnY_info;
           F1 = F32[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = _sciDr::P64;
           R2 = GHC.Float.FFExponent_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjnT_info" {
     block_ccjnT_info:
         const _ccjnT;
         const 130;
         const 210453397534;
         const Scjc4_srt+72;
 },
 _ccjnY() //  [R1]
         { []
         }
     {offset
       ccjnY: // global
           P64[Sp] = R1;
           call _sciDH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjnY_info" {
     block_ccjnY_info:
         const _ccjnY;
         const 65;
         const 73014444062;
         const Scjc4_srt+72;
 },
 _ccjoa() //  [R1]
         { []
         }
     {offset
       ccjoa: // global
           _sciDt::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccjop; else goto ccjoE;
       ccjop: // global
           I64[Sp] = block_ccjoh_info;
           R1 = _sciDt::P64;
           if (R1 & 7 != 0) goto ucjpL; else goto ccjoi;
       ucjpL: // global
           call _ccjoh(R1) args: 0, res: 0, upd: 0;
       ccjoi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccjoE: // global
           I64[Sp] = block_ccjox_info;
           R1 = _sciDt::P64;
           if (R1 & 7 != 0) goto ucjpM; else goto ccjoy;
       ucjpM: // global
           call _ccjox(R1) args: 0, res: 0, upd: 0;
       ccjoy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjoa_info" {
     block_ccjoa_info:
         const _ccjoa;
         const 259;
         const 210453397534;
         const Scjc4_srt+72;
 },
 _ccjoh() //  [R1]
         { []
         }
     {offset
       ccjoh: // global
           I64[Sp + 16] = block_ccjom_info;
           F1 = F32[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFFixed_closure+2;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjoh_info" {
     block_ccjoh_info:
         const _ccjoh;
         const 387;
         const 210453397534;
         const Scjc4_srt+72;
 },
 _ccjom() //  [R1]
         { []
         }
     {offset
       ccjom: // global
           P64[Sp] = R1;
           call _sciDH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjom_info" {
     block_ccjom_info:
         const _ccjom;
         const 65;
         const 73014444062;
         const Scjc4_srt+72;
 },
 _ccjox() //  [R1]
         { []
         }
     {offset
       ccjox: // global
           I64[Sp + 16] = block_ccjoC_info;
           F1 = F32[R1 + 7];
           R4 = GHC.Types.True_closure+2;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFFixed_closure+2;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjox_info" {
     block_ccjox_info:
         const _ccjox;
         const 387;
         const 210453397534;
         const Scjc4_srt+72;
 },
 _ccjoC() //  [R1]
         { []
         }
     {offset
       ccjoC: // global
           P64[Sp] = R1;
           call _sciDH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjoC_info" {
     block_ccjoC_info:
         const _ccjoC;
         const 65;
         const 73014444062;
         const Scjc4_srt+72;
 },
 _ccjoO() //  [R1]
         { []
         }
     {offset
       ccjoO: // global
           _sciDt::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccjp3; else goto ccjpi;
       ccjp3: // global
           I64[Sp] = block_ccjoV_info;
           R1 = _sciDt::P64;
           if (R1 & 7 != 0) goto ucjpP; else goto ccjoW;
       ucjpP: // global
           call _ccjoV(R1) args: 0, res: 0, upd: 0;
       ccjoW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccjpi: // global
           I64[Sp] = block_ccjpb_info;
           R1 = _sciDt::P64;
           if (R1 & 7 != 0) goto ucjpQ; else goto ccjpc;
       ucjpQ: // global
           call _ccjpb(R1) args: 0, res: 0, upd: 0;
       ccjpc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjoO_info" {
     block_ccjoO_info:
         const _ccjoO;
         const 259;
         const 210453397534;
         const Scjc4_srt+72;
 },
 _ccjoV() //  [R1]
         { []
         }
     {offset
       ccjoV: // global
           I64[Sp + 16] = block_ccjp0_info;
           F1 = F32[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFGeneric_closure+3;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjoV_info" {
     block_ccjoV_info:
         const _ccjoV;
         const 387;
         const 210453397534;
         const Scjc4_srt+72;
 },
 _ccjp0() //  [R1]
         { []
         }
     {offset
       ccjp0: // global
           P64[Sp] = R1;
           call _sciDH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjp0_info" {
     block_ccjp0_info:
         const _ccjp0;
         const 65;
         const 73014444062;
         const Scjc4_srt+72;
 },
 _ccjpb() //  [R1]
         { []
         }
     {offset
       ccjpb: // global
           I64[Sp + 16] = block_ccjpg_info;
           F1 = F32[R1 + 7];
           R4 = GHC.Types.True_closure+2;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFGeneric_closure+3;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjpb_info" {
     block_ccjpb_info:
         const _ccjpb;
         const 387;
         const 210453397534;
         const Scjc4_srt+72;
 },
 _ccjpg() //  [R1]
         { []
         }
     {offset
       ccjpg: // global
           P64[Sp] = R1;
           call _sciDH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjpg_info" {
     block_ccjpg_info:
         const _ccjpg;
         const 65;
         const 73014444062;
         const Scjc4_srt+72;
 },
 _sciDH() //  []
         { []
         }
     {offset
       sciDH: // global
           _sciDI::P64 = P64[Sp];
           if (I64[Sp + 8] == 0) goto ccjnk; else goto ccjmX;
       ccjnk: // global
           I64[Sp + 8] = block_ccjnj_info;
           R1 = _sciDI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucjpT; else goto ccjnl;
       ucjpT: // global
           call _ccjnj(R1) args: 0, res: 0, upd: 0;
       ccjnl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccjmX: // global
           I64[Sp + 8] = block_ccjmV_info;
           R3 = _sciDI::P64;
           R2 = GHC.Unicode.toUpper_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccjnj() //  [R1]
         { []
         }
     {offset
       ccjnj: // global
           if (R1 & 7 == 1) goto ucjpC; else goto ccjnw;
       ucjpC: // global
           Sp = Sp + 8;
           call _ccjnr() args: 0, res: 0, upd: 0;
       ccjnw: // global
           I64[Sp - 16] = block_ccjnu_info;
           _sciDQ::P64 = R1;
           _sciDS::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sciDS::P64;
           P64[Sp] = _sciDQ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucjpI; else goto ccjnx;
       ucjpI: // global
           call _ccjnu(R1) args: 0, res: 0, upd: 0;
       ccjnx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjnj_info" {
     block_ccjnj_info:
         const _ccjnj;
         const 0;
         const 4294967326;
         const Scjc4_srt+104;
 },
 _ccjnu() //  [R1]
         { []
         }
     {offset
       ccjnu: // global
           if (I64[R1 + 7] == 45) goto ccjnF; else goto ccjnE;
       ccjnF: // global
           R2 = P64[Sp + 8];
           R1 = Text.Printf.$fPrintfArgDouble8_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccjnE: // global
           R2 = P64[Sp + 16];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjnu_info" {
     block_ccjnu_info:
         const _ccjnu;
         const 2;
         const 4294967326;
         const Scjc4_srt+104;
 },
 _ccjmV() //  [R1]
         { []
         }
     {offset
       ccjmV: // global
           if (R1 & 7 == 1) goto ucjpB; else goto ccjn8;
       ucjpB: // global
           Sp = Sp + 8;
           call _ccjnr() args: 0, res: 0, upd: 0;
       ccjn8: // global
           I64[Sp - 16] = block_ccjn6_info;
           _sciDK::P64 = R1;
           _sciDM::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sciDM::P64;
           P64[Sp] = _sciDK::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucjpG; else goto ccjn9;
       ucjpG: // global
           call _ccjn6(R1) args: 0, res: 0, upd: 0;
       ccjn9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjmV_info" {
     block_ccjmV_info:
         const _ccjmV;
         const 0;
         const 4294967326;
         const Scjc4_srt+104;
 },
 _ccjnr() //  []
         { []
         }
     {offset
       ccjnr: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccjn6() //  [R1]
         { []
         }
     {offset
       ccjn6: // global
           if (I64[R1 + 7] == 45) goto ccjnh; else goto ccjng;
       ccjnh: // global
           R2 = P64[Sp + 8];
           R1 = Text.Printf.$fPrintfArgDouble8_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccjng: // global
           R2 = P64[Sp + 16];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjn6_info" {
     block_ccjn6_info:
         const _ccjn6;
         const 2;
         const 4294967326;
         const Scjc4_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.043835326 UTC

[section ""data" . Text.Printf.formatRealFloat1_closure" {
     Text.Printf.formatRealFloat1_closure:
         const Text.Printf.formatRealFloat1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.formatRealFloat1_entry() //  [R1]
         { []
         }
     {offset
       ccjrR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccjrS; else goto ccjrT;
       ccjrS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjrT: // global
           (_ccjrM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjrM::I64 == 0) goto ccjrO; else goto ccjrN;
       ccjrO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjrN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjrM::I64;
           I64[Sp - 24] = block_ccjrP_info;
           R2 = lvl6_rccbm_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.formatRealFloat1_info" {
     Text.Printf.formatRealFloat1_info:
         const Text.Printf.formatRealFloat1_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt;
 },
 _ccjrP() //  [R1]
         { []
         }
     {offset
       ccjrP: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccjrP_info" {
     block_ccjrP_info:
         const _ccjrP;
         const 0;
         const 4294967326;
         const Scjc4_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.054650288 UTC

[section ""data" . Text.Printf.$wdfmt_closure" {
     Text.Printf.$wdfmt_closure:
         const Text.Printf.$wdfmt_info;
         const 0;
 },
 Text.Printf.$wdfmt_slow() //  [R1]
         { []
         }
     {offset
       ccjsa: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$wdfmt_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Printf.$wdfmt_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccjsg: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccjsh; else goto ccjsi;
       ccjsh: // global
           R1 = Text.Printf.$wdfmt_closure;
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       ccjsi: // global
           _sciEk::P64 = R6;
           _sciEj::P64 = R5;
           _sciEi::P64 = R4;
           _sciEh::I64 = R3;
           _ccjsl::I64 = R3;
           (_sciEp::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswupper(_ccjsl::I64);
           (_sciEu::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towlower(_sciEh::I64);
           if (_sciEu::I64 > 1114111) goto ccjsx; else goto ccjuH;
       ccjsx: // global
           R2 = _sciEu::I64;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       ccjuH: // global
           if (_sciEu::I64 < 103) goto ucjuM; else goto ucjuO;
       ucjuM: // global
           if (_sciEu::I64 < 102) goto ucjuN; else goto ccjtS;
       ucjuN: // global
           if (_sciEu::I64 < 101) goto ccjty; else goto ccjtH;
       ccjtH: // global
           I64[Sp - 16] = block_ccjtG_info;
           R6 = _sciEk::P64;
           R5 = GHC.Types.False_closure+1;
           R4 = _sciEi::P64;
           R3 = GHC.Float.FFExponent_closure+1;
           R2 = R2;
           I64[Sp - 8] = _sciEp::I64;
           Sp = Sp - 16;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
       ccjtS: // global
           I64[Sp - 40] = block_ccjtR_info;
           R1 = _sciEj::P64;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = _sciEi::P64;
           P64[Sp - 16] = _sciEk::P64;
           I64[Sp - 8] = _sciEp::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucjuW; else goto ccjtU;
       ucjuW: // global
           call _ccjtR(R1) args: 0, res: 0, upd: 0;
       ccjtU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucjuO: // global
           if (_sciEu::I64 >= 104) goto ccjty; else goto ccjuk;
       ccjty: // global
           R1 = Text.Printf.formatRealFloat1_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       ccjuk: // global
           I64[Sp - 40] = block_ccjuj_info;
           R1 = _sciEj::P64;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = _sciEi::P64;
           P64[Sp - 16] = _sciEk::P64;
           I64[Sp - 8] = _sciEp::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucjuX; else goto ccjum;
       ucjuX: // global
           call _ccjuj(R1) args: 0, res: 0, upd: 0;
       ccjum: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wdfmt_info" {
     Text.Printf.$wdfmt_info:
         const Text.Printf.$wdfmt_entry;
         const 0;
         const 15543486644238;
         const 21474836480;
         const Scjc4_srt+64;
         const 133;
         const Text.Printf.$wdfmt_slow;
 },
 _ccjtG() //  [R1]
         { []
         }
     {offset
       ccjtG: // global
           P64[Sp] = R1;
           call _sciEy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjtG_info" {
     block_ccjtG_info:
         const _ccjtG;
         const 65;
         const 73014444062;
         const Scjc4_srt+72;
 },
 _ccjtR() //  [R1]
         { []
         }
     {offset
       ccjtR: // global
           _sciEg::P64 = P64[Sp + 8];
           _sciEi::P64 = P64[Sp + 16];
           _sciEk::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto ccju1; else goto ccjua;
       ccju1: // global
           I64[Sp + 24] = block_ccjtY_info;
           R6 = _sciEk::P64;
           R5 = GHC.Types.False_closure+1;
           R4 = _sciEi::P64;
           R3 = GHC.Float.FFFixed_closure+2;
           R2 = _sciEg::P64;
           Sp = Sp + 24;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
       ccjua: // global
           I64[Sp + 24] = block_ccju8_info;
           R6 = _sciEk::P64;
           R5 = GHC.Types.True_closure+2;
           R4 = _sciEi::P64;
           R3 = GHC.Float.FFFixed_closure+2;
           R2 = _sciEg::P64;
           Sp = Sp + 24;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjtR_info" {
     block_ccjtR_info:
         const _ccjtR;
         const 516;
         const 1172526071838;
         const Scjc4_srt+72;
 },
 _ccjtY() //  [R1]
         { []
         }
     {offset
       ccjtY: // global
           P64[Sp] = R1;
           call _sciEy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjtY_info" {
     block_ccjtY_info:
         const _ccjtY;
         const 65;
         const 73014444062;
         const Scjc4_srt+72;
 },
 _ccju8() //  [R1]
         { []
         }
     {offset
       ccju8: // global
           P64[Sp] = R1;
           call _sciEy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccju8_info" {
     block_ccju8_info:
         const _ccju8;
         const 65;
         const 73014444062;
         const Scjc4_srt+72;
 },
 _ccjuj() //  [R1]
         { []
         }
     {offset
       ccjuj: // global
           _sciEg::P64 = P64[Sp + 8];
           _sciEi::P64 = P64[Sp + 16];
           _sciEk::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto ccjut; else goto ccjuC;
       ccjut: // global
           I64[Sp + 24] = block_ccjuq_info;
           R6 = _sciEk::P64;
           R5 = GHC.Types.False_closure+1;
           R4 = _sciEi::P64;
           R3 = GHC.Float.FFGeneric_closure+3;
           R2 = _sciEg::P64;
           Sp = Sp + 24;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
       ccjuC: // global
           I64[Sp + 24] = block_ccjuA_info;
           R6 = _sciEk::P64;
           R5 = GHC.Types.True_closure+2;
           R4 = _sciEi::P64;
           R3 = GHC.Float.FFGeneric_closure+3;
           R2 = _sciEg::P64;
           Sp = Sp + 24;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjuj_info" {
     block_ccjuj_info:
         const _ccjuj;
         const 516;
         const 1172526071838;
         const Scjc4_srt+72;
 },
 _ccjuq() //  [R1]
         { []
         }
     {offset
       ccjuq: // global
           P64[Sp] = R1;
           call _sciEy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjuq_info" {
     block_ccjuq_info:
         const _ccjuq;
         const 65;
         const 73014444062;
         const Scjc4_srt+72;
 },
 _ccjuA() //  [R1]
         { []
         }
     {offset
       ccjuA: // global
           P64[Sp] = R1;
           call _sciEy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjuA_info" {
     block_ccjuA_info:
         const _ccjuA;
         const 65;
         const 73014444062;
         const Scjc4_srt+72;
 },
 _sciEy() //  []
         { []
         }
     {offset
       sciEy: // global
           _sciEz::P64 = P64[Sp];
           if (I64[Sp + 8] == 0) goto ccjt7; else goto ccjsK;
       ccjt7: // global
           I64[Sp + 8] = block_ccjt6_info;
           R1 = _sciEz::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucjv7; else goto ccjt8;
       ucjv7: // global
           call _ccjt6(R1) args: 0, res: 0, upd: 0;
       ccjt8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccjsK: // global
           I64[Sp + 8] = block_ccjsI_info;
           R3 = _sciEz::P64;
           R2 = GHC.Unicode.toUpper_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccjt6() //  [R1]
         { []
         }
     {offset
       ccjt6: // global
           if (R1 & 7 == 1) goto ucjuV; else goto ccjtj;
       ucjuV: // global
           Sp = Sp + 8;
           call _ccjte() args: 0, res: 0, upd: 0;
       ccjtj: // global
           I64[Sp - 16] = block_ccjth_info;
           _sciEH::P64 = R1;
           _sciEJ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sciEJ::P64;
           P64[Sp] = _sciEH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucjv0; else goto ccjtk;
       ucjv0: // global
           call _ccjth(R1) args: 0, res: 0, upd: 0;
       ccjtk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjt6_info" {
     block_ccjt6_info:
         const _ccjt6;
         const 0;
         const 4294967326;
         const Scjc4_srt+104;
 },
 _ccjth() //  [R1]
         { []
         }
     {offset
       ccjth: // global
           if (I64[R1 + 7] == 45) goto ccjts; else goto ccjtr;
       ccjts: // global
           R2 = P64[Sp + 8];
           R1 = Text.Printf.$fPrintfArgDouble8_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccjtr: // global
           R2 = P64[Sp + 16];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjth_info" {
     block_ccjth_info:
         const _ccjth;
         const 2;
         const 4294967326;
         const Scjc4_srt+104;
 },
 _ccjsI() //  [R1]
         { []
         }
     {offset
       ccjsI: // global
           if (R1 & 7 == 1) goto ucjuU; else goto ccjsV;
       ucjuU: // global
           Sp = Sp + 8;
           call _ccjte() args: 0, res: 0, upd: 0;
       ccjsV: // global
           I64[Sp - 16] = block_ccjsT_info;
           _sciEB::P64 = R1;
           _sciED::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sciED::P64;
           P64[Sp] = _sciEB::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucjuY; else goto ccjsW;
       ucjuY: // global
           call _ccjsT(R1) args: 0, res: 0, upd: 0;
       ccjsW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjsI_info" {
     block_ccjsI_info:
         const _ccjsI;
         const 0;
         const 4294967326;
         const Scjc4_srt+104;
 },
 _ccjte() //  []
         { []
         }
     {offset
       ccjte: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccjsT() //  [R1]
         { []
         }
     {offset
       ccjsT: // global
           if (I64[R1 + 7] == 45) goto ccjt4; else goto ccjt3;
       ccjt4: // global
           R2 = P64[Sp + 8];
           R1 = Text.Printf.$fPrintfArgDouble8_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccjt3: // global
           R2 = P64[Sp + 16];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjsT_info" {
     block_ccjsT_info:
         const _ccjsT;
         const 2;
         const 4294967326;
         const Scjc4_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.080659498 UTC

[section ""cstring" . Text.Printf.$trModule4_bytes" {
     Text.Printf.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.082462732 UTC

[section ""data" . Text.Printf.$trModule3_closure" {
     Text.Printf.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.084198993 UTC

[section ""cstring" . Text.Printf.$trModule2_bytes" {
     Text.Printf.$trModule2_bytes:
         I8[] [84,101,120,116,46,80,114,105,110,116,102]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.085945773 UTC

[section ""data" . Text.Printf.$trModule1_closure" {
     Text.Printf.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.087719652 UTC

[section ""data" . Text.Printf.$trModule_closure" {
     Text.Printf.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.Printf.$trModule3_closure+1;
         const Text.Printf.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.089831526 UTC

[section ""data" . $krep_rccbn_closure" {
     $krep_rccbn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.091530994 UTC

[section ""data" . $krep1_rccbo_closure" {
     $krep1_rccbo_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.093404322 UTC

[section ""data" . $krep2_rccbp_closure" {
     $krep2_rccbp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcHandle_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.095230568 UTC

[section ""data" . $krep3_rccbq_closure" {
     $krep3_rccbq_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.096986025 UTC

[section ""data" . $krep4_rccbr_closure" {
     $krep4_rccbr_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.098782611 UTC

[section ""data" . $krep5_rccbs_closure" {
     $krep5_rccbs_closure:
         const :_con_info;
         const $krep1_rccbo_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.10053439 UTC

[section ""data" . $krep6_rccbt_closure" {
     $krep6_rccbt_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep5_rccbs_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.102910095 UTC

[section ""data" . $krep7_rccbu_closure" {
     $krep7_rccbu_closure:
         const :_con_info;
         const $krep3_rccbq_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.104672494 UTC

[section ""data" . $krep8_rccbv_closure" {
     $krep8_rccbv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep7_rccbu_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.106788387 UTC

[section ""data" . $krep9_rccbw_closure" {
     $krep9_rccbw_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rccbv_closure+1;
         const $krep8_rccbv_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.108568706 UTC

[section ""data" . Text.Printf.$tcHPrintfType1_closure" {
     Text.Printf.$tcHPrintfType1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep4_rccbr_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.110333041 UTC

[section ""data" . $krep10_rccbx_closure" {
     $krep10_rccbx_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.112063633 UTC

[section ""data" . $krep11_rccby_closure" {
     $krep11_rccby_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rccbx_closure+2;
         const $krep3_rccbq_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.113882638 UTC

[section ""data" . $krep12_rccbz_closure" {
     $krep12_rccbz_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rccbq_closure+1;
         const $krep10_rccbx_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.115598245 UTC

[section ""cstring" . Text.Printf.$tcIsChar2_bytes" {
     Text.Printf.$tcIsChar2_bytes:
         I8[] [73,115,67,104,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.117880042 UTC

[section ""data" . Text.Printf.$tcIsChar1_closure" {
     Text.Printf.$tcIsChar1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tcIsChar2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.11961244 UTC

[section ""data" . Text.Printf.$tcIsChar_closure" {
     Text.Printf.$tcIsChar_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tcIsChar1_closure+1;
         const Text.Printf.$tcHPrintfType1_closure+4;
         const 660225335504909605;
         const 5800397900948792736;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.121435483 UTC

[section ""data" . $krep13_rccbA_closure" {
     $krep13_rccbA_closure:
         const :_con_info;
         const $krep10_rccbx_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.123223032 UTC

[section ""data" . $krep14_rccbB_closure" {
     $krep14_rccbB_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Printf.$tcIsChar_closure+1;
         const $krep13_rccbA_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.124945259 UTC

[section ""data" . $krep15_rccbC_closure" {
     $krep15_rccbC_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_rccbz_closure+4;
         const $krep14_rccbB_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.126652124 UTC

[section ""data" . Text.Printf.$tc'C:IsChar1_closure" {
     Text.Printf.$tc'C:IsChar1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_rccby_closure+4;
         const $krep15_rccbC_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.128824335 UTC

[section ""cstring" . Text.Printf.$tc'C:IsChar3_bytes" {
     Text.Printf.$tc'C:IsChar3_bytes:
         I8[] [39,67,58,73,115,67,104,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.131043129 UTC

[section ""data" . Text.Printf.$tc'C:IsChar2_closure" {
     Text.Printf.$tc'C:IsChar2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'C:IsChar3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.13281941 UTC

[section ""data" . Text.Printf.$tc'C:IsChar_closure" {
     Text.Printf.$tc'C:IsChar_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'C:IsChar2_closure+1;
         const Text.Printf.$tc'C:IsChar1_closure+4;
         const 15586488259906363003;
         const 17643381548147423706;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.134595147 UTC

[section ""cstring" . Text.Printf.$tcFormatAdjustment2_bytes" {
     Text.Printf.$tcFormatAdjustment2_bytes:
         I8[] [70,111,114,109,97,116,65,100,106,117,115,116,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.136238718 UTC

[section ""data" . Text.Printf.$tcFormatAdjustment1_closure" {
     Text.Printf.$tcFormatAdjustment1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tcFormatAdjustment2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.138026399 UTC

[section ""data" . Text.Printf.$tcFormatAdjustment_closure" {
     Text.Printf.$tcFormatAdjustment_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tcFormatAdjustment1_closure+1;
         const GHC.Types.krep$*_closure;
         const 7532892403054408380;
         const 17299592949916286280;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.139814915 UTC

[section ""data" . Text.Printf.$tc'LeftAdjust1_closure" {
     Text.Printf.$tc'LeftAdjust1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Printf.$tcFormatAdjustment_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.14161962 UTC

[section ""cstring" . Text.Printf.$tc'LeftAdjust3_bytes" {
     Text.Printf.$tc'LeftAdjust3_bytes:
         I8[] [39,76,101,102,116,65,100,106,117,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.143281825 UTC

[section ""data" . Text.Printf.$tc'LeftAdjust2_closure" {
     Text.Printf.$tc'LeftAdjust2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'LeftAdjust3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.14499403 UTC

[section ""data" . Text.Printf.$tc'LeftAdjust_closure" {
     Text.Printf.$tc'LeftAdjust_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'LeftAdjust2_closure+1;
         const Text.Printf.$tc'LeftAdjust1_closure+1;
         const 3724221440131574524;
         const 12430068224974793646;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.146878026 UTC

[section ""cstring" . Text.Printf.$tc'ZeroPad2_bytes" {
     Text.Printf.$tc'ZeroPad2_bytes:
         I8[] [39,90,101,114,111,80,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.148627071 UTC

[section ""data" . Text.Printf.$tc'ZeroPad1_closure" {
     Text.Printf.$tc'ZeroPad1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'ZeroPad2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.150478688 UTC

[section ""data" . Text.Printf.$tc'ZeroPad_closure" {
     Text.Printf.$tc'ZeroPad_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'ZeroPad1_closure+1;
         const Text.Printf.$tc'LeftAdjust1_closure+1;
         const 4688343247861108158;
         const 7307113320833774212;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.152302183 UTC

[section ""data" . $krep16_rccbD_closure" {
     $krep16_rccbD_closure:
         const :_con_info;
         const Text.Printf.$tc'LeftAdjust1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.154115904 UTC

[section ""data" . $krep17_rccbE_closure" {
     $krep17_rccbE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep16_rccbD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.156458379 UTC

[section ""cstring" . Text.Printf.$tcFormatSign2_bytes" {
     Text.Printf.$tcFormatSign2_bytes:
         I8[] [70,111,114,109,97,116,83,105,103,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.158229026 UTC

[section ""data" . Text.Printf.$tcFormatSign1_closure" {
     Text.Printf.$tcFormatSign1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tcFormatSign2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.159954094 UTC

[section ""data" . Text.Printf.$tcFormatSign_closure" {
     Text.Printf.$tcFormatSign_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tcFormatSign1_closure+1;
         const GHC.Types.krep$*_closure;
         const 35986971025498593;
         const 9833165860459639351;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.161795111 UTC

[section ""data" . Text.Printf.$tc'SignPlus1_closure" {
     Text.Printf.$tc'SignPlus1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Printf.$tcFormatSign_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.163575697 UTC

[section ""cstring" . Text.Printf.$tc'SignPlus3_bytes" {
     Text.Printf.$tc'SignPlus3_bytes:
         I8[] [39,83,105,103,110,80,108,117,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.165959652 UTC

[section ""data" . Text.Printf.$tc'SignPlus2_closure" {
     Text.Printf.$tc'SignPlus2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'SignPlus3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.167702446 UTC

[section ""data" . Text.Printf.$tc'SignPlus_closure" {
     Text.Printf.$tc'SignPlus_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'SignPlus2_closure+1;
         const Text.Printf.$tc'SignPlus1_closure+1;
         const 18302065795158432479;
         const 11830941225366619964;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.169467661 UTC

[section ""cstring" . Text.Printf.$tc'SignSpace2_bytes" {
     Text.Printf.$tc'SignSpace2_bytes:
         I8[] [39,83,105,103,110,83,112,97,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.17115623 UTC

[section ""data" . Text.Printf.$tc'SignSpace1_closure" {
     Text.Printf.$tc'SignSpace1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'SignSpace2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.172921407 UTC

[section ""data" . Text.Printf.$tc'SignSpace_closure" {
     Text.Printf.$tc'SignSpace_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'SignSpace1_closure+1;
         const Text.Printf.$tc'SignPlus1_closure+1;
         const 111286303843533919;
         const 13624428119758319457;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.174780262 UTC

[section ""data" . $krep18_rccbF_closure" {
     $krep18_rccbF_closure:
         const :_con_info;
         const Text.Printf.$tc'SignPlus1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.176575362 UTC

[section ""data" . $krep19_rccbG_closure" {
     $krep19_rccbG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep18_rccbF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.178370263 UTC

[section ""cstring" . Text.Printf.$tcFieldFormat2_bytes" {
     Text.Printf.$tcFieldFormat2_bytes:
         I8[] [70,105,101,108,100,70,111,114,109,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.180189036 UTC

[section ""data" . Text.Printf.$tcFieldFormat1_closure" {
     Text.Printf.$tcFieldFormat1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tcFieldFormat2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.183334263 UTC

[section ""data" . Text.Printf.$tcFieldFormat_closure" {
     Text.Printf.$tcFieldFormat_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tcFieldFormat1_closure+1;
         const GHC.Types.krep$*_closure;
         const 12330325036165183082;
         const 5846211506648458401;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.185183008 UTC

[section ""data" . $krep20_rccbH_closure" {
     $krep20_rccbH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Printf.$tcFieldFormat_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.186931636 UTC

[section ""data" . $krep21_rccbI_closure" {
     $krep21_rccbI_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep20_rccbH_closure+1;
         const $krep9_rccbw_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.188607457 UTC

[section ""data" . $krep22_rccbJ_closure" {
     $krep22_rccbJ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rccbx_closure+2;
         const $krep21_rccbI_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.190481093 UTC

[section ""data" . $krep23_rccbK_closure" {
     $krep23_rccbK_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rccbq_closure+1;
         const $krep20_rccbH_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.192193016 UTC

[section ""data" . $krep24_rccbL_closure" {
     $krep24_rccbL_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rccbv_closure+1;
         const $krep23_rccbK_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.193974434 UTC

[section ""data" . $krep25_rccbM_closure" {
     $krep25_rccbM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rccbn_closure+1;
         const $krep24_rccbL_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.195733068 UTC

[section ""data" . $krep26_rccbN_closure" {
     $krep26_rccbN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep19_rccbG_closure+1;
         const $krep25_rccbM_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.197943227 UTC

[section ""data" . $krep27_rccbO_closure" {
     $krep27_rccbO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_rccbE_closure+1;
         const $krep26_rccbN_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.199667613 UTC

[section ""data" . $krep28_rccbP_closure" {
     $krep28_rccbP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rccbt_closure+1;
         const $krep27_rccbO_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.201399461 UTC

[section ""data" . Text.Printf.$tc'FieldFormat1_closure" {
     Text.Printf.$tc'FieldFormat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rccbt_closure+1;
         const $krep28_rccbP_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.203129481 UTC

[section ""cstring" . Text.Printf.$tc'FieldFormat3_bytes" {
     Text.Printf.$tc'FieldFormat3_bytes:
         I8[] [39,70,105,101,108,100,70,111,114,109,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.204858114 UTC

[section ""data" . Text.Printf.$tc'FieldFormat2_closure" {
     Text.Printf.$tc'FieldFormat2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'FieldFormat3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.206736551 UTC

[section ""data" . Text.Printf.$tc'FieldFormat_closure" {
     Text.Printf.$tc'FieldFormat_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'FieldFormat2_closure+1;
         const Text.Printf.$tc'FieldFormat1_closure+4;
         const 11348432599023007686;
         const 6814357301696130957;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.209232506 UTC

[section ""cstring" . Text.Printf.$tcFormatParse2_bytes" {
     Text.Printf.$tcFormatParse2_bytes:
         I8[] [70,111,114,109,97,116,80,97,114,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.210966209 UTC

[section ""data" . Text.Printf.$tcFormatParse1_closure" {
     Text.Printf.$tcFormatParse1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tcFormatParse2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.212808612 UTC

[section ""data" . Text.Printf.$tcFormatParse_closure" {
     Text.Printf.$tcFormatParse_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tcFormatParse1_closure+1;
         const GHC.Types.krep$*_closure;
         const 5517048358589873764;
         const 8326725038359313810;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.21514496 UTC

[section ""data" . $krep29_rccbQ_closure" {
     $krep29_rccbQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Printf.$tcFormatParse_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.216858397 UTC

[section ""data" . $krep30_rccbR_closure" {
     $krep30_rccbR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rccbv_closure+1;
         const $krep29_rccbQ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.218717545 UTC

[section ""data" . $krep31_rccbS_closure" {
     $krep31_rccbS_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rccbx_closure+2;
         const $krep30_rccbR_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.220538755 UTC

[section ""data" . $krep32_rccbT_closure" {
     $krep32_rccbT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rccbq_closure+1;
         const $krep30_rccbR_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.222328806 UTC

[section ""data" . Text.Printf.$tc'FormatParse1_closure" {
     Text.Printf.$tc'FormatParse1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rccbv_closure+1;
         const $krep32_rccbT_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.22399167 UTC

[section ""cstring" . Text.Printf.$tc'FormatParse3_bytes" {
     Text.Printf.$tc'FormatParse3_bytes:
         I8[] [39,70,111,114,109,97,116,80,97,114,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.225634764 UTC

[section ""data" . Text.Printf.$tc'FormatParse2_closure" {
     Text.Printf.$tc'FormatParse2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'FormatParse3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.227446546 UTC

[section ""data" . Text.Printf.$tc'FormatParse_closure" {
     Text.Printf.$tc'FormatParse_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'FormatParse2_closure+1;
         const Text.Printf.$tc'FormatParse1_closure+4;
         const 549767054447046648;
         const 1116614444935710689;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.229815016 UTC

[section ""data" . $krep33_rccbU_closure" {
     $krep33_rccbU_closure:
         const :_con_info;
         const $krep21_rccbI_closure+4;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.231490125 UTC

[section ""data" . $krep34_rccbV_closure" {
     $krep34_rccbV_closure:
         const :_con_info;
         const $krep30_rccbR_closure+4;
         const $krep33_rccbU_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.233268475 UTC

[section ""data" . $krep35_rccbW_closure" {
     $krep35_rccbW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep34_rccbV_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.235574941 UTC

[section ""data" . $krep36_rccbX_closure" {
     $krep36_rccbX_closure:
         const :_con_info;
         const $krep35_rccbW_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.23739435 UTC

[section ""data" . $krep37_rccbY_closure" {
     $krep37_rccbY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep36_rccbX_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.239129355 UTC

[section ""data" . $krep38_rccbZ_closure" {
     $krep38_rccbZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_rccbY_closure+1;
         const $krep10_rccbx_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.240765615 UTC

[section ""data" . $krep39_rccc0_closure" {
     $krep39_rccc0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rccbv_closure+1;
         const $krep38_rccbZ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.242549771 UTC

[section ""data" . $krep40_rccc1_closure" {
     $krep40_rccc1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rccbp_closure+1;
         const $krep39_rccc0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.244284394 UTC

[section ""cstring" . Text.Printf.$tcPrintfArg2_bytes" {
     Text.Printf.$tcPrintfArg2_bytes:
         I8[] [80,114,105,110,116,102,65,114,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.246514598 UTC

[section ""data" . Text.Printf.$tcPrintfArg1_closure" {
     Text.Printf.$tcPrintfArg1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tcPrintfArg2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.248339772 UTC

[section ""data" . Text.Printf.$tcPrintfArg_closure" {
     Text.Printf.$tcPrintfArg_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tcPrintfArg1_closure+1;
         const Text.Printf.$tcHPrintfType1_closure+4;
         const 14684532792197610005;
         const 5760551473172190061;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.250160491 UTC

[section ""data" . $krep41_rccc2_closure" {
     $krep41_rccc2_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Printf.$tcPrintfArg_closure+1;
         const $krep13_rccbA_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.251869213 UTC

[section ""data" . $krep42_rccc3_closure" {
     $krep42_rccc3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep31_rccbS_closure+4;
         const $krep41_rccc2_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.253680788 UTC

[section ""data" . Text.Printf.$tc'C:PrintfArg1_closure" {
     Text.Printf.$tc'C:PrintfArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_rccbJ_closure+4;
         const $krep42_rccc3_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.255419774 UTC

[section ""cstring" . Text.Printf.$tc'C:PrintfArg3_bytes" {
     Text.Printf.$tc'C:PrintfArg3_bytes:
         I8[] [39,67,58,80,114,105,110,116,102,65,114,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.257135483 UTC

[section ""data" . Text.Printf.$tc'C:PrintfArg2_closure" {
     Text.Printf.$tc'C:PrintfArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'C:PrintfArg3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.258974391 UTC

[section ""data" . Text.Printf.$tc'C:PrintfArg_closure" {
     Text.Printf.$tc'C:PrintfArg_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'C:PrintfArg2_closure+1;
         const Text.Printf.$tc'C:PrintfArg1_closure+4;
         const 11923342243699112506;
         const 8346787778082712340;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.260806861 UTC

[section ""cstring" . Text.Printf.$tcHPrintfType3_bytes" {
     Text.Printf.$tcHPrintfType3_bytes:
         I8[] [72,80,114,105,110,116,102,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.263114607 UTC

[section ""data" . Text.Printf.$tcHPrintfType2_closure" {
     Text.Printf.$tcHPrintfType2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tcHPrintfType3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.264854822 UTC

[section ""data" . Text.Printf.$tcHPrintfType_closure" {
     Text.Printf.$tcHPrintfType_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tcHPrintfType2_closure+1;
         const Text.Printf.$tcHPrintfType1_closure+4;
         const 13104883804062546050;
         const 15477829653093370802;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.267151997 UTC

[section ""data" . $krep43_rccc4_closure" {
     $krep43_rccc4_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Printf.$tcHPrintfType_closure+1;
         const $krep13_rccbA_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.268942299 UTC

[section ""data" . Text.Printf.$tc'C:HPrintfType1_closure" {
     Text.Printf.$tc'C:HPrintfType1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep40_rccc1_closure+4;
         const $krep43_rccc4_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.270705871 UTC

[section ""cstring" . Text.Printf.$tc'C:HPrintfType3_bytes" {
     Text.Printf.$tc'C:HPrintfType3_bytes:
         I8[] [39,67,58,72,80,114,105,110,116,102,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.272378223 UTC

[section ""data" . Text.Printf.$tc'C:HPrintfType2_closure" {
     Text.Printf.$tc'C:HPrintfType2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'C:HPrintfType3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.274166609 UTC

[section ""data" . Text.Printf.$tc'C:HPrintfType_closure" {
     Text.Printf.$tc'C:HPrintfType_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'C:HPrintfType2_closure+1;
         const Text.Printf.$tc'C:HPrintfType1_closure+4;
         const 16716104921226462095;
         const 4043378586122981700;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.275943668 UTC

[section ""cstring" . Text.Printf.$tcPrintfType2_bytes" {
     Text.Printf.$tcPrintfType2_bytes:
         I8[] [80,114,105,110,116,102,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.27791255 UTC

[section ""data" . Text.Printf.$tcPrintfType1_closure" {
     Text.Printf.$tcPrintfType1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tcPrintfType2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.27964023 UTC

[section ""data" . Text.Printf.$tcPrintfType_closure" {
     Text.Printf.$tcPrintfType_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tcPrintfType1_closure+1;
         const Text.Printf.$tcHPrintfType1_closure+4;
         const 16100185319445667829;
         const 10371264040433388740;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.281513049 UTC

[section ""data" . $krep44_rccc5_closure" {
     $krep44_rccc5_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Printf.$tcPrintfType_closure+1;
         const $krep13_rccbA_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.283242255 UTC

[section ""data" . Text.Printf.$tc'C:PrintfType1_closure" {
     Text.Printf.$tc'C:PrintfType1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep39_rccc0_closure+4;
         const $krep44_rccc5_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.28489548 UTC

[section ""cstring" . Text.Printf.$tc'C:PrintfType3_bytes" {
     Text.Printf.$tc'C:PrintfType3_bytes:
         I8[] [39,67,58,80,114,105,110,116,102,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.28660819 UTC

[section ""data" . Text.Printf.$tc'C:PrintfType2_closure" {
     Text.Printf.$tc'C:PrintfType2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Printf.$tc'C:PrintfType3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.288895778 UTC

[section ""data" . Text.Printf.$tc'C:PrintfType_closure" {
     Text.Printf.$tc'C:PrintfType_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Printf.$trModule_closure+1;
         const Text.Printf.$tc'C:PrintfType2_closure+1;
         const Text.Printf.$tc'C:PrintfType1_closure+4;
         const 6199067271817529220;
         const 10070277982064886839;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.290666547 UTC

[section ""cstring" . Text.Printf.$fPrintfArgChar24_bytes" {
     Text.Printf.$fPrintfArgChar24_bytes:
         I8[] [104,104]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.293034815 UTC

[section ""data" . Text.Printf.$fPrintfArgChar23_closure" {
     Text.Printf.$fPrintfArgChar23_closure:
         const Text.Printf.$fPrintfArgChar23_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar23_entry() //  [R1]
         { []
         }
     {offset
       ccjyu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjyv; else goto ccjyw;
       ccjyv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjyw: // global
           (_ccjyr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjyr::I64 == 0) goto ccjyt; else goto ccjys;
       ccjyt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjys: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjyr::I64;
           R2 = Text.Printf.$fPrintfArgChar24_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar23_info" {
     Text.Printf.$fPrintfArgChar23_info:
         const Text.Printf.$fPrintfArgChar23_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.2974525 UTC

[section ""data" . sat_sciEW_closure" {
     sat_sciEW_closure:
         const GHC.Types.I#_con_info;
         const 128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.299138548 UTC

[section ""data" . sat_sciEX_closure" {
     sat_sciEX_closure:
         const :_con_info;
         const sat_sciEW_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.301431101 UTC

[section ""data" . Text.Printf.$fPrintfArgChar22_closure" {
     Text.Printf.$fPrintfArgChar22_closure:
         const Text.Printf.$fPrintfArgChar22_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar22_entry() //  [R1]
         { []
         }
     {offset
       ccjyN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjyO; else goto ccjyP;
       ccjyO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjyP: // global
           (_ccjyK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjyK::I64 == 0) goto ccjyM; else goto ccjyL;
       ccjyM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjyL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjyK::I64;
           R3 = sat_sciEX_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar22_info" {
     Text.Printf.$fPrintfArgChar22_info:
         const Text.Printf.$fPrintfArgChar22_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.305116536 UTC

[section ""data" . Text.Printf.$fPrintfArgChar21_closure" {
     Text.Printf.$fPrintfArgChar21_closure:
         const (,)_con_info;
         const Text.Printf.$fPrintfArgChar23_closure;
         const Text.Printf.$fPrintfArgChar22_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.306911583 UTC

[section ""cstring" . Text.Printf.$fPrintfArgChar20_bytes" {
     Text.Printf.$fPrintfArgChar20_bytes:
         I8[] [104]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.309199002 UTC

[section ""data" . Text.Printf.$fPrintfArgChar19_closure" {
     Text.Printf.$fPrintfArgChar19_closure:
         const Text.Printf.$fPrintfArgChar19_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar19_entry() //  [R1]
         { []
         }
     {offset
       ccjz7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjz8; else goto ccjz9;
       ccjz8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjz9: // global
           (_ccjz4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjz4::I64 == 0) goto ccjz6; else goto ccjz5;
       ccjz6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjz5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjz4::I64;
           R2 = Text.Printf.$fPrintfArgChar20_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar19_info" {
     Text.Printf.$fPrintfArgChar19_info:
         const Text.Printf.$fPrintfArgChar19_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.312999226 UTC

[section ""data" . sat_sciEY_closure" {
     sat_sciEY_closure:
         const GHC.Types.I#_con_info;
         const 32768;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.314785535 UTC

[section ""data" . sat_sciEZ_closure" {
     sat_sciEZ_closure:
         const :_con_info;
         const sat_sciEY_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.317190628 UTC

[section ""data" . Text.Printf.$fPrintfArgChar18_closure" {
     Text.Printf.$fPrintfArgChar18_closure:
         const Text.Printf.$fPrintfArgChar18_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar18_entry() //  [R1]
         { []
         }
     {offset
       ccjzq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjzr; else goto ccjzs;
       ccjzr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjzs: // global
           (_ccjzn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjzn::I64 == 0) goto ccjzp; else goto ccjzo;
       ccjzp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjzo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjzn::I64;
           R3 = sat_sciEZ_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar18_info" {
     Text.Printf.$fPrintfArgChar18_info:
         const Text.Printf.$fPrintfArgChar18_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.321815712 UTC

[section ""data" . Text.Printf.$fPrintfArgChar17_closure" {
     Text.Printf.$fPrintfArgChar17_closure:
         const (,)_con_info;
         const Text.Printf.$fPrintfArgChar19_closure;
         const Text.Printf.$fPrintfArgChar18_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.323495211 UTC

[section ""cstring" . Text.Printf.$fPrintfArgChar16_bytes" {
     Text.Printf.$fPrintfArgChar16_bytes:
         I8[] [108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.326194079 UTC

[section ""data" . Text.Printf.$fPrintfArgChar15_closure" {
     Text.Printf.$fPrintfArgChar15_closure:
         const Text.Printf.$fPrintfArgChar15_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar15_entry() //  [R1]
         { []
         }
     {offset
       ccjzK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjzL; else goto ccjzM;
       ccjzL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjzM: // global
           (_ccjzH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjzH::I64 == 0) goto ccjzJ; else goto ccjzI;
       ccjzJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjzI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjzH::I64;
           R2 = Text.Printf.$fPrintfArgChar16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar15_info" {
     Text.Printf.$fPrintfArgChar15_info:
         const Text.Printf.$fPrintfArgChar15_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.329906391 UTC

[section ""data" . sat_sciF1_closure" {
     sat_sciF1_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.331657399 UTC

[section ""data" . sat_sciF2_closure" {
     sat_sciF2_closure:
         const :_con_info;
         const sat_sciF1_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.33323659 UTC

[section ""data" . sat_sciF0_closure" {
     sat_sciF0_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.334929175 UTC

[section ""data" . sat_sciF3_closure" {
     sat_sciF3_closure:
         const :_con_info;
         const sat_sciF0_closure+1;
         const sat_sciF2_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.337338791 UTC

[section ""data" . Text.Printf.$fPrintfArgChar14_closure" {
     Text.Printf.$fPrintfArgChar14_closure:
         const Text.Printf.$fPrintfArgChar14_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar14_entry() //  [R1]
         { []
         }
     {offset
       ccjA5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjA6; else goto ccjA7;
       ccjA6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjA7: // global
           (_ccjA2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjA2::I64 == 0) goto ccjA4; else goto ccjA3;
       ccjA4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjA3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjA2::I64;
           R3 = sat_sciF3_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar14_info" {
     Text.Printf.$fPrintfArgChar14_info:
         const Text.Printf.$fPrintfArgChar14_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.341015067 UTC

[section ""data" . Text.Printf.$fPrintfArgChar13_closure" {
     Text.Printf.$fPrintfArgChar13_closure:
         const (,)_con_info;
         const Text.Printf.$fPrintfArgChar15_closure;
         const Text.Printf.$fPrintfArgChar14_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.342966608 UTC

[section ""cstring" . Text.Printf.$fPrintfArgChar12_bytes" {
     Text.Printf.$fPrintfArgChar12_bytes:
         I8[] [108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.345173503 UTC

[section ""data" . Text.Printf.$fPrintfArgChar11_closure" {
     Text.Printf.$fPrintfArgChar11_closure:
         const Text.Printf.$fPrintfArgChar11_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar11_entry() //  [R1]
         { []
         }
     {offset
       ccjAp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjAq; else goto ccjAr;
       ccjAq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjAr: // global
           (_ccjAm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjAm::I64 == 0) goto ccjAo; else goto ccjAn;
       ccjAo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjAn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjAm::I64;
           R2 = Text.Printf.$fPrintfArgChar12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar11_info" {
     Text.Printf.$fPrintfArgChar11_info:
         const Text.Printf.$fPrintfArgChar11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.348835384 UTC

[section ""data" . sat_sciF6_closure" {
     sat_sciF6_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.35110377 UTC

[section ""data" . sat_sciF7_closure" {
     sat_sciF7_closure:
         const :_con_info;
         const sat_sciF6_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.352847785 UTC

[section ""data" . sat_sciF5_closure" {
     sat_sciF5_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.354584392 UTC

[section ""data" . sat_sciF8_closure" {
     sat_sciF8_closure:
         const :_con_info;
         const sat_sciF5_closure+1;
         const sat_sciF7_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.356302073 UTC

[section ""data" . sat_sciF4_closure" {
     sat_sciF4_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.358401151 UTC

[section ""data" . sat_sciF9_closure" {
     sat_sciF9_closure:
         const :_con_info;
         const sat_sciF4_closure+1;
         const sat_sciF8_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.360938799 UTC

[section ""data" . Text.Printf.$fPrintfArgChar7_closure" {
     Text.Printf.$fPrintfArgChar7_closure:
         const Text.Printf.$fPrintfArgChar7_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar7_entry() //  [R1]
         { []
         }
     {offset
       ccjAM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjAN; else goto ccjAO;
       ccjAN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjAO: // global
           (_ccjAJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjAJ::I64 == 0) goto ccjAL; else goto ccjAK;
       ccjAL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjAK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjAJ::I64;
           R3 = sat_sciF9_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar7_info" {
     Text.Printf.$fPrintfArgChar7_info:
         const Text.Printf.$fPrintfArgChar7_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.364723603 UTC

[section ""data" . Text.Printf.$fPrintfArgChar10_closure" {
     Text.Printf.$fPrintfArgChar10_closure:
         const (,)_con_info;
         const Text.Printf.$fPrintfArgChar11_closure;
         const Text.Printf.$fPrintfArgChar7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.366492562 UTC

[section ""cstring" . Text.Printf.$fPrintfArgChar9_bytes" {
     Text.Printf.$fPrintfArgChar9_bytes:
         I8[] [76]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.368718497 UTC

[section ""data" . Text.Printf.$fPrintfArgChar8_closure" {
     Text.Printf.$fPrintfArgChar8_closure:
         const Text.Printf.$fPrintfArgChar8_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar8_entry() //  [R1]
         { []
         }
     {offset
       ccjB6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjB7; else goto ccjB8;
       ccjB7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjB8: // global
           (_ccjB3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjB3::I64 == 0) goto ccjB5; else goto ccjB4;
       ccjB5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjB4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjB3::I64;
           R2 = Text.Printf.$fPrintfArgChar9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar8_info" {
     Text.Printf.$fPrintfArgChar8_info:
         const Text.Printf.$fPrintfArgChar8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.372333707 UTC

[section ""data" . Text.Printf.$fPrintfArgChar6_closure" {
     Text.Printf.$fPrintfArgChar6_closure:
         const (,)_con_info;
         const Text.Printf.$fPrintfArgChar8_closure;
         const Text.Printf.$fPrintfArgChar7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.374087123 UTC

[section ""data" . Text.Printf.$fPrintfArgChar5_closure" {
     Text.Printf.$fPrintfArgChar5_closure:
         const :_con_info;
         const Text.Printf.$fPrintfArgChar6_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.375908998 UTC

[section ""data" . Text.Printf.$fPrintfArgChar4_closure" {
     Text.Printf.$fPrintfArgChar4_closure:
         const :_con_info;
         const Text.Printf.$fPrintfArgChar10_closure+1;
         const Text.Printf.$fPrintfArgChar5_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.37864397 UTC

[section ""data" . Text.Printf.$fPrintfArgChar3_closure" {
     Text.Printf.$fPrintfArgChar3_closure:
         const :_con_info;
         const Text.Printf.$fPrintfArgChar13_closure+1;
         const Text.Printf.$fPrintfArgChar4_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.380431877 UTC

[section ""data" . Text.Printf.$fPrintfArgChar2_closure" {
     Text.Printf.$fPrintfArgChar2_closure:
         const :_con_info;
         const Text.Printf.$fPrintfArgChar17_closure+1;
         const Text.Printf.$fPrintfArgChar3_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.382215702 UTC

[section ""data" . Text.Printf.intModifierMap_closure" {
     Text.Printf.intModifierMap_closure:
         const :_con_info;
         const Text.Printf.$fPrintfArgChar21_closure+1;
         const Text.Printf.$fPrintfArgChar2_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.384012833 UTC

[section ""cstring" . lvl7_rccc6_bytes" {
     lvl7_rccc6_bytes:
         I8[] [112,114,105,110,116,102,58,32,117,110,107,110,111,119,110,32,102,111,114,109,97,116,32,109,111,100,105,102,105,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.386666478 UTC

[section ""data" . Text.Printf.$fPrintfArgInt2_closure" {
     Text.Printf.$fPrintfArgInt2_closure:
         const Text.Printf.$fPrintfArgInt2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgInt2_entry() //  [R1]
         { []
         }
     {offset
       ccjBw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccjBx; else goto ccjBy;
       ccjBx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjBy: // global
           (_ccjBr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjBr::I64 == 0) goto ccjBt; else goto ccjBs;
       ccjBt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjBs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjBr::I64;
           I64[Sp - 24] = block_ccjBu_info;
           R2 = lvl7_rccc6_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgInt2_info" {
     Text.Printf.$fPrintfArgInt2_info:
         const Text.Printf.$fPrintfArgInt2_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt;
 },
 _ccjBu() //  [R1]
         { []
         }
     {offset
       ccjBu: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccjBu_info" {
     block_ccjBu_info:
         const _ccjBu;
         const 0;
         const 4294967326;
         const Scjc4_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.392951953 UTC

[section ""data" . Text.Printf.$wfixupMods_closure" {
     Text.Printf.$wfixupMods_closure:
         const Text.Printf.$wfixupMods_info;
         const 0;
 },
 Text.Printf.$wfixupMods_entry() //  [R2, R3]
         { []
         }
     {offset
       ccjBZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjC0; else goto ccjC1;
       ccjC0: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$wfixupMods_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccjC1: // global
           I64[Sp - 16] = block_ccjBS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucjCk; else goto ccjBT;
       ucjCk: // global
           call _ccjBS(R1) args: 0, res: 0, upd: 0;
       ccjBT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wfixupMods_info" {
     Text.Printf.$wfixupMods_info:
         const Text.Printf.$wfixupMods_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const Scjc4_srt+192;
 },
 _ccjBS() //  [R1]
         { []
         }
     {offset
       ccjBS: // global
           if (R1 & 7 == 1) goto ccjBW; else goto ccjBX;
       ccjBW: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccjBX: // global
           I64[Sp + 8] = block_ccjC7_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           Sp = Sp + 8;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjBS_info" {
     block_ccjBS_info:
         const _ccjBS;
         const 1;
         const 21474836510;
         const Scjc4_srt+192;
 },
 _ccjC7() //  [R1]
         { []
         }
     {offset
       ccjC7: // global
           if (R1 & 7 == 1) goto ccjCe; else goto ccjCi;
       ccjCe: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccjCi: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjC7_info" {
     block_ccjC7_info:
         const _ccjC7;
         const 0;
         const 4294967326;
         const Scjc4_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.400849475 UTC

[section ""data" . Text.Printf.fixupMods_closure" {
     Text.Printf.fixupMods_closure:
         const Text.Printf.fixupMods_info;
         const 0;
 },
 Text.Printf.fixupMods_entry() //  [R2, R3]
         { []
         }
     {offset
       ccjCP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjCQ; else goto ccjCR;
       ccjCQ: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.fixupMods_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccjCR: // global
           I64[Sp - 16] = block_ccjCM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucjCV; else goto ccjCN;
       ucjCV: // global
           call _ccjCM(R1) args: 0, res: 0, upd: 0;
       ccjCN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.fixupMods_info" {
     Text.Printf.fixupMods_info:
         const Text.Printf.fixupMods_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const Scjc4_srt+200;
 },
 _ccjCM() //  [R1]
         { []
         }
     {offset
       ccjCM: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 47];
           Sp = Sp + 16;
           call Text.Printf.$wfixupMods_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjCM_info" {
     block_ccjCM_info:
         const _ccjCM;
         const 1;
         const 4294967326;
         const Scjc4_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.412140577 UTC

[section ""data" . Text.Printf.$wparseIntFormat_closure" {
     Text.Printf.$wparseIntFormat_closure:
         const Text.Printf.$wparseIntFormat_info;
         const 0;
 },
 go_sciFt_entry() //  [R1, R2]
         { []
         }
     {offset
       ccjDm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccjDn; else goto ccjDo;
       ccjDn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccjDo: // global
           I64[Sp - 24] = block_ccjDf_info;
           _sciFt::P64 = R1;
           _sciFs::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sciFs::P64;
           P64[Sp - 8] = _sciFt::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucjFd; else goto ccjDg;
       ucjFd: // global
           call _ccjDf(R1) args: 0, res: 0, upd: 0;
       ccjDg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sciFt_info" {
     go_sciFt_info:
         const go_sciFt_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const Scjc4_srt+48;
 },
 _ccjDf() //  [R1]
         { []
         }
     {offset
       ccjDf: // global
           if (R1 & 7 == 1) goto ucjF5; else goto ccjDk;
       ucjF5: // global
           Sp = Sp + 24;
           call _ccjDO() args: 0, res: 0, upd: 0;
       ccjDk: // global
           I64[Sp - 8] = block_ccjDu_info;
           _sciFx::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sciFx::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucjFb; else goto ccjDw;
       ucjFb: // global
           call _ccjDu(R1) args: 0, res: 0, upd: 0;
       ccjDw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjDf_info" {
     block_ccjDf_info:
         const _ccjDf;
         const 2;
         const 4294967326;
         const Scjc4_srt+48;
 },
 _ccjDu() //  [R1]
         { []
         }
     {offset
       ccjDu: // global
           _sciFx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccjDA_info;
           R2 = _sciFx::P64;
           _sciFz::P64 = P64[R1 + 7];
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _sciFz::P64;
           Sp = Sp + 8;
           call go_sciFt_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjDu_info" {
     block_ccjDu_info:
         const _ccjDu;
         const 3;
         const 4294967326;
         const Scjc4_srt+48;
 },
 _ccjDA() //  [R1]
         { []
         }
     {offset
       ccjDA: // global
           if (R1 & 7 == 1) goto ccjDI; else goto ccjEm;
       ccjDI: // global
           _sciFs::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccjDF_info;
           R4 = _sciFs::P64;
           R3 = P64[Sp + 16];
           R2 = GHC.Classes.$fEqChar_closure;
           Sp = Sp + 8;
           call Data.OldList.stripPrefix_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
       ccjEm: // global
           I64[Sp - 8] = block_ccjEb_info;
           _sciFB::P64 = R1;
           R1 = P64[R1 + 6];
           P64[Sp] = _sciFB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucjFe; else goto ccjEc;
       ucjFe: // global
           call _ccjEb(R1) args: 0, res: 0, upd: 0;
       ccjEc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjDA_info" {
     block_ccjDA_info:
         const _ccjDA;
         const 2;
         const 4294967326;
         const Scjc4_srt+48;
 },
 _ccjDF() //  [R1]
         { []
         }
     {offset
       ccjDF: // global
           if (R1 & 7 == 1) goto ucjF9; else goto ccjDT;
       ucjF9: // global
           Sp = Sp + 16;
           call _ccjDO() args: 0, res: 0, upd: 0;
       ccjDT: // global
           I64[Sp] = block_ccjDR_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucjFf; else goto ccjDU;
       ucjFf: // global
           call _ccjDR(R1) args: 0, res: 0, upd: 0;
       ccjDU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjDF_info" {
     block_ccjDF_info:
         const _ccjDF;
         const 1;
         const 4294967326;
         const Scjc4_srt+48;
 },
 _ccjDO() //  []
         { []
         }
     {offset
       ccjDO: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccjDR() //  [R1]
         { []
         }
     {offset
       ccjDR: // global
           if (R1 & 7 == 1) goto ucjFa; else goto ccjE5;
       ucjFa: // global
           Sp = Sp + 16;
           call _ccjEQ() args: 0, res: 0, upd: 0;
       ccjE5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccjE8; else goto ccjE7;
       ccjE8: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccjE7: // global
           _sciFF::P64 = P64[R1 + 6];
           _sciFG::P64 = P64[R1 + 14];
           I64[Hp - 40] = Text.Printf.FormatParse_con_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sciFF::P64;
           P64[Hp - 16] = _sciFG::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjDR_info" {
     block_ccjDR_info:
         const _ccjDR;
         const 1;
         const 4294967326;
         const Scjc4_srt+48;
 },
 _ccjEb() //  [R1]
         { []
         }
     {offset
       ccjEb: // global
           I64[Sp] = block_ccjEg_info;
           R3 = 0;
           R2 = P64[R1 + 7];
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjEb_info" {
     block_ccjEb_info:
         const _ccjEb;
         const 3;
         const 4294967326;
         const Scjc4_srt+48;
 },
 _ccjEg() //  [R1]
         { []
         }
     {offset
       ccjEg: // global
           I64[Sp - 8] = block_ccjEk_info;
           R3 = 0;
           R2 = P64[Sp + 24];
           I64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjEg_info" {
     block_ccjEg_info:
         const _ccjEg;
         const 3;
         const 4294967326;
         const Scjc4_srt+48;
 },
 _ccjEk() //  [R1]
         { []
         }
     {offset
       ccjEk: // global
           if (%MO_S_Lt_W64(I64[Sp + 8], R1)) goto ccjEy; else goto ucjF6;
       ccjEy: // global
           I64[Sp + 8] = block_ccjEw_info;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 32];
           R2 = GHC.Classes.$fEqChar_closure;
           Sp = Sp + 8;
           call Data.OldList.stripPrefix_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
       ucjF6: // global
           Sp = Sp + 16;
           call _ccjEZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjEk_info" {
     block_ccjEk_info:
         const _ccjEk;
         const 68;
         const 4294967326;
         const Scjc4_srt+48;
 },
 _ccjEw() //  [R1]
         { []
         }
     {offset
       ccjEw: // global
           if (R1 & 7 == 1) goto ucjF7; else goto ccjEJ;
       ucjF7: // global
           Sp = Sp + 8;
           call _ccjEZ() args: 0, res: 0, upd: 0;
       ccjEJ: // global
           I64[Sp + 16] = block_ccjEH_info;
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ucjFj; else goto ccjEK;
       ucjFj: // global
           call _ccjEH(R1) args: 0, res: 0, upd: 0;
       ccjEK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjEw_info" {
     block_ccjEw_info:
         const _ccjEw;
         const 131;
         const 4294967326;
         const Scjc4_srt+48;
 },
 _ccjEH() //  [R1]
         { []
         }
     {offset
       ccjEH: // global
           if (R1 & 7 == 1) goto ucjF8; else goto ccjEV;
       ucjF8: // global
           Sp = Sp + 16;
           call _ccjEQ() args: 0, res: 0, upd: 0;
       ccjEV: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccjEY; else goto ccjEX;
       ccjEY: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccjEX: // global
           _sciFU::P64 = P64[R1 + 6];
           _sciFV::P64 = P64[R1 + 14];
           I64[Hp - 40] = Text.Printf.FormatParse_con_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sciFU::P64;
           P64[Hp - 16] = _sciFV::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjEH_info" {
     block_ccjEH_info:
         const _ccjEH;
         const 1;
         const 4294967326;
         const Scjc4_srt+48;
 },
 _ccjEQ() //  []
         { []
         }
     {offset
       ccjEQ: // global
           R1 = Text.Printf.errorShortFormat_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccjEZ() //  []
         { []
         }
     {offset
       ccjEZ: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Printf.$wparseIntFormat_entry() //  [R2]
         { []
         }
     {offset
       ccjFs: // global
           _sciFs::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto ccjFt; else goto ccjFu;
       ccjFu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccjFw; else goto ccjFv;
       ccjFw: // global
           HpAlloc = 16;
           goto ccjFt;
       ccjFt: // global
           R2 = _sciFs::P64;
           R1 = Text.Printf.$wparseIntFormat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccjFv: // global
           I64[Hp - 8] = go_sciFt_info;
           P64[Hp] = _sciFs::P64;
           I64[Sp - 16] = block_ccjFm_info;
           R2 = Text.Printf.intModifierMap_closure+2;
           R1 = Hp - 7;
           P64[Sp - 8] = _sciFs::P64;
           Sp = Sp - 16;
           call go_sciFt_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wparseIntFormat_info" {
     Text.Printf.$wparseIntFormat_info:
         const Text.Printf.$wparseIntFormat_entry;
         const 0;
         const 19140302711291918;
         const 4294967301;
         const Scjc4_srt+48;
 },
 _ccjFm() //  [R1]
         { []
         }
     {offset
       ccjFm: // global
           if (R1 & 7 == 1) goto ccjFp; else goto ccjFq;
       ccjFp: // global
           _sciFs::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccjFz_info;
           R1 = _sciFs::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucjFT; else goto ccjFB;
       ucjFT: // global
           call _ccjFz(R1) args: 0, res: 0, upd: 0;
       ccjFB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccjFq: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjFm_info" {
     block_ccjFm_info:
         const _ccjFm;
         const 1;
         const 4294967326;
         const Scjc4_srt+48;
 },
 _ccjFz() //  [R1]
         { []
         }
     {offset
       ccjFz: // global
           if (R1 & 7 == 1) goto ccjFH; else goto ccjFL;
       ccjFH: // global
           R1 = Text.Printf.errorShortFormat_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       ccjFL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccjFO; else goto ccjFN;
       ccjFO: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccjFN: // global
           _sciFZ::P64 = P64[R1 + 6];
           _sciG0::P64 = P64[R1 + 14];
           I64[Hp - 24] = Text.Printf.FormatParse_con_info;
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           P64[Hp - 8] = _sciFZ::P64;
           P64[Hp] = _sciG0::P64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjFz_info" {
     block_ccjFz_info:
         const _ccjFz;
         const 0;
         const 4294967326;
         const Scjc4_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.441343598 UTC

[section ""data" . Text.Printf.parseIntFormat_closure" {
     Text.Printf.parseIntFormat_closure:
         const Text.Printf.parseIntFormat_info;
         const 0;
 },
 Text.Printf.parseIntFormat_entry() //  [R3]
         { []
         }
     {offset
       ccjHG: // global
           R2 = R3;
           call Text.Printf.$wparseIntFormat_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.parseIntFormat_info" {
     Text.Printf.parseIntFormat_info:
         const Text.Printf.parseIntFormat_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const Scjc4_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.444450581 UTC

[section ""cstring" . lvl8_rccc7_bytes" {
     lvl8_rccc7_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.44695845 UTC

[section ""data" . lvl9_rccc8_closure" {
     lvl9_rccc8_closure:
         const lvl9_rccc8_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_rccc8_entry() //  [R1]
         { []
         }
     {offset
       ccjHU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjHV; else goto ccjHW;
       ccjHV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjHW: // global
           (_ccjHR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjHR::I64 == 0) goto ccjHT; else goto ccjHS;
       ccjHT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjHS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjHR::I64;
           R2 = lvl8_rccc7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_rccc8_info" {
     lvl9_rccc8_info:
         const lvl9_rccc8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.450967935 UTC

[section ""data" . lvl10_rccc9_closure" {
     lvl10_rccc9_closure:
         const lvl10_rccc9_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_rccc9_entry() //  [R1]
         { []
         }
     {offset
       ccjIb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjIc; else goto ccjId;
       ccjIc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjId: // global
           (_ccjI8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjI8::I64 == 0) goto ccjIa; else goto ccjI9;
       ccjIa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjI9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjI8::I64;
           R2 = Text.Printf.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl10_rccc9_info" {
     lvl10_rccc9_info:
         const lvl10_rccc9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.455736094 UTC

[section ""data" . lvl11_rccca_closure" {
     lvl11_rccca_closure:
         const lvl11_rccca_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_rccca_entry() //  [R1]
         { []
         }
     {offset
       ccjIs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjIt; else goto ccjIu;
       ccjIt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjIu: // global
           (_ccjIp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjIp::I64 == 0) goto ccjIr; else goto ccjIq;
       ccjIr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjIq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjIp::I64;
           R2 = Text.Printf.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_rccca_info" {
     lvl11_rccca_info:
         const lvl11_rccca_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.459309924 UTC

[section ""cstring" . lvl12_rcccb_bytes" {
     lvl12_rcccb_bytes:
         I8[] [46,47,84,101,120,116,47,80,114,105,110,116,102,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.462058955 UTC

[section ""data" . lvl13_rcccc_closure" {
     lvl13_rcccc_closure:
         const lvl13_rcccc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_rcccc_entry() //  [R1]
         { []
         }
     {offset
       ccjIK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjIL; else goto ccjIM;
       ccjIL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjIM: // global
           (_ccjIH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjIH::I64 == 0) goto ccjIJ; else goto ccjII;
       ccjIJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjII: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjIH::I64;
           R2 = lvl12_rcccb_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_rcccc_info" {
     lvl13_rcccc_info:
         const lvl13_rcccc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.465556736 UTC

[section ""data" . lvl14_rcccd_closure" {
     lvl14_rcccd_closure:
         const GHC.Types.I#_con_info;
         const 323;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.467197312 UTC

[section ""data" . lvl15_rccce_closure" {
     lvl15_rccce_closure:
         const GHC.Types.I#_con_info;
         const 40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.468865806 UTC

[section ""data" . lvl16_rcccf_closure" {
     lvl16_rcccf_closure:
         const GHC.Types.I#_con_info;
         const 49;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.470652196 UTC

[section ""data" . lvl17_rcccg_closure" {
     lvl17_rcccg_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl10_rccc9_closure;
         const lvl11_rccca_closure;
         const lvl13_rcccc_closure;
         const lvl14_rcccd_closure+1;
         const lvl15_rccce_closure+1;
         const lvl14_rcccd_closure+1;
         const lvl16_rcccf_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.472397509 UTC

[section ""data" . lvl18_rccch_closure" {
     lvl18_rccch_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl9_rccc8_closure;
         const lvl17_rcccg_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.474869155 UTC

[section ""data" . Text.Printf.$fPrintfArgChar1_closure" {
     Text.Printf.$fPrintfArgChar1_closure:
         const Text.Printf.$fPrintfArgChar1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgChar1_entry() //  [R1]
         { []
         }
     {offset
       ccjJ6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjJ7; else goto ccjJ8;
       ccjJ7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjJ8: // global
           (_ccjJ3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjJ3::I64 == 0) goto ccjJ5; else goto ccjJ4;
       ccjJ5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjJ4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjJ3::I64;
           R2 = lvl18_rccch_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar1_info" {
     Text.Printf.$fPrintfArgChar1_info:
         const Text.Printf.$fPrintfArgChar1_entry;
         const 0;
         const 12884901909;
         const Scjc4_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.479282964 UTC

[section ""data" . Text.Printf.$fPrintfArgChar_$cparseFormat_closure" {
     Text.Printf.$fPrintfArgChar_$cparseFormat_closure:
         const Text.Printf.$fPrintfArgChar_$cparseFormat_info;
         const 0;
 },
 Text.Printf.$fPrintfArgChar_$cparseFormat_entry() //  [R3]
         { []
         }
     {offset
       ccjJl: // global
           R2 = R3;
           call Text.Printf.$wparseIntFormat_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgChar_$cparseFormat_info" {
     Text.Printf.$fPrintfArgChar_$cparseFormat_info:
         const Text.Printf.$fPrintfArgChar_$cparseFormat_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const Scjc4_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.482519363 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble5_closure" {
     Text.Printf.$fPrintfArgDouble5_closure:
         const GHC.Types.C#_con_info;
         const 48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.489280902 UTC

[section ""data" . integral_prec_rc8qj_closure" {
     integral_prec_rc8qj_closure:
         const integral_prec_rc8qj_info;
 },
 sat_sciGm_entry() //  [R1]
         { []
         }
     {offset
       ccjKc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjKd; else goto ccjKe;
       ccjKd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjKe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs_sciGi_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciGm_info" {
     sat_sciGm_info:
         const sat_sciGm_entry;
         const 4294967297;
         const 19;
 },
 $wxs_sciGi_entry() //  [R1, R2]
         { []
         }
     {offset
       ccjKi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccjKm; else goto ccjKl;
       ccjKm: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccjKl: // global
           if (R2 == 1) goto ccjKh; else goto ccjKg;
       ccjKh: // global
           _sciGh::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _sciGh::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccjKg: // global
           I64[Hp - 48] = sat_sciGm_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Text.Printf.$fPrintfArgDouble5_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs_sciGi_info" {
     $wxs_sciGi_info:
         const $wxs_sciGi_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 integral_prec_rc8qj_entry() //  [R2, R3]
         { []
         }
     {offset
       ccjKs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccjKt; else goto ccjKu;
       ccjKt: // global
           R3 = R3;
           R2 = R2;
           R1 = integral_prec_rc8qj_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccjKu: // global
           I64[Sp - 16] = block_ccjJx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucjLv; else goto ccjJy;
       ucjLv: // global
           call _ccjJx(R1) args: 0, res: 0, upd: 0;
       ccjJy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . integral_prec_rc8qj_info" {
     integral_prec_rc8qj_info:
         const integral_prec_rc8qj_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccjJx() //  [R1]
         { []
         }
     {offset
       ccjJx: // global
           if (R1 & 7 == 1) goto ccjKp; else goto ccjKq;
       ccjKp: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccjKq: // global
           I64[Sp] = block_ccjJD_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucjLs; else goto ccjJE;
       ucjLs: // global
           call _ccjJD(R1) args: 0, res: 0, upd: 0;
       ccjJE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjJx_info" {
     block_ccjJx_info:
         const _ccjJx;
         const 1;
         const 30;
 },
 _ccjJD() //  [R1]
         { []
         }
     {offset
       ccjJD: // global
           _sciGb::I64 = I64[R1 + 7];
           if (_sciGb::I64 == 0) goto ccjKM; else goto ucjLo;
       ccjKM: // global
           I64[Sp - 8] = block_ccjKL_info;
           R1 = P64[Sp + 8];
           I64[Sp] = _sciGb::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucjLt; else goto ccjKN;
       ucjLt: // global
           call _ccjKL(R1) args: 0, res: 0, upd: 0;
       ccjKN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucjLo: // global
           I64[Sp] = _sciGb::I64;
           call _sciGc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjJD_info" {
     block_ccjJD_info:
         const _ccjJD;
         const 1;
         const 30;
 },
 _ccjKL() //  [R1]
         { []
         }
     {offset
       ccjKL: // global
           if (R1 & 7 == 1) goto ucjLp; else goto ccjKY;
       ucjLp: // global
           Sp = Sp + 8;
           call _sciGc() args: 0, res: 0, upd: 0;
       ccjKY: // global
           I64[Sp - 8] = block_ccjKW_info;
           _sciGq::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sciGq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucjLw; else goto ccjKZ;
       ucjLw: // global
           call _ccjKW(R1) args: 0, res: 0, upd: 0;
       ccjKZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjKL_info" {
     block_ccjKL_info:
         const _ccjKL;
         const 66;
         const 30;
 },
 _ccjKW() //  [R1]
         { []
         }
     {offset
       ccjKW: // global
           if (I64[R1 + 7] == 48) goto ccjLa; else goto ucjLq;
       ccjLa: // global
           _sciGq::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccjL9_info;
           R1 = _sciGq::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucjLy; else goto ccjLb;
       ucjLy: // global
           call _ccjL9(R1) args: 0, res: 0, upd: 0;
       ccjLb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucjLq: // global
           Sp = Sp + 16;
           call _sciGc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjKW_info" {
     block_ccjKW_info:
         const _ccjKW;
         const 131;
         const 30;
 },
 _ccjL9() //  [R1]
         { []
         }
     {offset
       ccjL9: // global
           if (R1 & 7 == 1) goto ccjLh; else goto ucjLr;
       ccjLh: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ucjLr: // global
           Sp = Sp + 8;
           call _sciGc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjL9_info" {
     block_ccjL9_info:
         const _ccjL9;
         const 66;
         const 30;
 },
 _sciGc() //  []
         { []
         }
     {offset
       sciGc: // global
           I64[Sp - 8] = block_ccjJN_info;
           R3 = 0;
           R2 = P64[Sp + 8];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccjJN() //  [R1]
         { []
         }
     {offset
       ccjJN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccjKC; else goto ccjKB;
       ccjKC: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccjKB: // global
           _sciG7::P64 = P64[Sp + 16];
           _sciGf::I64 = I64[Sp + 8] - R1;
           if (%MO_S_Ge_W64(0, _sciGf::I64)) goto ccjKE; else goto ccjKF;
       ccjKE: // global
           Hp = Hp - 40;
           R1 = _sciG7::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccjKF: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Text.Printf.$fPrintfArgDouble5_closure+1;
           P64[Hp - 16] = _sciG7::P64;
           I64[Hp - 8] = $wxs_sciGi_info;
           P64[Hp] = Hp - 30;
           R2 = _sciGf::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call $wxs_sciGi_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjJN_info" {
     block_ccjJN_info:
         const _ccjJN;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.507636717 UTC

[section ""cstring" . lvl19_rccci_bytes" {
     lvl19_rccci_bytes:
         I8[] [84,101,120,116,47,80,114,105,110,116,102,46,104,115,58,55,49,52,58,55,45,51,57,124,40,34,34,44,32,115,41]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.510082821 UTC

[section ""data" . lvl20_rcccj_closure" {
     lvl20_rcccj_closure:
         const lvl20_rcccj_info;
         const 0;
         const 0;
         const 0;
 },
 lvl20_rcccj_entry() //  [R1]
         { []
         }
     {offset
       ccjMO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjMP; else goto ccjMQ;
       ccjMP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjMQ: // global
           (_ccjML::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjML::I64 == 0) goto ccjMN; else goto ccjMM;
       ccjMN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjMM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjML::I64;
           R2 = lvl19_rccci_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.patError_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl20_rcccj_info" {
     lvl20_rcccj_info:
         const lvl20_rcccj_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.514787243 UTC

[section ""data" . Text.Printf.formatChar2_closure" {
     Text.Printf.formatChar2_closure:
         const Text.Printf.formatChar2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.formatChar2_entry() //  [R1]
         { []
         }
     {offset
       ccjN5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjN6; else goto ccjN7;
       ccjN6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjN7: // global
           (_ccjN2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjN2::I64 == 0) goto ccjN4; else goto ccjN3;
       ccjN4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjN3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjN2::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.formatChar2_info" {
     Text.Printf.formatChar2_info:
         const Text.Printf.formatChar2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.518719714 UTC

[section ""data" . sat_sciGx_closure" {
     sat_sciGx_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.520536843 UTC

[section ""data" . sat_sciGy_closure" {
     sat_sciGy_closure:
         const :_con_info;
         const sat_sciGx_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.5230678 UTC

[section ""data" . lvl21_rccck_closure" {
     lvl21_rccck_closure:
         const lvl21_rccck_info;
         const 0;
         const 0;
         const 0;
 },
 lvl21_rccck_entry() //  [R1]
         { []
         }
     {offset
       ccjNq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjNr; else goto ccjNs;
       ccjNr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjNs: // global
           (_ccjNn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccjNn::I64 == 0) goto ccjNp; else goto ccjNo;
       ccjNp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccjNo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccjNn::I64;
           R3 = sat_sciGy_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl21_rccck_info" {
     lvl21_rccck_info:
         const lvl21_rccck_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.537592475 UTC

[section ""data" . $wfmtu_rcccl_closure" {
     $wfmtu_rcccl_closure:
         const $wfmtu_rcccl_info;
         const 0;
 },
 sat_sciGN_entry() //  [R1]
         { []
         }
     {offset
       ccjO9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccjOa; else goto ccjOb;
       ccjOa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjOb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 24];
           R5 = GHC.Show.intToDigit_closure+1;
           R4 = P64[R1 + 16];
           R3 = GHC.Show.$fShowInteger_closure;
           R2 = GHC.Real.$fIntegralInteger_closure;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 24;
           call Numeric.showIntAtBase_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 32, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciGN_info" {
     sat_sciGN_info:
         const sat_sciGN_entry;
         const 2;
         const 64424509458;
         const Scjc4_srt+264;
 },
 sat_sciGS_entry() //  [R1]
         { []
         }
     {offset
       ccjOs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjOt; else goto ccjOu;
       ccjOt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjOu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call integral_prec_rc8qj_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciGS_info" {
     sat_sciGS_info:
         const sat_sciGS_entry;
         const 2;
         const 18;
 },
 fmtu'_sciGF_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccjOC: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccjOD; else goto ucjPH;
       ccjOD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ucjPH: // global
           P64[Sp - 32] = R1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call _ccjNN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . fmtu'_sciGF_info" {
     fmtu'_sciGF_info:
         const fmtu'_sciGF_entry;
         const 1;
         const 1095216660489;
         const 12884901911;
         const Scjc4_srt+264;
 },
 _ccjNN() //  []
         { []
         }
     {offset
       ccjNN: // global
           _sciGz::P64 = P64[P64[Sp] + 5];
           I64[Sp - 8] = block_ccjOv_info;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sciGz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucjPO; else goto ccjOw;
       ucjPO: // global
           call _ccjOv(R1) args: 0, res: 0, upd: 0;
       ccjOw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccjOv() //  [R1]
         { []
         }
     {offset
       ccjOv: // global
           if (R1 & 7 == 1) goto ucjPI; else goto ccjOA;
       ucjPI: // global
           Sp = Sp + 8;
           call _sciGJ() args: 0, res: 0, upd: 0;
       ccjOA: // global
           I64[Sp - 8] = block_ccjPe_info;
           R3 = Text.Printf.formatChar2_closure;
           R2 = P64[Sp + 32];
           P64[Sp] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjOv_info" {
     block_ccjOv_info:
         const _ccjOv;
         const 4;
         const 1095216660510;
         const Scjc4_srt+264;
 },
 _ccjPe() //  [R1]
         { []
         }
     {offset
       ccjPe: // global
           if (R1 == 1) goto ccjPy; else goto ucjPJ;
       ccjPy: // global
           _sciGU::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccjPo_info;
           R3 = _sciGU::P64;
           R2 = lvl21_rccck_closure;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       ucjPJ: // global
           Sp = Sp + 16;
           call _sciGJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjPe_info" {
     block_ccjPe_info:
         const _ccjPe;
         const 5;
         const 1095216660510;
         const Scjc4_srt+264;
 },
 _ccjPo() //  [R1]
         { []
         }
     {offset
       ccjPo: // global
           I64[Sp] = block_ccjPs_info;
           R2 = R1;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjPo_info" {
     block_ccjPo_info:
         const _ccjPo;
         const 260;
         const 1095216660510;
         const Scjc4_srt+264;
 },
 _ccjPs() //  [R1]
         { []
         }
     {offset
       ccjPs: // global
           I64[Sp] = block_ccjPw_info;
           R3 = P64[Sp + 32];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjPs_info" {
     block_ccjPs_info:
         const _ccjPs;
         const 260;
         const 1095216660510;
         const Scjc4_srt+264;
 },
 _ccjPw() //  [R1]
         { []
         }
     {offset
       ccjPw: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = GHC.Base.Nothing_closure+1;
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _ccjNN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjPw_info" {
     block_ccjPw_info:
         const _ccjPw;
         const 772;
         const 1095216660510;
         const Scjc4_srt+264;
 },
 _sciGJ() //  []
         { []
         }
     {offset
       sciGJ: // global
           I64[Sp - 8] = block_ccjNV_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucjPW; else goto ccjNW;
       ucjPW: // global
           call _ccjNV(R1) args: 0, res: 0, upd: 0;
       ccjNW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccjNV() //  [R1]
         { []
         }
     {offset
       ccjNV: // global
           _sciGI::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto ccjOI; else goto ccjOT;
       ccjOI: // global
           I64[Sp + 16] = block_ccjO0_info;
           R3 = Text.Printf.formatChar2_closure;
           R2 = _sciGI::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       ccjOT: // global
           I64[Sp] = block_ccjOe_info;
           R3 = Text.Printf.formatChar2_closure;
           R2 = _sciGI::P64;
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjNV_info" {
     block_ccjNV_info:
         const _ccjNV;
         const 132;
         const 1095216660510;
         const Scjc4_srt+264;
 },
 _ccjO0() //  [R1]
         { []
         }
     {offset
       ccjO0: // global
           if (R1 == 1) goto ccjOO; else goto ucjPN;
       ccjOO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccjOR; else goto ccjOQ;
       ccjOR: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccjOQ: // global
           I64[Hp - 40] = sat_sciGN_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ucjPN: // global
           Sp = Sp + 24;
           call _ccjP3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjO0_info" {
     block_ccjO0_info:
         const _ccjO0;
         const 2;
         const 64424509470;
         const Scjc4_srt+264;
 },
 _ccjOe() //  [R1]
         { []
         }
     {offset
       ccjOe: // global
           if (R1 == 1) goto ccjOZ; else goto ucjPL;
       ccjOZ: // global
           I64[Sp + 16] = block_ccjOj_info;
           R4 = P64[Sp + 32];
           R3 = GHC.Base.Nothing_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call fmtu'_sciGF_entry(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       ucjPL: // global
           Sp = Sp + 40;
           call _ccjP3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjOe_info" {
     block_ccjOe_info:
         const _ccjOe;
         const 132;
         const 1095216660510;
         const Scjc4_srt+264;
 },
 _ccjOj() //  [R1]
         { []
         }
     {offset
       ccjOj: // global
           if (R1 & 7 == 1) goto ucjPM; else goto ccjP5;
       ucjPM: // global
           Sp = Sp + 24;
           call _ccjP3() args: 0, res: 0, upd: 0;
       ccjP5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccjP8; else goto ccjP7;
       ccjP8: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccjP7: // global
           _sciGR::P64 = P64[R1 + 6];
           I64[Hp - 40] = sat_sciGS_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sciGR::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjOj_info" {
     block_ccjOj_info:
         const _ccjOj;
         const 130;
         const 30;
 },
 _ccjP3() //  []
         { []
         }
     {offset
       ccjP3: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 s_sciH3_entry() //  [R1]
         { []
         }
     {offset
       ccjQc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccjQd; else goto ccjQe;
       ccjQd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjQe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccjQ3_info;
           R6 = P64[R1 + 40];
           R5 = P64[R1 + 32];
           R4 = P64[R1 + 24];
           R3 = GHC.Base.Nothing_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . s_sciH3_info" {
     s_sciH3_info:
         const s_sciH3_entry;
         const 4;
         const 12884901903;
         const Scjc4_srt+328;
 },
 _ccjQ3() //  [R1, R2]
         { []
         }
     {offset
       ccjQ3: // global
           I64[Sp - 8] = block_ccjQ5_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucjQm; else goto ccjQ6;
       ucjQm: // global
           call _ccjQ5(R1) args: 0, res: 0, upd: 0;
       ccjQ6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccjQ3_info" {
     block_ccjQ3_info:
         const _ccjQ3;
         const 0;
         const 4294967326;
         const Scjc4_srt+328;
 },
 _ccjQ5() //  [R1]
         { []
         }
     {offset
       ccjQ5: // global
           if (R1 & 7 == 1) goto ccjQ9; else goto ccjQa;
       ccjQ9: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ccjQa: // global
           R1 = lvl20_rcccj_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccjQ5_info" {
     block_ccjQ5_info:
         const _ccjQ5;
         const 1;
         const 4294967326;
         const Scjc4_srt+328;
 },
 $wfmtu_rcccl_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccjQr: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccjQs; else goto ccjQt;
       ccjQs: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wfmtu_rcccl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccjQt: // global
           I64[Sp - 40] = block_ccjNG_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucjRO; else goto ccjNH;
       ucjRO: // global
           call _ccjNG(R1) args: 0, res: 0, upd: 0;
       ccjNH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wfmtu_rcccl_info" {
     $wfmtu_rcccl_info:
         const $wfmtu_rcccl_entry;
         const 0;
         const 8791798054926;
         const 21474836505;
         const Scjc4_srt+264;
 },
 _ccjNG() //  [R1]
         { []
         }
     {offset
       ccjNG: // global
           _sciGz::P64 = P64[Sp + 8];
           _sciGB::P64 = P64[Sp + 16];
           _sciGC::P64 = P64[Sp + 24];
           _sciGD::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto ccjQo; else goto ccjQp;
       ccjQo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccjQx; else goto ccjQw;
       ccjQx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccjQw: // global
           I64[Hp - 8] = fmtu'_sciGF_info;
           P64[Hp] = _sciGz::P64;
           I64[Sp + 32] = block_ccjQu_info;
           R4 = _sciGD::P64;
           R3 = _sciGC::P64;
           R2 = _sciGB::P64;
           R1 = Hp - 5;
           Sp = Sp + 32;
           call fmtu'_sciGF_entry(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       ccjQp: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccjQL; else goto ccjQK;
       ccjQL: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccjQK: // global
           _sciH2::P64 = P64[R1 + 6];
           I64[Hp - 40] = s_sciH3_info;
           P64[Hp - 24] = _sciGz::P64;
           P64[Hp - 16] = _sciGB::P64;
           P64[Hp - 8] = _sciGC::P64;
           P64[Hp] = _sciGD::P64;
           I64[Sp + 24] = block_ccjQI_info;
           R1 = _sciH2::P64;
           P64[Sp + 32] = Hp - 40;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto ucjRN; else goto ccjQM;
       ucjRN: // global
           call _ccjQI(R1) args: 0, res: 0, upd: 0;
       ccjQM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjNG_info" {
     block_ccjNG_info:
         const _ccjNG;
         const 4;
         const 8791798054942;
         const Scjc4_srt+264;
 },
 _ccjQu() //  [R1]
         { []
         }
     {offset
       ccjQu: // global
           if (R1 & 7 == 1) goto ccjQD; else goto ccjQH;
       ccjQD: // global
           R1 = Text.Printf.errorBadArgument_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       ccjQH: // global
           R2 = P64[R1 + 6];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjQu_info" {
     block_ccjQu_info:
         const _ccjQu;
         const 0;
         const 4294967326;
         const Scjc4_srt+344;
 },
 _ccjQI() //  [R1]
         { []
         }
     {offset
       ccjQI: // global
           if (R1 & 7 == 1) goto ccjQS; else goto ccjQX;
       ccjQS: // global
           R2 = P64[Sp + 8];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccjQX: // global
           I64[Sp - 16] = block_ccjQV_info;
           _sciHb::P64 = R1;
           _sciHd::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sciHd::P64;
           P64[Sp] = _sciHb::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucjRP; else goto ccjQY;
       ucjRP: // global
           call _ccjQV(R1) args: 0, res: 0, upd: 0;
       ccjQY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjQI_info" {
     block_ccjQI_info:
         const _ccjQI;
         const 1;
         const 30;
 },
 _ccjQV() //  [R1]
         { []
         }
     {offset
       ccjQV: // global
           if (I64[R1 + 7] == 48) goto ccjR9; else goto ucjRL;
       ccjR9: // global
           _sciHd::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccjR8_info;
           R1 = _sciHd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucjRQ; else goto ccjRa;
       ucjRQ: // global
           call _ccjR8(R1) args: 0, res: 0, upd: 0;
       ccjRa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucjRL: // global
           Sp = Sp + 16;
           call _ccjRG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjQV_info" {
     block_ccjQV_info:
         const _ccjQV;
         const 3;
         const 30;
 },
 _ccjR8() //  [R1]
         { []
         }
     {offset
       ccjR8: // global
           if (R1 & 7 == 1) goto ccjRh; else goto ucjRM;
       ccjRh: // global
           I64[Sp] = block_ccjRe_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto ucjRS; else goto ccjRi;
       ucjRS: // global
           call _ccjRe(R1) args: 0, res: 0, upd: 0;
       ccjRi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucjRM: // global
           Sp = Sp + 8;
           call _ccjRG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjR8_info" {
     block_ccjR8_info:
         const _ccjR8;
         const 2;
         const 30;
 },
 _ccjRe() //  [R1]
         { []
         }
     {offset
       ccjRe: // global
           if (R1 & 7 == 1) goto ccjRo; else goto ccjRt;
       ccjRo: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccjRt: // global
           I64[Sp] = block_ccjRr_info;
           _sciHi::P64 = R1;
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _sciHi::P64;
           if (R1 & 7 != 0) goto ucjRU; else goto ccjRu;
       ucjRU: // global
           call _ccjRr(R1) args: 0, res: 0, upd: 0;
       ccjRu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjRe_info" {
     block_ccjRe_info:
         const _ccjRe;
         const 130;
         const 30;
 },
 _ccjRr() //  [R1]
         { []
         }
     {offset
       ccjRr: // global
           _sciHi::P64 = P64[Sp + 16];
           if (I64[R1 + 7] == 48) goto ccjRC; else goto ccjRB;
       ccjRC: // global
           R2 = _sciHi::P64;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccjRB: // global
           R2 = _sciHi::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjRr_info" {
     block_ccjRr_info:
         const _ccjRr;
         const 2;
         const 30;
 },
 _ccjRG() //  []
         { []
         }
     {offset
       ccjRG: // global
           R2 = P64[Sp + 8];
           R1 = P64[Sp];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.587938005 UTC

[section ""data" . $wfmti_rcccm_closure" {
     $wfmti_rcccm_closure:
         const $wfmti_rcccm_info;
         const 0;
 },
 sat_sciHx_entry() //  [R1]
         { []
         }
     {offset
       ccjUV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccjUW; else goto ccjUX;
       ccjUW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjUX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccjUS_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 24];
           R2 = 0;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciHx_info" {
     sat_sciHx_info:
         const sat_sciHx_entry;
         const 2;
         const 4294967314;
         const Scjc4_srt+352;
 },
 _ccjUS() //  [R1, R2]
         { []
         }
     {offset
       ccjUS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccjV0; else goto ccjUZ;
       ccjV0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccjUZ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 14;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call integral_prec_rc8qj_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccjUS_info" {
     block_ccjUS_info:
         const _ccjUS;
         const 1;
         const 30;
 },
 sat_sciHD_entry() //  [R1]
         { []
         }
     {offset
       ccjV9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccjVf; else goto ccjVg;
       ccjVf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjVg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccjV7_info;
           R2 = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciHD_info" {
     sat_sciHD_info:
         const sat_sciHD_entry;
         const 2;
         const 4294967314;
         const Scjc4_srt+352;
 },
 _ccjV7() //  [R1]
         { []
         }
     {offset
       ccjV7: // global
           I64[Sp] = block_ccjVc_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = R1;
           R2 = 0;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccjV7_info" {
     block_ccjV7_info:
         const _ccjV7;
         const 1;
         const 4294967326;
         const Scjc4_srt+352;
 },
 _ccjVc() //  [R1, R2]
         { []
         }
     {offset
       ccjVc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccjVk; else goto ccjVj;
       ccjVk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccjVj: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 14;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call integral_prec_rc8qj_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccjVc_info" {
     block_ccjVc_info:
         const _ccjVc;
         const 1;
         const 30;
 },
 section ""relreadonly" . ucjVx_srtd" {
     ucjVx_srtd:
         const Scjc4_srt+104;
         const 33;
         const 6509559809;
 },
 $wfmti_rcccm_entry() //  [R2, R3]
         { []
         }
     {offset
       ccjVo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccjVp; else goto ccjVq;
       ccjVp: // global
           R3 = R3;
           R2 = R2;
           R1 = $wfmti_rcccm_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccjVq: // global
           I64[Sp - 24] = block_ccjUK_info;
           _sciHr::P64 = R3;
           R3 = Text.Printf.formatChar2_closure;
           _sciHq::P64 = R2;
           R2 = _sciHr::P64;
           P64[Sp - 16] = _sciHq::P64;
           P64[Sp - 8] = _sciHr::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wfmti_rcccm_info" {
     $wfmti_rcccm_info:
         const $wfmti_rcccm_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ucjVx_srtd;
 },
 _ccjUK() //  [R1]
         { []
         }
     {offset
       ccjUK: // global
           _sciHq::P64 = P64[Sp + 8];
           _sciHr::P64 = P64[Sp + 16];
           if (R1 == 1) goto ccjVn; else goto ccjVm;
       ccjVn: // global
           Hp = Hp + 32;
           _sciHs::I64 = R1;
           if (Hp > HpLim) (likely: False) goto ccjVw; else goto ccjVv;
       ccjVv: // global
           I64[Hp - 24] = sat_sciHD_info;
           P64[Hp - 8] = _sciHq::P64;
           P64[Hp] = _sciHr::P64;
           R2 = Hp - 24;
           R1 = Text.Printf.$fPrintfArgDouble8_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       ccjVm: // global
           Hp = Hp + 32;
           _sciHs::I64 = R1;
           if (Hp > HpLim) (likely: False) goto ccjVw; else goto ccjVs;
       ccjVw: // global
           HpAlloc = 32;
           R1 = _sciHs::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccjVs: // global
           I64[Hp - 24] = sat_sciHx_info;
           P64[Hp - 8] = _sciHq::P64;
           P64[Hp] = _sciHr::P64;
           R2 = Hp - 24;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjUK_info" {
     block_ccjUK_info:
         const _ccjUK;
         const 2;
         const 9223372041149743134;
         const Scjc4_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.603079194 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble6_closure" {
     Text.Printf.$fPrintfArgDouble6_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.614175786 UTC

[section ""data" . Text.Printf.$wadjust_closure" {
     Text.Printf.$wadjust_closure:
         const Text.Printf.$wadjust_info;
 },
 x1_sciHT_entry() //  [R1]
         { []
         }
     {offset
       ccjX6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccjX7; else goto ccjX8;
       ccjX7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjX8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccjWZ_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucjXw; else goto ccjX0;
       ucjXw: // global
           call _ccjWZ(R1) args: 0, res: 0, upd: 0;
       ccjX0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . x1_sciHT_info" {
     x1_sciHT_info:
         const x1_sciHT_entry;
         const 1;
         const 16;
 },
 _ccjWZ() //  [R1]
         { []
         }
     {offset
       ccjWZ: // global
           if (R1 & 7 == 1) goto ucjXs; else goto ccjX4;
       ucjXs: // global
           Sp = Sp + 8;
           call _ccjXm() args: 0, res: 0, upd: 0;
       ccjX4: // global
           I64[Sp] = block_ccjXe_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucjXu; else goto ccjXg;
       ucjXu: // global
           call _ccjXe(R1) args: 0, res: 0, upd: 0;
       ccjXg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccjWZ_info" {
     block_ccjWZ_info:
         const _ccjWZ;
         const 0;
         const 30;
 },
 _ccjXe() //  [R1]
         { []
         }
     {offset
       ccjXe: // global
           if (R1 & 7 == 1) goto ucjXt; else goto ccjXq;
       ucjXt: // global
           Sp = Sp + 8;
           call _ccjXm() args: 0, res: 0, upd: 0;
       ccjXq: // global
           R1 = Text.Printf.$fPrintfArgDouble5_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccjXe_info" {
     block_ccjXe_info:
         const _ccjXe;
         const 0;
         const 30;
 },
 _ccjXm() //  []
         { []
         }
     {offset
       ccjXm: // global
           R1 = Text.Printf.$fPrintfArgDouble6_closure+1;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sciI2_entry() //  [R1]
         { []
         }
     {offset
       ccjXM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccjXN; else goto ccjXO;
       ccjXN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjXO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs_sciHY_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciI2_info" {
     sat_sciI2_info:
         const sat_sciI2_entry;
         const 4294967297;
         const 19;
 },
 $wxs_sciHY_entry() //  [R1, R2]
         { []
         }
     {offset
       ccjXS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccjXW; else goto ccjXV;
       ccjXW: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccjXV: // global
           if (R2 == 1) goto ccjXR; else goto ccjXQ;
       ccjXR: // global
           _sciHX::P64 = P64[R1 + 15];
           Hp = Hp - 56;
           R1 = _sciHX::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccjXQ: // global
           _sciHT::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sciI2_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sciHT::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs_sciHY_info" {
     $wxs_sciHY_info:
         const $wxs_sciHY_entry;
         const 2;
         const 11;
         const 4294967300;
 },
 fill_sciHI_entry() //  [R1]
         { []
         }
     {offset
       ccjY2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccjY3; else goto ccjY4;
       ccjY3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccjY4: // global
           I64[Sp - 32] = block_ccjWo_info;
           _sciHF::P64 = P64[R1 + 24];
           _sciHG::P64 = P64[R1 + 32];
           _sciHH::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sciHF::P64;
           P64[Sp - 16] = _sciHG::P64;
           P64[Sp - 8] = _sciHH::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucjYk; else goto ccjWp;
       ucjYk: // global
           call _ccjWo(R1) args: 0, res: 0, upd: 0;
       ccjWp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . fill_sciHI_info" {
     fill_sciHI_info:
         const fill_sciHI_entry;
         const 4;
         const 15;
 },
 _ccjWo() //  [R1]
         { []
         }
     {offset
       ccjWo: // global
           if (R1 & 7 == 1) goto ccjXZ; else goto ccjY0;
       ccjXZ: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccjY0: // global
           I64[Sp] = block_ccjWu_info;
           R3 = 0;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 6];
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjWo_info" {
     block_ccjWo_info:
         const _ccjWo;
         const 3;
         const 30;
 },
 _ccjWu() //  [R1]
         { []
         }
     {offset
       ccjWu: // global
           I64[Sp] = block_ccjWy_info;
           R3 = 0;
           R2 = P64[Sp + 24];
           I64[Sp + 24] = R1;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjWu_info" {
     block_ccjWu_info:
         const _ccjWu;
         const 3;
         const 30;
 },
 _ccjWy() //  [R1]
         { []
         }
     {offset
       ccjWy: // global
           I64[Sp] = block_ccjWC_info;
           _sciHM::I64 = R1;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sciHM::I64;
           if (R1 & 7 != 0) goto ucjYj; else goto ccjWD;
       ucjYj: // global
           call _ccjWC(R1) args: 0, res: 0, upd: 0;
       ccjWD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjWy_info" {
     block_ccjWy_info:
         const _ccjWy;
         const 259;
         const 30;
 },
 _ccjWC() //  [R1]
         { []
         }
     {offset
       ccjWC: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccjYc; else goto ccjYb;
       ccjYc: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccjYb: // global
           _sciHO::I64 = I64[R1 + 7];
           _sciHP::I64 = I64[Sp + 24] + I64[Sp + 16];
           if (%MO_S_Ge_W64(_sciHP::I64,
                            _sciHO::I64)) goto ccjYg; else goto ccjYi;
       ccjYi: // global
           _sciHR::I64 = _sciHO::I64 - _sciHP::I64;
           if (%MO_S_Ge_W64(0, _sciHR::I64)) goto ccjYg; else goto ccjYh;
       ccjYg: // global
           Hp = Hp - 72;
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccjYh: // global
           I64[Hp - 64] = x1_sciHT_info;
           P64[Hp - 48] = P64[Sp + 8];
           I64[Hp - 40] = :_con_info;
           _ccjWV::P64 = Hp - 64;
           P64[Hp - 32] = _ccjWV::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = $wxs_sciHY_info;
           P64[Hp - 8] = _ccjWV::P64;
           P64[Hp] = Hp - 38;
           R2 = _sciHR::I64;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call $wxs_sciHY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjWC_info" {
     block_ccjWC_info:
         const _ccjWC;
         const 387;
         const 30;
 },
 sat_sciI5_entry() //  [R1]
         { []
         }
     {offset
       ccjYz: // global
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciI5_info" {
     sat_sciI5_info:
         const sat_sciI5_entry;
         const 2;
         const 18;
 },
 sat_sciI8_entry() //  [R1]
         { []
         }
     {offset
       ccjYN: // global
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciI8_info" {
     sat_sciI8_info:
         const sat_sciI8_entry;
         const 2;
         const 18;
 },
 sat_sciI9_entry() //  [R1]
         { []
         }
     {offset
       ccjYW: // global
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciI9_info" {
     sat_sciI9_info:
         const sat_sciI9_entry;
         const 2;
         const 18;
 },
 sat_sciId_entry() //  [R1]
         { []
         }
     {offset
       ccjZe: // global
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciId_info" {
     sat_sciId_info:
         const sat_sciId_entry;
         const 2;
         const 18;
 },
 Text.Printf.$wadjust_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       ccjZl: // global
           _sciHH::P64 = R5;
           _sciHG::P64 = R4;
           _sciHF::P64 = R3;
           _sciHE::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto ccjZm; else goto ccjZn;
       ccjZn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccjZp; else goto ccjZo;
       ccjZp: // global
           HpAlloc = 48;
           goto ccjZm;
       ccjZm: // global
           R5 = _sciHH::P64;
           R4 = _sciHG::P64;
           R3 = _sciHF::P64;
           R2 = _sciHE::P64;
           R1 = Text.Printf.$wadjust_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccjZo: // global
           I64[Hp - 40] = fill_sciHI_info;
           P64[Hp - 24] = _sciHE::P64;
           P64[Hp - 16] = _sciHF::P64;
           P64[Hp - 8] = _sciHG::P64;
           P64[Hp] = _sciHH::P64;
           I64[Sp - 40] = block_ccjYZ_info;
           R1 = _sciHF::P64;
           P64[Sp - 32] = Hp - 40;
           P64[Sp - 24] = _sciHF::P64;
           P64[Sp - 16] = _sciHG::P64;
           P64[Sp - 8] = _sciHH::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uck02; else goto ccjZ0;
       uck02: // global
           call _ccjYZ(R1) args: 0, res: 0, upd: 0;
       ccjZ0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wadjust_info" {
     Text.Printf.$wadjust_info:
         const Text.Printf.$wadjust_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _ccjYZ() //  [R1]
         { []
         }
     {offset
       ccjYZ: // global
           if (R1 & 7 == 1) goto ucjZW; else goto ccjZj;
       ucjZW: // global
           Sp = Sp + 8;
           call _sciI3() args: 0, res: 0, upd: 0;
       ccjZj: // global
           I64[Sp] = block_ccjZ5_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucjZZ; else goto ccjZ6;
       ucjZZ: // global
           call _ccjZ5(R1) args: 0, res: 0, upd: 0;
       ccjZ6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjYZ_info" {
     block_ccjYZ_info:
         const _ccjYZ;
         const 4;
         const 30;
 },
 _ccjZ5() //  [R1]
         { []
         }
     {offset
       ccjZ5: // global
           if (R1 & 7 == 1) goto ccjZL; else goto ucjZX;
       ccjZL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccjZO; else goto ccjZN;
       ccjZO: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccjZN: // global
           I64[Hp - 24] = sat_sciId_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 24;
           R2 = P64[Sp + 24];
           Sp = Sp + 40;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       ucjZX: // global
           Sp = Sp + 8;
           call _sciI3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccjZ5_info" {
     block_ccjZ5_info:
         const _ccjZ5;
         const 4;
         const 30;
 },
 _sciI3() //  []
         { []
         }
     {offset
       sciI3: // global
           I64[Sp - 8] = block_ccjYq_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uck03; else goto ccjYr;
       uck03: // global
           call _ccjYq(R1) args: 0, res: 0, upd: 0;
       ccjYr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccjYq() //  [R1]
         { []
         }
     {offset
       ccjYq: // global
           if (R1 & 7 == 1) goto ccjZs; else goto ccjZx;
       ccjZs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccjZv; else goto ccjZu;
       ccjZv: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccjZu: // global
           I64[Hp - 24] = sat_sciI5_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R3 = Hp - 24;
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       ccjZx: // global
           I64[Sp] = block_ccjYE_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucjZY; else goto ccjYF;
       ucjZY: // global
           call _ccjYE(R1) args: 0, res: 0, upd: 0;
       ccjYF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjYq_info" {
     block_ccjYq_info:
         const _ccjYq;
         const 132;
         const 30;
 },
 _ccjYE() //  [R1]
         { []
         }
     {offset
       ccjYE: // global
           _ccjWk::P64 = P64[Sp + 8];
           _sciHG::P64 = P64[Sp + 24];
           _sciHH::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto ccjZz; else goto ccjZD;
       ccjZz: // global
           Hp = Hp + 32;
           _sciI7::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccjZG; else goto ccjZB;
       ccjZB: // global
           I64[Hp - 24] = sat_sciI8_info;
           P64[Hp - 8] = _sciHG::P64;
           P64[Hp] = _sciHH::P64;
           R3 = Hp - 24;
           R2 = _ccjWk::P64;
           Sp = Sp + 40;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       ccjZD: // global
           Hp = Hp + 32;
           _sciI7::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccjZG; else goto ccjZF;
       ccjZG: // global
           HpAlloc = 32;
           R1 = _sciI7::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccjZF: // global
           I64[Hp - 24] = sat_sciI9_info;
           P64[Hp - 8] = _sciHH::P64;
           P64[Hp] = _ccjWk::P64;
           R3 = Hp - 24;
           R2 = _sciHG::P64;
           Sp = Sp + 40;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccjYE_info" {
     block_ccjYE_info:
         const _ccjYE;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.652163617 UTC

[section ""cstring" . Text.Printf.$fPrintfArgDouble4_bytes" {
     Text.Printf.$fPrintfArgDouble4_bytes:
         I8[] [43]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.654742022 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble3_closure" {
     Text.Printf.$fPrintfArgDouble3_closure:
         const Text.Printf.$fPrintfArgDouble3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgDouble3_entry() //  [R1]
         { []
         }
     {offset
       cck2j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cck2k; else goto cck2l;
       cck2k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cck2l: // global
           (_cck2g::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cck2g::I64 == 0) goto cck2i; else goto cck2h;
       cck2i: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cck2h: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cck2g::I64;
           R2 = Text.Printf.$fPrintfArgDouble4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgDouble3_info" {
     Text.Printf.$fPrintfArgDouble3_info:
         const Text.Printf.$fPrintfArgDouble3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.65917932 UTC

[section ""cstring" . Text.Printf.$fPrintfArgDouble2_bytes" {
     Text.Printf.$fPrintfArgDouble2_bytes:
         I8[] [32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.661656643 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble1_closure" {
     Text.Printf.$fPrintfArgDouble1_closure:
         const Text.Printf.$fPrintfArgDouble1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Printf.$fPrintfArgDouble1_entry() //  [R1]
         { []
         }
     {offset
       cck2B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cck2C; else goto cck2D;
       cck2C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cck2D: // global
           (_cck2y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cck2y::I64 == 0) goto cck2A; else goto cck2z;
       cck2A: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cck2z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cck2y::I64;
           R2 = Text.Printf.$fPrintfArgDouble2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgDouble1_info" {
     Text.Printf.$fPrintfArgDouble1_info:
         const Text.Printf.$fPrintfArgDouble1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.667900767 UTC

[section ""data" . Text.Printf.$wadjustSigned_closure" {
     Text.Printf.$wadjustSigned_closure:
         const Text.Printf.$wadjustSigned_info;
         const 0;
 },
 Text.Printf.$wadjustSigned_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cck2X: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cck2Y; else goto cck2Z;
       cck2Y: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$wadjustSigned_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cck2Z: // global
           I64[Sp - 40] = block_cck2Q_info;
           R1 = R4;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uck3K; else goto cck2R;
       uck3K: // global
           call _cck2Q(R1) args: 0, res: 0, upd: 0;
       cck2R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wadjustSigned_info" {
     Text.Printf.$wadjustSigned_info:
         const Text.Printf.$wadjustSigned_entry;
         const 0;
         const 30064771086;
         const 21474836505;
         const Scjc4_srt+368;
 },
 _cck2Q() //  [R1]
         { []
         }
     {offset
       cck2Q: // global
           if (R1 & 7 == 1) goto cck2U; else goto cck2V;
       cck2U: // global
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
       cck2V: // global
           I64[Sp] = block_cck35_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uck3J; else goto cck37;
       uck3J: // global
           call _cck35(R1) args: 0, res: 0, upd: 0;
       cck37: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cck2Q_info" {
     block_cck2Q_info:
         const _cck2Q;
         const 4;
         const 12884901918;
         const Scjc4_srt+376;
 },
 _cck35() //  [R1]
         { []
         }
     {offset
       cck35: // global
           _sciIh::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cck3e; else goto cck3u;
       cck3e: // global
           I64[Sp] = block_cck3b_info;
           R1 = _sciIh::P64;
           if (R1 & 7 != 0) goto uck3L; else goto cck3f;
       uck3L: // global
           call _cck3b(R1) args: 0, res: 0, upd: 0;
       cck3f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cck3u: // global
           I64[Sp] = block_cck3s_info;
           R1 = _sciIh::P64;
           if (R1 & 7 != 0) goto uck3M; else goto cck3v;
       uck3M: // global
           call _cck3s(R1) args: 0, res: 0, upd: 0;
       cck3v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cck35_info" {
     block_cck35_info:
         const _cck35;
         const 4;
         const 12884901918;
         const Scjc4_srt+376;
 },
 _cck3b() //  [R1]
         { []
         }
     {offset
       cck3b: // global
           _sciIe::P64 = P64[Sp + 8];
           _sciIf::P64 = P64[Sp + 16];
           _sciIi::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cck3l; else goto cck3p;
       cck3l: // global
           R5 = _sciIi::P64;
           R4 = Text.Printf.$fPrintfArgDouble3_closure;
           R3 = _sciIf::P64;
           R2 = _sciIe::P64;
           Sp = Sp + 40;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
       cck3p: // global
           R5 = _sciIi::P64;
           R4 = R1;
           R3 = _sciIf::P64;
           R2 = _sciIe::P64;
           Sp = Sp + 40;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cck3b_info" {
     block_cck3b_info:
         const _cck3b;
         const 260;
         const 4294967326;
         const Scjc4_srt+384;
 },
 _cck3s() //  [R1]
         { []
         }
     {offset
       cck3s: // global
           _sciIe::P64 = P64[Sp + 8];
           _sciIf::P64 = P64[Sp + 16];
           _sciIi::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cck3B; else goto cck3F;
       cck3B: // global
           R5 = _sciIi::P64;
           R4 = Text.Printf.$fPrintfArgDouble1_closure;
           R3 = _sciIf::P64;
           R2 = _sciIe::P64;
           Sp = Sp + 40;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
       cck3F: // global
           R5 = _sciIi::P64;
           R4 = R1;
           R3 = _sciIf::P64;
           R2 = _sciIe::P64;
           Sp = Sp + 40;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cck3s_info" {
     block_cck3s_info:
         const _cck3s;
         const 260;
         const 4294967326;
         const Scjc4_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.687877385 UTC

[section ""data" . Text.Printf.$w$sformatRealFloat_closure" {
     Text.Printf.$w$sformatRealFloat_closure:
         const Text.Printf.$w$sformatRealFloat_info;
         const 0;
 },
 Text.Printf.$w$sformatRealFloat_slow() //  [R1]
         { []
         }
     {offset
       cck4l: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$w$sformatRealFloat_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . uck62_srtd" {
     uck62_srtd:
         const Scjc4_srt+88;
         const 36;
         const 34359738369;
 },
 sat_sciID_entry() //  [R1]
         { []
         }
     {offset
       cck4y: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cck4z; else goto cck4A;
       cck4z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cck4A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cck4w_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 69;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciID_info" {
     sat_sciID_info:
         const sat_sciID_entry;
         const 6;
         const 18446744069414584335;
         const uck62_srtd;
 },
 _cck4w() //  [R1, R2]
         { []
         }
     {offset
       cck4w: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cck4w_info" {
     block_cck4w_info:
         const _cck4w;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 section ""relreadonly" . uck63_srtd" {
     uck63_srtd:
         const Scjc4_srt+88;
         const 36;
         const 34359738369;
 },
 sat_sciIH_entry() //  [R1]
         { []
         }
     {offset
       cck4J: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cck4K; else goto cck4L;
       cck4K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cck4L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cck4H_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 70;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciIH_info" {
     sat_sciIH_info:
         const sat_sciIH_entry;
         const 6;
         const 18446744069414584335;
         const uck63_srtd;
 },
 _cck4H() //  [R1, R2]
         { []
         }
     {offset
       cck4H: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cck4H_info" {
     block_cck4H_info:
         const _cck4H;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 section ""relreadonly" . uck64_srtd" {
     uck64_srtd:
         const Scjc4_srt+88;
         const 36;
         const 34359738369;
 },
 sat_sciIL_entry() //  [R1]
         { []
         }
     {offset
       cck4U: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cck4V; else goto cck4W;
       cck4V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cck4W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cck4S_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 71;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciIL_info" {
     sat_sciIL_info:
         const sat_sciIL_entry;
         const 6;
         const 18446744069414584335;
         const uck64_srtd;
 },
 _cck4S() //  [R1, R2]
         { []
         }
     {offset
       cck4S: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cck4S_info" {
     block_cck4S_info:
         const _cck4S;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 section ""relreadonly" . uck65_srtd" {
     uck65_srtd:
         const Scjc4_srt+88;
         const 36;
         const 34359738369;
 },
 sat_sciIP_entry() //  [R1]
         { []
         }
     {offset
       cck55: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cck56; else goto cck57;
       cck56: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cck57: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cck53_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 101;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciIP_info" {
     sat_sciIP_info:
         const sat_sciIP_entry;
         const 6;
         const 18446744069414584335;
         const uck65_srtd;
 },
 _cck53() //  [R1, R2]
         { []
         }
     {offset
       cck53: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cck53_info" {
     block_cck53_info:
         const _cck53;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 section ""relreadonly" . uck66_srtd" {
     uck66_srtd:
         const Scjc4_srt+88;
         const 36;
         const 34359738369;
 },
 sat_sciIT_entry() //  [R1]
         { []
         }
     {offset
       cck5g: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cck5h; else goto cck5i;
       cck5h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cck5i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cck5e_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 102;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciIT_info" {
     sat_sciIT_info:
         const sat_sciIT_entry;
         const 6;
         const 18446744069414584335;
         const uck66_srtd;
 },
 _cck5e() //  [R1, R2]
         { []
         }
     {offset
       cck5e: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cck5e_info" {
     block_cck5e_info:
         const _cck5e;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 section ""relreadonly" . uck67_srtd" {
     uck67_srtd:
         const Scjc4_srt+88;
         const 36;
         const 34359738369;
 },
 sat_sciIX_entry() //  [R1]
         { []
         }
     {offset
       cck5r: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cck5s; else goto cck5t;
       cck5s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cck5t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cck5p_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 103;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciIX_info" {
     sat_sciIX_info:
         const sat_sciIX_entry;
         const 6;
         const 18446744069414584335;
         const uck67_srtd;
 },
 _cck5p() //  [R1, R2]
         { []
         }
     {offset
       cck5p: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cck5p_info" {
     block_cck5p_info:
         const _cck5p;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 section ""relreadonly" . uck68_srtd" {
     uck68_srtd:
         const Scjc4_srt+88;
         const 36;
         const 34359738369;
 },
 sat_sciJ1_entry() //  [R1]
         { []
         }
     {offset
       cck5C: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cck5D; else goto cck5E;
       cck5D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cck5E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cck5A_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 103;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciJ1_info" {
     sat_sciJ1_info:
         const sat_sciJ1_entry;
         const 6;
         const 18446744069414584335;
         const uck68_srtd;
 },
 _cck5A() //  [R1, R2]
         { []
         }
     {offset
       cck5A: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cck5A_info" {
     block_cck5A_info:
         const _cck5A;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 section ""relreadonly" . uck69_srtd" {
     uck69_srtd:
         const Scjc4_srt+32;
         const 46;
         const 39582418600065;
 },
 Text.Printf.$w$sformatRealFloat_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cck5P: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cck5T; else goto cck5S;
       cck5T: // global
           HpAlloc = 64;
           R1 = Text.Printf.$w$sformatRealFloat_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cck5S: // global
           _sciIx::P64 = P64[Sp];
           _sciIz::I64 = I64[Sp + 8];
           if (_sciIz::I64 < 101) goto uck5U; else goto uck5Y;
       uck5U: // global
           if (_sciIz::I64 < 71) goto uck5V; else goto uck5X;
       uck5V: // global
           if (_sciIz::I64 < 70) goto uck5W; else goto cck5J;
       uck5W: // global
           if (_sciIz::I64 < 69) goto cck5H; else goto cck5I;
       cck5I: // global
           I64[Hp - 56] = sat_sciID_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sciIx::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cck5J: // global
           I64[Hp - 56] = sat_sciIH_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sciIx::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uck5X: // global
           if (_sciIz::I64 >= 72) goto cck5H; else goto cck5K;
       cck5K: // global
           I64[Hp - 56] = sat_sciIL_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sciIx::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uck5Y: // global
           if (_sciIz::I64 < 103) goto uck5Z; else goto uck60;
       uck5Z: // global
           if (_sciIz::I64 < 102) goto cck5L; else goto cck5M;
       cck5L: // global
           I64[Hp - 56] = sat_sciIP_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sciIx::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cck5M: // global
           I64[Hp - 56] = sat_sciIT_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sciIx::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uck60: // global
           if (_sciIz::I64 < 104) goto cck5N; else goto uck61;
       cck5N: // global
           I64[Hp - 56] = sat_sciIX_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sciIx::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uck61: // global
           if (_sciIz::I64 != 118) goto cck5H; else goto cck5O;
       cck5H: // global
           Hp = Hp - 64;
           R2 = _sciIz::I64;
           Sp = Sp + 16;
           call Text.Printf.$werrorBadFormat_entry(R2) args: 8, res: 0, upd: 8;
       cck5O: // global
           I64[Hp - 56] = sat_sciJ1_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sciIx::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sformatRealFloat_info" {
     Text.Printf.$w$sformatRealFloat_info:
         const Text.Printf.$w$sformatRealFloat_entry;
         const 0;
         const 18446744069414584334;
         const 30064771072;
         const uck69_srtd;
         const 4103;
         const Text.Printf.$w$sformatRealFloat_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.726923643 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble_$sformatRealFloat_closure" {
     Text.Printf.$fPrintfArgDouble_$sformatRealFloat_closure:
         const Text.Printf.$fPrintfArgDouble_$sformatRealFloat_info;
         const 0;
 },
 Text.Printf.$fPrintfArgDouble_$sformatRealFloat_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cck85: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cck89; else goto cck8a;
       cck89: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgDouble_$sformatRealFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cck8a: // global
           I64[Sp - 16] = block_cck82_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uck8i; else goto cck83;
       uck8i: // global
           call _cck82(R1) args: 0, res: 0, upd: 0;
       cck83: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgDouble_$sformatRealFloat_info" {
     Text.Printf.$fPrintfArgDouble_$sformatRealFloat_info:
         const Text.Printf.$fPrintfArgDouble_$sformatRealFloat_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Scjc4_srt+392;
 },
 _cck82() //  [R1]
         { []
         }
     {offset
       cck82: // global
           I64[Sp - 40] = block_cck88_info;
           _sciJ5::P64 = P64[R1 + 7];
           _sciJ6::P64 = P64[R1 + 15];
           _sciJ7::P64 = P64[R1 + 23];
           _sciJ8::P64 = P64[R1 + 31];
           _sciJ9::P64 = P64[R1 + 39];
           R1 = P64[R1 + 55];
           P64[Sp - 32] = _sciJ6::P64;
           P64[Sp - 24] = _sciJ7::P64;
           P64[Sp - 16] = _sciJ8::P64;
           P64[Sp - 8] = _sciJ9::P64;
           P64[Sp] = _sciJ5::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uck8h; else goto cck8c;
       uck8h: // global
           call _cck88(R1) args: 0, res: 0, upd: 0;
       cck8c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cck82_info" {
     block_cck82_info:
         const _cck82;
         const 1;
         const 4294967326;
         const Scjc4_srt+392;
 },
 _cck88() //  [R1]
         { []
         }
     {offset
       cck88: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 48];
           P64[Sp + 40] = P64[Sp + 32];
           I64[Sp + 48] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$w$sformatRealFloat_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cck88_info" {
     block_cck88_info:
         const _cck88;
         const 6;
         const 4294967326;
         const Scjc4_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.742275422 UTC

[section ""data" . Text.Printf.$w$sformatRealFloat1_closure" {
     Text.Printf.$w$sformatRealFloat1_closure:
         const Text.Printf.$w$sformatRealFloat1_info;
         const 0;
 },
 Text.Printf.$w$sformatRealFloat1_slow() //  [R1]
         { []
         }
     {offset
       cck8B: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$w$sformatRealFloat1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_sciJp_entry() //  [R1]
         { []
         }
     {offset
       cck8O: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cck8P; else goto cck8Q;
       cck8P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cck8Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cck8M_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 69;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciJp_info" {
     sat_sciJp_info:
         const sat_sciJp_entry;
         const 6;
         const 9223372041149743119;
         const Scjc4_srt+120;
 },
 _cck8M() //  [R1, R2]
         { []
         }
     {offset
       cck8M: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cck8M_info" {
     block_cck8M_info:
         const _cck8M;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 sat_sciJt_entry() //  [R1]
         { []
         }
     {offset
       cck8Z: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cck90; else goto cck91;
       cck90: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cck91: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cck8X_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 70;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciJt_info" {
     sat_sciJt_info:
         const sat_sciJt_entry;
         const 6;
         const 9223372041149743119;
         const Scjc4_srt+120;
 },
 _cck8X() //  [R1, R2]
         { []
         }
     {offset
       cck8X: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cck8X_info" {
     block_cck8X_info:
         const _cck8X;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 sat_sciJx_entry() //  [R1]
         { []
         }
     {offset
       cck9a: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cck9b; else goto cck9c;
       cck9b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cck9c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cck98_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 71;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciJx_info" {
     sat_sciJx_info:
         const sat_sciJx_entry;
         const 6;
         const 9223372041149743119;
         const Scjc4_srt+120;
 },
 _cck98() //  [R1, R2]
         { []
         }
     {offset
       cck98: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cck98_info" {
     block_cck98_info:
         const _cck98;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 sat_sciJB_entry() //  [R1]
         { []
         }
     {offset
       cck9l: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cck9m; else goto cck9n;
       cck9m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cck9n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cck9j_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 101;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciJB_info" {
     sat_sciJB_info:
         const sat_sciJB_entry;
         const 6;
         const 9223372041149743119;
         const Scjc4_srt+120;
 },
 _cck9j() //  [R1, R2]
         { []
         }
     {offset
       cck9j: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cck9j_info" {
     block_cck9j_info:
         const _cck9j;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 sat_sciJF_entry() //  [R1]
         { []
         }
     {offset
       cck9w: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cck9x; else goto cck9y;
       cck9x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cck9y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cck9u_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 102;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciJF_info" {
     sat_sciJF_info:
         const sat_sciJF_entry;
         const 6;
         const 9223372041149743119;
         const Scjc4_srt+120;
 },
 _cck9u() //  [R1, R2]
         { []
         }
     {offset
       cck9u: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cck9u_info" {
     block_cck9u_info:
         const _cck9u;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 sat_sciJJ_entry() //  [R1]
         { []
         }
     {offset
       cck9H: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cck9I; else goto cck9J;
       cck9I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cck9J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cck9F_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 103;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciJJ_info" {
     sat_sciJJ_info:
         const sat_sciJJ_entry;
         const 6;
         const 9223372041149743119;
         const Scjc4_srt+120;
 },
 _cck9F() //  [R1, R2]
         { []
         }
     {offset
       cck9F: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cck9F_info" {
     block_cck9F_info:
         const _cck9F;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 sat_sciJN_entry() //  [R1]
         { []
         }
     {offset
       cck9S: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cck9T; else goto cck9U;
       cck9T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cck9U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cck9Q_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 56];
           R3 = P64[R1 + 32];
           R2 = 103;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call Text.Printf.$w$sdfmt1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciJN_info" {
     sat_sciJN_info:
         const sat_sciJN_entry;
         const 6;
         const 9223372041149743119;
         const Scjc4_srt+120;
 },
 _cck9Q() //  [R1, R2]
         { []
         }
     {offset
       cck9Q: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cck9Q_info" {
     block_cck9Q_info:
         const _cck9Q;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 section ""relreadonly" . uckai_srtd" {
     uckai_srtd:
         const Scjc4_srt+32;
         const 48;
         const 145135534868481;
 },
 Text.Printf.$w$sformatRealFloat1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccka5: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccka9; else goto ccka8;
       ccka9: // global
           HpAlloc = 64;
           R1 = Text.Printf.$w$sformatRealFloat1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       ccka8: // global
           _sciJj::P64 = P64[Sp];
           _sciJl::I64 = I64[Sp + 8];
           if (_sciJl::I64 < 101) goto uckaa; else goto uckae;
       uckaa: // global
           if (_sciJl::I64 < 71) goto uckab; else goto uckad;
       uckab: // global
           if (_sciJl::I64 < 70) goto uckac; else goto cck9Z;
       uckac: // global
           if (_sciJl::I64 < 69) goto cck9X; else goto cck9Y;
       cck9Y: // global
           I64[Hp - 56] = sat_sciJp_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sciJj::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cck9Z: // global
           I64[Hp - 56] = sat_sciJt_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sciJj::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uckad: // global
           if (_sciJl::I64 >= 72) goto cck9X; else goto ccka0;
       ccka0: // global
           I64[Hp - 56] = sat_sciJx_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sciJj::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uckae: // global
           if (_sciJl::I64 < 103) goto uckaf; else goto uckag;
       uckaf: // global
           if (_sciJl::I64 < 102) goto ccka1; else goto ccka2;
       ccka1: // global
           I64[Hp - 56] = sat_sciJB_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sciJj::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       ccka2: // global
           I64[Hp - 56] = sat_sciJF_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sciJj::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uckag: // global
           if (_sciJl::I64 < 104) goto ccka3; else goto uckah;
       ccka3: // global
           I64[Hp - 56] = sat_sciJJ_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sciJj::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uckah: // global
           if (_sciJl::I64 != 118) goto cck9X; else goto ccka4;
       cck9X: // global
           Hp = Hp - 64;
           R2 = _sciJl::I64;
           Sp = Sp + 16;
           call Text.Printf.$werrorBadFormat_entry(R2) args: 8, res: 0, upd: 8;
       ccka4: // global
           I64[Hp - 56] = sat_sciJN_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _sciJj::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sformatRealFloat1_info" {
     Text.Printf.$w$sformatRealFloat1_info:
         const Text.Printf.$w$sformatRealFloat1_entry;
         const 0;
         const 18446744069414584334;
         const 30064771072;
         const uckai_srtd;
         const 4103;
         const Text.Printf.$w$sformatRealFloat1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.776456918 UTC

[section ""data" . Text.Printf.$fPrintfArgFloat_$sformatRealFloat_closure" {
     Text.Printf.$fPrintfArgFloat_$sformatRealFloat_closure:
         const Text.Printf.$fPrintfArgFloat_$sformatRealFloat_info;
         const 0;
 },
 Text.Printf.$fPrintfArgFloat_$sformatRealFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       cckc7: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cckcb; else goto cckcc;
       cckcb: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgFloat_$sformatRealFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cckcc: // global
           I64[Sp - 16] = block_cckc4_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uckck; else goto cckc5;
       uckck: // global
           call _cckc4(R1) args: 0, res: 0, upd: 0;
       cckc5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgFloat_$sformatRealFloat_info" {
     Text.Printf.$fPrintfArgFloat_$sformatRealFloat_info:
         const Text.Printf.$fPrintfArgFloat_$sformatRealFloat_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Scjc4_srt+408;
 },
 _cckc4() //  [R1]
         { []
         }
     {offset
       cckc4: // global
           I64[Sp - 40] = block_cckca_info;
           _sciJR::P64 = P64[R1 + 7];
           _sciJS::P64 = P64[R1 + 15];
           _sciJT::P64 = P64[R1 + 23];
           _sciJU::P64 = P64[R1 + 31];
           _sciJV::P64 = P64[R1 + 39];
           R1 = P64[R1 + 55];
           P64[Sp - 32] = _sciJS::P64;
           P64[Sp - 24] = _sciJT::P64;
           P64[Sp - 16] = _sciJU::P64;
           P64[Sp - 8] = _sciJV::P64;
           P64[Sp] = _sciJR::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uckcj; else goto cckce;
       uckcj: // global
           call _cckca(R1) args: 0, res: 0, upd: 0;
       cckce: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckc4_info" {
     block_cckc4_info:
         const _cckc4;
         const 1;
         const 4294967326;
         const Scjc4_srt+408;
 },
 _cckca() //  [R1]
         { []
         }
     {offset
       cckca: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 48];
           P64[Sp + 40] = P64[Sp + 32];
           I64[Sp + 48] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$w$sformatRealFloat1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckca_info" {
     block_cckca_info:
         const _cckca;
         const 6;
         const 4294967326;
         const Scjc4_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.791769748 UTC

[section ""data" . Text.Printf.$wformatRealFloat_closure" {
     Text.Printf.$wformatRealFloat_closure:
         const Text.Printf.$wformatRealFloat_info;
         const 0;
 },
 Text.Printf.$wformatRealFloat_slow() //  [R1]
         { []
         }
     {offset
       cckcD: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$wformatRealFloat_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sciKc_entry() //  [R1]
         { []
         }
     {offset
       cckcQ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cckcR; else goto cckcS;
       cckcR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckcS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cckcO_info;
           R6 = P64[R1 + 24];
           R5 = P64[R1 + 64];
           R4 = P64[R1 + 40];
           R3 = 69;
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 48;
           call Text.Printf.$wdfmt_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciKc_info" {
     sat_sciKc_info:
         const sat_sciKc_entry;
         const 7;
         const 1152921508901814287;
         const Scjc4_srt+144;
 },
 _cckcO() //  [R1, R2]
         { []
         }
     {offset
       cckcO: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckcO_info" {
     block_cckcO_info:
         const _cckcO;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 sat_sciKg_entry() //  [R1]
         { []
         }
     {offset
       cckd1: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cckd2; else goto cckd3;
       cckd2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckd3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cckcZ_info;
           R6 = P64[R1 + 24];
           R5 = P64[R1 + 64];
           R4 = P64[R1 + 40];
           R3 = 70;
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 48;
           call Text.Printf.$wdfmt_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciKg_info" {
     sat_sciKg_info:
         const sat_sciKg_entry;
         const 7;
         const 1152921508901814287;
         const Scjc4_srt+144;
 },
 _cckcZ() //  [R1, R2]
         { []
         }
     {offset
       cckcZ: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckcZ_info" {
     block_cckcZ_info:
         const _cckcZ;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 sat_sciKk_entry() //  [R1]
         { []
         }
     {offset
       cckdc: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cckdd; else goto cckde;
       cckdd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckde: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cckda_info;
           R6 = P64[R1 + 24];
           R5 = P64[R1 + 64];
           R4 = P64[R1 + 40];
           R3 = 71;
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 48;
           call Text.Printf.$wdfmt_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciKk_info" {
     sat_sciKk_info:
         const sat_sciKk_entry;
         const 7;
         const 1152921508901814287;
         const Scjc4_srt+144;
 },
 _cckda() //  [R1, R2]
         { []
         }
     {offset
       cckda: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckda_info" {
     block_cckda_info:
         const _cckda;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 sat_sciKo_entry() //  [R1]
         { []
         }
     {offset
       cckdn: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cckdo; else goto cckdp;
       cckdo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckdp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cckdl_info;
           R6 = P64[R1 + 24];
           R5 = P64[R1 + 64];
           R4 = P64[R1 + 40];
           R3 = 101;
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 48;
           call Text.Printf.$wdfmt_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciKo_info" {
     sat_sciKo_info:
         const sat_sciKo_entry;
         const 7;
         const 1152921508901814287;
         const Scjc4_srt+144;
 },
 _cckdl() //  [R1, R2]
         { []
         }
     {offset
       cckdl: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckdl_info" {
     block_cckdl_info:
         const _cckdl;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 sat_sciKs_entry() //  [R1]
         { []
         }
     {offset
       cckdy: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cckdz; else goto cckdA;
       cckdz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckdA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cckdw_info;
           R6 = P64[R1 + 24];
           R5 = P64[R1 + 64];
           R4 = P64[R1 + 40];
           R3 = 102;
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 48;
           call Text.Printf.$wdfmt_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciKs_info" {
     sat_sciKs_info:
         const sat_sciKs_entry;
         const 7;
         const 1152921508901814287;
         const Scjc4_srt+144;
 },
 _cckdw() //  [R1, R2]
         { []
         }
     {offset
       cckdw: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckdw_info" {
     block_cckdw_info:
         const _cckdw;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 sat_sciKw_entry() //  [R1]
         { []
         }
     {offset
       cckdJ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cckdK; else goto cckdL;
       cckdK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckdL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cckdH_info;
           R6 = P64[R1 + 24];
           R5 = P64[R1 + 64];
           R4 = P64[R1 + 40];
           R3 = 103;
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 48;
           call Text.Printf.$wdfmt_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciKw_info" {
     sat_sciKw_info:
         const sat_sciKw_entry;
         const 7;
         const 1152921508901814287;
         const Scjc4_srt+144;
 },
 _cckdH() //  [R1, R2]
         { []
         }
     {offset
       cckdH: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckdH_info" {
     block_cckdH_info:
         const _cckdH;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 sat_sciKA_entry() //  [R1]
         { []
         }
     {offset
       cckdU: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cckdV; else goto cckdW;
       cckdV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckdW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cckdS_info;
           R6 = P64[R1 + 24];
           R5 = P64[R1 + 64];
           R4 = P64[R1 + 40];
           R3 = 103;
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 48;
           call Text.Printf.$wdfmt_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciKA_info" {
     sat_sciKA_info:
         const sat_sciKA_entry;
         const 7;
         const 1152921508901814287;
         const Scjc4_srt+144;
 },
 _cckdS() //  [R1, R2]
         { []
         }
     {offset
       cckdS: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckdS_info" {
     block_cckdS_info:
         const _cckdS;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 section ""relreadonly" . uckek_srtd" {
     uckek_srtd:
         const Scjc4_srt+32;
         const 50;
         const 567347999948801;
 },
 Text.Printf.$wformatRealFloat_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccke7: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cckeb; else goto cckea;
       cckeb: // global
           HpAlloc = 72;
           R1 = Text.Printf.$wformatRealFloat_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cckea: // global
           _sciK5::P64 = P64[Sp];
           _sciK6::P64 = P64[Sp + 8];
           _sciK8::I64 = I64[Sp + 16];
           if (_sciK8::I64 < 101) goto uckec; else goto uckeg;
       uckec: // global
           if (_sciK8::I64 < 71) goto ucked; else goto uckef;
       ucked: // global
           if (_sciK8::I64 < 70) goto uckee; else goto ccke1;
       uckee: // global
           if (_sciK8::I64 < 69) goto cckdZ; else goto ccke0;
       ccke0: // global
           I64[Hp - 64] = sat_sciKc_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = _sciK5::P64;
           P64[Hp] = _sciK6::P64;
           R2 = Hp - 64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       ccke1: // global
           I64[Hp - 64] = sat_sciKg_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = _sciK5::P64;
           P64[Hp] = _sciK6::P64;
           R2 = Hp - 64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uckef: // global
           if (_sciK8::I64 >= 72) goto cckdZ; else goto ccke2;
       ccke2: // global
           I64[Hp - 64] = sat_sciKk_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = _sciK5::P64;
           P64[Hp] = _sciK6::P64;
           R2 = Hp - 64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uckeg: // global
           if (_sciK8::I64 < 103) goto uckeh; else goto uckei;
       uckeh: // global
           if (_sciK8::I64 < 102) goto ccke3; else goto ccke4;
       ccke3: // global
           I64[Hp - 64] = sat_sciKo_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = _sciK5::P64;
           P64[Hp] = _sciK6::P64;
           R2 = Hp - 64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       ccke4: // global
           I64[Hp - 64] = sat_sciKs_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = _sciK5::P64;
           P64[Hp] = _sciK6::P64;
           R2 = Hp - 64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uckei: // global
           if (_sciK8::I64 < 104) goto ccke5; else goto uckej;
       ccke5: // global
           I64[Hp - 64] = sat_sciKw_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = _sciK5::P64;
           P64[Hp] = _sciK6::P64;
           R2 = Hp - 64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uckej: // global
           if (_sciK8::I64 != 118) goto cckdZ; else goto ccke6;
       cckdZ: // global
           Hp = Hp - 72;
           R2 = _sciK8::I64;
           Sp = Sp + 24;
           call Text.Printf.$werrorBadFormat_entry(R2) args: 8, res: 0, upd: 8;
       ccke6: // global
           I64[Hp - 64] = sat_sciKA_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = _sciK5::P64;
           P64[Hp] = _sciK6::P64;
           R2 = Hp - 64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wformatRealFloat_info" {
     Text.Printf.$wformatRealFloat_info:
         const Text.Printf.$wformatRealFloat_entry;
         const 0;
         const 18446744069414584334;
         const 34359738368;
         const uckek_srtd;
         const 8200;
         const Text.Printf.$wformatRealFloat_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.826274888 UTC

[section ""data" . Text.Printf.formatRealFloat_closure" {
     Text.Printf.formatRealFloat_closure:
         const Text.Printf.formatRealFloat_info;
         const 0;
 },
 Text.Printf.formatRealFloat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cckg9: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cckgd; else goto cckge;
       cckgd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.formatRealFloat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cckge: // global
           I64[Sp - 24] = block_cckg6_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uckgm; else goto cckg7;
       uckgm: // global
           call _cckg6(R1) args: 0, res: 0, upd: 0;
       cckg7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.formatRealFloat_info" {
     Text.Printf.formatRealFloat_info:
         const Text.Printf.formatRealFloat_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Scjc4_srt+424;
 },
 _cckg6() //  [R1]
         { []
         }
     {offset
       cckg6: // global
           I64[Sp - 40] = block_cckgc_info;
           _sciKF::P64 = P64[R1 + 7];
           _sciKG::P64 = P64[R1 + 15];
           _sciKH::P64 = P64[R1 + 23];
           _sciKI::P64 = P64[R1 + 31];
           _sciKJ::P64 = P64[R1 + 39];
           R1 = P64[R1 + 55];
           P64[Sp - 32] = _sciKG::P64;
           P64[Sp - 24] = _sciKH::P64;
           P64[Sp - 16] = _sciKI::P64;
           P64[Sp - 8] = _sciKJ::P64;
           P64[Sp] = _sciKF::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uckgl; else goto cckgg;
       uckgl: // global
           call _cckgc(R1) args: 0, res: 0, upd: 0;
       cckgg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckg6_info" {
     block_cckg6_info:
         const _cckg6;
         const 2;
         const 4294967326;
         const Scjc4_srt+424;
 },
 _cckgc() //  [R1]
         { []
         }
     {offset
       cckgc: // global
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 56];
           R2 = P64[Sp + 48];
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = P64[Sp + 32];
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$wformatRealFloat_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckgc_info" {
     block_cckgc_info:
         const _cckgc;
         const 7;
         const 4294967326;
         const Scjc4_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.834168979 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble_$cparseFormat_closure" {
     Text.Printf.$fPrintfArgDouble_$cparseFormat_closure:
         const Text.Printf.$fPrintfArgDouble_$cparseFormat_info;
         const 0;
 },
 Text.Printf.$fPrintfArgDouble_$cparseFormat_entry() //  [R2, R3]
         { []
         }
     {offset
       cckgQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cckgR; else goto cckgS;
       cckgR: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgDouble_$cparseFormat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cckgS: // global
           I64[Sp - 8] = block_cckgJ_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uckh2; else goto cckgK;
       uckh2: // global
           call _cckgJ(R1) args: 0, res: 0, upd: 0;
       cckgK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgDouble_$cparseFormat_info" {
     Text.Printf.$fPrintfArgDouble_$cparseFormat_info:
         const Text.Printf.$fPrintfArgDouble_$cparseFormat_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Scjc4_srt+440;
 },
 _cckgJ() //  [R1]
         { []
         }
     {offset
       cckgJ: // global
           if (R1 & 7 == 1) goto cckgN; else goto cckgO;
       cckgN: // global
           R1 = Text.Printf.errorShortFormat_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cckgO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cckh1; else goto cckh0;
       cckh1: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cckh0: // global
           _sciKR::P64 = P64[R1 + 6];
           _sciKS::P64 = P64[R1 + 14];
           I64[Hp - 24] = Text.Printf.FormatParse_con_info;
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           P64[Hp - 8] = _sciKR::P64;
           P64[Hp] = _sciKS::P64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckgJ_info" {
     block_cckgJ_info:
         const _cckgJ;
         const 0;
         const 4294967326;
         const Scjc4_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.839687938 UTC

[section ""data" . Text.Printf.$fPrintfArgDouble_closure" {
     Text.Printf.$fPrintfArgDouble_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgDouble_$sformatRealFloat_closure+2;
         const Text.Printf.$fPrintfArgDouble_$cparseFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.843532403 UTC

[section ""data" . Text.Printf.$fPrintfArgFloat_$cparseFormat_closure" {
     Text.Printf.$fPrintfArgFloat_$cparseFormat_closure:
         const Text.Printf.$fPrintfArgFloat_$cparseFormat_info;
         const 0;
 },
 Text.Printf.$fPrintfArgFloat_$cparseFormat_entry() //  [R2, R3]
         { []
         }
     {offset
       cckhv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cckhw; else goto cckhx;
       cckhw: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgFloat_$cparseFormat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cckhx: // global
           I64[Sp - 8] = block_cckho_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uckhH; else goto cckhp;
       uckhH: // global
           call _cckho(R1) args: 0, res: 0, upd: 0;
       cckhp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgFloat_$cparseFormat_info" {
     Text.Printf.$fPrintfArgFloat_$cparseFormat_info:
         const Text.Printf.$fPrintfArgFloat_$cparseFormat_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Scjc4_srt+448;
 },
 _cckho() //  [R1]
         { []
         }
     {offset
       cckho: // global
           if (R1 & 7 == 1) goto cckhs; else goto cckht;
       cckhs: // global
           R1 = Text.Printf.errorShortFormat_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cckht: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cckhG; else goto cckhF;
       cckhG: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cckhF: // global
           _sciKW::P64 = P64[R1 + 6];
           _sciKX::P64 = P64[R1 + 14];
           I64[Hp - 24] = Text.Printf.FormatParse_con_info;
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           P64[Hp - 8] = _sciKW::P64;
           P64[Hp] = _sciKX::P64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckho_info" {
     block_cckho_info:
         const _cckho;
         const 0;
         const 4294967326;
         const Scjc4_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.848960395 UTC

[section ""data" . Text.Printf.$fPrintfArgFloat_closure" {
     Text.Printf.$fPrintfArgFloat_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgFloat_$sformatRealFloat_closure+2;
         const Text.Printf.$fPrintfArgFloat_$cparseFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.854305295 UTC

[section ""data" . Text.Printf.$w$sformatString_closure" {
     Text.Printf.$w$sformatString_closure:
         const Text.Printf.$w$sformatString_info;
         const 0;
 },
 Text.Printf.$w$sformatString_slow() //  [R1]
         { []
         }
     {offset
       ccki0: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$w$sformatString_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sciLc_entry() //  [R1]
         { []
         }
     {offset
       cckir: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cckis; else goto cckit;
       cckis: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckit: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cckik_info;
           _sciKY::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sciKY::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uckiM; else goto cckil;
       uckiM: // global
           call _cckik(R1) args: 0, res: 0, upd: 0;
       cckil: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciLc_info" {
     sat_sciLc_info:
         const sat_sciLc_entry;
         const 2;
         const 18;
 },
 _cckik() //  [R1]
         { []
         }
     {offset
       cckik: // global
           if (R1 & 7 == 1) goto cckio; else goto cckip;
       cckio: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cckip: // global
           I64[Sp] = block_cckiz_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uckiL; else goto cckiB;
       uckiL: // global
           call _cckiz(R1) args: 0, res: 0, upd: 0;
       cckiB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cckik_info" {
     block_cckik_info:
         const _cckik;
         const 1;
         const 30;
 },
 _cckiz() //  [R1]
         { []
         }
     {offset
       cckiz: // global
           _sciLa::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(0, _sciLa::I64)) goto cckiJ; else goto cckiK;
       cckiJ: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cckiK: // global
           R3 = P64[Sp + 8];
           R2 = _sciLa::I64;
           Sp = Sp + 16;
           call GHC.List.$wunsafeTake_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckiz_info" {
     block_cckiz_info:
         const _cckiz;
         const 1;
         const 30;
 },
 g_sciL6_entry() //  [R1]
         { []
         }
     {offset
       cckiN: // global
           _sciL6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cckiO; else goto cckiP;
       cckiP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cckiR; else goto cckiQ;
       cckiR: // global
           HpAlloc = 32;
           goto cckiO;
       cckiO: // global
           R1 = _sciL6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckiQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sciL6::P64;
           _sciKY::P64 = P64[_sciL6::P64 + 16];
           _sciKZ::P64 = P64[_sciL6::P64 + 24];
           _sciL0::P64 = P64[_sciL6::P64 + 32];
           _sciL1::P64 = P64[_sciL6::P64 + 40];
           I64[Hp - 24] = sat_sciLc_info;
           P64[Hp - 8] = _sciKY::P64;
           P64[Hp] = _sciL0::P64;
           R5 = Hp - 24;
           R4 = GHC.Types.[]_closure+1;
           R3 = _sciL1::P64;
           R2 = _sciKZ::P64;
           Sp = Sp - 16;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sciL6_info" {
     g_sciL6_info:
         const g_sciL6_entry;
         const 4;
         const 15;
 },
 Text.Printf.$w$sformatString_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cckiW: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cckiX; else goto cckiY;
       cckiX: // global
           R1 = Text.Printf.$w$sformatString_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cckiY: // global
           if (R6 == 118) goto cckiV; else goto cckiU;
       cckiV: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = 115;
           Sp = Sp - 40;
           goto uckja;
       cckiU: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           goto uckja;
       uckja: // global
           call _ccki7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sformatString_info" {
     Text.Printf.$w$sformatString_info:
         const Text.Printf.$w$sformatString_entry;
         const 0;
         const 12884901902;
         const 21474836480;
         const Scjc4_srt+464;
         const 1029;
         const Text.Printf.$w$sformatString_slow;
 },
 _ccki7() //  []
         { []
         }
     {offset
       ccki7: // global
           Hp = Hp + 48;
           _sciL4::I64 = I64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto cckj1; else goto cckj0;
       cckj1: // global
           HpAlloc = 48;
           I64[Sp - 8] = block_ccki6_info;
           R1 = _sciL4::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cckj0: // global
           if (_sciL4::I64 == 115) goto cckj4; else goto cckj3;
       cckj4: // global
           I64[Hp - 40] = g_sciL6_info;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 40;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cckj3: // global
           Hp = Hp - 48;
           R2 = _sciL4::I64;
           Sp = Sp + 40;
           call Text.Printf.$werrorBadFormat_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _ccki6() //  [R1]
         { []
         }
     {offset
       ccki6: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _ccki7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccki6_info" {
     block_ccki6_info:
         const _ccki6;
         const 1029;
         const 4294967326;
         const Scjc4_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.875778515 UTC

[section ""data" . Text.Printf.$wformatString_closure" {
     Text.Printf.$wformatString_closure:
         const Text.Printf.$wformatString_info;
         const 0;
 },
 Text.Printf.$wformatString_slow() //  [R1]
         { []
         }
     {offset
       cckjX: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$wformatString_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 16, res: 0, upd: 8;
     }
 },
 sat_sciLq_entry() //  [R1]
         { []
         }
     {offset
       cckkq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cckkr; else goto cckks;
       cckkr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckks: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Printf.toChar_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciLq_info" {
     sat_sciLq_info:
         const sat_sciLq_entry;
         const 1;
         const 16;
 },
 sat_sciLE_entry() //  [R1]
         { []
         }
     {offset
       cckkX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cckkY; else goto cckkZ;
       cckkY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckkZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 32] - 1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_sciLv_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciLE_info" {
     sat_sciLE_info:
         const sat_sciLE_entry;
         const 4294967298;
         const 15;
 },
 sat_sciLC_entry() //  [R1]
         { []
         }
     {offset
       cckl4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cckl5; else goto cckl6;
       cckl5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckl6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.Printf.toChar_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciLC_info" {
     sat_sciLC_info:
         const sat_sciLC_entry;
         const 2;
         const 18;
 },
 sat_sciLF_entry() //  [R1]
         { []
         }
     {offset
       ccklc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cckld; else goto cckle;
       cckld: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckle: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.Printf.toChar_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciLF_info" {
     sat_sciLF_info:
         const sat_sciLF_entry;
         const 2;
         const 18;
 },
 $wgo_sciLv_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       ccklj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccklk; else goto cckll;
       ccklk: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cckll: // global
           I64[Sp - 32] = block_cckkJ_info;
           _sciLv::P64 = R1;
           _sciLf::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 24] = _sciLf::P64;
           P64[Sp - 16] = _sciLv::P64;
           I64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucklw; else goto cckkK;
       ucklw: // global
           call _cckkJ(R1) args: 0, res: 0, upd: 0;
       cckkK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_sciLv_info" {
     $wgo_sciLv_info:
         const $wgo_sciLv_entry;
         const 1;
         const 9;
         const 8589934606;
 },
 _cckkJ() //  [R1]
         { []
         }
     {offset
       cckkJ: // global
           if (R1 & 7 == 1) goto ccklg; else goto ccklh;
       ccklg: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccklh: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccklq; else goto ccklp;
       ccklq: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccklp: // global
           _sciLf::P64 = P64[Sp + 8];
           _sciLz::P64 = P64[R1 + 6];
           _sciLB::I64 = I64[Sp + 24];
           if (_sciLB::I64 != 1) goto ccklt; else goto ccklv;
       ccklt: // global
           _sciLA::P64 = P64[R1 + 14];
           I64[Hp - 88] = sat_sciLE_info;
           P64[Hp - 72] = P64[Sp + 16];
           P64[Hp - 64] = _sciLA::P64;
           I64[Hp - 56] = _sciLB::I64;
           I64[Hp - 48] = sat_sciLC_info;
           P64[Hp - 32] = _sciLf::P64;
           P64[Hp - 24] = _sciLz::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccklv: // global
           I64[Hp - 88] = sat_sciLF_info;
           P64[Hp - 72] = _sciLf::P64;
           P64[Hp - 64] = _sciLz::P64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 88;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _ccklu::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _ccklu::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckkJ_info" {
     block_cckkJ_info:
         const _cckkJ;
         const 259;
         const 30;
 },
 sat_sciLG_entry() //  [R1]
         { []
         }
     {offset
       ccklB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccklC; else goto ccklD;
       ccklC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccklD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cckkh_info;
           _sciLf::P64 = P64[R1 + 16];
           _sciLg::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sciLf::P64;
           P64[Sp - 24] = _sciLg::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucklP; else goto cckki;
       ucklP: // global
           call _cckkh(R1) args: 0, res: 0, upd: 0;
       cckki: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciLG_info" {
     sat_sciLG_info:
         const sat_sciLG_entry;
         const 3;
         const 15;
 },
 _cckkh() //  [R1]
         { []
         }
     {offset
       cckkh: // global
           if (R1 & 7 == 1) goto cckly; else goto ccklz;
       cckly: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccklG; else goto ccklF;
       ccklG: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccklF: // global
           I64[Hp - 16] = sat_sciLq_info;
           P64[Hp] = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = Hp - 16;
           Sp = Sp + 24;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
       ccklz: // global
           I64[Sp] = block_cckkv_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucklO; else goto cckkw;
       ucklO: // global
           call _cckkv(R1) args: 0, res: 0, upd: 0;
       cckkw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cckkh_info" {
     block_cckkh_info:
         const _cckkh;
         const 2;
         const 30;
 },
 _cckkv() //  [R1]
         { []
         }
     {offset
       cckkv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccklK; else goto ccklJ;
       ccklK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccklJ: // global
           _sciLt::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(0, _sciLt::I64)) goto ccklM; else goto ccklN;
       ccklM: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccklN: // global
           I64[Hp - 8] = $wgo_sciLv_info;
           P64[Hp] = P64[Sp + 8];
           R3 = _sciLt::I64;
           R2 = P64[Sp + 16];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call $wgo_sciLv_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckkv_info" {
     block_cckkv_info:
         const _cckkv;
         const 2;
         const 30;
 },
 g_sciLo_entry() //  [R1]
         { []
         }
     {offset
       ccklQ: // global
           _sciLo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccklR; else goto ccklS;
       ccklS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccklU; else goto ccklT;
       ccklU: // global
           HpAlloc = 40;
           goto ccklR;
       ccklR: // global
           R1 = _sciLo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccklT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sciLo::P64;
           _sciLf::P64 = P64[_sciLo::P64 + 16];
           _sciLg::P64 = P64[_sciLo::P64 + 24];
           _sciLh::P64 = P64[_sciLo::P64 + 32];
           _sciLi::P64 = P64[_sciLo::P64 + 40];
           _sciLj::P64 = P64[_sciLo::P64 + 48];
           I64[Hp - 32] = sat_sciLG_info;
           P64[Hp - 16] = _sciLf::P64;
           P64[Hp - 8] = _sciLg::P64;
           P64[Hp] = _sciLi::P64;
           R5 = Hp - 32;
           R4 = GHC.Types.[]_closure+1;
           R3 = _sciLj::P64;
           R2 = _sciLh::P64;
           Sp = Sp - 16;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sciLo_info" {
     g_sciLo_info:
         const g_sciLo_entry;
         const 5;
         const 15;
 },
 Text.Printf.$wformatString_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccklZ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cckm0; else goto cckm1;
       cckm0: // global
           R1 = Text.Printf.$wformatString_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       cckm1: // global
           _sciLI::I64 = I64[Sp];
           if (_sciLI::I64 == 118) goto ccklY; else goto ccklX;
       ccklY: // global
           P64[Sp] = R2;
           P64[Sp - 40] = R3;
           P64[Sp - 32] = R4;
           P64[Sp - 24] = R5;
           P64[Sp - 16] = R6;
           I64[Sp - 8] = 115;
           Sp = Sp - 40;
           goto uckmd;
       ccklX: // global
           P64[Sp - 40] = R3;
           P64[Sp - 32] = R4;
           P64[Sp - 24] = R5;
           P64[Sp - 16] = R6;
           I64[Sp - 8] = _sciLI::I64;
           P64[Sp] = R2;
           Sp = Sp - 40;
           goto uckmd;
       uckmd: // global
           call _cckk4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Text.Printf.$wformatString_info" {
     Text.Printf.$wformatString_info:
         const Text.Printf.$wformatString_entry;
         const 0;
         const 12884901902;
         const 25769803776;
         const Scjc4_srt+472;
         const 2054;
         const Text.Printf.$wformatString_slow;
 },
 _cckk4() //  []
         { []
         }
     {offset
       cckk4: // global
           Hp = Hp + 56;
           _sciLm::I64 = I64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto cckm4; else goto cckm3;
       cckm4: // global
           HpAlloc = 56;
           I64[Sp - 8] = block_cckk3_info;
           R1 = _sciLm::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cckm3: // global
           if (_sciLm::I64 == 115) goto cckm7; else goto cckm6;
       cckm7: // global
           I64[Hp - 48] = g_sciLo_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 48;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cckm6: // global
           Hp = Hp - 56;
           R2 = _sciLm::I64;
           Sp = Sp + 48;
           call Text.Printf.$werrorBadFormat_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _cckk3() //  [R1]
         { []
         }
     {offset
       cckk3: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _cckk4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cckk3_info" {
     block_cckk3_info:
         const _cckk3;
         const 1030;
         const 4294967326;
         const Scjc4_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.904405873 UTC

[section ""data" . Text.Printf.formatString_closure" {
     Text.Printf.formatString_closure:
         const Text.Printf.formatString_info;
         const 0;
 },
 Text.Printf.formatString_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       ccknY: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccko2; else goto ccko3;
       ccko2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.formatString_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccko3: // global
           I64[Sp - 24] = block_ccknV_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uckob; else goto ccknW;
       uckob: // global
           call _ccknV(R1) args: 0, res: 0, upd: 0;
       ccknW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.formatString_info" {
     Text.Printf.formatString_info:
         const Text.Printf.formatString_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Scjc4_srt+480;
 },
 _ccknV() //  [R1]
         { []
         }
     {offset
       ccknV: // global
           I64[Sp - 24] = block_ccko1_info;
           _sciLN::P64 = P64[R1 + 7];
           _sciLO::P64 = P64[R1 + 15];
           _sciLP::P64 = P64[R1 + 23];
           R1 = P64[R1 + 55];
           P64[Sp - 16] = _sciLO::P64;
           P64[Sp - 8] = _sciLP::P64;
           P64[Sp] = _sciLN::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uckoa; else goto ccko5;
       uckoa: // global
           call _ccko1(R1) args: 0, res: 0, upd: 0;
       ccko5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccknV_info" {
     block_ccknV_info:
         const _ccknV;
         const 2;
         const 4294967326;
         const Scjc4_srt+480;
 },
 _ccko1() //  [R1]
         { []
         }
     {offset
       ccko1: // global
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           I64[Sp + 40] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$wformatString_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccko1_info" {
     block_ccko1_info:
         const _ccko1;
         const 5;
         const 4294967326;
         const Scjc4_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.912530838 UTC

[section ""data" . lvl22_rcccn_closure" {
     lvl22_rcccn_closure:
         const lvl22_rcccn_info;
         const 0;
 },
 lvl22_rcccn_entry() //  [R2, R3]
         { []
         }
     {offset
       cckoD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cckoE; else goto cckoF;
       cckoE: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl22_rcccn_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cckoF: // global
           I64[Sp - 8] = block_cckow_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uckoP; else goto cckox;
       uckoP: // global
           call _cckow(R1) args: 0, res: 0, upd: 0;
       cckox: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl22_rcccn_info" {
     lvl22_rcccn_info:
         const lvl22_rcccn_entry;
         const 0;
         const 279172874254;
         const 8589934607;
         const Scjc4_srt+448;
 },
 _cckow() //  [R1]
         { []
         }
     {offset
       cckow: // global
           if (R1 & 7 == 1) goto cckoA; else goto cckoB;
       cckoA: // global
           R1 = Text.Printf.errorShortFormat_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cckoB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cckoO; else goto cckoN;
       cckoO: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cckoN: // global
           _sciLZ::P64 = P64[R1 + 6];
           _sciM0::P64 = P64[R1 + 14];
           I64[Hp - 24] = Text.Printf.FormatParse_con_info;
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           P64[Hp - 8] = _sciLZ::P64;
           P64[Hp] = _sciM0::P64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckow_info" {
     block_cckow_info:
         const _cckow;
         const 0;
         const 4294967326;
         const Scjc4_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.918682031 UTC

[section ""data" . Text.Printf.$fPrintfArg[]_closure" {
     Text.Printf.$fPrintfArg[]_closure:
         const Text.Printf.$fPrintfArg[]_info;
         const 0;
 },
 sat_sciM2_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cckpf: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Text.Printf.formatString_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciM2_info" {
     sat_sciM2_info:
         const sat_sciM2_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const Scjc4_srt+488;
 },
 Text.Printf.$fPrintfArg[]_entry() //  [R2]
         { []
         }
     {offset
       cckpj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cckpn; else goto cckpm;
       cckpn: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArg[]_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cckpm: // global
           I64[Hp - 32] = sat_sciM2_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.Printf.C:PrintfArg_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = lvl22_rcccn_closure+2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArg[]_info" {
     Text.Printf.$fPrintfArg[]_info:
         const Text.Printf.$fPrintfArg[]_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const Scjc4_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.923499782 UTC

[section ""data" . lvl23_rccco_closure" {
     lvl23_rccco_closure:
         const GHC.Types.C#_con_info;
         const 100;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.925589252 UTC

[section ""data" . sat_sciM3_closure" {
     sat_sciM3_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.92787533 UTC

[section ""data" . sat_sciM4_closure" {
     sat_sciM4_closure:
         const :_con_info;
         const sat_sciM3_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.930157931 UTC

[section ""data" . lvl24_rcccp_closure" {
     lvl24_rcccp_closure:
         const lvl24_rcccp_info;
         const 0;
         const 0;
         const 0;
 },
 lvl24_rcccp_entry() //  [R1]
         { []
         }
     {offset
       cckpJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cckpK; else goto cckpL;
       cckpK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckpL: // global
           (_cckpG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cckpG::I64 == 0) goto cckpI; else goto cckpH;
       cckpI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cckpH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cckpG::I64;
           R3 = sat_sciM4_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl24_rcccp_info" {
     lvl24_rcccp_info:
         const lvl24_rcccp_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.933740931 UTC

[section ""cstring" . lvl25_rcccq_bytes" {
     lvl25_rcccq_bytes:
         I8[] [48,88]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.935955696 UTC

[section ""data" . lvl26_rcccr_closure" {
     lvl26_rcccr_closure:
         const lvl26_rcccr_info;
         const 0;
         const 0;
         const 0;
 },
 lvl26_rcccr_entry() //  [R1]
         { []
         }
     {offset
       cckq2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cckq3; else goto cckq4;
       cckq3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckq4: // global
           (_cckpZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cckpZ::I64 == 0) goto cckq1; else goto cckq0;
       cckq1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cckq0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cckpZ::I64;
           R2 = lvl25_rcccq_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl26_rcccr_info" {
     lvl26_rcccr_info:
         const lvl26_rcccr_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.939381729 UTC

[section ""cstring" . lvl27_rcccs_bytes" {
     lvl27_rcccs_bytes:
         I8[] [48,98]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.941929652 UTC

[section ""data" . lvl28_rccct_closure" {
     lvl28_rccct_closure:
         const lvl28_rccct_info;
         const 0;
         const 0;
         const 0;
 },
 lvl28_rccct_entry() //  [R1]
         { []
         }
     {offset
       cckqk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cckql; else goto cckqm;
       cckql: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckqm: // global
           (_cckqh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cckqh::I64 == 0) goto cckqj; else goto cckqi;
       cckqj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cckqi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cckqh::I64;
           R2 = lvl27_rcccs_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl28_rccct_info" {
     lvl28_rccct_info:
         const lvl28_rccct_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.945435822 UTC

[section ""cstring" . lvl29_rcccu_bytes" {
     lvl29_rcccu_bytes:
         I8[] [112,114,105,110,116,102,58,32,105,108,108,101,103,97,108,32,99,104,97,114,32,99,111,110,118,101,114,115,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.947785245 UTC

[section ""data" . lvl30_rcccv_closure" {
     lvl30_rcccv_closure:
         const lvl30_rcccv_info;
         const 0;
         const 0;
         const 0;
 },
 lvl30_rcccv_entry() //  [R1]
         { []
         }
     {offset
       cckqE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cckqF; else goto cckqG;
       cckqF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckqG: // global
           (_cckqz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cckqz::I64 == 0) goto cckqB; else goto cckqA;
       cckqB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cckqA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cckqz::I64;
           I64[Sp - 24] = block_cckqC_info;
           R2 = lvl29_rcccu_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl30_rcccv_info" {
     lvl30_rcccv_info:
         const lvl30_rcccv_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt+520;
 },
 _cckqC() //  [R1]
         { []
         }
     {offset
       cckqC: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckqC_info" {
     block_cckqC_info:
         const _cckqC;
         const 0;
         const 4294967326;
         const Scjc4_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.952711456 UTC

[section ""data" . sat_sciM6_closure" {
     sat_sciM6_closure:
         const GHC.Types.I#_con_info;
         const 1114111;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.954415357 UTC

[section ""data" . sat_sciM7_closure" {
     sat_sciM7_closure:
         const :_con_info;
         const sat_sciM6_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.956736528 UTC

[section ""data" . lvl31_rcccw_closure" {
     lvl31_rcccw_closure:
         const lvl31_rcccw_info;
         const 0;
         const 0;
         const 0;
 },
 lvl31_rcccw_entry() //  [R1]
         { []
         }
     {offset
       cckr4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cckr5; else goto cckr6;
       cckr5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckr6: // global
           (_cckr1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cckr1::I64 == 0) goto cckr3; else goto cckr2;
       cckr3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cckr2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cckr1::I64;
           R3 = sat_sciM7_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl31_rcccw_info" {
     lvl31_rcccw_info:
         const lvl31_rcccw_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.960895461 UTC

[section ""data" . sat_sciM8_closure" {
     sat_sciM8_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.96264428 UTC

[section ""data" . sat_sciM9_closure" {
     sat_sciM9_closure:
         const :_con_info;
         const sat_sciM8_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.964869918 UTC

[section ""data" . lvl32_rcccx_closure" {
     lvl32_rcccx_closure:
         const lvl32_rcccx_info;
         const 0;
         const 0;
         const 0;
 },
 lvl32_rcccx_entry() //  [R1]
         { []
         }
     {offset
       cckro: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cckrp; else goto cckrq;
       cckrp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckrq: // global
           (_cckrl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cckrl::I64 == 0) goto cckrn; else goto cckrm;
       cckrn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cckrm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cckrl::I64;
           R3 = sat_sciM9_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl32_rcccx_info" {
     lvl32_rcccx_info:
         const lvl32_rcccx_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.968787705 UTC

[section ""cstring" . lvl33_rcccy_bytes" {
     lvl33_rcccy_bytes:
         I8[] [48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.97101093 UTC

[section ""data" . lvl34_rcccz_closure" {
     lvl34_rcccz_closure:
         const lvl34_rcccz_info;
         const 0;
         const 0;
         const 0;
 },
 lvl34_rcccz_entry() //  [R1]
         { []
         }
     {offset
       cckrH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cckrI; else goto cckrJ;
       cckrI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckrJ: // global
           (_cckrE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cckrE::I64 == 0) goto cckrG; else goto cckrF;
       cckrG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cckrF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cckrE::I64;
           R2 = lvl33_rcccy_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl34_rcccz_info" {
     lvl34_rcccz_info:
         const lvl34_rcccz_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.974505993 UTC

[section ""data" . sat_sciMa_closure" {
     sat_sciMa_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.976184547 UTC

[section ""data" . sat_sciMb_closure" {
     sat_sciMb_closure:
         const :_con_info;
         const sat_sciMa_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.978463807 UTC

[section ""data" . lvl35_rcccA_closure" {
     lvl35_rcccA_closure:
         const lvl35_rcccA_info;
         const 0;
         const 0;
         const 0;
 },
 lvl35_rcccA_entry() //  [R1]
         { []
         }
     {offset
       ccks0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccks1; else goto ccks2;
       ccks1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccks2: // global
           (_cckrX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cckrX::I64 == 0) goto cckrZ; else goto cckrY;
       cckrZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cckrY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cckrX::I64;
           R3 = sat_sciMb_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl35_rcccA_info" {
     lvl35_rcccA_info:
         const lvl35_rcccA_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.98212684 UTC

[section ""cstring" . lvl36_rcccB_bytes" {
     lvl36_rcccB_bytes:
         I8[] [48,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.984308775 UTC

[section ""data" . lvl37_rcccC_closure" {
     lvl37_rcccC_closure:
         const lvl37_rcccC_info;
         const 0;
         const 0;
         const 0;
 },
 lvl37_rcccC_entry() //  [R1]
         { []
         }
     {offset
       ccksj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccksk; else goto ccksl;
       ccksk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccksl: // global
           (_ccksg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccksg::I64 == 0) goto ccksi; else goto ccksh;
       ccksi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccksh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccksg::I64;
           R2 = lvl36_rcccB_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl37_rcccC_info" {
     lvl37_rcccC_info:
         const lvl37_rcccC_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.988487934 UTC

[section ""data" . lvl38_rcccD_closure" {
     lvl38_rcccD_closure:
         const GHC.Base.Just_con_info;
         const lvl26_rcccr_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.990776496 UTC

[section ""data" . lvl39_rcccE_closure" {
     lvl39_rcccE_closure:
         const GHC.Base.Just_con_info;
         const lvl28_rccct_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.992526857 UTC

[section ""data" . lvl40_rcccF_closure" {
     lvl40_rcccF_closure:
         const GHC.Base.Just_con_info;
         const lvl34_rcccz_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:13.99416343 UTC

[section ""data" . lvl41_rcccG_closure" {
     lvl41_rcccG_closure:
         const GHC.Base.Just_con_info;
         const lvl37_rcccC_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.018968251 UTC

[section ""data" . Text.Printf.$wformatIntegral_closure" {
     Text.Printf.$wformatIntegral_closure:
         const Text.Printf.$wformatIntegral_info;
         const 0;
 },
 Text.Printf.$wformatIntegral_slow() //  [R1]
         { []
         }
     {offset
       ccksz: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sciMA_entry() //  [R1]
         { []
         }
     {offset
       ccktN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccktO; else goto ccktP;
       ccktO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccktP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.toUpper_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciMA_info" {
     sat_sciMA_info:
         const sat_sciMA_entry;
         const 1;
         const 4294967312;
         const Scjc4_srt+552;
 },
 sat_sciME_entry() //  [R1]
         { []
         }
     {offset
       ccktY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccktZ; else goto ccku0;
       ccktZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccku0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.toUpper_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciME_info" {
     sat_sciME_info:
         const sat_sciME_entry;
         const 1;
         const 4294967312;
         const Scjc4_srt+552;
 },
 sat_sciMI_entry() //  [R1]
         { []
         }
     {offset
       ccku9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cckua; else goto cckub;
       cckua: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckub: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.toUpper_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciMI_info" {
     sat_sciMI_info:
         const sat_sciMI_entry;
         const 1;
         const 4294967312;
         const Scjc4_srt+552;
 },
 section ""relreadonly" . uckzN_srtd" {
     uckzN_srtd:
         const Scjc4_srt+312;
         const 33;
         const 7516192777;
 },
 sat_sciMJ_entry() //  [R1]
         { []
         }
     {offset
       cckuf: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cckug; else goto cckuh;
       cckug: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckuh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_cckty_info;
           R3 = Text.Printf.formatChar2_closure;
           _sciMd::P64 = P64[R1 + 24];
           R2 = _sciMd::P64;
           P64[Sp - 64] = P64[R1 + 16];
           P64[Sp - 56] = _sciMd::P64;
           P64[Sp - 48] = P64[R1 + 32];
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 72;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciMJ_info" {
     sat_sciMJ_info:
         const sat_sciMJ_entry;
         const 6;
         const 18446744069414584335;
         const uckzN_srtd;
 },
 _cckty() //  [R1]
         { []
         }
     {offset
       cckty: // global
           if (R1 == 1) goto cckue; else goto cckud;
       cckue: // global
           _sciMf::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_ccku3_info;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = _sciMf::P64;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl24_rcccp_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
       cckud: // global
           I64[Sp] = block_ccktC_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto uckuz; else goto ccktD;
       uckuz: // global
           call _ccktC(R1) args: 0, res: 0, upd: 0;
       ccktD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cckty_info" {
     block_cckty_info:
         const _cckty;
         const 6;
         const 4035225270418931742;
         const Scjc4_srt+336;
 },
 _ccku3() //  [R1, R2]
         { []
         }
     {offset
       ccku3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cckux; else goto cckuw;
       cckux: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cckuw: // global
           I64[Hp - 16] = sat_sciMI_info;
           P64[Hp] = R2;
           R5 = Hp - 16;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccku3_info" {
     block_ccku3_info:
         const _ccku3;
         const 259;
         const 4294967326;
         const Scjc4_srt+552;
 },
 _ccktC() //  [R1]
         { []
         }
     {offset
       ccktC: // global
           _sciMc::P64 = P64[Sp + 8];
           _sciMd::P64 = P64[Sp + 16];
           _sciMf::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cckul; else goto cckuq;
       cckul: // global
           I64[Sp + 24] = block_ccktH_info;
           R6 = _sciMd::P64;
           R5 = _sciMc::P64;
           R4 = _sciMf::P64;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl24_rcccp_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
       cckuq: // global
           I64[Sp + 24] = block_ccktS_info;
           R6 = _sciMd::P64;
           R5 = _sciMc::P64;
           R4 = _sciMf::P64;
           R3 = lvl38_rcccD_closure+2;
           R2 = lvl24_rcccp_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccktC_info" {
     block_ccktC_info:
         const _ccktC;
         const 2054;
         const 4035225270418931742;
         const Scjc4_srt+336;
 },
 _ccktH() //  [R1, R2]
         { []
         }
     {offset
       ccktH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cckuo; else goto cckun;
       cckuo: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cckun: // global
           I64[Hp - 16] = sat_sciMA_info;
           P64[Hp] = R2;
           R5 = Hp - 16;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccktH_info" {
     block_ccktH_info:
         const _ccktH;
         const 259;
         const 4294967326;
         const Scjc4_srt+552;
 },
 _ccktS() //  [R1, R2]
         { []
         }
     {offset
       ccktS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cckut; else goto cckus;
       cckut: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cckus: // global
           I64[Hp - 16] = sat_sciME_info;
           P64[Hp] = R2;
           R5 = Hp - 16;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccktS_info" {
     block_ccktS_info:
         const _ccktS;
         const 259;
         const 4294967326;
         const Scjc4_srt+552;
 },
 section ""relreadonly" . uckzO_srtd" {
     uckzO_srtd:
         const Scjc4_srt+312;
         const 34;
         const 8589934603;
 },
 sat_sciMV_entry() //  [R1]
         { []
         }
     {offset
       cckuK: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cckuL; else goto cckuM;
       cckuL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckuM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_cckuF_info;
           R3 = Text.Printf.formatChar2_closure;
           _sciMd::P64 = P64[R1 + 24];
           R2 = _sciMd::P64;
           P64[Sp - 64] = P64[R1 + 16];
           P64[Sp - 56] = _sciMd::P64;
           P64[Sp - 48] = P64[R1 + 32];
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 72;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciMV_info" {
     sat_sciMV_info:
         const sat_sciMV_entry;
         const 6;
         const 18446744069414584335;
         const uckzO_srtd;
 },
 section ""relreadonly" . uckzP_srtd" {
     uckzP_srtd:
         const Scjc4_srt+320;
         const 33;
         const 4294967301;
 },
 _cckuF() //  [R1]
         { []
         }
     {offset
       cckuF: // global
           if (R1 == 1) goto cckuJ; else goto cckuI;
       cckuJ: // global
           _sciMf::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cckva_info;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = _sciMf::P64;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl21_rccck_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
       cckuI: // global
           I64[Sp] = block_cckuP_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto uckvf; else goto cckuR;
       uckvf: // global
           call _cckuP(R1) args: 0, res: 0, upd: 0;
       cckuR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cckuF_info" {
     block_cckuF_info:
         const _cckuF;
         const 6;
         const 18446744069414584350;
         const uckzP_srtd;
 },
 _cckva() //  [R1, R2]
         { []
         }
     {offset
       cckva: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckva_info" {
     block_cckva_info:
         const _cckva;
         const 259;
         const 30;
 },
 section ""relreadonly" . uckzQ_srtd" {
     uckzQ_srtd:
         const Scjc4_srt+320;
         const 33;
         const 4294967301;
 },
 _cckuP() //  [R1]
         { []
         }
     {offset
       cckuP: // global
           _sciMc::P64 = P64[Sp + 8];
           _sciMd::P64 = P64[Sp + 16];
           _sciMf::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cckuY; else goto cckv5;
       cckuY: // global
           I64[Sp + 24] = block_cckuV_info;
           R6 = _sciMd::P64;
           R5 = _sciMc::P64;
           R4 = _sciMf::P64;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl21_rccck_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
       cckv5: // global
           I64[Sp + 24] = block_cckv3_info;
           R6 = _sciMd::P64;
           R5 = _sciMc::P64;
           R4 = _sciMf::P64;
           R3 = lvl39_rcccE_closure+2;
           R2 = lvl21_rccck_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cckuP_info" {
     block_cckuP_info:
         const _cckuP;
         const 2054;
         const 18446744069414584350;
         const uckzQ_srtd;
 },
 _cckuV() //  [R1, R2]
         { []
         }
     {offset
       cckuV: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckuV_info" {
     block_cckuV_info:
         const _cckuV;
         const 259;
         const 30;
 },
 _cckv3() //  [R1, R2]
         { []
         }
     {offset
       cckv3: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckv3_info" {
     block_cckv3_info:
         const _cckv3;
         const 259;
         const 30;
 },
 sat_sciN4_entry() //  [R1]
         { []
         }
     {offset
       cckvH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cckvI; else goto cckvJ;
       cckvI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckvJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cckvF_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciN4_info" {
     sat_sciN4_info:
         const sat_sciN4_entry;
         const 1;
         const 4294967312;
         const Scjc4_srt+584;
 },
 _cckvF() //  [R1]
         { []
         }
     {offset
       cckvF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cckvO; else goto cckvN;
       cckvO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       cckvN: // global
           if (R1 > 1114111) goto cckvV; else goto cckw2;
       cckvV: // global
           Hp = Hp - 16;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       cckw2: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckvF_info" {
     block_cckvF_info:
         const _cckvF;
         const 0;
         const 4294967326;
         const Scjc4_srt+584;
 },
 sat_sciNa_entry() //  [R1]
         { []
         }
     {offset
       cckwa: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cckwb; else goto cckwc;
       cckwb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckwc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cckw8_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call $wfmti_rcccm_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciNa_info" {
     sat_sciNa_info:
         const sat_sciNa_entry;
         const 5;
         const 12884901903;
         const Scjc4_srt+360;
 },
 _cckw8() //  [R1, R2]
         { []
         }
     {offset
       cckw8: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckw8_info" {
     block_cckw8_info:
         const _cckw8;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 sat_sciNe_entry() //  [R1]
         { []
         }
     {offset
       cckwl: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cckwm; else goto cckwn;
       cckwm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckwn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cckwj_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 48;
           call $wfmti_rcccm_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciNe_info" {
     sat_sciNe_info:
         const sat_sciNe_entry;
         const 5;
         const 12884901903;
         const Scjc4_srt+360;
 },
 _cckwj() //  [R1, R2]
         { []
         }
     {offset
       cckwj: // global
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjustSigned_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckwj_info" {
     block_cckwj_info:
         const _cckwj;
         const 3;
         const 4294967326;
         const Scjc4_srt+368;
 },
 sat_sciNq_entry() //  [R1]
         { []
         }
     {offset
       cckwz: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cckwA; else goto cckwB;
       cckwA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckwB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_cckwu_info;
           R3 = Text.Printf.formatChar2_closure;
           _sciMd::P64 = P64[R1 + 24];
           R2 = _sciMd::P64;
           P64[Sp - 64] = P64[R1 + 16];
           P64[Sp - 56] = _sciMd::P64;
           P64[Sp - 48] = P64[R1 + 32];
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 72;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciNq_info" {
     sat_sciNq_info:
         const sat_sciNq_entry;
         const 6;
         const 64424509455;
         const Scjc4_srt+592;
 },
 _cckwu() //  [R1]
         { []
         }
     {offset
       cckwu: // global
           if (R1 == 1) goto cckwy; else goto cckwx;
       cckwy: // global
           _sciMf::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cckwZ_info;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = _sciMf::P64;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl32_rcccx_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
       cckwx: // global
           I64[Sp] = block_cckwE_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto uckx4; else goto cckwG;
       uckx4: // global
           call _cckwE(R1) args: 0, res: 0, upd: 0;
       cckwG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cckwu_info" {
     block_cckwu_info:
         const _cckwu;
         const 6;
         const 30064771102;
         const Scjc4_srt+592;
 },
 _cckwZ() //  [R1, R2]
         { []
         }
     {offset
       cckwZ: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckwZ_info" {
     block_cckwZ_info:
         const _cckwZ;
         const 259;
         const 30;
 },
 _cckwE() //  [R1]
         { []
         }
     {offset
       cckwE: // global
           _sciMc::P64 = P64[Sp + 8];
           _sciMd::P64 = P64[Sp + 16];
           _sciMf::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cckwN; else goto cckwU;
       cckwN: // global
           I64[Sp + 24] = block_cckwK_info;
           R6 = _sciMd::P64;
           R5 = _sciMc::P64;
           R4 = _sciMf::P64;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl32_rcccx_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
       cckwU: // global
           I64[Sp + 24] = block_cckwS_info;
           R6 = _sciMd::P64;
           R5 = _sciMc::P64;
           R4 = _sciMf::P64;
           R3 = lvl40_rcccF_closure+2;
           R2 = lvl32_rcccx_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cckwE_info" {
     block_cckwE_info:
         const _cckwE;
         const 2054;
         const 30064771102;
         const Scjc4_srt+592;
 },
 _cckwK() //  [R1, R2]
         { []
         }
     {offset
       cckwK: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckwK_info" {
     block_cckwK_info:
         const _cckwK;
         const 259;
         const 30;
 },
 _cckwS() //  [R1, R2]
         { []
         }
     {offset
       cckwS: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckwS_info" {
     block_cckwS_info:
         const _cckwS;
         const 259;
         const 30;
 },
 sat_sciNu_entry() //  [R1]
         { []
         }
     {offset
       cckxc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cckxd; else goto cckxe;
       cckxd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckxe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cckxa_info;
           R6 = P64[R1 + 24];
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 32];
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl35_rcccA_closure;
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 40;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciNu_info" {
     sat_sciNu_info:
         const sat_sciNu_entry;
         const 5;
         const 21474836495;
         const Scjc4_srt+608;
 },
 _cckxa() //  [R1, R2]
         { []
         }
     {offset
       cckxa: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckxa_info" {
     block_cckxa_info:
         const _cckxa;
         const 2;
         const 30;
 },
 sat_sciNG_entry() //  [R1]
         { []
         }
     {offset
       cckxq: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cckxr; else goto cckxs;
       cckxr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckxs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_cckxl_info;
           R3 = Text.Printf.formatChar2_closure;
           _sciMd::P64 = P64[R1 + 24];
           R2 = _sciMd::P64;
           P64[Sp - 64] = P64[R1 + 16];
           P64[Sp - 56] = _sciMd::P64;
           P64[Sp - 48] = P64[R1 + 32];
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 72;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciNG_info" {
     sat_sciNG_info:
         const sat_sciNG_entry;
         const 6;
         const 3027951943695;
         const Scjc4_srt+560;
 },
 _cckxl() //  [R1]
         { []
         }
     {offset
       cckxl: // global
           if (R1 == 1) goto cckxp; else goto cckxo;
       cckxp: // global
           _sciMf::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cckxQ_info;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = _sciMf::P64;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl24_rcccp_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
       cckxo: // global
           I64[Sp] = block_cckxv_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto uckxV; else goto cckxx;
       uckxV: // global
           call _cckxv(R1) args: 0, res: 0, upd: 0;
       cckxx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cckxl_info" {
     block_cckxl_info:
         const _cckxl;
         const 6;
         const 2478196129822;
         const Scjc4_srt+560;
 },
 _cckxQ() //  [R1, R2]
         { []
         }
     {offset
       cckxQ: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckxQ_info" {
     block_cckxQ_info:
         const _cckxQ;
         const 259;
         const 30;
 },
 _cckxv() //  [R1]
         { []
         }
     {offset
       cckxv: // global
           _sciMc::P64 = P64[Sp + 8];
           _sciMd::P64 = P64[Sp + 16];
           _sciMf::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cckxE; else goto cckxL;
       cckxE: // global
           I64[Sp + 24] = block_cckxB_info;
           R6 = _sciMd::P64;
           R5 = _sciMc::P64;
           R4 = _sciMf::P64;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = lvl24_rcccp_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
       cckxL: // global
           I64[Sp + 24] = block_cckxJ_info;
           R6 = _sciMd::P64;
           R5 = _sciMc::P64;
           R4 = _sciMf::P64;
           R3 = lvl41_rcccG_closure+2;
           R2 = lvl24_rcccp_closure;
           Sp = Sp + 24;
           call $wfmtu_rcccl_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cckxv_info" {
     block_cckxv_info:
         const _cckxv;
         const 2054;
         const 2478196129822;
         const Scjc4_srt+560;
 },
 _cckxB() //  [R1, R2]
         { []
         }
     {offset
       cckxB: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckxB_info" {
     block_cckxB_info:
         const _cckxB;
         const 259;
         const 30;
 },
 _cckxJ() //  [R1, R2]
         { []
         }
     {offset
       cckxJ: // global
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Text.Printf.$wadjust_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckxJ_info" {
     block_cckxJ_info:
         const _cckxJ;
         const 259;
         const 30;
 },
 section ""relreadonly" . uckzR_srtd" {
     uckzR_srtd:
         const Scjc4_srt+320;
         const 43;
         const 8795556937825;
 },
 Text.Printf.$wformatIntegral_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccky0: // global
           if ((Sp + -56) < SpLim) (likely: False) goto ccky1; else goto ccky2;
       ccky1: // global
           R1 = Text.Printf.$wformatIntegral_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       ccky2: // global
           I64[Sp - 48] = block_ccksF_info;
           R1 = R5;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uckzM; else goto ccksG;
       uckzM: // global
           call _ccksF(R1) args: 0, res: 0, upd: 0;
       ccksG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wformatIntegral_info" {
     Text.Printf.$wformatIntegral_info:
         const Text.Printf.$wformatIntegral_entry;
         const 0;
         const 18446744069414584334;
         const 38654705664;
         const uckzR_srtd;
         const 16393;
         const Text.Printf.$wformatIntegral_slow;
 },
 section ""relreadonly" . uckzS_srtd" {
     uckzS_srtd:
         const Scjc4_srt+320;
         const 43;
         const 7696045310049;
 },
 _ccksF() //  [R1]
         { []
         }
     {offset
       ccksF: // global
           _sciMg::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto cckxX; else goto cckxY;
       cckxX: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cckyK; else goto cckyJ;
       cckyK: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cckyJ: // global
           _sciMe::P64 = P64[Sp + 24];
           _sciMh::P64 = P64[Sp + 48];
           _sciMi::P64 = P64[Sp + 56];
           _sciMj::P64 = P64[Sp + 64];
           _sciNI::I64 = I64[Sp + 72];
           if (_sciNI::I64 != 118) goto cckyM; else goto cckyN;
       cckyM: // global
           I64[Hp - 72] = GHC.Types.C#_con_info;
           I64[Hp - 64] = _sciNI::I64;
           I64[Hp - 56] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 48] = _sciMe::P64;
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = _sciMg::P64;
           P64[Hp - 24] = _sciMh::P64;
           P64[Hp - 16] = _sciMi::P64;
           P64[Hp - 8] = _sciMj::P64;
           P64[Hp] = Hp - 71;
           P64[Sp + 72] = _sciMe::P64;
           P64[Sp + 64] = GHC.Base.Nothing_closure+1;
           P64[Sp + 56] = _sciMg::P64;
           P64[Sp + 48] = _sciMh::P64;
           P64[Sp + 40] = _sciMi::P64;
           P64[Sp + 24] = _sciMj::P64;
           I64[Sp] = _sciNI::I64;
           Sp = Sp - 8;
           goto uckzz;
       cckyN: // global
           I64[Hp - 72] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 64] = _sciMe::P64;
           P64[Hp - 56] = GHC.Base.Nothing_closure+1;
           P64[Hp - 48] = _sciMg::P64;
           P64[Hp - 40] = _sciMh::P64;
           P64[Hp - 32] = _sciMi::P64;
           P64[Hp - 24] = _sciMj::P64;
           P64[Hp - 16] = lvl23_rccco_closure+1;
           _ccksP::P64 = Hp - 71;
           Hp = Hp - 16;
           P64[Sp + 72] = _sciMe::P64;
           P64[Sp + 64] = GHC.Base.Nothing_closure+1;
           P64[Sp + 56] = _sciMg::P64;
           P64[Sp + 48] = _sciMh::P64;
           P64[Sp + 40] = _sciMi::P64;
           P64[Sp + 24] = _sciMj::P64;
           I64[Sp] = 100;
           Sp = Sp - 8;
           goto uckzz;
       uckzz: // global
           call _cckto() args: 0, res: 0, upd: 0;
       cckxY: // global
           I64[Sp] = block_ccksS_info;
           _sciNH::P64 = R1;
           R1 = _sciMg::P64;
           P64[Sp + 40] = _sciNH::P64;
           if (R1 & 7 != 0) goto uckzx; else goto ccksT;
       uckzx: // global
           call _ccksS(R1) args: 0, res: 0, upd: 0;
       ccksT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccksF_info" {
     block_ccksF_info:
         const _ccksF;
         const 16393;
         const 18446744069414584350;
         const uckzS_srtd;
 },
 section ""relreadonly" . uckzT_srtd" {
     uckzT_srtd:
         const Scjc4_srt+320;
         const 43;
         const 7696045310049;
 },
 _ccksS() //  [R1]
         { []
         }
     {offset
       ccksS: // global
           if (R1 & 7 == 1) goto cckyQ; else goto cckyY;
       cckyQ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cckyT; else goto cckyS;
       cckyT: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cckyS: // global
           _sciMe::P64 = P64[Sp + 24];
           _sciMh::P64 = P64[Sp + 48];
           _sciMi::P64 = P64[Sp + 56];
           _sciMj::P64 = P64[Sp + 64];
           _sciNH::P64 = P64[Sp + 40];
           _sciNO::I64 = I64[Sp + 72];
           if (_sciNO::I64 != 118) goto cckyV; else goto cckyW;
       cckyV: // global
           I64[Hp - 72] = GHC.Types.C#_con_info;
           I64[Hp - 64] = _sciNO::I64;
           I64[Hp - 56] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 48] = _sciMe::P64;
           P64[Hp - 40] = _sciNH::P64;
           P64[Hp - 32] = GHC.Base.Nothing_closure+1;
           P64[Hp - 24] = _sciMh::P64;
           P64[Hp - 16] = _sciMi::P64;
           P64[Hp - 8] = _sciMj::P64;
           P64[Hp] = Hp - 71;
           P64[Sp + 72] = _sciMe::P64;
           P64[Sp + 64] = _sciNH::P64;
           P64[Sp + 56] = GHC.Base.Nothing_closure+1;
           P64[Sp + 48] = _sciMh::P64;
           P64[Sp + 40] = _sciMi::P64;
           P64[Sp + 24] = _sciMj::P64;
           I64[Sp] = _sciNO::I64;
           Sp = Sp - 8;
           goto uckzC;
       cckyW: // global
           I64[Hp - 72] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 64] = _sciMe::P64;
           P64[Hp - 56] = _sciNH::P64;
           P64[Hp - 48] = GHC.Base.Nothing_closure+1;
           P64[Hp - 40] = _sciMh::P64;
           P64[Hp - 32] = _sciMi::P64;
           P64[Hp - 24] = _sciMj::P64;
           P64[Hp - 16] = lvl23_rccco_closure+1;
           _cckt2::P64 = Hp - 71;
           Hp = Hp - 16;
           P64[Sp + 72] = _sciMe::P64;
           P64[Sp + 64] = _sciNH::P64;
           P64[Sp + 56] = GHC.Base.Nothing_closure+1;
           P64[Sp + 48] = _sciMh::P64;
           P64[Sp + 40] = _sciMi::P64;
           P64[Sp + 24] = _sciMj::P64;
           I64[Sp] = 100;
           Sp = Sp - 8;
           goto uckzC;
       uckzC: // global
           call _cckto() args: 0, res: 0, upd: 0;
       cckyY: // global
           I64[Sp - 8] = block_cckt5_info;
           _sciNN::P64 = R1;
           R1 = P64[R1 + 6];
           P64[Sp] = _sciNN::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uckzA; else goto cckt6;
       uckzA: // global
           call _cckt5(R1) args: 0, res: 0, upd: 0;
       cckt6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccksS_info" {
     block_ccksS_info:
         const _ccksS;
         const 16393;
         const 18446744069414584350;
         const uckzT_srtd;
 },
 section ""relreadonly" . uckzU_srtd" {
     uckzU_srtd:
         const Scjc4_srt+320;
         const 43;
         const 7696045310049;
 },
 _cckt5() //  [R1]
         { []
         }
     {offset
       cckt5: // global
           _sciMe::P64 = P64[Sp + 32];
           _sciMh::P64 = P64[Sp + 56];
           _sciMi::P64 = P64[Sp + 64];
           _sciMj::P64 = P64[Sp + 72];
           _sciMk::I64 = I64[Sp + 80];
           _sciNH::P64 = P64[Sp + 48];
           if (R1 & 7 == 1) goto cckz0; else goto cckz7;
       cckz0: // global
           Hp = Hp + 80;
           _sciNT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cckza; else goto cckz2;
       cckz2: // global
           _sciNN::P64 = P64[Sp + 8];
           if (_sciMk::I64 == 118) goto cckz6; else goto cckz5;
       cckz6: // global
           I64[Hp - 72] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 64] = _sciMe::P64;
           P64[Hp - 56] = _sciNH::P64;
           P64[Hp - 48] = _sciNN::P64;
           P64[Hp - 40] = _sciMh::P64;
           P64[Hp - 32] = _sciMi::P64;
           P64[Hp - 24] = _sciMj::P64;
           P64[Hp - 16] = lvl23_rccco_closure+1;
           _ccktf::P64 = Hp - 71;
           Hp = Hp - 16;
           P64[Sp + 80] = _sciMe::P64;
           P64[Sp + 72] = _sciNH::P64;
           P64[Sp + 64] = _sciNN::P64;
           P64[Sp + 56] = _sciMh::P64;
           P64[Sp + 48] = _sciMi::P64;
           P64[Sp + 32] = _sciMj::P64;
           I64[Sp + 8] = 100;
           goto uckzG;
       cckz5: // global
           I64[Hp - 72] = GHC.Types.C#_con_info;
           I64[Hp - 64] = _sciMk::I64;
           I64[Hp - 56] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 48] = _sciMe::P64;
           P64[Hp - 40] = _sciNH::P64;
           P64[Hp - 32] = _sciNN::P64;
           P64[Hp - 24] = _sciMh::P64;
           P64[Hp - 16] = _sciMi::P64;
           P64[Hp - 8] = _sciMj::P64;
           P64[Hp] = Hp - 71;
           P64[Sp + 80] = _sciMe::P64;
           P64[Sp + 72] = _sciNH::P64;
           P64[Sp + 64] = _sciNN::P64;
           P64[Sp + 56] = _sciMh::P64;
           P64[Sp + 48] = _sciMi::P64;
           P64[Sp + 32] = _sciMj::P64;
           I64[Sp + 8] = _sciMk::I64;
           goto uckzG;
       cckz7: // global
           Hp = Hp + 80;
           _sciNT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cckza; else goto cckz9;
       cckza: // global
           HpAlloc = 80;
           R1 = _sciNT::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cckz9: // global
           if (_sciMk::I64 == 118) goto cckzd; else goto cckzc;
       cckzd: // global
           I64[Hp - 72] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 64] = _sciMe::P64;
           P64[Hp - 56] = _sciNH::P64;
           P64[Hp - 48] = GHC.Base.Nothing_closure+1;
           P64[Hp - 40] = _sciMh::P64;
           P64[Hp - 32] = _sciMi::P64;
           P64[Hp - 24] = _sciMj::P64;
           P64[Hp - 16] = lvl23_rccco_closure+1;
           _ccktn::P64 = Hp - 71;
           Hp = Hp - 16;
           P64[Sp + 80] = _sciMe::P64;
           P64[Sp + 72] = _sciNH::P64;
           P64[Sp + 64] = GHC.Base.Nothing_closure+1;
           P64[Sp + 56] = _sciMh::P64;
           P64[Sp + 48] = _sciMi::P64;
           P64[Sp + 32] = _sciMj::P64;
           I64[Sp + 8] = 100;
           goto uckzG;
       cckzc: // global
           I64[Hp - 72] = GHC.Types.C#_con_info;
           I64[Hp - 64] = _sciMk::I64;
           I64[Hp - 56] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 48] = _sciMe::P64;
           P64[Hp - 40] = _sciNH::P64;
           P64[Hp - 32] = GHC.Base.Nothing_closure+1;
           P64[Hp - 24] = _sciMh::P64;
           P64[Hp - 16] = _sciMi::P64;
           P64[Hp - 8] = _sciMj::P64;
           P64[Hp] = Hp - 71;
           I64[Sp + 8] = _sciMk::I64;
           P64[Sp + 32] = _sciMj::P64;
           P64[Sp + 48] = _sciMi::P64;
           P64[Sp + 56] = _sciMh::P64;
           P64[Sp + 64] = GHC.Base.Nothing_closure+1;
           P64[Sp + 72] = _sciNH::P64;
           P64[Sp + 80] = _sciMe::P64;
           goto uckzG;
       uckzG: // global
           call _cckto() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cckt5_info" {
     block_cckt5_info:
         const _cckt5;
         const 32778;
         const 18446744069414584350;
         const uckzU_srtd;
 },
 section ""relreadonly" . uckzV_srtd" {
     uckzV_srtd:
         const Scjc4_srt+320;
         const 43;
         const 7696045310049;
 },
 _cckto() //  []
         { []
         }
     {offset
       cckto: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccky5; else goto ccky4;
       ccky5: // global
           HpAlloc = 64;
           I64[Sp] = block_cckto_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       ccky4: // global
           _sciMu::I64 = I64[Sp + 8];
           if (_sciMu::I64 >= 121) goto ccky7; else goto uckzi;
       uckzi: // global
           _sciMc::P64 = P64[Sp + 16];
           _sciMd::P64 = P64[Sp + 24];
           _sciMf::P64 = P64[Sp + 40];
           _sciMm::P64 = P64[Sp + 80];
           _sciMo::P64 = P64[Sp + 64];
           _sciMq::P64 = P64[Sp + 48];
           if (_sciMu::I64 < 98) goto uckzj; else goto uckzk;
       uckzj: // global
           if (_sciMu::I64 != 88) goto ccky7; else goto ccky8;
       ccky8: // global
           I64[Hp - 56] = sat_sciMJ_info;
           P64[Hp - 40] = _sciMc::P64;
           P64[Hp - 32] = _sciMd::P64;
           P64[Hp - 24] = _sciMf::P64;
           P64[Hp - 16] = _sciMm::P64;
           P64[Hp - 8] = _sciMo::P64;
           P64[Hp] = _sciMq::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 88;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       uckzk: // global
           _sciMp::P64 = P64[Sp + 56];
           switch [98 .. 120] _sciMu::I64 {
               case 98 : goto ccky9;
               case 99 : goto cckya;
               case 100 : goto cckyD;
               case 105 : goto cckyE;
               case 111 : goto cckyF;
               case 117 : goto cckyG;
               case 120 : goto cckyH;
               default: {goto ccky7;}
           }
       cckyH: // global
           I64[Hp - 56] = sat_sciNG_info;
           P64[Hp - 40] = _sciMc::P64;
           P64[Hp - 32] = _sciMd::P64;
           P64[Hp - 24] = _sciMf::P64;
           P64[Hp - 16] = _sciMm::P64;
           P64[Hp - 8] = _sciMo::P64;
           P64[Hp] = _sciMq::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 88;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cckyG: // global
           I64[Hp - 56] = sat_sciNu_info;
           P64[Hp - 40] = _sciMc::P64;
           P64[Hp - 32] = _sciMd::P64;
           P64[Hp - 24] = _sciMf::P64;
           P64[Hp - 16] = _sciMm::P64;
           P64[Hp - 8] = _sciMo::P64;
           _cckx6::P64 = Hp - 56;
           Hp = Hp - 8;
           R2 = _cckx6::P64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 88;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cckyF: // global
           I64[Hp - 56] = sat_sciNq_info;
           P64[Hp - 40] = _sciMc::P64;
           P64[Hp - 32] = _sciMd::P64;
           P64[Hp - 24] = _sciMf::P64;
           P64[Hp - 16] = _sciMm::P64;
           P64[Hp - 8] = _sciMo::P64;
           P64[Hp] = _sciMq::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 88;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cckyE: // global
           I64[Hp - 56] = sat_sciNe_info;
           P64[Hp - 40] = _sciMd::P64;
           P64[Hp - 32] = _sciMf::P64;
           P64[Hp - 24] = _sciMm::P64;
           P64[Hp - 16] = _sciMo::P64;
           P64[Hp - 8] = _sciMp::P64;
           _cckwf::P64 = Hp - 56;
           Hp = Hp - 8;
           R2 = _cckwf::P64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 88;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cckyD: // global
           I64[Hp - 56] = sat_sciNa_info;
           P64[Hp - 40] = _sciMd::P64;
           P64[Hp - 32] = _sciMf::P64;
           P64[Hp - 24] = _sciMm::P64;
           P64[Hp - 16] = _sciMo::P64;
           P64[Hp - 8] = _sciMp::P64;
           _cckw4::P64 = Hp - 56;
           Hp = Hp - 8;
           R2 = _cckw4::P64;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 88;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cckya: // global
           Hp = Hp - 64;
           I64[Sp + 16] = block_cckvh_info;
           R3 = Text.Printf.formatChar2_closure;
           R2 = _sciMd::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       ccky9: // global
           I64[Hp - 56] = sat_sciMV_info;
           P64[Hp - 40] = _sciMc::P64;
           P64[Hp - 32] = _sciMd::P64;
           P64[Hp - 24] = _sciMf::P64;
           P64[Hp - 16] = _sciMm::P64;
           P64[Hp - 8] = _sciMo::P64;
           P64[Hp] = _sciMq::P64;
           R2 = Hp - 56;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 88;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       ccky7: // global
           Hp = Hp - 64;
           R2 = _sciMu::I64;
           Sp = Sp + 88;
           call Text.Printf.$werrorBadFormat_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckto_info" {
     block_cckto_info:
         const _cckto;
         const 74;
         const 18446744069414584350;
         const uckzV_srtd;
 },
 _cckvh() //  [R1]
         { []
         }
     {offset
       cckvh: // global
           if (R1 == 1) goto cckyg; else goto uckzt;
       cckyg: // global
           I64[Sp] = block_cckvm_info;
           R3 = lvl31_rcccw_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       uckzt: // global
           Sp = Sp + 72;
           call _cckyC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cckvh_info" {
     block_cckvh_info:
         const _cckvh;
         const 1800;
         const 108227132840214558;
         const Scjc4_srt+464;
 },
 _cckvm() //  [R1]
         { []
         }
     {offset
       cckvm: // global
           if (R1 == 1) goto cckym; else goto uckzu;
       cckym: // global
           I64[Sp] = block_cckvr_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto uckzI; else goto cckvs;
       uckzI: // global
           call _cckvr(R1) args: 0, res: 0, upd: 0;
       cckvs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       uckzu: // global
           Sp = Sp + 72;
           call _cckyC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cckvm_info" {
     block_cckvm_info:
         const _cckvm;
         const 1800;
         const 36169538802286622;
         const Scjc4_srt+464;
 },
 _cckvr() //  [R1]
         { []
         }
     {offset
       cckvr: // global
           if (R1 & 7 == 1) goto cckyp; else goto uckzv;
       cckyp: // global
           I64[Sp] = block_cckvw_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[Sp + 16];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       uckzv: // global
           Sp = Sp + 72;
           call _cckyC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cckvr_info" {
     block_cckvr_info:
         const _cckvr;
         const 5896;
         const 36169538802286622;
         const Scjc4_srt+464;
 },
 _cckvw() //  [R1]
         { []
         }
     {offset
       cckvw: // global
           if (R1 & 7 == 1) goto uckzw; else goto cckyv;
       uckzw: // global
           Sp = Sp + 72;
           call _cckyC() args: 0, res: 0, upd: 0;
       cckyv: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cckyy; else goto cckyx;
       cckyy: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cckyx: // global
           I64[Hp - 40] = sat_sciN4_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.Types.[]_closure+1;
           R6 = 115;
           R5 = P64[Sp + 48];
           R4 = GHC.Base.Nothing_closure+1;
           R3 = P64[Sp + 64];
           R2 = Hp - 14;
           Sp = Sp + 72;
           call Text.Printf.$w$sformatString_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckvw_info" {
     block_cckvw_info:
         const _cckvw;
         const 6024;
         const 36169538802286622;
         const Scjc4_srt+464;
 },
 _cckyC() //  []
         { []
         }
     {offset
       cckyC: // global
           R1 = lvl30_rcccv_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.115216103 UTC

[section ""data" . Text.Printf.formatIntegral_closure" {
     Text.Printf.formatIntegral_closure:
         const Text.Printf.formatIntegral_info;
         const 0;
 },
 Text.Printf.formatIntegral_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cckFz: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cckFD; else goto cckFE;
       cckFD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.formatIntegral_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cckFE: // global
           I64[Sp - 24] = block_cckFw_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uckFM; else goto cckFx;
       uckFM: // global
           call _cckFw(R1) args: 0, res: 0, upd: 0;
       cckFx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.formatIntegral_info" {
     Text.Printf.formatIntegral_info:
         const Text.Printf.formatIntegral_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const Scjc4_srt+640;
 },
 _cckFw() //  [R1]
         { []
         }
     {offset
       cckFw: // global
           I64[Sp - 48] = block_cckFC_info;
           _sciO6::P64 = P64[R1 + 7];
           _sciO7::P64 = P64[R1 + 15];
           _sciO8::P64 = P64[R1 + 23];
           _sciO9::P64 = P64[R1 + 31];
           _sciOa::P64 = P64[R1 + 39];
           _sciOb::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sciO7::P64;
           P64[Sp - 32] = _sciO8::P64;
           P64[Sp - 24] = _sciO9::P64;
           P64[Sp - 16] = _sciOa::P64;
           P64[Sp - 8] = _sciOb::P64;
           P64[Sp] = _sciO6::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uckFL; else goto cckFG;
       uckFL: // global
           call _cckFC(R1) args: 0, res: 0, upd: 0;
       cckFG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckFw_info" {
     block_cckFw_info:
         const _cckFw;
         const 2;
         const 4294967326;
         const Scjc4_srt+640;
 },
 _cckFC() //  [R1]
         { []
         }
     {offset
       cckFC: // global
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 64];
           R2 = P64[Sp + 56];
           _sciOb::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = P64[Sp + 32];
           P64[Sp + 56] = _sciOb::P64;
           I64[Sp + 64] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckFC_info" {
     block_cckFC_info:
         const _cckFC;
         const 8;
         const 4294967326;
         const Scjc4_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.122180672 UTC

[section ""data" . Text.Printf.formatChar1_closure" {
     Text.Printf.formatChar1_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.formatChar2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.126501187 UTC

[section ""data" . Text.Printf.$wformatChar_closure" {
     Text.Printf.$wformatChar_closure:
         const Text.Printf.$wformatChar_info;
         const 0;
 },
 Text.Printf.$wformatChar_slow() //  [R1]
         { []
         }
     {offset
       cckG7: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$wformatChar_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sciOr_entry() //  [R1]
         { []
         }
     {offset
       cckGk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cckGl; else goto cckGm;
       cckGl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckGm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cckGh_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uckGr; else goto cckGi;
       uckGr: // global
           call _cckGh(R1) args: 0, res: 0, upd: 0;
       cckGi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciOr_info" {
     sat_sciOr_info:
         const sat_sciOr_entry;
         const 1;
         const 16;
 },
 _cckGh() //  [R1]
         { []
         }
     {offset
       cckGh: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckGh_info" {
     block_cckGh_info:
         const _cckGh;
         const 0;
         const 30;
 },
 sat_sciOv_entry() //  [R1]
         { []
         }
     {offset
       cckGA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cckGB; else goto cckGC;
       cckGB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckGC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cckGx_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uckGH; else goto cckGy;
       uckGH: // global
           call _cckGx(R1) args: 0, res: 0, upd: 0;
       cckGy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciOv_info" {
     sat_sciOv_info:
         const sat_sciOv_entry;
         const 1;
         const 16;
 },
 _cckGx() //  [R1]
         { []
         }
     {offset
       cckGx: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cckGx_info" {
     block_cckGx_info:
         const _cckGx;
         const 0;
         const 30;
 },
 Text.Printf.$wformatChar_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cckGL: // global
           _sciOj::P64 = R6;
           _sciOi::P64 = R5;
           _sciOh::P64 = R4;
           _sciOg::P64 = R3;
           _sciOf::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cckGM; else goto cckGN;
       cckGN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cckGP; else goto cckGO;
       cckGP: // global
           HpAlloc = 24;
           goto cckGM;
       cckGM: // global
           R1 = Text.Printf.$wformatChar_closure;
           P64[Sp - 40] = _sciOf::P64;
           P64[Sp - 32] = _sciOg::P64;
           P64[Sp - 24] = _sciOh::P64;
           P64[Sp - 16] = _sciOi::P64;
           P64[Sp - 8] = _sciOj::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cckGO: // global
           _sciOn::I64 = I64[Sp + 16];
           if (_sciOn::I64 != 118) goto cckGJ; else goto cckGK;
       cckGJ: // global
           I64[Hp - 16] = sat_sciOr_info;
           P64[Hp] = _sciOf::P64;
           R6 = _sciOi::P64;
           R5 = _sciOh::P64;
           R4 = _sciOg::P64;
           R3 = Hp - 16;
           R2 = Text.Printf.formatChar1_closure+2;
           P64[Sp - 8] = _sciOj::P64;
           I64[Sp + 16] = _sciOn::I64;
           Sp = Sp - 8;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
       cckGK: // global
           I64[Hp - 16] = sat_sciOv_info;
           P64[Hp] = _sciOf::P64;
           R6 = _sciOi::P64;
           R5 = _sciOh::P64;
           R4 = _sciOg::P64;
           R3 = Hp - 16;
           R2 = Text.Printf.formatChar1_closure+2;
           P64[Sp - 8] = _sciOj::P64;
           I64[Sp + 16] = 99;
           Sp = Sp - 8;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wformatChar_info" {
     Text.Printf.$wformatChar_info:
         const Text.Printf.$wformatChar_entry;
         const 0;
         const 210453397518;
         const 34359738368;
         const Scjc4_srt+640;
         const 8200;
         const Text.Printf.$wformatChar_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.13965965 UTC

[section ""data" . Text.Printf.formatChar_closure" {
     Text.Printf.formatChar_closure:
         const Text.Printf.formatChar_info;
         const 0;
 },
 Text.Printf.formatChar_entry() //  [R2, R3]
         { []
         }
     {offset
       cckHq: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cckHu; else goto cckHv;
       cckHu: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.formatChar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cckHv: // global
           I64[Sp - 16] = block_cckHn_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uckHD; else goto cckHo;
       uckHD: // global
           call _cckHn(R1) args: 0, res: 0, upd: 0;
       cckHo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.formatChar_info" {
     Text.Printf.formatChar_info:
         const Text.Printf.formatChar_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const Scjc4_srt+672;
 },
 _cckHn() //  [R1]
         { []
         }
     {offset
       cckHn: // global
           I64[Sp - 48] = block_cckHt_info;
           _sciOz::P64 = P64[R1 + 7];
           _sciOA::P64 = P64[R1 + 15];
           _sciOB::P64 = P64[R1 + 23];
           _sciOC::P64 = P64[R1 + 31];
           _sciOD::P64 = P64[R1 + 39];
           _sciOE::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sciOA::P64;
           P64[Sp - 32] = _sciOB::P64;
           P64[Sp - 24] = _sciOC::P64;
           P64[Sp - 16] = _sciOD::P64;
           P64[Sp - 8] = _sciOE::P64;
           P64[Sp] = _sciOz::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uckHC; else goto cckHx;
       uckHC: // global
           call _cckHt(R1) args: 0, res: 0, upd: 0;
       cckHx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckHn_info" {
     block_cckHn_info:
         const _cckHn;
         const 1;
         const 4294967326;
         const Scjc4_srt+672;
 },
 _cckHt() //  [R1]
         { []
         }
     {offset
       cckHt: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 56];
           _sciOE::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 32];
           P64[Sp + 48] = _sciOE::P64;
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$wformatChar_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckHt_info" {
     block_cckHt_info:
         const _cckHt;
         const 7;
         const 4294967326;
         const Scjc4_srt+672;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.147280556 UTC

[section ""data" . Text.Printf.$fPrintfArgChar_closure" {
     Text.Printf.$fPrintfArgChar_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.formatChar_closure+2;
         const Text.Printf.$fPrintfArgChar_$cparseFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.149023758 UTC

[section ""data" . Text.Printf.$fPrintfArgWord1_closure" {
     Text.Printf.$fPrintfArgWord1_closure:
         const GHC.Types.C#_con_info;
         const 117;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.155063555 UTC

[section ""data" . Text.Printf.$w$sformatInt3_closure" {
     Text.Printf.$w$sformatInt3_closure:
         const Text.Printf.$w$sformatInt3_info;
         const 0;
 },
 Text.Printf.$w$sformatInt3_slow() //  [R1]
         { []
         }
     {offset
       cckHY: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt3_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sciP6_entry() //  [R1]
         { []
         }
     {offset
       cckIj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cckIk; else goto cckIl;
       cckIk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckIl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Word.$fIntegralWord64_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciP6_info" {
     sat_sciP6_info:
         const sat_sciP6_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uckJ6_srtd" {
     uckJ6_srtd:
         const Scjc4_srt+192;
         const 62;
         const 2305843009213693957;
 },
 sat_sciP5_entry() //  [R1]
         { []
         }
     {offset
       cckIx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cckIy; else goto cckIz;
       cckIy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckIz: // global
           I64[Sp - 8] = block_cckIq_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uckIS; else goto cckIr;
       uckIS: // global
           call _cckIq(R1) args: 0, res: 0, upd: 0;
       cckIr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciP5_info" {
     sat_sciP5_info:
         const sat_sciP5_entry;
         const 1;
         const 18446744069414584336;
         const uckJ6_srtd;
 },
 section ""relreadonly" . uckJ7_srtd" {
     uckJ7_srtd:
         const Scjc4_srt+192;
         const 62;
         const 2305843009213693957;
 },
 _cckIq() //  [R1]
         { []
         }
     {offset
       cckIq: // global
           if (R1 & 7 == 1) goto cckIu; else goto cckIv;
       cckIu: // global
           R1 = Text.Printf.formatChar1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cckIv: // global
           I64[Sp] = block_cckIF_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckIq_info" {
     block_cckIq_info:
         const _cckIq;
         const 0;
         const 18446744069414584350;
         const uckJ7_srtd;
 },
 _cckIF() //  [R1]
         { []
         }
     {offset
       cckIF: // global
           if (R1 & 7 == 1) goto cckIM; else goto cckIQ;
       cckIM: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cckIQ: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckIF_info" {
     block_cckIF_info:
         const _cckIF;
         const 0;
         const 4294967326;
         const Scjc4_srt+696;
 },
 section ""relreadonly" . uckJ8_srtd" {
     uckJ8_srtd:
         const Scjc4_srt+192;
         const 65;
         const 11601272640106397697;
         const 1;
 },
 Text.Printf.$w$sformatInt3_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cckIW: // global
           _sciOM::P64 = R6;
           _sciOL::P64 = R5;
           _sciOK::P64 = R4;
           _sciOJ::P64 = R3;
           _sciOI::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cckIX; else goto cckIY;
       cckIY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cckJ0; else goto cckIZ;
       cckJ0: // global
           HpAlloc = 16;
           goto cckIX;
       cckIX: // global
           R1 = Text.Printf.$w$sformatInt3_closure;
           P64[Sp - 40] = _sciOI::P64;
           P64[Sp - 32] = _sciOJ::P64;
           P64[Sp - 24] = _sciOK::P64;
           P64[Sp - 16] = _sciOL::P64;
           P64[Sp - 8] = _sciOM::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cckIZ: // global
           _sciON::P64 = P64[Sp];
           _sciOO::P64 = P64[Sp + 8];
           _sciP7::I64 = I64[Sp + 16];
           if (_sciP7::I64 != 118) goto cckIU; else goto cckIV;
       cckIU: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sciP7::I64;
           _sciOX::P64 = Hp - 7;
           _sciOW::P64 = _sciOO::P64;
           _sciOV::P64 = _sciON::P64;
           _sciOU::P64 = _sciOM::P64;
           _sciOT::P64 = _sciOL::P64;
           _sciOS::P64 = _sciOK::P64;
           _sciOR::P64 = _sciOJ::P64;
           goto sciOQ;
       cckIV: // global
           Hp = Hp - 16;
           _sciOX::P64 = Text.Printf.$fPrintfArgWord1_closure+1;
           _sciOW::P64 = _sciOO::P64;
           _sciOV::P64 = _sciON::P64;
           _sciOU::P64 = _sciOM::P64;
           _sciOT::P64 = _sciOL::P64;
           _sciOS::P64 = _sciOK::P64;
           _sciOR::P64 = _sciOJ::P64;
           goto sciOQ;
       sciOQ: // global
           I64[Sp - 48] = block_cckIa_info;
           R1 = _sciOX::P64;
           P64[Sp - 40] = _sciOS::P64;
           P64[Sp - 32] = _sciOT::P64;
           P64[Sp - 24] = _sciOU::P64;
           P64[Sp - 16] = _sciOV::P64;
           P64[Sp - 8] = _sciOW::P64;
           P64[Sp] = _sciOR::P64;
           P64[Sp + 16] = _sciOI::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uckJ5; else goto cckIb;
       uckJ5: // global
           call _cckIa(R1) args: 0, res: 0, upd: 0;
       cckIb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sformatInt3_info" {
     Text.Printf.$w$sformatInt3_info:
         const Text.Printf.$w$sformatInt3_entry;
         const 0;
         const 18446744069414584334;
         const 34359738368;
         const uckJ8_srtd;
         const 8200;
         const Text.Printf.$w$sformatInt3_slow;
 },
 section ""relreadonly" . uckJ9_srtd" {
     uckJ9_srtd:
         const Scjc4_srt+192;
         const 64;
         const 11601272640106397697;
 },
 _cckIa() //  [R1]
         { []
         }
     {offset
       cckIa: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cckJ4; else goto cckJ3;
       cckJ4: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cckJ3: // global
           _sciOZ::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sciP6_info;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = sat_sciP5_info;
           P64[Hp] = P64[Sp + 56];
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sciOW::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = P64[Sp + 32];
           P64[Sp + 56] = _sciOW::P64;
           I64[Sp + 64] = _sciOZ::I64;
           Sp = Sp + 40;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckIa_info" {
     block_cckIa_info:
         const _cckIa;
         const 8;
         const 18446744069414584350;
         const uckJ9_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.172852293 UTC

[section ""data" . Text.Printf.$fPrintfArgWord64_$sformatInt_closure" {
     Text.Printf.$fPrintfArgWord64_$sformatInt_closure:
         const Text.Printf.$fPrintfArgWord64_$sformatInt_info;
         const 0;
 },
 Text.Printf.$fPrintfArgWord64_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cckK4: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cckK8; else goto cckK9;
       cckK8: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgWord64_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cckK9: // global
           I64[Sp - 16] = block_cckK1_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uckKh; else goto cckK2;
       uckKh: // global
           call _cckK1(R1) args: 0, res: 0, upd: 0;
       cckK2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgWord64_$sformatInt_info" {
     Text.Printf.$fPrintfArgWord64_$sformatInt_info:
         const Text.Printf.$fPrintfArgWord64_$sformatInt_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Scjc4_srt+704;
 },
 _cckK1() //  [R1]
         { []
         }
     {offset
       cckK1: // global
           I64[Sp - 48] = block_cckK7_info;
           _sciPc::P64 = P64[R1 + 7];
           _sciPd::P64 = P64[R1 + 15];
           _sciPe::P64 = P64[R1 + 23];
           _sciPf::P64 = P64[R1 + 31];
           _sciPg::P64 = P64[R1 + 39];
           _sciPh::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sciPd::P64;
           P64[Sp - 32] = _sciPe::P64;
           P64[Sp - 24] = _sciPf::P64;
           P64[Sp - 16] = _sciPg::P64;
           P64[Sp - 8] = _sciPh::P64;
           P64[Sp] = _sciPc::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uckKg; else goto cckKb;
       uckKg: // global
           call _cckK7(R1) args: 0, res: 0, upd: 0;
       cckKb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckK1_info" {
     block_cckK1_info:
         const _cckK1;
         const 1;
         const 4294967326;
         const Scjc4_srt+704;
 },
 _cckK7() //  [R1]
         { []
         }
     {offset
       cckK7: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 56];
           _sciPh::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 32];
           P64[Sp + 48] = _sciPh::P64;
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt3_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckK7_info" {
     block_cckK7_info:
         const _cckK7;
         const 7;
         const 4294967326;
         const Scjc4_srt+704;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.18413344 UTC

[section ""data" . Text.Printf.$w$sformatInt2_closure" {
     Text.Printf.$w$sformatInt2_closure:
         const Text.Printf.$w$sformatInt2_info;
         const 0;
 },
 Text.Printf.$w$sformatInt2_slow() //  [R1]
         { []
         }
     {offset
       cckKA: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt2_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sciPJ_entry() //  [R1]
         { []
         }
     {offset
       cckKV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cckKW; else goto cckKX;
       cckKW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckKX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Word.$ctoInteger2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciPJ_info" {
     sat_sciPJ_info:
         const sat_sciPJ_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uckLI_srtd" {
     uckLI_srtd:
         const Scjc4_srt+192;
         const 64;
         const 11529215046068469761;
 },
 sat_sciPI_entry() //  [R1]
         { []
         }
     {offset
       cckL9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cckLa; else goto cckLb;
       cckLa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckLb: // global
           I64[Sp - 8] = block_cckL2_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uckLu; else goto cckL3;
       uckLu: // global
           call _cckL2(R1) args: 0, res: 0, upd: 0;
       cckL3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciPI_info" {
     sat_sciPI_info:
         const sat_sciPI_entry;
         const 1;
         const 18446744069414584336;
         const uckLI_srtd;
 },
 section ""relreadonly" . uckLJ_srtd" {
     uckLJ_srtd:
         const Scjc4_srt+192;
         const 64;
         const 11529215046068469761;
 },
 _cckL2() //  [R1]
         { []
         }
     {offset
       cckL2: // global
           if (R1 & 7 == 1) goto cckL6; else goto cckL7;
       cckL6: // global
           R1 = Text.Printf.formatChar1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cckL7: // global
           I64[Sp] = block_cckLh_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckL2_info" {
     block_cckL2_info:
         const _cckL2;
         const 0;
         const 18446744069414584350;
         const uckLJ_srtd;
 },
 _cckLh() //  [R1]
         { []
         }
     {offset
       cckLh: // global
           if (R1 & 7 == 1) goto cckLo; else goto cckLs;
       cckLo: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cckLs: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckLh_info" {
     block_cckLh_info:
         const _cckLh;
         const 0;
         const 4294967326;
         const Scjc4_srt+696;
 },
 section ""relreadonly" . uckLK_srtd" {
     uckLK_srtd:
         const Scjc4_srt+192;
         const 67;
         const 11601272640106397697;
         const 4;
 },
 Text.Printf.$w$sformatInt2_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cckLy: // global
           _sciPp::P64 = R6;
           _sciPo::P64 = R5;
           _sciPn::P64 = R4;
           _sciPm::P64 = R3;
           _sciPl::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cckLz; else goto cckLA;
       cckLA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cckLC; else goto cckLB;
       cckLC: // global
           HpAlloc = 16;
           goto cckLz;
       cckLz: // global
           R1 = Text.Printf.$w$sformatInt2_closure;
           P64[Sp - 40] = _sciPl::P64;
           P64[Sp - 32] = _sciPm::P64;
           P64[Sp - 24] = _sciPn::P64;
           P64[Sp - 16] = _sciPo::P64;
           P64[Sp - 8] = _sciPp::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cckLB: // global
           _sciPq::P64 = P64[Sp];
           _sciPr::P64 = P64[Sp + 8];
           _sciPK::I64 = I64[Sp + 16];
           if (_sciPK::I64 != 118) goto cckLw; else goto cckLx;
       cckLw: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sciPK::I64;
           _sciPA::P64 = Hp - 7;
           _sciPz::P64 = _sciPr::P64;
           _sciPy::P64 = _sciPq::P64;
           _sciPx::P64 = _sciPp::P64;
           _sciPw::P64 = _sciPo::P64;
           _sciPv::P64 = _sciPn::P64;
           _sciPu::P64 = _sciPm::P64;
           goto sciPt;
       cckLx: // global
           Hp = Hp - 16;
           _sciPA::P64 = Text.Printf.$fPrintfArgWord1_closure+1;
           _sciPz::P64 = _sciPr::P64;
           _sciPy::P64 = _sciPq::P64;
           _sciPx::P64 = _sciPp::P64;
           _sciPw::P64 = _sciPo::P64;
           _sciPv::P64 = _sciPn::P64;
           _sciPu::P64 = _sciPm::P64;
           goto sciPt;
       sciPt: // global
           I64[Sp - 48] = block_cckKM_info;
           R1 = _sciPA::P64;
           P64[Sp - 40] = _sciPv::P64;
           P64[Sp - 32] = _sciPw::P64;
           P64[Sp - 24] = _sciPx::P64;
           P64[Sp - 16] = _sciPy::P64;
           P64[Sp - 8] = _sciPz::P64;
           P64[Sp] = _sciPu::P64;
           P64[Sp + 16] = _sciPl::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uckLH; else goto cckKN;
       uckLH: // global
           call _cckKM(R1) args: 0, res: 0, upd: 0;
       cckKN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sformatInt2_info" {
     Text.Printf.$w$sformatInt2_info:
         const Text.Printf.$w$sformatInt2_entry;
         const 0;
         const 18446744069414584334;
         const 34359738368;
         const uckLK_srtd;
         const 8200;
         const Text.Printf.$w$sformatInt2_slow;
 },
 section ""relreadonly" . uckLL_srtd" {
     uckLL_srtd:
         const Scjc4_srt+192;
         const 64;
         const 11601272640106397697;
 },
 _cckKM() //  [R1]
         { []
         }
     {offset
       cckKM: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cckLG; else goto cckLF;
       cckLG: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cckLF: // global
           _sciPC::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sciPJ_info;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = sat_sciPI_info;
           P64[Hp] = P64[Sp + 56];
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sciPz::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = P64[Sp + 32];
           P64[Sp + 56] = _sciPz::P64;
           I64[Sp + 64] = _sciPC::I64;
           Sp = Sp + 40;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckKM_info" {
     block_cckKM_info:
         const _cckKM;
         const 8;
         const 18446744069414584350;
         const uckLL_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.202766123 UTC

[section ""data" . Text.Printf.$fPrintfArgWord32_$sformatInt_closure" {
     Text.Printf.$fPrintfArgWord32_$sformatInt_closure:
         const Text.Printf.$fPrintfArgWord32_$sformatInt_info;
         const 0;
 },
 Text.Printf.$fPrintfArgWord32_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cckMG: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cckMK; else goto cckML;
       cckMK: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgWord32_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cckML: // global
           I64[Sp - 16] = block_cckMD_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uckMT; else goto cckME;
       uckMT: // global
           call _cckMD(R1) args: 0, res: 0, upd: 0;
       cckME: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgWord32_$sformatInt_info" {
     Text.Printf.$fPrintfArgWord32_$sformatInt_info:
         const Text.Printf.$fPrintfArgWord32_$sformatInt_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Scjc4_srt+720;
 },
 _cckMD() //  [R1]
         { []
         }
     {offset
       cckMD: // global
           I64[Sp - 48] = block_cckMJ_info;
           _sciPP::P64 = P64[R1 + 7];
           _sciPQ::P64 = P64[R1 + 15];
           _sciPR::P64 = P64[R1 + 23];
           _sciPS::P64 = P64[R1 + 31];
           _sciPT::P64 = P64[R1 + 39];
           _sciPU::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sciPQ::P64;
           P64[Sp - 32] = _sciPR::P64;
           P64[Sp - 24] = _sciPS::P64;
           P64[Sp - 16] = _sciPT::P64;
           P64[Sp - 8] = _sciPU::P64;
           P64[Sp] = _sciPP::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uckMS; else goto cckMN;
       uckMS: // global
           call _cckMJ(R1) args: 0, res: 0, upd: 0;
       cckMN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckMD_info" {
     block_cckMD_info:
         const _cckMD;
         const 1;
         const 4294967326;
         const Scjc4_srt+720;
 },
 _cckMJ() //  [R1]
         { []
         }
     {offset
       cckMJ: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 56];
           _sciPU::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 32];
           P64[Sp + 48] = _sciPU::P64;
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt2_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckMJ_info" {
     block_cckMJ_info:
         const _cckMJ;
         const 7;
         const 4294967326;
         const Scjc4_srt+720;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.2133543 UTC

[section ""data" . Text.Printf.$w$sformatInt1_closure" {
     Text.Printf.$w$sformatInt1_closure:
         const Text.Printf.$w$sformatInt1_info;
         const 0;
 },
 Text.Printf.$w$sformatInt1_slow() //  [R1]
         { []
         }
     {offset
       cckNc: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt1_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sciQm_entry() //  [R1]
         { []
         }
     {offset
       cckNx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cckNy; else goto cckNz;
       cckNy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckNz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Word.$ctoInteger1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciQm_info" {
     sat_sciQm_info:
         const sat_sciQm_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uckOk_srtd" {
     uckOk_srtd:
         const Scjc4_srt+192;
         const 64;
         const 11529215046068469761;
 },
 sat_sciQl_entry() //  [R1]
         { []
         }
     {offset
       cckNL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cckNM; else goto cckNN;
       cckNM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckNN: // global
           I64[Sp - 8] = block_cckNE_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uckO6; else goto cckNF;
       uckO6: // global
           call _cckNE(R1) args: 0, res: 0, upd: 0;
       cckNF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciQl_info" {
     sat_sciQl_info:
         const sat_sciQl_entry;
         const 1;
         const 18446744069414584336;
         const uckOk_srtd;
 },
 section ""relreadonly" . uckOl_srtd" {
     uckOl_srtd:
         const Scjc4_srt+192;
         const 64;
         const 11529215046068469761;
 },
 _cckNE() //  [R1]
         { []
         }
     {offset
       cckNE: // global
           if (R1 & 7 == 1) goto cckNI; else goto cckNJ;
       cckNI: // global
           R1 = Text.Printf.formatChar1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cckNJ: // global
           I64[Sp] = block_cckNT_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckNE_info" {
     block_cckNE_info:
         const _cckNE;
         const 0;
         const 18446744069414584350;
         const uckOl_srtd;
 },
 _cckNT() //  [R1]
         { []
         }
     {offset
       cckNT: // global
           if (R1 & 7 == 1) goto cckO0; else goto cckO4;
       cckO0: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cckO4: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckNT_info" {
     block_cckNT_info:
         const _cckNT;
         const 0;
         const 4294967326;
         const Scjc4_srt+696;
 },
 section ""relreadonly" . uckOm_srtd" {
     uckOm_srtd:
         const Scjc4_srt+192;
         const 69;
         const 11601272640106397697;
         const 16;
 },
 Text.Printf.$w$sformatInt1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cckOa: // global
           _sciQ2::P64 = R6;
           _sciQ1::P64 = R5;
           _sciQ0::P64 = R4;
           _sciPZ::P64 = R3;
           _sciPY::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cckOb; else goto cckOc;
       cckOc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cckOe; else goto cckOd;
       cckOe: // global
           HpAlloc = 16;
           goto cckOb;
       cckOb: // global
           R1 = Text.Printf.$w$sformatInt1_closure;
           P64[Sp - 40] = _sciPY::P64;
           P64[Sp - 32] = _sciPZ::P64;
           P64[Sp - 24] = _sciQ0::P64;
           P64[Sp - 16] = _sciQ1::P64;
           P64[Sp - 8] = _sciQ2::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cckOd: // global
           _sciQ3::P64 = P64[Sp];
           _sciQ4::P64 = P64[Sp + 8];
           _sciQn::I64 = I64[Sp + 16];
           if (_sciQn::I64 != 118) goto cckO8; else goto cckO9;
       cckO8: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sciQn::I64;
           _sciQd::P64 = Hp - 7;
           _sciQc::P64 = _sciQ4::P64;
           _sciQb::P64 = _sciQ3::P64;
           _sciQa::P64 = _sciQ2::P64;
           _sciQ9::P64 = _sciQ1::P64;
           _sciQ8::P64 = _sciQ0::P64;
           _sciQ7::P64 = _sciPZ::P64;
           goto sciQ6;
       cckO9: // global
           Hp = Hp - 16;
           _sciQd::P64 = Text.Printf.$fPrintfArgWord1_closure+1;
           _sciQc::P64 = _sciQ4::P64;
           _sciQb::P64 = _sciQ3::P64;
           _sciQa::P64 = _sciQ2::P64;
           _sciQ9::P64 = _sciQ1::P64;
           _sciQ8::P64 = _sciQ0::P64;
           _sciQ7::P64 = _sciPZ::P64;
           goto sciQ6;
       sciQ6: // global
           I64[Sp - 48] = block_cckNo_info;
           R1 = _sciQd::P64;
           P64[Sp - 40] = _sciQ8::P64;
           P64[Sp - 32] = _sciQ9::P64;
           P64[Sp - 24] = _sciQa::P64;
           P64[Sp - 16] = _sciQb::P64;
           P64[Sp - 8] = _sciQc::P64;
           P64[Sp] = _sciQ7::P64;
           P64[Sp + 16] = _sciPY::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uckOj; else goto cckNp;
       uckOj: // global
           call _cckNo(R1) args: 0, res: 0, upd: 0;
       cckNp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sformatInt1_info" {
     Text.Printf.$w$sformatInt1_info:
         const Text.Printf.$w$sformatInt1_entry;
         const 0;
         const 18446744069414584334;
         const 34359738368;
         const uckOm_srtd;
         const 8200;
         const Text.Printf.$w$sformatInt1_slow;
 },
 section ""relreadonly" . uckOn_srtd" {
     uckOn_srtd:
         const Scjc4_srt+192;
         const 64;
         const 11601272640106397697;
 },
 _cckNo() //  [R1]
         { []
         }
     {offset
       cckNo: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cckOi; else goto cckOh;
       cckOi: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cckOh: // global
           _sciQf::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sciQm_info;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = sat_sciQl_info;
           P64[Hp] = P64[Sp + 56];
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sciQc::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = P64[Sp + 32];
           P64[Sp + 56] = _sciQc::P64;
           I64[Sp + 64] = _sciQf::I64;
           Sp = Sp + 40;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckNo_info" {
     block_cckNo_info:
         const _cckNo;
         const 8;
         const 18446744069414584350;
         const uckOn_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.231961569 UTC

[section ""data" . Text.Printf.$fPrintfArgWord16_$sformatInt_closure" {
     Text.Printf.$fPrintfArgWord16_$sformatInt_closure:
         const Text.Printf.$fPrintfArgWord16_$sformatInt_info;
         const 0;
 },
 Text.Printf.$fPrintfArgWord16_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cckPi: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cckPm; else goto cckPn;
       cckPm: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgWord16_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cckPn: // global
           I64[Sp - 16] = block_cckPf_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uckPv; else goto cckPg;
       uckPv: // global
           call _cckPf(R1) args: 0, res: 0, upd: 0;
       cckPg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgWord16_$sformatInt_info" {
     Text.Printf.$fPrintfArgWord16_$sformatInt_info:
         const Text.Printf.$fPrintfArgWord16_$sformatInt_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Scjc4_srt+736;
 },
 _cckPf() //  [R1]
         { []
         }
     {offset
       cckPf: // global
           I64[Sp - 48] = block_cckPl_info;
           _sciQs::P64 = P64[R1 + 7];
           _sciQt::P64 = P64[R1 + 15];
           _sciQu::P64 = P64[R1 + 23];
           _sciQv::P64 = P64[R1 + 31];
           _sciQw::P64 = P64[R1 + 39];
           _sciQx::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sciQt::P64;
           P64[Sp - 32] = _sciQu::P64;
           P64[Sp - 24] = _sciQv::P64;
           P64[Sp - 16] = _sciQw::P64;
           P64[Sp - 8] = _sciQx::P64;
           P64[Sp] = _sciQs::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uckPu; else goto cckPp;
       uckPu: // global
           call _cckPl(R1) args: 0, res: 0, upd: 0;
       cckPp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckPf_info" {
     block_cckPf_info:
         const _cckPf;
         const 1;
         const 4294967326;
         const Scjc4_srt+736;
 },
 _cckPl() //  [R1]
         { []
         }
     {offset
       cckPl: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 56];
           _sciQx::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 32];
           P64[Sp + 48] = _sciQx::P64;
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt1_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckPl_info" {
     block_cckPl_info:
         const _cckPl;
         const 7;
         const 4294967326;
         const Scjc4_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.242564778 UTC

[section ""data" . Text.Printf.$w$sformatInt4_closure" {
     Text.Printf.$w$sformatInt4_closure:
         const Text.Printf.$w$sformatInt4_info;
         const 0;
 },
 Text.Printf.$w$sformatInt4_slow() //  [R1]
         { []
         }
     {offset
       cckPO: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt4_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sciQZ_entry() //  [R1]
         { []
         }
     {offset
       cckQ9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cckQa; else goto cckQb;
       cckQa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckQb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Word.$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciQZ_info" {
     sat_sciQZ_info:
         const sat_sciQZ_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uckQW_srtd" {
     uckQW_srtd:
         const Scjc4_srt+192;
         const 64;
         const 11529215046068469761;
 },
 sat_sciQY_entry() //  [R1]
         { []
         }
     {offset
       cckQn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cckQo; else goto cckQp;
       cckQo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckQp: // global
           I64[Sp - 8] = block_cckQg_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uckQI; else goto cckQh;
       uckQI: // global
           call _cckQg(R1) args: 0, res: 0, upd: 0;
       cckQh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciQY_info" {
     sat_sciQY_info:
         const sat_sciQY_entry;
         const 1;
         const 18446744069414584336;
         const uckQW_srtd;
 },
 section ""relreadonly" . uckQX_srtd" {
     uckQX_srtd:
         const Scjc4_srt+192;
         const 64;
         const 11529215046068469761;
 },
 _cckQg() //  [R1]
         { []
         }
     {offset
       cckQg: // global
           if (R1 & 7 == 1) goto cckQk; else goto cckQl;
       cckQk: // global
           R1 = Text.Printf.formatChar1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cckQl: // global
           I64[Sp] = block_cckQv_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckQg_info" {
     block_cckQg_info:
         const _cckQg;
         const 0;
         const 18446744069414584350;
         const uckQX_srtd;
 },
 _cckQv() //  [R1]
         { []
         }
     {offset
       cckQv: // global
           if (R1 & 7 == 1) goto cckQC; else goto cckQG;
       cckQC: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cckQG: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckQv_info" {
     block_cckQv_info:
         const _cckQv;
         const 0;
         const 4294967326;
         const Scjc4_srt+696;
 },
 section ""relreadonly" . uckQY_srtd" {
     uckQY_srtd:
         const Scjc4_srt+192;
         const 71;
         const 11601272640106397697;
         const 64;
 },
 Text.Printf.$w$sformatInt4_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cckQM: // global
           _sciQF::P64 = R6;
           _sciQE::P64 = R5;
           _sciQD::P64 = R4;
           _sciQC::P64 = R3;
           _sciQB::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cckQN; else goto cckQO;
       cckQO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cckQQ; else goto cckQP;
       cckQQ: // global
           HpAlloc = 16;
           goto cckQN;
       cckQN: // global
           R1 = Text.Printf.$w$sformatInt4_closure;
           P64[Sp - 40] = _sciQB::P64;
           P64[Sp - 32] = _sciQC::P64;
           P64[Sp - 24] = _sciQD::P64;
           P64[Sp - 16] = _sciQE::P64;
           P64[Sp - 8] = _sciQF::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cckQP: // global
           _sciQG::P64 = P64[Sp];
           _sciQH::P64 = P64[Sp + 8];
           _sciR0::I64 = I64[Sp + 16];
           if (_sciR0::I64 != 118) goto cckQK; else goto cckQL;
       cckQK: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sciR0::I64;
           _sciQQ::P64 = Hp - 7;
           _sciQP::P64 = _sciQH::P64;
           _sciQO::P64 = _sciQG::P64;
           _sciQN::P64 = _sciQF::P64;
           _sciQM::P64 = _sciQE::P64;
           _sciQL::P64 = _sciQD::P64;
           _sciQK::P64 = _sciQC::P64;
           goto sciQJ;
       cckQL: // global
           Hp = Hp - 16;
           _sciQQ::P64 = Text.Printf.$fPrintfArgWord1_closure+1;
           _sciQP::P64 = _sciQH::P64;
           _sciQO::P64 = _sciQG::P64;
           _sciQN::P64 = _sciQF::P64;
           _sciQM::P64 = _sciQE::P64;
           _sciQL::P64 = _sciQD::P64;
           _sciQK::P64 = _sciQC::P64;
           goto sciQJ;
       sciQJ: // global
           I64[Sp - 48] = block_cckQ0_info;
           R1 = _sciQQ::P64;
           P64[Sp - 40] = _sciQL::P64;
           P64[Sp - 32] = _sciQM::P64;
           P64[Sp - 24] = _sciQN::P64;
           P64[Sp - 16] = _sciQO::P64;
           P64[Sp - 8] = _sciQP::P64;
           P64[Sp] = _sciQK::P64;
           P64[Sp + 16] = _sciQB::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uckQV; else goto cckQ1;
       uckQV: // global
           call _cckQ0(R1) args: 0, res: 0, upd: 0;
       cckQ1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sformatInt4_info" {
     Text.Printf.$w$sformatInt4_info:
         const Text.Printf.$w$sformatInt4_entry;
         const 0;
         const 18446744069414584334;
         const 34359738368;
         const uckQY_srtd;
         const 8200;
         const Text.Printf.$w$sformatInt4_slow;
 },
 section ""relreadonly" . uckQZ_srtd" {
     uckQZ_srtd:
         const Scjc4_srt+192;
         const 64;
         const 11601272640106397697;
 },
 _cckQ0() //  [R1]
         { []
         }
     {offset
       cckQ0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cckQU; else goto cckQT;
       cckQU: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cckQT: // global
           _sciQS::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sciQZ_info;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = sat_sciQY_info;
           P64[Hp] = P64[Sp + 56];
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sciQP::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = P64[Sp + 32];
           P64[Sp + 56] = _sciQP::P64;
           I64[Sp + 64] = _sciQS::I64;
           Sp = Sp + 40;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckQ0_info" {
     block_cckQ0_info:
         const _cckQ0;
         const 8;
         const 18446744069414584350;
         const uckQZ_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.260392662 UTC

[section ""data" . Text.Printf.$fPrintfArgWord8_$sformatInt_closure" {
     Text.Printf.$fPrintfArgWord8_$sformatInt_closure:
         const Text.Printf.$fPrintfArgWord8_$sformatInt_info;
         const 0;
 },
 Text.Printf.$fPrintfArgWord8_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cckRU: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cckRY; else goto cckRZ;
       cckRY: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgWord8_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cckRZ: // global
           I64[Sp - 16] = block_cckRR_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uckS7; else goto cckRS;
       uckS7: // global
           call _cckRR(R1) args: 0, res: 0, upd: 0;
       cckRS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgWord8_$sformatInt_info" {
     Text.Printf.$fPrintfArgWord8_$sformatInt_info:
         const Text.Printf.$fPrintfArgWord8_$sformatInt_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Scjc4_srt+752;
 },
 _cckRR() //  [R1]
         { []
         }
     {offset
       cckRR: // global
           I64[Sp - 48] = block_cckRX_info;
           _sciR5::P64 = P64[R1 + 7];
           _sciR6::P64 = P64[R1 + 15];
           _sciR7::P64 = P64[R1 + 23];
           _sciR8::P64 = P64[R1 + 31];
           _sciR9::P64 = P64[R1 + 39];
           _sciRa::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sciR6::P64;
           P64[Sp - 32] = _sciR7::P64;
           P64[Sp - 24] = _sciR8::P64;
           P64[Sp - 16] = _sciR9::P64;
           P64[Sp - 8] = _sciRa::P64;
           P64[Sp] = _sciR5::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uckS6; else goto cckS1;
       uckS6: // global
           call _cckRX(R1) args: 0, res: 0, upd: 0;
       cckS1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckRR_info" {
     block_cckRR_info:
         const _cckRR;
         const 1;
         const 4294967326;
         const Scjc4_srt+752;
 },
 _cckRX() //  [R1]
         { []
         }
     {offset
       cckRX: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 56];
           _sciRa::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 32];
           P64[Sp + 48] = _sciRa::P64;
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt4_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckRX_info" {
     block_cckRX_info:
         const _cckRX;
         const 7;
         const 4294967326;
         const Scjc4_srt+752;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.271260381 UTC

[section ""data" . Text.Printf.$w$sformatInt_closure" {
     Text.Printf.$w$sformatInt_closure:
         const Text.Printf.$w$sformatInt_info;
         const 0;
 },
 Text.Printf.$w$sformatInt_slow() //  [R1]
         { []
         }
     {offset
       cckSq: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2,
                                                R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sciRC_entry() //  [R1]
         { []
         }
     {offset
       cckSL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cckSM; else goto cckSN;
       cckSM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckSN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fIntegralWord_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciRC_info" {
     sat_sciRC_info:
         const sat_sciRC_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uckTy_srtd" {
     uckTy_srtd:
         const Scjc4_srt+192;
         const 64;
         const 11529215046068469761;
 },
 sat_sciRB_entry() //  [R1]
         { []
         }
     {offset
       cckSZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cckT0; else goto cckT1;
       cckT0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckT1: // global
           I64[Sp - 8] = block_cckSS_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uckTk; else goto cckST;
       uckTk: // global
           call _cckSS(R1) args: 0, res: 0, upd: 0;
       cckST: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciRB_info" {
     sat_sciRB_info:
         const sat_sciRB_entry;
         const 1;
         const 18446744069414584336;
         const uckTy_srtd;
 },
 section ""relreadonly" . uckTz_srtd" {
     uckTz_srtd:
         const Scjc4_srt+192;
         const 64;
         const 11529215046068469761;
 },
 _cckSS() //  [R1]
         { []
         }
     {offset
       cckSS: // global
           if (R1 & 7 == 1) goto cckSW; else goto cckSX;
       cckSW: // global
           R1 = Text.Printf.formatChar1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cckSX: // global
           I64[Sp] = block_cckT7_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckSS_info" {
     block_cckSS_info:
         const _cckSS;
         const 0;
         const 18446744069414584350;
         const uckTz_srtd;
 },
 _cckT7() //  [R1]
         { []
         }
     {offset
       cckT7: // global
           if (R1 & 7 == 1) goto cckTe; else goto cckTi;
       cckTe: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cckTi: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckT7_info" {
     block_cckT7_info:
         const _cckT7;
         const 0;
         const 4294967326;
         const Scjc4_srt+696;
 },
 section ""relreadonly" . uckTA_srtd" {
     uckTA_srtd:
         const Scjc4_srt+192;
         const 73;
         const 11601272640106397697;
         const 256;
 },
 Text.Printf.$w$sformatInt_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cckTo: // global
           _sciRi::P64 = R6;
           _sciRh::P64 = R5;
           _sciRg::P64 = R4;
           _sciRf::P64 = R3;
           _sciRe::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cckTp; else goto cckTq;
       cckTq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cckTs; else goto cckTr;
       cckTs: // global
           HpAlloc = 16;
           goto cckTp;
       cckTp: // global
           R1 = Text.Printf.$w$sformatInt_closure;
           P64[Sp - 40] = _sciRe::P64;
           P64[Sp - 32] = _sciRf::P64;
           P64[Sp - 24] = _sciRg::P64;
           P64[Sp - 16] = _sciRh::P64;
           P64[Sp - 8] = _sciRi::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cckTr: // global
           _sciRj::P64 = P64[Sp];
           _sciRk::P64 = P64[Sp + 8];
           _sciRD::I64 = I64[Sp + 16];
           if (_sciRD::I64 != 118) goto cckTm; else goto cckTn;
       cckTm: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sciRD::I64;
           _sciRt::P64 = Hp - 7;
           _sciRs::P64 = _sciRk::P64;
           _sciRr::P64 = _sciRj::P64;
           _sciRq::P64 = _sciRi::P64;
           _sciRp::P64 = _sciRh::P64;
           _sciRo::P64 = _sciRg::P64;
           _sciRn::P64 = _sciRf::P64;
           goto sciRm;
       cckTn: // global
           Hp = Hp - 16;
           _sciRt::P64 = Text.Printf.$fPrintfArgWord1_closure+1;
           _sciRs::P64 = _sciRk::P64;
           _sciRr::P64 = _sciRj::P64;
           _sciRq::P64 = _sciRi::P64;
           _sciRp::P64 = _sciRh::P64;
           _sciRo::P64 = _sciRg::P64;
           _sciRn::P64 = _sciRf::P64;
           goto sciRm;
       sciRm: // global
           I64[Sp - 48] = block_cckSC_info;
           R1 = _sciRt::P64;
           P64[Sp - 40] = _sciRo::P64;
           P64[Sp - 32] = _sciRp::P64;
           P64[Sp - 24] = _sciRq::P64;
           P64[Sp - 16] = _sciRr::P64;
           P64[Sp - 8] = _sciRs::P64;
           P64[Sp] = _sciRn::P64;
           P64[Sp + 16] = _sciRe::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uckTx; else goto cckSD;
       uckTx: // global
           call _cckSC(R1) args: 0, res: 0, upd: 0;
       cckSD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$w$sformatInt_info" {
     Text.Printf.$w$sformatInt_info:
         const Text.Printf.$w$sformatInt_entry;
         const 0;
         const 18446744069414584334;
         const 34359738368;
         const uckTA_srtd;
         const 8200;
         const Text.Printf.$w$sformatInt_slow;
 },
 section ""relreadonly" . uckTB_srtd" {
     uckTB_srtd:
         const Scjc4_srt+192;
         const 64;
         const 11601272640106397697;
 },
 _cckSC() //  [R1]
         { []
         }
     {offset
       cckSC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cckTw; else goto cckTv;
       cckTw: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cckTv: // global
           _sciRv::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sciRC_info;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = sat_sciRB_info;
           P64[Hp] = P64[Sp + 56];
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sciRs::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = P64[Sp + 32];
           P64[Sp + 56] = _sciRs::P64;
           I64[Sp + 64] = _sciRv::I64;
           Sp = Sp + 40;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckSC_info" {
     block_cckSC_info:
         const _cckSC;
         const 8;
         const 18446744069414584350;
         const uckTB_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.28969874 UTC

[section ""data" . Text.Printf.$fPrintfArgWord_$sformatInt_closure" {
     Text.Printf.$fPrintfArgWord_$sformatInt_closure:
         const Text.Printf.$fPrintfArgWord_$sformatInt_info;
         const 0;
 },
 Text.Printf.$fPrintfArgWord_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cckUw: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cckUA; else goto cckUB;
       cckUA: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgWord_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cckUB: // global
           I64[Sp - 16] = block_cckUt_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uckUJ; else goto cckUu;
       uckUJ: // global
           call _cckUt(R1) args: 0, res: 0, upd: 0;
       cckUu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgWord_$sformatInt_info" {
     Text.Printf.$fPrintfArgWord_$sformatInt_info:
         const Text.Printf.$fPrintfArgWord_$sformatInt_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Scjc4_srt+768;
 },
 _cckUt() //  [R1]
         { []
         }
     {offset
       cckUt: // global
           I64[Sp - 48] = block_cckUz_info;
           _sciRI::P64 = P64[R1 + 7];
           _sciRJ::P64 = P64[R1 + 15];
           _sciRK::P64 = P64[R1 + 23];
           _sciRL::P64 = P64[R1 + 31];
           _sciRM::P64 = P64[R1 + 39];
           _sciRN::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sciRJ::P64;
           P64[Sp - 32] = _sciRK::P64;
           P64[Sp - 24] = _sciRL::P64;
           P64[Sp - 16] = _sciRM::P64;
           P64[Sp - 8] = _sciRN::P64;
           P64[Sp] = _sciRI::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uckUI; else goto cckUD;
       uckUI: // global
           call _cckUz(R1) args: 0, res: 0, upd: 0;
       cckUD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckUt_info" {
     block_cckUt_info:
         const _cckUt;
         const 1;
         const 4294967326;
         const Scjc4_srt+768;
 },
 _cckUz() //  [R1]
         { []
         }
     {offset
       cckUz: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 56];
           _sciRN::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 32];
           P64[Sp + 48] = _sciRN::P64;
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$w$sformatInt_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckUz_info" {
     block_cckUz_info:
         const _cckUz;
         const 7;
         const 4294967326;
         const Scjc4_srt+768;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.296602652 UTC

[section ""data" . Text.Printf.$fPrintfArgInt1_closure" {
     Text.Printf.$fPrintfArgInt1_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.$fPrintfArgChar7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.30151798 UTC

[section ""data" . Text.Printf.$fPrintfArgInt64_$sformatInt_closure" {
     Text.Printf.$fPrintfArgInt64_$sformatInt_closure:
         const Text.Printf.$fPrintfArgInt64_$sformatInt_info;
         const 0;
 },
 sat_sciS9_entry() //  [R1]
         { []
         }
     {offset
       cckVk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cckVl; else goto cckVm;
       cckVl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckVm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Int.$fIntegralInt64_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciS9_info" {
     sat_sciS9_info:
         const sat_sciS9_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uckW3_srtd" {
     uckW3_srtd:
         const Scjc4_srt+192;
         const 75;
         const 9223372036854775809;
         const 1024;
 },
 sat_sciS8_entry() //  [R1]
         { []
         }
     {offset
       cckVy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cckVz; else goto cckVA;
       cckVz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckVA: // global
           I64[Sp - 8] = block_cckVr_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uckVT; else goto cckVs;
       uckVT: // global
           call _cckVr(R1) args: 0, res: 0, upd: 0;
       cckVs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciS8_info" {
     sat_sciS8_info:
         const sat_sciS8_entry;
         const 1;
         const 18446744069414584336;
         const uckW3_srtd;
 },
 section ""relreadonly" . uckW4_srtd" {
     uckW4_srtd:
         const Scjc4_srt+192;
         const 75;
         const 9223372036854775809;
         const 1024;
 },
 _cckVr() //  [R1]
         { []
         }
     {offset
       cckVr: // global
           if (R1 & 7 == 1) goto cckVv; else goto cckVw;
       cckVv: // global
           R1 = Text.Printf.$fPrintfArgInt1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cckVw: // global
           I64[Sp] = block_cckVG_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckVr_info" {
     block_cckVr_info:
         const _cckVr;
         const 0;
         const 18446744069414584350;
         const uckW4_srtd;
 },
 _cckVG() //  [R1]
         { []
         }
     {offset
       cckVG: // global
           if (R1 & 7 == 1) goto cckVN; else goto cckVR;
       cckVN: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cckVR: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckVG_info" {
     block_cckVG_info:
         const _cckVG;
         const 0;
         const 4294967326;
         const Scjc4_srt+696;
 },
 section ""relreadonly" . uckW5_srtd" {
     uckW5_srtd:
         const Scjc4_srt+192;
         const 76;
         const 9295429630892703745;
         const 3072;
 },
 Text.Printf.$fPrintfArgInt64_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cckVU: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cckVV; else goto cckVW;
       cckVV: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgInt64_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cckVW: // global
           I64[Sp - 16] = block_cckV6_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uckW2; else goto cckV7;
       uckW2: // global
           call _cckV6(R1) args: 0, res: 0, upd: 0;
       cckV7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgInt64_$sformatInt_info" {
     Text.Printf.$fPrintfArgInt64_$sformatInt_info:
         const Text.Printf.$fPrintfArgInt64_$sformatInt_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uckW5_srtd;
 },
 section ""relreadonly" . uckW6_srtd" {
     uckW6_srtd:
         const Scjc4_srt+192;
         const 75;
         const 9295429630892703745;
         const 1024;
 },
 _cckV6() //  [R1]
         { []
         }
     {offset
       cckV6: // global
           I64[Sp - 48] = block_cckVb_info;
           _sciRU::P64 = P64[R1 + 7];
           _sciRV::P64 = P64[R1 + 15];
           _sciRW::P64 = P64[R1 + 23];
           _sciRX::P64 = P64[R1 + 31];
           _sciRY::P64 = P64[R1 + 39];
           _sciRZ::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sciRV::P64;
           P64[Sp - 32] = _sciRW::P64;
           P64[Sp - 24] = _sciRX::P64;
           P64[Sp - 16] = _sciRY::P64;
           P64[Sp - 8] = _sciRZ::P64;
           P64[Sp] = _sciRU::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uckW1; else goto cckVc;
       uckW1: // global
           call _cckVb(R1) args: 0, res: 0, upd: 0;
       cckVc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckV6_info" {
     block_cckV6_info:
         const _cckV6;
         const 1;
         const 18446744069414584350;
         const uckW6_srtd;
 },
 section ""relreadonly" . uckW7_srtd" {
     uckW7_srtd:
         const Scjc4_srt+192;
         const 75;
         const 9295429630892703745;
         const 1024;
 },
 _cckVb() //  [R1]
         { []
         }
     {offset
       cckVb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cckW0; else goto cckVZ;
       cckW0: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cckVZ: // global
           _sciS2::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sciS9_info;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = sat_sciS8_info;
           _sciRZ::P64 = P64[Sp + 40];
           P64[Hp] = _sciRZ::P64;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sciRY::P64 = P64[Sp + 32];
           P64[Sp + 32] = P64[Sp + 24];
           P64[Sp + 40] = _sciRY::P64;
           P64[Sp + 48] = _sciRZ::P64;
           I64[Sp + 56] = _sciS2::I64;
           Sp = Sp + 32;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckVb_info" {
     block_cckVb_info:
         const _cckVb;
         const 7;
         const 18446744069414584350;
         const uckW7_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.319672592 UTC

[section ""data" . Text.Printf.$fPrintfArgInt4_closure" {
     Text.Printf.$fPrintfArgInt4_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.$fPrintfArgChar14_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.32466584 UTC

[section ""data" . Text.Printf.$fPrintfArgInt32_$sformatInt_closure" {
     Text.Printf.$fPrintfArgInt32_$sformatInt_closure:
         const Text.Printf.$fPrintfArgInt32_$sformatInt_info;
         const 0;
 },
 sat_sciSs_entry() //  [R1]
         { []
         }
     {offset
       cckXf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cckXg; else goto cckXh;
       cckXg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckXh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Int.$fIntegralInt32_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciSs_info" {
     sat_sciSs_info:
         const sat_sciSs_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uckXY_srtd" {
     uckXY_srtd:
         const Scjc4_srt+192;
         const 77;
         const 9223372036854775809;
         const 4096;
 },
 sat_sciSr_entry() //  [R1]
         { []
         }
     {offset
       cckXt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cckXu; else goto cckXv;
       cckXu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckXv: // global
           I64[Sp - 8] = block_cckXm_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uckXO; else goto cckXn;
       uckXO: // global
           call _cckXm(R1) args: 0, res: 0, upd: 0;
       cckXn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciSr_info" {
     sat_sciSr_info:
         const sat_sciSr_entry;
         const 1;
         const 18446744069414584336;
         const uckXY_srtd;
 },
 section ""relreadonly" . uckXZ_srtd" {
     uckXZ_srtd:
         const Scjc4_srt+192;
         const 77;
         const 9223372036854775809;
         const 4096;
 },
 _cckXm() //  [R1]
         { []
         }
     {offset
       cckXm: // global
           if (R1 & 7 == 1) goto cckXq; else goto cckXr;
       cckXq: // global
           R1 = Text.Printf.$fPrintfArgInt4_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cckXr: // global
           I64[Sp] = block_cckXB_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckXm_info" {
     block_cckXm_info:
         const _cckXm;
         const 0;
         const 18446744069414584350;
         const uckXZ_srtd;
 },
 _cckXB() //  [R1]
         { []
         }
     {offset
       cckXB: // global
           if (R1 & 7 == 1) goto cckXI; else goto cckXM;
       cckXI: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cckXM: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckXB_info" {
     block_cckXB_info:
         const _cckXB;
         const 0;
         const 4294967326;
         const Scjc4_srt+696;
 },
 section ""relreadonly" . uckY0_srtd" {
     uckY0_srtd:
         const Scjc4_srt+192;
         const 78;
         const 9295429630892703745;
         const 12288;
 },
 Text.Printf.$fPrintfArgInt32_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cckXP: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cckXQ; else goto cckXR;
       cckXQ: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgInt32_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cckXR: // global
           I64[Sp - 16] = block_cckX1_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uckXX; else goto cckX2;
       uckXX: // global
           call _cckX1(R1) args: 0, res: 0, upd: 0;
       cckX2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgInt32_$sformatInt_info" {
     Text.Printf.$fPrintfArgInt32_$sformatInt_info:
         const Text.Printf.$fPrintfArgInt32_$sformatInt_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uckY0_srtd;
 },
 section ""relreadonly" . uckY1_srtd" {
     uckY1_srtd:
         const Scjc4_srt+192;
         const 77;
         const 9295429630892703745;
         const 4096;
 },
 _cckX1() //  [R1]
         { []
         }
     {offset
       cckX1: // global
           I64[Sp - 48] = block_cckX6_info;
           _sciSd::P64 = P64[R1 + 7];
           _sciSe::P64 = P64[R1 + 15];
           _sciSf::P64 = P64[R1 + 23];
           _sciSg::P64 = P64[R1 + 31];
           _sciSh::P64 = P64[R1 + 39];
           _sciSi::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sciSe::P64;
           P64[Sp - 32] = _sciSf::P64;
           P64[Sp - 24] = _sciSg::P64;
           P64[Sp - 16] = _sciSh::P64;
           P64[Sp - 8] = _sciSi::P64;
           P64[Sp] = _sciSd::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uckXW; else goto cckX7;
       uckXW: // global
           call _cckX6(R1) args: 0, res: 0, upd: 0;
       cckX7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckX1_info" {
     block_cckX1_info:
         const _cckX1;
         const 1;
         const 18446744069414584350;
         const uckY1_srtd;
 },
 section ""relreadonly" . uckY2_srtd" {
     uckY2_srtd:
         const Scjc4_srt+192;
         const 77;
         const 9295429630892703745;
         const 4096;
 },
 _cckX6() //  [R1]
         { []
         }
     {offset
       cckX6: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cckXV; else goto cckXU;
       cckXV: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cckXU: // global
           _sciSl::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sciSs_info;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = sat_sciSr_info;
           _sciSi::P64 = P64[Sp + 40];
           P64[Hp] = _sciSi::P64;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sciSh::P64 = P64[Sp + 32];
           P64[Sp + 32] = P64[Sp + 24];
           P64[Sp + 40] = _sciSh::P64;
           P64[Sp + 48] = _sciSi::P64;
           I64[Sp + 56] = _sciSl::I64;
           Sp = Sp + 32;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckX6_info" {
     block_cckX6_info:
         const _cckX6;
         const 7;
         const 18446744069414584350;
         const uckY2_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.341600981 UTC

[section ""data" . Text.Printf.$fPrintfArgInt3_closure" {
     Text.Printf.$fPrintfArgInt3_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.$fPrintfArgChar18_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.346750834 UTC

[section ""data" . Text.Printf.$fPrintfArgInt16_$sformatInt_closure" {
     Text.Printf.$fPrintfArgInt16_$sformatInt_closure:
         const Text.Printf.$fPrintfArgInt16_$sformatInt_info;
         const 0;
 },
 sat_sciSL_entry() //  [R1]
         { []
         }
     {offset
       cckZa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cckZb; else goto cckZc;
       cckZb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckZc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Int.$fIntegralInt16_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciSL_info" {
     sat_sciSL_info:
         const sat_sciSL_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . uckZT_srtd" {
     uckZT_srtd:
         const Scjc4_srt+192;
         const 79;
         const 9223372036854775809;
         const 16384;
 },
 sat_sciSK_entry() //  [R1]
         { []
         }
     {offset
       cckZo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cckZp; else goto cckZq;
       cckZp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cckZq: // global
           I64[Sp - 8] = block_cckZh_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uckZJ; else goto cckZi;
       uckZJ: // global
           call _cckZh(R1) args: 0, res: 0, upd: 0;
       cckZi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciSK_info" {
     sat_sciSK_info:
         const sat_sciSK_entry;
         const 1;
         const 18446744069414584336;
         const uckZT_srtd;
 },
 section ""relreadonly" . uckZU_srtd" {
     uckZU_srtd:
         const Scjc4_srt+192;
         const 79;
         const 9223372036854775809;
         const 16384;
 },
 _cckZh() //  [R1]
         { []
         }
     {offset
       cckZh: // global
           if (R1 & 7 == 1) goto cckZl; else goto cckZm;
       cckZl: // global
           R1 = Text.Printf.$fPrintfArgInt3_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cckZm: // global
           I64[Sp] = block_cckZw_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckZh_info" {
     block_cckZh_info:
         const _cckZh;
         const 0;
         const 18446744069414584350;
         const uckZU_srtd;
 },
 _cckZw() //  [R1]
         { []
         }
     {offset
       cckZw: // global
           if (R1 & 7 == 1) goto cckZD; else goto cckZH;
       cckZD: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cckZH: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckZw_info" {
     block_cckZw_info:
         const _cckZw;
         const 0;
         const 4294967326;
         const Scjc4_srt+696;
 },
 section ""relreadonly" . uckZV_srtd" {
     uckZV_srtd:
         const Scjc4_srt+192;
         const 80;
         const 9295429630892703745;
         const 49152;
 },
 Text.Printf.$fPrintfArgInt16_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       cckZK: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cckZL; else goto cckZM;
       cckZL: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgInt16_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cckZM: // global
           I64[Sp - 16] = block_cckYW_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uckZS; else goto cckYX;
       uckZS: // global
           call _cckYW(R1) args: 0, res: 0, upd: 0;
       cckYX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgInt16_$sformatInt_info" {
     Text.Printf.$fPrintfArgInt16_$sformatInt_info:
         const Text.Printf.$fPrintfArgInt16_$sformatInt_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uckZV_srtd;
 },
 section ""relreadonly" . uckZW_srtd" {
     uckZW_srtd:
         const Scjc4_srt+192;
         const 79;
         const 9295429630892703745;
         const 16384;
 },
 _cckYW() //  [R1]
         { []
         }
     {offset
       cckYW: // global
           I64[Sp - 48] = block_cckZ1_info;
           _sciSw::P64 = P64[R1 + 7];
           _sciSx::P64 = P64[R1 + 15];
           _sciSy::P64 = P64[R1 + 23];
           _sciSz::P64 = P64[R1 + 31];
           _sciSA::P64 = P64[R1 + 39];
           _sciSB::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sciSx::P64;
           P64[Sp - 32] = _sciSy::P64;
           P64[Sp - 24] = _sciSz::P64;
           P64[Sp - 16] = _sciSA::P64;
           P64[Sp - 8] = _sciSB::P64;
           P64[Sp] = _sciSw::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uckZR; else goto cckZ2;
       uckZR: // global
           call _cckZ1(R1) args: 0, res: 0, upd: 0;
       cckZ2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cckYW_info" {
     block_cckYW_info:
         const _cckYW;
         const 1;
         const 18446744069414584350;
         const uckZW_srtd;
 },
 section ""relreadonly" . uckZX_srtd" {
     uckZX_srtd:
         const Scjc4_srt+192;
         const 79;
         const 9295429630892703745;
         const 16384;
 },
 _cckZ1() //  [R1]
         { []
         }
     {offset
       cckZ1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cckZQ; else goto cckZP;
       cckZQ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cckZP: // global
           _sciSE::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sciSL_info;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = sat_sciSK_info;
           _sciSB::P64 = P64[Sp + 40];
           P64[Hp] = _sciSB::P64;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sciSA::P64 = P64[Sp + 32];
           P64[Sp + 32] = P64[Sp + 24];
           P64[Sp + 40] = _sciSA::P64;
           P64[Sp + 48] = _sciSB::P64;
           I64[Sp + 56] = _sciSE::I64;
           Sp = Sp + 32;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cckZ1_info" {
     block_cckZ1_info:
         const _cckZ1;
         const 7;
         const 18446744069414584350;
         const uckZX_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.364413834 UTC

[section ""data" . Text.Printf.$fPrintfArgInt5_closure" {
     Text.Printf.$fPrintfArgInt5_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.$fPrintfArgChar22_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.369414026 UTC

[section ""data" . Text.Printf.$fPrintfArgInt8_$sformatInt_closure" {
     Text.Printf.$fPrintfArgInt8_$sformatInt_closure:
         const Text.Printf.$fPrintfArgInt8_$sformatInt_info;
         const 0;
 },
 sat_sciT4_entry() //  [R1]
         { []
         }
     {offset
       ccl15: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccl16; else goto ccl17;
       ccl16: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccl17: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Int.$fIntegralInt8_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciT4_info" {
     sat_sciT4_info:
         const sat_sciT4_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . ucl1O_srtd" {
     ucl1O_srtd:
         const Scjc4_srt+192;
         const 81;
         const 9223372036854775809;
         const 65536;
 },
 sat_sciT3_entry() //  [R1]
         { []
         }
     {offset
       ccl1j: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccl1k; else goto ccl1l;
       ccl1k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccl1l: // global
           I64[Sp - 8] = block_ccl1c_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucl1E; else goto ccl1d;
       ucl1E: // global
           call _ccl1c(R1) args: 0, res: 0, upd: 0;
       ccl1d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciT3_info" {
     sat_sciT3_info:
         const sat_sciT3_entry;
         const 1;
         const 18446744069414584336;
         const ucl1O_srtd;
 },
 section ""relreadonly" . ucl1P_srtd" {
     ucl1P_srtd:
         const Scjc4_srt+192;
         const 81;
         const 9223372036854775809;
         const 65536;
 },
 _ccl1c() //  [R1]
         { []
         }
     {offset
       ccl1c: // global
           if (R1 & 7 == 1) goto ccl1g; else goto ccl1h;
       ccl1g: // global
           R1 = Text.Printf.$fPrintfArgInt5_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccl1h: // global
           I64[Sp] = block_ccl1r_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl1c_info" {
     block_ccl1c_info:
         const _ccl1c;
         const 0;
         const 18446744069414584350;
         const ucl1P_srtd;
 },
 _ccl1r() //  [R1]
         { []
         }
     {offset
       ccl1r: // global
           if (R1 & 7 == 1) goto ccl1y; else goto ccl1C;
       ccl1y: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccl1C: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl1r_info" {
     block_ccl1r_info:
         const _ccl1r;
         const 0;
         const 4294967326;
         const Scjc4_srt+696;
 },
 section ""relreadonly" . ucl1Q_srtd" {
     ucl1Q_srtd:
         const Scjc4_srt+192;
         const 82;
         const 9295429630892703745;
         const 196608;
 },
 Text.Printf.$fPrintfArgInt8_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       ccl1F: // global
           if ((Sp + -64) < SpLim) (likely: False) goto ccl1G; else goto ccl1H;
       ccl1G: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgInt8_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccl1H: // global
           I64[Sp - 16] = block_ccl0R_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucl1N; else goto ccl0S;
       ucl1N: // global
           call _ccl0R(R1) args: 0, res: 0, upd: 0;
       ccl0S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgInt8_$sformatInt_info" {
     Text.Printf.$fPrintfArgInt8_$sformatInt_info:
         const Text.Printf.$fPrintfArgInt8_$sformatInt_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ucl1Q_srtd;
 },
 section ""relreadonly" . ucl1R_srtd" {
     ucl1R_srtd:
         const Scjc4_srt+192;
         const 81;
         const 9295429630892703745;
         const 65536;
 },
 _ccl0R() //  [R1]
         { []
         }
     {offset
       ccl0R: // global
           I64[Sp - 48] = block_ccl0W_info;
           _sciSP::P64 = P64[R1 + 7];
           _sciSQ::P64 = P64[R1 + 15];
           _sciSR::P64 = P64[R1 + 23];
           _sciSS::P64 = P64[R1 + 31];
           _sciST::P64 = P64[R1 + 39];
           _sciSU::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sciSQ::P64;
           P64[Sp - 32] = _sciSR::P64;
           P64[Sp - 24] = _sciSS::P64;
           P64[Sp - 16] = _sciST::P64;
           P64[Sp - 8] = _sciSU::P64;
           P64[Sp] = _sciSP::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ucl1M; else goto ccl0X;
       ucl1M: // global
           call _ccl0W(R1) args: 0, res: 0, upd: 0;
       ccl0X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl0R_info" {
     block_ccl0R_info:
         const _ccl0R;
         const 1;
         const 18446744069414584350;
         const ucl1R_srtd;
 },
 section ""relreadonly" . ucl1S_srtd" {
     ucl1S_srtd:
         const Scjc4_srt+192;
         const 81;
         const 9295429630892703745;
         const 65536;
 },
 _ccl0W() //  [R1]
         { []
         }
     {offset
       ccl0W: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccl1L; else goto ccl1K;
       ccl1L: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccl1K: // global
           _sciSX::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sciT4_info;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = sat_sciT3_info;
           _sciSU::P64 = P64[Sp + 40];
           P64[Hp] = _sciSU::P64;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sciST::P64 = P64[Sp + 32];
           P64[Sp + 32] = P64[Sp + 24];
           P64[Sp + 40] = _sciST::P64;
           P64[Sp + 48] = _sciSU::P64;
           I64[Sp + 56] = _sciSX::I64;
           Sp = Sp + 32;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl0W_info" {
     block_ccl0W_info:
         const _ccl0W;
         const 7;
         const 18446744069414584350;
         const ucl1S_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.390722328 UTC

[section ""data" . Text.Printf.$fPrintfArgInt_$sformatInt_closure" {
     Text.Printf.$fPrintfArgInt_$sformatInt_closure:
         const Text.Printf.$fPrintfArgInt_$sformatInt_info;
         const 0;
 },
 sat_sciTn_entry() //  [R1]
         { []
         }
     {offset
       ccl2Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccl30; else goto ccl31;
       ccl30: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccl31: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fIntegralInt_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciTn_info" {
     sat_sciTn_info:
         const sat_sciTn_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . ucl3I_srtd" {
     ucl3I_srtd:
         const Scjc4_srt+192;
         const 75;
         const 9223372036854775809;
         const 1024;
 },
 sat_sciTm_entry() //  [R1]
         { []
         }
     {offset
       ccl3d: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccl3e; else goto ccl3f;
       ccl3e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccl3f: // global
           I64[Sp - 8] = block_ccl36_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucl3y; else goto ccl37;
       ucl3y: // global
           call _ccl36(R1) args: 0, res: 0, upd: 0;
       ccl37: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciTm_info" {
     sat_sciTm_info:
         const sat_sciTm_entry;
         const 1;
         const 18446744069414584336;
         const ucl3I_srtd;
 },
 section ""relreadonly" . ucl3J_srtd" {
     ucl3J_srtd:
         const Scjc4_srt+192;
         const 75;
         const 9223372036854775809;
         const 1024;
 },
 _ccl36() //  [R1]
         { []
         }
     {offset
       ccl36: // global
           if (R1 & 7 == 1) goto ccl3a; else goto ccl3b;
       ccl3a: // global
           R1 = Text.Printf.$fPrintfArgInt1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccl3b: // global
           I64[Sp] = block_ccl3l_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl36_info" {
     block_ccl36_info:
         const _ccl36;
         const 0;
         const 18446744069414584350;
         const ucl3J_srtd;
 },
 _ccl3l() //  [R1]
         { []
         }
     {offset
       ccl3l: // global
           if (R1 & 7 == 1) goto ccl3s; else goto ccl3w;
       ccl3s: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccl3w: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl3l_info" {
     block_ccl3l_info:
         const _ccl3l;
         const 0;
         const 4294967326;
         const Scjc4_srt+696;
 },
 section ""relreadonly" . ucl3K_srtd" {
     ucl3K_srtd:
         const Scjc4_srt+192;
         const 83;
         const 9295429630892703745;
         const 263168;
 },
 Text.Printf.$fPrintfArgInt_$sformatInt_entry() //  [R2, R3]
         { []
         }
     {offset
       ccl3z: // global
           if ((Sp + -64) < SpLim) (likely: False) goto ccl3A; else goto ccl3B;
       ccl3A: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgInt_$sformatInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccl3B: // global
           I64[Sp - 16] = block_ccl2L_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucl3H; else goto ccl2M;
       ucl3H: // global
           call _ccl2L(R1) args: 0, res: 0, upd: 0;
       ccl2M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgInt_$sformatInt_info" {
     Text.Printf.$fPrintfArgInt_$sformatInt_info:
         const Text.Printf.$fPrintfArgInt_$sformatInt_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ucl3K_srtd;
 },
 section ""relreadonly" . ucl3L_srtd" {
     ucl3L_srtd:
         const Scjc4_srt+192;
         const 75;
         const 9295429630892703745;
         const 1024;
 },
 _ccl2L() //  [R1]
         { []
         }
     {offset
       ccl2L: // global
           I64[Sp - 48] = block_ccl2Q_info;
           _sciT8::P64 = P64[R1 + 7];
           _sciT9::P64 = P64[R1 + 15];
           _sciTa::P64 = P64[R1 + 23];
           _sciTb::P64 = P64[R1 + 31];
           _sciTc::P64 = P64[R1 + 39];
           _sciTd::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sciT9::P64;
           P64[Sp - 32] = _sciTa::P64;
           P64[Sp - 24] = _sciTb::P64;
           P64[Sp - 16] = _sciTc::P64;
           P64[Sp - 8] = _sciTd::P64;
           P64[Sp] = _sciT8::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ucl3G; else goto ccl2R;
       ucl3G: // global
           call _ccl2Q(R1) args: 0, res: 0, upd: 0;
       ccl2R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl2L_info" {
     block_ccl2L_info:
         const _ccl2L;
         const 1;
         const 18446744069414584350;
         const ucl3L_srtd;
 },
 section ""relreadonly" . ucl3M_srtd" {
     ucl3M_srtd:
         const Scjc4_srt+192;
         const 75;
         const 9295429630892703745;
         const 1024;
 },
 _ccl2Q() //  [R1]
         { []
         }
     {offset
       ccl2Q: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccl3F; else goto ccl3E;
       ccl3F: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccl3E: // global
           _sciTg::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sciTn_info;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = sat_sciTm_info;
           _sciTd::P64 = P64[Sp + 40];
           P64[Hp] = _sciTd::P64;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = Hp - 40;
           R2 = Hp - 16;
           _sciTc::P64 = P64[Sp + 32];
           P64[Sp + 32] = P64[Sp + 24];
           P64[Sp + 40] = _sciTc::P64;
           P64[Sp + 48] = _sciTd::P64;
           I64[Sp + 56] = _sciTg::I64;
           Sp = Sp + 32;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl2Q_info" {
     block_ccl2Q_info:
         const _ccl2Q;
         const 7;
         const 18446744069414584350;
         const ucl3M_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.413174072 UTC

[section ""data" . Text.Printf.$wformatInt_closure" {
     Text.Printf.$wformatInt_closure:
         const Text.Printf.$wformatInt_info;
         const 0;
 },
 Text.Printf.$wformatInt_slow() //  [R1]
         { []
         }
     {offset
       ccl4C: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.$wformatInt_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_sciTz_entry() //  [R1]
         { []
         }
     {offset
       ccl50: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccl51; else goto ccl52;
       ccl51: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccl52: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciTz_info" {
     sat_sciTz_info:
         const sat_sciTz_entry;
         const 1;
         const 16;
 },
 sat_sciTQ_entry() //  [R1]
         { []
         }
     {offset
       ccl5f: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccl5g; else goto ccl5h;
       ccl5g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccl5h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Real.toInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciTQ_info" {
     sat_sciTQ_info:
         const sat_sciTQ_entry;
         const 2;
         const 18;
 },
 section ""relreadonly" . ucl6f_srtd" {
     ucl6f_srtd:
         const Scjc4_srt+192;
         const 64;
         const 9223372036854775809;
 },
 sat_sciTP_entry() //  [R1]
         { []
         }
     {offset
       ccl5t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccl5u; else goto ccl5v;
       ccl5u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccl5v: // global
           I64[Sp - 16] = block_ccl5m_info;
           _sciTy::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 8] = _sciTy::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucl5R; else goto ccl5n;
       ucl5R: // global
           call _ccl5m(R1) args: 0, res: 0, upd: 0;
       ccl5n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciTP_info" {
     sat_sciTP_info:
         const sat_sciTP_entry;
         const 2;
         const 18446744069414584338;
         const ucl6f_srtd;
 },
 section ""relreadonly" . ucl6g_srtd" {
     ucl6g_srtd:
         const Scjc4_srt+192;
         const 64;
         const 9223372036854775809;
 },
 _ccl5m() //  [R1]
         { []
         }
     {offset
       ccl5m: // global
           if (R1 & 7 == 1) goto ccl5q; else goto ccl5r;
       ccl5q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccl5B; else goto ccl5A;
       ccl5B: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccl5A: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccl5r: // global
           I64[Sp + 8] = block_ccl5E_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           Sp = Sp + 8;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl5m_info" {
     block_ccl5m_info:
         const _ccl5m;
         const 1;
         const 18446744069414584350;
         const ucl6g_srtd;
 },
 _ccl5E() //  [R1]
         { []
         }
     {offset
       ccl5E: // global
           if (R1 & 7 == 1) goto ccl5L; else goto ccl5P;
       ccl5L: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccl5P: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl5E_info" {
     block_ccl5E_info:
         const _ccl5E;
         const 0;
         const 4294967326;
         const Scjc4_srt+696;
 },
 section ""relreadonly" . ucl6h_srtd" {
     ucl6h_srtd:
         const Scjc4_srt+192;
         const 84;
         const 9304436830147444737;
         const 524288;
 },
 Text.Printf.$wformatInt_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccl5S: // global
           _sciTs::P64 = R6;
           _sciTr::P64 = R5;
           _sciTq::P64 = R4;
           _sciTp::P64 = R3;
           _sciTo::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto ccl5T; else goto ccl5U;
       ccl5U: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccl5W; else goto ccl5V;
       ccl5W: // global
           HpAlloc = 24;
           goto ccl5T;
       ccl5T: // global
           R1 = Text.Printf.$wformatInt_closure;
           P64[Sp - 40] = _sciTo::P64;
           P64[Sp - 32] = _sciTp::P64;
           P64[Sp - 24] = _sciTq::P64;
           P64[Sp - 16] = _sciTr::P64;
           P64[Sp - 8] = _sciTs::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       ccl5V: // global
           I64[Hp - 16] = sat_sciTz_info;
           P64[Hp] = _sciTp::P64;
           I64[Sp - 40] = block_ccl4I_info;
           R2 = _sciTo::P64;
           I64[Sp - 56] = stg_ap_p_info;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 32] = _sciTo::P64;
           P64[Sp - 24] = _sciTq::P64;
           P64[Sp - 16] = _sciTr::P64;
           P64[Sp - 8] = _sciTs::P64;
           Sp = Sp - 56;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$wformatInt_info" {
     Text.Printf.$wformatInt_info:
         const Text.Printf.$wformatInt_entry;
         const 0;
         const 18446744069414584334;
         const 42949672960;
         const ucl6h_srtd;
         const 32778;
         const Text.Printf.$wformatInt_slow;
 },
 section ""relreadonly" . ucl6i_srtd" {
     ucl6i_srtd:
         const Scjc4_srt+192;
         const 64;
         const 9304436830147444737;
 },
 _ccl4I() //  [R1]
         { []
         }
     {offset
       ccl4I: // global
           I64[Sp - 8] = block_ccl4O_info;
           R3 = Text.Printf.formatChar2_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl4I_info" {
     block_ccl4I_info:
         const _ccl4I;
         const 16393;
         const 18446744069414584350;
         const ucl6i_srtd;
 },
 section ""relreadonly" . ucl6j_srtd" {
     ucl6j_srtd:
         const Scjc4_srt+192;
         const 64;
         const 9295429630892703745;
 },
 _ccl4O() //  [R1]
         { []
         }
     {offset
       ccl4O: // global
           _sciTr::P64 = P64[Sp + 32];
           _sciTs::P64 = P64[Sp + 40];
           _sciTt::P64 = P64[Sp + 48];
           _sciTu::P64 = P64[Sp + 56];
           _sciTv::P64 = P64[Sp + 64];
           _sciTw::P64 = P64[Sp + 72];
           _sciTx::I64 = I64[Sp + 80];
           if (R1 == 1) goto ccl67; else goto ccl63;
       ccl67: // global
           Hp = Hp + 16;
           _sciTR::I64 = R1;
           if (Hp > HpLim) (likely: False) goto ccl6a; else goto ccl69;
       ccl69: // global
           if (_sciTx::I64 == 118) goto ccl6d; else goto ccl6c;
       ccl6d: // global
           Hp = Hp - 16;
           _sciTH::P64 = Text.Printf.$fPrintfArgWord1_closure+1;
           _sciTG::P64 = _sciTw::P64;
           _sciTF::P64 = _sciTv::P64;
           _sciTE::P64 = _sciTu::P64;
           _sciTD::P64 = _sciTt::P64;
           _sciTC::P64 = _sciTs::P64;
           _sciTB::P64 = _sciTr::P64;
           goto sciTA;
       ccl6c: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sciTx::I64;
           _sciTH::P64 = Hp - 7;
           _sciTG::P64 = _sciTw::P64;
           _sciTF::P64 = _sciTv::P64;
           _sciTE::P64 = _sciTu::P64;
           _sciTD::P64 = _sciTt::P64;
           _sciTC::P64 = _sciTs::P64;
           _sciTB::P64 = _sciTr::P64;
           goto sciTA;
       ccl63: // global
           Hp = Hp + 16;
           _sciTR::I64 = R1;
           if (Hp > HpLim) (likely: False) goto ccl6a; else goto ccl65;
       ccl6a: // global
           HpAlloc = 16;
           R1 = _sciTR::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccl65: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sciTx::I64;
           _sciTH::P64 = Hp - 7;
           _sciTG::P64 = _sciTw::P64;
           _sciTF::P64 = _sciTv::P64;
           _sciTE::P64 = _sciTu::P64;
           _sciTD::P64 = _sciTt::P64;
           _sciTC::P64 = _sciTs::P64;
           _sciTB::P64 = _sciTr::P64;
           goto sciTA;
       sciTA: // global
           I64[Sp] = block_ccl56_info;
           R1 = _sciTH::P64;
           P64[Sp + 32] = _sciTG::P64;
           P64[Sp + 40] = _sciTF::P64;
           P64[Sp + 48] = _sciTE::P64;
           P64[Sp + 56] = _sciTD::P64;
           P64[Sp + 64] = _sciTC::P64;
           P64[Sp + 80] = _sciTB::P64;
           if (R1 & 7 != 0) goto ucl6e; else goto ccl57;
       ucl6e: // global
           call _ccl56(R1) args: 0, res: 0, upd: 0;
       ccl57: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl4O_info" {
     block_ccl4O_info:
         const _ccl4O;
         const 32778;
         const 18446744069414584350;
         const ucl6j_srtd;
 },
 section ""relreadonly" . ucl6k_srtd" {
     ucl6k_srtd:
         const Scjc4_srt+192;
         const 64;
         const 9295429630892703745;
 },
 _ccl56() //  [R1]
         { []
         }
     {offset
       ccl56: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccl61; else goto ccl60;
       ccl61: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccl60: // global
           _sciTJ::I64 = I64[R1 + 7];
           I64[Hp - 56] = sat_sciTQ_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = sat_sciTP_info;
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 8];
           R6 = P64[Sp + 56];
           R5 = P64[Sp + 64];
           R4 = P64[Sp + 80];
           R3 = Hp - 56;
           R2 = Hp - 24;
           P64[Sp + 56] = P64[Sp + 48];
           P64[Sp + 64] = P64[Sp + 40];
           P64[Sp + 72] = P64[Sp + 32];
           I64[Sp + 80] = _sciTJ::I64;
           Sp = Sp + 56;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl56_info" {
     block_ccl56_info:
         const _ccl56;
         const 10;
         const 18446744069414584350;
         const ucl6k_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.438751831 UTC

[section ""data" . Text.Printf.formatInt_closure" {
     Text.Printf.formatInt_closure:
         const Text.Printf.formatInt_info;
         const 0;
 },
 Text.Printf.formatInt_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       ccl7F: // global
           if ((Sp + -80) < SpLim) (likely: False) goto ccl7J; else goto ccl7K;
       ccl7J: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.formatInt_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccl7K: // global
           I64[Sp - 32] = block_ccl7C_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucl7S; else goto ccl7D;
       ucl7S: // global
           call _ccl7C(R1) args: 0, res: 0, upd: 0;
       ccl7D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.formatInt_info" {
     Text.Printf.formatInt_info:
         const Text.Printf.formatInt_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const Scjc4_srt+856;
 },
 _ccl7C() //  [R1]
         { []
         }
     {offset
       ccl7C: // global
           I64[Sp - 48] = block_ccl7I_info;
           _sciU0::P64 = P64[R1 + 7];
           _sciU1::P64 = P64[R1 + 15];
           _sciU2::P64 = P64[R1 + 23];
           _sciU3::P64 = P64[R1 + 31];
           _sciU4::P64 = P64[R1 + 39];
           _sciU5::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sciU1::P64;
           P64[Sp - 32] = _sciU2::P64;
           P64[Sp - 24] = _sciU3::P64;
           P64[Sp - 16] = _sciU4::P64;
           P64[Sp - 8] = _sciU5::P64;
           P64[Sp] = _sciU0::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ucl7R; else goto ccl7M;
       ucl7R: // global
           call _ccl7I(R1) args: 0, res: 0, upd: 0;
       ccl7M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl7C_info" {
     block_ccl7C_info:
         const _ccl7C;
         const 3;
         const 4294967326;
         const Scjc4_srt+856;
 },
 _ccl7I() //  [R1]
         { []
         }
     {offset
       ccl7I: // global
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 48];
           R4 = P64[Sp + 72];
           R3 = P64[Sp + 64];
           R2 = P64[Sp + 56];
           _sciU5::P64 = P64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 16];
           P64[Sp + 48] = P64[Sp + 24];
           P64[Sp + 56] = P64[Sp + 32];
           P64[Sp + 64] = _sciU5::P64;
           I64[Sp + 72] = I64[R1 + 7];
           Sp = Sp + 40;
           call Text.Printf.$wformatInt_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl7I_info" {
     block_ccl7I_info:
         const _ccl7I;
         const 9;
         const 4294967326;
         const Scjc4_srt+856;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.446030879 UTC

[section ""data" . Text.Printf.$fPrintfArgWord64_closure" {
     Text.Printf.$fPrintfArgWord64_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgWord64_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.447786678 UTC

[section ""data" . Text.Printf.$fPrintfArgWord32_closure" {
     Text.Printf.$fPrintfArgWord32_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgWord32_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.4495368 UTC

[section ""data" . Text.Printf.$fPrintfArgWord16_closure" {
     Text.Printf.$fPrintfArgWord16_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgWord16_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.451236353 UTC

[section ""data" . Text.Printf.$fPrintfArgWord8_closure" {
     Text.Printf.$fPrintfArgWord8_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgWord8_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.452994775 UTC

[section ""data" . Text.Printf.$fPrintfArgWord_closure" {
     Text.Printf.$fPrintfArgWord_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgWord_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.454852986 UTC

[section ""data" . Text.Printf.$fPrintfArgInt64_closure" {
     Text.Printf.$fPrintfArgInt64_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgInt64_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.456571643 UTC

[section ""data" . Text.Printf.$fPrintfArgInt32_closure" {
     Text.Printf.$fPrintfArgInt32_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgInt32_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.458603501 UTC

[section ""data" . Text.Printf.$fPrintfArgInt16_closure" {
     Text.Printf.$fPrintfArgInt16_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgInt16_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.460395902 UTC

[section ""data" . Text.Printf.$fPrintfArgInt8_closure" {
     Text.Printf.$fPrintfArgInt8_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgInt8_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.46278168 UTC

[section ""data" . Text.Printf.$fPrintfArgInt_closure" {
     Text.Printf.$fPrintfArgInt_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgInt_$sformatInt_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.467607402 UTC

[section ""data" . Text.Printf.formatInteger_closure" {
     Text.Printf.formatInteger_closure:
         const Text.Printf.formatInteger_info;
         const 0;
 },
 section ""relreadonly" . ucl9g_srtd" {
     ucl9g_srtd:
         const Scjc4_srt+192;
         const 64;
         const 9223372036854775809;
 },
 sat_sciUq_entry() //  [R1]
         { []
         }
     {offset
       ccl8L: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccl8M; else goto ccl8N;
       ccl8M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccl8N: // global
           I64[Sp - 8] = block_ccl8E_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucl96; else goto ccl8F;
       ucl96: // global
           call _ccl8E(R1) args: 0, res: 0, upd: 0;
       ccl8F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciUq_info" {
     sat_sciUq_info:
         const sat_sciUq_entry;
         const 1;
         const 18446744069414584336;
         const ucl9g_srtd;
 },
 section ""relreadonly" . ucl9h_srtd" {
     ucl9h_srtd:
         const Scjc4_srt+192;
         const 64;
         const 9223372036854775809;
 },
 _ccl8E() //  [R1]
         { []
         }
     {offset
       ccl8E: // global
           if (R1 & 7 == 1) goto ccl8I; else goto ccl8J;
       ccl8I: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccl8J: // global
           I64[Sp] = block_ccl8T_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl8E_info" {
     block_ccl8E_info:
         const _ccl8E;
         const 0;
         const 18446744069414584350;
         const ucl9h_srtd;
 },
 _ccl8T() //  [R1]
         { []
         }
     {offset
       ccl8T: // global
           if (R1 & 7 == 1) goto ccl90; else goto ccl94;
       ccl90: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccl94: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl8T_info" {
     block_ccl8T_info:
         const _ccl8T;
         const 0;
         const 4294967326;
         const Scjc4_srt+696;
 },
 section ""relreadonly" . ucl9i_srtd" {
     ucl9i_srtd:
         const Scjc4_srt+192;
         const 86;
         const 9295429630892703745;
         const 2097152;
 },
 Text.Printf.formatInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       ccl97: // global
           if ((Sp + -64) < SpLim) (likely: False) goto ccl98; else goto ccl99;
       ccl98: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.formatInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccl99: // global
           I64[Sp - 16] = block_ccl8q_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucl9f; else goto ccl8r;
       ucl9f: // global
           call _ccl8q(R1) args: 0, res: 0, upd: 0;
       ccl8r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.formatInteger_info" {
     Text.Printf.formatInteger_info:
         const Text.Printf.formatInteger_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ucl9i_srtd;
 },
 section ""relreadonly" . ucl9j_srtd" {
     ucl9j_srtd:
         const Scjc4_srt+192;
         const 64;
         const 9295429630892703745;
 },
 _ccl8q() //  [R1]
         { []
         }
     {offset
       ccl8q: // global
           I64[Sp - 48] = block_ccl8v_info;
           _sciUc::P64 = P64[R1 + 7];
           _sciUd::P64 = P64[R1 + 15];
           _sciUe::P64 = P64[R1 + 23];
           _sciUf::P64 = P64[R1 + 31];
           _sciUg::P64 = P64[R1 + 39];
           _sciUh::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sciUd::P64;
           P64[Sp - 32] = _sciUe::P64;
           P64[Sp - 24] = _sciUf::P64;
           P64[Sp - 16] = _sciUg::P64;
           P64[Sp - 8] = _sciUh::P64;
           P64[Sp] = _sciUc::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ucl9e; else goto ccl8w;
       ucl9e: // global
           call _ccl8v(R1) args: 0, res: 0, upd: 0;
       ccl8w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl8q_info" {
     block_ccl8q_info:
         const _ccl8q;
         const 1;
         const 18446744069414584350;
         const ucl9j_srtd;
 },
 section ""relreadonly" . ucl9k_srtd" {
     ucl9k_srtd:
         const Scjc4_srt+192;
         const 64;
         const 9295429630892703745;
 },
 _ccl8v() //  [R1]
         { []
         }
     {offset
       ccl8v: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccl9d; else goto ccl9c;
       ccl9d: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccl9c: // global
           _sciUk::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sciUq_info;
           _sciUh::P64 = P64[Sp + 40];
           P64[Hp] = _sciUh::P64;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 56];
           R2 = Hp - 16;
           _sciUg::P64 = P64[Sp + 32];
           P64[Sp + 32] = P64[Sp + 24];
           P64[Sp + 40] = _sciUg::P64;
           P64[Sp + 48] = _sciUh::P64;
           I64[Sp + 56] = _sciUk::I64;
           Sp = Sp + 32;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccl8v_info" {
     block_ccl8v_info:
         const _ccl8v;
         const 7;
         const 18446744069414584350;
         const ucl9k_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.486019435 UTC

[section ""data" . Text.Printf.$fPrintfArgNatural_$cformatArg_closure" {
     Text.Printf.$fPrintfArgNatural_$cformatArg_closure:
         const Text.Printf.$fPrintfArgNatural_$cformatArg_info;
         const 0;
 },
 section ""relreadonly" . uclaX_srtd" {
     uclaX_srtd:
         const Scjc4_srt+192;
         const 64;
         const 9223372036854775809;
 },
 sat_sciUI_entry() //  [R1]
         { []
         }
     {offset
       cclas: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cclat; else goto cclau;
       cclat: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclau: // global
           I64[Sp - 8] = block_cclal_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclaN; else goto cclam;
       uclaN: // global
           call _cclal(R1) args: 0, res: 0, upd: 0;
       cclam: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sciUI_info" {
     sat_sciUI_info:
         const sat_sciUI_entry;
         const 1;
         const 18446744069414584336;
         const uclaX_srtd;
 },
 section ""relreadonly" . uclaY_srtd" {
     uclaY_srtd:
         const Scjc4_srt+192;
         const 64;
         const 9223372036854775809;
 },
 _cclal() //  [R1]
         { []
         }
     {offset
       cclal: // global
           if (R1 & 7 == 1) goto cclap; else goto cclaq;
       cclap: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cclaq: // global
           I64[Sp] = block_cclaA_info;
           R4 = Text.Printf.intModifierMap_closure+2;
           R3 = R1;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.lookup_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cclal_info" {
     block_cclal_info:
         const _cclal;
         const 0;
         const 18446744069414584350;
         const uclaY_srtd;
 },
 _cclaA() //  [R1]
         { []
         }
     {offset
       cclaA: // global
           if (R1 & 7 == 1) goto cclaH; else goto cclaL;
       cclaH: // global
           R1 = Text.Printf.$fPrintfArgInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cclaL: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cclaA_info" {
     block_cclaA_info:
         const _cclaA;
         const 0;
         const 4294967326;
         const Scjc4_srt+696;
 },
 section ""relreadonly" . uclaZ_srtd" {
     uclaZ_srtd:
         const Scjc4_srt+192;
         const 87;
         const 9295429630892703745;
         const 4194304;
 },
 Text.Printf.$fPrintfArgNatural_$cformatArg_entry() //  [R2, R3]
         { []
         }
     {offset
       cclaO: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cclaP; else goto cclaQ;
       cclaP: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfArgNatural_$cformatArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cclaQ: // global
           I64[Sp - 16] = block_ccla7_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uclaW; else goto ccla8;
       uclaW: // global
           call _ccla7(R1) args: 0, res: 0, upd: 0;
       ccla8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfArgNatural_$cformatArg_info" {
     Text.Printf.$fPrintfArgNatural_$cformatArg_info:
         const Text.Printf.$fPrintfArgNatural_$cformatArg_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uclaZ_srtd;
 },
 section ""relreadonly" . uclb0_srtd" {
     uclb0_srtd:
         const Scjc4_srt+192;
         const 64;
         const 9295429630892703745;
 },
 _ccla7() //  [R1]
         { []
         }
     {offset
       ccla7: // global
           I64[Sp - 48] = block_cclac_info;
           _sciUu::P64 = P64[R1 + 7];
           _sciUv::P64 = P64[R1 + 15];
           _sciUw::P64 = P64[R1 + 23];
           _sciUx::P64 = P64[R1 + 31];
           _sciUy::P64 = P64[R1 + 39];
           _sciUz::P64 = P64[R1 + 47];
           R1 = P64[R1 + 55];
           P64[Sp - 40] = _sciUv::P64;
           P64[Sp - 32] = _sciUw::P64;
           P64[Sp - 24] = _sciUx::P64;
           P64[Sp - 16] = _sciUy::P64;
           P64[Sp - 8] = _sciUz::P64;
           P64[Sp] = _sciUu::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uclaV; else goto cclad;
       uclaV: // global
           call _cclac(R1) args: 0, res: 0, upd: 0;
       cclad: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccla7_info" {
     block_ccla7_info:
         const _ccla7;
         const 1;
         const 18446744069414584350;
         const uclb0_srtd;
 },
 section ""relreadonly" . uclb1_srtd" {
     uclb1_srtd:
         const Scjc4_srt+192;
         const 64;
         const 9295429630892703745;
 },
 _cclac() //  [R1]
         { []
         }
     {offset
       cclac: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cclaU; else goto cclaT;
       cclaU: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cclaT: // global
           _sciUC::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sciUI_info;
           _sciUz::P64 = P64[Sp + 40];
           P64[Hp] = _sciUz::P64;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 56];
           R2 = Hp - 16;
           _sciUy::P64 = P64[Sp + 32];
           P64[Sp + 32] = P64[Sp + 24];
           P64[Sp + 40] = _sciUy::P64;
           P64[Sp + 48] = _sciUz::P64;
           I64[Sp + 56] = _sciUC::I64;
           Sp = Sp + 32;
           call Text.Printf.$wformatIntegral_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cclac_info" {
     block_cclac_info:
         const _cclac;
         const 7;
         const 18446744069414584350;
         const uclb1_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.501712524 UTC

[section ""data" . Text.Printf.$fPrintfArgNatural_closure" {
     Text.Printf.$fPrintfArgNatural_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.$fPrintfArgNatural_$cformatArg_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.503399863 UTC

[section ""data" . Text.Printf.$fPrintfArgInteger_closure" {
     Text.Printf.$fPrintfArgInteger_closure:
         const Text.Printf.C:PrintfArg_con_info;
         const Text.Printf.formatInteger_closure+2;
         const Text.Printf.parseIntFormat_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.50584297 UTC

[section ""data" . lvl42_rcccH_closure" {
     lvl42_rcccH_closure:
         const lvl42_rcccH_info;
         const 0;
         const 0;
         const 0;
 },
 lvl42_rcccH_entry() //  [R1]
         { []
         }
     {offset
       cclbS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cclbT; else goto cclbU;
       cclbT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclbU: // global
           (_cclbP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cclbP::I64 == 0) goto cclbR; else goto cclbQ;
       cclbR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cclbQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cclbP::I64;
           R4 = Text.Read.readEither7_closure+1;
           R3 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R2 = GHC.Read.$fReadInt2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.$fReadInt_$sreadNumber_entry(R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl42_rcccH_info" {
     lvl42_rcccH_info:
         const lvl42_rcccH_entry;
         const 0;
         const 12884901909;
         const Scjc4_srt+888;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.509579108 UTC

[section ""data" . lvl43_rcccI_closure" {
     lvl43_rcccI_closure:
         const Text.Printf.FieldFormat_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const GHC.Types.False_closure+1;
         const GHC.Types.[]_closure+1;
         const lvl23_rccco_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.511895215 UTC

[section ""data" . lvl44_rcccJ_closure" {
     lvl44_rcccJ_closure:
         const lvl44_rcccJ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl44_rcccJ_entry() //  [R1]
         { []
         }
     {offset
       cclcc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cclcd; else goto cclce;
       cclcd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclce: // global
           (_cclc9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cclc9::I64 == 0) goto cclcb; else goto cclca;
       cclcb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cclca: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cclc9::I64;
           R2 = Text.Read.readEither5_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl44_rcccJ_info" {
     lvl44_rcccJ_info:
         const lvl44_rcccJ_entry;
         const 0;
         const 12884901909;
         const Scjc4_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.516217873 UTC

[section ""data" . lvl45_rcccK_closure" {
     lvl45_rcccK_closure:
         const lvl45_rcccK_info;
         const 0;
         const 0;
         const 0;
 },
 lvl45_rcccK_entry() //  [R1]
         { []
         }
     {offset
       cclct: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cclcu; else goto cclcv;
       cclcu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclcv: // global
           (_cclcq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cclcq::I64 == 0) goto cclcs; else goto cclcr;
       cclcs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cclcr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cclcq::I64;
           R2 = Text.Read.readEither2_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl45_rcccK_info" {
     lvl45_rcccK_info:
         const lvl45_rcccK_entry;
         const 0;
         const 12884901909;
         const Scjc4_srt+912;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.522702004 UTC

[section ""data" . $wgetStar_rcccL_closure" {
     $wgetStar_rcccL_closure:
         const $wgetStar_rcccL_info;
         const 0;
 },
 sat_sciUR_entry() //  [R1]
         { []
         }
     {offset
       ccld1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccld2; else goto ccld3;
       ccld2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccld3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = lvl43_rcccI_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciUR_info" {
     sat_sciUR_info:
         const sat_sciUR_entry;
         const 1;
         const 16;
 },
 sat_sciUZ_entry() //  [R1]
         { []
         }
     {offset
       ccld6: // global
           _sciUZ::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto ccld7; else goto ccld8;
       ccld8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cclda; else goto ccld9;
       cclda: // global
           HpAlloc = 24;
           goto ccld7;
       ccld7: // global
           R1 = _sciUZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccld9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sciUZ::P64;
           _sciUQ::P64 = P64[_sciUZ::P64 + 16];
           I64[Hp - 16] = sat_sciUR_info;
           P64[Hp] = _sciUQ::P64;
           I64[Sp - 24] = block_ccld4_info;
           R3 = Hp - 16;
           R2 = lvl42_rcccH_closure;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciUZ_info" {
     sat_sciUZ_info:
         const sat_sciUZ_entry;
         const 1;
         const 30064771088;
         const Scjc4_srt+928;
 },
 _ccld4() //  [R1]
         { []
         }
     {offset
       ccld4: // global
           I64[Sp] = block_ccldd_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccld4_info" {
     block_ccld4_info:
         const _ccld4;
         const 0;
         const 12884901918;
         const Scjc4_srt+936;
 },
 _ccldd() //  [R1]
         { []
         }
     {offset
       ccldd: // global
           if (R1 & 7 == 1) goto ccldk; else goto ccldp;
       ccldk: // global
           R1 = lvl44_rcccJ_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ccldp: // global
           I64[Sp - 8] = block_ccldn_info;
           _sciUU::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sciUU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucldD; else goto ccldq;
       ucldD: // global
           call _ccldn(R1) args: 0, res: 0, upd: 0;
       ccldq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccldd_info" {
     block_ccldd_info:
         const _ccldd;
         const 0;
         const 12884901918;
         const Scjc4_srt+936;
 },
 _ccldn() //  [R1]
         { []
         }
     {offset
       ccldn: // global
           if (R1 & 7 == 1) goto ccldw; else goto ccldA;
       ccldw: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ccldA: // global
           R1 = lvl45_rcccK_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccldn_info" {
     block_ccldn_info:
         const _ccldn;
         const 1;
         const 4294967326;
         const Scjc4_srt+944;
 },
 $wgetStar_rcccL_entry() //  [R2]
         { []
         }
     {offset
       ccldI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccldJ; else goto ccldK;
       ccldJ: // global
           R2 = R2;
           R1 = $wgetStar_rcccL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccldK: // global
           I64[Sp - 8] = block_cclcI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucldS; else goto cclcJ;
       ucldS: // global
           call _cclcI(R1) args: 0, res: 0, upd: 0;
       cclcJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgetStar_rcccL_info" {
     $wgetStar_rcccL_info:
         const $wgetStar_rcccL_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const Scjc4_srt+928;
 },
 _cclcI() //  [R1]
         { []
         }
     {offset
       cclcI: // global
           if (R1 & 7 == 1) goto ccldF; else goto ccldG;
       ccldF: // global
           R1 = Text.Printf.errorMissingArgument_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       ccldG: // global
           I64[Sp - 8] = block_cclcO_info;
           _sciUN::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sciUN::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucldR; else goto cclcP;
       ucldR: // global
           call _cclcO(R1) args: 0, res: 0, upd: 0;
       cclcP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cclcI_info" {
     block_cclcI_info:
         const _cclcI;
         const 0;
         const 64424509470;
         const Scjc4_srt+928;
 },
 _cclcO() //  [R1]
         { []
         }
     {offset
       cclcO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccldQ; else goto ccldP;
       ccldQ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccldP: // global
           _sciUQ::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_sciUZ_info;
           P64[Hp] = _sciUQ::P64;
           R2 = Hp - 16;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cclcO_info" {
     block_cclcO_info:
         const _cclcO;
         const 1;
         const 30064771102;
         const Scjc4_srt+928;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.538823549 UTC

[section ""data" . lvl46_rcccM_closure" {
     lvl46_rcccM_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.5405593 UTC

[section ""data" . lvl47_rcccN_closure" {
     lvl47_rcccN_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.LeftAdjust_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.542191778 UTC

[section ""data" . lvl48_rcccO_closure" {
     lvl48_rcccO_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.ZeroPad_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.546832727 UTC

[section ""data" . lvl49_rcccP_closure" {
     lvl49_rcccP_closure:
         const lvl49_rcccP_info;
         const 0;
         const 0;
         const 0;
 },
 sat_sciVd_entry() //  [R1]
         { []
         }
     {offset
       cclf6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cclf7; else goto cclf8;
       cclf7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclf8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cclf4_info;
           R3 = P64[R1 + 16];
           R2 = lvl42_rcccH_closure;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciVd_info" {
     sat_sciVd_info:
         const sat_sciVd_entry;
         const 1;
         const 30064771088;
         const Scjc4_srt+928;
 },
 _cclf4() //  [R1]
         { []
         }
     {offset
       cclf4: // global
           I64[Sp] = block_cclfb_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclf4_info" {
     block_cclf4_info:
         const _cclf4;
         const 0;
         const 12884901918;
         const Scjc4_srt+936;
 },
 _cclfb() //  [R1]
         { []
         }
     {offset
       cclfb: // global
           if (R1 & 7 == 1) goto cclfi; else goto cclfn;
       cclfi: // global
           R1 = lvl44_rcccJ_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cclfn: // global
           I64[Sp - 8] = block_cclfl_info;
           _sciV8::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sciV8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclfB; else goto cclfo;
       uclfB: // global
           call _cclfl(R1) args: 0, res: 0, upd: 0;
       cclfo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclfb_info" {
     block_cclfb_info:
         const _cclfb;
         const 0;
         const 12884901918;
         const Scjc4_srt+936;
 },
 _cclfl() //  [R1]
         { []
         }
     {offset
       cclfl: // global
           if (R1 & 7 == 1) goto cclfu; else goto cclfy;
       cclfu: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cclfy: // global
           R1 = lvl45_rcccK_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclfl_info" {
     block_cclfl_info:
         const _cclfl;
         const 1;
         const 4294967326;
         const Scjc4_srt+944;
 },
 lvl49_rcccP_entry() //  [R1]
         { []
         }
     {offset
       cclfG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cclfH; else goto cclfI;
       cclfH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclfI: // global
           (_ccleP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccleP::I64 == 0) goto ccleR; else goto ccleQ;
       ccleR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccleQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccleP::I64;
           I64[Sp - 24] = block_ccleS_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Unicode.isDigit_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl49_rcccP_info" {
     lvl49_rcccP_info:
         const lvl49_rcccP_entry;
         const 0;
         const 30064771093;
         const Scjc4_srt+928;
 },
 _ccleS() //  [R1, R2]
         { []
         }
     {offset
       ccleS: // global
           I64[Sp - 8] = block_ccleU_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclfT; else goto ccleV;
       uclfT: // global
           call _ccleU(R1) args: 0, res: 0, upd: 0;
       ccleV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccleS_info" {
     block_ccleS_info:
         const _ccleS;
         const 0;
         const 30064771102;
         const Scjc4_srt+928;
 },
 _ccleU() //  [R1]
         { []
         }
     {offset
       ccleU: // global
           _sciV2::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cclfD; else goto cclfE;
       cclfD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cclfO; else goto cclfN;
       cclfO: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclfN: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl46_rcccM_closure+1;
           P64[Hp] = _sciV2::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cclfE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cclfS; else goto cclfR;
       cclfS: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclfR: // global
           I64[Hp - 40] = sat_sciVd_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _sciV2::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccleU_info" {
     block_ccleU_info:
         const _ccleU;
         const 1;
         const 30064771102;
         const Scjc4_srt+928;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.560584944 UTC

[section ""data" . lvl50_rcccQ_closure" {
     lvl50_rcccQ_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.SignPlus_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.563512679 UTC

[section ""data" . lvl51_rcccR_closure" {
     lvl51_rcccR_closure:
         const lvl51_rcccR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl51_rcccR_entry() //  [R1]
         { []
         }
     {offset
       cclgW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cclgX; else goto cclgY;
       cclgX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclgY: // global
           (_cclgQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cclgQ::I64 == 0) goto cclgS; else goto cclgR;
       cclgS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cclgR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cclgQ::I64;
           I64[Sp - 24] = block_cclgT_info;
           R1 = lvl49_rcccP_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uclh2; else goto cclgU;
       uclh2: // global
           call _cclgT(R1) args: 0, res: 0, upd: 0;
       cclgU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl51_rcccR_info" {
     lvl51_rcccR_info:
         const lvl51_rcccR_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt+968;
 },
 _cclgT() //  [R1]
         { []
         }
     {offset
       cclgT: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclgT_info" {
     block_cclgT_info:
         const _cclgT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.568656264 UTC

[section ""data" . lvl52_rcccS_closure" {
     lvl52_rcccS_closure:
         const GHC.Base.Just_con_info;
         const lvl51_rcccR_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.571159162 UTC

[section ""data" . lvl53_rcccT_closure" {
     lvl53_rcccT_closure:
         const lvl53_rcccT_info;
         const 0;
         const 0;
         const 0;
 },
 lvl53_rcccT_entry() //  [R1]
         { []
         }
     {offset
       cclhs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cclht; else goto cclhu;
       cclht: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclhu: // global
           (_cclhm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cclhm::I64 == 0) goto cclho; else goto cclhn;
       cclho: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cclhn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cclhm::I64;
           I64[Sp - 24] = block_cclhp_info;
           R1 = lvl49_rcccP_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uclhy; else goto cclhq;
       uclhy: // global
           call _cclhp(R1) args: 0, res: 0, upd: 0;
       cclhq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl53_rcccT_info" {
     lvl53_rcccT_info:
         const lvl53_rcccT_entry;
         const 0;
         const 4294967317;
         const Scjc4_srt+968;
 },
 _cclhp() //  [R1]
         { []
         }
     {offset
       cclhp: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclhp_info" {
     block_cclhp_info:
         const _cclhp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.576888959 UTC

[section ""data" . lvl54_rcccU_closure" {
     lvl54_rcccU_closure:
         const GHC.Base.Just_con_info;
         const Text.Printf.SignSpace_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.619370824 UTC

[section ""data" . $wgetSpecs_rcccV_closure" {
     $wgetSpecs_rcccV_closure:
         const $wgetSpecs_rcccV_info;
         const 0;
 },
 ds3_sciVB_entry() //  [R1]
         { []
         }
     {offset
       ccliv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccliw; else goto cclix;
       ccliw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclix: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cclio_info;
           _sciVq::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sciVq::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucliL; else goto cclip;
       ucliL: // global
           call _cclio(R1) args: 0, res: 0, upd: 0;
       cclip: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds3_sciVB_info" {
     ds3_sciVB_info:
         const ds3_sciVB_entry;
         const 2;
         const 4294967314;
         const Scjc4_srt+952;
 },
 _cclio() //  [R1]
         { []
         }
     {offset
       cclio: // global
           if (R1 & 7 == 1) goto cclis; else goto cclit;
       cclis: // global
           R1 = Text.Printf.errorMissingArgument_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cclit: // global
           I64[Sp] = block_ccliD_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucliK; else goto ccliF;
       ucliK: // global
           call _ccliD(R1) args: 0, res: 0, upd: 0;
       ccliF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclio_info" {
     block_cclio_info:
         const _cclio;
         const 1;
         const 4294967326;
         const Scjc4_srt+952;
 },
 _ccliD() //  [R1]
         { []
         }
     {offset
       ccliD: // global
           R2 = P64[Sp + 8];
           R1 = P64[R1 + 7];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccliD_info" {
     block_ccliD_info:
         const _ccliD;
         const 1;
         const 30;
 },
 sat_sciVK_entry() //  [R1]
         { []
         }
     {offset
       cclj0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cclj1; else goto cclj2;
       cclj1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclj2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccliT_info;
           _sciVl::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sciVl::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucljn; else goto ccliU;
       ucljn: // global
           call _ccliT(R1) args: 0, res: 0, upd: 0;
       ccliU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciVK_info" {
     sat_sciVK_info:
         const sat_sciVK_entry;
         const 2;
         const 18;
 },
 _ccliT() //  [R1]
         { []
         }
     {offset
       ccliT: // global
           if (R1 & 7 == 1) goto ccliX; else goto ccliY;
       ccliX: // global
           _sciVl::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cclj5_info;
           R1 = _sciVl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucljm; else goto cclj7;
       ucljm: // global
           call _cclj5(R1) args: 0, res: 0, upd: 0;
       cclj7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       ccliY: // global
           R1 = lvl47_rcccN_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccliT_info" {
     block_ccliT_info:
         const _ccliT;
         const 1;
         const 30;
 },
 _cclj5() //  [R1]
         { []
         }
     {offset
       cclj5: // global
           if (R1 & 7 == 1) goto ccljd; else goto ccljh;
       ccljd: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccljh: // global
           R1 = lvl48_rcccO_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclj5_info" {
     block_cclj5_info:
         const _cclj5;
         const 0;
         const 30;
 },
 sat_sciWf_entry() //  [R1]
         { []
         }
     {offset
       ccljH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccljI; else goto ccljJ;
       ccljI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccljJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccljF_info;
           R3 = P64[R1 + 16];
           R2 = lvl42_rcccH_closure;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciWf_info" {
     sat_sciWf_info:
         const sat_sciWf_entry;
         const 1;
         const 30064771088;
         const Scjc4_srt+928;
 },
 _ccljF() //  [R1]
         { []
         }
     {offset
       ccljF: // global
           I64[Sp] = block_ccljM_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccljF_info" {
     block_ccljF_info:
         const _ccljF;
         const 0;
         const 12884901918;
         const Scjc4_srt+936;
 },
 _ccljM() //  [R1]
         { []
         }
     {offset
       ccljM: // global
           if (R1 & 7 == 1) goto ccljT; else goto ccljY;
       ccljT: // global
           R1 = lvl44_rcccJ_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ccljY: // global
           I64[Sp - 8] = block_ccljW_info;
           _sciWa::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sciWa::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclkc; else goto ccljZ;
       uclkc: // global
           call _ccljW(R1) args: 0, res: 0, upd: 0;
       ccljZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccljM_info" {
     block_ccljM_info:
         const _ccljM;
         const 0;
         const 12884901918;
         const Scjc4_srt+936;
 },
 _ccljW() //  [R1]
         { []
         }
     {offset
       ccljW: // global
           if (R1 & 7 == 1) goto cclk5; else goto cclk9;
       cclk5: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cclk9: // global
           R1 = lvl45_rcccK_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccljW_info" {
     block_ccljW_info:
         const _ccljW;
         const 1;
         const 4294967326;
         const Scjc4_srt+944;
 },
 ds3_sciW1_entry() //  [R1]
         { []
         }
     {offset
       cclkh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cclki; else goto cclkj;
       cclki: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclkj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccljt_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.isDigit_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds3_sciW1_info" {
     ds3_sciW1_info:
         const ds3_sciW1_entry;
         const 1;
         const 30064771088;
         const Scjc4_srt+928;
 },
 _ccljt() //  [R1, R2]
         { []
         }
     {offset
       ccljt: // global
           I64[Sp - 8] = block_ccljv_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclku; else goto ccljw;
       uclku: // global
           call _ccljv(R1) args: 0, res: 0, upd: 0;
       ccljw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccljt_info" {
     block_ccljt_info:
         const _ccljt;
         const 0;
         const 30064771102;
         const Scjc4_srt+928;
 },
 _ccljv() //  [R1]
         { []
         }
     {offset
       ccljv: // global
           _sciW4::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cclke; else goto cclkf;
       cclke: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cclkp; else goto cclko;
       cclkp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclko: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl46_rcccM_closure+1;
           P64[Hp] = _sciW4::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cclkf: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cclkt; else goto cclks;
       cclkt: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclks: // global
           I64[Hp - 40] = sat_sciWf_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _sciW4::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccljv_info" {
     block_ccljv_info:
         const _ccljv;
         const 1;
         const 30064771102;
         const Scjc4_srt+928;
 },
 sat_sciWK_entry() //  [R1]
         { []
         }
     {offset
       cclln: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccllo; else goto ccllp;
       ccllo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccllp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cclll_info;
           R3 = P64[R1 + 16];
           R2 = lvl42_rcccH_closure;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciWK_info" {
     sat_sciWK_info:
         const sat_sciWK_entry;
         const 1;
         const 30064771088;
         const Scjc4_srt+928;
 },
 _cclll() //  [R1]
         { []
         }
     {offset
       cclll: // global
           I64[Sp] = block_cclls_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclll_info" {
     block_cclll_info:
         const _cclll;
         const 0;
         const 12884901918;
         const Scjc4_srt+936;
 },
 _cclls() //  [R1]
         { []
         }
     {offset
       cclls: // global
           if (R1 & 7 == 1) goto ccllz; else goto ccllE;
       ccllz: // global
           R1 = lvl44_rcccJ_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ccllE: // global
           I64[Sp - 8] = block_ccllC_info;
           _sciWF::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sciWF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucllS; else goto ccllF;
       ucllS: // global
           call _ccllC(R1) args: 0, res: 0, upd: 0;
       ccllF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclls_info" {
     block_cclls_info:
         const _cclls;
         const 0;
         const 12884901918;
         const Scjc4_srt+936;
 },
 _ccllC() //  [R1]
         { []
         }
     {offset
       ccllC: // global
           if (R1 & 7 == 1) goto ccllL; else goto ccllP;
       ccllL: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ccllP: // global
           R1 = lvl45_rcccK_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccllC_info" {
     block_ccllC_info:
         const _ccllC;
         const 1;
         const 4294967326;
         const Scjc4_srt+944;
 },
 ds12_sciWw_entry() //  [R1]
         { []
         }
     {offset
       ccllX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccllY; else goto ccllZ;
       ccllY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccllZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccll9_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.isDigit_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds12_sciWw_info" {
     ds12_sciWw_info:
         const ds12_sciWw_entry;
         const 1;
         const 30064771088;
         const Scjc4_srt+928;
 },
 _ccll9() //  [R1, R2]
         { []
         }
     {offset
       ccll9: // global
           I64[Sp - 8] = block_ccllb_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclma; else goto ccllc;
       uclma: // global
           call _ccllb(R1) args: 0, res: 0, upd: 0;
       ccllc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccll9_info" {
     block_ccll9_info:
         const _ccll9;
         const 0;
         const 30064771102;
         const Scjc4_srt+928;
 },
 _ccllb() //  [R1]
         { []
         }
     {offset
       ccllb: // global
           _sciWz::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccllU; else goto ccllV;
       ccllU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cclm5; else goto cclm4;
       cclm5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclm4: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl46_rcccM_closure+1;
           P64[Hp] = _sciWz::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccllV: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cclm9; else goto cclm8;
       cclm9: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclm8: // global
           I64[Hp - 40] = sat_sciWK_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _sciWz::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccllb_info" {
     block_ccllb_info:
         const _ccllb;
         const 1;
         const 30064771102;
         const Scjc4_srt+928;
 },
 ds12_sciWU_entry() //  [R1]
         { []
         }
     {offset
       cclmj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cclmk; else goto cclml;
       cclmk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclml: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cclmg_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgetStar_rcccL_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds12_sciWU_info" {
     ds12_sciWU_info:
         const ds12_sciWU_entry;
         const 1;
         const 4294967312;
         const Scjc4_srt+960;
 },
 _cclmg() //  [R1, R2]
         { []
         }
     {offset
       cclmg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cclmo; else goto cclmn;
       cclmo: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cclmn: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclmg_info" {
     block_cclmg_info:
         const _cclmg;
         const 0;
         const 30;
 },
 ds4_sciWg_entry() //  [R1]
         { []
         }
     {offset
       cclmp: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cclmq; else goto cclmr;
       cclmq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclmr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cclkz_info;
           _sciVp::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sciVp::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uclnc; else goto cclkA;
       uclnc: // global
           call _cclkz(R1) args: 0, res: 0, upd: 0;
       cclkA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_sciWg_info" {
     ds4_sciWg_info:
         const ds4_sciWg_entry;
         const 2;
         const 923417968658;
         const Scjc4_srt+928;
 },
 _cclkz() //  [R1]
         { []
         }
     {offset
       cclkz: // global
           I64[Sp] = block_cclkE_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucln8; else goto cclkF;
       ucln8: // global
           call _cclkE(R1) args: 0, res: 0, upd: 0;
       cclkF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclkz_info" {
     block_cclkz_info:
         const _cclkz;
         const 1;
         const 923417968670;
         const Scjc4_srt+928;
 },
 _cclkE() //  [R1]
         { []
         }
     {offset
       cclkE: // global
           if (R1 & 7 == 1) goto cclmw; else goto cclmB;
       cclmw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cclmz; else goto cclmy;
       cclmz: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclmy: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = GHC.Base.Nothing_closure+1;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cclmB: // global
           I64[Sp - 16] = block_cclkK_info;
           _sciWk::P64 = R1;
           _sciWm::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sciWm::P64;
           P64[Sp] = _sciWk::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucln9; else goto cclkL;
       ucln9: // global
           call _cclkK(R1) args: 0, res: 0, upd: 0;
       cclkL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclkE_info" {
     block_cclkE_info:
         const _cclkE;
         const 1;
         const 923417968670;
         const Scjc4_srt+928;
 },
 _cclkK() //  [R1]
         { []
         }
     {offset
       cclkK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cclmE; else goto cclmD;
       cclmE: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclmD: // global
           if (I64[R1 + 7] == 46) goto cclmI; else goto cclmH;
       cclmI: // global
           Hp = Hp - 32;
           I64[Sp + 16] = block_cclkS_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uclna; else goto cclkT;
       uclna: // global
           call _cclkS(R1) args: 0, res: 0, upd: 0;
       cclkT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cclmH: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = GHC.Base.Nothing_closure+1;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclkK_info" {
     block_cclkK_info:
         const _cclkK;
         const 3;
         const 923417968670;
         const Scjc4_srt+928;
 },
 _cclkS() //  [R1]
         { []
         }
     {offset
       cclkS: // global
           if (R1 & 7 == 1) goto cclmM; else goto cclmR;
       cclmM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cclmP; else goto cclmO;
       cclmP: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclmO: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = lvl52_rcccS_closure+2;
           P64[Hp - 8] = lvl53_rcccT_closure;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cclmR: // global
           I64[Sp - 16] = block_cclkY_info;
           _sciWq::P64 = R1;
           _sciWs::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sciWs::P64;
           P64[Sp] = _sciWq::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uclnb; else goto cclkZ;
       uclnb: // global
           call _cclkY(R1) args: 0, res: 0, upd: 0;
       cclkZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclkS_info" {
     block_cclkS_info:
         const _cclkS;
         const 1;
         const 923417968670;
         const Scjc4_srt+928;
 },
 _cclkY() //  [R1]
         { []
         }
     {offset
       cclkY: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cclmU; else goto cclmT;
       cclmU: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclmT: // global
           _sciVp::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 42) goto ccln5; else goto ccln0;
       ccln5: // global
           I64[Hp - 112] = ds12_sciWU_info;
           P64[Hp - 96] = _sciVp::P64;
           I64[Hp - 88] = stg_sel_0_upd_info;
           _cclmc::P64 = Hp - 112;
           P64[Hp - 72] = _cclmc::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cclmc::P64;
           I64[Hp - 40] = GHC.Base.Just_con_info;
           P64[Hp - 32] = Hp - 64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 88;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccln0: // global
           I64[Hp - 112] = ds12_sciWw_info;
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = stg_sel_1_upd_info;
           _ccll5::P64 = Hp - 112;
           P64[Hp - 72] = _ccll5::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _ccll5::P64;
           I64[Hp - 40] = GHC.Base.Just_con_info;
           P64[Hp - 32] = Hp - 64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 88;
           P64[Hp] = _sciVp::P64;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclkY_info" {
     block_cclkY_info:
         const _cclkY;
         const 3;
         const 98784247838;
         const Scjc4_srt+928;
 },
 ds5_sciX7_entry() //  [R1]
         { []
         }
     {offset
       cclnk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cclnl; else goto cclnm;
       cclnl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclnm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cclnh_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uclnK; else goto cclni;
       uclnK: // global
           call _cclnh(R1) args: 0, res: 0, upd: 0;
       cclni: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds5_sciX7_info" {
     ds5_sciX7_info:
         const ds5_sciX7_entry;
         const 1;
         const 4294967312;
         const Scjc4_srt+952;
 },
 _cclnh() //  [R1]
         { []
         }
     {offset
       cclnh: // global
           I64[Sp - 8] = block_cclnp_info;
           _sciXa::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp] = _sciXa::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclnJ; else goto cclnr;
       uclnJ: // global
           call _cclnp(R1) args: 0, res: 0, upd: 0;
       cclnr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclnh_info" {
     block_cclnh_info:
         const _cclnh;
         const 0;
         const 4294967326;
         const Scjc4_srt+952;
 },
 _cclnp() //  [R1]
         { []
         }
     {offset
       cclnp: // global
           if (R1 & 7 == 1) goto cclnx; else goto cclnC;
       cclnx: // global
           R1 = Text.Printf.errorMissingArgument_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cclnC: // global
           I64[Sp] = block_cclnA_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uclnL; else goto cclnD;
       uclnL: // global
           call _cclnA(R1) args: 0, res: 0, upd: 0;
       cclnD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclnp_info" {
     block_cclnp_info:
         const _cclnp;
         const 1;
         const 4294967326;
         const Scjc4_srt+952;
 },
 _cclnA() //  [R1]
         { []
         }
     {offset
       cclnA: // global
           R2 = P64[Sp + 8];
           R1 = P64[R1 + 7];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclnA_info" {
     block_cclnA_info:
         const _cclnA;
         const 1;
         const 30;
 },
 sat_sciXE_entry() //  [R1]
         { []
         }
     {offset
       cclnX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cclo1; else goto cclo2;
       cclo1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclo2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cclnU_info;
           _sciVk::P64 = P64[R1 + 16];
           _sciVl::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sciVk::P64;
           P64[Sp - 24] = _sciVl::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucloI; else goto cclnV;
       ucloI: // global
           call _cclnU(R1) args: 0, res: 0, upd: 0;
       cclnV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciXE_info" {
     sat_sciXE_info:
         const sat_sciXE_entry;
         const 3;
         const 15;
 },
 _cclnU() //  [R1]
         { []
         }
     {offset
       cclnU: // global
           I64[Sp] = block_cclo0_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto ucloH; else goto cclo4;
       ucloH: // global
           call _cclo0(R1) args: 0, res: 0, upd: 0;
       cclo4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclnU_info" {
     block_cclnU_info:
         const _cclnU;
         const 2;
         const 30;
 },
 _cclo0() //  [R1]
         { []
         }
     {offset
       cclo0: // global
           if (%MO_S_Ge_W64(I64[R1 + 7], 0)) goto ccloe; else goto ucloF;
       ccloe: // global
           _sciVk::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccloc_info;
           R1 = _sciVk::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucloJ; else goto cclof;
       ucloJ: // global
           call _ccloc(R1) args: 0, res: 0, upd: 0;
       cclof: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       ucloF: // global
           Sp = Sp + 24;
           call _ccloC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cclo0_info" {
     block_cclo0_info:
         const _cclo0;
         const 2;
         const 30;
 },
 _ccloc() //  [R1]
         { []
         }
     {offset
       ccloc: // global
           if (R1 & 7 == 1) goto cclom; else goto ucloG;
       cclom: // global
           _sciVl::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccloj_info;
           R1 = _sciVl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucloL; else goto cclon;
       ucloL: // global
           call _ccloj(R1) args: 0, res: 0, upd: 0;
       cclon: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       ucloG: // global
           Sp = Sp + 16;
           call _ccloC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccloc_info" {
     block_ccloc_info:
         const _ccloc;
         const 1;
         const 30;
 },
 _ccloj() //  [R1]
         { []
         }
     {offset
       ccloj: // global
           if (R1 & 7 == 1) goto cclot; else goto cclox;
       cclot: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cclox: // global
           R1 = lvl48_rcccO_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccloj_info" {
     block_ccloj_info:
         const _ccloj;
         const 0;
         const 30;
 },
 _ccloC() //  []
         { []
         }
     {offset
       ccloC: // global
           R1 = lvl47_rcccN_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sciXp_entry() //  [R1]
         { []
         }
     {offset
       ccloV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccloZ; else goto cclp0;
       ccloZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclp0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccloS_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uclpk; else goto ccloT;
       uclpk: // global
           call _ccloS(R1) args: 0, res: 0, upd: 0;
       ccloT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciXp_info" {
     sat_sciXp_info:
         const sat_sciXp_entry;
         const 1;
         const 16;
 },
 _ccloS() //  [R1]
         { []
         }
     {offset
       ccloS: // global
           I64[Sp] = block_ccloY_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto uclpj; else goto cclp2;
       uclpj: // global
           call _ccloY(R1) args: 0, res: 0, upd: 0;
       cclp2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccloS_info" {
     block_ccloS_info:
         const _ccloS;
         const 0;
         const 30;
 },
 _ccloY() //  [R1]
         { []
         }
     {offset
       ccloY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cclp8; else goto cclp7;
       cclp8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclp7: // global
           _sciXm::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_sciXm::I64, 0)) goto cclph; else goto cclpi;
       cclph: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -_sciXm::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cclpi: // global
           Hp = Hp - 16;
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccloY_info" {
     block_ccloY_info:
         const _ccloY;
         const 0;
         const 30;
 },
 sat_sciY3_entry() //  [R1]
         { []
         }
     {offset
       cclpv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cclpw; else goto cclpx;
       cclpw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclpx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cclpo_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uclpV; else goto cclpp;
       uclpV: // global
           call _cclpo(R1) args: 0, res: 0, upd: 0;
       cclpp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciY3_info" {
     sat_sciY3_info:
         const sat_sciY3_entry;
         const 1;
         const 16;
 },
 _cclpo() //  [R1]
         { []
         }
     {offset
       cclpo: // global
           if (R1 & 7 == 1) goto uclpR; else goto cclpt;
       uclpR: // global
           Sp = Sp + 8;
           call _cclpP() args: 0, res: 0, upd: 0;
       cclpt: // global
           I64[Sp] = block_cclpD_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uclpT; else goto cclpF;
       uclpT: // global
           call _cclpD(R1) args: 0, res: 0, upd: 0;
       cclpF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclpo_info" {
     block_cclpo_info:
         const _cclpo;
         const 0;
         const 30;
 },
 _cclpD() //  [R1]
         { []
         }
     {offset
       cclpD: // global
           if (R1 & 7 == 1) goto cclpL; else goto uclpS;
       cclpL: // global
           R1 = lvl50_rcccQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uclpS: // global
           Sp = Sp + 8;
           call _cclpP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cclpD_info" {
     block_cclpD_info:
         const _cclpD;
         const 0;
         const 30;
 },
 _cclpP() //  []
         { []
         }
     {offset
       cclpP: // global
           R1 = lvl54_rcccU_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds3_sciY4_entry() //  [R1]
         { []
         }
     {offset
       cclq6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cclq7; else goto cclq8;
       cclq7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclq8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cclq3_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgetStar_rcccL_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds3_sciY4_info" {
     ds3_sciY4_info:
         const ds3_sciY4_entry;
         const 1;
         const 4294967312;
         const Scjc4_srt+960;
 },
 _cclq3() //  [R1, R2]
         { []
         }
     {offset
       cclq3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cclqb; else goto cclqa;
       cclqb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cclqa: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclq3_info" {
     block_cclq3_info:
         const _cclq3;
         const 0;
         const 30;
 },
 sat_sciYL_entry() //  [R1]
         { []
         }
     {offset
       cclqZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cclr0; else goto cclr1;
       cclr0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclr1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cclqX_info;
           R3 = P64[R1 + 16];
           R2 = lvl42_rcccH_closure;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciYL_info" {
     sat_sciYL_info:
         const sat_sciYL_entry;
         const 1;
         const 30064771088;
         const Scjc4_srt+928;
 },
 _cclqX() //  [R1]
         { []
         }
     {offset
       cclqX: // global
           I64[Sp] = block_cclr4_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclqX_info" {
     block_cclqX_info:
         const _cclqX;
         const 0;
         const 12884901918;
         const Scjc4_srt+936;
 },
 _cclr4() //  [R1]
         { []
         }
     {offset
       cclr4: // global
           if (R1 & 7 == 1) goto cclrb; else goto cclrg;
       cclrb: // global
           R1 = lvl44_rcccJ_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cclrg: // global
           I64[Sp - 8] = block_cclre_info;
           _sciYG::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sciYG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclru; else goto cclrh;
       uclru: // global
           call _cclre(R1) args: 0, res: 0, upd: 0;
       cclrh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclr4_info" {
     block_cclr4_info:
         const _cclr4;
         const 0;
         const 12884901918;
         const Scjc4_srt+936;
 },
 _cclre() //  [R1]
         { []
         }
     {offset
       cclre: // global
           if (R1 & 7 == 1) goto cclrn; else goto cclrr;
       cclrn: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cclrr: // global
           R1 = lvl45_rcccK_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclre_info" {
     block_cclre_info:
         const _cclre;
         const 1;
         const 4294967326;
         const Scjc4_srt+944;
 },
 ds12_sciYx_entry() //  [R1]
         { []
         }
     {offset
       cclrz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cclrA; else goto cclrB;
       cclrA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclrB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cclqL_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.isDigit_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds12_sciYx_info" {
     ds12_sciYx_info:
         const ds12_sciYx_entry;
         const 1;
         const 30064771088;
         const Scjc4_srt+928;
 },
 _cclqL() //  [R1, R2]
         { []
         }
     {offset
       cclqL: // global
           I64[Sp - 8] = block_cclqN_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclrM; else goto cclqO;
       uclrM: // global
           call _cclqN(R1) args: 0, res: 0, upd: 0;
       cclqO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclqL_info" {
     block_cclqL_info:
         const _cclqL;
         const 0;
         const 30064771102;
         const Scjc4_srt+928;
 },
 _cclqN() //  [R1]
         { []
         }
     {offset
       cclqN: // global
           _sciYA::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cclrw; else goto cclrx;
       cclrw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cclrH; else goto cclrG;
       cclrH: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclrG: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl46_rcccM_closure+1;
           P64[Hp] = _sciYA::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cclrx: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cclrL; else goto cclrK;
       cclrL: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclrK: // global
           I64[Hp - 40] = sat_sciYL_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _sciYA::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclqN_info" {
     block_cclqN_info:
         const _cclqN;
         const 1;
         const 30064771102;
         const Scjc4_srt+928;
 },
 ds12_sciYZ_entry() //  [R1]
         { []
         }
     {offset
       cclrV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccls1; else goto ccls2;
       ccls1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccls2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cclrS_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucls7; else goto cclrT;
       ucls7: // global
           call _cclrS(R1) args: 0, res: 0, upd: 0;
       cclrT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds12_sciYZ_info" {
     ds12_sciYZ_info:
         const ds12_sciYZ_entry;
         const 1;
         const 4294967312;
         const Scjc4_srt+960;
 },
 _cclrS() //  [R1]
         { []
         }
     {offset
       cclrS: // global
           I64[Sp] = block_cclrY_info;
           R2 = P64[R1 + 7];
           call $wgetStar_rcccL_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclrS_info" {
     block_cclrS_info:
         const _cclrS;
         const 0;
         const 4294967326;
         const Scjc4_srt+960;
 },
 _cclrY() //  [R1, R2]
         { []
         }
     {offset
       cclrY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccls6; else goto ccls5;
       ccls6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccls5: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclrY_info" {
     block_cclrY_info:
         const _cclrY;
         const 0;
         const 30;
 },
 ds4_sciY8_entry() //  [R1]
         { []
         }
     {offset
       cclsc: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cclsd; else goto cclse;
       cclsd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclse: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cclqg_info;
           _sciY4::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sciY4::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uclsX; else goto cclqh;
       uclsX: // global
           call _cclqg(R1) args: 0, res: 0, upd: 0;
       cclqh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_sciY8_info" {
     ds4_sciY8_info:
         const ds4_sciY8_entry;
         const 2;
         const 923417968658;
         const Scjc4_srt+928;
 },
 _cclqg() //  [R1]
         { []
         }
     {offset
       cclqg: // global
           if (R1 & 7 == 1) goto ccls9; else goto cclsa;
       ccls9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cclsk; else goto cclsj;
       cclsk: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclsj: // global
           I64[Hp - 48] = stg_sel_0_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = GHC.Base.Nothing_closure+1;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cclsa: // global
           I64[Sp - 16] = block_cclqm_info;
           _sciY9::P64 = R1;
           _sciYf::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sciYf::P64;
           P64[Sp] = _sciY9::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uclsU; else goto cclqn;
       uclsU: // global
           call _cclqm(R1) args: 0, res: 0, upd: 0;
       cclqn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclqg_info" {
     block_cclqg_info:
         const _cclqg;
         const 1;
         const 923417968670;
         const Scjc4_srt+928;
 },
 _cclqm() //  [R1]
         { []
         }
     {offset
       cclqm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cclso; else goto cclsn;
       cclso: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclsn: // global
           if (I64[R1 + 7] == 46) goto cclst; else goto cclss;
       cclst: // global
           Hp = Hp - 56;
           I64[Sp + 16] = block_cclqu_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uclsV; else goto cclqv;
       uclsV: // global
           call _cclqu(R1) args: 0, res: 0, upd: 0;
       cclqv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cclss: // global
           I64[Hp - 48] = stg_sel_0_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = GHC.Base.Nothing_closure+1;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclqm_info" {
     block_cclqm_info:
         const _cclqm;
         const 3;
         const 923417968670;
         const Scjc4_srt+928;
 },
 _cclqu() //  [R1]
         { []
         }
     {offset
       cclqu: // global
           if (R1 & 7 == 1) goto cclsy; else goto cclsD;
       cclsy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cclsB; else goto cclsA;
       cclsB: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclsA: // global
           I64[Hp - 48] = stg_sel_0_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = lvl52_rcccS_closure+2;
           P64[Hp - 8] = lvl53_rcccT_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cclsD: // global
           I64[Sp - 16] = block_cclqA_info;
           _sciYn::P64 = R1;
           _sciYt::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sciYt::P64;
           P64[Sp] = _sciYn::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uclsW; else goto cclqB;
       uclsW: // global
           call _cclqA(R1) args: 0, res: 0, upd: 0;
       cclqB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclqu_info" {
     block_cclqu_info:
         const _cclqu;
         const 1;
         const 923417968670;
         const Scjc4_srt+928;
 },
 _cclqA() //  [R1]
         { []
         }
     {offset
       cclqA: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cclsG; else goto cclsF;
       cclsG: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclsF: // global
           _sciY4::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 42) goto cclsS; else goto cclsN;
       cclsS: // global
           I64[Hp - 136] = ds12_sciYZ_info;
           P64[Hp - 120] = _sciY4::P64;
           I64[Hp - 112] = stg_sel_0_upd_info;
           _cclrO::P64 = Hp - 136;
           P64[Hp - 96] = _cclrO::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _cclrO::P64;
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = Hp - 88;
           I64[Hp - 48] = (,,)_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = Hp - 112;
           _cclsR::P64 = Hp - 47;
           Hp = Hp - 24;
           R1 = _cclsR::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cclsN: // global
           I64[Hp - 136] = ds12_sciYx_info;
           P64[Hp - 120] = P64[Sp + 16];
           I64[Hp - 112] = stg_sel_0_upd_info;
           P64[Hp - 96] = _sciY4::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           _cclqH::P64 = Hp - 136;
           P64[Hp - 72] = _cclqH::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cclqH::P64;
           I64[Hp - 40] = GHC.Base.Just_con_info;
           P64[Hp - 32] = Hp - 64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 88;
           P64[Hp] = Hp - 112;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclqA_info" {
     block_cclqA_info:
         const _cclqA;
         const 3;
         const 98784247838;
         const Scjc4_srt+928;
 },
 ds5_sciZf_entry() //  [R1]
         { []
         }
     {offset
       cclt5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cclt6; else goto cclt7;
       cclt6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclt7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cclt2_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucltv; else goto cclt3;
       ucltv: // global
           call _cclt2(R1) args: 0, res: 0, upd: 0;
       cclt3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds5_sciZf_info" {
     ds5_sciZf_info:
         const ds5_sciZf_entry;
         const 1;
         const 4294967312;
         const Scjc4_srt+952;
 },
 _cclt2() //  [R1]
         { []
         }
     {offset
       cclt2: // global
           I64[Sp - 8] = block_cclta_info;
           _sciZi::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp] = _sciZi::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucltu; else goto ccltc;
       ucltu: // global
           call _cclta(R1) args: 0, res: 0, upd: 0;
       ccltc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclt2_info" {
     block_cclt2_info:
         const _cclt2;
         const 0;
         const 4294967326;
         const Scjc4_srt+952;
 },
 _cclta() //  [R1]
         { []
         }
     {offset
       cclta: // global
           if (R1 & 7 == 1) goto cclti; else goto ccltn;
       cclti: // global
           R1 = Text.Printf.errorMissingArgument_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       ccltn: // global
           I64[Sp] = block_ccltl_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucltw; else goto cclto;
       ucltw: // global
           call _ccltl(R1) args: 0, res: 0, upd: 0;
       cclto: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclta_info" {
     block_cclta_info:
         const _cclta;
         const 1;
         const 4294967326;
         const Scjc4_srt+952;
 },
 _ccltl() //  [R1]
         { []
         }
     {offset
       ccltl: // global
           R2 = P64[Sp + 8];
           R1 = P64[R1 + 7];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccltl_info" {
     block_ccltl_info:
         const _ccltl;
         const 1;
         const 30;
 },
 sat_sciZM_entry() //  [R1]
         { []
         }
     {offset
       ccltI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccltM; else goto ccltN;
       ccltM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccltN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_ccltF_info;
           _sciVk::P64 = P64[R1 + 16];
           _sciVl::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sciVk::P64;
           P64[Sp - 24] = _sciVl::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uclut; else goto ccltG;
       uclut: // global
           call _ccltF(R1) args: 0, res: 0, upd: 0;
       ccltG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciZM_info" {
     sat_sciZM_info:
         const sat_sciZM_entry;
         const 3;
         const 15;
 },
 _ccltF() //  [R1]
         { []
         }
     {offset
       ccltF: // global
           I64[Sp] = block_ccltL_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto uclus; else goto ccltP;
       uclus: // global
           call _ccltL(R1) args: 0, res: 0, upd: 0;
       ccltP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccltF_info" {
     block_ccltF_info:
         const _ccltF;
         const 2;
         const 30;
 },
 _ccltL() //  [R1]
         { []
         }
     {offset
       ccltL: // global
           if (%MO_S_Ge_W64(I64[R1 + 7], 0)) goto ccltZ; else goto ucluq;
       ccltZ: // global
           _sciVk::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccltX_info;
           R1 = _sciVk::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucluu; else goto cclu0;
       ucluu: // global
           call _ccltX(R1) args: 0, res: 0, upd: 0;
       cclu0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       ucluq: // global
           Sp = Sp + 24;
           call _cclun() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccltL_info" {
     block_ccltL_info:
         const _ccltL;
         const 2;
         const 30;
 },
 _ccltX() //  [R1]
         { []
         }
     {offset
       ccltX: // global
           if (R1 & 7 == 1) goto cclu7; else goto uclur;
       cclu7: // global
           _sciVl::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cclu4_info;
           R1 = _sciVl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucluw; else goto cclu8;
       ucluw: // global
           call _cclu4(R1) args: 0, res: 0, upd: 0;
       cclu8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       uclur: // global
           Sp = Sp + 16;
           call _cclun() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccltX_info" {
     block_ccltX_info:
         const _ccltX;
         const 1;
         const 30;
 },
 _cclu4() //  [R1]
         { []
         }
     {offset
       cclu4: // global
           if (R1 & 7 == 1) goto cclue; else goto cclui;
       cclue: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cclui: // global
           R1 = lvl48_rcccO_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclu4_info" {
     block_cclu4_info:
         const _cclu4;
         const 0;
         const 30;
 },
 _cclun() //  []
         { []
         }
     {offset
       cclun: // global
           R1 = lvl47_rcccN_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sciZx_entry() //  [R1]
         { []
         }
     {offset
       ccluG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccluK; else goto ccluL;
       ccluK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccluL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccluD_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uclv5; else goto ccluE;
       uclv5: // global
           call _ccluD(R1) args: 0, res: 0, upd: 0;
       ccluE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sciZx_info" {
     sat_sciZx_info:
         const sat_sciZx_entry;
         const 1;
         const 16;
 },
 _ccluD() //  [R1]
         { []
         }
     {offset
       ccluD: // global
           I64[Sp] = block_ccluJ_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto uclv4; else goto ccluN;
       uclv4: // global
           call _ccluJ(R1) args: 0, res: 0, upd: 0;
       ccluN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccluD_info" {
     block_ccluD_info:
         const _ccluD;
         const 0;
         const 30;
 },
 _ccluJ() //  [R1]
         { []
         }
     {offset
       ccluJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccluT; else goto ccluS;
       ccluT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccluS: // global
           _sciZu::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_sciZu::I64, 0)) goto cclv2; else goto cclv3;
       cclv2: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -_sciZu::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cclv3: // global
           Hp = Hp - 16;
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccluJ_info" {
     block_ccluJ_info:
         const _ccluJ;
         const 0;
         const 30;
 },
 sat_scj0v_entry() //  [R1]
         { []
         }
     {offset
       cclvE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cclvF; else goto cclvG;
       cclvF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclvG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cclvC_info;
           R3 = P64[R1 + 16];
           R2 = lvl42_rcccH_closure;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scj0v_info" {
     sat_scj0v_info:
         const sat_scj0v_entry;
         const 1;
         const 30064771088;
         const Scjc4_srt+928;
 },
 _cclvC() //  [R1]
         { []
         }
     {offset
       cclvC: // global
           I64[Sp] = block_cclvJ_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclvC_info" {
     block_cclvC_info:
         const _cclvC;
         const 0;
         const 12884901918;
         const Scjc4_srt+936;
 },
 _cclvJ() //  [R1]
         { []
         }
     {offset
       cclvJ: // global
           if (R1 & 7 == 1) goto cclvQ; else goto cclvV;
       cclvQ: // global
           R1 = lvl44_rcccJ_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cclvV: // global
           I64[Sp - 8] = block_cclvT_info;
           _scj0q::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scj0q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclw9; else goto cclvW;
       uclw9: // global
           call _cclvT(R1) args: 0, res: 0, upd: 0;
       cclvW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclvJ_info" {
     block_cclvJ_info:
         const _cclvJ;
         const 0;
         const 12884901918;
         const Scjc4_srt+936;
 },
 _cclvT() //  [R1]
         { []
         }
     {offset
       cclvT: // global
           if (R1 & 7 == 1) goto cclw2; else goto cclw6;
       cclw2: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cclw6: // global
           R1 = lvl45_rcccK_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclvT_info" {
     block_cclvT_info:
         const _cclvT;
         const 1;
         const 4294967326;
         const Scjc4_srt+944;
 },
 ds7_scj0w_entry() //  [R1]
         { []
         }
     {offset
       cclwi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cclwj; else goto cclwk;
       cclwj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclwk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cclwf_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgetStar_rcccL_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds7_scj0w_info" {
     ds7_scj0w_info:
         const ds7_scj0w_entry;
         const 1;
         const 4294967312;
         const Scjc4_srt+960;
 },
 _cclwf() //  [R1, R2]
         { []
         }
     {offset
       cclwf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cclwn; else goto cclwm;
       cclwn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cclwm: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclwf_info" {
     block_cclwf_info:
         const _cclwf;
         const 0;
         const 30;
 },
 ds3_scj08_entry() //  [R1]
         { []
         }
     {offset
       cclws: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cclwt; else goto cclwu;
       cclwt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclwu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cclvd_info;
           _sciVp::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sciVp::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uclx7; else goto cclve;
       uclx7: // global
           call _cclvd(R1) args: 0, res: 0, upd: 0;
       cclve: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds3_scj08_info" {
     ds3_scj08_info:
         const ds3_scj08_entry;
         const 2;
         const 236223201298;
         const Scjc4_srt+928;
 },
 _cclvd() //  [R1]
         { []
         }
     {offset
       cclvd: // global
           if (R1 & 7 == 1) goto cclwp; else goto cclwq;
       cclwp: // global
           I64[Sp] = block_cclww_info;
           R1 = lvl49_rcccP_closure;
           if (R1 & 7 != 0) goto uclx4; else goto cclwx;
       uclx4: // global
           call _cclww(R1) args: 0, res: 0, upd: 0;
       cclwx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cclwq: // global
           I64[Sp - 16] = block_cclvj_info;
           _scj09::P64 = R1;
           _scj0e::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scj0e::P64;
           P64[Sp] = _scj09::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uclx5; else goto cclvk;
       uclx5: // global
           call _cclvj(R1) args: 0, res: 0, upd: 0;
       cclvk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclvd_info" {
     block_cclvd_info:
         const _cclvd;
         const 1;
         const 236223201310;
         const Scjc4_srt+928;
 },
 _cclww() //  [R1]
         { []
         }
     {offset
       cclww: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cclwF; else goto cclwE;
       cclwF: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclwE: // global
           _scj0b::P64 = P64[R1 + 7];
           _scj0c::P64 = P64[R1 + 15];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = _scj0b::P64;
           P64[Hp - 8] = _scj0c::P64;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclww_info" {
     block_cclww_info:
         const _cclww;
         const 1;
         const 30;
 },
 _cclvj() //  [R1]
         { []
         }
     {offset
       cclvj: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cclwJ; else goto cclwI;
       cclwJ: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclwI: // global
           if (I64[R1 + 7] == 42) goto cclx2; else goto cclwL;
       cclx2: // global
           I64[Hp - 96] = ds7_scj0w_info;
           P64[Hp - 80] = P64[Sp + 24];
           I64[Hp - 72] = stg_sel_0_upd_info;
           _cclwb::P64 = Hp - 96;
           P64[Hp - 56] = _cclwb::P64;
           I64[Hp - 48] = stg_sel_1_upd_info;
           P64[Hp - 32] = _cclwb::P64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 72;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cclwL: // global
           Hp = Hp - 104;
           _scj09::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cclvq_info;
           R3 = _scj09::P64;
           R2 = GHC.Unicode.isDigit_closure+1;
           Sp = Sp + 16;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclvj_info" {
     block_cclvj_info:
         const _cclvj;
         const 3;
         const 98784247838;
         const Scjc4_srt+928;
 },
 _cclvq() //  [R1, R2]
         { []
         }
     {offset
       cclvq: // global
           I64[Sp - 8] = block_cclvs_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclx6; else goto cclvt;
       uclx6: // global
           call _cclvs(R1) args: 0, res: 0, upd: 0;
       cclvt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclvq_info" {
     block_cclvq_info:
         const _cclvq;
         const 1;
         const 30064771102;
         const Scjc4_srt+928;
 },
 _cclvs() //  [R1]
         { []
         }
     {offset
       cclvs: // global
           _sciVp::P64 = P64[Sp + 16];
           _scj0k::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cclwQ; else goto cclwV;
       cclwQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cclwT; else goto cclwS;
       cclwT: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclwS: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = lvl46_rcccM_closure+1;
           P64[Hp - 8] = _scj0k::P64;
           P64[Hp] = _sciVp::P64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cclwV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cclwY; else goto cclwX;
       cclwY: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cclwX: // global
           I64[Hp - 48] = sat_scj0v_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = _scj0k::P64;
           P64[Hp] = _sciVp::P64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclvs_info" {
     block_cclvs_info:
         const _cclvs;
         const 2;
         const 30064771102;
         const Scjc4_srt+928;
 },
 ds4_scj0I_entry() //  [R1]
         { []
         }
     {offset
       cclxf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cclxg; else goto cclxh;
       cclxg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclxh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cclxc_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uclxF; else goto cclxd;
       uclxF: // global
           call _cclxc(R1) args: 0, res: 0, upd: 0;
       cclxd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_scj0I_info" {
     ds4_scj0I_info:
         const ds4_scj0I_entry;
         const 1;
         const 4294967312;
         const Scjc4_srt+952;
 },
 _cclxc() //  [R1]
         { []
         }
     {offset
       cclxc: // global
           I64[Sp - 8] = block_cclxk_info;
           _scj0L::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp] = _scj0L::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclxE; else goto cclxm;
       uclxE: // global
           call _cclxk(R1) args: 0, res: 0, upd: 0;
       cclxm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclxc_info" {
     block_cclxc_info:
         const _cclxc;
         const 0;
         const 4294967326;
         const Scjc4_srt+952;
 },
 _cclxk() //  [R1]
         { []
         }
     {offset
       cclxk: // global
           if (R1 & 7 == 1) goto cclxs; else goto cclxx;
       cclxs: // global
           R1 = Text.Printf.errorMissingArgument_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cclxx: // global
           I64[Sp] = block_cclxv_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uclxG; else goto cclxy;
       uclxG: // global
           call _cclxv(R1) args: 0, res: 0, upd: 0;
       cclxy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cclxk_info" {
     block_cclxk_info:
         const _cclxk;
         const 1;
         const 4294967326;
         const Scjc4_srt+952;
 },
 _cclxv() //  [R1]
         { []
         }
     {offset
       cclxv: // global
           R2 = P64[Sp + 8];
           R1 = P64[R1 + 7];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclxv_info" {
     block_cclxv_info:
         const _cclxv;
         const 1;
         const 30;
 },
 sat_scj11_entry() //  [R1]
         { []
         }
     {offset
       cclxW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cclxX; else goto cclxY;
       cclxX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclxY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cclxP_info;
           _sciVl::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sciVl::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uclyj; else goto cclxQ;
       uclyj: // global
           call _cclxP(R1) args: 0, res: 0, upd: 0;
       cclxQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scj11_info" {
     sat_scj11_info:
         const sat_scj11_entry;
         const 2;
         const 18;
 },
 _cclxP() //  [R1]
         { []
         }
     {offset
       cclxP: // global
           if (R1 & 7 == 1) goto cclxT; else goto cclxU;
       cclxT: // global
           _sciVl::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccly1_info;
           R1 = _sciVl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uclyi; else goto ccly3;
       uclyi: // global
           call _ccly1(R1) args: 0, res: 0, upd: 0;
       ccly3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cclxU: // global
           R1 = lvl47_rcccN_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cclxP_info" {
     block_cclxP_info:
         const _cclxP;
         const 1;
         const 30;
 },
 _ccly1() //  [R1]
         { []
         }
     {offset
       ccly1: // global
           if (R1 & 7 == 1) goto ccly9; else goto cclyd;
       ccly9: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cclyd: // global
           R1 = lvl48_rcccO_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccly1_info" {
     block_ccly1_info:
         const _ccly1;
         const 0;
         const 30;
 },
 section ""relreadonly" . uclz7_srtd" {
     uclz7_srtd:
         const Scjc4_srt+448;
         const 69;
         const 17293822569102704641;
         const 31;
 },
 $wgetSpecs_rcccV_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cclyo: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cclyp; else goto uclyT;
       cclyp: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wgetSpecs_rcccV_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       uclyT: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call _cclhQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wgetSpecs_rcccV_info" {
     $wgetSpecs_rcccV_info:
         const $wgetSpecs_rcccV_entry;
         const 0;
         const 18446744069414584334;
         const 25769803802;
         const uclz7_srtd;
 },
 _cclhQ() //  []
         { []
         }
     {offset
       cclhQ: // global
           I64[Sp - 8] = block_cclhT_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclyZ; else goto cclhU;
       uclyZ: // global
           call _cclhT(R1) args: 0, res: 0, upd: 0;
       cclhU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . uclz8_srtd" {
     uclz8_srtd:
         const Scjc4_srt+448;
         const 68;
         const 17293822569102704641;
         const 15;
 },
 _cclhT() //  [R1]
         { []
         }
     {offset
       cclhT: // global
           if (R1 & 7 == 1) goto cclyl; else goto cclym;
       cclyl: // global
           R1 = Text.Printf.errorShortFormat_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cclym: // global
           I64[Sp - 8] = block_cclhZ_info;
           _sciVq::P64 = R1;
           _sciVt::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sciVt::P64;
           P64[Sp + 40] = _sciVq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclz0; else goto ccli0;
       uclz0: // global
           call _cclhZ(R1) args: 0, res: 0, upd: 0;
       ccli0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cclhT_info" {
     block_cclhT_info:
         const _cclhT;
         const 1030;
         const 18446744069414584350;
         const uclz8_srtd;
 },
 section ""relreadonly" . uclz9_srtd" {
     uclz9_srtd:
         const Scjc4_srt+448;
         const 68;
         const 17293822569102704641;
         const 15;
 },
 _cclhZ() //  [R1]
         { []
         }
     {offset
       cclhZ: // global
           Hp = Hp + 344;
           if (Hp > HpLim) (likely: False) goto cclyw; else goto cclyv;
       cclyw: // global
           HpAlloc = 344;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cclyv: // global
           _sciVk::P64 = P64[Sp + 16];
           _sciVl::P64 = P64[Sp + 24];
           _sciVm::P64 = P64[Sp + 32];
           _sciVn::P64 = P64[Sp + 40];
           _sciVp::P64 = P64[Sp + 56];
           _sciVq::P64 = P64[Sp + 48];
           _sciVw::I64 = I64[R1 + 7];
           if (_sciVw::I64 >= 49) goto cclyE; else goto uclyR;
       uclyR: // global
           if (_sciVw::I64 < 32) goto cclyE; else goto uclyS;
       uclyS: // global
           _sciVt::P64 = P64[Sp + 8];
           switch [32 .. 48] _sciVw::I64 {
               case 32 : goto cclyF;
               case 35 : goto cclyG;
               case 42 : goto cclyJ;
               case 43 : goto cclyK;
               case 45 : goto cclyL;
               case 46 : goto cclyP;
               case 48 : goto cclyQ;
               default: {goto cclyE;}
           }
       cclyQ: // global
           Hp = Hp - 344;
           P64[Sp + 16] = _sciVk::P64;
           P64[Sp + 24] = GHC.Types.True_closure+2;
           P64[Sp + 32] = _sciVm::P64;
           P64[Sp + 40] = _sciVn::P64;
           P64[Sp + 48] = _sciVt::P64;
           P64[Sp + 56] = _sciVp::P64;
           Sp = Sp + 16;
           goto uclz5;
       cclyP: // global
           I64[Hp - 336] = ds3_scj08_info;
           P64[Hp - 320] = _sciVp::P64;
           P64[Hp - 312] = _sciVt::P64;
           I64[Hp - 304] = ds4_scj0I_info;
           _cclv9::P64 = Hp - 336;
           P64[Hp - 288] = _cclv9::P64;
           I64[Hp - 280] = stg_sel_2_upd_info;
           P64[Hp - 264] = _cclv9::P64;
           I64[Hp - 256] = stg_sel_2_upd_info;
           _cclx8::P64 = Hp - 304;
           P64[Hp - 240] = _cclx8::P64;
           I64[Hp - 232] = stg_sel_1_upd_info;
           P64[Hp - 216] = _cclx8::P64;
           I64[Hp - 208] = stg_sel_0_upd_info;
           P64[Hp - 192] = _cclx8::P64;
           I64[Hp - 184] = sat_scj11_info;
           P64[Hp - 168] = _sciVk::P64;
           P64[Hp - 160] = _sciVl::P64;
           I64[Hp - 152] = stg_sel_0_upd_info;
           P64[Hp - 136] = _cclv9::P64;
           I64[Hp - 128] = GHC.Base.Just_con_info;
           P64[Hp - 120] = Hp - 152;
           I64[Hp - 112] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 104] = GHC.Base.Nothing_closure+1;
           P64[Hp - 96] = Hp - 126;
           P64[Hp - 88] = Hp - 184;
           P64[Hp - 80] = _sciVm::P64;
           P64[Hp - 72] = _sciVn::P64;
           P64[Hp - 64] = Hp - 208;
           P64[Hp - 56] = Hp - 232;
           _cclxH::P64 = Hp - 280;
           _cclxI::P64 = Hp - 256;
           _cclyO::P64 = Hp - 111;
           Hp = Hp - 56;
           R3 = _cclxH::P64;
           R2 = _cclxI::P64;
           R1 = _cclyO::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       cclyL: // global
           Hp = Hp - 344;
           P64[Sp + 16] = GHC.Types.True_closure+2;
           P64[Sp + 24] = _sciVl::P64;
           P64[Sp + 32] = _sciVm::P64;
           P64[Sp + 40] = _sciVn::P64;
           P64[Sp + 48] = _sciVt::P64;
           P64[Sp + 56] = _sciVp::P64;
           Sp = Sp + 16;
           goto uclz5;
       cclyK: // global
           Hp = Hp - 344;
           P64[Sp + 16] = _sciVk::P64;
           P64[Sp + 24] = _sciVl::P64;
           P64[Sp + 32] = lvl50_rcccQ_closure+2;
           P64[Sp + 40] = _sciVn::P64;
           P64[Sp + 48] = _sciVt::P64;
           P64[Sp + 56] = _sciVp::P64;
           Sp = Sp + 16;
           goto uclz5;
       cclyJ: // global
           I64[Hp - 336] = ds3_sciY4_info;
           P64[Hp - 320] = _sciVp::P64;
           I64[Hp - 312] = ds4_sciY8_info;
           P64[Hp - 296] = _sciVt::P64;
           _cclpZ::P64 = Hp - 336;
           P64[Hp - 288] = _cclpZ::P64;
           I64[Hp - 280] = ds5_sciZf_info;
           _cclqc::P64 = Hp - 312;
           P64[Hp - 264] = _cclqc::P64;
           I64[Hp - 256] = stg_sel_2_upd_info;
           P64[Hp - 240] = _cclqc::P64;
           I64[Hp - 232] = stg_sel_2_upd_info;
           _cclsY::P64 = Hp - 280;
           P64[Hp - 216] = _cclsY::P64;
           I64[Hp - 208] = stg_sel_1_upd_info;
           P64[Hp - 192] = _cclsY::P64;
           I64[Hp - 184] = stg_sel_0_upd_info;
           P64[Hp - 168] = _cclsY::P64;
           I64[Hp - 160] = sat_sciZM_info;
           P64[Hp - 144] = _sciVk::P64;
           P64[Hp - 136] = _sciVl::P64;
           P64[Hp - 128] = _cclpZ::P64;
           I64[Hp - 120] = stg_sel_0_upd_info;
           P64[Hp - 104] = _cclqc::P64;
           I64[Hp - 96] = sat_sciZx_info;
           P64[Hp - 80] = _cclpZ::P64;
           I64[Hp - 72] = GHC.Base.Just_con_info;
           P64[Hp - 64] = Hp - 96;
           I64[Hp - 56] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 48] = Hp - 70;
           P64[Hp - 40] = Hp - 120;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = _sciVm::P64;
           P64[Hp - 16] = _sciVn::P64;
           P64[Hp - 8] = Hp - 184;
           P64[Hp] = Hp - 208;
           R3 = Hp - 256;
           R2 = Hp - 232;
           R1 = Hp - 55;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       cclyG: // global
           Hp = Hp - 344;
           P64[Sp + 16] = _sciVk::P64;
           P64[Sp + 24] = _sciVl::P64;
           P64[Sp + 32] = _sciVm::P64;
           P64[Sp + 40] = GHC.Types.True_closure+2;
           P64[Sp + 48] = _sciVt::P64;
           P64[Sp + 56] = _sciVp::P64;
           Sp = Sp + 16;
           goto uclz5;
       cclyF: // global
           I64[Hp - 336] = sat_sciY3_info;
           P64[Hp - 320] = _sciVm::P64;
           _ccli7::P64 = Hp - 336;
           Hp = Hp - 320;
           P64[Sp + 16] = _sciVk::P64;
           P64[Sp + 24] = _sciVl::P64;
           P64[Sp + 32] = _ccli7::P64;
           P64[Sp + 40] = _sciVn::P64;
           P64[Sp + 48] = _sciVt::P64;
           P64[Sp + 56] = _sciVp::P64;
           Sp = Sp + 16;
           goto uclz5;
       uclz5: // global
           call _cclhQ() args: 0, res: 0, upd: 0;
       cclyE: // global
           if ((_sciVw::I64 + -48) > 9) goto cclyz; else goto cclyC;
       cclyz: // global
           I64[Hp - 336] = ds3_sciVB_info;
           P64[Hp - 320] = _sciVp::P64;
           P64[Hp - 312] = _sciVq::P64;
           I64[Hp - 304] = stg_sel_2_upd_info;
           _cclik::P64 = Hp - 336;
           P64[Hp - 288] = _cclik::P64;
           I64[Hp - 280] = stg_sel_1_upd_info;
           P64[Hp - 264] = _cclik::P64;
           I64[Hp - 256] = stg_sel_0_upd_info;
           P64[Hp - 240] = _cclik::P64;
           I64[Hp - 232] = sat_sciVK_info;
           P64[Hp - 216] = _sciVk::P64;
           P64[Hp - 208] = _sciVl::P64;
           I64[Hp - 200] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 192] = GHC.Base.Nothing_closure+1;
           P64[Hp - 184] = GHC.Base.Nothing_closure+1;
           P64[Hp - 176] = Hp - 232;
           P64[Hp - 168] = _sciVm::P64;
           P64[Hp - 160] = _sciVn::P64;
           P64[Hp - 152] = Hp - 256;
           P64[Hp - 144] = Hp - 280;
           _ccliM::P64 = Hp - 304;
           _cclyx::P64 = Hp - 199;
           Hp = Hp - 144;
           R3 = _sciVp::P64;
           R2 = _ccliM::P64;
           R1 = _cclyx::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       cclyC: // global
           I64[Hp - 336] = ds3_sciW1_info;
           P64[Hp - 320] = _sciVq::P64;
           I64[Hp - 312] = ds4_sciWg_info;
           P64[Hp - 296] = _sciVp::P64;
           _ccljp::P64 = Hp - 336;
           P64[Hp - 288] = _ccljp::P64;
           I64[Hp - 280] = ds5_sciX7_info;
           _cclkv::P64 = Hp - 312;
           P64[Hp - 264] = _cclkv::P64;
           I64[Hp - 256] = stg_sel_2_upd_info;
           P64[Hp - 240] = _cclkv::P64;
           I64[Hp - 232] = stg_sel_2_upd_info;
           _cclnd::P64 = Hp - 280;
           P64[Hp - 216] = _cclnd::P64;
           I64[Hp - 208] = stg_sel_1_upd_info;
           P64[Hp - 192] = _cclnd::P64;
           I64[Hp - 184] = stg_sel_0_upd_info;
           P64[Hp - 168] = _cclnd::P64;
           I64[Hp - 160] = sat_sciXE_info;
           P64[Hp - 144] = _sciVk::P64;
           P64[Hp - 136] = _sciVl::P64;
           P64[Hp - 128] = _ccljp::P64;
           I64[Hp - 120] = stg_sel_0_upd_info;
           P64[Hp - 104] = _cclkv::P64;
           I64[Hp - 96] = sat_sciXp_info;
           P64[Hp - 80] = _ccljp::P64;
           I64[Hp - 72] = GHC.Base.Just_con_info;
           P64[Hp - 64] = Hp - 96;
           I64[Hp - 56] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 48] = Hp - 70;
           P64[Hp - 40] = Hp - 120;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = _sciVm::P64;
           P64[Hp - 16] = _sciVn::P64;
           P64[Hp - 8] = Hp - 184;
           P64[Hp] = Hp - 208;
           R3 = Hp - 256;
           R2 = Hp - 232;
           R1 = Hp - 55;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cclhZ_info" {
     block_cclhZ_info:
         const _cclhZ;
         const 7;
         const 18446744069414584350;
         const uclz9_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.798261509 UTC

[section ""data" . f_rcccW_closure" {
     f_rcccW_closure:
         const GHC.Types.C#_con_info;
         const 37;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.80638619 UTC

[section ""data" . Text.Printf.uprintfs_closure" {
     Text.Printf.uprintfs_closure:
         const Text.Printf.uprintfs_info;
         const 0;
 },
 sat_scj1A_entry() //  [R1]
         { []
         }
     {offset
       cclMi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cclMj; else goto cclMk;
       cclMj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclMk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 16;
           call Text.Printf.uprintfs_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scj1A_info" {
     sat_scj1A_info:
         const sat_scj1A_entry;
         const 3;
         const 4294967311;
         const Scjc4_srt+1000;
 },
 sat_scj1S_entry() //  [R1]
         { []
         }
     {offset
       cclMO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cclMP; else goto cclMQ;
       cclMP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclMQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.Printf.uprintfs_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scj1S_info" {
     sat_scj1S_info:
         const sat_scj1S_entry;
         const 3;
         const 4294967311;
         const Scjc4_srt+1000;
 },
 sat_scj1Z_entry() //  [R1]
         { []
         }
     {offset
       cclN9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cclNa; else goto cclNb;
       cclNa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclNb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 16;
           call Text.Printf.uprintfs_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scj1Z_info" {
     sat_scj1Z_info:
         const sat_scj1Z_entry;
         const 3;
         const 4294967311;
         const Scjc4_srt+1000;
 },
 section ""relreadonly" . uclOt_srtd" {
     uclOt_srtd:
         const Scjc4_srt+448;
         const 70;
         const 9223372036854775809;
         const 48;
 },
 Text.Printf.uprintfs_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cclNg: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cclNh; else goto cclNi;
       cclNh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.uprintfs_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cclNi: // global
           I64[Sp - 24] = block_cclM1_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uclOr; else goto cclM2;
       uclOr: // global
           call _cclM1(R1) args: 0, res: 0, upd: 0;
       cclM2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.uprintfs_info" {
     Text.Printf.uprintfs_info:
         const Text.Printf.uprintfs_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const uclOt_srtd;
 },
 section ""relreadonly" . uclOu_srtd" {
     uclOu_srtd:
         const Scjc4_srt+448;
         const 70;
         const 9223372036854775809;
         const 48;
 },
 _cclM1() //  [R1]
         { []
         }
     {offset
       cclM1: // global
           if (R1 & 7 == 1) goto cclNd; else goto cclNe;
       cclNd: // global
           _scj1o::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cclNk_info;
           R1 = _scj1o::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uclOh; else goto cclNm;
       uclOh: // global
           call _cclNk(R1) args: 0, res: 0, upd: 0;
       cclNm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cclNe: // global
           I64[Sp - 8] = block_cclM7_info;
           _scj1w::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scj1w::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclOi; else goto cclM8;
       uclOi: // global
           call _cclM7(R1) args: 0, res: 0, upd: 0;
       cclM8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cclM1_info" {
     block_cclM1_info:
         const _cclM1;
         const 2;
         const 18446744069414584350;
         const uclOu_srtd;
 },
 _cclNk() //  [R1]
         { []
         }
     {offset
       cclNk: // global
           if (R1 & 7 == 1) goto cclNs; else goto cclNw;
       cclNs: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cclNw: // global
           R1 = Text.Printf.errorShortFormat_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cclNk_info" {
     block_cclNk_info:
         const _cclNk;
         const 1;
         const 4294967326;
         const Scjc4_srt+1008;
 },
 _cclM7() //  [R1]
         { []
         }
     {offset
       cclM7: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cclNA; else goto cclNz;
       cclNA: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cclNz: // global
           _scj1w::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 37) goto cclNV; else goto cclND;
       cclNV: // global
           Hp = Hp - 64;
           I64[Sp] = block_cclMR_info;
           R1 = _scj1w::P64;
           if (R1 & 7 != 0) goto uclOj; else goto cclMS;
       uclOj: // global
           call _cclMR(R1) args: 0, res: 0, upd: 0;
       cclMS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cclND: // global
           I64[Hp - 56] = sat_scj1A_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = _scj1w::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cclM7_info" {
     block_cclM7_info:
         const _cclM7;
         const 3;
         const 416611827742;
         const Scjc4_srt+952;
 },
 _cclMR() //  [R1]
         { []
         }
     {offset
       cclMR: // global
           if (R1 & 7 == 1) goto uclOd; else goto cclO1;
       uclOd: // global
           Sp = Sp + 8;
           call _scj1B() args: 0, res: 0, upd: 0;
       cclO1: // global
           I64[Sp - 8] = block_cclMX_info;
           _scj1V::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scj1V::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclOo; else goto cclMY;
       uclOo: // global
           call _cclMX(R1) args: 0, res: 0, upd: 0;
       cclMY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cclMR_info" {
     block_cclMR_info:
         const _cclMR;
         const 3;
         const 416611827742;
         const Scjc4_srt+952;
 },
 _cclMX() //  [R1]
         { []
         }
     {offset
       cclMX: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cclO4; else goto cclO3;
       cclO4: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cclO3: // global
           if (I64[R1 + 7] == 37) goto cclO8; else goto cclO6;
       cclO8: // global
           I64[Hp - 56] = sat_scj1Z_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = f_rcccW_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cclO6: // global
           Hp = Hp - 64;
           Sp = Sp + 16;
           call _scj1B() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cclMX_info" {
     block_cclMX_info:
         const _cclMX;
         const 4;
         const 416611827742;
         const Scjc4_srt+952;
 },
 _scj1B() //  []
         { []
         }
     {offset
       scj1B: // global
           I64[Sp - 8] = block_cclMr_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclOs; else goto cclMs;
       uclOs: // global
           call _cclMr(R1) args: 0, res: 0, upd: 0;
       cclMs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cclMr() //  [R1]
         { []
         }
     {offset
       cclMr: // global
           if (R1 & 7 == 1) goto uclOf; else goto cclNK;
       uclOf: // global
           Sp = Sp + 32;
           call _cclNP() args: 0, res: 0, upd: 0;
       cclNK: // global
           I64[Sp + 16] = block_cclMx_info;
           R6 = P64[Sp + 8];
           R5 = GHC.Types.False_closure+1;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = GHC.Types.False_closure+1;
           R2 = GHC.Types.False_closure+1;
           P64[Sp + 8] = R1;
           Sp = Sp + 8;
           call $wgetSpecs_rcccV_entry(R6,
                                       R5,
                                       R4,
                                       R3,
                                       R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cclMr_info" {
     block_cclMr_info:
         const _cclMr;
         const 131;
         const 416611827742;
         const Scjc4_srt+952;
 },
 _cclMx() //  [R1, R2, R3]
         { []
         }
     {offset
       cclMx: // global
           I64[Sp - 16] = block_cclMz_info;
           _scj1I::P64 = R1;
           R1 = R3;
           P64[Sp - 8] = R2;
           P64[Sp] = _scj1I::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uclOl; else goto cclMA;
       uclOl: // global
           call _cclMz(R1) args: 0, res: 0, upd: 0;
       cclMA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cclMx_info" {
     block_cclMx_info:
         const _cclMx;
         const 1;
         const 279172874270;
         const Scjc4_srt+952;
 },
 _cclMz() //  [R1]
         { []
         }
     {offset
       cclMz: // global
           if (R1 & 7 == 1) goto uclOg; else goto cclNR;
       uclOg: // global
           Sp = Sp + 32;
           call _cclNP() args: 0, res: 0, upd: 0;
       cclNR: // global
           I64[Sp - 8] = block_cclMF_info;
           _scj1O::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scj1O::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uclOm; else goto cclMG;
       uclOm: // global
           call _cclMF(R1) args: 0, res: 0, upd: 0;
       cclMG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cclMz_info" {
     block_cclMz_info:
         const _cclMz;
         const 3;
         const 279172874270;
         const Scjc4_srt+952;
 },
 _cclNP() //  []
         { []
         }
     {offset
       cclNP: // global
           R1 = Text.Printf.errorMissingArgument_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cclMF() //  [R1]
         { []
         }
     {offset
       cclMF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cclNU; else goto cclNT;
       cclNU: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cclNT: // global
           _scj1R::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_scj1S_info;
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 32;
           R2 = P64[Sp + 24];
           R1 = _scj1R::P64;
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cclMF_info" {
     block_cclMF_info:
         const _cclMF;
         const 4;
         const 4294967326;
         const Scjc4_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.836439004 UTC

[section ""data" . Text.Printf.$fPrintfTypeIO_$cspr_closure" {
     Text.Printf.$fPrintfTypeIO_$cspr_closure:
         const Text.Printf.$fPrintfTypeIO_$cspr_info;
         const 0;
 },
 sat_scj23_entry() //  [R1]
         { []
         }
     {offset
       cclQp: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scj23_info" {
     sat_scj23_info:
         const sat_scj23_entry;
         const 1;
         const 16;
 },
 sat_scj24_entry() //  [R1]
         { []
         }
     {offset
       cclQs: // global
           _scj24::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cclQt; else goto cclQu;
       cclQu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cclQw; else goto cclQv;
       cclQw: // global
           HpAlloc = 24;
           goto cclQt;
       cclQt: // global
           R1 = _scj24::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclQv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scj24::P64;
           _scj21::P64 = P64[_scj24::P64 + 16];
           _scj22::P64 = P64[_scj24::P64 + 24];
           I64[Hp - 16] = sat_scj23_info;
           P64[Hp] = _scj22::P64;
           R4 = GHC.Types.[]_closure+1;
           R3 = Hp - 16;
           R2 = _scj21::P64;
           Sp = Sp - 16;
           call Text.Printf.uprintfs_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scj24_info" {
     sat_scj24_info:
         const sat_scj24_entry;
         const 2;
         const 4294967314;
         const Scjc4_srt+1000;
 },
 Text.Printf.$fPrintfTypeIO_$cspr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cclQx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cclQy; else goto cclQz;
       cclQy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fPrintfTypeIO_$cspr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cclQz: // global
           I64[Sp - 24] = block_cclQf_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfTypeIO_$cspr_info" {
     Text.Printf.$fPrintfTypeIO_$cspr_info:
         const Text.Printf.$fPrintfTypeIO_$cspr_entry;
         const 0;
         const 124554051598;
         const 12884901911;
         const Scjc4_srt+1000;
 },
 _cclQf() //  []
         { []
         }
     {offset
       cclQf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cclQC; else goto cclQB;
       cclQC: // global
           HpAlloc = 32;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cclQB: // global
           I64[Hp - 24] = sat_scj24_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R4 = GHC.Types.False_closure+1;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.FD.stdout_closure;
           R1 = GHC.IO.Handle.Text.hPutStr'_closure+4;
           Sp = Sp + 24;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cclQf_info" {
     block_cclQf_info:
         const _cclQf;
         const 2;
         const 55834574878;
         const Scjc4_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.84512474 UTC

[section ""data" . Text.Printf.$fPrintfTypeIO_closure" {
     Text.Printf.$fPrintfTypeIO_closure:
         const Text.Printf.$fPrintfTypeIO_info;
         const 0;
 },
 Text.Printf.$fPrintfTypeIO_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cclR6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Printf.$fPrintfTypeIO_$cspr_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfTypeIO_info" {
     Text.Printf.$fPrintfTypeIO_info:
         const Text.Printf.$fPrintfTypeIO_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const Scjc4_srt+1032;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.850830038 UTC

[section ""data" . Text.Printf.$fPrintfType[]_$cspr_closure" {
     Text.Printf.$fPrintfType[]_$cspr_closure:
         const Text.Printf.$fPrintfType[]_$cspr_info;
         const 0;
 },
 sat_scj29_entry() //  [R1]
         { []
         }
     {offset
       cclRl: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scj29_info" {
     sat_scj29_info:
         const sat_scj29_entry;
         const 1;
         const 16;
 },
 sat_scj28_entry() //  [R1]
         { []
         }
     {offset
       cclRw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cclRx; else goto cclRy;
       cclRx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclRy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Printf.fromChar_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scj28_info" {
     sat_scj28_info:
         const sat_scj28_entry;
         const 1;
         const 16;
 },
 Text.Printf.$fPrintfType[]_$cspr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cclRz: // global
           _scj27::P64 = R4;
           _scj26::P64 = R3;
           _scj25::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cclRA; else goto cclRB;
       cclRB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cclRD; else goto cclRC;
       cclRD: // global
           HpAlloc = 24;
           goto cclRA;
       cclRA: // global
           R4 = _scj27::P64;
           R3 = _scj26::P64;
           R2 = _scj25::P64;
           R1 = Text.Printf.$fPrintfType[]_$cspr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cclRC: // global
           I64[Hp - 16] = sat_scj29_info;
           P64[Hp] = _scj27::P64;
           I64[Sp - 16] = block_cclRo_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = Hp - 16;
           R2 = _scj26::P64;
           P64[Sp - 8] = _scj25::P64;
           Sp = Sp - 16;
           call Text.Printf.uprintfs_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfType[]_$cspr_info" {
     Text.Printf.$fPrintfType[]_$cspr_info:
         const Text.Printf.$fPrintfType[]_$cspr_entry;
         const 0;
         const 141733920782;
         const 12884901911;
         const Scjc4_srt+1000;
 },
 _cclRo() //  [R1]
         { []
         }
     {offset
       cclRo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cclRG; else goto cclRF;
       cclRG: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cclRF: // global
           I64[Hp - 16] = sat_scj28_info;
           P64[Hp] = P64[Sp + 8];
           R3 = R1;
           R2 = Hp - 16;
           Sp = Sp + 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cclRo_info" {
     block_cclRo_info:
         const _cclRo;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.859359533 UTC

[section ""data" . Text.Printf.$fPrintfType[]_closure" {
     Text.Printf.$fPrintfType[]_closure:
         const Text.Printf.$fPrintfType[]_info;
         const 0;
 },
 Text.Printf.$fPrintfType[]_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cclS7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Printf.$fPrintfType[]_$cspr_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fPrintfType[]_info" {
     Text.Printf.$fPrintfType[]_info:
         const Text.Printf.$fPrintfType[]_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const Scjc4_srt+1040;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.8643365 UTC

[section ""data" . Text.Printf.$fHPrintfTypeIO_$chspr_closure" {
     Text.Printf.$fHPrintfTypeIO_$chspr_closure:
         const Text.Printf.$fHPrintfTypeIO_$chspr_info;
         const 0;
 },
 sat_scj2f_entry() //  [R1]
         { []
         }
     {offset
       cclSs: // global
           R2 = P64[R1 + 16];
           call GHC.List.reverse_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scj2f_info" {
     sat_scj2f_info:
         const sat_scj2f_entry;
         const 1;
         const 16;
 },
 sat_scj2g_entry() //  [R1]
         { []
         }
     {offset
       cclSv: // global
           _scj2g::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cclSw; else goto cclSx;
       cclSx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cclSz; else goto cclSy;
       cclSz: // global
           HpAlloc = 24;
           goto cclSw;
       cclSw: // global
           R1 = _scj2g::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cclSy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scj2g::P64;
           _scj2d::P64 = P64[_scj2g::P64 + 16];
           _scj2e::P64 = P64[_scj2g::P64 + 24];
           I64[Hp - 16] = sat_scj2f_info;
           P64[Hp] = _scj2e::P64;
           R4 = GHC.Types.[]_closure+1;
           R3 = Hp - 16;
           R2 = _scj2d::P64;
           Sp = Sp - 16;
           call Text.Printf.uprintfs_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scj2g_info" {
     sat_scj2g_info:
         const sat_scj2g_entry;
         const 2;
         const 4294967314;
         const Scjc4_srt+1000;
 },
 Text.Printf.$fHPrintfTypeIO_$chspr_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cclSA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cclSB; else goto cclSC;
       cclSB: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.$fHPrintfTypeIO_$chspr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cclSC: // global
           I64[Sp - 32] = block_cclSi_info;
           R2 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fHPrintfTypeIO_$chspr_info" {
     Text.Printf.$fHPrintfTypeIO_$chspr_info:
         const Text.Printf.$fHPrintfTypeIO_$chspr_entry;
         const 0;
         const 313532612622;
         const 17179869208;
         const Scjc4_srt+1000;
 },
 _cclSi() //  []
         { []
         }
     {offset
       cclSi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cclSF; else goto cclSE;
       cclSF: // global
           HpAlloc = 32;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cclSE: // global
           I64[Hp - 24] = sat_scj2g_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R4 = GHC.Types.False_closure+1;
           R3 = Hp - 24;
           R2 = P64[Sp + 8];
           R1 = GHC.IO.Handle.Text.hPutStr'_closure+4;
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cclSi_info" {
     block_cclSi_info:
         const _cclSi;
         const 3;
         const 38654705694;
         const Scjc4_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.873140865 UTC

[section ""data" . Text.Printf.$fHPrintfTypeIO_closure" {
     Text.Printf.$fHPrintfTypeIO_closure:
         const Text.Printf.$fHPrintfTypeIO_info;
         const 0;
 },
 Text.Printf.$fHPrintfTypeIO_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cclT8: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Printf.$fHPrintfTypeIO_$chspr_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.$fHPrintfTypeIO_info" {
     Text.Printf.$fHPrintfTypeIO_info:
         const Text.Printf.$fHPrintfTypeIO_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const Scjc4_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.877164882 UTC

[section ""data" . Text.Printf.FormatParse_closure" {
     Text.Printf.FormatParse_closure:
         const Text.Printf.FormatParse_info;
 },
 Text.Printf.FormatParse_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cclTk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cclTo; else goto cclTn;
       cclTo: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.FormatParse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cclTn: // global
           I64[Hp - 24] = Text.Printf.FormatParse_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.FormatParse_info" {
     Text.Printf.FormatParse_info:
         const Text.Printf.FormatParse_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.881543954 UTC

[section ""data" . Text.Printf.FieldFormat_closure" {
     Text.Printf.FieldFormat_closure:
         const Text.Printf.FieldFormat_info;
 },
 Text.Printf.FieldFormat_slow() //  [R1]
         { []
         }
     {offset
       cclTw: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Text.Printf.FieldFormat_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 24, res: 0, upd: 8;
     }
 },
 Text.Printf.FieldFormat_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cclTB: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cclTF; else goto cclTE;
       cclTF: // global
           HpAlloc = 64;
           R1 = Text.Printf.FieldFormat_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cclTE: // global
           I64[Hp - 56] = Text.Printf.FieldFormat_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.FieldFormat_info" {
     Text.Printf.FieldFormat_info:
         const Text.Printf.FieldFormat_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Text.Printf.FieldFormat_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.886910933 UTC

[section ""data" . Text.Printf.SignPlus_closure" {
     Text.Printf.SignPlus_closure:
         const Text.Printf.SignPlus_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.888606442 UTC

[section ""data" . Text.Printf.SignSpace_closure" {
     Text.Printf.SignSpace_closure:
         const Text.Printf.SignSpace_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.890296143 UTC

[section ""data" . Text.Printf.LeftAdjust_closure" {
     Text.Printf.LeftAdjust_closure:
         const Text.Printf.LeftAdjust_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.891912798 UTC

[section ""data" . Text.Printf.ZeroPad_closure" {
     Text.Printf.ZeroPad_closure:
         const Text.Printf.ZeroPad_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.894151545 UTC

[section ""data" . Text.Printf.C:IsChar_closure" {
     Text.Printf.C:IsChar_closure:
         const Text.Printf.C:IsChar_info;
 },
 Text.Printf.C:IsChar_entry() //  [R2, R3]
         { []
         }
     {offset
       cclTZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cclU3; else goto cclU2;
       cclU3: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.C:IsChar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cclU2: // global
           I64[Hp - 16] = Text.Printf.C:IsChar_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.C:IsChar_info" {
     Text.Printf.C:IsChar_info:
         const Text.Printf.C:IsChar_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.89796992 UTC

[section ""data" . Text.Printf.C:PrintfArg_closure" {
     Text.Printf.C:PrintfArg_closure:
         const Text.Printf.C:PrintfArg_info;
 },
 Text.Printf.C:PrintfArg_entry() //  [R2, R3]
         { []
         }
     {offset
       cclUf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cclUj; else goto cclUi;
       cclUj: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.Printf.C:PrintfArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cclUi: // global
           I64[Hp - 16] = Text.Printf.C:PrintfArg_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.C:PrintfArg_info" {
     Text.Printf.C:PrintfArg_info:
         const Text.Printf.C:PrintfArg_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.901647607 UTC

[section ""cstring" . iclUr_str" {
     iclUr_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,114,105,110,116,102,46,70,111,114,109,97,116,80,97,114,115,101]
 },
 Text.Printf.FormatParse_con_entry() //  [R1]
         { []
         }
     {offset
       cclUq: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.FormatParse_con_info" {
     Text.Printf.FormatParse_con_info:
         const Text.Printf.FormatParse_con_entry;
         const 3;
         const 1;
         const iclUr_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.904759581 UTC

[section ""cstring" . iclUy_str" {
     iclUy_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,114,105,110,116,102,46,70,105,101,108,100,70,111,114,109,97,116]
 },
 Text.Printf.FieldFormat_con_entry() //  [R1]
         { []
         }
     {offset
       cclUx: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.FieldFormat_con_info" {
     Text.Printf.FieldFormat_con_info:
         const Text.Printf.FieldFormat_con_entry;
         const 7;
         const 1;
         const iclUy_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.907740992 UTC

[section ""relreadonly" . Text.Printf.FormatSign_closure_tbl" {
     Text.Printf.FormatSign_closure_tbl:
         const Text.Printf.SignPlus_closure+1;
         const Text.Printf.SignSpace_closure+2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.909623029 UTC

[section ""cstring" . iclUG_str" {
     iclUG_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,114,105,110,116,102,46,83,105,103,110,80,108,117,115]
 },
 Text.Printf.SignPlus_con_entry() //  [R1]
         { []
         }
     {offset
       cclUF: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.SignPlus_con_info" {
     Text.Printf.SignPlus_con_info:
         const Text.Printf.SignPlus_con_entry;
         const 4294967296;
         const 3;
         const iclUG_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.913958073 UTC

[section ""cstring" . iclUN_str" {
     iclUN_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,114,105,110,116,102,46,83,105,103,110,83,112,97,99,101]
 },
 Text.Printf.SignSpace_con_entry() //  [R1]
         { []
         }
     {offset
       cclUM: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.SignSpace_con_info" {
     Text.Printf.SignSpace_con_info:
         const Text.Printf.SignSpace_con_entry;
         const 4294967296;
         const 4294967299;
         const iclUN_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.916938183 UTC

[section ""relreadonly" . Text.Printf.FormatAdjustment_closure_tbl" {
     Text.Printf.FormatAdjustment_closure_tbl:
         const Text.Printf.LeftAdjust_closure+1;
         const Text.Printf.ZeroPad_closure+2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.918697446 UTC

[section ""cstring" . iclUV_str" {
     iclUV_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,114,105,110,116,102,46,76,101,102,116,65,100,106,117,115,116]
 },
 Text.Printf.LeftAdjust_con_entry() //  [R1]
         { []
         }
     {offset
       cclUU: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.LeftAdjust_con_info" {
     Text.Printf.LeftAdjust_con_info:
         const Text.Printf.LeftAdjust_con_entry;
         const 4294967296;
         const 3;
         const iclUV_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.921895854 UTC

[section ""cstring" . iclV2_str" {
     iclV2_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,114,105,110,116,102,46,90,101,114,111,80,97,100]
 },
 Text.Printf.ZeroPad_con_entry() //  [R1]
         { []
         }
     {offset
       cclV1: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.ZeroPad_con_info" {
     Text.Printf.ZeroPad_con_info:
         const Text.Printf.ZeroPad_con_entry;
         const 4294967296;
         const 4294967299;
         const iclV2_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.925019327 UTC

[section ""cstring" . iclV9_str" {
     iclV9_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,114,105,110,116,102,46,67,58,73,115,67,104,97,114]
 },
 Text.Printf.C:IsChar_con_entry() //  [R1]
         { []
         }
     {offset
       cclV8: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.C:IsChar_con_info" {
     Text.Printf.C:IsChar_con_info:
         const Text.Printf.C:IsChar_con_entry;
         const 2;
         const 4;
         const iclV9_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.928539771 UTC

[section ""cstring" . iclVg_str" {
     iclVg_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,114,105,110,116,102,46,67,58,80,114,105,110,116,102,65,114,103]
 },
 Text.Printf.C:PrintfArg_con_entry() //  [R1]
         { []
         }
     {offset
       cclVf: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Printf.C:PrintfArg_con_info" {
     Text.Printf.C:PrintfArg_con_info:
         const Text.Printf.C:PrintfArg_con_entry;
         const 2;
         const 4;
         const iclVg_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:14.932271728 UTC

[section ""relreadonly" . Scjc4_srt" {
     Scjc4_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.Printf.perror_closure;
         const GHC.Show.$wshowLitChar_closure;
         const GHC.Show.$fShowChar1_closure;
         const Text.Printf.$werrorBadFormat_closure;
         const Text.Printf.errorBadFormat_closure;
         const Text.Printf.errorShortFormat_closure;
         const Text.Printf.$dmparseFormat_closure;
         const GHC.Char.$wlvl_closure;
         const GHC.Unicode.toUpper_closure;
         const GHC.Float.$w$sformatRealFloatAlt_closure;
         const Text.Printf.$w$sdfmt_closure;
         const Text.Printf.$fPrintfArgDouble7_closure;
         const Text.Printf.$fPrintfArgDouble8_closure;
         const GHC.Float.$w$sformatRealFloatAlt1_closure;
         const Text.Printf.$w$sdfmt1_closure;
         const Text.Printf.$fPrintfArgFloat1_closure;
         const GHC.Float.formatRealFloatAlt_closure;
         const Text.Printf.$wdfmt_closure;
         const Text.Printf.formatRealFloat1_closure;
         const sat_sciEX_closure;
         const sat_sciEZ_closure;
         const sat_sciF3_closure;
         const sat_sciF9_closure;
         const Text.Printf.intModifierMap_closure;
         const Text.Printf.$wfixupMods_closure;
         const Text.Printf.$fPrintfArgInt2_closure;
         const Text.Printf.fixupMods_closure;
         const Text.Printf.$wparseIntFormat_closure;
         const GHC.Err.undefined_closure;
         const lvl18_rccch_closure;
         const Control.Exception.Base.patError_closure;
         const sat_sciGy_closure;
         const GHC.Show.intToDigit_closure;
         const GHC.Show.$fShowInteger_closure;
         const GHC.Real.$fIntegralInteger_closure;
         const Numeric.showIntAtBase_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const Text.Printf.formatChar2_closure;
         const lvl21_rccck_closure;
         const lvl20_rcccj_closure;
         const $wfmtu_rcccl_closure;
         const Text.Printf.errorBadArgument_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const $wfmti_rcccm_closure;
         const Text.Printf.$wadjustSigned_closure;
         const Text.Printf.$fPrintfArgDouble1_closure;
         const Text.Printf.$fPrintfArgDouble3_closure;
         const Text.Printf.$w$sformatRealFloat_closure;
         const Text.Printf.$fPrintfArgDouble_$sformatRealFloat_closure;
         const Text.Printf.$w$sformatRealFloat1_closure;
         const Text.Printf.$fPrintfArgFloat_$sformatRealFloat_closure;
         const Text.Printf.$wformatRealFloat_closure;
         const Text.Printf.formatRealFloat_closure;
         const Text.Printf.$fPrintfArgDouble_$cparseFormat_closure;
         const Text.Printf.errorShortFormat_closure;
         const Text.Printf.$fPrintfArgFloat_$cparseFormat_closure;
         const Text.Printf.$w$sformatString_closure;
         const Text.Printf.$werrorBadFormat_closure;
         const Text.Printf.$wformatString_closure;
         const Text.Printf.formatString_closure;
         const lvl22_rcccn_closure;
         const Text.Printf.$fPrintfArg[]_closure;
         const sat_sciM4_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const sat_sciM7_closure;
         const sat_sciM9_closure;
         const sat_sciMb_closure;
         const GHC.Unicode.toUpper_closure;
         const lvl24_rcccp_closure;
         const lvl38_rcccD_closure;
         const lvl39_rcccE_closure;
         const GHC.Char.$wlvl_closure;
         const lvl32_rcccx_closure;
         const lvl40_rcccF_closure;
         const $wfmtu_rcccl_closure;
         const Text.Printf.formatChar2_closure;
         const lvl35_rcccA_closure;
         const lvl41_rcccG_closure;
         const Text.Printf.$wformatIntegral_closure;
         const lvl30_rcccv_closure;
         const lvl31_rcccw_closure;
         const Text.Printf.formatIntegral_closure;
         const Text.Printf.$wformatChar_closure;
         const Text.Printf.formatChar1_closure;
         const Text.Printf.formatChar_closure;
         const Text.Printf.$fPrintfArgInt2_closure;
         const Text.Printf.$w$sformatInt3_closure;
         const Text.Printf.$fPrintfArgWord64_$sformatInt_closure;
         const Text.Printf.$w$sformatInt2_closure;
         const Text.Printf.$fPrintfArgWord32_$sformatInt_closure;
         const Text.Printf.$w$sformatInt1_closure;
         const Text.Printf.$fPrintfArgWord16_$sformatInt_closure;
         const Text.Printf.$w$sformatInt4_closure;
         const Text.Printf.$fPrintfArgWord8_$sformatInt_closure;
         const Text.Printf.$w$sformatInt_closure;
         const Text.Printf.$fPrintfArgWord_$sformatInt_closure;
         const Text.Printf.$fPrintfArgInt1_closure;
         const Text.Printf.$fPrintfArgInt64_$sformatInt_closure;
         const Text.Printf.$fPrintfArgInt4_closure;
         const Text.Printf.$fPrintfArgInt32_$sformatInt_closure;
         const Text.Printf.$fPrintfArgInt3_closure;
         const Text.Printf.$fPrintfArgInt16_$sformatInt_closure;
         const Text.Printf.$fPrintfArgInt5_closure;
         const Text.Printf.$fPrintfArgInt8_$sformatInt_closure;
         const Text.Printf.$fPrintfArgInt_$sformatInt_closure;
         const Text.Printf.$wformatInt_closure;
         const Text.Printf.formatInt_closure;
         const Text.Printf.formatInteger_closure;
         const Text.Printf.$fPrintfArgNatural_$cformatArg_closure;
         const GHC.Read.$fReadInt2_closure;
         const GHC.Read.$fReadInt_$sreadNumber_closure;
         const Text.Read.readEither5_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.Read.readEither2_closure;
         const lvl42_rcccH_closure;
         const lvl44_rcccJ_closure;
         const lvl45_rcccK_closure;
         const Text.Printf.errorMissingArgument_closure;
         const $wgetStar_rcccL_closure;
         const lvl49_rcccP_closure;
         const lvl52_rcccS_closure;
         const lvl53_rcccT_closure;
         const $wgetSpecs_rcccV_closure;
         const Text.Printf.uprintfs_closure;
         const Text.Printf.errorShortFormat_closure;
         const GHC.IO.Handle.FD.stdout_closure;
         const GHC.IO.Handle.Text.hPutStr'_closure;
         const Text.Printf.$fPrintfTypeIO_$cspr_closure;
         const Text.Printf.$fPrintfType[]_$cspr_closure;
         const Text.Printf.$fHPrintfTypeIO_$chspr_closure;
 }]

