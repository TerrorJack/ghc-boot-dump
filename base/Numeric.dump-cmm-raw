
==================== Raw Cmm ====================
2018-03-16 15:58:56.387436928 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:58:56.390597875 UTC

[section ""data" . Numeric.readInt_closure" {
     Numeric.readInt_closure:
         const Numeric.readInt_info;
         const 0;
 },
 sat_s43P9_entry() //  [R1]
         { []
         }
     {offset
       c451g: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c451h; else goto c451i;
       c451h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c451i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c451d_info;
           R6 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wreadIntP_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43P9_info" {
     sat_s43P9_info:
         const sat_s43P9_entry;
         const 4;
         const 4294967311;
         const S43WU_srt;
 },
 _c451d() //  [R1]
         { []
         }
     {offset
       c451d: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c451l; else goto c451k;
       c451l: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c451k: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c451d_info" {
     block_c451d_info:
         const _c451d;
         const 0;
         const 30;
 },
 Numeric.readInt_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c451m: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c451q; else goto c451p;
       c451q: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.readInt_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c451p: // global
           I64[Hp - 40] = sat_s43P9_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 40;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.readInt_info" {
     Numeric.readInt_info:
         const Numeric.readInt_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S43WU_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.402203592 UTC

[section ""data" . Numeric.readOct_closure" {
     Numeric.readOct_closure:
         const Numeric.readOct_info;
         const 0;
 },
 sat_s43Pc_entry() //  [R1]
         { []
         }
     {offset
       c451P: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c451Q; else goto c451R;
       c451Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c451R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43Pc_info" {
     sat_s43Pc_info:
         const sat_s43Pc_entry;
         const 1;
         const 4294967312;
         const S43WU_srt+16;
 },
 sat_s43Pf_entry() //  [R1]
         { []
         }
     {offset
       c451V: // global
           _s43Pf::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c451W; else goto c451X;
       c451X: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c451Z; else goto c451Y;
       c451Z: // global
           HpAlloc = 24;
           goto c451W;
       c451W: // global
           R1 = _s43Pf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c451Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s43Pf::P64;
           _s43Pa::P64 = P64[_s43Pf::P64 + 16];
           _s43Pb::P64 = P64[_s43Pf::P64 + 24];
           I64[Hp - 16] = sat_s43Pc_info;
           P64[Hp] = _s43Pb::P64;
           I64[Sp - 24] = block_c451S_info;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = Hp - 16;
           R3 = _s43Pb::P64;
           R2 = _s43Pa::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43Pf_info" {
     sat_s43Pf_info:
         const sat_s43Pf_entry;
         const 2;
         const 12884901906;
         const S43WU_srt+16;
 },
 _c451S() //  [R1]
         { []
         }
     {offset
       c451S: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4522; else goto c4521;
       c4522: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c4521: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c451S_info" {
     block_c451S_info:
         const _c451S;
         const 0;
         const 30;
 },
 Numeric.readOct_entry() //  [R2, R3]
         { []
         }
     {offset
       c4523: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c4527; else goto c4526;
       c4527: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.readOct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4526: // global
           I64[Hp - 24] = sat_s43Pf_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.readOct_info" {
     Numeric.readOct_info:
         const Numeric.readOct_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S43WU_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.412811789 UTC

[section ""data" . Numeric.readDec_closure" {
     Numeric.readDec_closure:
         const Numeric.readDec_info;
         const 0;
 },
 sat_s43Pi_entry() //  [R1]
         { []
         }
     {offset
       c452A: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c452B; else goto c452C;
       c452B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c452C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43Pi_info" {
     sat_s43Pi_info:
         const sat_s43Pi_entry;
         const 1;
         const 4294967312;
         const S43WU_srt+40;
 },
 sat_s43Pl_entry() //  [R1]
         { []
         }
     {offset
       c452G: // global
           _s43Pl::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c452H; else goto c452I;
       c452I: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c452K; else goto c452J;
       c452K: // global
           HpAlloc = 24;
           goto c452H;
       c452H: // global
           R1 = _s43Pl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c452J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s43Pl::P64;
           _s43Pg::P64 = P64[_s43Pl::P64 + 16];
           _s43Ph::P64 = P64[_s43Pl::P64 + 24];
           I64[Hp - 16] = sat_s43Pi_info;
           P64[Hp] = _s43Ph::P64;
           I64[Sp - 24] = block_c452D_info;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = Hp - 16;
           R3 = _s43Ph::P64;
           R2 = _s43Pg::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43Pl_info" {
     sat_s43Pl_info:
         const sat_s43Pl_entry;
         const 2;
         const 21474836498;
         const S43WU_srt+24;
 },
 _c452D() //  [R1]
         { []
         }
     {offset
       c452D: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c452N; else goto c452M;
       c452N: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c452M: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c452D_info" {
     block_c452D_info:
         const _c452D;
         const 0;
         const 30;
 },
 Numeric.readDec_entry() //  [R2, R3]
         { []
         }
     {offset
       c452O: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c452S; else goto c452R;
       c452S: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.readDec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c452R: // global
           I64[Hp - 24] = sat_s43Pl_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.readDec_info" {
     Numeric.readDec_info:
         const Numeric.readDec_entry;
         const 0;
         const 55834574862;
         const 8589934607;
         const S43WU_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.424689351 UTC

[section ""data" . Numeric.readHex_closure" {
     Numeric.readHex_closure:
         const Numeric.readHex_info;
         const 0;
 },
 sat_s43Po_entry() //  [R1]
         { []
         }
     {offset
       c453l: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c453m; else goto c453n;
       c453m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c453n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43Po_info" {
     sat_s43Po_info:
         const sat_s43Po_entry;
         const 1;
         const 4294967312;
         const S43WU_srt+56;
 },
 sat_s43Pr_entry() //  [R1]
         { []
         }
     {offset
       c453r: // global
           _s43Pr::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c453s; else goto c453t;
       c453t: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c453v; else goto c453u;
       c453v: // global
           HpAlloc = 24;
           goto c453s;
       c453s: // global
           R1 = _s43Pr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c453u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s43Pr::P64;
           _s43Pm::P64 = P64[_s43Pr::P64 + 16];
           _s43Pn::P64 = P64[_s43Pr::P64 + 24];
           I64[Hp - 16] = sat_s43Po_info;
           P64[Hp] = _s43Pn::P64;
           I64[Sp - 24] = block_c453o_info;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = Hp - 16;
           R3 = _s43Pn::P64;
           R2 = _s43Pm::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43Pr_info" {
     sat_s43Pr_info:
         const sat_s43Pr_entry;
         const 2;
         const 73014444050;
         const S43WU_srt+24;
 },
 _c453o() //  [R1]
         { []
         }
     {offset
       c453o: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c453y; else goto c453x;
       c453y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c453x: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c453o_info" {
     block_c453o_info:
         const _c453o;
         const 0;
         const 30;
 },
 Numeric.readHex_entry() //  [R2, R3]
         { []
         }
     {offset
       c453z: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c453D; else goto c453C;
       c453D: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.readHex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c453C: // global
           I64[Hp - 24] = sat_s43Pr_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.readHex_info" {
     Numeric.readHex_info:
         const Numeric.readHex_entry;
         const 0;
         const 210453397518;
         const 8589934607;
         const S43WU_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.436059347 UTC

[section ""data" . Numeric.readFloat2_closure" {
     Numeric.readFloat2_closure:
         const Numeric.readFloat2_info;
 },
 Numeric.readFloat2_entry() //  [R2]
         { []
         }
     {offset
       c4541: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4542; else goto c4543;
       c4542: // global
           R2 = R2;
           R1 = Numeric.readFloat2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4543: // global
           I64[Sp - 8] = block_c453Y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4547; else goto c453Z;
       u4547: // global
           call _c453Y() args: 0, res: 0, upd: 0;
       c453Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.readFloat2_info" {
     Numeric.readFloat2_info:
         const Numeric.readFloat2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c453Y() //  []
         { []
         }
     {offset
       c453Y: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c453Y_info" {
     block_c453Y_info:
         const _c453Y;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.441178793 UTC

[section ""data" . Numeric.readFloat1_closure" {
     Numeric.readFloat1_closure:
         const Text.ParserCombinators.ReadP.Look_con_info;
         const Numeric.readFloat2_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.451282746 UTC

[section ""data" . Numeric.readFloat_closure" {
     Numeric.readFloat_closure:
         const Numeric.readFloat_info;
         const 0;
 },
 $dFractional_s43Pw_entry() //  [R1]
         { []
         }
     {offset
       c454z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c454A; else goto c454B;
       c454A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c454B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFractional_s43Pw_info" {
     $dFractional_s43Pw_info:
         const $dFractional_s43Pw_entry;
         const 1;
         const 16;
 },
 sat_s43PD_entry() //  [R1]
         { []
         }
     {offset
       c454Y: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c454Z; else goto c4550;
       c454Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4550: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c454V_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43PD_info" {
     sat_s43PD_info:
         const sat_s43PD_entry;
         const 1;
         const 4294967312;
         const S43WU_srt+72;
 },
 _c454V() //  [R1, R2]
         { []
         }
     {offset
       c454V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4553; else goto c4552;
       c4553: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c4552: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c454V_info" {
     block_c454V_info:
         const _c454V;
         const 0;
         const 30;
 },
 sat_s43PE_entry() //  [R1]
         { []
         }
     {offset
       c4554: // global
           _s43PE::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c4555; else goto c4556;
       c4556: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4558; else goto c4557;
       c4558: // global
           HpAlloc = 24;
           goto c4555;
       c4555: // global
           R1 = _s43PE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4557: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s43PE::P64;
           _s43Pw::P64 = P64[_s43PE::P64 + 16];
           _s43Pz::P64 = P64[_s43PE::P64 + 24];
           I64[Hp - 16] = sat_s43PD_info;
           P64[Hp] = _s43Pz::P64;
           R2 = _s43Pw::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43PE_info" {
     sat_s43PE_info:
         const sat_s43PE_entry;
         const 2;
         const 4294967314;
         const S43WU_srt+72;
 },
 sat_s43PF_entry() //  [R1, R2]
         { []
         }
     {offset
       c455d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c455e; else goto c455f;
       c455e: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c455f: // global
           I64[Sp - 16] = block_c454H_info;
           _s43Pw::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s43Pw::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u455m; else goto c454I;
       u455m: // global
           call _c454H(R1) args: 0, res: 0, upd: 0;
       c454I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s43PF_info" {
     sat_s43PF_info:
         const sat_s43PF_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S43WU_srt+72;
 },
 _c454H() //  [R1]
         { []
         }
     {offset
       c454H: // global
           if (R1 & 7 == 6) goto c455b; else goto c455a;
       c455b: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c455l; else goto c455k;
       c455l: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c455k: // global
           _s43Pz::P64 = P64[R1 + 2];
           I64[Hp - 48] = sat_s43PE_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s43Pz::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c455a: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c454H_info" {
     block_c454H_info:
         const _c454H;
         const 1;
         const 4294967326;
         const S43WU_srt+72;
 },
 sat_s43PG_entry() //  [R1]
         { []
         }
     {offset
       c455n: // global
           _s43PG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c455o; else goto c455p;
       c455p: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c455r; else goto c455q;
       c455r: // global
           HpAlloc = 40;
           goto c455o;
       c455o: // global
           R1 = _s43PG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c455q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s43PG::P64;
           _s43Pu::P64 = P64[_s43PG::P64 + 16];
           I64[Hp - 32] = $dFractional_s43Pw_info;
           P64[Hp - 16] = _s43Pu::P64;
           I64[Hp - 8] = sat_s43PF_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43PG_info" {
     sat_s43PG_info:
         const sat_s43PG_entry;
         const 1;
         const 12884901904;
         const S43WU_srt+72;
 },
 lvl116_s43Pv_entry() //  [R1]
         { []
         }
     {offset
       c455s: // global
           _s43Pv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c455t; else goto c455u;
       c455u: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c455w; else goto c455v;
       c455w: // global
           HpAlloc = 24;
           goto c455t;
       c455t: // global
           R1 = _s43Pv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c455v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s43Pv::P64;
           _s43Pu::P64 = P64[_s43Pv::P64 + 16];
           I64[Hp - 16] = sat_s43PG_info;
           P64[Hp] = _s43Pu::P64;
           R3 = Hp - 16;
           R2 = Numeric.readFloat1_closure+2;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s43Pv_info" {
     lvl116_s43Pv_info:
         const lvl116_s43Pv_entry;
         const 1;
         const 30064771088;
         const S43WU_srt+72;
 },
 k_s43PH_entry() //  [R1]
         { []
         }
     {offset
       c455C: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s43PH_info" {
     k_s43PH_info:
         const k_s43PH_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s43PK_entry() //  [R1, R2]
         { []
         }
     {offset
       c455K: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s43PK_info" {
     sat_s43PK_info:
         const sat_s43PK_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Numeric.readFloat_entry() //  [R2]
         { []
         }
     {offset
       c455O: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c455S; else goto c455R;
       c455S: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Numeric.readFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c455R: // global
           I64[Hp - 64] = lvl116_s43Pv_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = k_s43PH_info;
           P64[Hp - 32] = Hp - 64;
           I64[Hp - 24] = sat_s43PK_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.readFloat_info" {
     Numeric.readFloat_info:
         const Numeric.readFloat_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S43WU_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.485193508 UTC

[section ""data" . Numeric.readSigned_closure" {
     Numeric.readSigned_closure:
         const Numeric.readSigned_info;
         const 0;
 },
 $dNum_s43PP_entry() //  [R1]
         { []
         }
     {offset
       c456U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c456V; else goto c456W;
       c456V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c456W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s43PP_info" {
     $dNum_s43PP_info:
         const $dNum_s43PP_entry;
         const 1;
         const 16;
 },
 go1_s43PZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c457q: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c457r; else goto u457X;
       c457r: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u457X: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c457g() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go1_s43PZ_info" {
     go1_s43PZ_info:
         const go1_s43PZ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c457g() //  []
         { []
         }
     {offset
       c457g: // global
           I64[Sp - 16] = block_c457j_info;
           R1 = P64[Sp + 8];
           _s43PZ::P64 = P64[Sp];
           P64[Sp - 8] = P64[_s43PZ::P64 + 15];
           P64[Sp + 8] = P64[_s43PZ::P64 + 7];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u457Z; else goto c457k;
       u457Z: // global
           call _c457j(R1) args: 0, res: 0, upd: 0;
       c457k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c457j() //  [R1]
         { []
         }
     {offset
       c457j: // global
           if (R1 & 7 == 1) goto c457n; else goto c457o;
       c457n: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c457o: // global
           I64[Sp] = block_c457y_info;
           _s43Q3::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 8] = _s43Q3::P64;
           if (R1 & 7 != 0) goto u4580; else goto c457A;
       u4580: // global
           call _c457y(R1) args: 0, res: 0, upd: 0;
       c457A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c457j_info" {
     block_c457j_info:
         const _c457j;
         const 3;
         const 30;
 },
 _c457y() //  [R1]
         { []
         }
     {offset
       c457y: // global
           I64[Sp - 8] = block_c457E_info;
           _s43Q5::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s43Q5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4582; else goto c457G;
       u4582: // global
           call _c457E(R1) args: 0, res: 0, upd: 0;
       c457G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c457y_info" {
     block_c457y_info:
         const _c457y;
         const 3;
         const 30;
 },
 _c457E() //  [R1]
         { []
         }
     {offset
       c457E: // global
           _s43Q3::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c457O; else goto c457V;
       c457O: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c457R; else goto c457Q;
       c457R: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c457Q: // global
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = _s43Q3::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c457V: // global
           P64[Sp + 32] = _s43Q3::P64;
           Sp = Sp + 24;
           call _c457g() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c457E_info" {
     block_c457E_info:
         const _c457E;
         const 4;
         const 30;
 },
 go_s43PQ_entry() //  [R1, R2]
         { []
         }
     {offset
       c4588: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c4589; else goto c458a;
       c4589: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c458a: // global
           I64[Sp - 24] = block_c4572_info;
           _s43PQ::P64 = R1;
           _s43PN::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s43PN::P64;
           P64[Sp - 8] = _s43PQ::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u458n; else goto c4573;
       u458n: // global
           call _c4572(R1) args: 0, res: 0, upd: 0;
       c4573: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s43PQ_info" {
     go_s43PQ_info:
         const go_s43PQ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c4572() //  [R1]
         { []
         }
     {offset
       c4572: // global
           if (R1 & 7 == 1) goto c4585; else goto c4586;
       c4585: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4586: // global
           I64[Sp - 8] = block_c4578_info;
           _s43PU::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s43PU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u458m; else goto c4579;
       u458m: // global
           call _c4578(R1) args: 0, res: 0, upd: 0;
       c4579: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4572_info" {
     block_c4572_info:
         const _c4572;
         const 2;
         const 30;
 },
 _c4578() //  [R1]
         { []
         }
     {offset
       c4578: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c458h; else goto c458g;
       c458h: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c458g: // global
           _s43PW::P64 = P64[R1 + 7];
           _s43PX::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = go1_s43PZ_info;
           P64[Hp - 8] = _s43PX::P64;
           P64[Hp] = Hp - 48;
           _s43PN::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c458d_info;
           R2 = _s43PW::P64;
           R1 = _s43PN::P64;
           P64[Sp + 24] = Hp - 15;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4578_info" {
     block_c4578_info:
         const _c4578;
         const 3;
         const 30;
 },
 _c458d() //  [R1]
         { []
         }
     {offset
       c458d: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_s43PZ_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c458d_info" {
     block_c458d_info:
         const _c458d;
         const 1;
         const 30;
 },
 sat_s43QB_entry() //  [R1]
         { []
         }
     {offset
       c459j: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c459k; else goto c459l;
       c459k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c459l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43QB_info" {
     sat_s43QB_info:
         const sat_s43QB_entry;
         const 2;
         const 18;
 },
 go2_s43Qt_entry() //  [R1, R2]
         { []
         }
     {offset
       c459q: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c459r; else goto c459s;
       c459r: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c459s: // global
           I64[Sp - 32] = block_c4593_info;
           _s43Qt::P64 = R1;
           _s43PP::P64 = P64[R1 + 7];
           _s43Qs::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s43PP::P64;
           P64[Sp - 16] = _s43Qs::P64;
           P64[Sp - 8] = _s43Qt::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u459C; else goto c4594;
       u459C: // global
           call _c4593(R1) args: 0, res: 0, upd: 0;
       c4594: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go2_s43Qt_info" {
     go2_s43Qt_info:
         const go2_s43Qt_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c4593() //  [R1]
         { []
         }
     {offset
       c4593: // global
           if (R1 & 7 == 1) goto c459n; else goto c459o;
       c459n: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c459o: // global
           I64[Sp] = block_c4599_info;
           _s43Qx::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _s43Qx::P64;
           if (R1 & 7 != 0) goto u459B; else goto c459a;
       u459B: // global
           call _c4599(R1) args: 0, res: 0, upd: 0;
       c459a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4593_info" {
     block_c4593_info:
         const _c4593;
         const 3;
         const 30;
 },
 _c4599() //  [R1]
         { []
         }
     {offset
       c4599: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c459A; else goto c459z;
       c459A: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c459z: // global
           _s43Qz::P64 = P64[R1 + 7];
           _s43QA::P64 = P64[R1 + 15];
           I64[Hp - 104] = stg_ap_2_upd_info;
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 16];
           I64[Hp - 72] = sat_s43QB_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = _s43Qz::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = _s43QA::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 104;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4599_info" {
     block_c4599_info:
         const _c4599;
         const 3;
         const 30;
 },
 go1_s43Qd_entry() //  [R1, R2]
         { []
         }
     {offset
       c459H: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c459I; else goto u45aj;
       c459I: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u45aj: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c458q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go1_s43Qd_info" {
     go1_s43Qd_info:
         const go1_s43Qd_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S43WU_srt+104;
 },
 _c458q() //  []
         { []
         }
     {offset
       c458q: // global
           I64[Sp - 16] = block_c458t_info;
           R1 = P64[Sp + 8];
           _s43Qd::P64 = P64[Sp];
           P64[Sp - 8] = P64[_s43Qd::P64 + 15];
           P64[Sp + 8] = P64[_s43Qd::P64 + 7];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u45ao; else goto c458u;
       u45ao: // global
           call _c458t(R1) args: 0, res: 0, upd: 0;
       c458u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c458t() //  [R1]
         { []
         }
     {offset
       c458t: // global
           if (R1 & 7 == 1) goto c459E; else goto c459F;
       c459E: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c459F: // global
           I64[Sp - 8] = block_c458z_info;
           _s43Qh::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s43Qh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u45ap; else goto c458A;
       u45ap: // global
           call _c458z(R1) args: 0, res: 0, upd: 0;
       c458A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c458t_info" {
     block_c458t_info:
         const _c458t;
         const 3;
         const 4294967326;
         const S43WU_srt+104;
 },
 _c458z() //  [R1]
         { []
         }
     {offset
       c458z: // global
           I64[Sp - 8] = block_c458E_info;
           _s43Qk::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s43Qk::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u45aq; else goto c458F;
       u45aq: // global
           call _c458E(R1) args: 0, res: 0, upd: 0;
       c458F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c458z_info" {
     block_c458z_info:
         const _c458z;
         const 4;
         const 4294967326;
         const S43WU_srt+104;
 },
 _c458E() //  [R1]
         { []
         }
     {offset
       c458E: // global
           if (R1 & 7 == 1) goto u45ak; else goto c459T;
       u45ak: // global
           Sp = Sp + 16;
           call _c45ag() args: 0, res: 0, upd: 0;
       c459T: // global
           I64[Sp - 8] = block_c458K_info;
           _s43Qn::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s43Qn::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u45ar; else goto c458L;
       u45ar: // global
           call _c458K(R1) args: 0, res: 0, upd: 0;
       c458L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c458E_info" {
     block_c458E_info:
         const _c458E;
         const 5;
         const 4294967326;
         const S43WU_srt+104;
 },
 _c458K() //  [R1]
         { []
         }
     {offset
       c458K: // global
           if (I64[R1 + 7] == 45) goto c459X; else goto u45al;
       c459X: // global
           _s43Qn::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c458S_info;
           R1 = _s43Qn::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u45at; else goto c458T;
       u45at: // global
           call _c458S(R1) args: 0, res: 0, upd: 0;
       c458T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u45al: // global
           Sp = Sp + 24;
           call _c45ag() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c458K_info" {
     block_c458K_info:
         const _c458K;
         const 6;
         const 4294967326;
         const S43WU_srt+104;
 },
 _c458S() //  [R1]
         { []
         }
     {offset
       c458S: // global
           if (R1 & 7 == 1) goto c45a4; else goto u45am;
       c45a4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c45a7; else goto c45a6;
       c45a7: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c45a6: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = go2_s43Qt_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = Hp - 48;
           I64[Sp + 16] = block_c459Y_info;
           R3 = P64[Sp + 8];
           R2 = GHC.Read.lex1_closure;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u45am: // global
           Sp = Sp + 16;
           call _c45ag() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c458S_info" {
     block_c458S_info:
         const _c458S;
         const 5;
         const 4294967326;
         const S43WU_srt+104;
 },
 _c459Y() //  [R1]
         { []
         }
     {offset
       c459Y: // global
           I64[Sp + 16] = block_c45a2_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s43PQ_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c459Y_info" {
     block_c459Y_info:
         const _c459Y;
         const 131;
         const 30;
 },
 _c45a2() //  [R1]
         { []
         }
     {offset
       c45a2: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go2_s43Qt_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45a2_info" {
     block_c45a2_info:
         const _c45a2;
         const 1;
         const 30;
 },
 _c45ag() //  []
         { []
         }
     {offset
       c45ag: // global
           P64[Sp + 24] = P64[Sp];
           Sp = Sp + 16;
           call _c458q() args: 0, res: 0, upd: 0;
     }
 },
 sat_s43QM_entry() //  [R1]
         { []
         }
     {offset
       c45aJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45aK; else goto c45aL;
       c45aK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45aL: // global
           I64[Sp - 16] = block_c45aH_info;
           R3 = P64[R1 + 24];
           R2 = GHC.Read.lex1_closure;
           P64[Sp - 8] = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s43QM_info" {
     sat_s43QM_info:
         const sat_s43QM_entry;
         const 2;
         const 4294967314;
         const S43WU_srt+104;
 },
 _c45aH() //  [R1]
         { []
         }
     {offset
       c45aH: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_s43Qd_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45aH_info" {
     block_c45aH_info:
         const _c45aH;
         const 1;
         const 4294967326;
         const S43WU_srt+104;
 },
 sat_s43QN_entry() //  [R1, R2]
         { []
         }
     {offset
       c45aR: // global
           _s43QI::P64 = R2;
           _s43QN::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c45aV; else goto c45aW;
       c45aW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c45aY; else goto c45aX;
       c45aY: // global
           HpAlloc = 32;
           goto c45aV;
       c45aV: // global
           R2 = _s43QI::P64;
           R1 = _s43QN::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c45aX: // global
           _s43PQ::P64 = P64[_s43QN::P64 + 7];
           _s43Qd::P64 = P64[_s43QN::P64 + 15];
           I64[Hp - 24] = sat_s43QM_info;
           P64[Hp - 8] = _s43Qd::P64;
           P64[Hp] = _s43QI::P64;
           I64[Sp - 24] = block_c45aP_info;
           R3 = _s43QI::P64;
           R2 = GHC.Read.lex1_closure;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _s43PQ::P64;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s43QN_info" {
     sat_s43QN_info:
         const sat_s43QN_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S43WU_srt+104;
 },
 _c45aP() //  [R1]
         { []
         }
     {offset
       c45aP: // global
           I64[Sp] = block_c45aU_info;
           R2 = R1;
           R1 = P64[Sp + 16];
           call go_s43PQ_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45aP_info" {
     block_c45aP_info:
         const _c45aP;
         const 2;
         const 30;
 },
 _c45aU() //  [R1]
         { []
         }
     {offset
       c45aU: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45aU_info" {
     block_c45aU_info:
         const _c45aU;
         const 130;
         const 30;
 },
 Numeric.readSigned_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c45b4: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c45b8; else goto c45b7;
       c45b8: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.readSigned_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c45b7: // global
           I64[Hp - 80] = $dNum_s43PP_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = go_s43PQ_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = go1_s43Qd_info;
           P64[Hp - 32] = Hp - 80;
           _c456X::P64 = Hp - 55;
           P64[Hp - 24] = _c456X::P64;
           I64[Hp - 16] = sat_s43QN_info;
           P64[Hp - 8] = _c456X::P64;
           P64[Hp] = Hp - 39;
           R4 = R4;
           R3 = Hp - 15;
           R2 = GHC.Types.False_closure+1;
           call GHC.Read.readParen_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.readSigned_info" {
     Numeric.readSigned_info:
         const Numeric.readSigned_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S43WU_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.535534591 UTC

[section ""data" . sat_s43QO_closure" {
     sat_s43QO_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.537520563 UTC

[section ""data" . sat_s43QP_closure" {
     sat_s43QP_closure:
         const :_con_info;
         const sat_s43QO_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.540828305 UTC

[section ""data" . Numeric.showInt2_closure" {
     Numeric.showInt2_closure:
         const Numeric.showInt2_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showInt2_entry() //  [R1]
         { []
         }
     {offset
       c45dR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45dS; else goto c45dT;
       c45dS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45dT: // global
           (_c45dO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c45dO::I64 == 0) goto c45dQ; else goto c45dP;
       c45dQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c45dP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c45dO::I64;
           R3 = sat_s43QP_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showInt2_info" {
     Numeric.showInt2_info:
         const Numeric.showInt2_entry;
         const 0;
         const 4294967317;
         const S43WU_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.546573284 UTC

[section ""cstring" . lvl_r43OH_bytes" {
     lvl_r43OH_bytes:
         I8[] [78,117,109,101,114,105,99,46,115,104,111,119,73,110,116,58,32,99,97,110,39,116,32,115,104,111,119,32,110,101,103,97,116,105,118,101,32,110,117,109,98,101,114,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.550084047 UTC

[section ""data" . Numeric.showInt1_closure" {
     Numeric.showInt1_closure:
         const Numeric.showInt1_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showInt1_entry() //  [R1]
         { []
         }
     {offset
       c45ea: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c45eb; else goto c45ec;
       c45eb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45ec: // global
           (_c45e5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c45e5::I64 == 0) goto c45e7; else goto c45e6;
       c45e7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c45e6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c45e5::I64;
           I64[Sp - 24] = block_c45e8_info;
           R2 = lvl_r43OH_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showInt1_info" {
     Numeric.showInt1_info:
         const Numeric.showInt1_entry;
         const 0;
         const 4294967317;
         const S43WU_srt+136;
 },
 _c45e8() //  [R1]
         { []
         }
     {offset
       c45e8: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45e8_info" {
     block_c45e8_info:
         const _c45e8;
         const 0;
         const 4294967326;
         const S43WU_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.557663082 UTC

[section ""data" . Numeric.showHFloat16_closure" {
     Numeric.showHFloat16_closure:
         const Numeric.showHFloat16_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showHFloat16_entry() //  [R1]
         { []
         }
     {offset
       c45ew: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45ex; else goto c45ey;
       c45ex: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45ey: // global
           (_c45et::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c45et::I64 == 0) goto c45ev; else goto c45eu;
       c45ev: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c45eu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c45et::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showHFloat16_info" {
     Numeric.showHFloat16_info:
         const Numeric.showHFloat16_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.571360728 UTC

[section ""data" . Numeric.showInt_closure" {
     Numeric.showInt_closure:
         const Numeric.showInt_info;
         const 0;
 },
 sat_s43QX_entry() //  [R1]
         { []
         }
     {offset
       c45fD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45fE; else goto c45fF;
       c45fE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45fF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c45fB_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43QX_info" {
     sat_s43QX_info:
         const sat_s43QX_entry;
         const 1;
         const 4294967312;
         const S43WU_srt+144;
 },
 _c45fB() //  [R1]
         { []
         }
     {offset
       c45fB: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Numeric.showHFloat16_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45fB_info" {
     block_c45fB_info:
         const _c45fB;
         const 0;
         const 4294967326;
         const S43WU_srt+144;
 },
 lvl5_s43QZ_entry() //  [R1]
         { []
         }
     {offset
       c45fN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45fO; else goto c45fP;
       c45fO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45fP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c45fL_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_s43QZ_info" {
     lvl5_s43QZ_info:
         const lvl5_s43QZ_entry;
         const 1;
         const 4294967312;
         const S43WU_srt+152;
 },
 _c45fL() //  [R1]
         { []
         }
     {offset
       c45fL: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Numeric.showInt2_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45fL_info" {
     block_c45fL_info:
         const _c45fL;
         const 0;
         const 4294967326;
         const S43WU_srt+152;
 },
 ds_s43Re_entry() //  [R1]
         { []
         }
     {offset
       c45fV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c45fW; else goto c45fX;
       c45fW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45fX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quotRem_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s43Re_info" {
     ds_s43Re_info:
         const ds_s43Re_entry;
         const 3;
         const 15;
 },
 Numeric.showInt_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c45fY: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c45fZ; else goto c45g0;
       c45fZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showInt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c45g0: // global
           I64[Sp - 32] = block_c45eK_info;
           _s43QR::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s43QR::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showInt_info" {
     Numeric.showInt_info:
         const Numeric.showInt_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const S43WU_srt+144;
 },
 _c45eK() //  [R1]
         { []
         }
     {offset
       c45eK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45g3; else goto c45g2;
       c45g3: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c45g2: // global
           I64[Hp - 16] = sat_s43QX_info;
           P64[Hp] = R1;
           I64[Sp - 16] = block_c45eQ_info;
           R2 = R1;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45eK_info" {
     block_c45eK_info:
         const _c45eK;
         const 3;
         const 47244640286;
         const S43WU_srt+144;
 },
 _c45eQ() //  [R1]
         { []
         }
     {offset
       c45eQ: // global
           I64[Sp] = block_c45eU_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45eQ_info" {
     block_c45eQ_info:
         const _c45eQ;
         const 5;
         const 21474836510;
         const S43WU_srt+152;
 },
 _c45eU() //  [R1]
         { []
         }
     {offset
       c45eU: // global
           if (R1 & 7 == 1) goto c45g6; else goto c45gQ;
       c45g6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45g9; else goto c45g8;
       c45g9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c45g8: // global
           I64[Hp - 16] = lvl5_s43QZ_info;
           _s43QU::P64 = P64[Sp + 8];
           P64[Hp] = _s43QU::P64;
           I64[Sp + 8] = block_c45f0_info;
           R2 = _s43QU::P64;
           P64[Sp + 16] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
       c45gQ: // global
           R1 = Numeric.showInt1_closure;
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45eU_info" {
     block_c45eU_info:
         const _c45eU;
         const 133;
         const 21474836510;
         const S43WU_srt+152;
 },
 _c45f0() //  [R1]
         { []
         }
     {offset
       c45f0: // global
           P64[Sp] = P64[Sp + 32];
           P64[Sp + 24] = P64[Sp + 24];
           P64[Sp + 32] = R1;
           call _c45f9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c45f0_info" {
     block_c45f0_info:
         const _c45f0;
         const 4;
         const 30;
 },
 _c45f9() //  []
         { []
         }
     {offset
       c45f9: // global
           I64[Sp - 8] = block_c45fb_info;
           R2 = P64[Sp + 32];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 24];
           P64[Sp - 16] = P64[Sp + 8];
           Sp = Sp - 32;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c45fb() //  [R1]
         { []
         }
     {offset
       c45fb: // global
           _s43QR::P64 = P64[Sp + 24];
           _s43Rb::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c45gB; else goto c45gM;
       c45gB: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c45gE; else goto c45gD;
       c45gE: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c45gD: // global
           I64[Hp - 56] = ds_s43Re_info;
           P64[Hp - 40] = _s43QR::P64;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s43Rb::P64;
           I64[Hp - 16] = stg_sel_1_upd_info;
           _c45ff::P64 = Hp - 56;
           P64[Hp] = _c45ff::P64;
           I64[Sp] = block_c45fi_info;
           R2 = _s43QR::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           P64[Sp + 32] = _c45ff::P64;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
       c45gM: // global
           I64[Sp + 32] = block_c45ge_info;
           R2 = _s43QR::P64;
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = _s43Rb::P64;
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45fb_info" {
     block_c45fb_info:
         const _c45fb;
         const 5;
         const 30;
 },
 _c45fi() //  [R1]
         { []
         }
     {offset
       c45fi: // global
           I64[Sp] = block_c45fm_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45fi_info" {
     block_c45fi_info:
         const _c45fi;
         const 5;
         const 30;
 },
 _c45fm() //  [R1]
         { []
         }
     {offset
       c45fm: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c45gI; else goto c45gH;
       c45gI: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c45gH: // global
           I64[Hp - 56] = GHC.Types.C#_con_info;
           I64[Hp - 48] = R1 + 48;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 55;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = P64[Sp + 32];
           P64[Sp + 32] = Hp - 16;
           P64[Sp + 8] = Hp - 38;
           Sp = Sp + 8;
           call _c45f9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c45fm_info" {
     block_c45fm_info:
         const _c45fm;
         const 5;
         const 30;
 },
 _c45ge() //  [R1]
         { []
         }
     {offset
       c45ge: // global
           I64[Sp] = block_c45gi_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45ge_info" {
     block_c45ge_info:
         const _c45ge;
         const 1;
         const 30;
 },
 _c45gi() //  [R1]
         { []
         }
     {offset
       c45gi: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c45gy; else goto c45gx;
       c45gy: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c45gx: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = R1 + 48;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45gi_info" {
     block_c45gi_info:
         const _c45gi;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.60830182 UTC

[section ""data" . Numeric.showFFloatAlt_closure" {
     Numeric.showFFloatAlt_closure:
         const Numeric.showFFloatAlt_info;
         const 0;
 },
 sat_s43Rw_entry() //  [R1]
         { []
         }
     {offset
       c45in: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45io; else goto c45ip;
       c45io: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45ip: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 32];
           R5 = GHC.Types.True_closure+2;
           R4 = P64[R1 + 24];
           R3 = GHC.Float.FFFixed_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43Rw_info" {
     sat_s43Rw_info:
         const sat_s43Rw_entry;
         const 3;
         const 4294967311;
         const S43WU_srt+176;
 },
 Numeric.showFFloatAlt_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c45iq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c45iu; else goto c45it;
       c45iu: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showFFloatAlt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c45it: // global
           I64[Hp - 32] = sat_s43Rw_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showFFloatAlt_info" {
     Numeric.showFFloatAlt_info:
         const Numeric.showFFloatAlt_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S43WU_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.614822102 UTC

[section ""data" . Numeric.showGFloatAlt_closure" {
     Numeric.showGFloatAlt_closure:
         const Numeric.showGFloatAlt_info;
         const 0;
 },
 sat_s43RA_entry() //  [R1]
         { []
         }
     {offset
       c45iL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45iM; else goto c45iN;
       c45iM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45iN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 32];
           R5 = GHC.Types.True_closure+2;
           R4 = P64[R1 + 24];
           R3 = GHC.Float.FFGeneric_closure+3;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43RA_info" {
     sat_s43RA_info:
         const sat_s43RA_entry;
         const 3;
         const 4294967311;
         const S43WU_srt+176;
 },
 Numeric.showGFloatAlt_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c45iO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c45iS; else goto c45iR;
       c45iS: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showGFloatAlt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c45iR: // global
           I64[Hp - 32] = sat_s43RA_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showGFloatAlt_info" {
     Numeric.showGFloatAlt_info:
         const Numeric.showGFloatAlt_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S43WU_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.620501457 UTC

[section ""cstring" . lvl1_r43OI_bytes" {
     lvl1_r43OI_bytes:
         I8[] [78,117,109,101,114,105,99,46,115,104,111,119,73,110,116,65,116,66,97,115,101,58,32,97,112,112,108,105,101,100,32,116,111,32,110,101,103,97,116,105,118,101,32,110,117,109,98,101,114,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.623961502 UTC

[section ""data" . Numeric.$wlvl_closure" {
     Numeric.$wlvl_closure:
         const Numeric.$wlvl_info;
         const 0;
 },
 sat_s43RF_entry() //  [R1]
         { []
         }
     {offset
       c45jd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c45je; else goto c45jf;
       c45je: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45jf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c45ja_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43RF_info" {
     sat_s43RF_info:
         const sat_s43RF_entry;
         const 4294967296;
         const 17;
 },
 _c45ja() //  [R1, R2]
         { []
         }
     {offset
       c45ja: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45ji; else goto c45jh;
       c45ji: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c45jh: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45ja_info" {
     block_c45ja_info:
         const _c45ja;
         const 0;
         const 30;
 },
 Numeric.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       c45jl: // global
           _s43RB::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c45jm; else goto c45jn;
       c45jn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45jp; else goto c45jo;
       c45jp: // global
           HpAlloc = 24;
           goto c45jm;
       c45jm: // global
           R2 = _s43RB::I64;
           R1 = Numeric.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c45jo: // global
           I64[Hp - 16] = sat_s43RF_info;
           I64[Hp] = _s43RB::I64;
           I64[Sp - 8] = block_c45jj_info;
           R3 = Hp - 16;
           R2 = lvl1_r43OI_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.$wlvl_info" {
     Numeric.$wlvl_info:
         const Numeric.$wlvl_entry;
         const 0;
         const 1103806595086;
         const 4294967300;
         const S43WU_srt+136;
 },
 _c45jj() //  [R1]
         { []
         }
     {offset
       c45jj: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45jj_info" {
     block_c45jj_info:
         const _c45jj;
         const 0;
         const 4294967326;
         const S43WU_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.632301905 UTC

[section ""cstring" . lvl2_r43OJ_bytes" {
     lvl2_r43OJ_bytes:
         I8[] [78,117,109,101,114,105,99,46,115,104,111,119,73,110,116,65,116,66,97,115,101,58,32,97,112,112,108,105,101,100,32,116,111,32,117,110,115,117,112,112,111,114,116,101,100,32,98,97,115,101,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.635433687 UTC

[section ""data" . Numeric.showIntAtBase2_closure" {
     Numeric.showIntAtBase2_closure:
         const Numeric.showIntAtBase2_info;
         const 0;
 },
 sat_s43RJ_entry() //  [R1]
         { []
         }
     {offset
       c45jS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45jT; else goto c45jU;
       c45jT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45jU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.show_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43RJ_info" {
     sat_s43RJ_info:
         const sat_s43RJ_entry;
         const 2;
         const 18;
 },
 Numeric.showIntAtBase2_entry() //  [R2, R3]
         { []
         }
     {offset
       c45jX: // global
           _s43RI::P64 = R3;
           _s43RH::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c45jY; else goto c45jZ;
       c45jZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c45k1; else goto c45k0;
       c45k1: // global
           HpAlloc = 32;
           goto c45jY;
       c45jY: // global
           R3 = _s43RI::P64;
           R2 = _s43RH::P64;
           R1 = Numeric.showIntAtBase2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c45k0: // global
           I64[Hp - 24] = sat_s43RJ_info;
           P64[Hp - 8] = _s43RH::P64;
           P64[Hp] = _s43RI::P64;
           I64[Sp - 8] = block_c45jV_info;
           R3 = Hp - 24;
           R2 = lvl1_r43OI_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showIntAtBase2_info" {
     Numeric.showIntAtBase2_info:
         const Numeric.showIntAtBase2_entry;
         const 0;
         const 2203318222862;
         const 8589934607;
         const S43WU_srt+136;
 },
 _c45jV() //  [R1]
         { []
         }
     {offset
       c45jV: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45jV_info" {
     block_c45jV_info:
         const _c45jV;
         const 0;
         const 4294967326;
         const S43WU_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.64423145 UTC

[section ""data" . Numeric.showIntAtBase1_closure" {
     Numeric.showIntAtBase1_closure:
         const Numeric.showIntAtBase1_info;
         const 0;
 },
 sat_s43RN_entry() //  [R1]
         { []
         }
     {offset
       c45kq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45kr; else goto c45ks;
       c45kr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45ks: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.show_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43RN_info" {
     sat_s43RN_info:
         const sat_s43RN_entry;
         const 2;
         const 18;
 },
 Numeric.showIntAtBase1_entry() //  [R2, R3]
         { []
         }
     {offset
       c45kv: // global
           _s43RM::P64 = R3;
           _s43RL::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c45kw; else goto c45kx;
       c45kx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c45kz; else goto c45ky;
       c45kz: // global
           HpAlloc = 32;
           goto c45kw;
       c45kw: // global
           R3 = _s43RM::P64;
           R2 = _s43RL::P64;
           R1 = Numeric.showIntAtBase1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c45ky: // global
           I64[Hp - 24] = sat_s43RN_info;
           P64[Hp - 8] = _s43RL::P64;
           P64[Hp] = _s43RM::P64;
           I64[Sp - 8] = block_c45kt_info;
           R3 = Hp - 24;
           R2 = lvl2_r43OJ_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showIntAtBase1_info" {
     Numeric.showIntAtBase1_info:
         const Numeric.showIntAtBase1_entry;
         const 0;
         const 4402341478414;
         const 8589934607;
         const S43WU_srt+136;
 },
 _c45kt() //  [R1]
         { []
         }
     {offset
       c45kt: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45kt_info" {
     block_c45kt_info:
         const _c45kt;
         const 0;
         const 4294967326;
         const S43WU_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.651023569 UTC

[section ""data" . sat_s43RP_closure" {
     sat_s43RP_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.652717196 UTC

[section ""data" . sat_s43RQ_closure" {
     sat_s43RQ_closure:
         const :_con_info;
         const sat_s43RP_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.655287844 UTC

[section ""data" . Numeric.showIntAtBase3_closure" {
     Numeric.showIntAtBase3_closure:
         const Numeric.showIntAtBase3_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showIntAtBase3_entry() //  [R1]
         { []
         }
     {offset
       c45kY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45kZ; else goto c45l0;
       c45kZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45l0: // global
           (_c45kV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c45kV::I64 == 0) goto c45kX; else goto c45kW;
       c45kX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c45kW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c45kV::I64;
           R3 = sat_s43RQ_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showIntAtBase3_info" {
     Numeric.showIntAtBase3_info:
         const Numeric.showIntAtBase3_entry;
         const 0;
         const 4294967317;
         const S43WU_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.666700529 UTC

[section ""data" . Numeric.showIntAtBase_closure" {
     Numeric.showIntAtBase_closure:
         const Numeric.showIntAtBase_info;
         const 0;
 },
 $dNum_s43RY_entry() //  [R1]
         { []
         }
     {offset
       c45m4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45m5; else goto c45m6;
       c45m5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45m6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s43RY_info" {
     $dNum_s43RY_info:
         const $dNum_s43RY_entry;
         const 1;
         const 16;
 },
 sat_s43S0_entry() //  [R1]
         { []
         }
     {offset
       c45m9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45ma; else goto c45mb;
       c45ma: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45mb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Numeric.showIntAtBase3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43S0_info" {
     sat_s43S0_info:
         const sat_s43S0_entry;
         const 1;
         const 4294967312;
         const S43WU_srt+232;
 },
 sat_s43S2_entry() //  [R1]
         { []
         }
     {offset
       c45me: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45mf; else goto c45mg;
       c45mf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45mg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Numeric.showHFloat16_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43S2_info" {
     sat_s43S2_info:
         const sat_s43S2_entry;
         const 1;
         const 4294967312;
         const S43WU_srt+144;
 },
 lvl5_s43S7_entry() //  [R1]
         { []
         }
     {offset
       c45mj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45mk; else goto c45ml;
       c45mk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45ml: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Numeric.showHFloat16_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_s43S7_info" {
     lvl5_s43S7_info:
         const lvl5_s43S7_entry;
         const 1;
         const 4294967312;
         const S43WU_srt+144;
 },
 sat_s43Sf_entry() //  [R1]
         { []
         }
     {offset
       c45mq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c45my; else goto c45mz;
       c45my: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45mz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c45mo_info;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43Sf_info" {
     sat_s43Sf_info:
         const sat_s43Sf_entry;
         const 2;
         const 18;
 },
 _c45mo() //  [R1]
         { []
         }
     {offset
       c45mo: // global
           I64[Sp] = block_c45mt_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c45mo_info" {
     block_c45mo_info:
         const _c45mo;
         const 0;
         const 30;
 },
 _c45mt() //  [R1]
         { []
         }
     {offset
       c45mt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c45mD; else goto c45mC;
       c45mD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c45mC: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45mt_info" {
     block_c45mt_info:
         const _c45mt;
         const 0;
         const 30;
 },
 Numeric.showIntAtBase_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c45mE: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c45mF; else goto c45mG;
       c45mF: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showIntAtBase_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c45mG: // global
           I64[Sp - 48] = block_c45lc_info;
           _s43RR::P64 = R2;
           R2 = R2;
           P64[Sp - 40] = _s43RR::P64;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showIntAtBase_info" {
     Numeric.showIntAtBase_info:
         const Numeric.showIntAtBase_entry;
         const 0;
         const 29691108917262;
         const 25769803802;
         const S43WU_srt+144;
 },
 _c45lc() //  [R1]
         { []
         }
     {offset
       c45lc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45mJ; else goto c45mI;
       c45mJ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c45mI: // global
           I64[Hp - 16] = $dNum_s43RY_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c45li_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45lc_info" {
     block_c45lc_info:
         const _c45lc;
         const 6;
         const 12098922872862;
         const S43WU_srt+144;
 },
 _c45li() //  [R1]
         { []
         }
     {offset
       c45li: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45mM; else goto c45mL;
       c45mM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c45mL: // global
           I64[Hp - 16] = sat_s43S0_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_c45lo_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 32];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45li_info" {
     block_c45li_info:
         const _c45li;
         const 7;
         const 12098922872862;
         const S43WU_srt+144;
 },
 _c45lo() //  [R1]
         { []
         }
     {offset
       c45lo: // global
           if (R1 & 7 == 1) goto c45mO; else goto c45nn;
       c45mO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45mR; else goto c45mQ;
       c45mR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c45mQ: // global
           I64[Hp - 16] = sat_s43S2_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c45lu_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 56];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       c45nn: // global
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           Sp = Sp + 72;
           call Numeric.showIntAtBase1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45lo_info" {
     block_c45lo_info:
         const _c45lo;
         const 8;
         const 3302829850654;
         const S43WU_srt+144;
 },
 _c45lu() //  [R1]
         { []
         }
     {offset
       c45lu: // global
           _s43RV::P64 = P64[Sp + 56];
           if (R1 & 7 == 1) goto c45mU; else goto c45nj;
       c45mU: // global
           I64[Sp] = block_c45ly_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s43RV::P64;
           P64[Sp - 8] = P64[Sp + 40];
           Sp = Sp - 24;
           call GHC.Real.quotRem_entry(R2) args: 32, res: 8, upd: 8;
       c45nj: // global
           R3 = _s43RV::P64;
           R2 = P64[Sp + 32];
           Sp = Sp + 72;
           call Numeric.showIntAtBase2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45lu_info" {
     block_c45lu_info:
         const _c45lu;
         const 8;
         const 1103806595102;
         const S43WU_srt+144;
 },
 _c45ly() //  [R1]
         { []
         }
     {offset
       c45ly: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45mX; else goto c45mW;
       c45mX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c45mW: // global
           _s43S5::P64 = P64[R1 + 7];
           _s43S6::P64 = P64[R1 + 15];
           I64[Hp - 16] = lvl5_s43S7_info;
           P64[Hp] = P64[Sp + 16];
           _s43RZ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c45lE_info;
           R2 = _s43RZ::P64;
           P64[Sp + 16] = _s43S6::P64;
           P64[Sp + 32] = _s43S5::P64;
           P64[Sp + 56] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45ly_info" {
     block_c45ly_info:
         const _c45ly;
         const 4616;
         const 4294967326;
         const S43WU_srt+144;
 },
 _c45lE() //  [R1]
         { []
         }
     {offset
       c45lE: // global
           P64[Sp] = P64[Sp + 56];
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 24] = P64[Sp + 24];
           P64[Sp + 56] = R1;
           call _c45lL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c45lE_info" {
     block_c45lE_info:
         const _c45lE;
         const 7;
         const 30;
 },
 _c45lL() //  []
         { []
         }
     {offset
       c45lL: // global
           Hp = Hp + 32;
           _s43Sb::P64 = P64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c45n1; else goto c45n0;
       c45n1: // global
           HpAlloc = 32;
           I64[Sp + 8] = block_c45lK_info;
           R3 = P64[Sp];
           R2 = _s43Sb::P64;
           R1 = P64[Sp + 24];
           Sp = Sp + 8;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       c45n0: // global
           I64[Hp - 24] = sat_s43Sf_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s43Sb::P64;
           I64[Sp - 8] = block_c45lP_info;
           R2 = Hp - 24;
           R1 = P64[Sp + 40];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c45lK() //  [R1, R2, R3]
         { []
         }
     {offset
       c45lK: // global
           P64[Sp + 16] = R1;
           P64[Sp] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 8;
           call _c45lL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c45lK_info" {
     block_c45lK_info:
         const _c45lK;
         const 134;
         const 30;
 },
 _c45lP() //  [R1]
         { []
         }
     {offset
       c45lP: // global
           I64[Sp] = block_c45lT_info;
           R2 = P64[Sp + 64];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = P64[Sp + 56];
           P64[Sp + 16] = R1;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45lP_info" {
     block_c45lP_info:
         const _c45lP;
         const 136;
         const 30;
 },
 _c45lT() //  [R1]
         { []
         }
     {offset
       c45lT: // global
           if (R1 & 7 == 1) goto c45n5; else goto c45nc;
       c45n5: // global
           I64[Sp] = block_c45lX_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = P64[Sp + 40];
           Sp = Sp - 24;
           call GHC.Real.quotRem_entry(R2) args: 32, res: 8, upd: 8;
       c45nc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45nf; else goto c45ne;
       c45nf: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c45ne: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 14;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45lT_info" {
     block_c45lT_info:
         const _c45lT;
         const 8;
         const 30;
 },
 _c45lX() //  [R1]
         { []
         }
     {offset
       c45lX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45n8; else goto c45n7;
       c45n8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c45n7: // global
           _s43Sk::P64 = P64[R1 + 7];
           _s43Sl::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           P64[Sp + 32] = _s43Sk::P64;
           P64[Sp + 16] = _s43Sl::P64;
           P64[Sp + 8] = Hp - 14;
           Sp = Sp + 8;
           call _c45lL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c45lX_info" {
     block_c45lX_info:
         const _c45lX;
         const 520;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.700298904 UTC

[section ""data" . sat_s43Sn_closure" {
     sat_s43Sn_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.702411888 UTC

[section ""data" . sat_s43So_closure" {
     sat_s43So_closure:
         const :_con_info;
         const sat_s43Sn_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.704883747 UTC

[section ""data" . Numeric.showHex1_closure" {
     Numeric.showHex1_closure:
         const Numeric.showHex1_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showHex1_entry() //  [R1]
         { []
         }
     {offset
       c45pc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45pd; else goto c45pe;
       c45pd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45pe: // global
           (_c45p9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c45p9::I64 == 0) goto c45pb; else goto c45pa;
       c45pb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c45pa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c45p9::I64;
           R3 = sat_s43So_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showHex1_info" {
     Numeric.showHex1_info:
         const Numeric.showHex1_entry;
         const 0;
         const 4294967317;
         const S43WU_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.710264758 UTC

[section ""data" . Numeric.showHex_closure" {
     Numeric.showHex_closure:
         const Numeric.showHex_info;
         const 0;
 },
 sat_s43St_entry() //  [R1]
         { []
         }
     {offset
       c45pw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45pA; else goto c45pB;
       c45pA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45pB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c45pu_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43St_info" {
     sat_s43St_info:
         const sat_s43St_entry;
         const 1;
         const 4294967312;
         const S43WU_srt+256;
 },
 _c45pu() //  [R1]
         { []
         }
     {offset
       c45pu: // global
           I64[Sp] = block_c45pz_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c45pu_info" {
     block_c45pu_info:
         const _c45pu;
         const 0;
         const 4294967326;
         const S43WU_srt+256;
 },
 _c45pz() //  [R1]
         { []
         }
     {offset
       c45pz: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Numeric.showHex1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45pz_info" {
     block_c45pz_info:
         const _c45pz;
         const 0;
         const 4294967326;
         const S43WU_srt+256;
 },
 Numeric.showHex_entry() //  [R2, R3]
         { []
         }
     {offset
       c45pH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45pL; else goto c45pK;
       c45pL: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showHex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c45pK: // global
           I64[Hp - 16] = sat_s43St_info;
           P64[Hp] = R2;
           R5 = GHC.Show.intToDigit_closure+1;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showIntAtBase_closure+6;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showHex_info" {
     Numeric.showHex_info:
         const Numeric.showHex_entry;
         const 0;
         const 124554051598;
         const 8589934607;
         const S43WU_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.722647274 UTC

[section ""cstring" . Numeric.$trModule4_bytes" {
     Numeric.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.726362321 UTC

[section ""data" . loc_r43OK_closure" {
     loc_r43OK_closure:
         const loc_r43OK_info;
         const 0;
         const 0;
         const 0;
 },
 loc_r43OK_entry() //  [R1]
         { []
         }
     {offset
       c45q7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45q8; else goto c45q9;
       c45q8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45q9: // global
           (_c45q4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c45q4::I64 == 0) goto c45q6; else goto c45q5;
       c45q6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c45q5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c45q4::I64;
           R2 = Numeric.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc_r43OK_info" {
     loc_r43OK_info:
         const loc_r43OK_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.731198664 UTC

[section ""cstring" . Numeric.$trModule2_bytes" {
     Numeric.$trModule2_bytes:
         I8[] [78,117,109,101,114,105,99]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.734911949 UTC

[section ""data" . loc1_r43OL_closure" {
     loc1_r43OL_closure:
         const loc1_r43OL_info;
         const 0;
         const 0;
         const 0;
 },
 loc1_r43OL_entry() //  [R1]
         { []
         }
     {offset
       c45qo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45qp; else goto c45qq;
       c45qp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45qq: // global
           (_c45ql::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c45ql::I64 == 0) goto c45qn; else goto c45qm;
       c45qn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c45qm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c45ql::I64;
           R2 = Numeric.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc1_r43OL_info" {
     loc1_r43OL_info:
         const loc1_r43OL_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.740748234 UTC

[section ""cstring" . loc2_r43OM_bytes" {
     loc2_r43OM_bytes:
         I8[] [78,117,109,101,114,105,99,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.744392973 UTC

[section ""data" . loc3_r43ON_closure" {
     loc3_r43ON_closure:
         const loc3_r43ON_info;
         const 0;
         const 0;
         const 0;
 },
 loc3_r43ON_entry() //  [R1]
         { []
         }
     {offset
       c45qF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45qG; else goto c45qH;
       c45qG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45qH: // global
           (_c45qC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c45qC::I64 == 0) goto c45qE; else goto c45qD;
       c45qE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c45qD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c45qC::I64;
           R2 = loc2_r43OM_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc3_r43ON_info" {
     loc3_r43ON_info:
         const loc3_r43ON_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.750395069 UTC

[section ""data" . loc4_r43OO_closure" {
     loc4_r43OO_closure:
         const GHC.Types.I#_con_info;
         const 241;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.752887499 UTC

[section ""data" . loc5_r43OP_closure" {
     loc5_r43OP_closure:
         const GHC.Types.I#_con_info;
         const 22;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.755733999 UTC

[section ""data" . loc6_r43OQ_closure" {
     loc6_r43OQ_closure:
         const GHC.Types.I#_con_info;
         const 75;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.758318432 UTC

[section ""cstring" . $dIP_r43OR_bytes" {
     $dIP_r43OR_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.762807565 UTC

[section ""data" . $dIP1_r43OS_closure" {
     $dIP1_r43OS_closure:
         const $dIP1_r43OS_info;
         const 0;
         const 0;
         const 0;
 },
 $dIP1_r43OS_entry() //  [R1]
         { []
         }
     {offset
       c45qZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45r0; else goto c45r1;
       c45r0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45r1: // global
           (_c45qW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c45qW::I64 == 0) goto c45qY; else goto c45qX;
       c45qY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c45qX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c45qW::I64;
           R2 = $dIP_r43OR_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dIP1_r43OS_info" {
     $dIP1_r43OS_info:
         const $dIP1_r43OS_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.768413472 UTC

[section ""data" . $dIP2_r43OT_closure" {
     $dIP2_r43OT_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const loc_r43OK_closure;
         const loc1_r43OL_closure;
         const loc3_r43ON_closure;
         const loc4_r43OO_closure+1;
         const loc5_r43OP_closure+1;
         const loc4_r43OO_closure+1;
         const loc6_r43OQ_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.771248096 UTC

[section ""data" . $dIP3_r43OU_closure" {
     $dIP3_r43OU_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const $dIP1_r43OS_closure;
         const $dIP2_r43OT_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.773805024 UTC

[section ""cstring" . lvl3_r43OV_bytes" {
     lvl3_r43OV_bytes:
         I8[] [73,109,112,111,115,115,105,98,108,101,32,104,97,112,112,101,110,101,100,58,32,115,104,111,119,72,70,108,111,97,116,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.776426348 UTC

[section ""data" . lvl4_r43OW_closure" {
     lvl4_r43OW_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)2_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.783642223 UTC

[section ""data" . $wlvl2_r43OX_closure" {
     $wlvl2_r43OX_closure:
         const $wlvl2_r43OX_info;
         const 0;
 },
 sat_s43SB_entry() //  [R1, R2]
         { []
         }
     {offset
       c45rt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c45ru; else goto c45rv;
       c45ru: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c45rv: // global
           I64[Sp - 8] = block_c45rq_info;
           R4 = R2;
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp - 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s43SB_info" {
     sat_s43SB_info:
         const sat_s43SB_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _c45rq() //  [R1, R2]
         { []
         }
     {offset
       c45rq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45ry; else goto c45rx;
       c45ry: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c45rx: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45rq_info" {
     block_c45rq_info:
         const _c45rq;
         const 0;
         const 30;
 },
 sat_s43Sw_entry() //  [R1, R2]
         { []
         }
     {offset
       c45rF: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Show.$fShowInt_$cshowList_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s43Sw_info" {
     sat_s43Sw_info:
         const sat_s43Sw_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s43SE_entry() //  [R1]
         { []
         }
     {offset
       c45rJ: // global
           _s43SE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c45rK; else goto c45rL;
       c45rL: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c45rN; else goto c45rM;
       c45rN: // global
           HpAlloc = 80;
           goto c45rK;
       c45rK: // global
           R1 = _s43SE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45rM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s43SE::P64;
           _s43Su::P64 = P64[_s43SE::P64 + 16];
           _s43Sv::I64 = I64[_s43SE::P64 + 24];
           I64[Hp - 72] = sat_s43SB_info;
           I64[Hp - 64] = _s43Sv::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           I64[Hp - 32] = sat_s43Sw_info;
           P64[Hp - 24] = _s43Su::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 54;
           R3 = lvl4_r43OW_closure+2;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43SE_info" {
     sat_s43SE_info:
         const sat_s43SE_entry;
         const 4294967297;
         const 4294967315;
         const S43WU_srt+280;
 },
 $wlvl2_r43OX_entry() //  [R2, R3]
         { []
         }
     {offset
       c45rR: // global
           _s43Sv::I64 = R3;
           _s43Su::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c45rS; else goto c45rT;
       c45rT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c45rV; else goto c45rU;
       c45rV: // global
           HpAlloc = 56;
           goto c45rS;
       c45rS: // global
           R3 = _s43Sv::I64;
           R2 = _s43Su::P64;
           R1 = $wlvl2_r43OX_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c45rU: // global
           I64[Hp - 48] = sat_s43SE_info;
           P64[Hp - 32] = _s43Su::P64;
           I64[Hp - 24] = _s43Sv::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           I64[Sp - 8] = block_c45rP_info;
           R3 = Hp - 14;
           R2 = lvl3_r43OV_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl2_r43OX_info" {
     $wlvl2_r43OX_info:
         const $wlvl2_r43OX_entry;
         const 0;
         const 64424509454;
         const 8589934606;
         const S43WU_srt+280;
 },
 _c45rP() //  [R1]
         { []
         }
     {offset
       c45rP: // global
           R3 = R1;
           R2 = $dIP3_r43OU_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45rP_info" {
     block_c45rP_info:
         const _c45rP;
         const 0;
         const 12884901918;
         const S43WU_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.800154352 UTC

[section ""data" . Numeric.showHFloat_allZ_closure" {
     Numeric.showHFloat_allZ_closure:
         const Numeric.showHFloat_allZ_info;
 },
 Numeric.showHFloat_allZ_entry() //  [R2]
         { []
         }
     {offset
       c45sB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45sC; else goto u45sU;
       c45sC: // global
           R2 = R2;
           R1 = Numeric.showHFloat_allZ_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u45sU: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c45sr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Numeric.showHFloat_allZ_info" {
     Numeric.showHFloat_allZ_info:
         const Numeric.showHFloat_allZ_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c45sr() //  []
         { []
         }
     {offset
       c45sr: // global
           _s43SH::P64 = P64[Sp];
           I64[Sp] = block_c45su_info;
           R1 = _s43SH::P64;
           if (R1 & 7 != 0) goto u45sW; else goto c45sv;
       u45sW: // global
           call _c45su(R1) args: 0, res: 0, upd: 0;
       c45sv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c45su() //  [R1]
         { []
         }
     {offset
       c45su: // global
           if (R1 & 7 == 1) goto c45sy; else goto c45sz;
       c45sy: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c45sz: // global
           I64[Sp - 8] = block_c45sJ_info;
           _s43SK::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s43SK::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u45sX; else goto c45sL;
       u45sX: // global
           call _c45sJ(R1) args: 0, res: 0, upd: 0;
       c45sL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45su_info" {
     block_c45su_info:
         const _c45su;
         const 0;
         const 30;
 },
 _c45sJ() //  [R1]
         { []
         }
     {offset
       c45sJ: // global
           if (I64[R1 + 7] == 0) goto c45sT; else goto c45sS;
       c45sT: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c45sr() args: 0, res: 0, upd: 0;
       c45sS: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45sJ_info" {
     block_c45sJ_info:
         const _c45sJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.810785871 UTC

[section ""data" . $wshowIt1_r43OY_closure" {
     $wshowIt1_r43OY_closure:
         const $wshowIt1_r43OY_info;
         const 0;
 },
 $wshowIt1_r43OY_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c45tC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45tD; else goto u45tP;
       c45tD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wshowIt1_r43OY_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u45tP: // global
           I64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c45tl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wshowIt1_r43OY_info" {
     $wshowIt1_r43OY_info:
         const $wshowIt1_r43OY_entry;
         const 0;
         const 12884901902;
         const 12884901907;
         const S43WU_srt+312;
 },
 _c45tl() //  []
         { []
         }
     {offset
       c45tl: // global
           I64[Sp - 8] = block_c45to_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u45tR; else goto c45tp;
       u45tR: // global
           call _c45to(R1) args: 0, res: 0, upd: 0;
       c45tp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c45to() //  [R1]
         { []
         }
     {offset
       c45to: // global
           I64[Sp] = block_c45tt_info;
           R2 = I64[R1 + 7];
           call GHC.Show.$wintToDigit_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45to_info" {
     block_c45to_info:
         const _c45to;
         const 195;
         const 4294967326;
         const S43WU_srt+312;
 },
 _c45tt() //  [R1]
         { []
         }
     {offset
       c45tt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c45tI; else goto c45tH;
       c45tI: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c45tH: // global
           _s43SQ::P64 = P64[Sp + 24];
           _s43SU::I64 = I64[Sp + 8];
           if (_s43SU::I64 == 0) goto c45tO; else goto c45tK;
       c45tO: // global
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R1;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s43SQ::P64;
           _c45tN::P64 = Hp - 30;
           Hp = Hp - 16;
           R1 = _c45tN::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c45tK: // global
           (_s43SW::I64, _s43SX::I64) = call MO_S_QuotRem W64(_s43SU::I64, 16);
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R1;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s43SQ::P64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s43SX::I64;
           I64[Sp + 8] = _s43SW::I64;
           P64[Sp + 16] = Hp - 7;
           P64[Sp + 24] = Hp - 30;
           Sp = Sp + 8;
           call _c45tl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c45tt_info" {
     block_c45tt_info:
         const _c45tt;
         const 195;
         const 4294967326;
         const S43WU_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.823450646 UTC

[section ""data" . $wshowIt2_r43OZ_closure" {
     $wshowIt2_r43OZ_closure:
         const $wshowIt2_r43OZ_info;
         const 0;
 },
 $wshowIt2_r43OZ_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c45uw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45ux; else goto u45uJ;
       c45ux: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wshowIt2_r43OZ_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u45uJ: // global
           I64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c45uf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wshowIt2_r43OZ_info" {
     $wshowIt2_r43OZ_info:
         const $wshowIt2_r43OZ_entry;
         const 0;
         const 21474836494;
         const 12884901907;
         const S43WU_srt+312;
 },
 _c45uf() //  []
         { []
         }
     {offset
       c45uf: // global
           I64[Sp - 8] = block_c45ui_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u45uL; else goto c45uj;
       u45uL: // global
           call _c45ui(R1) args: 0, res: 0, upd: 0;
       c45uj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c45ui() //  [R1]
         { []
         }
     {offset
       c45ui: // global
           I64[Sp] = block_c45un_info;
           R2 = I64[R1 + 7];
           call GHC.Show.$wintToDigit_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45ui_info" {
     block_c45ui_info:
         const _c45ui;
         const 195;
         const 4294967326;
         const S43WU_srt+312;
 },
 _c45un() //  [R1]
         { []
         }
     {offset
       c45un: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c45uC; else goto c45uB;
       c45uC: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c45uB: // global
           _s43T4::P64 = P64[Sp + 24];
           _s43T8::I64 = I64[Sp + 8];
           if (_s43T8::I64 == 0) goto c45uI; else goto c45uE;
       c45uI: // global
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R1;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s43T4::P64;
           _c45uH::P64 = Hp - 30;
           Hp = Hp - 16;
           R1 = _c45uH::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c45uE: // global
           (_s43Ta::I64, _s43Tb::I64) = call MO_S_QuotRem W64(_s43T8::I64, 16);
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R1;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s43T4::P64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s43Tb::I64;
           I64[Sp + 8] = _s43Ta::I64;
           P64[Sp + 16] = Hp - 7;
           P64[Sp + 24] = Hp - 30;
           Sp = Sp + 8;
           call _c45uf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c45un_info" {
     block_c45un_info:
         const _c45un;
         const 195;
         const 4294967326;
         const S43WU_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.836846578 UTC

[section ""data" . $wshowIt3_r43P0_closure" {
     $wshowIt3_r43P0_closure:
         const $wshowIt3_r43P0_info;
         const 0;
 },
 $wshowIt3_r43P0_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c45vq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45vr; else goto u45vD;
       c45vr: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wshowIt3_r43P0_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u45vD: // global
           I64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c45v9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wshowIt3_r43P0_info" {
     $wshowIt3_r43P0_info:
         const $wshowIt3_r43P0_entry;
         const 0;
         const 38654705678;
         const 12884901907;
         const S43WU_srt+312;
 },
 _c45v9() //  []
         { []
         }
     {offset
       c45v9: // global
           I64[Sp - 8] = block_c45vc_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u45vF; else goto c45vd;
       u45vF: // global
           call _c45vc(R1) args: 0, res: 0, upd: 0;
       c45vd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c45vc() //  [R1]
         { []
         }
     {offset
       c45vc: // global
           I64[Sp] = block_c45vh_info;
           R2 = I64[R1 + 7];
           call GHC.Show.$wintToDigit_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45vc_info" {
     block_c45vc_info:
         const _c45vc;
         const 195;
         const 4294967326;
         const S43WU_srt+312;
 },
 _c45vh() //  [R1]
         { []
         }
     {offset
       c45vh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c45vw; else goto c45vv;
       c45vw: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c45vv: // global
           _s43Ti::P64 = P64[Sp + 24];
           _s43Tm::I64 = I64[Sp + 8];
           if (_s43Tm::I64 == 0) goto c45vC; else goto c45vy;
       c45vC: // global
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R1;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s43Ti::P64;
           _c45vB::P64 = Hp - 30;
           Hp = Hp - 16;
           R1 = _c45vB::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c45vy: // global
           (_s43To::I64, _s43Tp::I64) = call MO_S_QuotRem W64(_s43Tm::I64, 16);
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R1;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s43Ti::P64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s43Tp::I64;
           I64[Sp + 8] = _s43To::I64;
           P64[Sp + 16] = Hp - 7;
           P64[Sp + 24] = Hp - 30;
           Sp = Sp + 8;
           call _c45v9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c45vh_info" {
     block_c45vh_info:
         const _c45vh;
         const 195;
         const 4294967326;
         const S43WU_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.852808634 UTC

[section ""data" . $wshowIt4_r43P1_closure" {
     $wshowIt4_r43P1_closure:
         const $wshowIt4_r43P1_info;
         const 0;
 },
 $wshowIt4_r43P1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c45wk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45wl; else goto u45wx;
       c45wl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wshowIt4_r43P1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u45wx: // global
           I64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c45w3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wshowIt4_r43P1_info" {
     $wshowIt4_r43P1_info:
         const $wshowIt4_r43P1_entry;
         const 0;
         const 73014444046;
         const 12884901907;
         const S43WU_srt+312;
 },
 _c45w3() //  []
         { []
         }
     {offset
       c45w3: // global
           I64[Sp - 8] = block_c45w6_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u45wz; else goto c45w7;
       u45wz: // global
           call _c45w6(R1) args: 0, res: 0, upd: 0;
       c45w7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c45w6() //  [R1]
         { []
         }
     {offset
       c45w6: // global
           I64[Sp] = block_c45wb_info;
           R2 = I64[R1 + 7];
           call GHC.Show.$wintToDigit_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45w6_info" {
     block_c45w6_info:
         const _c45w6;
         const 195;
         const 4294967326;
         const S43WU_srt+312;
 },
 _c45wb() //  [R1]
         { []
         }
     {offset
       c45wb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c45wq; else goto c45wp;
       c45wq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c45wp: // global
           _s43Tw::P64 = P64[Sp + 24];
           _s43TA::I64 = I64[Sp + 8];
           if (_s43TA::I64 == 0) goto c45ww; else goto c45ws;
       c45ww: // global
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R1;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s43Tw::P64;
           _c45wv::P64 = Hp - 30;
           Hp = Hp - 16;
           R1 = _c45wv::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c45ws: // global
           (_s43TC::I64, _s43TD::I64) = call MO_S_QuotRem W64(_s43TA::I64, 16);
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R1;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s43Tw::P64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s43TD::I64;
           I64[Sp + 8] = _s43TC::I64;
           P64[Sp + 16] = Hp - 7;
           P64[Sp + 24] = Hp - 30;
           Sp = Sp + 8;
           call _c45w3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c45wb_info" {
     block_c45wb_info:
         const _c45wb;
         const 195;
         const 4294967326;
         const S43WU_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.87001134 UTC

[section ""data" . Numeric.showHFloat_hex_closure" {
     Numeric.showHFloat_hex_closure:
         const Numeric.showHFloat_hex_info;
         const 0;
 },
 sat_s43UO_entry() //  [R1]
         { []
         }
     {offset
       c45y7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45y8; else goto c45y9;
       c45y8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45y9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Numeric.showHFloat_hex_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43UO_info" {
     sat_s43UO_info:
         const sat_s43UO_entry;
         const 1;
         const 4294967312;
         const S43WU_srt+352;
 },
 Numeric.showHFloat_hex_entry() //  [R2]
         { []
         }
     {offset
       c45ye: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c45yf; else goto c45yg;
       c45yf: // global
           R2 = R2;
           R1 = Numeric.showHFloat_hex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c45yg: // global
           I64[Sp - 8] = block_c45x0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u45Ar; else goto c45x1;
       u45Ar: // global
           call _c45x0(R1) args: 0, res: 0, upd: 0;
       c45x1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showHFloat_hex_info" {
     Numeric.showHFloat_hex_info:
         const Numeric.showHFloat_hex_entry;
         const 0;
         const 4362866433982478;
         const 4294967301;
         const S43WU_srt+200;
 },
 _c45x0() //  [R1]
         { []
         }
     {offset
       c45x0: // global
           if (R1 & 7 == 1) goto c45yb; else goto c45yc;
       c45yb: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c45yc: // global
           I64[Sp - 8] = block_c45x6_info;
           _s43TK::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s43TK::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u45Ah; else goto c45x7;
       u45Ah: // global
           call _c45x6(R1) args: 0, res: 0, upd: 0;
       c45x7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45x0_info" {
     block_c45x0_info:
         const _c45x0;
         const 0;
         const 4362866433982494;
         const S43WU_srt+200;
 },
 _c45x6() //  [R1]
         { []
         }
     {offset
       c45x6: // global
           if (R1 & 7 == 1) goto c45yo; else goto c45yH;
       c45yo: // global
           _s43TK::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c45yl_info;
           R1 = _s43TK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u45Ai; else goto c45yp;
       u45Ai: // global
           call _c45yl(R1) args: 0, res: 0, upd: 0;
       c45yp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c45yH: // global
           I64[Sp - 8] = block_c45xc_info;
           _s43TV::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s43TV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u45Aj; else goto c45xd;
       u45Aj: // global
           call _c45xc(R1) args: 0, res: 0, upd: 0;
       c45xd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45x6_info" {
     block_c45x6_info:
         const _c45x6;
         const 1;
         const 4362866433982494;
         const S43WU_srt+200;
 },
 _c45yl() //  [R1]
         { []
         }
     {offset
       c45yl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c45yv; else goto c45yu;
       c45yv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c45yu: // global
           _s43TP::I64 = I64[R1 + 7] << 3;
           if (%MO_S_Ge_W64(_s43TP::I64, 0)) goto c45yE; else goto c45yF;
       c45yE: // global
           (_s43TS::I64, _s43TT::I64) = call MO_S_QuotRem W64(_s43TP::I64, 16);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s43TT::I64;
           R4 = GHC.Types.[]_closure+1;
           R3 = Hp - 7;
           R2 = _s43TS::I64;
           Sp = Sp + 8;
           call $wshowIt4_r43P1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c45yF: // global
           Hp = Hp - 16;
           R2 = _s43TP::I64;
           Sp = Sp + 8;
           call Numeric.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45yl_info" {
     block_c45yl_info:
         const _c45yl;
         const 0;
         const 1125904201809950;
         const S43WU_srt+200;
 },
 _c45xc() //  [R1]
         { []
         }
     {offset
       c45xc: // global
           if (R1 & 7 == 1) goto c45yR; else goto c45zh;
       c45yR: // global
           I64[Sp] = block_c45yJ_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u45Ak; else goto c45yK;
       u45Ak: // global
           call _c45yJ(R1) args: 0, res: 0, upd: 0;
       c45yK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c45zh: // global
           I64[Sp - 8] = block_c45xi_info;
           _s43Ua::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s43Ua::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u45Al; else goto c45xj;
       u45Al: // global
           call _c45xi(R1) args: 0, res: 0, upd: 0;
       c45xj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45xc_info" {
     block_c45xc_info:
         const _c45xc;
         const 2;
         const 3236966527139870;
         const S43WU_srt+200;
 },
 _c45yJ() //  [R1]
         { []
         }
     {offset
       c45yJ: // global
           _s43TV::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c45yO_info;
           _s43TZ::I64 = I64[R1 + 7];
           R1 = _s43TV::P64;
           I64[Sp + 16] = _s43TZ::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u45As; else goto c45yT;
       u45As: // global
           call _c45yO(R1) args: 0, res: 0, upd: 0;
       c45yT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45yJ_info" {
     block_c45yJ_info:
         const _c45yJ;
         const 130;
         const 562954248388638;
         const S43WU_srt+200;
 },
 _c45yO() //  [R1]
         { []
         }
     {offset
       c45yO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c45yZ; else goto c45yY;
       c45yZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c45yY: // global
           _s43U2::I64 = (I64[Sp + 8] << 3) + (I64[R1 + 7] << 2);
           if (%MO_S_Ge_W64(_s43U2::I64, 0)) goto c45ze; else goto c45zf;
       c45ze: // global
           (_s43U7::I64, _s43U8::I64) = call MO_S_QuotRem W64(_s43U2::I64, 16);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s43U8::I64;
           R4 = GHC.Types.[]_closure+1;
           R3 = Hp - 7;
           R2 = _s43U7::I64;
           Sp = Sp + 16;
           call $wshowIt3_r43P0_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c45zf: // global
           Hp = Hp - 16;
           R2 = _s43U2::I64;
           Sp = Sp + 16;
           call Numeric.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45yO_info" {
     block_c45yO_info:
         const _c45yO;
         const 65;
         const 562954248388638;
         const S43WU_srt+200;
 },
 _c45xi() //  [R1]
         { []
         }
     {offset
       c45xi: // global
           _s43TK::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c45zw; else goto c45A3;
       c45zw: // global
           I64[Sp] = block_c45zj_info;
           R1 = _s43TK::P64;
           if (R1 & 7 != 0) goto u45Am; else goto c45zk;
       u45Am: // global
           call _c45zj(R1) args: 0, res: 0, upd: 0;
       c45zk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c45A3: // global
           I64[Sp - 8] = block_c45xo_info;
           _s43Ut::P64 = P64[R1 + 6];
           _s43Uu::P64 = P64[R1 + 14];
           R1 = _s43TK::P64;
           P64[Sp] = _s43Uu::P64;
           P64[Sp + 24] = _s43Ut::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u45An; else goto c45xp;
       u45An: // global
           call _c45xo(R1) args: 0, res: 0, upd: 0;
       c45xp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45xi_info" {
     block_c45xi_info:
         const _c45xi;
         const 3;
         const 2674016573718558;
         const S43WU_srt+200;
 },
 _c45zj() //  [R1]
         { []
         }
     {offset
       c45zj: // global
           I64[Sp] = block_c45zo_info;
           _s43Ue::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 24] = _s43Ue::I64;
           if (R1 & 7 != 0) goto u45At; else goto c45zp;
       u45At: // global
           call _c45zo(R1) args: 0, res: 0, upd: 0;
       c45zp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45zj_info" {
     block_c45zj_info:
         const _c45zj;
         const 259;
         const 281479271677982;
         const S43WU_srt+200;
 },
 _c45zo() //  [R1]
         { []
         }
     {offset
       c45zo: // global
           _s43Ua::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c45zt_info;
           _s43Ug::I64 = I64[R1 + 7];
           R1 = _s43Ua::P64;
           I64[Sp + 16] = _s43Ug::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u45Au; else goto c45zz;
       u45Au: // global
           call _c45zt(R1) args: 0, res: 0, upd: 0;
       c45zz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45zo_info" {
     block_c45zo_info:
         const _c45zo;
         const 387;
         const 281479271677982;
         const S43WU_srt+200;
 },
 _c45zt() //  [R1]
         { []
         }
     {offset
       c45zt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c45zF; else goto c45zE;
       c45zF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c45zE: // global
           _s43Uj::I64 = (I64[Sp + 16] << 3) + ((I64[Sp + 8] << 2) + (I64[R1 + 7] << 1));
           if (%MO_S_Ge_W64(_s43Uj::I64, 0)) goto c45A0; else goto c45A1;
       c45A0: // global
           (_s43Uq::I64, _s43Ur::I64) = call MO_S_QuotRem W64(_s43Uj::I64, 16);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s43Ur::I64;
           R4 = GHC.Types.[]_closure+1;
           R3 = Hp - 7;
           R2 = _s43Uq::I64;
           Sp = Sp + 24;
           call $wshowIt2_r43OZ_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c45A1: // global
           Hp = Hp - 16;
           R2 = _s43Uj::I64;
           Sp = Sp + 24;
           call Numeric.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45zt_info" {
     block_c45zt_info:
         const _c45zt;
         const 194;
         const 281479271677982;
         const S43WU_srt+200;
 },
 _c45xo() //  [R1]
         { []
         }
     {offset
       c45xo: // global
           I64[Sp] = block_c45xt_info;
           _s43Uw::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s43Uw::I64;
           if (R1 & 7 != 0) goto u45Ao; else goto c45xu;
       u45Ao: // global
           call _c45xt(R1) args: 0, res: 0, upd: 0;
       c45xu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45xo_info" {
     block_c45xo_info:
         const _c45xo;
         const 4;
         const 2392541597007902;
         const S43WU_srt+200;
 },
 _c45xt() //  [R1]
         { []
         }
     {offset
       c45xt: // global
           I64[Sp] = block_c45xy_info;
           _s43Uy::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s43Uy::I64;
           if (R1 & 7 != 0) goto u45Ap; else goto c45xz;
       u45Ap: // global
           call _c45xy(R1) args: 0, res: 0, upd: 0;
       c45xz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45xt_info" {
     block_c45xt_info:
         const _c45xt;
         const 260;
         const 2392541597007902;
         const S43WU_srt+200;
 },
 _c45xy() //  [R1]
         { []
         }
     {offset
       c45xy: // global
           I64[Sp] = block_c45xD_info;
           _s43UA::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s43UA::I64;
           if (R1 & 7 != 0) goto u45Aq; else goto c45xE;
       u45Aq: // global
           call _c45xD(R1) args: 0, res: 0, upd: 0;
       c45xE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45xy_info" {
     block_c45xy_info:
         const _c45xy;
         const 388;
         const 2392541597007902;
         const S43WU_srt+200;
 },
 _c45xD() //  [R1]
         { []
         }
     {offset
       c45xD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c45A9; else goto c45A8;
       c45A9: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c45A8: // global
           _s43UD::I64 = (I64[Sp + 24] << 3) + ((I64[Sp + 16] << 2) + ((I64[Sp + 32] << 1) + I64[R1 + 7]));
           if (%MO_S_Ge_W64(_s43UD::I64, 0)) goto c45Ac; else goto c45Ad;
       c45Ac: // global
           _s43Uu::P64 = P64[Sp + 8];
           (_s43UL::I64, _s43UM::I64) = call MO_S_QuotRem W64(_s43UD::I64, 16);
           I64[Hp - 32] = sat_s43UO_info;
           P64[Hp - 16] = _s43Uu::P64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s43UM::I64;
           R4 = Hp - 32;
           R3 = Hp - 7;
           R2 = _s43UL::I64;
           Sp = Sp + 40;
           call $wshowIt1_r43OY_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c45Ad: // global
           Hp = Hp - 40;
           R2 = _s43UD::I64;
           Sp = Sp + 40;
           call Numeric.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45xD_info" {
     block_c45xD_info:
         const _c45xD;
         const 900;
         const 2392541597007902;
         const S43WU_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.902799732 UTC

[section ""data" . sat_s43UP_closure" {
     sat_s43UP_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.90471141 UTC

[section ""data" . sat_s43UQ_closure" {
     sat_s43UQ_closure:
         const :_con_info;
         const sat_s43UP_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.908097791 UTC

[section ""data" . Numeric.showHFloat15_closure" {
     Numeric.showHFloat15_closure:
         const Numeric.showHFloat15_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showHFloat15_entry() //  [R1]
         { []
         }
     {offset
       c45C5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45C6; else goto c45C7;
       c45C6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45C7: // global
           (_c45C2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c45C2::I64 == 0) goto c45C4; else goto c45C3;
       c45C4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c45C3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c45C2::I64;
           R3 = sat_s43UQ_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showHFloat15_info" {
     Numeric.showHFloat15_info:
         const Numeric.showHFloat15_entry;
         const 0;
         const 4294967317;
         const S43WU_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.91308733 UTC

[section ""cstring" . Numeric.showHFloat10_bytes" {
     Numeric.showHFloat10_bytes:
         I8[] [48,120,48,112,43,48]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.916462985 UTC

[section ""data" . Numeric.showHFloat9_closure" {
     Numeric.showHFloat9_closure:
         const Numeric.showHFloat9_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showHFloat9_entry() //  [R1]
         { []
         }
     {offset
       c45Cm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45Cn; else goto c45Co;
       c45Cn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45Co: // global
           (_c45Cj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c45Cj::I64 == 0) goto c45Cl; else goto c45Ck;
       c45Cl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c45Ck: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c45Cj::I64;
           R2 = Numeric.showHFloat10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showHFloat9_info" {
     Numeric.showHFloat9_info:
         const Numeric.showHFloat9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.922258941 UTC

[section ""data" . Numeric.showHFloat14_closure" {
     Numeric.showHFloat14_closure:
         const Numeric.showHFloat14_info;
         const 0;
 },
 Numeric.showHFloat14_entry() //  [R2]
         { []
         }
     {offset
       c45CA: // global
           R3 = R2;
           R2 = GHC.Types.[]_closure+1;
           call $wlvl2_r43OX_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showHFloat14_info" {
     Numeric.showHFloat14_info:
         const Numeric.showHFloat14_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S43WU_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.926301262 UTC

[section ""cstring" . Numeric.showHFloat13_bytes" {
     Numeric.showHFloat13_bytes:
         I8[] [48,120]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.927931957 UTC

[section ""cstring" . Numeric.showHFloat12_bytes" {
     Numeric.showHFloat12_bytes:
         I8[] [112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.929771247 UTC

[section ""cstring" . Numeric.showHFloat11_bytes" {
     Numeric.showHFloat11_bytes:
         I8[] [46]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.940137864 UTC

[section ""data" . Numeric.showHFloat_cvt_closure" {
     Numeric.showHFloat_cvt_closure:
         const Numeric.showHFloat_cvt_info;
         const 0;
 },
 sat_s43UZ_entry() //  [R1]
         { []
         }
     {offset
       c45D2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45D3; else goto c45D4;
       c45D3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45D4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c45D0_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43UZ_info" {
     sat_s43UZ_info:
         const sat_s43UZ_entry;
         const 1;
         const 4294967312;
         const S43WU_srt+144;
 },
 _c45D0() //  [R1]
         { []
         }
     {offset
       c45D0: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Numeric.showHFloat16_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45D0_info" {
     block_c45D0_info:
         const _c45D0;
         const 0;
         const 4294967326;
         const S43WU_srt+144;
 },
 sat_s43Vm_entry() //  [R1]
         { []
         }
     {offset
       c45DS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c45E1; else goto c45E2;
       c45E1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45E2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c45DP_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u45E7; else goto c45DQ;
       u45E7: // global
           call _c45DP(R1) args: 0, res: 0, upd: 0;
       c45DQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43Vm_info" {
     sat_s43Vm_info:
         const sat_s43Vm_entry;
         const 1;
         const 16;
 },
 _c45DP() //  [R1]
         { []
         }
     {offset
       c45DP: // global
           I64[Sp] = block_c45DY_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7] - 1;
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c45DP_info" {
     block_c45DP_info:
         const _c45DP;
         const 0;
         const 30;
 },
 _c45DY() //  [R1, R2]
         { []
         }
     {offset
       c45DY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45E6; else goto c45E5;
       c45E6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c45E5: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45DY_info" {
     block_c45DY_info:
         const _c45DY;
         const 0;
         const 30;
 },
 n_s43Vf_entry() //  [R1]
         { []
         }
     {offset
       c45E8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45Ec; else goto c45Eb;
       c45Ec: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45Eb: // global
           _s43V3::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s43Vm_info;
           P64[Hp] = _s43V3::P64;
           R3 = Hp - 16;
           R2 = Numeric.showHFloat12_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . n_s43Vf_info" {
     n_s43Vf_info:
         const n_s43Vf_entry;
         const 1;
         const 16;
 },
 sat_s43Vp_entry() //  [R1]
         { []
         }
     {offset
       c45En: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45Eo; else goto c45Ep;
       c45Eo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45Ep: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c45El_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Numeric.showHFloat_hex_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43Vp_info" {
     sat_s43Vp_info:
         const sat_s43Vp_entry;
         const 2;
         const 4294967314;
         const S43WU_srt+352;
 },
 _c45El() //  [R1]
         { []
         }
     {offset
       c45El: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45El_info" {
     block_c45El_info:
         const _c45El;
         const 1;
         const 30;
 },
 sat_s43Vq_entry() //  [R1]
         { []
         }
     {offset
       c45Ex: // global
           _s43Vq::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c45Ey; else goto c45Ez;
       c45Ez: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45EB; else goto c45EA;
       c45EB: // global
           HpAlloc = 24;
           goto c45Ey;
       c45Ey: // global
           R1 = _s43Vq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45EA: // global
           _s43V3::P64 = P64[_s43Vq::P64 + 16];
           _s43V8::P64 = P64[_s43Vq::P64 + 24];
           I64[Hp - 16] = n_s43Vf_info;
           P64[Hp] = _s43V3::P64;
           I64[Sp - 24] = block_c45Ed_info;
           R2 = _s43V8::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _s43V8::P64;
           Sp = Sp - 24;
           call Numeric.showHFloat_allZ_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s43Vq_info" {
     sat_s43Vq_info:
         const sat_s43Vq_entry;
         const 2;
         const 4294967314;
         const S43WU_srt+352;
 },
 _c45Ed() //  [R1]
         { []
         }
     {offset
       c45Ed: // global
           _c45DH::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c45Eu; else goto c45Ev;
       c45Eu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c45EE; else goto c45ED;
       c45EE: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c45ED: // global
           I64[Hp - 24] = sat_s43Vp_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _c45DH::P64;
           R3 = Hp - 24;
           R2 = Numeric.showHFloat11_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c45Ev: // global
           R1 = _c45DH::P64;
           Sp = Sp + 24;
           call n_s43Vf_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45Ed_info" {
     block_c45Ed_info:
         const _c45Ed;
         const 2;
         const 4294967326;
         const S43WU_srt+352;
 },
 sat_s43Vr_entry() //  [R1]
         { []
         }
     {offset
       c45EI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c45EK; else goto c45EL;
       c45EK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45EL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c45Dw_info;
           _s43V3::P64 = P64[R1 + 16];
           _s43V8::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s43V3::P64;
           P64[Sp - 24] = _s43V8::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u45EQ; else goto c45Dx;
       u45EQ: // global
           call _c45Dw(R1) args: 0, res: 0, upd: 0;
       c45Dx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43Vr_info" {
     sat_s43Vr_info:
         const sat_s43Vr_entry;
         const 3;
         const 4294967311;
         const S43WU_srt+352;
 },
 _c45Dw() //  [R1]
         { []
         }
     {offset
       c45Dw: // global
           I64[Sp] = block_c45DB_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c45Dw_info" {
     block_c45Dw_info:
         const _c45Dw;
         const 2;
         const 4294967326;
         const S43WU_srt+352;
 },
 _c45DB() //  [R1, R2]
         { []
         }
     {offset
       c45DB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c45EP; else goto c45EO;
       c45EP: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c45EO: // global
           I64[Hp - 48] = sat_s43Vq_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45DB_info" {
     block_c45DB_info:
         const _c45DB;
         const 2;
         const 4294967326;
         const S43WU_srt+352;
 },
 section ""relreadonly" . u45Fq_srtd" {
     u45Fq_srtd:
         const S43WU_srt+144;
         const 33;
         const 8388608001;
 },
 Numeric.showHFloat_cvt_entry() //  [R2, R3]
         { []
         }
     {offset
       c45ER: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c45ES; else goto c45ET;
       c45ES: // global
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showHFloat_cvt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c45ET: // global
           I64[Sp - 24] = block_c45CO_info;
           _s43US::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s43US::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showHFloat_cvt_info" {
     Numeric.showHFloat_cvt_info:
         const Numeric.showHFloat_cvt_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u45Fq_srtd;
 },
 section ""relreadonly" . u45Fr_srtd" {
     u45Fr_srtd:
         const S43WU_srt+144;
         const 33;
         const 7851737089;
 },
 _c45CO() //  [R1]
         { []
         }
     {offset
       c45CO: // global
           I64[Sp] = block_c45CS_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45CO_info" {
     block_c45CO_info:
         const _c45CO;
         const 2;
         const 18446744069414584350;
         const u45Fr_srtd;
 },
 section ""relreadonly" . u45Fs_srtd" {
     u45Fs_srtd:
         const S43WU_srt+144;
         const 33;
         const 7851737089;
 },
 _c45CS() //  [R1]
         { []
         }
     {offset
       c45CS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45EX; else goto c45EW;
       c45EX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c45EW: // global
           I64[Hp - 16] = sat_s43UZ_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c45D8_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45CS_info" {
     block_c45CS_info:
         const _c45CS;
         const 2;
         const 18446744069414584350;
         const u45Fs_srtd;
 },
 _c45D8() //  [R1]
         { []
         }
     {offset
       c45D8: // global
           I64[Sp] = block_c45Dc_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45D8_info" {
     block_c45D8_info:
         const _c45D8;
         const 3;
         const 502511173662;
         const S43WU_srt+352;
 },
 _c45Dc() //  [R1]
         { []
         }
     {offset
       c45Dc: // global
           _c45CW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c45Dg_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 24];
           P64[Sp] = _c45CW::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45Dc_info" {
     block_c45Dc_info:
         const _c45Dc;
         const 3;
         const 502511173662;
         const S43WU_srt+352;
 },
 _c45Dg() //  [R1]
         { []
         }
     {offset
       c45Dg: // global
           if (R1 & 7 == 1) goto c45F2; else goto c45Fl;
       c45F2: // global
           _s43UT::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c45Dk_info;
           R4 = _s43UT::P64;
           R3 = Numeric.showHFloat15_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Float.$wfloatToDigits_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
       c45Fl: // global
           R1 = Numeric.showHFloat9_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45Dg_info" {
     block_c45Dg_info:
         const _c45Dg;
         const 2;
         const 502511173662;
         const S43WU_srt+352;
 },
 _c45Dk() //  [R1, R2]
         { []
         }
     {offset
       c45Dk: // global
           I64[Sp - 8] = block_c45Dm_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u45Fo; else goto c45Dn;
       u45Fo: // global
           call _c45Dm(R1) args: 0, res: 0, upd: 0;
       c45Dn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c45Dk_info" {
     block_c45Dk_info:
         const _c45Dk;
         const 0;
         const 141733920798;
         const S43WU_srt+352;
 },
 _c45Dm() //  [R1]
         { []
         }
     {offset
       c45Dm: // global
           _s43V3::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c45F8; else goto c45Fe;
       c45F8: // global
           I64[Sp + 8] = block_c45F5_info;
           R1 = _s43V3::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u45Fp; else goto c45F9;
       u45Fp: // global
           call _c45F5(R1) args: 0, res: 0, upd: 0;
       c45F9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c45Fe: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c45Fh; else goto c45Fg;
       c45Fh: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c45Fg: // global
           _s43V7::P64 = P64[R1 + 6];
           _s43V8::P64 = P64[R1 + 14];
           I64[Hp - 32] = sat_s43Vr_info;
           P64[Hp - 16] = _s43V3::P64;
           P64[Hp - 8] = _s43V7::P64;
           P64[Hp] = _s43V8::P64;
           R3 = Hp - 32;
           R2 = Numeric.showHFloat13_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45Dm_info" {
     block_c45Dm_info:
         const _c45Dm;
         const 1;
         const 141733920798;
         const S43WU_srt+352;
 },
 _c45F5() //  [R1]
         { []
         }
     {offset
       c45F5: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call Numeric.showHFloat14_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c45F5_info" {
     block_c45F5_info:
         const _c45F5;
         const 0;
         const 4294967326;
         const S43WU_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.98232542 UTC

[section ""data" . Numeric.showHFloat8_closure" {
     Numeric.showHFloat8_closure:
         const GHC.Types.C#_con_info;
         const 45;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.983891673 UTC

[section ""cstring" . Numeric.showHFloat5_bytes" {
     Numeric.showHFloat5_bytes:
         I8[] [73,110,102,105,110,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.985525021 UTC

[section ""cstring" . Numeric.showHFloat7_bytes" {
     Numeric.showHFloat7_bytes:
         I8[] [45]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.987934447 UTC

[section ""data" . Numeric.showHFloat6_closure" {
     Numeric.showHFloat6_closure:
         const Numeric.showHFloat6_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showHFloat6_entry() //  [R1]
         { []
         }
     {offset
       c45Ha: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45Hb; else goto c45Hc;
       c45Hb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45Hc: // global
           (_c45H7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c45H7::I64 == 0) goto c45H9; else goto c45H8;
       c45H9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c45H8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c45H7::I64;
           R2 = Numeric.showHFloat7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showHFloat6_info" {
     Numeric.showHFloat6_info:
         const Numeric.showHFloat6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.991573055 UTC

[section ""cstring" . Numeric.showHFloat2_bytes" {
     Numeric.showHFloat2_bytes:
         I8[] [78,97,78]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.994352583 UTC

[section ""data" . Numeric.showHFloat1_closure" {
     Numeric.showHFloat1_closure:
         const Numeric.showHFloat1_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showHFloat1_entry() //  [R1]
         { []
         }
     {offset
       c45Hr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45Hs; else goto c45Ht;
       c45Hs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45Ht: // global
           (_c45Ho::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c45Ho::I64 == 0) goto c45Hq; else goto c45Hp;
       c45Hq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c45Hp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c45Ho::I64;
           R2 = Numeric.showHFloat2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showHFloat1_info" {
     Numeric.showHFloat1_info:
         const Numeric.showHFloat1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:56.998697461 UTC

[section ""data" . Numeric.showHFloat4_closure" {
     Numeric.showHFloat4_closure:
         const Numeric.showHFloat4_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showHFloat4_entry() //  [R1]
         { []
         }
     {offset
       c45HH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45HI; else goto c45HJ;
       c45HI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45HJ: // global
           (_c45HE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c45HE::I64 == 0) goto c45HG; else goto c45HF;
       c45HG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c45HF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c45HE::I64;
           R2 = Numeric.showHFloat5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showHFloat4_info" {
     Numeric.showHFloat4_info:
         const Numeric.showHFloat4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.003376137 UTC

[section ""data" . Numeric.showHFloat3_closure" {
     Numeric.showHFloat3_closure:
         const Numeric.showHFloat3_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showHFloat3_entry() //  [R1]
         { []
         }
     {offset
       c45HX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45HY; else goto c45HZ;
       c45HY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45HZ: // global
           (_c45HU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c45HU::I64 == 0) goto c45HW; else goto c45HV;
       c45HW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c45HV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c45HU::I64;
           R3 = Numeric.showHFloat4_closure;
           R2 = Numeric.showHFloat6_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showHFloat3_info" {
     Numeric.showHFloat3_info:
         const Numeric.showHFloat3_entry;
         const 0;
         const 12884901909;
         const S43WU_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.015672347 UTC

[section ""data" . Numeric.showHFloat_closure" {
     Numeric.showHFloat_closure:
         const Numeric.showHFloat_info;
         const 0;
 },
 $dNum_s43Vx_entry() //  [R1]
         { []
         }
     {offset
       c45Iv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45Iw; else goto c45Ix;
       c45Iw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45Ix: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s43Vx_info" {
     $dNum_s43Vx_info:
         const $dNum_s43Vx_entry;
         const 1;
         const 16;
 },
 sat_s43VA_entry() //  [R1]
         { []
         }
     {offset
       c45IG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45IH; else goto c45II;
       c45IH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45II: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Numeric.showHFloat16_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43VA_info" {
     sat_s43VA_info:
         const sat_s43VA_entry;
         const 1;
         const 4294967312;
         const S43WU_srt+424;
 },
 sat_s43VD_entry() //  [R1]
         { []
         }
     {offset
       c45J4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45J5; else goto c45J6;
       c45J5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45J6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43VD_info" {
     sat_s43VD_info:
         const sat_s43VD_entry;
         const 2;
         const 18;
 },
 sat_s43VE_entry() //  [R1]
         { []
         }
     {offset
       c45J7: // global
           _s43VE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c45J8; else goto c45J9;
       c45J9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c45Jb; else goto c45Ja;
       c45Jb: // global
           HpAlloc = 32;
           goto c45J8;
       c45J8: // global
           R1 = _s43VE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45Ja: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s43VE::P64;
           _s43Vs::P64 = P64[_s43VE::P64 + 16];
           _s43Vt::P64 = P64[_s43VE::P64 + 24];
           _s43Vx::P64 = P64[_s43VE::P64 + 32];
           I64[Hp - 24] = sat_s43VD_info;
           P64[Hp - 8] = _s43Vt::P64;
           P64[Hp] = _s43Vx::P64;
           R3 = Hp - 24;
           R2 = _s43Vs::P64;
           Sp = Sp - 16;
           call Numeric.showHFloat_cvt_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43VE_info" {
     sat_s43VE_info:
         const sat_s43VE_entry;
         const 3;
         const 4294967311;
         const S43WU_srt+376;
 },
 sat_s43VF_entry() //  [R1]
         { []
         }
     {offset
       c45Jm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45Jn; else goto c45Jo;
       c45Jn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45Jo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43VF_info" {
     sat_s43VF_info:
         const sat_s43VF_entry;
         const 2;
         const 18;
 },
 sat_s43VG_entry() //  [R1]
         { []
         }
     {offset
       c45Jp: // global
           _s43VG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c45Jq; else goto c45Jr;
       c45Jr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c45Jt; else goto c45Js;
       c45Jt: // global
           HpAlloc = 32;
           goto c45Jq;
       c45Jq: // global
           R1 = _s43VG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45Js: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s43VG::P64;
           _s43Vs::P64 = P64[_s43VG::P64 + 16];
           _s43Vt::P64 = P64[_s43VG::P64 + 24];
           _s43Vx::P64 = P64[_s43VG::P64 + 32];
           I64[Hp - 24] = sat_s43VF_info;
           P64[Hp - 8] = _s43Vt::P64;
           P64[Hp] = _s43Vx::P64;
           R3 = Hp - 24;
           R2 = _s43Vs::P64;
           Sp = Sp - 16;
           call Numeric.showHFloat_cvt_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43VG_info" {
     sat_s43VG_info:
         const sat_s43VG_entry;
         const 3;
         const 4294967311;
         const S43WU_srt+376;
 },
 sat_s43VI_entry() //  [R1]
         { []
         }
     {offset
       c45JA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45JB; else goto c45JC;
       c45JB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45JC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Numeric.showHFloat16_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43VI_info" {
     sat_s43VI_info:
         const sat_s43VI_entry;
         const 1;
         const 4294967312;
         const S43WU_srt+424;
 },
 sat_s43VK_entry() //  [R1]
         { []
         }
     {offset
       c45JH: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c45JI; else goto c45JJ;
       c45JI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45JJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c45If_info;
           _s43Vs::P64 = P64[R1 + 16];
           R2 = _s43Vs::P64;
           I64[Sp - 56] = stg_ap_p_info;
           _s43Vt::P64 = P64[R1 + 24];
           P64[Sp - 48] = _s43Vt::P64;
           P64[Sp - 32] = _s43Vs::P64;
           P64[Sp - 24] = _s43Vt::P64;
           Sp = Sp - 56;
           call GHC.Float.isNaN_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43VK_info" {
     sat_s43VK_info:
         const sat_s43VK_entry;
         const 2;
         const 1997159792658;
         const S43WU_srt+376;
 },
 _c45If() //  [R1]
         { []
         }
     {offset
       c45If: // global
           if (R1 & 7 == 1) goto c45JE; else goto c45JF;
       c45JE: // global
           I64[Sp] = block_c45Ij_info;
           R2 = P64[Sp + 8];
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 24;
       c45JF: // global
           R1 = Numeric.showHFloat1_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45If_info" {
     block_c45If_info:
         const _c45If;
         const 2;
         const 1997159792670;
         const S43WU_srt+376;
 },
 _c45Ij() //  [R1]
         { []
         }
     {offset
       c45Ij: // global
           I64[Sp] = block_c45In_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c45Ij_info" {
     block_c45Ij_info:
         const _c45Ij;
         const 2;
         const 1447403978782;
         const S43WU_srt+376;
 },
 _c45In() //  [R1]
         { []
         }
     {offset
       c45In: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45JO; else goto c45JN;
       c45JO: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c45JN: // global
           I64[Hp - 16] = $dNum_s43Vx_info;
           P64[Hp] = R1;
           I64[Sp - 16] = block_c45Iy_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[Sp + 16];
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Float.isInfinite_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c45In_info" {
     block_c45In_info:
         const _c45In;
         const 2;
         const 1447403978782;
         const S43WU_srt+376;
 },
 _c45Iy() //  [R1]
         { []
         }
     {offset
       c45Iy: // global
           _c45Ir::P64 = P64[Sp + 16];
           _s43Vw::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c45JQ; else goto c45Kd;
       c45JQ: // global
           Hp = Hp + 24;
           _s43Vy::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c45Kg; else goto c45JS;
       c45JS: // global
           I64[Hp - 16] = sat_s43VA_info;
           P64[Hp] = _c45Ir::P64;
           I64[Sp] = block_c45IJ_info;
           R2 = _s43Vw::P64;
           P64[Sp + 8] = Hp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 24;
       c45Kd: // global
           Hp = Hp + 24;
           _s43Vy::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c45Kg; else goto c45Kf;
       c45Kg: // global
           HpAlloc = 24;
           R1 = _s43Vy::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c45Kf: // global
           I64[Hp - 16] = sat_s43VI_info;
           P64[Hp] = _c45Ir::P64;
           I64[Sp + 16] = block_c45Kc_info;
           R2 = _s43Vw::P64;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c45Iy_info" {
     block_c45Iy_info:
         const _c45Iy;
         const 4;
         const 1447403978782;
         const S43WU_srt+376;
 },
 _c45IJ() //  [R1]
         { []
         }
     {offset
       c45IJ: // global
           _c45IC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c45IN_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c45IC::P64;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c45IJ_info" {
     block_c45IJ_info:
         const _c45IJ;
         const 4;
         const 4294967326;
         const S43WU_srt+376;
 },
 _c45IN() //  [R1]
         { []
         }
     {offset
       c45IN: // global
           _s43Vs::P64 = P64[Sp + 16];
           _s43Vt::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c45JX; else goto c45K8;
       c45JX: // global
           I64[Sp] = block_c45IR_info;
           R2 = _s43Vs::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s43Vt::P64;
           Sp = Sp - 16;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 8, upd: 24;
       c45K8: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c45Kb; else goto c45Ka;
       c45Kb: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c45Ka: // global
           I64[Hp - 56] = sat_s43VG_info;
           P64[Hp - 40] = _s43Vs::P64;
           P64[Hp - 32] = _s43Vt::P64;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Numeric.showHFloat8_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45IN_info" {
     block_c45IN_info:
         const _c45IN;
         const 3;
         const 4294967326;
         const S43WU_srt+376;
 },
 _c45IR() //  [R1]
         { []
         }
     {offset
       c45IR: // global
           _s43Vs::P64 = P64[Sp + 16];
           _s43Vt::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c45K1; else goto c45K3;
       c45K1: // global
           R3 = _s43Vt::P64;
           R2 = _s43Vs::P64;
           Sp = Sp + 32;
           call Numeric.showHFloat_cvt_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c45K3: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c45K6; else goto c45K5;
       c45K6: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c45K5: // global
           I64[Hp - 56] = sat_s43VE_info;
           P64[Hp - 40] = _s43Vs::P64;
           P64[Hp - 32] = _s43Vt::P64;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Numeric.showHFloat8_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45IR_info" {
     block_c45IR_info:
         const _c45IR;
         const 3;
         const 4294967326;
         const S43WU_srt+376;
 },
 _c45Kc() //  [R1]
         { []
         }
     {offset
       c45Kc: // global
           _s43Vt::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c45Kk_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s43Vt::P64;
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c45Kc_info" {
     block_c45Kc_info:
         const _c45Kc;
         const 2;
         const 73014444062;
         const S43WU_srt+408;
 },
 _c45Kk() //  [R1]
         { []
         }
     {offset
       c45Kk: // global
           if (R1 & 7 == 1) goto c45Kr; else goto c45Kv;
       c45Kr: // global
           R1 = Numeric.showHFloat4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c45Kv: // global
           R1 = Numeric.showHFloat3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45Kk_info" {
     block_c45Kk_info:
         const _c45Kk;
         const 0;
         const 73014444062;
         const S43WU_srt+408;
 },
 Numeric.showHFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c45KD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c45KH; else goto c45KG;
       c45KH: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showHFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c45KG: // global
           I64[Hp - 24] = sat_s43VK_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showHFloat_info" {
     Numeric.showHFloat_info:
         const Numeric.showHFloat_entry;
         const 0;
         const 4196183048206;
         const 8589934607;
         const S43WU_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.049972925 UTC

[section ""data" . sat_s43VL_closure" {
     sat_s43VL_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.051597315 UTC

[section ""data" . sat_s43VM_closure" {
     sat_s43VM_closure:
         const :_con_info;
         const sat_s43VL_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.055179095 UTC

[section ""data" . Numeric.showOct1_closure" {
     Numeric.showOct1_closure:
         const Numeric.showOct1_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showOct1_entry() //  [R1]
         { []
         }
     {offset
       c45Mh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45Mi; else goto c45Mj;
       c45Mi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45Mj: // global
           (_c45Me::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c45Me::I64 == 0) goto c45Mg; else goto c45Mf;
       c45Mg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c45Mf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c45Me::I64;
           R3 = sat_s43VM_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showOct1_info" {
     Numeric.showOct1_info:
         const Numeric.showOct1_entry;
         const 0;
         const 4294967317;
         const S43WU_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.062553679 UTC

[section ""data" . Numeric.showOct_closure" {
     Numeric.showOct_closure:
         const Numeric.showOct_info;
         const 0;
 },
 sat_s43VR_entry() //  [R1]
         { []
         }
     {offset
       c45MB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45MF; else goto c45MG;
       c45MF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45MG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c45Mz_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43VR_info" {
     sat_s43VR_info:
         const sat_s43VR_entry;
         const 1;
         const 4294967312;
         const S43WU_srt+464;
 },
 _c45Mz() //  [R1]
         { []
         }
     {offset
       c45Mz: // global
           I64[Sp] = block_c45ME_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c45Mz_info" {
     block_c45Mz_info:
         const _c45Mz;
         const 0;
         const 4294967326;
         const S43WU_srt+464;
 },
 _c45ME() //  [R1]
         { []
         }
     {offset
       c45ME: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Numeric.showOct1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45ME_info" {
     block_c45ME_info:
         const _c45ME;
         const 0;
         const 4294967326;
         const S43WU_srt+464;
 },
 Numeric.showOct_entry() //  [R2, R3]
         { []
         }
     {offset
       c45MM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c45MQ; else goto c45MP;
       c45MQ: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showOct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c45MP: // global
           I64[Hp - 16] = sat_s43VR_info;
           P64[Hp] = R2;
           R5 = GHC.Show.intToDigit_closure+1;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showIntAtBase_closure+6;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showOct_info" {
     Numeric.showOct_info:
         const Numeric.showOct_entry;
         const 0;
         const 3458764552475246606;
         const 8589934607;
         const S43WU_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.073630387 UTC

[section ""data" . Numeric.$trModule3_closure" {
     Numeric.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Numeric.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.075847272 UTC

[section ""data" . Numeric.$trModule1_closure" {
     Numeric.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Numeric.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.078238303 UTC

[section ""data" . Numeric.$trModule_closure" {
     Numeric.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Numeric.$trModule3_closure+1;
         const Numeric.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.082786455 UTC

[section ""data" . Numeric.showGFloat_$sshowGFloat_closure" {
     Numeric.showGFloat_$sshowGFloat_closure:
         const Numeric.showGFloat_$sshowGFloat_info;
         const 0;
 },
 sat_s43VW_entry() //  [R1]
         { []
         }
     {offset
       c45Nj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45Nk; else goto c45Nl;
       c45Nk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45Nl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c45Ng_info;
           _s43VS::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s43VS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u45Np; else goto c45Nh;
       u45Np: // global
           call _c45Ng(R1) args: 0, res: 0, upd: 0;
       c45Nh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43VW_info" {
     sat_s43VW_info:
         const sat_s43VW_entry;
         const 2;
         const 4294967314;
         const S43WU_srt+480;
 },
 _c45Ng() //  [R1]
         { []
         }
     {offset
       c45Ng: // global
           F1 = F32[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFGeneric_closure+3;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45Ng_info" {
     block_c45Ng_info:
         const _c45Ng;
         const 1;
         const 4294967326;
         const S43WU_srt+480;
 },
 Numeric.showGFloat_$sshowGFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c45Nq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c45Nu; else goto c45Nt;
       c45Nu: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showGFloat_$sshowGFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c45Nt: // global
           I64[Hp - 24] = sat_s43VW_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showGFloat_$sshowGFloat_info" {
     Numeric.showGFloat_$sshowGFloat_info:
         const Numeric.showGFloat_$sshowGFloat_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S43WU_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.094304502 UTC

[section ""data" . Numeric.showFFloat_$sshowFFloat_closure" {
     Numeric.showFFloat_$sshowFFloat_closure:
         const Numeric.showFFloat_$sshowFFloat_info;
         const 0;
 },
 sat_s43W1_entry() //  [R1]
         { []
         }
     {offset
       c45NS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45NT; else goto c45NU;
       c45NT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45NU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c45NP_info;
           _s43VX::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s43VX::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u45NY; else goto c45NQ;
       u45NY: // global
           call _c45NP(R1) args: 0, res: 0, upd: 0;
       c45NQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43W1_info" {
     sat_s43W1_info:
         const sat_s43W1_entry;
         const 2;
         const 4294967314;
         const S43WU_srt+480;
 },
 _c45NP() //  [R1]
         { []
         }
     {offset
       c45NP: // global
           F1 = F32[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFFixed_closure+2;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45NP_info" {
     block_c45NP_info:
         const _c45NP;
         const 1;
         const 4294967326;
         const S43WU_srt+480;
 },
 Numeric.showFFloat_$sshowFFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c45NZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c45O3; else goto c45O2;
       c45O3: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showFFloat_$sshowFFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c45O2: // global
           I64[Hp - 24] = sat_s43W1_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showFFloat_$sshowFFloat_info" {
     Numeric.showFFloat_$sshowFFloat_info:
         const Numeric.showFFloat_$sshowFFloat_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S43WU_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.107083611 UTC

[section ""data" . Numeric.showEFloat_$sshowEFloat_closure" {
     Numeric.showEFloat_$sshowEFloat_closure:
         const Numeric.showEFloat_$sshowEFloat_info;
         const 0;
 },
 sat_s43W6_entry() //  [R1]
         { []
         }
     {offset
       c45Or: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45Os; else goto c45Ot;
       c45Os: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45Ot: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c45Oo_info;
           _s43W2::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s43W2::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u45Ox; else goto c45Op;
       u45Ox: // global
           call _c45Oo(R1) args: 0, res: 0, upd: 0;
       c45Op: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43W6_info" {
     sat_s43W6_info:
         const sat_s43W6_entry;
         const 2;
         const 4294967314;
         const S43WU_srt+480;
 },
 _c45Oo() //  [R1]
         { []
         }
     {offset
       c45Oo: // global
           F1 = F32[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFExponent_closure+1;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45Oo_info" {
     block_c45Oo_info:
         const _c45Oo;
         const 1;
         const 4294967326;
         const S43WU_srt+480;
 },
 Numeric.showEFloat_$sshowEFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c45Oy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c45OC; else goto c45OB;
       c45OC: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showEFloat_$sshowEFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c45OB: // global
           I64[Hp - 24] = sat_s43W6_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showEFloat_$sshowEFloat_info" {
     Numeric.showEFloat_$sshowEFloat_info:
         const Numeric.showEFloat_$sshowEFloat_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S43WU_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.119506799 UTC

[section ""data" . Numeric.showGFloat_$sshowGFloat1_closure" {
     Numeric.showGFloat_$sshowGFloat1_closure:
         const Numeric.showGFloat_$sshowGFloat1_info;
         const 0;
 },
 sat_s43Wb_entry() //  [R1]
         { []
         }
     {offset
       c45P0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45P1; else goto c45P2;
       c45P1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45P2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c45OX_info;
           _s43W7::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s43W7::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u45P6; else goto c45OY;
       u45P6: // global
           call _c45OX(R1) args: 0, res: 0, upd: 0;
       c45OY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43Wb_info" {
     sat_s43Wb_info:
         const sat_s43Wb_entry;
         const 2;
         const 4294967314;
         const S43WU_srt+512;
 },
 _c45OX() //  [R1]
         { []
         }
     {offset
       c45OX: // global
           D1 = F64[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFGeneric_closure+3;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45OX_info" {
     block_c45OX_info:
         const _c45OX;
         const 1;
         const 4294967326;
         const S43WU_srt+512;
 },
 Numeric.showGFloat_$sshowGFloat1_entry() //  [R2, R3]
         { []
         }
     {offset
       c45P7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c45Pb; else goto c45Pa;
       c45Pb: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showGFloat_$sshowGFloat1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c45Pa: // global
           I64[Hp - 24] = sat_s43Wb_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showGFloat_$sshowGFloat1_info" {
     Numeric.showGFloat_$sshowGFloat1_info:
         const Numeric.showGFloat_$sshowGFloat1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S43WU_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.127612949 UTC

[section ""data" . Numeric.showGFloat_closure" {
     Numeric.showGFloat_closure:
         const Numeric.showGFloat_info;
         const 0;
 },
 sat_s43Wf_entry() //  [R1]
         { []
         }
     {offset
       c45Pw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45Px; else goto c45Py;
       c45Px: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45Py: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 32];
           R5 = GHC.Types.False_closure+1;
           R4 = P64[R1 + 24];
           R3 = GHC.Float.FFGeneric_closure+3;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43Wf_info" {
     sat_s43Wf_info:
         const sat_s43Wf_entry;
         const 3;
         const 4294967311;
         const S43WU_srt+528;
 },
 Numeric.showGFloat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c45Pz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c45PD; else goto c45PC;
       c45PD: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showGFloat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c45PC: // global
           I64[Hp - 32] = sat_s43Wf_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showGFloat_info" {
     Numeric.showGFloat_info:
         const Numeric.showGFloat_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S43WU_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.136211485 UTC

[section ""data" . Numeric.showFFloat_$sshowFFloat1_closure" {
     Numeric.showFFloat_$sshowFFloat1_closure:
         const Numeric.showFFloat_$sshowFFloat1_info;
         const 0;
 },
 sat_s43Wk_entry() //  [R1]
         { []
         }
     {offset
       c45PX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45PY; else goto c45PZ;
       c45PY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45PZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c45PU_info;
           _s43Wg::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s43Wg::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u45Q3; else goto c45PV;
       u45Q3: // global
           call _c45PU(R1) args: 0, res: 0, upd: 0;
       c45PV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43Wk_info" {
     sat_s43Wk_info:
         const sat_s43Wk_entry;
         const 2;
         const 4294967314;
         const S43WU_srt+512;
 },
 _c45PU() //  [R1]
         { []
         }
     {offset
       c45PU: // global
           D1 = F64[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFFixed_closure+2;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45PU_info" {
     block_c45PU_info:
         const _c45PU;
         const 1;
         const 4294967326;
         const S43WU_srt+512;
 },
 Numeric.showFFloat_$sshowFFloat1_entry() //  [R2, R3]
         { []
         }
     {offset
       c45Q4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c45Q8; else goto c45Q7;
       c45Q8: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showFFloat_$sshowFFloat1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c45Q7: // global
           I64[Hp - 24] = sat_s43Wk_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showFFloat_$sshowFFloat1_info" {
     Numeric.showFFloat_$sshowFFloat1_info:
         const Numeric.showFFloat_$sshowFFloat1_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const S43WU_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.147988268 UTC

[section ""data" . Numeric.showFFloat_closure" {
     Numeric.showFFloat_closure:
         const Numeric.showFFloat_info;
         const 0;
 },
 sat_s43Wo_entry() //  [R1]
         { []
         }
     {offset
       c45Qt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45Qu; else goto c45Qv;
       c45Qu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45Qv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 32];
           R5 = GHC.Types.False_closure+1;
           R4 = P64[R1 + 24];
           R3 = GHC.Float.FFFixed_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43Wo_info" {
     sat_s43Wo_info:
         const sat_s43Wo_entry;
         const 3;
         const 4294967311;
         const S43WU_srt+528;
 },
 Numeric.showFFloat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c45Qw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c45QA; else goto c45Qz;
       c45QA: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showFFloat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c45Qz: // global
           I64[Hp - 32] = sat_s43Wo_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showFFloat_info" {
     Numeric.showFFloat_info:
         const Numeric.showFFloat_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const S43WU_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.166288644 UTC

[section ""data" . Numeric.showEFloat_$sshowEFloat1_closure" {
     Numeric.showEFloat_$sshowEFloat1_closure:
         const Numeric.showEFloat_$sshowEFloat1_info;
         const 0;
 },
 sat_s43Wt_entry() //  [R1]
         { []
         }
     {offset
       c45QU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c45QV; else goto c45QW;
       c45QV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45QW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c45QR_info;
           _s43Wp::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s43Wp::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u45R0; else goto c45QS;
       u45R0: // global
           call _c45QR(R1) args: 0, res: 0, upd: 0;
       c45QS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43Wt_info" {
     sat_s43Wt_info:
         const sat_s43Wt_entry;
         const 2;
         const 4294967314;
         const S43WU_srt+512;
 },
 _c45QR() //  [R1]
         { []
         }
     {offset
       c45QR: // global
           D1 = F64[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFExponent_closure+1;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45QR_info" {
     block_c45QR_info:
         const _c45QR;
         const 1;
         const 4294967326;
         const S43WU_srt+512;
 },
 Numeric.showEFloat_$sshowEFloat1_entry() //  [R2, R3]
         { []
         }
     {offset
       c45R1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c45R5; else goto c45R4;
       c45R5: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showEFloat_$sshowEFloat1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c45R4: // global
           I64[Hp - 24] = sat_s43Wt_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showEFloat_$sshowEFloat1_info" {
     Numeric.showEFloat_$sshowEFloat1_info:
         const Numeric.showEFloat_$sshowEFloat1_entry;
         const 0;
         const 279172874254;
         const 8589934607;
         const S43WU_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.176467349 UTC

[section ""data" . Numeric.showEFloat_closure" {
     Numeric.showEFloat_closure:
         const Numeric.showEFloat_info;
         const 0;
 },
 sat_s43Wx_entry() //  [R1]
         { []
         }
     {offset
       c45Rq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c45Rr; else goto c45Rs;
       c45Rr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45Rs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 32];
           R5 = GHC.Types.False_closure+1;
           R4 = P64[R1 + 24];
           R3 = GHC.Float.FFExponent_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s43Wx_info" {
     sat_s43Wx_info:
         const sat_s43Wx_entry;
         const 3;
         const 4294967311;
         const S43WU_srt+528;
 },
 Numeric.showEFloat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c45Rt: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c45Rx; else goto c45Rw;
       c45Rx: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showEFloat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c45Rw: // global
           I64[Hp - 32] = sat_s43Wx_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showEFloat_info" {
     Numeric.showEFloat_info:
         const Numeric.showEFloat_entry;
         const 0;
         const 141733920782;
         const 12884901911;
         const S43WU_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:57.183759635 UTC

[section ""relreadonly" . S43WU_srt" {
     S43WU_srt:
         const Text.Read.Lex.$wreadIntP_closure;
         const Numeric.readInt_closure;
         const Text.Read.Lex.readDecP4_closure;
         const Text.Read.Lex.$wreadIntP'_closure;
         const Numeric.readOct_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Numeric.readDec_closure;
         const Text.Read.Lex.readDecP3_closure;
         const Numeric.readHex_closure;
         const Text.Read.Lex.$wnumberToRational_closure;
         const Text.Read.Lex.expect2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Numeric.readFloat_closure;
         const GHC.Read.lex1_closure;
         const GHC.Read.readParen_closure;
         const Numeric.readSigned_closure;
         const sat_s43QP_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Numeric.showHFloat16_closure;
         const Numeric.showInt2_closure;
         const Numeric.showInt_closure;
         const Numeric.showInt1_closure;
         const GHC.Float.formatRealFloatAlt_closure;
         const Numeric.showFFloatAlt_closure;
         const Numeric.showGFloatAlt_closure;
         const Numeric.$wlvl_closure;
         const Numeric.showIntAtBase2_closure;
         const Numeric.showIntAtBase1_closure;
         const sat_s43RQ_closure;
         const Numeric.showIntAtBase3_closure;
         const Numeric.showIntAtBase_closure;
         const sat_s43So_closure;
         const Numeric.showHex1_closure;
         const GHC.Show.intToDigit_closure;
         const Numeric.showHex_closure;
         const GHC.Show.$fShow(,)_go1_closure;
         const GHC.Err.error_closure;
         const $dIP3_r43OU_closure;
         const $wlvl2_r43OX_closure;
         const GHC.Show.$wintToDigit_closure;
         const $wshowIt1_r43OY_closure;
         const $wshowIt2_r43OZ_closure;
         const $wshowIt3_r43P0_closure;
         const $wshowIt4_r43P1_closure;
         const Numeric.showHFloat_hex_closure;
         const sat_s43UQ_closure;
         const GHC.Float.$wfloatToDigits_closure;
         const Numeric.showHFloat_cvt_closure;
         const Numeric.showHFloat9_closure;
         const Numeric.showHFloat14_closure;
         const Numeric.showHFloat15_closure;
         const Numeric.showHFloat4_closure;
         const Numeric.showHFloat6_closure;
         const Numeric.showHFloat16_closure;
         const Numeric.showHFloat1_closure;
         const Numeric.showHFloat3_closure;
         const Numeric.showHFloat_closure;
         const sat_s43VM_closure;
         const Numeric.showOct1_closure;
         const Numeric.showOct_closure;
         const GHC.Float.$w$sformatRealFloatAlt1_closure;
         const Numeric.showGFloat_$sshowGFloat_closure;
         const Numeric.showFFloat_$sshowFFloat_closure;
         const Numeric.showEFloat_$sshowEFloat_closure;
         const GHC.Float.$w$sformatRealFloatAlt_closure;
         const Numeric.showGFloat_$sshowGFloat1_closure;
         const GHC.Float.formatRealFloatAlt_closure;
         const Numeric.showGFloat_closure;
         const Numeric.showFFloat_$sshowFFloat1_closure;
         const Numeric.showFFloat_closure;
         const Numeric.showEFloat_$sshowEFloat1_closure;
         const Numeric.showEFloat_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.214627562 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:58:59.217425939 UTC

[section ""data" . Numeric.readInt_closure" {
     Numeric.readInt_closure:
         const Numeric.readInt_info;
         const 0;
 },
 sat_s45RN_entry() //  [R1]
         { []
         }
     {offset
       c45Zn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c45Zo; else goto c45Zp;
       c45Zo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c45Zp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c45Zk_info;
           R6 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wreadIntP_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45RN_info" {
     sat_s45RN_info:
         const sat_s45RN_entry;
         const 4;
         const 4294967311;
         const S45Zy_srt;
 },
 _c45Zk() //  [R1]
         { []
         }
     {offset
       c45Zk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c45Zs; else goto c45Zr;
       c45Zs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c45Zr: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c45Zk_info" {
     block_c45Zk_info:
         const _c45Zk;
         const 0;
         const 30;
 },
 Numeric.readInt_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c45Zt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c45Zx; else goto c45Zw;
       c45Zx: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.readInt_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c45Zw: // global
           I64[Hp - 40] = sat_s45RN_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 40;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.readInt_info" {
     Numeric.readInt_info:
         const Numeric.readInt_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S45Zy_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.226315364 UTC

[section ""data" . Numeric.readOct_closure" {
     Numeric.readOct_closure:
         const Numeric.readOct_info;
         const 0;
 },
 sat_s45RQ_entry() //  [R1]
         { []
         }
     {offset
       c4603: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c4604; else goto c4605;
       c4604: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4605: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45RQ_info" {
     sat_s45RQ_info:
         const sat_s45RQ_entry;
         const 1;
         const 4294967312;
         const S45Zy_srt+16;
 },
 sat_s45RT_entry() //  [R1]
         { []
         }
     {offset
       c4609: // global
           _s45RT::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c460a; else goto c460b;
       c460b: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c460d; else goto c460c;
       c460d: // global
           HpAlloc = 24;
           goto c460a;
       c460a: // global
           R1 = _s45RT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c460c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s45RT::P64;
           _s45RO::P64 = P64[_s45RT::P64 + 16];
           _s45RP::P64 = P64[_s45RT::P64 + 24];
           I64[Hp - 16] = sat_s45RQ_info;
           P64[Hp] = _s45RP::P64;
           I64[Sp - 24] = block_c4606_info;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = Hp - 16;
           R3 = _s45RP::P64;
           R2 = _s45RO::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45RT_info" {
     sat_s45RT_info:
         const sat_s45RT_entry;
         const 2;
         const 12884901906;
         const S45Zy_srt+16;
 },
 _c4606() //  [R1]
         { []
         }
     {offset
       c4606: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c460g; else goto c460f;
       c460g: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c460f: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4606_info" {
     block_c4606_info:
         const _c4606;
         const 0;
         const 30;
 },
 Numeric.readOct_entry() //  [R2, R3]
         { []
         }
     {offset
       c460h: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c460l; else goto c460k;
       c460l: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.readOct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c460k: // global
           I64[Hp - 24] = sat_s45RT_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.readOct_info" {
     Numeric.readOct_info:
         const Numeric.readOct_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S45Zy_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.236800168 UTC

[section ""data" . Numeric.readDec_closure" {
     Numeric.readDec_closure:
         const Numeric.readDec_info;
         const 0;
 },
 sat_s45RW_entry() //  [R1]
         { []
         }
     {offset
       c460Y: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c460Z; else goto c4610;
       c460Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4610: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45RW_info" {
     sat_s45RW_info:
         const sat_s45RW_entry;
         const 1;
         const 4294967312;
         const S45Zy_srt+40;
 },
 sat_s45RZ_entry() //  [R1]
         { []
         }
     {offset
       c4614: // global
           _s45RZ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c4615; else goto c4616;
       c4616: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4618; else goto c4617;
       c4618: // global
           HpAlloc = 24;
           goto c4615;
       c4615: // global
           R1 = _s45RZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4617: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s45RZ::P64;
           _s45RU::P64 = P64[_s45RZ::P64 + 16];
           _s45RV::P64 = P64[_s45RZ::P64 + 24];
           I64[Hp - 16] = sat_s45RW_info;
           P64[Hp] = _s45RV::P64;
           I64[Sp - 24] = block_c4611_info;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = Hp - 16;
           R3 = _s45RV::P64;
           R2 = _s45RU::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45RZ_info" {
     sat_s45RZ_info:
         const sat_s45RZ_entry;
         const 2;
         const 21474836498;
         const S45Zy_srt+24;
 },
 _c4611() //  [R1]
         { []
         }
     {offset
       c4611: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c461b; else goto c461a;
       c461b: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c461a: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4611_info" {
     block_c4611_info:
         const _c4611;
         const 0;
         const 30;
 },
 Numeric.readDec_entry() //  [R2, R3]
         { []
         }
     {offset
       c461c: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c461g; else goto c461f;
       c461g: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.readDec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c461f: // global
           I64[Hp - 24] = sat_s45RZ_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.readDec_info" {
     Numeric.readDec_info:
         const Numeric.readDec_entry;
         const 0;
         const 55834574862;
         const 8589934607;
         const S45Zy_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.247592167 UTC

[section ""data" . Numeric.readHex_closure" {
     Numeric.readHex_closure:
         const Numeric.readHex_info;
         const 0;
 },
 sat_s45S2_entry() //  [R1]
         { []
         }
     {offset
       c461T: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c461U; else goto c461V;
       c461U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c461V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45S2_info" {
     sat_s45S2_info:
         const sat_s45S2_entry;
         const 1;
         const 4294967312;
         const S45Zy_srt+56;
 },
 sat_s45S5_entry() //  [R1]
         { []
         }
     {offset
       c461Z: // global
           _s45S5::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c4620; else goto c4621;
       c4621: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4623; else goto c4622;
       c4623: // global
           HpAlloc = 24;
           goto c4620;
       c4620: // global
           R1 = _s45S5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4622: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s45S5::P64;
           _s45S0::P64 = P64[_s45S5::P64 + 16];
           _s45S1::P64 = P64[_s45S5::P64 + 24];
           I64[Hp - 16] = sat_s45S2_info;
           P64[Hp] = _s45S1::P64;
           I64[Sp - 24] = block_c461W_info;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = Hp - 16;
           R3 = _s45S1::P64;
           R2 = _s45S0::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45S5_info" {
     sat_s45S5_info:
         const sat_s45S5_entry;
         const 2;
         const 73014444050;
         const S45Zy_srt+24;
 },
 _c461W() //  [R1]
         { []
         }
     {offset
       c461W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4626; else goto c4625;
       c4626: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c4625: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c461W_info" {
     block_c461W_info:
         const _c461W;
         const 0;
         const 30;
 },
 Numeric.readHex_entry() //  [R2, R3]
         { []
         }
     {offset
       c4627: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c462b; else goto c462a;
       c462b: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.readHex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c462a: // global
           I64[Hp - 24] = sat_s45S5_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.readHex_info" {
     Numeric.readHex_info:
         const Numeric.readHex_entry;
         const 0;
         const 210453397518;
         const 8589934607;
         const S45Zy_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.256991514 UTC

[section ""data" . Numeric.readFloat2_closure" {
     Numeric.readFloat2_closure:
         const Numeric.readFloat2_info;
 },
 Numeric.readFloat2_entry() //  [R2]
         { []
         }
     {offset
       c462J: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c462K; else goto c462L;
       c462K: // global
           R2 = R2;
           R1 = Numeric.readFloat2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c462L: // global
           I64[Sp - 8] = block_c462G_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u462P; else goto c462H;
       u462P: // global
           call _c462G() args: 0, res: 0, upd: 0;
       c462H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.readFloat2_info" {
     Numeric.readFloat2_info:
         const Numeric.readFloat2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c462G() //  []
         { []
         }
     {offset
       c462G: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c462G_info" {
     block_c462G_info:
         const _c462G;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.262235503 UTC

[section ""data" . Numeric.readFloat1_closure" {
     Numeric.readFloat1_closure:
         const Text.ParserCombinators.ReadP.Look_con_info;
         const Numeric.readFloat2_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.268780494 UTC

[section ""data" . Numeric.readFloat_closure" {
     Numeric.readFloat_closure:
         const Numeric.readFloat_info;
         const 0;
 },
 $dFractional_s45Sa_entry() //  [R1]
         { []
         }
     {offset
       c463j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c463k; else goto c463l;
       c463k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c463l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFractional_s45Sa_info" {
     $dFractional_s45Sa_info:
         const $dFractional_s45Sa_entry;
         const 1;
         const 16;
 },
 sat_s45Sh_entry() //  [R1]
         { []
         }
     {offset
       c463I: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c463J; else goto c463K;
       c463J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c463K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c463F_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Sh_info" {
     sat_s45Sh_info:
         const sat_s45Sh_entry;
         const 1;
         const 4294967312;
         const S45Zy_srt+72;
 },
 _c463F() //  [R1, R2]
         { []
         }
     {offset
       c463F: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c463N; else goto c463M;
       c463N: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c463M: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c463F_info" {
     block_c463F_info:
         const _c463F;
         const 0;
         const 30;
 },
 sat_s45Si_entry() //  [R1]
         { []
         }
     {offset
       c463O: // global
           _s45Si::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c463P; else goto c463Q;
       c463Q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c463S; else goto c463R;
       c463S: // global
           HpAlloc = 24;
           goto c463P;
       c463P: // global
           R1 = _s45Si::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c463R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s45Si::P64;
           _s45Sa::P64 = P64[_s45Si::P64 + 16];
           _s45Sd::P64 = P64[_s45Si::P64 + 24];
           I64[Hp - 16] = sat_s45Sh_info;
           P64[Hp] = _s45Sd::P64;
           R2 = _s45Sa::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Si_info" {
     sat_s45Si_info:
         const sat_s45Si_entry;
         const 2;
         const 4294967314;
         const S45Zy_srt+72;
 },
 sat_s45Sj_entry() //  [R1, R2]
         { []
         }
     {offset
       c463X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c463Y; else goto c463Z;
       c463Y: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c463Z: // global
           I64[Sp - 16] = block_c463r_info;
           _s45Sa::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s45Sa::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4646; else goto c463s;
       u4646: // global
           call _c463r(R1) args: 0, res: 0, upd: 0;
       c463s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s45Sj_info" {
     sat_s45Sj_info:
         const sat_s45Sj_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S45Zy_srt+72;
 },
 _c463r() //  [R1]
         { []
         }
     {offset
       c463r: // global
           if (R1 & 7 == 6) goto c463V; else goto c463U;
       c463V: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c4645; else goto c4644;
       c4645: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4644: // global
           _s45Sd::P64 = P64[R1 + 2];
           I64[Hp - 48] = sat_s45Si_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s45Sd::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c463U: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c463r_info" {
     block_c463r_info:
         const _c463r;
         const 1;
         const 4294967326;
         const S45Zy_srt+72;
 },
 sat_s45Sk_entry() //  [R1]
         { []
         }
     {offset
       c4647: // global
           _s45Sk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4648; else goto c4649;
       c4649: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c464b; else goto c464a;
       c464b: // global
           HpAlloc = 40;
           goto c4648;
       c4648: // global
           R1 = _s45Sk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c464a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s45Sk::P64;
           _s45S8::P64 = P64[_s45Sk::P64 + 16];
           I64[Hp - 32] = $dFractional_s45Sa_info;
           P64[Hp - 16] = _s45S8::P64;
           I64[Hp - 8] = sat_s45Sj_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Sk_info" {
     sat_s45Sk_info:
         const sat_s45Sk_entry;
         const 1;
         const 12884901904;
         const S45Zy_srt+72;
 },
 lvl116_s45S9_entry() //  [R1]
         { []
         }
     {offset
       c464c: // global
           _s45S9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c464d; else goto c464e;
       c464e: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c464g; else goto c464f;
       c464g: // global
           HpAlloc = 24;
           goto c464d;
       c464d: // global
           R1 = _s45S9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c464f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s45S9::P64;
           _s45S8::P64 = P64[_s45S9::P64 + 16];
           I64[Hp - 16] = sat_s45Sk_info;
           P64[Hp] = _s45S8::P64;
           R3 = Hp - 16;
           R2 = Numeric.readFloat1_closure+2;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s45S9_info" {
     lvl116_s45S9_info:
         const lvl116_s45S9_entry;
         const 1;
         const 30064771088;
         const S45Zy_srt+72;
 },
 k_s45Sl_entry() //  [R1]
         { []
         }
     {offset
       c464m: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s45Sl_info" {
     k_s45Sl_info:
         const k_s45Sl_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s45So_entry() //  [R1, R2]
         { []
         }
     {offset
       c464u: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s45So_info" {
     sat_s45So_info:
         const sat_s45So_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Numeric.readFloat_entry() //  [R2]
         { []
         }
     {offset
       c464y: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c464C; else goto c464B;
       c464C: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Numeric.readFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c464B: // global
           I64[Hp - 64] = lvl116_s45S9_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = k_s45Sl_info;
           P64[Hp - 32] = Hp - 64;
           I64[Hp - 24] = sat_s45So_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.readFloat_info" {
     Numeric.readFloat_info:
         const Numeric.readFloat_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S45Zy_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.301005084 UTC

[section ""data" . Numeric.readSigned_closure" {
     Numeric.readSigned_closure:
         const Numeric.readSigned_info;
         const 0;
 },
 $dNum_s45St_entry() //  [R1]
         { []
         }
     {offset
       c4661: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4662; else goto c4663;
       c4662: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4663: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s45St_info" {
     $dNum_s45St_info:
         const $dNum_s45St_entry;
         const 1;
         const 16;
 },
 go1_s45SD_entry() //  [R1, R2]
         { []
         }
     {offset
       c466x: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c466y; else goto u4674;
       c466y: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u4674: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c466n() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go1_s45SD_info" {
     go1_s45SD_info:
         const go1_s45SD_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c466n() //  []
         { []
         }
     {offset
       c466n: // global
           I64[Sp - 16] = block_c466q_info;
           R1 = P64[Sp + 8];
           _s45SD::P64 = P64[Sp];
           P64[Sp - 8] = P64[_s45SD::P64 + 15];
           P64[Sp + 8] = P64[_s45SD::P64 + 7];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4676; else goto c466r;
       u4676: // global
           call _c466q(R1) args: 0, res: 0, upd: 0;
       c466r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c466q() //  [R1]
         { []
         }
     {offset
       c466q: // global
           if (R1 & 7 == 1) goto c466u; else goto c466v;
       c466u: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c466v: // global
           I64[Sp] = block_c466F_info;
           _s45SH::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 8] = _s45SH::P64;
           if (R1 & 7 != 0) goto u4677; else goto c466H;
       u4677: // global
           call _c466F(R1) args: 0, res: 0, upd: 0;
       c466H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c466q_info" {
     block_c466q_info:
         const _c466q;
         const 3;
         const 30;
 },
 _c466F() //  [R1]
         { []
         }
     {offset
       c466F: // global
           I64[Sp - 8] = block_c466L_info;
           _s45SJ::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s45SJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4679; else goto c466N;
       u4679: // global
           call _c466L(R1) args: 0, res: 0, upd: 0;
       c466N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c466F_info" {
     block_c466F_info:
         const _c466F;
         const 3;
         const 30;
 },
 _c466L() //  [R1]
         { []
         }
     {offset
       c466L: // global
           _s45SH::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c466V; else goto c4672;
       c466V: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c466Y; else goto c466X;
       c466Y: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c466X: // global
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = _s45SH::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4672: // global
           P64[Sp + 32] = _s45SH::P64;
           Sp = Sp + 24;
           call _c466n() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c466L_info" {
     block_c466L_info:
         const _c466L;
         const 4;
         const 30;
 },
 go_s45Su_entry() //  [R1, R2]
         { []
         }
     {offset
       c467f: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c467g; else goto c467h;
       c467g: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c467h: // global
           I64[Sp - 24] = block_c4669_info;
           _s45Su::P64 = R1;
           _s45Sr::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s45Sr::P64;
           P64[Sp - 8] = _s45Su::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u467u; else goto c466a;
       u467u: // global
           call _c4669(R1) args: 0, res: 0, upd: 0;
       c466a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s45Su_info" {
     go_s45Su_info:
         const go_s45Su_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c4669() //  [R1]
         { []
         }
     {offset
       c4669: // global
           if (R1 & 7 == 1) goto c467c; else goto c467d;
       c467c: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c467d: // global
           I64[Sp - 8] = block_c466f_info;
           _s45Sy::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s45Sy::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u467t; else goto c466g;
       u467t: // global
           call _c466f(R1) args: 0, res: 0, upd: 0;
       c466g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4669_info" {
     block_c4669_info:
         const _c4669;
         const 2;
         const 30;
 },
 _c466f() //  [R1]
         { []
         }
     {offset
       c466f: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c467o; else goto c467n;
       c467o: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c467n: // global
           _s45SA::P64 = P64[R1 + 7];
           _s45SB::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = go1_s45SD_info;
           P64[Hp - 8] = _s45SB::P64;
           P64[Hp] = Hp - 48;
           _s45Sr::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c467k_info;
           R2 = _s45SA::P64;
           R1 = _s45Sr::P64;
           P64[Sp + 24] = Hp - 15;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c466f_info" {
     block_c466f_info:
         const _c466f;
         const 3;
         const 30;
 },
 _c467k() //  [R1]
         { []
         }
     {offset
       c467k: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_s45SD_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c467k_info" {
     block_c467k_info:
         const _c467k;
         const 1;
         const 30;
 },
 sat_s45Tf_entry() //  [R1]
         { []
         }
     {offset
       c468q: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c468r; else goto c468s;
       c468r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c468s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Tf_info" {
     sat_s45Tf_info:
         const sat_s45Tf_entry;
         const 2;
         const 18;
 },
 go2_s45T7_entry() //  [R1, R2]
         { []
         }
     {offset
       c468x: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c468y; else goto c468z;
       c468y: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c468z: // global
           I64[Sp - 32] = block_c468a_info;
           _s45T7::P64 = R1;
           _s45St::P64 = P64[R1 + 7];
           _s45T6::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s45St::P64;
           P64[Sp - 16] = _s45T6::P64;
           P64[Sp - 8] = _s45T7::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u468J; else goto c468b;
       u468J: // global
           call _c468a(R1) args: 0, res: 0, upd: 0;
       c468b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go2_s45T7_info" {
     go2_s45T7_info:
         const go2_s45T7_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c468a() //  [R1]
         { []
         }
     {offset
       c468a: // global
           if (R1 & 7 == 1) goto c468u; else goto c468v;
       c468u: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c468v: // global
           I64[Sp] = block_c468g_info;
           _s45Tb::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _s45Tb::P64;
           if (R1 & 7 != 0) goto u468I; else goto c468h;
       u468I: // global
           call _c468g(R1) args: 0, res: 0, upd: 0;
       c468h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c468a_info" {
     block_c468a_info:
         const _c468a;
         const 3;
         const 30;
 },
 _c468g() //  [R1]
         { []
         }
     {offset
       c468g: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c468H; else goto c468G;
       c468H: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c468G: // global
           _s45Td::P64 = P64[R1 + 7];
           _s45Te::P64 = P64[R1 + 15];
           I64[Hp - 104] = stg_ap_2_upd_info;
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 16];
           I64[Hp - 72] = sat_s45Tf_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = _s45Td::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = _s45Te::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 104;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c468g_info" {
     block_c468g_info:
         const _c468g;
         const 3;
         const 30;
 },
 go1_s45SR_entry() //  [R1, R2]
         { []
         }
     {offset
       c468O: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c468P; else goto u469q;
       c468P: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u469q: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c467x() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go1_s45SR_info" {
     go1_s45SR_info:
         const go1_s45SR_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S45Zy_srt+104;
 },
 _c467x() //  []
         { []
         }
     {offset
       c467x: // global
           I64[Sp - 16] = block_c467A_info;
           R1 = P64[Sp + 8];
           _s45SR::P64 = P64[Sp];
           P64[Sp - 8] = P64[_s45SR::P64 + 15];
           P64[Sp + 8] = P64[_s45SR::P64 + 7];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u469v; else goto c467B;
       u469v: // global
           call _c467A(R1) args: 0, res: 0, upd: 0;
       c467B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c467A() //  [R1]
         { []
         }
     {offset
       c467A: // global
           if (R1 & 7 == 1) goto c468L; else goto c468M;
       c468L: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c468M: // global
           I64[Sp - 8] = block_c467G_info;
           _s45SV::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s45SV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u469w; else goto c467H;
       u469w: // global
           call _c467G(R1) args: 0, res: 0, upd: 0;
       c467H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c467A_info" {
     block_c467A_info:
         const _c467A;
         const 3;
         const 4294967326;
         const S45Zy_srt+104;
 },
 _c467G() //  [R1]
         { []
         }
     {offset
       c467G: // global
           I64[Sp - 8] = block_c467L_info;
           _s45SY::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s45SY::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u469x; else goto c467M;
       u469x: // global
           call _c467L(R1) args: 0, res: 0, upd: 0;
       c467M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c467G_info" {
     block_c467G_info:
         const _c467G;
         const 4;
         const 4294967326;
         const S45Zy_srt+104;
 },
 _c467L() //  [R1]
         { []
         }
     {offset
       c467L: // global
           if (R1 & 7 == 1) goto u469r; else goto c4690;
       u469r: // global
           Sp = Sp + 16;
           call _c469n() args: 0, res: 0, upd: 0;
       c4690: // global
           I64[Sp - 8] = block_c467R_info;
           _s45T1::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s45T1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u469y; else goto c467S;
       u469y: // global
           call _c467R(R1) args: 0, res: 0, upd: 0;
       c467S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c467L_info" {
     block_c467L_info:
         const _c467L;
         const 5;
         const 4294967326;
         const S45Zy_srt+104;
 },
 _c467R() //  [R1]
         { []
         }
     {offset
       c467R: // global
           if (I64[R1 + 7] == 45) goto c4694; else goto u469s;
       c4694: // global
           _s45T1::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c467Z_info;
           R1 = _s45T1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u469A; else goto c4680;
       u469A: // global
           call _c467Z(R1) args: 0, res: 0, upd: 0;
       c4680: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u469s: // global
           Sp = Sp + 24;
           call _c469n() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c467R_info" {
     block_c467R_info:
         const _c467R;
         const 6;
         const 4294967326;
         const S45Zy_srt+104;
 },
 _c467Z() //  [R1]
         { []
         }
     {offset
       c467Z: // global
           if (R1 & 7 == 1) goto c469b; else goto u469t;
       c469b: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c469e; else goto c469d;
       c469e: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c469d: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = go2_s45T7_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = Hp - 48;
           I64[Sp + 16] = block_c4695_info;
           R3 = P64[Sp + 8];
           R2 = GHC.Read.lex1_closure;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u469t: // global
           Sp = Sp + 16;
           call _c469n() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c467Z_info" {
     block_c467Z_info:
         const _c467Z;
         const 5;
         const 4294967326;
         const S45Zy_srt+104;
 },
 _c4695() //  [R1]
         { []
         }
     {offset
       c4695: // global
           I64[Sp + 16] = block_c4699_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s45Su_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4695_info" {
     block_c4695_info:
         const _c4695;
         const 131;
         const 30;
 },
 _c4699() //  [R1]
         { []
         }
     {offset
       c4699: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go2_s45T7_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4699_info" {
     block_c4699_info:
         const _c4699;
         const 1;
         const 30;
 },
 _c469n() //  []
         { []
         }
     {offset
       c469n: // global
           P64[Sp + 24] = P64[Sp];
           Sp = Sp + 16;
           call _c467x() args: 0, res: 0, upd: 0;
     }
 },
 sat_s45Tq_entry() //  [R1]
         { []
         }
     {offset
       c469Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c469R; else goto c469S;
       c469R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c469S: // global
           I64[Sp - 16] = block_c469O_info;
           R3 = P64[R1 + 24];
           R2 = GHC.Read.lex1_closure;
           P64[Sp - 8] = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s45Tq_info" {
     sat_s45Tq_info:
         const sat_s45Tq_entry;
         const 2;
         const 4294967314;
         const S45Zy_srt+104;
 },
 _c469O() //  [R1]
         { []
         }
     {offset
       c469O: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_s45SR_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c469O_info" {
     block_c469O_info:
         const _c469O;
         const 1;
         const 4294967326;
         const S45Zy_srt+104;
 },
 sat_s45Tr_entry() //  [R1, R2]
         { []
         }
     {offset
       c469Y: // global
           _s45Tm::P64 = R2;
           _s45Tr::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c46a2; else goto c46a3;
       c46a3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c46a5; else goto c46a4;
       c46a5: // global
           HpAlloc = 32;
           goto c46a2;
       c46a2: // global
           R2 = _s45Tm::P64;
           R1 = _s45Tr::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c46a4: // global
           _s45Su::P64 = P64[_s45Tr::P64 + 7];
           _s45SR::P64 = P64[_s45Tr::P64 + 15];
           I64[Hp - 24] = sat_s45Tq_info;
           P64[Hp - 8] = _s45SR::P64;
           P64[Hp] = _s45Tm::P64;
           I64[Sp - 24] = block_c469W_info;
           R3 = _s45Tm::P64;
           R2 = GHC.Read.lex1_closure;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _s45Su::P64;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s45Tr_info" {
     sat_s45Tr_info:
         const sat_s45Tr_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S45Zy_srt+104;
 },
 _c469W() //  [R1]
         { []
         }
     {offset
       c469W: // global
           I64[Sp] = block_c46a1_info;
           R2 = R1;
           R1 = P64[Sp + 16];
           call go_s45Su_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c469W_info" {
     block_c469W_info:
         const _c469W;
         const 2;
         const 30;
 },
 _c46a1() //  [R1]
         { []
         }
     {offset
       c46a1: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46a1_info" {
     block_c46a1_info:
         const _c46a1;
         const 130;
         const 30;
 },
 Numeric.readSigned_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c46ab: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c46af; else goto c46ae;
       c46af: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.readSigned_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c46ae: // global
           I64[Hp - 80] = $dNum_s45St_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = go_s45Su_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = go1_s45SR_info;
           P64[Hp - 32] = Hp - 80;
           _c4664::P64 = Hp - 55;
           P64[Hp - 24] = _c4664::P64;
           I64[Hp - 16] = sat_s45Tr_info;
           P64[Hp - 8] = _c4664::P64;
           P64[Hp] = Hp - 39;
           R4 = R4;
           R3 = Hp - 15;
           R2 = GHC.Types.False_closure+1;
           call GHC.Read.readParen_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.readSigned_info" {
     Numeric.readSigned_info:
         const Numeric.readSigned_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S45Zy_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.353103905 UTC

[section ""data" . sat_s45Ts_closure" {
     sat_s45Ts_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.354902335 UTC

[section ""data" . sat_s45Tt_closure" {
     sat_s45Tt_closure:
         const :_con_info;
         const sat_s45Ts_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.357758683 UTC

[section ""data" . Numeric.showInt2_closure" {
     Numeric.showInt2_closure:
         const Numeric.showInt2_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showInt2_entry() //  [R1]
         { []
         }
     {offset
       c46dC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46dD; else goto c46dE;
       c46dD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46dE: // global
           (_c46dz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46dz::I64 == 0) goto c46dB; else goto c46dA;
       c46dB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c46dA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46dz::I64;
           R3 = sat_s45Tt_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showInt2_info" {
     Numeric.showInt2_info:
         const Numeric.showInt2_entry;
         const 0;
         const 4294967317;
         const S45Zy_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.36156188 UTC

[section ""cstring" . lvl_r43OH_bytes" {
     lvl_r43OH_bytes:
         I8[] [78,117,109,101,114,105,99,46,115,104,111,119,73,110,116,58,32,99,97,110,39,116,32,115,104,111,119,32,110,101,103,97,116,105,118,101,32,110,117,109,98,101,114,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.364078059 UTC

[section ""data" . Numeric.showInt1_closure" {
     Numeric.showInt1_closure:
         const Numeric.showInt1_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showInt1_entry() //  [R1]
         { []
         }
     {offset
       c46dX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c46dY; else goto c46dZ;
       c46dY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46dZ: // global
           (_c46dS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46dS::I64 == 0) goto c46dU; else goto c46dT;
       c46dU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c46dT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46dS::I64;
           I64[Sp - 24] = block_c46dV_info;
           R2 = lvl_r43OH_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showInt1_info" {
     Numeric.showInt1_info:
         const Numeric.showInt1_entry;
         const 0;
         const 4294967317;
         const S45Zy_srt+136;
 },
 _c46dV() //  [R1]
         { []
         }
     {offset
       c46dV: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46dV_info" {
     block_c46dV_info:
         const _c46dV;
         const 0;
         const 4294967326;
         const S45Zy_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.369838979 UTC

[section ""data" . Numeric.showHFloat16_closure" {
     Numeric.showHFloat16_closure:
         const Numeric.showHFloat16_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showHFloat16_entry() //  [R1]
         { []
         }
     {offset
       c46el: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46em; else goto c46en;
       c46em: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46en: // global
           (_c46ei::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46ei::I64 == 0) goto c46ek; else goto c46ej;
       c46ek: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c46ej: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46ei::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showHFloat16_info" {
     Numeric.showHFloat16_info:
         const Numeric.showHFloat16_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.379955479 UTC

[section ""data" . Numeric.showInt_closure" {
     Numeric.showInt_closure:
         const Numeric.showInt_info;
         const 0;
 },
 sat_s45TB_entry() //  [R1]
         { []
         }
     {offset
       c46fv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46fw; else goto c46fx;
       c46fw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46fx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c46ft_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45TB_info" {
     sat_s45TB_info:
         const sat_s45TB_entry;
         const 1;
         const 4294967312;
         const S45Zy_srt+144;
 },
 _c46ft() //  [R1]
         { []
         }
     {offset
       c46ft: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Numeric.showHFloat16_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46ft_info" {
     block_c46ft_info:
         const _c46ft;
         const 0;
         const 4294967326;
         const S45Zy_srt+144;
 },
 lvl5_s45TD_entry() //  [R1]
         { []
         }
     {offset
       c46fF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46fG; else goto c46fH;
       c46fG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46fH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c46fD_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_s45TD_info" {
     lvl5_s45TD_info:
         const lvl5_s45TD_entry;
         const 1;
         const 4294967312;
         const S45Zy_srt+152;
 },
 _c46fD() //  [R1]
         { []
         }
     {offset
       c46fD: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Numeric.showInt2_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46fD_info" {
     block_c46fD_info:
         const _c46fD;
         const 0;
         const 4294967326;
         const S45Zy_srt+152;
 },
 ds_s45TS_entry() //  [R1]
         { []
         }
     {offset
       c46fN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c46fO; else goto c46fP;
       c46fO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46fP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quotRem_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s45TS_info" {
     ds_s45TS_info:
         const ds_s45TS_entry;
         const 3;
         const 15;
 },
 Numeric.showInt_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c46fQ: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c46fR; else goto c46fS;
       c46fR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showInt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c46fS: // global
           I64[Sp - 32] = block_c46eC_info;
           _s45Tv::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s45Tv::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showInt_info" {
     Numeric.showInt_info:
         const Numeric.showInt_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const S45Zy_srt+144;
 },
 _c46eC() //  [R1]
         { []
         }
     {offset
       c46eC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46fV; else goto c46fU;
       c46fV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c46fU: // global
           I64[Hp - 16] = sat_s45TB_info;
           P64[Hp] = R1;
           I64[Sp - 16] = block_c46eI_info;
           R2 = R1;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46eC_info" {
     block_c46eC_info:
         const _c46eC;
         const 3;
         const 47244640286;
         const S45Zy_srt+144;
 },
 _c46eI() //  [R1]
         { []
         }
     {offset
       c46eI: // global
           I64[Sp] = block_c46eM_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46eI_info" {
     block_c46eI_info:
         const _c46eI;
         const 5;
         const 21474836510;
         const S45Zy_srt+152;
 },
 _c46eM() //  [R1]
         { []
         }
     {offset
       c46eM: // global
           if (R1 & 7 == 1) goto c46fY; else goto c46gI;
       c46fY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46g1; else goto c46g0;
       c46g1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c46g0: // global
           I64[Hp - 16] = lvl5_s45TD_info;
           _s45Ty::P64 = P64[Sp + 8];
           P64[Hp] = _s45Ty::P64;
           I64[Sp + 8] = block_c46eS_info;
           R2 = _s45Ty::P64;
           P64[Sp + 16] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
       c46gI: // global
           R1 = Numeric.showInt1_closure;
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46eM_info" {
     block_c46eM_info:
         const _c46eM;
         const 133;
         const 21474836510;
         const S45Zy_srt+152;
 },
 _c46eS() //  [R1]
         { []
         }
     {offset
       c46eS: // global
           P64[Sp] = P64[Sp + 32];
           P64[Sp + 24] = P64[Sp + 24];
           P64[Sp + 32] = R1;
           call _c46f1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c46eS_info" {
     block_c46eS_info:
         const _c46eS;
         const 4;
         const 30;
 },
 _c46f1() //  []
         { []
         }
     {offset
       c46f1: // global
           I64[Sp - 8] = block_c46f3_info;
           R2 = P64[Sp + 32];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 24];
           P64[Sp - 16] = P64[Sp + 8];
           Sp = Sp - 32;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c46f3() //  [R1]
         { []
         }
     {offset
       c46f3: // global
           _s45Tv::P64 = P64[Sp + 24];
           _s45TP::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c46gt; else goto c46gE;
       c46gt: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c46gw; else goto c46gv;
       c46gw: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c46gv: // global
           I64[Hp - 56] = ds_s45TS_info;
           P64[Hp - 40] = _s45Tv::P64;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s45TP::P64;
           I64[Hp - 16] = stg_sel_1_upd_info;
           _c46f7::P64 = Hp - 56;
           P64[Hp] = _c46f7::P64;
           I64[Sp] = block_c46fa_info;
           R2 = _s45Tv::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           P64[Sp + 32] = _c46f7::P64;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
       c46gE: // global
           I64[Sp + 32] = block_c46g6_info;
           R2 = _s45Tv::P64;
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = _s45TP::P64;
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46f3_info" {
     block_c46f3_info:
         const _c46f3;
         const 5;
         const 30;
 },
 _c46fa() //  [R1]
         { []
         }
     {offset
       c46fa: // global
           I64[Sp] = block_c46fe_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46fa_info" {
     block_c46fa_info:
         const _c46fa;
         const 5;
         const 30;
 },
 _c46fe() //  [R1]
         { []
         }
     {offset
       c46fe: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c46gA; else goto c46gz;
       c46gA: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c46gz: // global
           I64[Hp - 56] = GHC.Types.C#_con_info;
           I64[Hp - 48] = R1 + 48;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 55;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = P64[Sp + 32];
           P64[Sp + 32] = Hp - 16;
           P64[Sp + 8] = Hp - 38;
           Sp = Sp + 8;
           call _c46f1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c46fe_info" {
     block_c46fe_info:
         const _c46fe;
         const 5;
         const 30;
 },
 _c46g6() //  [R1]
         { []
         }
     {offset
       c46g6: // global
           I64[Sp] = block_c46ga_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46g6_info" {
     block_c46g6_info:
         const _c46g6;
         const 1;
         const 30;
 },
 _c46ga() //  [R1]
         { []
         }
     {offset
       c46ga: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c46gq; else goto c46gp;
       c46gq: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c46gp: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = R1 + 48;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46ga_info" {
     block_c46ga_info:
         const _c46ga;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.409093671 UTC

[section ""data" . Numeric.showFFloatAlt_closure" {
     Numeric.showFFloatAlt_closure:
         const Numeric.showFFloatAlt_info;
         const 0;
 },
 sat_s45Ua_entry() //  [R1]
         { []
         }
     {offset
       c46iL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46iM; else goto c46iN;
       c46iM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46iN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 32];
           R5 = GHC.Types.True_closure+2;
           R4 = P64[R1 + 24];
           R3 = GHC.Float.FFFixed_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Ua_info" {
     sat_s45Ua_info:
         const sat_s45Ua_entry;
         const 3;
         const 4294967311;
         const S45Zy_srt+176;
 },
 Numeric.showFFloatAlt_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c46iO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c46iS; else goto c46iR;
       c46iS: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showFFloatAlt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c46iR: // global
           I64[Hp - 32] = sat_s45Ua_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showFFloatAlt_info" {
     Numeric.showFFloatAlt_info:
         const Numeric.showFFloatAlt_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S45Zy_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.415477691 UTC

[section ""data" . Numeric.showGFloatAlt_closure" {
     Numeric.showGFloatAlt_closure:
         const Numeric.showGFloatAlt_info;
         const 0;
 },
 sat_s45Ue_entry() //  [R1]
         { []
         }
     {offset
       c46je: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46jf; else goto c46jg;
       c46jf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46jg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 32];
           R5 = GHC.Types.True_closure+2;
           R4 = P64[R1 + 24];
           R3 = GHC.Float.FFGeneric_closure+3;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Ue_info" {
     sat_s45Ue_info:
         const sat_s45Ue_entry;
         const 3;
         const 4294967311;
         const S45Zy_srt+176;
 },
 Numeric.showGFloatAlt_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c46jh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c46jl; else goto c46jk;
       c46jl: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showGFloatAlt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c46jk: // global
           I64[Hp - 32] = sat_s45Ue_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showGFloatAlt_info" {
     Numeric.showGFloatAlt_info:
         const Numeric.showGFloatAlt_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S45Zy_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.420683537 UTC

[section ""cstring" . lvl1_r43OI_bytes" {
     lvl1_r43OI_bytes:
         I8[] [78,117,109,101,114,105,99,46,115,104,111,119,73,110,116,65,116,66,97,115,101,58,32,97,112,112,108,105,101,100,32,116,111,32,110,101,103,97,116,105,118,101,32,110,117,109,98,101,114,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.423979626 UTC

[section ""data" . Numeric.$wlvl_closure" {
     Numeric.$wlvl_closure:
         const Numeric.$wlvl_info;
         const 0;
 },
 sat_s45Uj_entry() //  [R1]
         { []
         }
     {offset
       c46jL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c46jM; else goto c46jN;
       c46jM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46jN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c46jI_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Uj_info" {
     sat_s45Uj_info:
         const sat_s45Uj_entry;
         const 4294967296;
         const 17;
 },
 _c46jI() //  [R1, R2]
         { []
         }
     {offset
       c46jI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46jQ; else goto c46jP;
       c46jQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c46jP: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46jI_info" {
     block_c46jI_info:
         const _c46jI;
         const 0;
         const 30;
 },
 Numeric.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       c46jT: // global
           _s45Uf::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c46jU; else goto c46jV;
       c46jV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46jX; else goto c46jW;
       c46jX: // global
           HpAlloc = 24;
           goto c46jU;
       c46jU: // global
           R2 = _s45Uf::I64;
           R1 = Numeric.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c46jW: // global
           I64[Hp - 16] = sat_s45Uj_info;
           I64[Hp] = _s45Uf::I64;
           I64[Sp - 8] = block_c46jR_info;
           R3 = Hp - 16;
           R2 = lvl1_r43OI_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.$wlvl_info" {
     Numeric.$wlvl_info:
         const Numeric.$wlvl_entry;
         const 0;
         const 1103806595086;
         const 4294967300;
         const S45Zy_srt+136;
 },
 _c46jR() //  [R1]
         { []
         }
     {offset
       c46jR: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46jR_info" {
     block_c46jR_info:
         const _c46jR;
         const 0;
         const 4294967326;
         const S45Zy_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.432176389 UTC

[section ""cstring" . lvl2_r43OJ_bytes" {
     lvl2_r43OJ_bytes:
         I8[] [78,117,109,101,114,105,99,46,115,104,111,119,73,110,116,65,116,66,97,115,101,58,32,97,112,112,108,105,101,100,32,116,111,32,117,110,115,117,112,112,111,114,116,101,100,32,98,97,115,101,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.435435728 UTC

[section ""data" . Numeric.showIntAtBase2_closure" {
     Numeric.showIntAtBase2_closure:
         const Numeric.showIntAtBase2_info;
         const 0;
 },
 sat_s45Un_entry() //  [R1]
         { []
         }
     {offset
       c46kw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46kx; else goto c46ky;
       c46kx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46ky: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.show_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Un_info" {
     sat_s45Un_info:
         const sat_s45Un_entry;
         const 2;
         const 18;
 },
 Numeric.showIntAtBase2_entry() //  [R2, R3]
         { []
         }
     {offset
       c46kB: // global
           _s45Um::P64 = R3;
           _s45Ul::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c46kC; else goto c46kD;
       c46kD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c46kF; else goto c46kE;
       c46kF: // global
           HpAlloc = 32;
           goto c46kC;
       c46kC: // global
           R3 = _s45Um::P64;
           R2 = _s45Ul::P64;
           R1 = Numeric.showIntAtBase2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c46kE: // global
           I64[Hp - 24] = sat_s45Un_info;
           P64[Hp - 8] = _s45Ul::P64;
           P64[Hp] = _s45Um::P64;
           I64[Sp - 8] = block_c46kz_info;
           R3 = Hp - 24;
           R2 = lvl1_r43OI_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showIntAtBase2_info" {
     Numeric.showIntAtBase2_info:
         const Numeric.showIntAtBase2_entry;
         const 0;
         const 2203318222862;
         const 8589934607;
         const S45Zy_srt+136;
 },
 _c46kz() //  [R1]
         { []
         }
     {offset
       c46kz: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46kz_info" {
     block_c46kz_info:
         const _c46kz;
         const 0;
         const 4294967326;
         const S45Zy_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.443453168 UTC

[section ""data" . Numeric.showIntAtBase1_closure" {
     Numeric.showIntAtBase1_closure:
         const Numeric.showIntAtBase1_info;
         const 0;
 },
 sat_s45Ur_entry() //  [R1]
         { []
         }
     {offset
       c46l8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46l9; else goto c46la;
       c46l9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46la: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.show_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Ur_info" {
     sat_s45Ur_info:
         const sat_s45Ur_entry;
         const 2;
         const 18;
 },
 Numeric.showIntAtBase1_entry() //  [R2, R3]
         { []
         }
     {offset
       c46ld: // global
           _s45Uq::P64 = R3;
           _s45Up::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c46le; else goto c46lf;
       c46lf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c46lh; else goto c46lg;
       c46lh: // global
           HpAlloc = 32;
           goto c46le;
       c46le: // global
           R3 = _s45Uq::P64;
           R2 = _s45Up::P64;
           R1 = Numeric.showIntAtBase1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c46lg: // global
           I64[Hp - 24] = sat_s45Ur_info;
           P64[Hp - 8] = _s45Up::P64;
           P64[Hp] = _s45Uq::P64;
           I64[Sp - 8] = block_c46lb_info;
           R3 = Hp - 24;
           R2 = lvl2_r43OJ_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showIntAtBase1_info" {
     Numeric.showIntAtBase1_info:
         const Numeric.showIntAtBase1_entry;
         const 0;
         const 4402341478414;
         const 8589934607;
         const S45Zy_srt+136;
 },
 _c46lb() //  [R1]
         { []
         }
     {offset
       c46lb: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46lb_info" {
     block_c46lb_info:
         const _c46lb;
         const 0;
         const 4294967326;
         const S45Zy_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.44982491 UTC

[section ""data" . sat_s45Ut_closure" {
     sat_s45Ut_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.451463327 UTC

[section ""data" . sat_s45Uu_closure" {
     sat_s45Uu_closure:
         const :_con_info;
         const sat_s45Ut_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.45451443 UTC

[section ""data" . Numeric.showIntAtBase3_closure" {
     Numeric.showIntAtBase3_closure:
         const Numeric.showIntAtBase3_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showIntAtBase3_entry() //  [R1]
         { []
         }
     {offset
       c46lK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46lL; else goto c46lM;
       c46lL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46lM: // global
           (_c46lH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46lH::I64 == 0) goto c46lJ; else goto c46lI;
       c46lJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c46lI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46lH::I64;
           R3 = sat_s45Uu_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showIntAtBase3_info" {
     Numeric.showIntAtBase3_info:
         const Numeric.showIntAtBase3_entry;
         const 0;
         const 4294967317;
         const S45Zy_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.466457429 UTC

[section ""data" . Numeric.showIntAtBase_closure" {
     Numeric.showIntAtBase_closure:
         const Numeric.showIntAtBase_info;
         const 0;
 },
 $dNum_s45UC_entry() //  [R1]
         { []
         }
     {offset
       c46mS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46mT; else goto c46mU;
       c46mT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46mU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s45UC_info" {
     $dNum_s45UC_info:
         const $dNum_s45UC_entry;
         const 1;
         const 16;
 },
 sat_s45UE_entry() //  [R1]
         { []
         }
     {offset
       c46mX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46mY; else goto c46mZ;
       c46mY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46mZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Numeric.showIntAtBase3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45UE_info" {
     sat_s45UE_info:
         const sat_s45UE_entry;
         const 1;
         const 4294967312;
         const S45Zy_srt+232;
 },
 sat_s45UG_entry() //  [R1]
         { []
         }
     {offset
       c46n2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46n3; else goto c46n4;
       c46n3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46n4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Numeric.showHFloat16_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45UG_info" {
     sat_s45UG_info:
         const sat_s45UG_entry;
         const 1;
         const 4294967312;
         const S45Zy_srt+144;
 },
 lvl5_s45UL_entry() //  [R1]
         { []
         }
     {offset
       c46n7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46n8; else goto c46n9;
       c46n8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46n9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Numeric.showHFloat16_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_s45UL_info" {
     lvl5_s45UL_info:
         const lvl5_s45UL_entry;
         const 1;
         const 4294967312;
         const S45Zy_srt+144;
 },
 sat_s45UT_entry() //  [R1]
         { []
         }
     {offset
       c46ne: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c46nm; else goto c46nn;
       c46nm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46nn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c46nc_info;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45UT_info" {
     sat_s45UT_info:
         const sat_s45UT_entry;
         const 2;
         const 18;
 },
 _c46nc() //  [R1]
         { []
         }
     {offset
       c46nc: // global
           I64[Sp] = block_c46nh_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c46nc_info" {
     block_c46nc_info:
         const _c46nc;
         const 0;
         const 30;
 },
 _c46nh() //  [R1]
         { []
         }
     {offset
       c46nh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c46nr; else goto c46nq;
       c46nr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c46nq: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46nh_info" {
     block_c46nh_info:
         const _c46nh;
         const 0;
         const 30;
 },
 Numeric.showIntAtBase_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c46ns: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c46nt; else goto c46nu;
       c46nt: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showIntAtBase_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c46nu: // global
           I64[Sp - 48] = block_c46m0_info;
           _s45Uv::P64 = R2;
           R2 = R2;
           P64[Sp - 40] = _s45Uv::P64;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showIntAtBase_info" {
     Numeric.showIntAtBase_info:
         const Numeric.showIntAtBase_entry;
         const 0;
         const 29691108917262;
         const 25769803802;
         const S45Zy_srt+144;
 },
 _c46m0() //  [R1]
         { []
         }
     {offset
       c46m0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46nx; else goto c46nw;
       c46nx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c46nw: // global
           I64[Hp - 16] = $dNum_s45UC_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c46m6_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46m0_info" {
     block_c46m0_info:
         const _c46m0;
         const 6;
         const 12098922872862;
         const S45Zy_srt+144;
 },
 _c46m6() //  [R1]
         { []
         }
     {offset
       c46m6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46nA; else goto c46nz;
       c46nA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c46nz: // global
           I64[Hp - 16] = sat_s45UE_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_c46mc_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 32];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46m6_info" {
     block_c46m6_info:
         const _c46m6;
         const 7;
         const 12098922872862;
         const S45Zy_srt+144;
 },
 _c46mc() //  [R1]
         { []
         }
     {offset
       c46mc: // global
           if (R1 & 7 == 1) goto c46nC; else goto c46ob;
       c46nC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46nF; else goto c46nE;
       c46nF: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c46nE: // global
           I64[Hp - 16] = sat_s45UG_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c46mi_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 56];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       c46ob: // global
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           Sp = Sp + 72;
           call Numeric.showIntAtBase1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46mc_info" {
     block_c46mc_info:
         const _c46mc;
         const 8;
         const 3302829850654;
         const S45Zy_srt+144;
 },
 _c46mi() //  [R1]
         { []
         }
     {offset
       c46mi: // global
           _s45Uz::P64 = P64[Sp + 56];
           if (R1 & 7 == 1) goto c46nI; else goto c46o7;
       c46nI: // global
           I64[Sp] = block_c46mm_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s45Uz::P64;
           P64[Sp - 8] = P64[Sp + 40];
           Sp = Sp - 24;
           call GHC.Real.quotRem_entry(R2) args: 32, res: 8, upd: 8;
       c46o7: // global
           R3 = _s45Uz::P64;
           R2 = P64[Sp + 32];
           Sp = Sp + 72;
           call Numeric.showIntAtBase2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46mi_info" {
     block_c46mi_info:
         const _c46mi;
         const 8;
         const 1103806595102;
         const S45Zy_srt+144;
 },
 _c46mm() //  [R1]
         { []
         }
     {offset
       c46mm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46nL; else goto c46nK;
       c46nL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c46nK: // global
           _s45UJ::P64 = P64[R1 + 7];
           _s45UK::P64 = P64[R1 + 15];
           I64[Hp - 16] = lvl5_s45UL_info;
           P64[Hp] = P64[Sp + 16];
           _s45UD::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c46ms_info;
           R2 = _s45UD::P64;
           P64[Sp + 16] = _s45UK::P64;
           P64[Sp + 32] = _s45UJ::P64;
           P64[Sp + 56] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46mm_info" {
     block_c46mm_info:
         const _c46mm;
         const 4616;
         const 4294967326;
         const S45Zy_srt+144;
 },
 _c46ms() //  [R1]
         { []
         }
     {offset
       c46ms: // global
           P64[Sp] = P64[Sp + 56];
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 24] = P64[Sp + 24];
           P64[Sp + 56] = R1;
           call _c46mz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c46ms_info" {
     block_c46ms_info:
         const _c46ms;
         const 7;
         const 30;
 },
 _c46mz() //  []
         { []
         }
     {offset
       c46mz: // global
           Hp = Hp + 32;
           _s45UP::P64 = P64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c46nP; else goto c46nO;
       c46nP: // global
           HpAlloc = 32;
           I64[Sp + 8] = block_c46my_info;
           R3 = P64[Sp];
           R2 = _s45UP::P64;
           R1 = P64[Sp + 24];
           Sp = Sp + 8;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       c46nO: // global
           I64[Hp - 24] = sat_s45UT_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s45UP::P64;
           I64[Sp - 8] = block_c46mD_info;
           R2 = Hp - 24;
           R1 = P64[Sp + 40];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c46my() //  [R1, R2, R3]
         { []
         }
     {offset
       c46my: // global
           P64[Sp + 16] = R1;
           P64[Sp] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 8;
           call _c46mz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c46my_info" {
     block_c46my_info:
         const _c46my;
         const 134;
         const 30;
 },
 _c46mD() //  [R1]
         { []
         }
     {offset
       c46mD: // global
           I64[Sp] = block_c46mH_info;
           R2 = P64[Sp + 64];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = P64[Sp + 56];
           P64[Sp + 16] = R1;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46mD_info" {
     block_c46mD_info:
         const _c46mD;
         const 136;
         const 30;
 },
 _c46mH() //  [R1]
         { []
         }
     {offset
       c46mH: // global
           if (R1 & 7 == 1) goto c46nT; else goto c46o0;
       c46nT: // global
           I64[Sp] = block_c46mL_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = P64[Sp + 40];
           Sp = Sp - 24;
           call GHC.Real.quotRem_entry(R2) args: 32, res: 8, upd: 8;
       c46o0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46o3; else goto c46o2;
       c46o3: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c46o2: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 14;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46mH_info" {
     block_c46mH_info:
         const _c46mH;
         const 8;
         const 30;
 },
 _c46mL() //  [R1]
         { []
         }
     {offset
       c46mL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46nW; else goto c46nV;
       c46nW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c46nV: // global
           _s45UY::P64 = P64[R1 + 7];
           _s45UZ::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           P64[Sp + 32] = _s45UY::P64;
           P64[Sp + 16] = _s45UZ::P64;
           P64[Sp + 8] = Hp - 14;
           Sp = Sp + 8;
           call _c46mz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c46mL_info" {
     block_c46mL_info:
         const _c46mL;
         const 520;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.497775846 UTC

[section ""data" . sat_s45V1_closure" {
     sat_s45V1_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.499448206 UTC

[section ""data" . sat_s45V2_closure" {
     sat_s45V2_closure:
         const :_con_info;
         const sat_s45V1_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.501797071 UTC

[section ""data" . Numeric.showHex1_closure" {
     Numeric.showHex1_closure:
         const Numeric.showHex1_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showHex1_entry() //  [R1]
         { []
         }
     {offset
       c46qB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46qC; else goto c46qD;
       c46qC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46qD: // global
           (_c46qy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46qy::I64 == 0) goto c46qA; else goto c46qz;
       c46qA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c46qz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46qy::I64;
           R3 = sat_s45V2_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showHex1_info" {
     Numeric.showHex1_info:
         const Numeric.showHex1_entry;
         const 0;
         const 4294967317;
         const S45Zy_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.506903517 UTC

[section ""data" . Numeric.showHex_closure" {
     Numeric.showHex_closure:
         const Numeric.showHex_info;
         const 0;
 },
 sat_s45V7_entry() //  [R1]
         { []
         }
     {offset
       c46qX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46r1; else goto c46r2;
       c46r1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46r2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c46qV_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45V7_info" {
     sat_s45V7_info:
         const sat_s45V7_entry;
         const 1;
         const 4294967312;
         const S45Zy_srt+256;
 },
 _c46qV() //  [R1]
         { []
         }
     {offset
       c46qV: // global
           I64[Sp] = block_c46r0_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c46qV_info" {
     block_c46qV_info:
         const _c46qV;
         const 0;
         const 4294967326;
         const S45Zy_srt+256;
 },
 _c46r0() //  [R1]
         { []
         }
     {offset
       c46r0: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Numeric.showHex1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46r0_info" {
     block_c46r0_info:
         const _c46r0;
         const 0;
         const 4294967326;
         const S45Zy_srt+256;
 },
 Numeric.showHex_entry() //  [R2, R3]
         { []
         }
     {offset
       c46r8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46rc; else goto c46rb;
       c46rc: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showHex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c46rb: // global
           I64[Hp - 16] = sat_s45V7_info;
           P64[Hp] = R2;
           R5 = GHC.Show.intToDigit_closure+1;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showIntAtBase_closure+6;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showHex_info" {
     Numeric.showHex_info:
         const Numeric.showHex_entry;
         const 0;
         const 124554051598;
         const 8589934607;
         const S45Zy_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.515217538 UTC

[section ""cstring" . Numeric.$trModule4_bytes" {
     Numeric.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.517495374 UTC

[section ""data" . loc_r43OK_closure" {
     loc_r43OK_closure:
         const loc_r43OK_info;
         const 0;
         const 0;
         const 0;
 },
 loc_r43OK_entry() //  [R1]
         { []
         }
     {offset
       c46rF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46rG; else goto c46rH;
       c46rG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46rH: // global
           (_c46rC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46rC::I64 == 0) goto c46rE; else goto c46rD;
       c46rE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c46rD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46rC::I64;
           R2 = Numeric.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc_r43OK_info" {
     loc_r43OK_info:
         const loc_r43OK_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.520930416 UTC

[section ""cstring" . Numeric.$trModule2_bytes" {
     Numeric.$trModule2_bytes:
         I8[] [78,117,109,101,114,105,99]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.523116638 UTC

[section ""data" . loc1_r43OL_closure" {
     loc1_r43OL_closure:
         const loc1_r43OL_info;
         const 0;
         const 0;
         const 0;
 },
 loc1_r43OL_entry() //  [R1]
         { []
         }
     {offset
       c46rX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46rY; else goto c46rZ;
       c46rY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46rZ: // global
           (_c46rU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46rU::I64 == 0) goto c46rW; else goto c46rV;
       c46rW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c46rV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46rU::I64;
           R2 = Numeric.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc1_r43OL_info" {
     loc1_r43OL_info:
         const loc1_r43OL_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.526745801 UTC

[section ""cstring" . loc2_r43OM_bytes" {
     loc2_r43OM_bytes:
         I8[] [78,117,109,101,114,105,99,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.528883356 UTC

[section ""data" . loc3_r43ON_closure" {
     loc3_r43ON_closure:
         const loc3_r43ON_info;
         const 0;
         const 0;
         const 0;
 },
 loc3_r43ON_entry() //  [R1]
         { []
         }
     {offset
       c46sf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46sg; else goto c46sh;
       c46sg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46sh: // global
           (_c46sc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46sc::I64 == 0) goto c46se; else goto c46sd;
       c46se: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c46sd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46sc::I64;
           R2 = loc2_r43OM_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc3_r43ON_info" {
     loc3_r43ON_info:
         const loc3_r43ON_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.532357994 UTC

[section ""data" . loc4_r43OO_closure" {
     loc4_r43OO_closure:
         const GHC.Types.I#_con_info;
         const 241;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.534021383 UTC

[section ""data" . loc5_r43OP_closure" {
     loc5_r43OP_closure:
         const GHC.Types.I#_con_info;
         const 22;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.535642012 UTC

[section ""data" . loc6_r43OQ_closure" {
     loc6_r43OQ_closure:
         const GHC.Types.I#_con_info;
         const 75;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.537193908 UTC

[section ""cstring" . $dIP_r43OR_bytes" {
     $dIP_r43OR_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.539391388 UTC

[section ""data" . $dIP1_r43OS_closure" {
     $dIP1_r43OS_closure:
         const $dIP1_r43OS_info;
         const 0;
         const 0;
         const 0;
 },
 $dIP1_r43OS_entry() //  [R1]
         { []
         }
     {offset
       c46sA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46sB; else goto c46sC;
       c46sB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46sC: // global
           (_c46sx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46sx::I64 == 0) goto c46sz; else goto c46sy;
       c46sz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c46sy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46sx::I64;
           R2 = $dIP_r43OR_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dIP1_r43OS_info" {
     $dIP1_r43OS_info:
         const $dIP1_r43OS_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.543015613 UTC

[section ""data" . $dIP2_r43OT_closure" {
     $dIP2_r43OT_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const loc_r43OK_closure;
         const loc1_r43OL_closure;
         const loc3_r43ON_closure;
         const loc4_r43OO_closure+1;
         const loc5_r43OP_closure+1;
         const loc4_r43OO_closure+1;
         const loc6_r43OQ_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.544698568 UTC

[section ""data" . $dIP3_r43OU_closure" {
     $dIP3_r43OU_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const $dIP1_r43OS_closure;
         const $dIP2_r43OT_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.546357592 UTC

[section ""cstring" . lvl3_r43OV_bytes" {
     lvl3_r43OV_bytes:
         I8[] [73,109,112,111,115,115,105,98,108,101,32,104,97,112,112,101,110,101,100,58,32,115,104,111,119,72,70,108,111,97,116,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.547998515 UTC

[section ""data" . lvl4_r43OW_closure" {
     lvl4_r43OW_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)2_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.552389844 UTC

[section ""data" . $wlvl2_r43OX_closure" {
     $wlvl2_r43OX_closure:
         const $wlvl2_r43OX_info;
         const 0;
 },
 sat_s45Vf_entry() //  [R1, R2]
         { []
         }
     {offset
       c46t5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c46t6; else goto c46t7;
       c46t6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c46t7: // global
           I64[Sp - 8] = block_c46t2_info;
           R4 = R2;
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp - 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s45Vf_info" {
     sat_s45Vf_info:
         const sat_s45Vf_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _c46t2() //  [R1, R2]
         { []
         }
     {offset
       c46t2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46ta; else goto c46t9;
       c46ta: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c46t9: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46t2_info" {
     block_c46t2_info:
         const _c46t2;
         const 0;
         const 30;
 },
 sat_s45Va_entry() //  [R1, R2]
         { []
         }
     {offset
       c46th: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Show.$fShowInt_$cshowList_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s45Va_info" {
     sat_s45Va_info:
         const sat_s45Va_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s45Vi_entry() //  [R1]
         { []
         }
     {offset
       c46tl: // global
           _s45Vi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c46tm; else goto c46tn;
       c46tn: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c46tp; else goto c46to;
       c46tp: // global
           HpAlloc = 80;
           goto c46tm;
       c46tm: // global
           R1 = _s45Vi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46to: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s45Vi::P64;
           _s45V8::P64 = P64[_s45Vi::P64 + 16];
           _s45V9::I64 = I64[_s45Vi::P64 + 24];
           I64[Hp - 72] = sat_s45Vf_info;
           I64[Hp - 64] = _s45V9::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           I64[Hp - 32] = sat_s45Va_info;
           P64[Hp - 24] = _s45V8::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 54;
           R3 = lvl4_r43OW_closure+2;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Vi_info" {
     sat_s45Vi_info:
         const sat_s45Vi_entry;
         const 4294967297;
         const 4294967315;
         const S45Zy_srt+280;
 },
 $wlvl2_r43OX_entry() //  [R2, R3]
         { []
         }
     {offset
       c46tt: // global
           _s45V9::I64 = R3;
           _s45V8::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c46tu; else goto c46tv;
       c46tv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c46tx; else goto c46tw;
       c46tx: // global
           HpAlloc = 56;
           goto c46tu;
       c46tu: // global
           R3 = _s45V9::I64;
           R2 = _s45V8::P64;
           R1 = $wlvl2_r43OX_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c46tw: // global
           I64[Hp - 48] = sat_s45Vi_info;
           P64[Hp - 32] = _s45V8::P64;
           I64[Hp - 24] = _s45V9::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           I64[Sp - 8] = block_c46tr_info;
           R3 = Hp - 14;
           R2 = lvl3_r43OV_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl2_r43OX_info" {
     $wlvl2_r43OX_info:
         const $wlvl2_r43OX_entry;
         const 0;
         const 64424509454;
         const 8589934606;
         const S45Zy_srt+280;
 },
 _c46tr() //  [R1]
         { []
         }
     {offset
       c46tr: // global
           R3 = R1;
           R2 = $dIP3_r43OU_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46tr_info" {
     block_c46tr_info:
         const _c46tr;
         const 0;
         const 12884901918;
         const S45Zy_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.566356528 UTC

[section ""data" . Numeric.showHFloat_allZ_closure" {
     Numeric.showHFloat_allZ_closure:
         const Numeric.showHFloat_allZ_info;
 },
 Numeric.showHFloat_allZ_entry() //  [R2]
         { []
         }
     {offset
       c46uq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46ur; else goto u46uJ;
       c46ur: // global
           R2 = R2;
           R1 = Numeric.showHFloat_allZ_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u46uJ: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c46ug() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Numeric.showHFloat_allZ_info" {
     Numeric.showHFloat_allZ_info:
         const Numeric.showHFloat_allZ_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c46ug() //  []
         { []
         }
     {offset
       c46ug: // global
           _s45Vl::P64 = P64[Sp];
           I64[Sp] = block_c46uj_info;
           R1 = _s45Vl::P64;
           if (R1 & 7 != 0) goto u46uL; else goto c46uk;
       u46uL: // global
           call _c46uj(R1) args: 0, res: 0, upd: 0;
       c46uk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c46uj() //  [R1]
         { []
         }
     {offset
       c46uj: // global
           if (R1 & 7 == 1) goto c46un; else goto c46uo;
       c46un: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c46uo: // global
           I64[Sp - 8] = block_c46uy_info;
           _s45Vo::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s45Vo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u46uM; else goto c46uA;
       u46uM: // global
           call _c46uy(R1) args: 0, res: 0, upd: 0;
       c46uA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46uj_info" {
     block_c46uj_info:
         const _c46uj;
         const 0;
         const 30;
 },
 _c46uy() //  [R1]
         { []
         }
     {offset
       c46uy: // global
           if (I64[R1 + 7] == 0) goto c46uI; else goto c46uH;
       c46uI: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c46ug() args: 0, res: 0, upd: 0;
       c46uH: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46uy_info" {
     block_c46uy_info:
         const _c46uy;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.575556602 UTC

[section ""data" . $wshowIt1_r43OY_closure" {
     $wshowIt1_r43OY_closure:
         const $wshowIt1_r43OY_info;
         const 0;
 },
 $wshowIt1_r43OY_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c46vv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46vw; else goto u46vI;
       c46vw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wshowIt1_r43OY_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u46vI: // global
           I64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c46ve() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wshowIt1_r43OY_info" {
     $wshowIt1_r43OY_info:
         const $wshowIt1_r43OY_entry;
         const 0;
         const 12884901902;
         const 12884901907;
         const S45Zy_srt+312;
 },
 _c46ve() //  []
         { []
         }
     {offset
       c46ve: // global
           I64[Sp - 8] = block_c46vh_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u46vK; else goto c46vi;
       u46vK: // global
           call _c46vh(R1) args: 0, res: 0, upd: 0;
       c46vi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c46vh() //  [R1]
         { []
         }
     {offset
       c46vh: // global
           I64[Sp] = block_c46vm_info;
           R2 = I64[R1 + 7];
           call GHC.Show.$wintToDigit_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46vh_info" {
     block_c46vh_info:
         const _c46vh;
         const 195;
         const 4294967326;
         const S45Zy_srt+312;
 },
 _c46vm() //  [R1]
         { []
         }
     {offset
       c46vm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c46vB; else goto c46vA;
       c46vB: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c46vA: // global
           _s45Vu::P64 = P64[Sp + 24];
           _s45Vy::I64 = I64[Sp + 8];
           if (_s45Vy::I64 == 0) goto c46vH; else goto c46vD;
       c46vH: // global
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R1;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s45Vu::P64;
           _c46vG::P64 = Hp - 30;
           Hp = Hp - 16;
           R1 = _c46vG::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c46vD: // global
           (_s45VA::I64, _s45VB::I64) = call MO_S_QuotRem W64(_s45Vy::I64, 16);
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R1;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s45Vu::P64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s45VB::I64;
           I64[Sp + 8] = _s45VA::I64;
           P64[Sp + 16] = Hp - 7;
           P64[Sp + 24] = Hp - 30;
           Sp = Sp + 8;
           call _c46ve() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c46vm_info" {
     block_c46vm_info:
         const _c46vm;
         const 195;
         const 4294967326;
         const S45Zy_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.585456857 UTC

[section ""data" . $wshowIt2_r43OZ_closure" {
     $wshowIt2_r43OZ_closure:
         const $wshowIt2_r43OZ_info;
         const 0;
 },
 $wshowIt2_r43OZ_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c46ww: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46wx; else goto u46wJ;
       c46wx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wshowIt2_r43OZ_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u46wJ: // global
           I64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c46wf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wshowIt2_r43OZ_info" {
     $wshowIt2_r43OZ_info:
         const $wshowIt2_r43OZ_entry;
         const 0;
         const 21474836494;
         const 12884901907;
         const S45Zy_srt+312;
 },
 _c46wf() //  []
         { []
         }
     {offset
       c46wf: // global
           I64[Sp - 8] = block_c46wi_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u46wL; else goto c46wj;
       u46wL: // global
           call _c46wi(R1) args: 0, res: 0, upd: 0;
       c46wj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c46wi() //  [R1]
         { []
         }
     {offset
       c46wi: // global
           I64[Sp] = block_c46wn_info;
           R2 = I64[R1 + 7];
           call GHC.Show.$wintToDigit_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46wi_info" {
     block_c46wi_info:
         const _c46wi;
         const 195;
         const 4294967326;
         const S45Zy_srt+312;
 },
 _c46wn() //  [R1]
         { []
         }
     {offset
       c46wn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c46wC; else goto c46wB;
       c46wC: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c46wB: // global
           _s45VI::P64 = P64[Sp + 24];
           _s45VM::I64 = I64[Sp + 8];
           if (_s45VM::I64 == 0) goto c46wI; else goto c46wE;
       c46wI: // global
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R1;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s45VI::P64;
           _c46wH::P64 = Hp - 30;
           Hp = Hp - 16;
           R1 = _c46wH::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c46wE: // global
           (_s45VO::I64, _s45VP::I64) = call MO_S_QuotRem W64(_s45VM::I64, 16);
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R1;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s45VI::P64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s45VP::I64;
           I64[Sp + 8] = _s45VO::I64;
           P64[Sp + 16] = Hp - 7;
           P64[Sp + 24] = Hp - 30;
           Sp = Sp + 8;
           call _c46wf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c46wn_info" {
     block_c46wn_info:
         const _c46wn;
         const 195;
         const 4294967326;
         const S45Zy_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.594745857 UTC

[section ""data" . $wshowIt3_r43P0_closure" {
     $wshowIt3_r43P0_closure:
         const $wshowIt3_r43P0_info;
         const 0;
 },
 $wshowIt3_r43P0_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c46xx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46xy; else goto u46xK;
       c46xy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wshowIt3_r43P0_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u46xK: // global
           I64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c46xg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wshowIt3_r43P0_info" {
     $wshowIt3_r43P0_info:
         const $wshowIt3_r43P0_entry;
         const 0;
         const 38654705678;
         const 12884901907;
         const S45Zy_srt+312;
 },
 _c46xg() //  []
         { []
         }
     {offset
       c46xg: // global
           I64[Sp - 8] = block_c46xj_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u46xM; else goto c46xk;
       u46xM: // global
           call _c46xj(R1) args: 0, res: 0, upd: 0;
       c46xk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c46xj() //  [R1]
         { []
         }
     {offset
       c46xj: // global
           I64[Sp] = block_c46xo_info;
           R2 = I64[R1 + 7];
           call GHC.Show.$wintToDigit_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46xj_info" {
     block_c46xj_info:
         const _c46xj;
         const 195;
         const 4294967326;
         const S45Zy_srt+312;
 },
 _c46xo() //  [R1]
         { []
         }
     {offset
       c46xo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c46xD; else goto c46xC;
       c46xD: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c46xC: // global
           _s45VW::P64 = P64[Sp + 24];
           _s45W0::I64 = I64[Sp + 8];
           if (_s45W0::I64 == 0) goto c46xJ; else goto c46xF;
       c46xJ: // global
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R1;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s45VW::P64;
           _c46xI::P64 = Hp - 30;
           Hp = Hp - 16;
           R1 = _c46xI::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c46xF: // global
           (_s45W2::I64, _s45W3::I64) = call MO_S_QuotRem W64(_s45W0::I64, 16);
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R1;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s45VW::P64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s45W3::I64;
           I64[Sp + 8] = _s45W2::I64;
           P64[Sp + 16] = Hp - 7;
           P64[Sp + 24] = Hp - 30;
           Sp = Sp + 8;
           call _c46xg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c46xo_info" {
     block_c46xo_info:
         const _c46xo;
         const 195;
         const 4294967326;
         const S45Zy_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.604329116 UTC

[section ""data" . $wshowIt4_r43P1_closure" {
     $wshowIt4_r43P1_closure:
         const $wshowIt4_r43P1_info;
         const 0;
 },
 $wshowIt4_r43P1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c46yy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46yz; else goto u46yL;
       c46yz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wshowIt4_r43P1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u46yL: // global
           I64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c46yh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wshowIt4_r43P1_info" {
     $wshowIt4_r43P1_info:
         const $wshowIt4_r43P1_entry;
         const 0;
         const 73014444046;
         const 12884901907;
         const S45Zy_srt+312;
 },
 _c46yh() //  []
         { []
         }
     {offset
       c46yh: // global
           I64[Sp - 8] = block_c46yk_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u46yN; else goto c46yl;
       u46yN: // global
           call _c46yk(R1) args: 0, res: 0, upd: 0;
       c46yl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c46yk() //  [R1]
         { []
         }
     {offset
       c46yk: // global
           I64[Sp] = block_c46yp_info;
           R2 = I64[R1 + 7];
           call GHC.Show.$wintToDigit_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46yk_info" {
     block_c46yk_info:
         const _c46yk;
         const 195;
         const 4294967326;
         const S45Zy_srt+312;
 },
 _c46yp() //  [R1]
         { []
         }
     {offset
       c46yp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c46yE; else goto c46yD;
       c46yE: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c46yD: // global
           _s45Wa::P64 = P64[Sp + 24];
           _s45We::I64 = I64[Sp + 8];
           if (_s45We::I64 == 0) goto c46yK; else goto c46yG;
       c46yK: // global
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R1;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s45Wa::P64;
           _c46yJ::P64 = Hp - 30;
           Hp = Hp - 16;
           R1 = _c46yJ::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c46yG: // global
           (_s45Wg::I64, _s45Wh::I64) = call MO_S_QuotRem W64(_s45We::I64, 16);
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R1;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s45Wa::P64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s45Wh::I64;
           I64[Sp + 8] = _s45Wg::I64;
           P64[Sp + 16] = Hp - 7;
           P64[Sp + 24] = Hp - 30;
           Sp = Sp + 8;
           call _c46yh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c46yp_info" {
     block_c46yp_info:
         const _c46yp;
         const 195;
         const 4294967326;
         const S45Zy_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.619429954 UTC

[section ""data" . Numeric.showHFloat_hex_closure" {
     Numeric.showHFloat_hex_closure:
         const Numeric.showHFloat_hex_info;
         const 0;
 },
 sat_s45Xs_entry() //  [R1]
         { []
         }
     {offset
       c46As: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46At; else goto c46Au;
       c46At: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46Au: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Numeric.showHFloat_hex_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Xs_info" {
     sat_s45Xs_info:
         const sat_s45Xs_entry;
         const 1;
         const 4294967312;
         const S45Zy_srt+352;
 },
 Numeric.showHFloat_hex_entry() //  [R2]
         { []
         }
     {offset
       c46Az: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c46AA; else goto c46AB;
       c46AA: // global
           R2 = R2;
           R1 = Numeric.showHFloat_hex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c46AB: // global
           I64[Sp - 8] = block_c46zl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u46CM; else goto c46zm;
       u46CM: // global
           call _c46zl(R1) args: 0, res: 0, upd: 0;
       c46zm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showHFloat_hex_info" {
     Numeric.showHFloat_hex_info:
         const Numeric.showHFloat_hex_entry;
         const 0;
         const 4362866433982478;
         const 4294967301;
         const S45Zy_srt+200;
 },
 _c46zl() //  [R1]
         { []
         }
     {offset
       c46zl: // global
           if (R1 & 7 == 1) goto c46Aw; else goto c46Ax;
       c46Aw: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c46Ax: // global
           I64[Sp - 8] = block_c46zr_info;
           _s45Wo::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s45Wo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u46CC; else goto c46zs;
       u46CC: // global
           call _c46zr(R1) args: 0, res: 0, upd: 0;
       c46zs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46zl_info" {
     block_c46zl_info:
         const _c46zl;
         const 0;
         const 4362866433982494;
         const S45Zy_srt+200;
 },
 _c46zr() //  [R1]
         { []
         }
     {offset
       c46zr: // global
           if (R1 & 7 == 1) goto c46AJ; else goto c46B2;
       c46AJ: // global
           _s45Wo::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c46AG_info;
           R1 = _s45Wo::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u46CD; else goto c46AK;
       u46CD: // global
           call _c46AG(R1) args: 0, res: 0, upd: 0;
       c46AK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c46B2: // global
           I64[Sp - 8] = block_c46zx_info;
           _s45Wz::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s45Wz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u46CE; else goto c46zy;
       u46CE: // global
           call _c46zx(R1) args: 0, res: 0, upd: 0;
       c46zy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46zr_info" {
     block_c46zr_info:
         const _c46zr;
         const 1;
         const 4362866433982494;
         const S45Zy_srt+200;
 },
 _c46AG() //  [R1]
         { []
         }
     {offset
       c46AG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c46AQ; else goto c46AP;
       c46AQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c46AP: // global
           _s45Wt::I64 = I64[R1 + 7] << 3;
           if (%MO_S_Ge_W64(_s45Wt::I64, 0)) goto c46AZ; else goto c46B0;
       c46AZ: // global
           (_s45Ww::I64, _s45Wx::I64) = call MO_S_QuotRem W64(_s45Wt::I64, 16);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s45Wx::I64;
           R4 = GHC.Types.[]_closure+1;
           R3 = Hp - 7;
           R2 = _s45Ww::I64;
           Sp = Sp + 8;
           call $wshowIt4_r43P1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c46B0: // global
           Hp = Hp - 16;
           R2 = _s45Wt::I64;
           Sp = Sp + 8;
           call Numeric.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46AG_info" {
     block_c46AG_info:
         const _c46AG;
         const 0;
         const 1125904201809950;
         const S45Zy_srt+200;
 },
 _c46zx() //  [R1]
         { []
         }
     {offset
       c46zx: // global
           if (R1 & 7 == 1) goto c46Bc; else goto c46BC;
       c46Bc: // global
           I64[Sp] = block_c46B4_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u46CF; else goto c46B5;
       u46CF: // global
           call _c46B4(R1) args: 0, res: 0, upd: 0;
       c46B5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c46BC: // global
           I64[Sp - 8] = block_c46zD_info;
           _s45WO::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s45WO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u46CG; else goto c46zE;
       u46CG: // global
           call _c46zD(R1) args: 0, res: 0, upd: 0;
       c46zE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46zx_info" {
     block_c46zx_info:
         const _c46zx;
         const 2;
         const 3236966527139870;
         const S45Zy_srt+200;
 },
 _c46B4() //  [R1]
         { []
         }
     {offset
       c46B4: // global
           _s45Wz::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c46B9_info;
           _s45WD::I64 = I64[R1 + 7];
           R1 = _s45Wz::P64;
           I64[Sp + 16] = _s45WD::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u46CN; else goto c46Be;
       u46CN: // global
           call _c46B9(R1) args: 0, res: 0, upd: 0;
       c46Be: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46B4_info" {
     block_c46B4_info:
         const _c46B4;
         const 130;
         const 562954248388638;
         const S45Zy_srt+200;
 },
 _c46B9() //  [R1]
         { []
         }
     {offset
       c46B9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c46Bk; else goto c46Bj;
       c46Bk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c46Bj: // global
           _s45WG::I64 = (I64[Sp + 8] << 3) + (I64[R1 + 7] << 2);
           if (%MO_S_Ge_W64(_s45WG::I64, 0)) goto c46Bz; else goto c46BA;
       c46Bz: // global
           (_s45WL::I64, _s45WM::I64) = call MO_S_QuotRem W64(_s45WG::I64, 16);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s45WM::I64;
           R4 = GHC.Types.[]_closure+1;
           R3 = Hp - 7;
           R2 = _s45WL::I64;
           Sp = Sp + 16;
           call $wshowIt3_r43P0_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c46BA: // global
           Hp = Hp - 16;
           R2 = _s45WG::I64;
           Sp = Sp + 16;
           call Numeric.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46B9_info" {
     block_c46B9_info:
         const _c46B9;
         const 65;
         const 562954248388638;
         const S45Zy_srt+200;
 },
 _c46zD() //  [R1]
         { []
         }
     {offset
       c46zD: // global
           _s45Wo::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c46BR; else goto c46Co;
       c46BR: // global
           I64[Sp] = block_c46BE_info;
           R1 = _s45Wo::P64;
           if (R1 & 7 != 0) goto u46CH; else goto c46BF;
       u46CH: // global
           call _c46BE(R1) args: 0, res: 0, upd: 0;
       c46BF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c46Co: // global
           I64[Sp - 8] = block_c46zJ_info;
           _s45X7::P64 = P64[R1 + 6];
           _s45X8::P64 = P64[R1 + 14];
           R1 = _s45Wo::P64;
           P64[Sp] = _s45X8::P64;
           P64[Sp + 24] = _s45X7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u46CI; else goto c46zK;
       u46CI: // global
           call _c46zJ(R1) args: 0, res: 0, upd: 0;
       c46zK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46zD_info" {
     block_c46zD_info:
         const _c46zD;
         const 3;
         const 2674016573718558;
         const S45Zy_srt+200;
 },
 _c46BE() //  [R1]
         { []
         }
     {offset
       c46BE: // global
           I64[Sp] = block_c46BJ_info;
           _s45WS::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 24] = _s45WS::I64;
           if (R1 & 7 != 0) goto u46CO; else goto c46BK;
       u46CO: // global
           call _c46BJ(R1) args: 0, res: 0, upd: 0;
       c46BK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46BE_info" {
     block_c46BE_info:
         const _c46BE;
         const 259;
         const 281479271677982;
         const S45Zy_srt+200;
 },
 _c46BJ() //  [R1]
         { []
         }
     {offset
       c46BJ: // global
           _s45WO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c46BO_info;
           _s45WU::I64 = I64[R1 + 7];
           R1 = _s45WO::P64;
           I64[Sp + 16] = _s45WU::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u46CP; else goto c46BU;
       u46CP: // global
           call _c46BO(R1) args: 0, res: 0, upd: 0;
       c46BU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46BJ_info" {
     block_c46BJ_info:
         const _c46BJ;
         const 387;
         const 281479271677982;
         const S45Zy_srt+200;
 },
 _c46BO() //  [R1]
         { []
         }
     {offset
       c46BO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c46C0; else goto c46BZ;
       c46C0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c46BZ: // global
           _s45WX::I64 = (I64[Sp + 16] << 3) + ((I64[Sp + 8] << 2) + (I64[R1 + 7] << 1));
           if (%MO_S_Ge_W64(_s45WX::I64, 0)) goto c46Cl; else goto c46Cm;
       c46Cl: // global
           (_s45X4::I64, _s45X5::I64) = call MO_S_QuotRem W64(_s45WX::I64, 16);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s45X5::I64;
           R4 = GHC.Types.[]_closure+1;
           R3 = Hp - 7;
           R2 = _s45X4::I64;
           Sp = Sp + 24;
           call $wshowIt2_r43OZ_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c46Cm: // global
           Hp = Hp - 16;
           R2 = _s45WX::I64;
           Sp = Sp + 24;
           call Numeric.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46BO_info" {
     block_c46BO_info:
         const _c46BO;
         const 194;
         const 281479271677982;
         const S45Zy_srt+200;
 },
 _c46zJ() //  [R1]
         { []
         }
     {offset
       c46zJ: // global
           I64[Sp] = block_c46zO_info;
           _s45Xa::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s45Xa::I64;
           if (R1 & 7 != 0) goto u46CJ; else goto c46zP;
       u46CJ: // global
           call _c46zO(R1) args: 0, res: 0, upd: 0;
       c46zP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46zJ_info" {
     block_c46zJ_info:
         const _c46zJ;
         const 4;
         const 2392541597007902;
         const S45Zy_srt+200;
 },
 _c46zO() //  [R1]
         { []
         }
     {offset
       c46zO: // global
           I64[Sp] = block_c46zT_info;
           _s45Xc::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s45Xc::I64;
           if (R1 & 7 != 0) goto u46CK; else goto c46zU;
       u46CK: // global
           call _c46zT(R1) args: 0, res: 0, upd: 0;
       c46zU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46zO_info" {
     block_c46zO_info:
         const _c46zO;
         const 260;
         const 2392541597007902;
         const S45Zy_srt+200;
 },
 _c46zT() //  [R1]
         { []
         }
     {offset
       c46zT: // global
           I64[Sp] = block_c46zY_info;
           _s45Xe::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s45Xe::I64;
           if (R1 & 7 != 0) goto u46CL; else goto c46zZ;
       u46CL: // global
           call _c46zY(R1) args: 0, res: 0, upd: 0;
       c46zZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46zT_info" {
     block_c46zT_info:
         const _c46zT;
         const 388;
         const 2392541597007902;
         const S45Zy_srt+200;
 },
 _c46zY() //  [R1]
         { []
         }
     {offset
       c46zY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c46Cu; else goto c46Ct;
       c46Cu: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c46Ct: // global
           _s45Xh::I64 = (I64[Sp + 24] << 3) + ((I64[Sp + 16] << 2) + ((I64[Sp + 32] << 1) + I64[R1 + 7]));
           if (%MO_S_Ge_W64(_s45Xh::I64, 0)) goto c46Cx; else goto c46Cy;
       c46Cx: // global
           _s45X8::P64 = P64[Sp + 8];
           (_s45Xp::I64, _s45Xq::I64) = call MO_S_QuotRem W64(_s45Xh::I64, 16);
           I64[Hp - 32] = sat_s45Xs_info;
           P64[Hp - 16] = _s45X8::P64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s45Xq::I64;
           R4 = Hp - 32;
           R3 = Hp - 7;
           R2 = _s45Xp::I64;
           Sp = Sp + 40;
           call $wshowIt1_r43OY_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c46Cy: // global
           Hp = Hp - 40;
           R2 = _s45Xh::I64;
           Sp = Sp + 40;
           call Numeric.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46zY_info" {
     block_c46zY_info:
         const _c46zY;
         const 900;
         const 2392541597007902;
         const S45Zy_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.649489828 UTC

[section ""data" . sat_s45Xt_closure" {
     sat_s45Xt_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.651149792 UTC

[section ""data" . sat_s45Xu_closure" {
     sat_s45Xu_closure:
         const :_con_info;
         const sat_s45Xt_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.653707779 UTC

[section ""data" . Numeric.showHFloat15_closure" {
     Numeric.showHFloat15_closure:
         const Numeric.showHFloat15_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showHFloat15_entry() //  [R1]
         { []
         }
     {offset
       c46EO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46EP; else goto c46EQ;
       c46EP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46EQ: // global
           (_c46EL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46EL::I64 == 0) goto c46EN; else goto c46EM;
       c46EN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c46EM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46EL::I64;
           R3 = sat_s45Xu_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showHFloat15_info" {
     Numeric.showHFloat15_info:
         const Numeric.showHFloat15_entry;
         const 0;
         const 4294967317;
         const S45Zy_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.657387207 UTC

[section ""cstring" . Numeric.showHFloat10_bytes" {
     Numeric.showHFloat10_bytes:
         I8[] [48,120,48,112,43,48]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.659505685 UTC

[section ""data" . Numeric.showHFloat9_closure" {
     Numeric.showHFloat9_closure:
         const Numeric.showHFloat9_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showHFloat9_entry() //  [R1]
         { []
         }
     {offset
       c46F7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46F8; else goto c46F9;
       c46F8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46F9: // global
           (_c46F4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46F4::I64 == 0) goto c46F6; else goto c46F5;
       c46F6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c46F5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46F4::I64;
           R2 = Numeric.showHFloat10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showHFloat9_info" {
     Numeric.showHFloat9_info:
         const Numeric.showHFloat9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.663522159 UTC

[section ""data" . Numeric.showHFloat14_closure" {
     Numeric.showHFloat14_closure:
         const Numeric.showHFloat14_info;
         const 0;
 },
 Numeric.showHFloat14_entry() //  [R2]
         { []
         }
     {offset
       c46Fm: // global
           R3 = R2;
           R2 = GHC.Types.[]_closure+1;
           call $wlvl2_r43OX_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showHFloat14_info" {
     Numeric.showHFloat14_info:
         const Numeric.showHFloat14_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S45Zy_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.666616483 UTC

[section ""cstring" . Numeric.showHFloat13_bytes" {
     Numeric.showHFloat13_bytes:
         I8[] [48,120]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.668153178 UTC

[section ""cstring" . Numeric.showHFloat12_bytes" {
     Numeric.showHFloat12_bytes:
         I8[] [112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.669799785 UTC

[section ""cstring" . Numeric.showHFloat11_bytes" {
     Numeric.showHFloat11_bytes:
         I8[] [46]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.680421838 UTC

[section ""data" . Numeric.showHFloat_cvt_closure" {
     Numeric.showHFloat_cvt_closure:
         const Numeric.showHFloat_cvt_info;
         const 0;
 },
 sat_s45XD_entry() //  [R1]
         { []
         }
     {offset
       c46FP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46FQ; else goto c46FR;
       c46FQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46FR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c46FN_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45XD_info" {
     sat_s45XD_info:
         const sat_s45XD_entry;
         const 1;
         const 4294967312;
         const S45Zy_srt+144;
 },
 _c46FN() //  [R1]
         { []
         }
     {offset
       c46FN: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Numeric.showHFloat16_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46FN_info" {
     block_c46FN_info:
         const _c46FN;
         const 0;
         const 4294967326;
         const S45Zy_srt+144;
 },
 sat_s45Y0_entry() //  [R1]
         { []
         }
     {offset
       c46GF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c46GO; else goto c46GP;
       c46GO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46GP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c46GC_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u46GU; else goto c46GD;
       u46GU: // global
           call _c46GC(R1) args: 0, res: 0, upd: 0;
       c46GD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Y0_info" {
     sat_s45Y0_info:
         const sat_s45Y0_entry;
         const 1;
         const 16;
 },
 _c46GC() //  [R1]
         { []
         }
     {offset
       c46GC: // global
           I64[Sp] = block_c46GL_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7] - 1;
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c46GC_info" {
     block_c46GC_info:
         const _c46GC;
         const 0;
         const 30;
 },
 _c46GL() //  [R1, R2]
         { []
         }
     {offset
       c46GL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46GT; else goto c46GS;
       c46GT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c46GS: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46GL_info" {
     block_c46GL_info:
         const _c46GL;
         const 0;
         const 30;
 },
 n_s45XT_entry() //  [R1]
         { []
         }
     {offset
       c46GV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46GZ; else goto c46GY;
       c46GZ: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46GY: // global
           _s45XH::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s45Y0_info;
           P64[Hp] = _s45XH::P64;
           R3 = Hp - 16;
           R2 = Numeric.showHFloat12_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . n_s45XT_info" {
     n_s45XT_info:
         const n_s45XT_entry;
         const 1;
         const 16;
 },
 sat_s45Y3_entry() //  [R1]
         { []
         }
     {offset
       c46Ha: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46Hb; else goto c46Hc;
       c46Hb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46Hc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c46H8_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Numeric.showHFloat_hex_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Y3_info" {
     sat_s45Y3_info:
         const sat_s45Y3_entry;
         const 2;
         const 4294967314;
         const S45Zy_srt+352;
 },
 _c46H8() //  [R1]
         { []
         }
     {offset
       c46H8: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46H8_info" {
     block_c46H8_info:
         const _c46H8;
         const 1;
         const 30;
 },
 sat_s45Y4_entry() //  [R1]
         { []
         }
     {offset
       c46Hk: // global
           _s45Y4::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c46Hl; else goto c46Hm;
       c46Hm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46Ho; else goto c46Hn;
       c46Ho: // global
           HpAlloc = 24;
           goto c46Hl;
       c46Hl: // global
           R1 = _s45Y4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46Hn: // global
           _s45XH::P64 = P64[_s45Y4::P64 + 16];
           _s45XM::P64 = P64[_s45Y4::P64 + 24];
           I64[Hp - 16] = n_s45XT_info;
           P64[Hp] = _s45XH::P64;
           I64[Sp - 24] = block_c46H0_info;
           R2 = _s45XM::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _s45XM::P64;
           Sp = Sp - 24;
           call Numeric.showHFloat_allZ_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s45Y4_info" {
     sat_s45Y4_info:
         const sat_s45Y4_entry;
         const 2;
         const 4294967314;
         const S45Zy_srt+352;
 },
 _c46H0() //  [R1]
         { []
         }
     {offset
       c46H0: // global
           _c46Gu::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c46Hh; else goto c46Hi;
       c46Hh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c46Hr; else goto c46Hq;
       c46Hr: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c46Hq: // global
           I64[Hp - 24] = sat_s45Y3_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _c46Gu::P64;
           R3 = Hp - 24;
           R2 = Numeric.showHFloat11_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c46Hi: // global
           R1 = _c46Gu::P64;
           Sp = Sp + 24;
           call n_s45XT_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46H0_info" {
     block_c46H0_info:
         const _c46H0;
         const 2;
         const 4294967326;
         const S45Zy_srt+352;
 },
 sat_s45Y5_entry() //  [R1]
         { []
         }
     {offset
       c46Hv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c46Hx; else goto c46Hy;
       c46Hx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46Hy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c46Gj_info;
           _s45XH::P64 = P64[R1 + 16];
           _s45XM::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s45XH::P64;
           P64[Sp - 24] = _s45XM::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u46HD; else goto c46Gk;
       u46HD: // global
           call _c46Gj(R1) args: 0, res: 0, upd: 0;
       c46Gk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Y5_info" {
     sat_s45Y5_info:
         const sat_s45Y5_entry;
         const 3;
         const 4294967311;
         const S45Zy_srt+352;
 },
 _c46Gj() //  [R1]
         { []
         }
     {offset
       c46Gj: // global
           I64[Sp] = block_c46Go_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c46Gj_info" {
     block_c46Gj_info:
         const _c46Gj;
         const 2;
         const 4294967326;
         const S45Zy_srt+352;
 },
 _c46Go() //  [R1, R2]
         { []
         }
     {offset
       c46Go: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c46HC; else goto c46HB;
       c46HC: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c46HB: // global
           I64[Hp - 48] = sat_s45Y4_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46Go_info" {
     block_c46Go_info:
         const _c46Go;
         const 2;
         const 4294967326;
         const S45Zy_srt+352;
 },
 section ""relreadonly" . u46Id_srtd" {
     u46Id_srtd:
         const S45Zy_srt+144;
         const 33;
         const 8388608001;
 },
 Numeric.showHFloat_cvt_entry() //  [R2, R3]
         { []
         }
     {offset
       c46HE: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c46HF; else goto c46HG;
       c46HF: // global
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showHFloat_cvt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c46HG: // global
           I64[Sp - 24] = block_c46FB_info;
           _s45Xw::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s45Xw::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showHFloat_cvt_info" {
     Numeric.showHFloat_cvt_info:
         const Numeric.showHFloat_cvt_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u46Id_srtd;
 },
 section ""relreadonly" . u46Ie_srtd" {
     u46Ie_srtd:
         const S45Zy_srt+144;
         const 33;
         const 7851737089;
 },
 _c46FB() //  [R1]
         { []
         }
     {offset
       c46FB: // global
           I64[Sp] = block_c46FF_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46FB_info" {
     block_c46FB_info:
         const _c46FB;
         const 2;
         const 18446744069414584350;
         const u46Ie_srtd;
 },
 section ""relreadonly" . u46If_srtd" {
     u46If_srtd:
         const S45Zy_srt+144;
         const 33;
         const 7851737089;
 },
 _c46FF() //  [R1]
         { []
         }
     {offset
       c46FF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46HK; else goto c46HJ;
       c46HK: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c46HJ: // global
           I64[Hp - 16] = sat_s45XD_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c46FV_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46FF_info" {
     block_c46FF_info:
         const _c46FF;
         const 2;
         const 18446744069414584350;
         const u46If_srtd;
 },
 _c46FV() //  [R1]
         { []
         }
     {offset
       c46FV: // global
           I64[Sp] = block_c46FZ_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46FV_info" {
     block_c46FV_info:
         const _c46FV;
         const 3;
         const 502511173662;
         const S45Zy_srt+352;
 },
 _c46FZ() //  [R1]
         { []
         }
     {offset
       c46FZ: // global
           _c46FJ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c46G3_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 24];
           P64[Sp] = _c46FJ::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46FZ_info" {
     block_c46FZ_info:
         const _c46FZ;
         const 3;
         const 502511173662;
         const S45Zy_srt+352;
 },
 _c46G3() //  [R1]
         { []
         }
     {offset
       c46G3: // global
           if (R1 & 7 == 1) goto c46HP; else goto c46I8;
       c46HP: // global
           _s45Xx::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c46G7_info;
           R4 = _s45Xx::P64;
           R3 = Numeric.showHFloat15_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Float.$wfloatToDigits_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
       c46I8: // global
           R1 = Numeric.showHFloat9_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46G3_info" {
     block_c46G3_info:
         const _c46G3;
         const 2;
         const 502511173662;
         const S45Zy_srt+352;
 },
 _c46G7() //  [R1, R2]
         { []
         }
     {offset
       c46G7: // global
           I64[Sp - 8] = block_c46G9_info;
           R1 = R1;
           P64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u46Ib; else goto c46Ga;
       u46Ib: // global
           call _c46G9(R1) args: 0, res: 0, upd: 0;
       c46Ga: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c46G7_info" {
     block_c46G7_info:
         const _c46G7;
         const 0;
         const 141733920798;
         const S45Zy_srt+352;
 },
 _c46G9() //  [R1]
         { []
         }
     {offset
       c46G9: // global
           _s45XH::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c46HV; else goto c46I1;
       c46HV: // global
           I64[Sp + 8] = block_c46HS_info;
           R1 = _s45XH::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u46Ic; else goto c46HW;
       u46Ic: // global
           call _c46HS(R1) args: 0, res: 0, upd: 0;
       c46HW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c46I1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c46I4; else goto c46I3;
       c46I4: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c46I3: // global
           _s45XL::P64 = P64[R1 + 6];
           _s45XM::P64 = P64[R1 + 14];
           I64[Hp - 32] = sat_s45Y5_info;
           P64[Hp - 16] = _s45XH::P64;
           P64[Hp - 8] = _s45XL::P64;
           P64[Hp] = _s45XM::P64;
           R3 = Hp - 32;
           R2 = Numeric.showHFloat13_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46G9_info" {
     block_c46G9_info:
         const _c46G9;
         const 1;
         const 141733920798;
         const S45Zy_srt+352;
 },
 _c46HS() //  [R1]
         { []
         }
     {offset
       c46HS: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call Numeric.showHFloat14_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c46HS_info" {
     block_c46HS_info:
         const _c46HS;
         const 0;
         const 4294967326;
         const S45Zy_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.718774912 UTC

[section ""data" . Numeric.showHFloat8_closure" {
     Numeric.showHFloat8_closure:
         const GHC.Types.C#_con_info;
         const 45;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.720353583 UTC

[section ""cstring" . Numeric.showHFloat5_bytes" {
     Numeric.showHFloat5_bytes:
         I8[] [73,110,102,105,110,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.722272473 UTC

[section ""cstring" . Numeric.showHFloat7_bytes" {
     Numeric.showHFloat7_bytes:
         I8[] [45]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.724758878 UTC

[section ""data" . Numeric.showHFloat6_closure" {
     Numeric.showHFloat6_closure:
         const Numeric.showHFloat6_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showHFloat6_entry() //  [R1]
         { []
         }
     {offset
       c46Kt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46Ku; else goto c46Kv;
       c46Ku: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46Kv: // global
           (_c46Kq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46Kq::I64 == 0) goto c46Ks; else goto c46Kr;
       c46Ks: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c46Kr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46Kq::I64;
           R2 = Numeric.showHFloat7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showHFloat6_info" {
     Numeric.showHFloat6_info:
         const Numeric.showHFloat6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.728301887 UTC

[section ""cstring" . Numeric.showHFloat2_bytes" {
     Numeric.showHFloat2_bytes:
         I8[] [78,97,78]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.73050774 UTC

[section ""data" . Numeric.showHFloat1_closure" {
     Numeric.showHFloat1_closure:
         const Numeric.showHFloat1_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showHFloat1_entry() //  [R1]
         { []
         }
     {offset
       c46KL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46KM; else goto c46KN;
       c46KM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46KN: // global
           (_c46KI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46KI::I64 == 0) goto c46KK; else goto c46KJ;
       c46KK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c46KJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46KI::I64;
           R2 = Numeric.showHFloat2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showHFloat1_info" {
     Numeric.showHFloat1_info:
         const Numeric.showHFloat1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.734575108 UTC

[section ""data" . Numeric.showHFloat4_closure" {
     Numeric.showHFloat4_closure:
         const Numeric.showHFloat4_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showHFloat4_entry() //  [R1]
         { []
         }
     {offset
       c46L2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46L3; else goto c46L4;
       c46L3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46L4: // global
           (_c46KZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46KZ::I64 == 0) goto c46L1; else goto c46L0;
       c46L1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c46L0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46KZ::I64;
           R2 = Numeric.showHFloat5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showHFloat4_info" {
     Numeric.showHFloat4_info:
         const Numeric.showHFloat4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.738688714 UTC

[section ""data" . Numeric.showHFloat3_closure" {
     Numeric.showHFloat3_closure:
         const Numeric.showHFloat3_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showHFloat3_entry() //  [R1]
         { []
         }
     {offset
       c46Lj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46Lk; else goto c46Ll;
       c46Lk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46Ll: // global
           (_c46Lg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46Lg::I64 == 0) goto c46Li; else goto c46Lh;
       c46Li: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c46Lh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46Lg::I64;
           R3 = Numeric.showHFloat4_closure;
           R2 = Numeric.showHFloat6_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showHFloat3_info" {
     Numeric.showHFloat3_info:
         const Numeric.showHFloat3_entry;
         const 0;
         const 12884901909;
         const S45Zy_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.750510743 UTC

[section ""data" . Numeric.showHFloat_closure" {
     Numeric.showHFloat_closure:
         const Numeric.showHFloat_info;
         const 0;
 },
 $dNum_s45Yb_entry() //  [R1]
         { []
         }
     {offset
       c46LS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46LT; else goto c46LU;
       c46LT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46LU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s45Yb_info" {
     $dNum_s45Yb_info:
         const $dNum_s45Yb_entry;
         const 1;
         const 16;
 },
 sat_s45Ye_entry() //  [R1]
         { []
         }
     {offset
       c46M3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46M4; else goto c46M5;
       c46M4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46M5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Numeric.showHFloat16_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Ye_info" {
     sat_s45Ye_info:
         const sat_s45Ye_entry;
         const 1;
         const 4294967312;
         const S45Zy_srt+424;
 },
 sat_s45Yh_entry() //  [R1]
         { []
         }
     {offset
       c46Mr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46Ms; else goto c46Mt;
       c46Ms: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46Mt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Yh_info" {
     sat_s45Yh_info:
         const sat_s45Yh_entry;
         const 2;
         const 18;
 },
 sat_s45Yi_entry() //  [R1]
         { []
         }
     {offset
       c46Mu: // global
           _s45Yi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c46Mv; else goto c46Mw;
       c46Mw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c46My; else goto c46Mx;
       c46My: // global
           HpAlloc = 32;
           goto c46Mv;
       c46Mv: // global
           R1 = _s45Yi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46Mx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s45Yi::P64;
           _s45Y6::P64 = P64[_s45Yi::P64 + 16];
           _s45Y7::P64 = P64[_s45Yi::P64 + 24];
           _s45Yb::P64 = P64[_s45Yi::P64 + 32];
           I64[Hp - 24] = sat_s45Yh_info;
           P64[Hp - 8] = _s45Y7::P64;
           P64[Hp] = _s45Yb::P64;
           R3 = Hp - 24;
           R2 = _s45Y6::P64;
           Sp = Sp - 16;
           call Numeric.showHFloat_cvt_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Yi_info" {
     sat_s45Yi_info:
         const sat_s45Yi_entry;
         const 3;
         const 4294967311;
         const S45Zy_srt+376;
 },
 sat_s45Yj_entry() //  [R1]
         { []
         }
     {offset
       c46MJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46MK; else goto c46ML;
       c46MK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46ML: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Yj_info" {
     sat_s45Yj_info:
         const sat_s45Yj_entry;
         const 2;
         const 18;
 },
 sat_s45Yk_entry() //  [R1]
         { []
         }
     {offset
       c46MM: // global
           _s45Yk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c46MN; else goto c46MO;
       c46MO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c46MQ; else goto c46MP;
       c46MQ: // global
           HpAlloc = 32;
           goto c46MN;
       c46MN: // global
           R1 = _s45Yk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46MP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s45Yk::P64;
           _s45Y6::P64 = P64[_s45Yk::P64 + 16];
           _s45Y7::P64 = P64[_s45Yk::P64 + 24];
           _s45Yb::P64 = P64[_s45Yk::P64 + 32];
           I64[Hp - 24] = sat_s45Yj_info;
           P64[Hp - 8] = _s45Y7::P64;
           P64[Hp] = _s45Yb::P64;
           R3 = Hp - 24;
           R2 = _s45Y6::P64;
           Sp = Sp - 16;
           call Numeric.showHFloat_cvt_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Yk_info" {
     sat_s45Yk_info:
         const sat_s45Yk_entry;
         const 3;
         const 4294967311;
         const S45Zy_srt+376;
 },
 sat_s45Ym_entry() //  [R1]
         { []
         }
     {offset
       c46MX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46MY; else goto c46MZ;
       c46MY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46MZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Numeric.showHFloat16_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Ym_info" {
     sat_s45Ym_info:
         const sat_s45Ym_entry;
         const 1;
         const 4294967312;
         const S45Zy_srt+424;
 },
 sat_s45Yo_entry() //  [R1]
         { []
         }
     {offset
       c46N4: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c46N5; else goto c46N6;
       c46N5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46N6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c46LC_info;
           _s45Y6::P64 = P64[R1 + 16];
           R2 = _s45Y6::P64;
           I64[Sp - 56] = stg_ap_p_info;
           _s45Y7::P64 = P64[R1 + 24];
           P64[Sp - 48] = _s45Y7::P64;
           P64[Sp - 32] = _s45Y6::P64;
           P64[Sp - 24] = _s45Y7::P64;
           Sp = Sp - 56;
           call GHC.Float.isNaN_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Yo_info" {
     sat_s45Yo_info:
         const sat_s45Yo_entry;
         const 2;
         const 1997159792658;
         const S45Zy_srt+376;
 },
 _c46LC() //  [R1]
         { []
         }
     {offset
       c46LC: // global
           if (R1 & 7 == 1) goto c46N1; else goto c46N2;
       c46N1: // global
           I64[Sp] = block_c46LG_info;
           R2 = P64[Sp + 8];
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 24;
       c46N2: // global
           R1 = Numeric.showHFloat1_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46LC_info" {
     block_c46LC_info:
         const _c46LC;
         const 2;
         const 1997159792670;
         const S45Zy_srt+376;
 },
 _c46LG() //  [R1]
         { []
         }
     {offset
       c46LG: // global
           I64[Sp] = block_c46LK_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c46LG_info" {
     block_c46LG_info:
         const _c46LG;
         const 2;
         const 1447403978782;
         const S45Zy_srt+376;
 },
 _c46LK() //  [R1]
         { []
         }
     {offset
       c46LK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46Nb; else goto c46Na;
       c46Nb: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c46Na: // global
           I64[Hp - 16] = $dNum_s45Yb_info;
           P64[Hp] = R1;
           I64[Sp - 16] = block_c46LV_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[Sp + 16];
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Float.isInfinite_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c46LK_info" {
     block_c46LK_info:
         const _c46LK;
         const 2;
         const 1447403978782;
         const S45Zy_srt+376;
 },
 _c46LV() //  [R1]
         { []
         }
     {offset
       c46LV: // global
           _c46LO::P64 = P64[Sp + 16];
           _s45Ya::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c46Nd; else goto c46NA;
       c46Nd: // global
           Hp = Hp + 24;
           _s45Yc::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c46ND; else goto c46Nf;
       c46Nf: // global
           I64[Hp - 16] = sat_s45Ye_info;
           P64[Hp] = _c46LO::P64;
           I64[Sp] = block_c46M6_info;
           R2 = _s45Ya::P64;
           P64[Sp + 8] = Hp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 24;
       c46NA: // global
           Hp = Hp + 24;
           _s45Yc::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c46ND; else goto c46NC;
       c46ND: // global
           HpAlloc = 24;
           R1 = _s45Yc::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c46NC: // global
           I64[Hp - 16] = sat_s45Ym_info;
           P64[Hp] = _c46LO::P64;
           I64[Sp + 16] = block_c46Nz_info;
           R2 = _s45Ya::P64;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c46LV_info" {
     block_c46LV_info:
         const _c46LV;
         const 4;
         const 1447403978782;
         const S45Zy_srt+376;
 },
 _c46M6() //  [R1]
         { []
         }
     {offset
       c46M6: // global
           _c46LZ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c46Ma_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c46LZ::P64;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c46M6_info" {
     block_c46M6_info:
         const _c46M6;
         const 4;
         const 4294967326;
         const S45Zy_srt+376;
 },
 _c46Ma() //  [R1]
         { []
         }
     {offset
       c46Ma: // global
           _s45Y6::P64 = P64[Sp + 16];
           _s45Y7::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c46Nk; else goto c46Nv;
       c46Nk: // global
           I64[Sp] = block_c46Me_info;
           R2 = _s45Y6::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s45Y7::P64;
           Sp = Sp - 16;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 8, upd: 24;
       c46Nv: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c46Ny; else goto c46Nx;
       c46Ny: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c46Nx: // global
           I64[Hp - 56] = sat_s45Yk_info;
           P64[Hp - 40] = _s45Y6::P64;
           P64[Hp - 32] = _s45Y7::P64;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Numeric.showHFloat8_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46Ma_info" {
     block_c46Ma_info:
         const _c46Ma;
         const 3;
         const 4294967326;
         const S45Zy_srt+376;
 },
 _c46Me() //  [R1]
         { []
         }
     {offset
       c46Me: // global
           _s45Y6::P64 = P64[Sp + 16];
           _s45Y7::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c46No; else goto c46Nq;
       c46No: // global
           R3 = _s45Y7::P64;
           R2 = _s45Y6::P64;
           Sp = Sp + 32;
           call Numeric.showHFloat_cvt_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c46Nq: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c46Nt; else goto c46Ns;
       c46Nt: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c46Ns: // global
           I64[Hp - 56] = sat_s45Yi_info;
           P64[Hp - 40] = _s45Y6::P64;
           P64[Hp - 32] = _s45Y7::P64;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Numeric.showHFloat8_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46Me_info" {
     block_c46Me_info:
         const _c46Me;
         const 3;
         const 4294967326;
         const S45Zy_srt+376;
 },
 _c46Nz() //  [R1]
         { []
         }
     {offset
       c46Nz: // global
           _s45Y7::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c46NH_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s45Y7::P64;
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c46Nz_info" {
     block_c46Nz_info:
         const _c46Nz;
         const 2;
         const 73014444062;
         const S45Zy_srt+408;
 },
 _c46NH() //  [R1]
         { []
         }
     {offset
       c46NH: // global
           if (R1 & 7 == 1) goto c46NO; else goto c46NS;
       c46NO: // global
           R1 = Numeric.showHFloat4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c46NS: // global
           R1 = Numeric.showHFloat3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46NH_info" {
     block_c46NH_info:
         const _c46NH;
         const 0;
         const 73014444062;
         const S45Zy_srt+408;
 },
 Numeric.showHFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c46O0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c46O4; else goto c46O3;
       c46O4: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showHFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c46O3: // global
           I64[Hp - 24] = sat_s45Yo_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showHFloat_info" {
     Numeric.showHFloat_info:
         const Numeric.showHFloat_entry;
         const 0;
         const 4196183048206;
         const 8589934607;
         const S45Zy_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.783030309 UTC

[section ""data" . sat_s45Yp_closure" {
     sat_s45Yp_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.78479026 UTC

[section ""data" . sat_s45Yq_closure" {
     sat_s45Yq_closure:
         const :_con_info;
         const sat_s45Yp_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.787292534 UTC

[section ""data" . Numeric.showOct1_closure" {
     Numeric.showOct1_closure:
         const Numeric.showOct1_info;
         const 0;
         const 0;
         const 0;
 },
 Numeric.showOct1_entry() //  [R1]
         { []
         }
     {offset
       c46Qj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46Qk; else goto c46Ql;
       c46Qk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46Ql: // global
           (_c46Qg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46Qg::I64 == 0) goto c46Qi; else goto c46Qh;
       c46Qi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c46Qh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46Qg::I64;
           R3 = sat_s45Yq_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Numeric.showOct1_info" {
     Numeric.showOct1_info:
         const Numeric.showOct1_entry;
         const 0;
         const 4294967317;
         const S45Zy_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.792266519 UTC

[section ""data" . Numeric.showOct_closure" {
     Numeric.showOct_closure:
         const Numeric.showOct_info;
         const 0;
 },
 sat_s45Yv_entry() //  [R1]
         { []
         }
     {offset
       c46QF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46QJ; else goto c46QK;
       c46QJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46QK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c46QD_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Yv_info" {
     sat_s45Yv_info:
         const sat_s45Yv_entry;
         const 1;
         const 4294967312;
         const S45Zy_srt+464;
 },
 _c46QD() //  [R1]
         { []
         }
     {offset
       c46QD: // global
           I64[Sp] = block_c46QI_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c46QD_info" {
     block_c46QD_info:
         const _c46QD;
         const 0;
         const 4294967326;
         const S45Zy_srt+464;
 },
 _c46QI() //  [R1]
         { []
         }
     {offset
       c46QI: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Numeric.showOct1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46QI_info" {
     block_c46QI_info:
         const _c46QI;
         const 0;
         const 4294967326;
         const S45Zy_srt+464;
 },
 Numeric.showOct_entry() //  [R2, R3]
         { []
         }
     {offset
       c46QQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c46QU; else goto c46QT;
       c46QU: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showOct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c46QT: // global
           I64[Hp - 16] = sat_s45Yv_info;
           P64[Hp] = R2;
           R5 = GHC.Show.intToDigit_closure+1;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showIntAtBase_closure+6;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showOct_info" {
     Numeric.showOct_info:
         const Numeric.showOct_entry;
         const 0;
         const 3458764552475246606;
         const 8589934607;
         const S45Zy_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.800428528 UTC

[section ""data" . Numeric.$trModule3_closure" {
     Numeric.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Numeric.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.802130661 UTC

[section ""data" . Numeric.$trModule1_closure" {
     Numeric.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Numeric.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.803700839 UTC

[section ""data" . Numeric.$trModule_closure" {
     Numeric.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Numeric.$trModule3_closure+1;
         const Numeric.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.806828714 UTC

[section ""data" . Numeric.showGFloat_$sshowGFloat_closure" {
     Numeric.showGFloat_$sshowGFloat_closure:
         const Numeric.showGFloat_$sshowGFloat_info;
         const 0;
 },
 sat_s45YA_entry() //  [R1]
         { []
         }
     {offset
       c46Ru: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46Rv; else goto c46Rw;
       c46Rv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46Rw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c46Rr_info;
           _s45Yw::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s45Yw::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u46RA; else goto c46Rs;
       u46RA: // global
           call _c46Rr(R1) args: 0, res: 0, upd: 0;
       c46Rs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45YA_info" {
     sat_s45YA_info:
         const sat_s45YA_entry;
         const 2;
         const 4294967314;
         const S45Zy_srt+480;
 },
 _c46Rr() //  [R1]
         { []
         }
     {offset
       c46Rr: // global
           F1 = F32[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFGeneric_closure+3;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46Rr_info" {
     block_c46Rr_info:
         const _c46Rr;
         const 1;
         const 4294967326;
         const S45Zy_srt+480;
 },
 Numeric.showGFloat_$sshowGFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c46RB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c46RF; else goto c46RE;
       c46RF: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showGFloat_$sshowGFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c46RE: // global
           I64[Hp - 24] = sat_s45YA_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showGFloat_$sshowGFloat_info" {
     Numeric.showGFloat_$sshowGFloat_info:
         const Numeric.showGFloat_$sshowGFloat_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S45Zy_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.815206817 UTC

[section ""data" . Numeric.showFFloat_$sshowFFloat_closure" {
     Numeric.showFFloat_$sshowFFloat_closure:
         const Numeric.showFFloat_$sshowFFloat_info;
         const 0;
 },
 sat_s45YF_entry() //  [R1]
         { []
         }
     {offset
       c46S9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46Sa; else goto c46Sb;
       c46Sa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46Sb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c46S6_info;
           _s45YB::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s45YB::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u46Sf; else goto c46S7;
       u46Sf: // global
           call _c46S6(R1) args: 0, res: 0, upd: 0;
       c46S7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45YF_info" {
     sat_s45YF_info:
         const sat_s45YF_entry;
         const 2;
         const 4294967314;
         const S45Zy_srt+480;
 },
 _c46S6() //  [R1]
         { []
         }
     {offset
       c46S6: // global
           F1 = F32[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFFixed_closure+2;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46S6_info" {
     block_c46S6_info:
         const _c46S6;
         const 1;
         const 4294967326;
         const S45Zy_srt+480;
 },
 Numeric.showFFloat_$sshowFFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c46Sg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c46Sk; else goto c46Sj;
       c46Sk: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showFFloat_$sshowFFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c46Sj: // global
           I64[Hp - 24] = sat_s45YF_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showFFloat_$sshowFFloat_info" {
     Numeric.showFFloat_$sshowFFloat_info:
         const Numeric.showFFloat_$sshowFFloat_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S45Zy_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.823724413 UTC

[section ""data" . Numeric.showEFloat_$sshowEFloat_closure" {
     Numeric.showEFloat_$sshowEFloat_closure:
         const Numeric.showEFloat_$sshowEFloat_info;
         const 0;
 },
 sat_s45YK_entry() //  [R1]
         { []
         }
     {offset
       c46SO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46SP; else goto c46SQ;
       c46SP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46SQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c46SL_info;
           _s45YG::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s45YG::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u46SU; else goto c46SM;
       u46SU: // global
           call _c46SL(R1) args: 0, res: 0, upd: 0;
       c46SM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45YK_info" {
     sat_s45YK_info:
         const sat_s45YK_entry;
         const 2;
         const 4294967314;
         const S45Zy_srt+480;
 },
 _c46SL() //  [R1]
         { []
         }
     {offset
       c46SL: // global
           F1 = F32[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFExponent_closure+1;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46SL_info" {
     block_c46SL_info:
         const _c46SL;
         const 1;
         const 4294967326;
         const S45Zy_srt+480;
 },
 Numeric.showEFloat_$sshowEFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c46SV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c46SZ; else goto c46SY;
       c46SZ: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showEFloat_$sshowEFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c46SY: // global
           I64[Hp - 24] = sat_s45YK_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showEFloat_$sshowEFloat_info" {
     Numeric.showEFloat_$sshowEFloat_info:
         const Numeric.showEFloat_$sshowEFloat_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S45Zy_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.836124903 UTC

[section ""data" . Numeric.showGFloat_$sshowGFloat1_closure" {
     Numeric.showGFloat_$sshowGFloat1_closure:
         const Numeric.showGFloat_$sshowGFloat1_info;
         const 0;
 },
 sat_s45YP_entry() //  [R1]
         { []
         }
     {offset
       c46Tt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46Tu; else goto c46Tv;
       c46Tu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46Tv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c46Tq_info;
           _s45YL::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s45YL::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u46Tz; else goto c46Tr;
       u46Tz: // global
           call _c46Tq(R1) args: 0, res: 0, upd: 0;
       c46Tr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45YP_info" {
     sat_s45YP_info:
         const sat_s45YP_entry;
         const 2;
         const 4294967314;
         const S45Zy_srt+512;
 },
 _c46Tq() //  [R1]
         { []
         }
     {offset
       c46Tq: // global
           D1 = F64[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFGeneric_closure+3;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46Tq_info" {
     block_c46Tq_info:
         const _c46Tq;
         const 1;
         const 4294967326;
         const S45Zy_srt+512;
 },
 Numeric.showGFloat_$sshowGFloat1_entry() //  [R2, R3]
         { []
         }
     {offset
       c46TA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c46TE; else goto c46TD;
       c46TE: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showGFloat_$sshowGFloat1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c46TD: // global
           I64[Hp - 24] = sat_s45YP_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showGFloat_$sshowGFloat1_info" {
     Numeric.showGFloat_$sshowGFloat1_info:
         const Numeric.showGFloat_$sshowGFloat1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S45Zy_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.845665519 UTC

[section ""data" . Numeric.showGFloat_closure" {
     Numeric.showGFloat_closure:
         const Numeric.showGFloat_info;
         const 0;
 },
 sat_s45YT_entry() //  [R1]
         { []
         }
     {offset
       c46U5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46U6; else goto c46U7;
       c46U6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46U7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 32];
           R5 = GHC.Types.False_closure+1;
           R4 = P64[R1 + 24];
           R3 = GHC.Float.FFGeneric_closure+3;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45YT_info" {
     sat_s45YT_info:
         const sat_s45YT_entry;
         const 3;
         const 4294967311;
         const S45Zy_srt+528;
 },
 Numeric.showGFloat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c46U8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c46Uc; else goto c46Ub;
       c46Uc: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showGFloat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c46Ub: // global
           I64[Hp - 32] = sat_s45YT_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showGFloat_info" {
     Numeric.showGFloat_info:
         const Numeric.showGFloat_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S45Zy_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.855309518 UTC

[section ""data" . Numeric.showFFloat_$sshowFFloat1_closure" {
     Numeric.showFFloat_$sshowFFloat1_closure:
         const Numeric.showFFloat_$sshowFFloat1_info;
         const 0;
 },
 sat_s45YY_entry() //  [R1]
         { []
         }
     {offset
       c46UB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46UC; else goto c46UD;
       c46UC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46UD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c46Uy_info;
           _s45YU::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s45YU::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u46UH; else goto c46Uz;
       u46UH: // global
           call _c46Uy(R1) args: 0, res: 0, upd: 0;
       c46Uz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45YY_info" {
     sat_s45YY_info:
         const sat_s45YY_entry;
         const 2;
         const 4294967314;
         const S45Zy_srt+512;
 },
 _c46Uy() //  [R1]
         { []
         }
     {offset
       c46Uy: // global
           D1 = F64[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFFixed_closure+2;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46Uy_info" {
     block_c46Uy_info:
         const _c46Uy;
         const 1;
         const 4294967326;
         const S45Zy_srt+512;
 },
 Numeric.showFFloat_$sshowFFloat1_entry() //  [R2, R3]
         { []
         }
     {offset
       c46UI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c46UM; else goto c46UL;
       c46UM: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showFFloat_$sshowFFloat1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c46UL: // global
           I64[Hp - 24] = sat_s45YY_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showFFloat_$sshowFFloat1_info" {
     Numeric.showFFloat_$sshowFFloat1_info:
         const Numeric.showFFloat_$sshowFFloat1_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const S45Zy_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.863949933 UTC

[section ""data" . Numeric.showFFloat_closure" {
     Numeric.showFFloat_closure:
         const Numeric.showFFloat_info;
         const 0;
 },
 sat_s45Z2_entry() //  [R1]
         { []
         }
     {offset
       c46Vd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46Ve; else goto c46Vf;
       c46Ve: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46Vf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 32];
           R5 = GHC.Types.False_closure+1;
           R4 = P64[R1 + 24];
           R3 = GHC.Float.FFFixed_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Z2_info" {
     sat_s45Z2_info:
         const sat_s45Z2_entry;
         const 3;
         const 4294967311;
         const S45Zy_srt+528;
 },
 Numeric.showFFloat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c46Vg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c46Vk; else goto c46Vj;
       c46Vk: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showFFloat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c46Vj: // global
           I64[Hp - 32] = sat_s45Z2_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showFFloat_info" {
     Numeric.showFFloat_info:
         const Numeric.showFFloat_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const S45Zy_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.870593018 UTC

[section ""data" . Numeric.showEFloat_$sshowEFloat1_closure" {
     Numeric.showEFloat_$sshowEFloat1_closure:
         const Numeric.showEFloat_$sshowEFloat1_info;
         const 0;
 },
 sat_s45Z7_entry() //  [R1]
         { []
         }
     {offset
       c46VJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c46VK; else goto c46VL;
       c46VK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46VL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c46VG_info;
           _s45Z3::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s45Z3::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u46VP; else goto c46VH;
       u46VP: // global
           call _c46VG(R1) args: 0, res: 0, upd: 0;
       c46VH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Z7_info" {
     sat_s45Z7_info:
         const sat_s45Z7_entry;
         const 2;
         const 4294967314;
         const S45Zy_srt+512;
 },
 _c46VG() //  [R1]
         { []
         }
     {offset
       c46VG: // global
           D1 = F64[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.FFExponent_closure+1;
           Sp = Sp + 16;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c46VG_info" {
     block_c46VG_info:
         const _c46VG;
         const 1;
         const 4294967326;
         const S45Zy_srt+512;
 },
 Numeric.showEFloat_$sshowEFloat1_entry() //  [R2, R3]
         { []
         }
     {offset
       c46VQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c46VU; else goto c46VT;
       c46VU: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showEFloat_$sshowEFloat1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c46VT: // global
           I64[Hp - 24] = sat_s45Z7_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showEFloat_$sshowEFloat1_info" {
     Numeric.showEFloat_$sshowEFloat1_info:
         const Numeric.showEFloat_$sshowEFloat1_entry;
         const 0;
         const 279172874254;
         const 8589934607;
         const S45Zy_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.878457191 UTC

[section ""data" . Numeric.showEFloat_closure" {
     Numeric.showEFloat_closure:
         const Numeric.showEFloat_info;
         const 0;
 },
 sat_s45Zb_entry() //  [R1]
         { []
         }
     {offset
       c46Wl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c46Wm; else goto c46Wn;
       c46Wm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46Wn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 32];
           R5 = GHC.Types.False_closure+1;
           R4 = P64[R1 + 24];
           R3 = GHC.Float.FFExponent_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s45Zb_info" {
     sat_s45Zb_info:
         const sat_s45Zb_entry;
         const 3;
         const 4294967311;
         const S45Zy_srt+528;
 },
 Numeric.showEFloat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c46Wo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c46Ws; else goto c46Wr;
       c46Ws: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Numeric.showEFloat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c46Wr: // global
           I64[Hp - 32] = sat_s45Zb_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Numeric.showEFloat_info" {
     Numeric.showEFloat_info:
         const Numeric.showEFloat_entry;
         const 0;
         const 141733920782;
         const 12884901911;
         const S45Zy_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:59.884168779 UTC

[section ""relreadonly" . S45Zy_srt" {
     S45Zy_srt:
         const Text.Read.Lex.$wreadIntP_closure;
         const Numeric.readInt_closure;
         const Text.Read.Lex.readDecP4_closure;
         const Text.Read.Lex.$wreadIntP'_closure;
         const Numeric.readOct_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Numeric.readDec_closure;
         const Text.Read.Lex.readDecP3_closure;
         const Numeric.readHex_closure;
         const Text.Read.Lex.$wnumberToRational_closure;
         const Text.Read.Lex.expect2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Numeric.readFloat_closure;
         const GHC.Read.lex1_closure;
         const GHC.Read.readParen_closure;
         const Numeric.readSigned_closure;
         const sat_s45Tt_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Numeric.showHFloat16_closure;
         const Numeric.showInt2_closure;
         const Numeric.showInt_closure;
         const Numeric.showInt1_closure;
         const GHC.Float.formatRealFloatAlt_closure;
         const Numeric.showFFloatAlt_closure;
         const Numeric.showGFloatAlt_closure;
         const Numeric.$wlvl_closure;
         const Numeric.showIntAtBase2_closure;
         const Numeric.showIntAtBase1_closure;
         const sat_s45Uu_closure;
         const Numeric.showIntAtBase3_closure;
         const Numeric.showIntAtBase_closure;
         const sat_s45V2_closure;
         const Numeric.showHex1_closure;
         const GHC.Show.intToDigit_closure;
         const Numeric.showHex_closure;
         const GHC.Show.$fShow(,)_go1_closure;
         const GHC.Err.error_closure;
         const $dIP3_r43OU_closure;
         const $wlvl2_r43OX_closure;
         const GHC.Show.$wintToDigit_closure;
         const $wshowIt1_r43OY_closure;
         const $wshowIt2_r43OZ_closure;
         const $wshowIt3_r43P0_closure;
         const $wshowIt4_r43P1_closure;
         const Numeric.showHFloat_hex_closure;
         const sat_s45Xu_closure;
         const GHC.Float.$wfloatToDigits_closure;
         const Numeric.showHFloat_cvt_closure;
         const Numeric.showHFloat9_closure;
         const Numeric.showHFloat14_closure;
         const Numeric.showHFloat15_closure;
         const Numeric.showHFloat4_closure;
         const Numeric.showHFloat6_closure;
         const Numeric.showHFloat16_closure;
         const Numeric.showHFloat1_closure;
         const Numeric.showHFloat3_closure;
         const Numeric.showHFloat_closure;
         const sat_s45Yq_closure;
         const Numeric.showOct1_closure;
         const Numeric.showOct_closure;
         const GHC.Float.$w$sformatRealFloatAlt1_closure;
         const Numeric.showGFloat_$sshowGFloat_closure;
         const Numeric.showFFloat_$sshowFFloat_closure;
         const Numeric.showEFloat_$sshowEFloat_closure;
         const GHC.Float.$w$sformatRealFloatAlt_closure;
         const Numeric.showGFloat_$sshowGFloat1_closure;
         const GHC.Float.formatRealFloatAlt_closure;
         const Numeric.showGFloat_closure;
         const Numeric.showFFloat_$sshowFFloat1_closure;
         const Numeric.showFFloat_closure;
         const Numeric.showEFloat_$sshowEFloat1_closure;
         const Numeric.showEFloat_closure;
 }]

