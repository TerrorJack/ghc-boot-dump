
==================== Raw Cmm ====================
2018-03-16 15:59:45.919836989 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:59:45.921054933 UTC

[section ""data" . Foreign.Ptr.$fShowIntPtr_closure" {
     Foreign.Ptr.$fShowIntPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.showSignedInt_closure+3;
         const GHC.Show.$fShowInt_$cshow_closure+1;
         const GHC.Show.$fShowInt_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.923052824 UTC

[section ""data" . Foreign.Ptr.$fReadIntPtr_closure" {
     Foreign.Ptr.$fReadIntPtr_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadInt_$creadsPrec_closure+1;
         const GHC.Read.$fReadInt_$creadList_closure+1;
         const GHC.Read.$fReadInt1_closure+2;
         const GHC.Read.$fReadInt_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.924796406 UTC

[section ""data" . Foreign.Ptr.$fBoundedIntPtr_closure" {
     Foreign.Ptr.$fBoundedIntPtr_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Base.minInt_closure;
         const GHC.Base.maxInt_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.927333944 UTC

[section ""data" . Foreign.Ptr.$fStorableIntPtr_closure" {
     Foreign.Ptr.$fStorableIntPtr_closure:
         const Foreign.Storable.C:Storable_con_info;
         const Foreign.Storable.$fStorableInt_$calignment_closure+1;
         const Foreign.Storable.$fStorableInt_$calignment_closure+1;
         const GHC.Storable.readIntOffPtr1_closure+3;
         const GHC.Storable.writeIntOffPtr1_closure+4;
         const Foreign.Storable.$fStorableInt4_closure+3;
         const Foreign.Storable.$fStorableInt3_closure+4;
         const Foreign.Storable.$fStorableInt2_closure+2;
         const Foreign.Storable.$fStorableInt1_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.930348888 UTC

[section ""data" . Foreign.Ptr.$fEnumIntPtr_closure" {
     Foreign.Ptr.$fEnumIntPtr_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumInt_$csucc_closure+1;
         const GHC.Enum.$fEnumInt_$cpred_closure+1;
         const GHC.Enum.$fEnumInt_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInt_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInt_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumInt_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumInt_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumInt_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.932575491 UTC

[section ""data" . Foreign.Ptr.$fNumIntPtr_closure" {
     Foreign.Ptr.$fNumIntPtr_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumInt_$c+_closure+2;
         const GHC.Num.$fNumInt_$c-_closure+2;
         const GHC.Num.$fNumInt_$c*_closure+2;
         const GHC.Num.$fNumInt_$cnegate_closure+1;
         const GHC.Num.$fNumInt_$cabs_closure+1;
         const GHC.Num.$fNumInt_$csignum_closure+1;
         const GHC.Num.$fNumInt_$cfromInteger_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.935249663 UTC

[section ""data" . Foreign.Ptr.$fEqIntPtr_closure" {
     Foreign.Ptr.$fEqIntPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqInt_closure+2;
         const GHC.Classes.neInt_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.937739511 UTC

[section ""data" . Foreign.Ptr.$fOrdIntPtr_closure" {
     Foreign.Ptr.$fOrdIntPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const Foreign.Ptr.$fEqIntPtr_closure+1;
         const GHC.Classes.compareInt_closure+2;
         const GHC.Classes.ltInt_closure+2;
         const GHC.Classes.leInt_closure+2;
         const GHC.Classes.gtInt_closure+2;
         const GHC.Classes.geInt_closure+2;
         const GHC.Classes.$fOrdInt_$cmax_closure+2;
         const GHC.Classes.$fOrdInt_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.940016063 UTC

[section ""data" . Foreign.Ptr.$fRealIntPtr_closure" {
     Foreign.Ptr.$fRealIntPtr_closure:
         const GHC.Real.C:Real_con_info;
         const Foreign.Ptr.$fNumIntPtr_closure+1;
         const Foreign.Ptr.$fOrdIntPtr_closure+1;
         const GHC.Real.$fEnumRatio_$ctoRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.942388703 UTC

[section ""data" . Foreign.Ptr.$fIntegralIntPtr_closure" {
     Foreign.Ptr.$fIntegralIntPtr_closure:
         const GHC.Real.C:Integral_con_info;
         const Foreign.Ptr.$fRealIntPtr_closure+1;
         const Foreign.Ptr.$fEnumIntPtr_closure+1;
         const GHC.Real.$fIntegralInt_$cquot_closure+2;
         const GHC.Real.$fIntegralInt_$crem_closure+2;
         const GHC.Real.$fIntegralInt_$cdiv_closure+2;
         const GHC.Real.$fIntegralInt_$cmod_closure+2;
         const GHC.Real.$fIntegralInt_$cquotRem_closure+2;
         const GHC.Real.$fIntegralInt_$cdivMod_closure+2;
         const GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.94445457 UTC

[section ""data" . Foreign.Ptr.$fBitsIntPtr_closure" {
     Foreign.Ptr.$fBitsIntPtr_closure:
         const Data.Bits.C:Bits_con_info;
         const Foreign.Ptr.$fEqIntPtr_closure+1;
         const Data.Bits.$fBitsInt_$c.&._closure+2;
         const Data.Bits.$fBitsInt_$c.|._closure+2;
         const Data.Bits.$fBitsInt_$cxor_closure+2;
         const Data.Bits.$fBitsInt_$ccomplement_closure+1;
         const Data.Bits.$fBitsInt_$cshift_closure+2;
         const Data.Bits.$fBitsInt_$crotate_closure+2;
         const Data.Bits.$fBitsBool2_closure;
         const Data.Bits.$fBitsInt_$cbit_closure+1;
         const Data.Bits.$fBitsInt_$csetBit_closure+2;
         const Data.Bits.$fBitsInt_$cclearBit_closure+2;
         const Data.Bits.$fBitsInt_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsInt_$ctestBit_closure+2;
         const Data.Bits.$fBitsInt_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsInt_$cfiniteBitSize_closure+1;
         const Data.Bits.$fBitsInt_$cisSigned_closure+1;
         const Data.Bits.$fBitsInt_$cshiftL_closure+2;
         const Data.Bits.$fBitsInt_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsInt_$cshiftR_closure+2;
         const Data.Bits.$fBitsInt_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsInt_$crotateL_closure+2;
         const Data.Bits.$fBitsInt_$crotateR_closure+2;
         const Data.Bits.$fBitsInt_$cpopCount_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.946522811 UTC

[section ""data" . Foreign.Ptr.$fFiniteBitsIntPtr_closure" {
     Foreign.Ptr.$fFiniteBitsIntPtr_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Foreign.Ptr.$fBitsIntPtr_closure+1;
         const Data.Bits.$fBitsInt_$cfiniteBitSize_closure+1;
         const Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_closure+1;
         const Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.948344461 UTC

[section ""data" . Foreign.Ptr.$fShowWordPtr_closure" {
     Foreign.Ptr.$fShowWordPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowWord_$cshowsPrec_closure+3;
         const GHC.Show.$fShowWord_$cshow_closure+1;
         const GHC.Show.$fShowWord_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.950221099 UTC

[section ""data" . Foreign.Ptr.$fReadWordPtr_closure" {
     Foreign.Ptr.$fReadWordPtr_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadWord_$creadsPrec_closure+2;
         const GHC.Read.$fReadWord_$creadList_closure+1;
         const GHC.Read.$fReadWord3_closure+2;
         const GHC.Read.$fReadWord1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.952029674 UTC

[section ""data" . Foreign.Ptr.$fBoundedWordPtr_closure" {
     Foreign.Ptr.$fBoundedWordPtr_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Enum.$fBoundedWord_$cminBound_closure;
         const GHC.Enum.$fBoundedWord_$cmaxBound_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.953940505 UTC

[section ""data" . Foreign.Ptr.$fStorableWordPtr_closure" {
     Foreign.Ptr.$fStorableWordPtr_closure:
         const Foreign.Storable.C:Storable_con_info;
         const Foreign.Storable.$fStorableWord_$calignment_closure+1;
         const Foreign.Storable.$fStorableWord_$calignment_closure+1;
         const GHC.Storable.readWordOffPtr1_closure+3;
         const GHC.Storable.writeWordOffPtr1_closure+4;
         const Foreign.Storable.$fStorableWord4_closure+3;
         const Foreign.Storable.$fStorableWord3_closure+4;
         const Foreign.Storable.$fStorableWord2_closure+2;
         const Foreign.Storable.$fStorableWord1_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.955779723 UTC

[section ""data" . Foreign.Ptr.$fEnumWordPtr_closure" {
     Foreign.Ptr.$fEnumWordPtr_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumWord_$csucc_closure+1;
         const GHC.Enum.$fEnumWord_$cpred_closure+1;
         const GHC.Enum.$fEnumWord_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumWord_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumWord_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumWord_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumWord_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumWord_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.957677896 UTC

[section ""data" . Foreign.Ptr.$fNumWordPtr_closure" {
     Foreign.Ptr.$fNumWordPtr_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumWord_$c+_closure+2;
         const GHC.Num.$fNumWord_$c-_closure+2;
         const GHC.Num.$fNumWord_$c*_closure+2;
         const GHC.Num.$fNumWord_$cnegate_closure+1;
         const GHC.Num.$fNumWord_$cabs_closure+1;
         const GHC.Num.$fNumWord_$csignum_closure+1;
         const GHC.Num.$fNumWord_$cfromInteger_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.960017778 UTC

[section ""data" . Foreign.Ptr.$fEqWordPtr_closure" {
     Foreign.Ptr.$fEqWordPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqWord_closure+2;
         const GHC.Classes.neWord_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.961954892 UTC

[section ""data" . Foreign.Ptr.$fOrdWordPtr_closure" {
     Foreign.Ptr.$fOrdWordPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const Foreign.Ptr.$fEqWordPtr_closure+1;
         const GHC.Classes.compareWord_closure+2;
         const GHC.Classes.ltWord_closure+2;
         const GHC.Classes.leWord_closure+2;
         const GHC.Classes.gtWord_closure+2;
         const GHC.Classes.geWord_closure+2;
         const GHC.Classes.$fOrdWord_$cmax_closure+2;
         const GHC.Classes.$fOrdWord_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.963818825 UTC

[section ""data" . Foreign.Ptr.$fRealWordPtr_closure" {
     Foreign.Ptr.$fRealWordPtr_closure:
         const GHC.Real.C:Real_con_info;
         const Foreign.Ptr.$fNumWordPtr_closure+1;
         const Foreign.Ptr.$fOrdWordPtr_closure+1;
         const GHC.Real.$fRealWord_$ctoRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.965858055 UTC

[section ""data" . Foreign.Ptr.$fIntegralWordPtr_closure" {
     Foreign.Ptr.$fIntegralWordPtr_closure:
         const GHC.Real.C:Integral_con_info;
         const Foreign.Ptr.$fRealWordPtr_closure+1;
         const Foreign.Ptr.$fEnumWordPtr_closure+1;
         const GHC.Real.$fIntegralWord_$cquot_closure+2;
         const GHC.Real.$fIntegralWord_$crem_closure+2;
         const GHC.Real.$fIntegralWord_$cquot_closure+2;
         const GHC.Real.$fIntegralWord_$crem_closure+2;
         const GHC.Real.$fIntegralWord_$cquotRem_closure+2;
         const GHC.Real.$fIntegralWord_$cdivMod_closure+2;
         const GHC.Real.$fIntegralWord_$ctoInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.967863773 UTC

[section ""data" . Foreign.Ptr.$fBitsWordPtr_closure" {
     Foreign.Ptr.$fBitsWordPtr_closure:
         const Data.Bits.C:Bits_con_info;
         const Foreign.Ptr.$fEqWordPtr_closure+1;
         const Data.Bits.$fBitsWord_$c.&._closure+2;
         const Data.Bits.$fBitsWord_$c.|._closure+2;
         const Data.Bits.$fBitsWord_$cxor_closure+2;
         const Data.Bits.$fBitsWord_$ccomplement_closure+1;
         const Data.Bits.$fBitsWord_$cshift_closure+2;
         const Data.Bits.$fBitsWord_$crotate_closure+2;
         const Data.Bits.$fBitsWord1_closure;
         const Data.Bits.$fBitsWord_$cbit_closure+1;
         const Data.Bits.$fBitsWord_$csetBit_closure+2;
         const Data.Bits.$fBitsWord_$cclearBit_closure+2;
         const Data.Bits.$fBitsWord_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsWord_$ctestBit_closure+2;
         const Data.Bits.$fBitsWord_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsWord_$cfiniteBitSize_closure+1;
         const Data.Bits.$fBitsWord_$cisSigned_closure+1;
         const Data.Bits.$fBitsWord_$cshiftL_closure+2;
         const Data.Bits.$fBitsWord_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsWord_$cshiftR_closure+2;
         const Data.Bits.$fBitsWord_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsWord_$crotateL_closure+2;
         const Data.Bits.$fBitsWord_$crotateR_closure+2;
         const Data.Bits.$fBitsWord_$cpopCount_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.970018999 UTC

[section ""data" . Foreign.Ptr.$fFiniteBitsWordPtr_closure" {
     Foreign.Ptr.$fFiniteBitsWordPtr_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Foreign.Ptr.$fBitsWordPtr_closure+1;
         const Data.Bits.$fBitsWord_$cfiniteBitSize_closure+1;
         const Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_closure+1;
         const Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.972947158 UTC

[section ""data" . Foreign.Ptr.ptrToWordPtr_closure" {
     Foreign.Ptr.ptrToWordPtr_closure:
         const Foreign.Ptr.ptrToWordPtr_info;
 },
 Foreign.Ptr.ptrToWordPtr_entry() //  [R2]
         { []
         }
     {offset
       c4RQ0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RQa; else goto c4RQb;
       c4RQa: // global
           R2 = R2;
           R1 = Foreign.Ptr.ptrToWordPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RQb: // global
           I64[Sp - 8] = block_c4RPX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RQf; else goto c4RPY;
       u4RQf: // global
           call _c4RPX(R1) args: 0, res: 0, upd: 0;
       c4RPY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Ptr.ptrToWordPtr_info" {
     Foreign.Ptr.ptrToWordPtr_info:
         const Foreign.Ptr.ptrToWordPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c4RPX() //  [R1]
         { []
         }
     {offset
       c4RPX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RQe; else goto c4RQd;
       c4RQe: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RQd: // global
           _s4RLD::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s4RLD::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4RPX_info" {
     block_c4RPX_info:
         const _c4RPX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.979626483 UTC

[section ""data" . Foreign.Ptr.wordPtrToPtr_closure" {
     Foreign.Ptr.wordPtrToPtr_closure:
         const Foreign.Ptr.wordPtrToPtr_info;
 },
 Foreign.Ptr.wordPtrToPtr_entry() //  [R2]
         { []
         }
     {offset
       c4RQx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RQH; else goto c4RQI;
       c4RQH: // global
           R2 = R2;
           R1 = Foreign.Ptr.wordPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RQI: // global
           I64[Sp - 8] = block_c4RQu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RQM; else goto c4RQv;
       u4RQM: // global
           call _c4RQu(R1) args: 0, res: 0, upd: 0;
       c4RQv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Ptr.wordPtrToPtr_info" {
     Foreign.Ptr.wordPtrToPtr_info:
         const Foreign.Ptr.wordPtrToPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c4RQu() //  [R1]
         { []
         }
     {offset
       c4RQu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RQL; else goto c4RQK;
       c4RQL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RQK: // global
           _s4RLI::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s4RLI::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4RQu_info" {
     block_c4RQu_info:
         const _c4RQu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.985828633 UTC

[section ""data" . Foreign.Ptr.ptrToIntPtr_closure" {
     Foreign.Ptr.ptrToIntPtr_closure:
         const Foreign.Ptr.ptrToIntPtr_info;
 },
 Foreign.Ptr.ptrToIntPtr_entry() //  [R2]
         { []
         }
     {offset
       c4RR4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RRb; else goto c4RRc;
       c4RRb: // global
           R2 = R2;
           R1 = Foreign.Ptr.ptrToIntPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RRc: // global
           I64[Sp - 8] = block_c4RR1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RRg; else goto c4RR2;
       u4RRg: // global
           call _c4RR1(R1) args: 0, res: 0, upd: 0;
       c4RR2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Ptr.ptrToIntPtr_info" {
     Foreign.Ptr.ptrToIntPtr_info:
         const Foreign.Ptr.ptrToIntPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c4RR1() //  [R1]
         { []
         }
     {offset
       c4RR1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RRf; else goto c4RRe;
       c4RRf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RRe: // global
           _s4RLM::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s4RLM::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4RR1_info" {
     block_c4RR1_info:
         const _c4RR1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.99207521 UTC

[section ""data" . Foreign.Ptr.intPtrToPtr_closure" {
     Foreign.Ptr.intPtrToPtr_closure:
         const Foreign.Ptr.intPtrToPtr_info;
 },
 Foreign.Ptr.intPtrToPtr_entry() //  [R2]
         { []
         }
     {offset
       c4RRy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RRF; else goto c4RRG;
       c4RRF: // global
           R2 = R2;
           R1 = Foreign.Ptr.intPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RRG: // global
           I64[Sp - 8] = block_c4RRv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RRK; else goto c4RRw;
       u4RRK: // global
           call _c4RRv(R1) args: 0, res: 0, upd: 0;
       c4RRw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Ptr.intPtrToPtr_info" {
     Foreign.Ptr.intPtrToPtr_info:
         const Foreign.Ptr.intPtrToPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c4RRv() //  [R1]
         { []
         }
     {offset
       c4RRv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RRJ; else goto c4RRI;
       c4RRJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RRI: // global
           _s4RLQ::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s4RLQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4RRv_info" {
     block_c4RRv_info:
         const _c4RRv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.998475622 UTC

[section ""cstring" . Foreign.Ptr.$trModule4_bytes" {
     Foreign.Ptr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.00017641 UTC

[section ""data" . Foreign.Ptr.$trModule3_closure" {
     Foreign.Ptr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.001815577 UTC

[section ""cstring" . Foreign.Ptr.$trModule2_bytes" {
     Foreign.Ptr.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.003433805 UTC

[section ""data" . Foreign.Ptr.$trModule1_closure" {
     Foreign.Ptr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.00501109 UTC

[section ""data" . Foreign.Ptr.$trModule_closure" {
     Foreign.Ptr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.Ptr.$trModule3_closure+1;
         const Foreign.Ptr.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.006796955 UTC

[section ""data" . $krep_r4RLt_closure" {
     $krep_r4RLt_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.008394482 UTC

[section ""data" . $krep1_r4RLu_closure" {
     $krep1_r4RLu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.010023314 UTC

[section ""cstring" . Foreign.Ptr.$tcWordPtr2_bytes" {
     Foreign.Ptr.$tcWordPtr2_bytes:
         I8[] [87,111,114,100,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.011691581 UTC

[section ""data" . Foreign.Ptr.$tcWordPtr1_closure" {
     Foreign.Ptr.$tcWordPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tcWordPtr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.013892762 UTC

[section ""data" . Foreign.Ptr.$tcWordPtr_closure" {
     Foreign.Ptr.$tcWordPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tcWordPtr1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10827112719629138107;
         const 3588783739676187441;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.015684153 UTC

[section ""data" . $krep2_r4RLv_closure" {
     $krep2_r4RLv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.Ptr.$tcWordPtr_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.017441779 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr1_closure" {
     Foreign.Ptr.$tc'WordPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r4RLt_closure+1;
         const $krep2_r4RLv_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.019178194 UTC

[section ""cstring" . Foreign.Ptr.$tc'WordPtr3_bytes" {
     Foreign.Ptr.$tc'WordPtr3_bytes:
         I8[] [39,87,111,114,100,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.021326692 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr2_closure" {
     Foreign.Ptr.$tc'WordPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tc'WordPtr3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.023188974 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr_closure" {
     Foreign.Ptr.$tc'WordPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tc'WordPtr2_closure+1;
         const Foreign.Ptr.$tc'WordPtr1_closure+4;
         const 15588862172907192371;
         const 13878995573910308719;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.024965995 UTC

[section ""cstring" . Foreign.Ptr.$tcIntPtr2_bytes" {
     Foreign.Ptr.$tcIntPtr2_bytes:
         I8[] [73,110,116,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.026652193 UTC

[section ""data" . Foreign.Ptr.$tcIntPtr1_closure" {
     Foreign.Ptr.$tcIntPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tcIntPtr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.028338051 UTC

[section ""data" . Foreign.Ptr.$tcIntPtr_closure" {
     Foreign.Ptr.$tcIntPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tcIntPtr1_closure+1;
         const GHC.Types.krep$*_closure;
         const 12538429555661790394;
         const 9943980142794044772;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.03088295 UTC

[section ""data" . $krep3_r4RLw_closure" {
     $krep3_r4RLw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.Ptr.$tcIntPtr_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.032652408 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr1_closure" {
     Foreign.Ptr.$tc'IntPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r4RLu_closure+1;
         const $krep3_r4RLw_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.034383078 UTC

[section ""cstring" . Foreign.Ptr.$tc'IntPtr3_bytes" {
     Foreign.Ptr.$tc'IntPtr3_bytes:
         I8[] [39,73,110,116,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.036071086 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr2_closure" {
     Foreign.Ptr.$tc'IntPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tc'IntPtr3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.03788043 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr_closure" {
     Foreign.Ptr.$tc'IntPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tc'IntPtr2_closure+1;
         const Foreign.Ptr.$tc'IntPtr1_closure+4;
         const 17038100807295602145;
         const 4458611784149765752;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.040597759 UTC

[section ""data" . freeHaskellFunPtr1_r4RLx_closure" {
     freeHaskellFunPtr1_r4RLx_closure:
         const freeHaskellFunPtr1_r4RLx_info;
 },
 freeHaskellFunPtr1_r4RLx_entry() //  [R2]
         { []
         }
     {offset
       c4RSp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RSq; else goto c4RSr;
       c4RSq: // global
           R2 = R2;
           R1 = freeHaskellFunPtr1_r4RLx_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RSr: // global
           I64[Sp - 8] = block_c4RSm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RSx; else goto c4RSn;
       u4RSx: // global
           call _c4RSm(R1) args: 0, res: 0, upd: 0;
       c4RSn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . freeHaskellFunPtr1_r4RLx_info" {
     freeHaskellFunPtr1_r4RLx_info:
         const freeHaskellFunPtr1_r4RLx_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c4RSm() //  [R1]
         { []
         }
     {offset
       c4RSm: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] freeHaskellFunctionPtr(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4RSm_info" {
     block_c4RSm_info:
         const _c4RSm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.046385511 UTC

[section ""data" . Foreign.Ptr.freeHaskellFunPtr_closure" {
     Foreign.Ptr.freeHaskellFunPtr_closure:
         const Foreign.Ptr.freeHaskellFunPtr_info;
 },
 Foreign.Ptr.freeHaskellFunPtr_entry() //  [R2]
         { []
         }
     {offset
       c4RSM: // global
           R2 = R2;
           call freeHaskellFunPtr1_r4RLx_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Ptr.freeHaskellFunPtr_info" {
     Foreign.Ptr.freeHaskellFunPtr_info:
         const Foreign.Ptr.freeHaskellFunPtr_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.049605946 UTC

[section ""relreadonly" . S4RNJ_srt" { S4RNJ_srt:
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.476998923 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:59:46.478923214 UTC

[section ""data" . Foreign.Ptr.$fShowIntPtr_closure" {
     Foreign.Ptr.$fShowIntPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.showSignedInt_closure+3;
         const GHC.Show.$fShowInt_$cshow_closure+1;
         const GHC.Show.$fShowInt_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.481654343 UTC

[section ""data" . Foreign.Ptr.$fReadIntPtr_closure" {
     Foreign.Ptr.$fReadIntPtr_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadInt_$creadsPrec_closure+1;
         const GHC.Read.$fReadInt_$creadList_closure+1;
         const GHC.Read.$fReadInt1_closure+2;
         const GHC.Read.$fReadInt_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.484345572 UTC

[section ""data" . Foreign.Ptr.$fBoundedIntPtr_closure" {
     Foreign.Ptr.$fBoundedIntPtr_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Base.minInt_closure;
         const GHC.Base.maxInt_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.48710964 UTC

[section ""data" . Foreign.Ptr.$fStorableIntPtr_closure" {
     Foreign.Ptr.$fStorableIntPtr_closure:
         const Foreign.Storable.C:Storable_con_info;
         const Foreign.Storable.$fStorableInt_$calignment_closure+1;
         const Foreign.Storable.$fStorableInt_$calignment_closure+1;
         const GHC.Storable.readIntOffPtr1_closure+3;
         const GHC.Storable.writeIntOffPtr1_closure+4;
         const Foreign.Storable.$fStorableInt4_closure+3;
         const Foreign.Storable.$fStorableInt3_closure+4;
         const Foreign.Storable.$fStorableInt2_closure+2;
         const Foreign.Storable.$fStorableInt1_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.490031916 UTC

[section ""data" . Foreign.Ptr.$fEnumIntPtr_closure" {
     Foreign.Ptr.$fEnumIntPtr_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumInt_$csucc_closure+1;
         const GHC.Enum.$fEnumInt_$cpred_closure+1;
         const GHC.Enum.$fEnumInt_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInt_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInt_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumInt_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumInt_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumInt_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.492857785 UTC

[section ""data" . Foreign.Ptr.$fNumIntPtr_closure" {
     Foreign.Ptr.$fNumIntPtr_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumInt_$c+_closure+2;
         const GHC.Num.$fNumInt_$c-_closure+2;
         const GHC.Num.$fNumInt_$c*_closure+2;
         const GHC.Num.$fNumInt_$cnegate_closure+1;
         const GHC.Num.$fNumInt_$cabs_closure+1;
         const GHC.Num.$fNumInt_$csignum_closure+1;
         const GHC.Num.$fNumInt_$cfromInteger_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.49583342 UTC

[section ""data" . Foreign.Ptr.$fEqIntPtr_closure" {
     Foreign.Ptr.$fEqIntPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqInt_closure+2;
         const GHC.Classes.neInt_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.498401967 UTC

[section ""data" . Foreign.Ptr.$fOrdIntPtr_closure" {
     Foreign.Ptr.$fOrdIntPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const Foreign.Ptr.$fEqIntPtr_closure+1;
         const GHC.Classes.compareInt_closure+2;
         const GHC.Classes.ltInt_closure+2;
         const GHC.Classes.leInt_closure+2;
         const GHC.Classes.gtInt_closure+2;
         const GHC.Classes.geInt_closure+2;
         const GHC.Classes.$fOrdInt_$cmax_closure+2;
         const GHC.Classes.$fOrdInt_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.501110075 UTC

[section ""data" . Foreign.Ptr.$fRealIntPtr_closure" {
     Foreign.Ptr.$fRealIntPtr_closure:
         const GHC.Real.C:Real_con_info;
         const Foreign.Ptr.$fNumIntPtr_closure+1;
         const Foreign.Ptr.$fOrdIntPtr_closure+1;
         const GHC.Real.$fEnumRatio_$ctoRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.503761232 UTC

[section ""data" . Foreign.Ptr.$fIntegralIntPtr_closure" {
     Foreign.Ptr.$fIntegralIntPtr_closure:
         const GHC.Real.C:Integral_con_info;
         const Foreign.Ptr.$fRealIntPtr_closure+1;
         const Foreign.Ptr.$fEnumIntPtr_closure+1;
         const GHC.Real.$fIntegralInt_$cquot_closure+2;
         const GHC.Real.$fIntegralInt_$crem_closure+2;
         const GHC.Real.$fIntegralInt_$cdiv_closure+2;
         const GHC.Real.$fIntegralInt_$cmod_closure+2;
         const GHC.Real.$fIntegralInt_$cquotRem_closure+2;
         const GHC.Real.$fIntegralInt_$cdivMod_closure+2;
         const GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.507006642 UTC

[section ""data" . Foreign.Ptr.$fBitsIntPtr_closure" {
     Foreign.Ptr.$fBitsIntPtr_closure:
         const Data.Bits.C:Bits_con_info;
         const Foreign.Ptr.$fEqIntPtr_closure+1;
         const Data.Bits.$fBitsInt_$c.&._closure+2;
         const Data.Bits.$fBitsInt_$c.|._closure+2;
         const Data.Bits.$fBitsInt_$cxor_closure+2;
         const Data.Bits.$fBitsInt_$ccomplement_closure+1;
         const Data.Bits.$fBitsInt_$cshift_closure+2;
         const Data.Bits.$fBitsInt_$crotate_closure+2;
         const Data.Bits.$fBitsBool2_closure;
         const Data.Bits.$fBitsInt_$cbit_closure+1;
         const Data.Bits.$fBitsInt_$csetBit_closure+2;
         const Data.Bits.$fBitsInt_$cclearBit_closure+2;
         const Data.Bits.$fBitsInt_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsInt_$ctestBit_closure+2;
         const Data.Bits.$fBitsInt_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsInt_$cfiniteBitSize_closure+1;
         const Data.Bits.$fBitsInt_$cisSigned_closure+1;
         const Data.Bits.$fBitsInt_$cshiftL_closure+2;
         const Data.Bits.$fBitsInt_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsInt_$cshiftR_closure+2;
         const Data.Bits.$fBitsInt_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsInt_$crotateL_closure+2;
         const Data.Bits.$fBitsInt_$crotateR_closure+2;
         const Data.Bits.$fBitsInt_$cpopCount_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.511486872 UTC

[section ""data" . Foreign.Ptr.$fFiniteBitsIntPtr_closure" {
     Foreign.Ptr.$fFiniteBitsIntPtr_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Foreign.Ptr.$fBitsIntPtr_closure+1;
         const Data.Bits.$fBitsInt_$cfiniteBitSize_closure+1;
         const Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_closure+1;
         const Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.514305571 UTC

[section ""data" . Foreign.Ptr.$fShowWordPtr_closure" {
     Foreign.Ptr.$fShowWordPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowWord_$cshowsPrec_closure+3;
         const GHC.Show.$fShowWord_$cshow_closure+1;
         const GHC.Show.$fShowWord_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.51694661 UTC

[section ""data" . Foreign.Ptr.$fReadWordPtr_closure" {
     Foreign.Ptr.$fReadWordPtr_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadWord_$creadsPrec_closure+2;
         const GHC.Read.$fReadWord_$creadList_closure+1;
         const GHC.Read.$fReadWord3_closure+2;
         const GHC.Read.$fReadWord1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.520059755 UTC

[section ""data" . Foreign.Ptr.$fBoundedWordPtr_closure" {
     Foreign.Ptr.$fBoundedWordPtr_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Enum.$fBoundedWord_$cminBound_closure;
         const GHC.Enum.$fBoundedWord_$cmaxBound_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.523191366 UTC

[section ""data" . Foreign.Ptr.$fStorableWordPtr_closure" {
     Foreign.Ptr.$fStorableWordPtr_closure:
         const Foreign.Storable.C:Storable_con_info;
         const Foreign.Storable.$fStorableWord_$calignment_closure+1;
         const Foreign.Storable.$fStorableWord_$calignment_closure+1;
         const GHC.Storable.readWordOffPtr1_closure+3;
         const GHC.Storable.writeWordOffPtr1_closure+4;
         const Foreign.Storable.$fStorableWord4_closure+3;
         const Foreign.Storable.$fStorableWord3_closure+4;
         const Foreign.Storable.$fStorableWord2_closure+2;
         const Foreign.Storable.$fStorableWord1_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.526591726 UTC

[section ""data" . Foreign.Ptr.$fEnumWordPtr_closure" {
     Foreign.Ptr.$fEnumWordPtr_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumWord_$csucc_closure+1;
         const GHC.Enum.$fEnumWord_$cpred_closure+1;
         const GHC.Enum.$fEnumWord_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumWord_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumWord_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumWord_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumWord_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumWord_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.529714805 UTC

[section ""data" . Foreign.Ptr.$fNumWordPtr_closure" {
     Foreign.Ptr.$fNumWordPtr_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumWord_$c+_closure+2;
         const GHC.Num.$fNumWord_$c-_closure+2;
         const GHC.Num.$fNumWord_$c*_closure+2;
         const GHC.Num.$fNumWord_$cnegate_closure+1;
         const GHC.Num.$fNumWord_$cabs_closure+1;
         const GHC.Num.$fNumWord_$csignum_closure+1;
         const GHC.Num.$fNumWord_$cfromInteger_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.532783897 UTC

[section ""data" . Foreign.Ptr.$fEqWordPtr_closure" {
     Foreign.Ptr.$fEqWordPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqWord_closure+2;
         const GHC.Classes.neWord_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.536023702 UTC

[section ""data" . Foreign.Ptr.$fOrdWordPtr_closure" {
     Foreign.Ptr.$fOrdWordPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const Foreign.Ptr.$fEqWordPtr_closure+1;
         const GHC.Classes.compareWord_closure+2;
         const GHC.Classes.ltWord_closure+2;
         const GHC.Classes.leWord_closure+2;
         const GHC.Classes.gtWord_closure+2;
         const GHC.Classes.geWord_closure+2;
         const GHC.Classes.$fOrdWord_$cmax_closure+2;
         const GHC.Classes.$fOrdWord_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.539052836 UTC

[section ""data" . Foreign.Ptr.$fRealWordPtr_closure" {
     Foreign.Ptr.$fRealWordPtr_closure:
         const GHC.Real.C:Real_con_info;
         const Foreign.Ptr.$fNumWordPtr_closure+1;
         const Foreign.Ptr.$fOrdWordPtr_closure+1;
         const GHC.Real.$fRealWord_$ctoRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.542147188 UTC

[section ""data" . Foreign.Ptr.$fIntegralWordPtr_closure" {
     Foreign.Ptr.$fIntegralWordPtr_closure:
         const GHC.Real.C:Integral_con_info;
         const Foreign.Ptr.$fRealWordPtr_closure+1;
         const Foreign.Ptr.$fEnumWordPtr_closure+1;
         const GHC.Real.$fIntegralWord_$cquot_closure+2;
         const GHC.Real.$fIntegralWord_$crem_closure+2;
         const GHC.Real.$fIntegralWord_$cquot_closure+2;
         const GHC.Real.$fIntegralWord_$crem_closure+2;
         const GHC.Real.$fIntegralWord_$cquotRem_closure+2;
         const GHC.Real.$fIntegralWord_$cdivMod_closure+2;
         const GHC.Real.$fIntegralWord_$ctoInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.545600936 UTC

[section ""data" . Foreign.Ptr.$fBitsWordPtr_closure" {
     Foreign.Ptr.$fBitsWordPtr_closure:
         const Data.Bits.C:Bits_con_info;
         const Foreign.Ptr.$fEqWordPtr_closure+1;
         const Data.Bits.$fBitsWord_$c.&._closure+2;
         const Data.Bits.$fBitsWord_$c.|._closure+2;
         const Data.Bits.$fBitsWord_$cxor_closure+2;
         const Data.Bits.$fBitsWord_$ccomplement_closure+1;
         const Data.Bits.$fBitsWord_$cshift_closure+2;
         const Data.Bits.$fBitsWord_$crotate_closure+2;
         const Data.Bits.$fBitsWord1_closure;
         const Data.Bits.$fBitsWord_$cbit_closure+1;
         const Data.Bits.$fBitsWord_$csetBit_closure+2;
         const Data.Bits.$fBitsWord_$cclearBit_closure+2;
         const Data.Bits.$fBitsWord_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsWord_$ctestBit_closure+2;
         const Data.Bits.$fBitsWord_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsWord_$cfiniteBitSize_closure+1;
         const Data.Bits.$fBitsWord_$cisSigned_closure+1;
         const Data.Bits.$fBitsWord_$cshiftL_closure+2;
         const Data.Bits.$fBitsWord_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsWord_$cshiftR_closure+2;
         const Data.Bits.$fBitsWord_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsWord_$crotateL_closure+2;
         const Data.Bits.$fBitsWord_$crotateR_closure+2;
         const Data.Bits.$fBitsWord_$cpopCount_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.549064031 UTC

[section ""data" . Foreign.Ptr.$fFiniteBitsWordPtr_closure" {
     Foreign.Ptr.$fFiniteBitsWordPtr_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Foreign.Ptr.$fBitsWordPtr_closure+1;
         const Data.Bits.$fBitsWord_$cfiniteBitSize_closure+1;
         const Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_closure+1;
         const Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.554412676 UTC

[section ""data" . Foreign.Ptr.ptrToWordPtr_closure" {
     Foreign.Ptr.ptrToWordPtr_closure:
         const Foreign.Ptr.ptrToWordPtr_info;
 },
 Foreign.Ptr.ptrToWordPtr_entry() //  [R2]
         { []
         }
     {offset
       c4RTO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RTY; else goto c4RTZ;
       c4RTY: // global
           R2 = R2;
           R1 = Foreign.Ptr.ptrToWordPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RTZ: // global
           I64[Sp - 8] = block_c4RTL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RU3; else goto c4RTM;
       u4RU3: // global
           call _c4RTL(R1) args: 0, res: 0, upd: 0;
       c4RTM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Ptr.ptrToWordPtr_info" {
     Foreign.Ptr.ptrToWordPtr_info:
         const Foreign.Ptr.ptrToWordPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c4RTL() //  [R1]
         { []
         }
     {offset
       c4RTL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RU2; else goto c4RU1;
       c4RU2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RU1: // global
           _s4RSY::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s4RSY::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4RTL_info" {
     block_c4RTL_info:
         const _c4RTL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.566401306 UTC

[section ""data" . Foreign.Ptr.wordPtrToPtr_closure" {
     Foreign.Ptr.wordPtrToPtr_closure:
         const Foreign.Ptr.wordPtrToPtr_info;
 },
 Foreign.Ptr.wordPtrToPtr_entry() //  [R2]
         { []
         }
     {offset
       c4RUn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RUx; else goto c4RUy;
       c4RUx: // global
           R2 = R2;
           R1 = Foreign.Ptr.wordPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RUy: // global
           I64[Sp - 8] = block_c4RUk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RUC; else goto c4RUl;
       u4RUC: // global
           call _c4RUk(R1) args: 0, res: 0, upd: 0;
       c4RUl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Ptr.wordPtrToPtr_info" {
     Foreign.Ptr.wordPtrToPtr_info:
         const Foreign.Ptr.wordPtrToPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c4RUk() //  [R1]
         { []
         }
     {offset
       c4RUk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RUB; else goto c4RUA;
       c4RUB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RUA: // global
           _s4RT3::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s4RT3::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4RUk_info" {
     block_c4RUk_info:
         const _c4RUk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.576188815 UTC

[section ""data" . Foreign.Ptr.ptrToIntPtr_closure" {
     Foreign.Ptr.ptrToIntPtr_closure:
         const Foreign.Ptr.ptrToIntPtr_info;
 },
 Foreign.Ptr.ptrToIntPtr_entry() //  [R2]
         { []
         }
     {offset
       c4RUW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RV3; else goto c4RV4;
       c4RV3: // global
           R2 = R2;
           R1 = Foreign.Ptr.ptrToIntPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RV4: // global
           I64[Sp - 8] = block_c4RUT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RV8; else goto c4RUU;
       u4RV8: // global
           call _c4RUT(R1) args: 0, res: 0, upd: 0;
       c4RUU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Ptr.ptrToIntPtr_info" {
     Foreign.Ptr.ptrToIntPtr_info:
         const Foreign.Ptr.ptrToIntPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c4RUT() //  [R1]
         { []
         }
     {offset
       c4RUT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RV7; else goto c4RV6;
       c4RV7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RV6: // global
           _s4RT7::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s4RT7::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4RUT_info" {
     block_c4RUT_info:
         const _c4RUT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.58751512 UTC

[section ""data" . Foreign.Ptr.intPtrToPtr_closure" {
     Foreign.Ptr.intPtrToPtr_closure:
         const Foreign.Ptr.intPtrToPtr_info;
 },
 Foreign.Ptr.intPtrToPtr_entry() //  [R2]
         { []
         }
     {offset
       c4RVs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RVz; else goto c4RVA;
       c4RVz: // global
           R2 = R2;
           R1 = Foreign.Ptr.intPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RVA: // global
           I64[Sp - 8] = block_c4RVp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RVE; else goto c4RVq;
       u4RVE: // global
           call _c4RVp(R1) args: 0, res: 0, upd: 0;
       c4RVq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Ptr.intPtrToPtr_info" {
     Foreign.Ptr.intPtrToPtr_info:
         const Foreign.Ptr.intPtrToPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c4RVp() //  [R1]
         { []
         }
     {offset
       c4RVp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RVD; else goto c4RVC;
       c4RVD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RVC: // global
           _s4RTb::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s4RTb::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4RVp_info" {
     block_c4RVp_info:
         const _c4RVp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.595377931 UTC

[section ""cstring" . Foreign.Ptr.$trModule4_bytes" {
     Foreign.Ptr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.598096689 UTC

[section ""data" . Foreign.Ptr.$trModule3_closure" {
     Foreign.Ptr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.599908776 UTC

[section ""cstring" . Foreign.Ptr.$trModule2_bytes" {
     Foreign.Ptr.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.601801937 UTC

[section ""data" . Foreign.Ptr.$trModule1_closure" {
     Foreign.Ptr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.603536006 UTC

[section ""data" . Foreign.Ptr.$trModule_closure" {
     Foreign.Ptr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.Ptr.$trModule3_closure+1;
         const Foreign.Ptr.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.605397787 UTC

[section ""data" . $krep_r4RLt_closure" {
     $krep_r4RLt_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.60775634 UTC

[section ""data" . $krep1_r4RLu_closure" {
     $krep1_r4RLu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.609607218 UTC

[section ""cstring" . Foreign.Ptr.$tcWordPtr2_bytes" {
     Foreign.Ptr.$tcWordPtr2_bytes:
         I8[] [87,111,114,100,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.611278702 UTC

[section ""data" . Foreign.Ptr.$tcWordPtr1_closure" {
     Foreign.Ptr.$tcWordPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tcWordPtr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.61309198 UTC

[section ""data" . Foreign.Ptr.$tcWordPtr_closure" {
     Foreign.Ptr.$tcWordPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tcWordPtr1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10827112719629138107;
         const 3588783739676187441;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.615098664 UTC

[section ""data" . $krep2_r4RLv_closure" {
     $krep2_r4RLv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.Ptr.$tcWordPtr_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.616883108 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr1_closure" {
     Foreign.Ptr.$tc'WordPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r4RLt_closure+1;
         const $krep2_r4RLv_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.618718021 UTC

[section ""cstring" . Foreign.Ptr.$tc'WordPtr3_bytes" {
     Foreign.Ptr.$tc'WordPtr3_bytes:
         I8[] [39,87,111,114,100,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.620522948 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr2_closure" {
     Foreign.Ptr.$tc'WordPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tc'WordPtr3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.623148282 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr_closure" {
     Foreign.Ptr.$tc'WordPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tc'WordPtr2_closure+1;
         const Foreign.Ptr.$tc'WordPtr1_closure+4;
         const 15588862172907192371;
         const 13878995573910308719;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.625006453 UTC

[section ""cstring" . Foreign.Ptr.$tcIntPtr2_bytes" {
     Foreign.Ptr.$tcIntPtr2_bytes:
         I8[] [73,110,116,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.626839344 UTC

[section ""data" . Foreign.Ptr.$tcIntPtr1_closure" {
     Foreign.Ptr.$tcIntPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tcIntPtr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.628712763 UTC

[section ""data" . Foreign.Ptr.$tcIntPtr_closure" {
     Foreign.Ptr.$tcIntPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tcIntPtr1_closure+1;
         const GHC.Types.krep$*_closure;
         const 12538429555661790394;
         const 9943980142794044772;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.630695104 UTC

[section ""data" . $krep3_r4RLw_closure" {
     $krep3_r4RLw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.Ptr.$tcIntPtr_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.632417529 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr1_closure" {
     Foreign.Ptr.$tc'IntPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r4RLu_closure+1;
         const $krep3_r4RLw_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.634816911 UTC

[section ""cstring" . Foreign.Ptr.$tc'IntPtr3_bytes" {
     Foreign.Ptr.$tc'IntPtr3_bytes:
         I8[] [39,73,110,116,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.63664942 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr2_closure" {
     Foreign.Ptr.$tc'IntPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tc'IntPtr3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.638616951 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr_closure" {
     Foreign.Ptr.$tc'IntPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tc'IntPtr2_closure+1;
         const Foreign.Ptr.$tc'IntPtr1_closure+4;
         const 17038100807295602145;
         const 4458611784149765752;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.642166084 UTC

[section ""data" . freeHaskellFunPtr1_r4RLx_closure" {
     freeHaskellFunPtr1_r4RLx_closure:
         const freeHaskellFunPtr1_r4RLx_info;
 },
 freeHaskellFunPtr1_r4RLx_entry() //  [R2]
         { []
         }
     {offset
       c4RWl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RWm; else goto c4RWn;
       c4RWm: // global
           R2 = R2;
           R1 = freeHaskellFunPtr1_r4RLx_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RWn: // global
           I64[Sp - 8] = block_c4RWi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RWt; else goto c4RWj;
       u4RWt: // global
           call _c4RWi(R1) args: 0, res: 0, upd: 0;
       c4RWj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . freeHaskellFunPtr1_r4RLx_info" {
     freeHaskellFunPtr1_r4RLx_info:
         const freeHaskellFunPtr1_r4RLx_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c4RWi() //  [R1]
         { []
         }
     {offset
       c4RWi: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] freeHaskellFunctionPtr(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4RWi_info" {
     block_c4RWi_info:
         const _c4RWi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.647890613 UTC

[section ""data" . Foreign.Ptr.freeHaskellFunPtr_closure" {
     Foreign.Ptr.freeHaskellFunPtr_closure:
         const Foreign.Ptr.freeHaskellFunPtr_info;
 },
 Foreign.Ptr.freeHaskellFunPtr_entry() //  [R2]
         { []
         }
     {offset
       c4RWK: // global
           R2 = R2;
           call freeHaskellFunPtr1_r4RLx_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Ptr.freeHaskellFunPtr_info" {
     Foreign.Ptr.freeHaskellFunPtr_info:
         const Foreign.Ptr.freeHaskellFunPtr_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.651050602 UTC

[section ""relreadonly" . S4RWR_srt" { S4RWR_srt:
 }]

