
==================== Tidy Core ====================
2018-03-16 16:03:57.933332865 UTC

Result size of Tidy Core
  = {terms: 412, types: 697, coercions: 131, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_r8Ohb :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_r8Ohb = "undefined"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1_r8Ohc :: [Char]
[GblId]
lvl1_r8Ohc = unpackCString# lvl_r8Ohb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Foreign.Marshal.Utils.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Foreign.Marshal.Utils.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl2_r8Ohd :: [Char]
[GblId]
lvl2_r8Ohd = unpackCString# Foreign.Marshal.Utils.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl3_r8Ohe :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl3_r8Ohe = "Foreign.Marshal.Alloc"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl4_r8Ohf :: [Char]
[GblId]
lvl4_r8Ohf = unpackCString# lvl3_r8Ohe

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl5_r8Ohg :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl5_r8Ohg = "./Foreign/Marshal/Alloc.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl6_r8Ohh :: [Char]
[GblId]
lvl6_r8Ohh = unpackCString# lvl5_r8Ohg

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl7_r8Ohi :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl7_r8Ohi = GHC.Types.I# 84#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl8_r8Ohj :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl8_r8Ohj = GHC.Types.I# 32#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl9_r8Ohk :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl9_r8Ohk = GHC.Types.I# 41#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl10_r8Ohl :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []]
lvl10_r8Ohl
  = GHC.Stack.Types.SrcLoc
      lvl2_r8Ohd
      lvl4_r8Ohf
      lvl6_r8Ohh
      lvl7_r8Ohi
      lvl8_r8Ohj
      lvl7_r8Ohi
      lvl9_r8Ohk

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl11_r8Ohm :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []]
lvl11_r8Ohm
  = GHC.Stack.Types.PushCallStack
      lvl1_r8Ohc lvl10_r8Ohl GHC.Stack.Types.EmptyCallStack

-- RHS size: {terms: 3, types: 4, coercions: 4, joins: 0/0}
Foreign.Marshal.Utils.new2 :: forall a. a
[GblId, Str=x]
Foreign.Marshal.Utils.new2
  = \ (@ a_a8O3X) ->
      undefined
        @ 'LiftedRep
        @ a_a8O3X
        (lvl11_r8Ohm
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: (GHC.Stack.Types.CallStack :: *)
                    ~R# (?callStack::GHC.Stack.Types.CallStack :: Constraint)))

-- RHS size: {terms: 37, types: 49, coercions: 2, joins: 0/1}
Foreign.Marshal.Utils.new1
  :: forall a.
     Storable a =>
     a -> State# RealWorld -> (# State# RealWorld, Ptr a #)
[GblId,
 Arity=3,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,A,A,A,A,1*C1(C1(C1(U(U,A)))))><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0] 164 30}]
Foreign.Marshal.Utils.new1
  = \ (@ a_a8O3X)
      ($dStorable_a8O3Z :: Storable a_a8O3X)
      (val_a8NXc :: a_a8O3X)
      (s_i7IAv :: State# RealWorld) ->
      case Foreign.Storable.sizeOf
             @ a_a8O3X $dStorable_a8O3Z (Foreign.Marshal.Utils.new2 @ a_a8O3X)
      of
      { I# x#_i7NZc ->
      case {__pkg_ccall base-4.11.0.0 Word#
                           -> State# RealWorld -> (# State# RealWorld, Addr# #)}_d8MKH
             (int2Word# x#_i7NZc) s_i7IAv
      of
      { (# ds_d8MKF, ds1_d8MKE #) ->
      case eqAddr# ds1_d8MKE __NULL of {
        __DEFAULT ->
          let {
            ipv1_i7IAz :: Ptr a_a8O3X
            [LclId, Unf=OtherCon []]
            ipv1_i7IAz = GHC.Ptr.Ptr @ a_a8O3X ds1_d8MKE } in
          case ((poke @ a_a8O3X $dStorable_a8O3Z ipv1_i7IAz val_a8NXc)
                `cast` (GHC.Types.N:IO[0] <()>_R
                        :: (IO () :: *)
                           ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                 ds_d8MKF
          of
          { (# ipv_i7JiK, ipv2_i7JiL #) ->
          (# ipv_i7JiK, ipv1_i7IAz #)
          };
        1# ->
          raiseIO#
            @ GHC.Exception.SomeException
            @ (Ptr a_a8O3X)
            Foreign.Marshal.Alloc.malloc1
            ds_d8MKF
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 12, joins: 0/0}
new :: forall a. Storable a => a -> IO (Ptr a)
[GblId,
 Arity=3,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,A,A,A,A,1*C1(C1(C1(U(U,A)))))><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.Marshal.Utils.new1
               `cast` (forall (a :: <*>_N).
                       <Storable a>_R ->_R <a>_R ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
                       :: (forall a.
                           Storable a =>
                           a -> State# RealWorld -> (# State# RealWorld, Ptr a #) :: *)
                          ~R# (forall a. Storable a => a -> IO (Ptr a) :: *))}]
new
  = Foreign.Marshal.Utils.new1
    `cast` (forall (a :: <*>_N).
            <Storable a>_R ->_R <a>_R ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
            :: (forall a.
                Storable a =>
                a -> State# RealWorld -> (# State# RealWorld, Ptr a #) :: *)
               ~R# (forall a. Storable a => a -> IO (Ptr a) :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl12_r8Ohn :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl12_r8Ohn = GHC.Types.I# 117#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl13_r8Oho :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl13_r8Oho = GHC.Types.I# 60#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl14_r8Ohp :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl14_r8Ohp = GHC.Types.I# 69#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl15_r8Ohq :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []]
lvl15_r8Ohq
  = GHC.Stack.Types.SrcLoc
      lvl2_r8Ohd
      lvl4_r8Ohf
      lvl6_r8Ohh
      lvl12_r8Ohn
      lvl13_r8Oho
      lvl12_r8Ohn
      lvl14_r8Ohp

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl16_r8Ohr :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []]
lvl16_r8Ohr
  = GHC.Stack.Types.PushCallStack
      lvl1_r8Ohc lvl15_r8Ohq GHC.Stack.Types.EmptyCallStack

-- RHS size: {terms: 3, types: 4, coercions: 4, joins: 0/0}
Foreign.Marshal.Utils.with2 :: forall a. a
[GblId, Str=x]
Foreign.Marshal.Utils.with2
  = \ (@ a_a8O3A) ->
      undefined
        @ 'LiftedRep
        @ a_a8O3A
        (lvl16_r8Ohr
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: (GHC.Stack.Types.CallStack :: *)
                    ~R# (?callStack::GHC.Stack.Types.CallStack :: Constraint)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl17_r8Ohs :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl17_r8Ohs = GHC.Types.I# 31#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl18_r8Oht :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl18_r8Oht = GHC.Types.I# 40#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl19_r8Ohu :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []]
lvl19_r8Ohu
  = GHC.Stack.Types.SrcLoc
      lvl2_r8Ohd
      lvl4_r8Ohf
      lvl6_r8Ohh
      lvl12_r8Ohn
      lvl17_r8Ohs
      lvl12_r8Ohn
      lvl18_r8Oht

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl20_r8Ohv :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []]
lvl20_r8Ohv
  = GHC.Stack.Types.PushCallStack
      lvl1_r8Ohc lvl19_r8Ohu GHC.Stack.Types.EmptyCallStack

-- RHS size: {terms: 3, types: 4, coercions: 4, joins: 0/0}
Foreign.Marshal.Utils.with3 :: forall a. a
[GblId, Str=x]
Foreign.Marshal.Utils.with3
  = \ (@ a_a8O3A) ->
      undefined
        @ 'LiftedRep
        @ a_a8O3A
        (lvl20_r8Ohv
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: (GHC.Stack.Types.CallStack :: *)
                    ~R# (?callStack::GHC.Stack.Types.CallStack :: Constraint)))

-- RHS size: {terms: 53, types: 85, coercions: 4, joins: 0/2}
Foreign.Marshal.Utils.with1
  :: forall a b.
     Storable a =>
     a
     -> (Ptr a -> IO b) -> State# RealWorld -> (# State# RealWorld, b #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))C(S(S))LLLLLC(C(C(S(SL))))),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,1*C1(C1(C1(U(U,A)))))><L,U><L,1*C1(C1(U(U,U)))><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [90 0 60 0] 206 30}]
Foreign.Marshal.Utils.with1
  = \ (@ a_a8O3A)
      (@ b_a8O3B)
      ($dStorable_a8O3D :: Storable a_a8O3A)
      (val_a8NXe :: a_a8O3A)
      (f_a8NXf :: Ptr a_a8O3A -> IO b_a8O3B)
      (eta_B1 :: State# RealWorld) ->
      case Foreign.Storable.sizeOf
             @ a_a8O3A $dStorable_a8O3D (Foreign.Marshal.Utils.with3 @ a_a8O3A)
      of
      { I# size_a8MBq ->
      case Foreign.Storable.alignment
             @ a_a8O3A $dStorable_a8O3D (Foreign.Marshal.Utils.with2 @ a_a8O3A)
      of
      { I# align_a8MBr ->
      case newAlignedPinnedByteArray#
             @ RealWorld size_a8MBq align_a8MBr eta_B1
      of
      { (# ipv_s8ML2, ipv1_s8ML3 #) ->
      case unsafeFreezeByteArray# @ RealWorld ipv1_s8ML3 ipv_s8ML2 of
      { (# ipv2_s8ML6, ipv3_s8ML7 #) ->
      let {
        ptr_s8O8R :: Addr#
        [LclId]
        ptr_s8O8R = byteArrayContents# ipv3_s8ML7 } in
      let {
        ptr1_s8O8Q :: Ptr a_a8O3A
        [LclId, Unf=OtherCon []]
        ptr1_s8O8Q = GHC.Ptr.Ptr @ a_a8O3A ptr_s8O8R } in
      case ((poke @ a_a8O3A $dStorable_a8O3D ptr1_s8O8Q val_a8NXe)
            `cast` (GHC.Types.N:IO[0] <()>_R
                    :: (IO () :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
             ipv2_s8ML6
      of
      { (# ipv4_i7JiK, ipv5_i7JiL #) ->
      case ((f_a8NXf ptr1_s8O8Q)
            `cast` (GHC.Types.N:IO[0] <b_a8O3B>_R
                    :: (IO b_a8O3B :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, b_a8O3B #) :: *)))
             ipv4_i7JiK
      of
      { (# ipv6_s8MLa, ipv7_s8MLb #) ->
      case touch# @ 'UnliftedRep @ ByteArray# ipv3_s8ML7 ipv6_s8MLa
      of s4_a8MBC
      { __DEFAULT ->
      (# s4_a8MBC, ipv7_s8MLb #)
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 19, joins: 0/0}
with :: forall a b. Storable a => a -> (Ptr a -> IO b) -> IO b
[GblId,
 Arity=4,
 Str=<S(C(S(S))C(S(S))LLLLLC(C(C(S(SL))))),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,1*C1(C1(C1(U(U,A)))))><L,U><L,1*C1(C1(U(U,U)))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.Marshal.Utils.with1
               `cast` (forall (a :: <*>_N) (b :: <*>_N).
                       <Storable a>_R
                       ->_R <a>_R
                       ->_R <Ptr a -> IO b>_R
                       ->_R Sym (GHC.Types.N:IO[0] <b>_R)
                       :: (forall a b.
                           Storable a =>
                           a
                           -> (Ptr a -> IO b)
                           -> State# RealWorld
                           -> (# State# RealWorld, b #) :: *)
                          ~R# (forall a b.
                               Storable a =>
                               a -> (Ptr a -> IO b) -> IO b :: *))}]
with
  = Foreign.Marshal.Utils.with1
    `cast` (forall (a :: <*>_N) (b :: <*>_N).
            <Storable a>_R
            ->_R <a>_R
            ->_R <Ptr a -> IO b>_R
            ->_R Sym (GHC.Types.N:IO[0] <b>_R)
            :: (forall a b.
                Storable a =>
                a
                -> (Ptr a -> IO b)
                -> State# RealWorld
                -> (# State# RealWorld, b #) :: *)
               ~R# (forall a b. Storable a => a -> (Ptr a -> IO b) -> IO b :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Foreign.Marshal.Utils.fromBool2 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Foreign.Marshal.Utils.fromBool2 = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Foreign.Marshal.Utils.fromBool1 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Foreign.Marshal.Utils.fromBool1 = 1

-- RHS size: {terms: 13, types: 8, coercions: 0, joins: 0/0}
fromBool :: forall a. Num a => Bool -> a
[GblId,
 Arity=2,
 Str=<S(LLLLLLC(S)),1*U(A,A,A,A,A,A,1*C1(U))><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a8O3s)
                 ($dNum_a8O3u [Occ=Once*] :: Num a_a8O3s)
                 (ds_d8O51 [Occ=Once!] :: Bool) ->
                 case ds_d8O51 of {
                   False ->
                     fromInteger @ a_a8O3s $dNum_a8O3u Foreign.Marshal.Utils.fromBool2;
                   True ->
                     fromInteger @ a_a8O3s $dNum_a8O3u Foreign.Marshal.Utils.fromBool1
                 }}]
fromBool
  = \ (@ a_a8O3s) ($dNum_a8O3u :: Num a_a8O3s) (ds_d8O51 :: Bool) ->
      case ds_d8O51 of {
        False ->
          fromInteger @ a_a8O3s $dNum_a8O3u Foreign.Marshal.Utils.fromBool2;
        True ->
          fromInteger @ a_a8O3s $dNum_a8O3u Foreign.Marshal.Utils.fromBool1
      }

-- RHS size: {terms: 12, types: 10, coercions: 0, joins: 0/1}
toBool :: forall a. (Eq a, Num a) => a -> Bool
[GblId,
 Arity=2,
 Str=<L,U(A,C(C1(U)))><L,1*U(A,A,A,A,A,A,1*C1(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a8O3j)
                 ($dEq_a8O3l [Occ=OnceL] :: Eq a_a8O3j)
                 ($dNum_a8O3m [Occ=Once] :: Num a_a8O3j) ->
                 let {
                   ds_s8O8N [Occ=OnceL] :: a_a8O3j
                   [LclId]
                   ds_s8O8N
                     = fromInteger
                         @ a_a8O3j $dNum_a8O3m Foreign.Marshal.Utils.fromBool2 } in
                 \ (ds1_d8O4Y [Occ=Once] :: a_a8O3j) ->
                   /= @ a_a8O3j $dEq_a8O3l ds1_d8O4Y ds_s8O8N}]
toBool
  = \ (@ a_a8O3j)
      ($dEq_a8O3l :: Eq a_a8O3j)
      ($dNum_a8O3m :: Num a_a8O3j) ->
      let {
        ds_s8O8N :: a_a8O3j
        [LclId]
        ds_s8O8N
          = fromInteger
              @ a_a8O3j $dNum_a8O3m Foreign.Marshal.Utils.fromBool2 } in
      \ (ds1_d8O4Y :: a_a8O3j) ->
        /= @ a_a8O3j $dEq_a8O3l ds1_d8O4Y ds_s8O8N

-- RHS size: {terms: 15, types: 24, coercions: 3, joins: 0/0}
Foreign.Marshal.Utils.maybeNew1
  :: forall a b.
     (a -> IO (Ptr b))
     -> Maybe a -> State# RealWorld -> (# State# RealWorld, Ptr b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U(U,U)))><S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a8O39)
                 (@ b_a8O3a)
                 (ds_X8O5k [Occ=Once!] :: a_a8O39 -> IO (Ptr b_a8O3a))
                 (ds1_X8O5m [Occ=Once!] :: Maybe a_a8O39)
                 (eta_B1 [Occ=Once*] :: State# RealWorld) ->
                 case ds1_X8O5m of {
                   Nothing -> (# eta_B1, nullPtr @ b_a8O3a #);
                   Just x_i8O4S [Occ=Once] ->
                     ((ds_X8O5k x_i8O4S)
                      `cast` (GHC.Types.N:IO[0] <Ptr b_a8O3a>_R
                              :: (IO (Ptr b_a8O3a) :: *)
                                 ~R# (State# RealWorld
                                      -> (# State# RealWorld, Ptr b_a8O3a #) :: *)))
                       eta_B1
                 }}]
Foreign.Marshal.Utils.maybeNew1
  = \ (@ a_a8O39)
      (@ b_a8O3a)
      (ds_X8O5k :: a_a8O39 -> IO (Ptr b_a8O3a))
      (ds1_X8O5m :: Maybe a_a8O39)
      (eta_B1 :: State# RealWorld) ->
      case ds1_X8O5m of {
        Nothing -> (# eta_B1, nullPtr @ b_a8O3a #);
        Just x_i8O4S ->
          ((ds_X8O5k x_i8O4S)
           `cast` (GHC.Types.N:IO[0] <Ptr b_a8O3a>_R
                   :: (IO (Ptr b_a8O3a) :: *)
                      ~R# (State# RealWorld
                           -> (# State# RealWorld, Ptr b_a8O3a #) :: *)))
            eta_B1
      }

-- RHS size: {terms: 1, types: 0, coercions: 18, joins: 0/0}
maybeNew :: forall a b. (a -> IO (Ptr b)) -> Maybe a -> IO (Ptr b)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U(U,U)))><S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.Marshal.Utils.maybeNew1
               `cast` (forall (a :: <*>_N) (b :: <*>_N).
                       <a -> IO (Ptr b)>_R
                       ->_R <Maybe a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Ptr b>_R)
                       :: (forall a b.
                           (a -> IO (Ptr b))
                           -> Maybe a
                           -> State# RealWorld
                           -> (# State# RealWorld, Ptr b #) :: *)
                          ~R# (forall a b.
                               (a -> IO (Ptr b)) -> Maybe a -> IO (Ptr b) :: *))}]
maybeNew
  = Foreign.Marshal.Utils.maybeNew1
    `cast` (forall (a :: <*>_N) (b :: <*>_N).
            <a -> IO (Ptr b)>_R
            ->_R <Maybe a>_R
            ->_R Sym (GHC.Types.N:IO[0] <Ptr b>_R)
            :: (forall a b.
                (a -> IO (Ptr b))
                -> Maybe a
                -> State# RealWorld
                -> (# State# RealWorld, Ptr b #) :: *)
               ~R# (forall a b. (a -> IO (Ptr b)) -> Maybe a -> IO (Ptr b) :: *))

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
Foreign.Marshal.Utils.maybeWith_n
  :: forall b c. (Ptr b -> IO c) -> IO c
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ b_a8O2X)
                 (@ c_a8O2Y)
                 (ds_d8O4U [Occ=Once!] :: Ptr b_a8O2X -> IO c_a8O2Y) ->
                 ds_d8O4U (nullPtr @ b_a8O2X)}]
Foreign.Marshal.Utils.maybeWith_n
  = \ (@ b_a8O2X)
      (@ c_a8O2Y)
      (ds_d8O4U :: Ptr b_a8O2X -> IO c_a8O2Y) ->
      ds_d8O4U (nullPtr @ b_a8O2X)

-- RHS size: {terms: 12, types: 20, coercions: 0, joins: 0/0}
maybeWith
  :: forall a b c.
     (a -> (Ptr b -> IO c) -> IO c)
     -> Maybe a -> (Ptr b -> IO c) -> IO c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a8O2W)
                 (@ b_a8O2X)
                 (@ c_a8O2Y)
                 (ds_X8O65 [Occ=Once!]
                    :: a_a8O2W -> (Ptr b_a8O2X -> IO c_a8O2Y) -> IO c_a8O2Y)
                 (ds1_X8O5o [Occ=Once!] :: Maybe a_a8O2W) ->
                 case ds1_X8O5o of {
                   Nothing -> Foreign.Marshal.Utils.maybeWith_n @ b_a8O2X @ c_a8O2Y;
                   Just x_i8O4S [Occ=Once] -> ds_X8O65 x_i8O4S
                 }}]
maybeWith
  = \ (@ a_a8O2W)
      (@ b_a8O2X)
      (@ c_a8O2Y)
      (ds_X8O65 :: a_a8O2W -> (Ptr b_a8O2X -> IO c_a8O2Y) -> IO c_a8O2Y)
      (ds1_X8O5o :: Maybe a_a8O2W) ->
      case ds1_X8O5o of {
        Nothing -> Foreign.Marshal.Utils.maybeWith_n @ b_a8O2X @ c_a8O2Y;
        Just x_i8O4S -> ds_X8O65 x_i8O4S
      }

-- RHS size: {terms: 26, types: 45, coercions: 2, joins: 0/0}
Foreign.Marshal.Utils.maybePeek1
  :: forall a b.
     (Ptr a -> IO b)
     -> Ptr a -> State# RealWorld -> (# State# RealWorld, Maybe b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U(U,U)))><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a8O2D)
                 (@ b_a8O2E)
                 (peek_a8NXi [Occ=Once!] :: Ptr a_a8O2D -> IO b_a8O2E)
                 (ptr_a8NXj [Occ=Once!] :: Ptr a_a8O2D)
                 (eta_B1 [Occ=Once*] :: State# RealWorld) ->
                 case ptr_a8NXj of wild_i7JfF { GHC.Ptr.Ptr a1_i7JfH [Occ=Once] ->
                 case eqAddr# a1_i7JfH __NULL of {
                   __DEFAULT ->
                     case ((peek_a8NXi wild_i7JfF)
                           `cast` (GHC.Types.N:IO[0] <b_a8O2E>_R
                                   :: (IO b_a8O2E :: *)
                                      ~R# (State# RealWorld
                                           -> (# State# RealWorld, b_a8O2E #) :: *)))
                            eta_B1
                     of
                     { (# ipv_i7IAy [Occ=Once], ipv1_i7IAz [Occ=Once] #) ->
                     (# ipv_i7IAy, GHC.Base.Just @ b_a8O2E ipv1_i7IAz #)
                     };
                   1# -> (# eta_B1, GHC.Base.Nothing @ b_a8O2E #)
                 }
                 }}]
Foreign.Marshal.Utils.maybePeek1
  = \ (@ a_a8O2D)
      (@ b_a8O2E)
      (peek_a8NXi :: Ptr a_a8O2D -> IO b_a8O2E)
      (ptr_a8NXj :: Ptr a_a8O2D)
      (eta_B1 :: State# RealWorld) ->
      case ptr_a8NXj of wild_i7JfF { GHC.Ptr.Ptr a1_i7JfH ->
      case eqAddr# a1_i7JfH __NULL of {
        __DEFAULT ->
          case ((peek_a8NXi wild_i7JfF)
                `cast` (GHC.Types.N:IO[0] <b_a8O2E>_R
                        :: (IO b_a8O2E :: *)
                           ~R# (State# RealWorld -> (# State# RealWorld, b_a8O2E #) :: *)))
                 eta_B1
          of
          { (# ipv_i7IAy, ipv1_i7IAz #) ->
          (# ipv_i7IAy, GHC.Base.Just @ b_a8O2E ipv1_i7IAz #)
          };
        1# -> (# eta_B1, GHC.Base.Nothing @ b_a8O2E #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 18, joins: 0/0}
maybePeek :: forall a b. (Ptr a -> IO b) -> Ptr a -> IO (Maybe b)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U(U,U)))><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.Marshal.Utils.maybePeek1
               `cast` (forall (a :: <*>_N) (b :: <*>_N).
                       <Ptr a -> IO b>_R
                       ->_R <Ptr a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Maybe b>_R)
                       :: (forall a b.
                           (Ptr a -> IO b)
                           -> Ptr a
                           -> State# RealWorld
                           -> (# State# RealWorld, Maybe b #) :: *)
                          ~R# (forall a b. (Ptr a -> IO b) -> Ptr a -> IO (Maybe b) :: *))}]
maybePeek
  = Foreign.Marshal.Utils.maybePeek1
    `cast` (forall (a :: <*>_N) (b :: <*>_N).
            <Ptr a -> IO b>_R
            ->_R <Ptr a>_R
            ->_R Sym (GHC.Types.N:IO[0] <Maybe b>_R)
            :: (forall a b.
                (Ptr a -> IO b)
                -> Ptr a
                -> State# RealWorld
                -> (# State# RealWorld, Maybe b #) :: *)
               ~R# (forall a b. (Ptr a -> IO b) -> Ptr a -> IO (Maybe b) :: *))

Rec {
-- RHS size: {terms: 23, types: 28, coercions: 0, joins: 0/0}
withMany [Occ=LoopBreaker]
  :: forall a b res.
     (a -> (b -> res) -> res) -> [a] -> ([b] -> res) -> res
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U><L,C(U)>,
 Unf=OtherCon []]
withMany
  = \ (@ a_a8O2t)
      (@ b_a8O2u)
      (@ res_a8O2v)
      (ds_d8O4v :: a_a8O2t -> (b_a8O2u -> res_a8O2v) -> res_a8O2v)
      (ds1_d8O4w :: [a_a8O2t])
      (f_a8NXl :: [b_a8O2u] -> res_a8O2v) ->
      case ds1_d8O4w of {
        [] -> f_a8NXl (GHC.Types.[] @ b_a8O2u);
        : x_a8NXn xs_a8NXo ->
          ds_d8O4v
            x_a8NXn
            (\ (x'_a8NXq :: b_a8O2u) ->
               withMany
                 @ a_a8O2t
                 @ b_a8O2u
                 @ res_a8O2v
                 ds_d8O4v
                 xs_a8NXo
                 (\ (xs'_a8NXr :: [b_a8O2u]) ->
                    f_a8NXl (GHC.Types.: @ b_a8O2u x'_a8NXq xs'_a8NXr)))
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.Marshal.Utils.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.Marshal.Utils.$trModule3
  = GHC.Types.TrNameS Foreign.Marshal.Utils.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Foreign.Marshal.Utils.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
Foreign.Marshal.Utils.$trModule2 = "Foreign.Marshal.Utils"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.Marshal.Utils.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.Marshal.Utils.$trModule1
  = GHC.Types.TrNameS Foreign.Marshal.Utils.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Foreign.Marshal.Utils.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Foreign.Marshal.Utils.$trModule
  = GHC.Types.Module
      Foreign.Marshal.Utils.$trModule3 Foreign.Marshal.Utils.$trModule1

-- RHS size: {terms: 25, types: 35, coercions: 0, joins: 0/0}
Foreign.Marshal.Utils.copyBytes1
  :: forall a.
     Ptr a
     -> Ptr a -> Int -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a8O2e)
                 (dest_a8NXs [Occ=Once!] :: Ptr a_a8O2e)
                 (src_a8NXt [Occ=Once!] :: Ptr a_a8O2e)
                 (size_a8NXu [Occ=Once!] :: Int)
                 (s_i7IAv [Occ=Once] :: State# RealWorld) ->
                 case dest_a8NXs of { GHC.Ptr.Ptr ds1_d8O5G [Occ=Once] ->
                 case src_a8NXt of { GHC.Ptr.Ptr ds3_d8O5I [Occ=Once] ->
                 case size_a8NXu of { I# x#_i7NZc [Occ=Once] ->
                 case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Addr#
                           -> Word#
                           -> State# RealWorld
                           -> (# State# RealWorld, Addr# #)}_d8O5O
                        ds1_d8O5G ds3_d8O5I (int2Word# x#_i7NZc) s_i7IAv
                 of
                 { (# ds4_d8O5M [Occ=Once], _ [Occ=Dead] #) ->
                 (# ds4_d8O5M, GHC.Tuple.() #)
                 }
                 }
                 }
                 }}]
Foreign.Marshal.Utils.copyBytes1
  = \ (@ a_a8O2e)
      (dest_a8NXs :: Ptr a_a8O2e)
      (src_a8NXt :: Ptr a_a8O2e)
      (size_a8NXu :: Int)
      (s_i7IAv :: State# RealWorld) ->
      case dest_a8NXs of { GHC.Ptr.Ptr ds1_d8O5G ->
      case src_a8NXt of { GHC.Ptr.Ptr ds3_d8O5I ->
      case size_a8NXu of { I# x#_i7NZc ->
      case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Addr#
                           -> Word#
                           -> State# RealWorld
                           -> (# State# RealWorld, Addr# #)}_d8O5O
             ds1_d8O5G ds3_d8O5I (int2Word# x#_i7NZc) s_i7IAv
      of
      { (# ds4_d8O5M, ds5_d8O5L #) ->
      (# ds4_d8O5M, GHC.Tuple.() #)
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
copyBytes :: forall a. Ptr a -> Ptr a -> Int -> IO ()
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.Marshal.Utils.copyBytes1
               `cast` (forall (a :: <*>_N).
                       <Ptr a>_R
                       ->_R <Ptr a>_R
                       ->_R <Int>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           Ptr a
                           -> Ptr a
                           -> Int
                           -> State# RealWorld
                           -> (# State# RealWorld, () #) :: *)
                          ~R# (forall a. Ptr a -> Ptr a -> Int -> IO () :: *))}]
copyBytes
  = Foreign.Marshal.Utils.copyBytes1
    `cast` (forall (a :: <*>_N).
            <Ptr a>_R
            ->_R <Ptr a>_R
            ->_R <Int>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                Ptr a
                -> Ptr a
                -> Int
                -> State# RealWorld
                -> (# State# RealWorld, () #) :: *)
               ~R# (forall a. Ptr a -> Ptr a -> Int -> IO () :: *))

-- RHS size: {terms: 25, types: 35, coercions: 0, joins: 0/0}
Foreign.Marshal.Utils.moveBytes1
  :: forall a.
     Ptr a
     -> Ptr a -> Int -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a8O1Z)
                 (dest_a8NXv [Occ=Once!] :: Ptr a_a8O1Z)
                 (src_a8NXw [Occ=Once!] :: Ptr a_a8O1Z)
                 (size_a8NXx [Occ=Once!] :: Int)
                 (s_i7IAv [Occ=Once] :: State# RealWorld) ->
                 case dest_a8NXv of { GHC.Ptr.Ptr ds1_d8O5s [Occ=Once] ->
                 case src_a8NXw of { GHC.Ptr.Ptr ds3_d8O5u [Occ=Once] ->
                 case size_a8NXx of { I# x#_i7NZc [Occ=Once] ->
                 case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Addr#
                           -> Word#
                           -> State# RealWorld
                           -> (# State# RealWorld, Addr# #)}_d8O5A
                        ds1_d8O5s ds3_d8O5u (int2Word# x#_i7NZc) s_i7IAv
                 of
                 { (# ds4_d8O5y [Occ=Once], _ [Occ=Dead] #) ->
                 (# ds4_d8O5y, GHC.Tuple.() #)
                 }
                 }
                 }
                 }}]
Foreign.Marshal.Utils.moveBytes1
  = \ (@ a_a8O1Z)
      (dest_a8NXv :: Ptr a_a8O1Z)
      (src_a8NXw :: Ptr a_a8O1Z)
      (size_a8NXx :: Int)
      (s_i7IAv :: State# RealWorld) ->
      case dest_a8NXv of { GHC.Ptr.Ptr ds1_d8O5s ->
      case src_a8NXw of { GHC.Ptr.Ptr ds3_d8O5u ->
      case size_a8NXx of { I# x#_i7NZc ->
      case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Addr#
                           -> Word#
                           -> State# RealWorld
                           -> (# State# RealWorld, Addr# #)}_d8O5A
             ds1_d8O5s ds3_d8O5u (int2Word# x#_i7NZc) s_i7IAv
      of
      { (# ds4_d8O5y, ds5_d8O5x #) ->
      (# ds4_d8O5y, GHC.Tuple.() #)
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
moveBytes :: forall a. Ptr a -> Ptr a -> Int -> IO ()
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.Marshal.Utils.moveBytes1
               `cast` (forall (a :: <*>_N).
                       <Ptr a>_R
                       ->_R <Ptr a>_R
                       ->_R <Int>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           Ptr a
                           -> Ptr a
                           -> Int
                           -> State# RealWorld
                           -> (# State# RealWorld, () #) :: *)
                          ~R# (forall a. Ptr a -> Ptr a -> Int -> IO () :: *))}]
moveBytes
  = Foreign.Marshal.Utils.moveBytes1
    `cast` (forall (a :: <*>_N).
            <Ptr a>_R
            ->_R <Ptr a>_R
            ->_R <Int>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                Ptr a
                -> Ptr a
                -> Int
                -> State# RealWorld
                -> (# State# RealWorld, () #) :: *)
               ~R# (forall a. Ptr a -> Ptr a -> Int -> IO () :: *))

-- RHS size: {terms: 26, types: 33, coercions: 0, joins: 0/0}
Foreign.Marshal.Utils.fillBytes1
  :: forall a.
     Ptr a
     -> Word8 -> Int -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a8O1G)
                 (dest_a8NXy [Occ=Once!] :: Ptr a_a8O1G)
                 (char_a8NXz [Occ=Once!] :: Word8)
                 (size_a8NXA [Occ=Once!] :: Int)
                 (s_i7IAv [Occ=Once] :: State# RealWorld) ->
                 case dest_a8NXy of { GHC.Ptr.Ptr ds1_d8O5e [Occ=Once] ->
                 case char_a8NXz of { GHC.Word.W8# x#_i7NZV [Occ=Once] ->
                 case size_a8NXA of { I# x#1_i7NZc [Occ=Once] ->
                 case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Int#
                           -> Word#
                           -> State# RealWorld
                           -> (# State# RealWorld, Addr# #)}_d8O5m
                        ds1_d8O5e (word2Int# x#_i7NZV) (int2Word# x#1_i7NZc) s_i7IAv
                 of
                 { (# ds2_d8O5k [Occ=Once], _ [Occ=Dead] #) ->
                 (# ds2_d8O5k, GHC.Tuple.() #)
                 }
                 }
                 }
                 }}]
Foreign.Marshal.Utils.fillBytes1
  = \ (@ a_a8O1G)
      (dest_a8NXy :: Ptr a_a8O1G)
      (char_a8NXz :: Word8)
      (size_a8NXA :: Int)
      (s_i7IAv :: State# RealWorld) ->
      case dest_a8NXy of { GHC.Ptr.Ptr ds1_d8O5e ->
      case char_a8NXz of { GHC.Word.W8# x#_i7NZV ->
      case size_a8NXA of { I# x#1_i7NZc ->
      case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Int#
                           -> Word#
                           -> State# RealWorld
                           -> (# State# RealWorld, Addr# #)}_d8O5m
             ds1_d8O5e (word2Int# x#_i7NZV) (int2Word# x#1_i7NZc) s_i7IAv
      of
      { (# ds2_d8O5k, ds3_d8O5j #) ->
      (# ds2_d8O5k, GHC.Tuple.() #)
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
fillBytes :: forall a. Ptr a -> Word8 -> Int -> IO ()
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.Marshal.Utils.fillBytes1
               `cast` (forall (a :: <*>_N).
                       <Ptr a>_R
                       ->_R <Word8>_R
                       ->_R <Int>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           Ptr a
                           -> Word8
                           -> Int
                           -> State# RealWorld
                           -> (# State# RealWorld, () #) :: *)
                          ~R# (forall a. Ptr a -> Word8 -> Int -> IO () :: *))}]
fillBytes
  = Foreign.Marshal.Utils.fillBytes1
    `cast` (forall (a :: <*>_N).
            <Ptr a>_R
            ->_R <Word8>_R
            ->_R <Int>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                Ptr a
                -> Word8
                -> Int
                -> State# RealWorld
                -> (# State# RealWorld, () #) :: *)
               ~R# (forall a. Ptr a -> Word8 -> Int -> IO () :: *))


