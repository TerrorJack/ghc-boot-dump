
==================== Pre unarise: ====================
2018-03-16 16:04:14.786635883 UTC

Foreign.Marshal.Pool.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Foreign.Marshal.Pool.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Marshal.Pool.$trModule4];

Foreign.Marshal.Pool.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Foreign.Marshal.Pool"#;

Foreign.Marshal.Pool.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Marshal.Pool.$trModule2];

Foreign.Marshal.Pool.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Foreign.Marshal.Pool.$trModule3
                                     Foreign.Marshal.Pool.$trModule1];

$krep_r95mW :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep1_r95mX :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r95mW GHC.Types.[]];

$krep2_r95mY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Ptr.$tcPtr
                                              $krep1_r95mX];

$krep3_r95mZ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r95mY GHC.Types.[]];

$krep4_r95n0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep3_r95mZ];

$krep5_r95n1 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep4_r95n0 GHC.Types.[]];

$krep6_r95n2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep5_r95n1];

Foreign.Marshal.Pool.$tcPool2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pool"#;

Foreign.Marshal.Pool.$tcPool1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Marshal.Pool.$tcPool2];

Foreign.Marshal.Pool.$tcPool :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6812857741828992361##
                                    12127662557529231519##
                                    Foreign.Marshal.Pool.$trModule
                                    Foreign.Marshal.Pool.$tcPool1
                                    0#
                                    GHC.Types.krep$*];

$krep7_r95n3 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.Marshal.Pool.$tcPool
                                              GHC.Types.[]];

Foreign.Marshal.Pool.$tc'Pool1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_r95n2 $krep7_r95n3];

Foreign.Marshal.Pool.$tc'Pool3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Pool"#;

Foreign.Marshal.Pool.$tc'Pool2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Marshal.Pool.$tc'Pool3];

Foreign.Marshal.Pool.$tc'Pool :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11588816997626637361##
                                    15405086111208545194##
                                    Foreign.Marshal.Pool.$trModule
                                    Foreign.Marshal.Pool.$tc'Pool2
                                    0#
                                    Foreign.Marshal.Pool.$tc'Pool1];

lvl_r95n4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "pointer not in pool"#;

Foreign.Marshal.Pool.pooledRealloc2
  :: [GHC.Ptr.Ptr ()] -> [GHC.Types.Char]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s95nw] GHC.CString.unpackCString# lvl_r95n4;

Foreign.Marshal.Pool.$wpooledReallocBytes [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.MutVar# GHC.Prim.RealWorld [GHC.Ptr.Ptr ()]
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId, Arity=4, Str=<S,U><S,U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s95nx ww1_s95ny ww2_s95nz w_s95nA]
        case readMutVar# [ww_s95nx w_s95nA] of {
          (#,#) ipv_s95nC [Occ=Once*] ipv1_s95nD ->
              let {
                sat_s95nE [Occ=Once] :: GHC.Ptr.Ptr ()
                [LclId] =
                    CCCS GHC.Ptr.Ptr! [ww1_s95ny];
              } in 
                case GHC.List.elem GHC.Ptr.$fEqPtr sat_s95nE ipv1_s95nD of {
                  GHC.Types.False ->
                      Foreign.Marshal.Error.throwIf2
                          ipv1_s95nD Foreign.Marshal.Pool.pooledRealloc2 ipv_s95nC;
                  GHC.Types.True ->
                      case ww2_s95nz of ds_s95nH {
                        __DEFAULT ->
                            case int2Word# [ds_s95nH] of sat_s95nJ {
                              __DEFAULT ->
                                  case
                                      __pkg_ccall base-4.11.0.0 [ww1_s95ny sat_s95nJ ipv_s95nC]
                                  of
                                  { (#,#) ds2_s95nL [Occ=Once*] ds3_s95nM ->
                                        case eqAddr# [ds3_s95nM __NULL] of {
                                          __DEFAULT ->
                                              case readMutVar# [ww_s95nx ds2_s95nL] of {
                                                (#,#) ipv2_s95nP [Occ=Once] ipv3_s95nQ [Occ=Once] ->
                                                    let {
                                                      ipv4_s95nR :: GHC.Ptr.Ptr ()
                                                      [LclId, Unf=OtherCon []] =
                                                          CCCS GHC.Ptr.Ptr! [ds3_s95nM]; } in
                                                    let {
                                                      sat_s95nT [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                      [LclId] =
                                                          [ww1_s95ny ipv3_s95nQ] \u []
                                                              let {
                                                                sat_s95nS [Occ=Once]
                                                                  :: GHC.Ptr.Ptr ()
                                                                [LclId] =
                                                                    CCCS GHC.Ptr.Ptr! [ww1_s95ny];
                                                              } in 
                                                                Data.OldList.deleteBy
                                                                    GHC.Ptr.$fEqPtr_$c==
                                                                    sat_s95nS
                                                                    ipv3_s95nQ; } in
                                                    let {
                                                      sat_s95nU [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                      [LclId] =
                                                          CCCS :! [ipv4_s95nR sat_s95nT];
                                                    } in 
                                                      case
                                                          writeMutVar# [ww_s95nx
                                                                        sat_s95nU
                                                                        ipv2_s95nP]
                                                      of
                                                      s2#_s95nV
                                                      { __DEFAULT -> (#,#) [s2#_s95nV ipv4_s95nR];
                                                      };
                                              };
                                          1# -> raiseIO# [Foreign.Marshal.Alloc.realloc2 ds2_s95nL];
                                        };
                                  };
                            };
                        0# ->
                            case __pkg_ccall base-4.11.0.0 [ww1_s95ny ipv_s95nC] of {
                              Unit# ds2_s95nZ [Occ=Once] ->
                                  case readMutVar# [ww_s95nx ds2_s95nZ] of {
                                    (#,#) ipv2_s95o1 [Occ=Once] ipv3_s95o2 [Occ=Once] ->
                                        let {
                                          sat_s95o4 [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                          [LclId] =
                                              [ww1_s95ny ipv3_s95o2] \u []
                                                  let {
                                                    sat_s95o3 [Occ=Once] :: GHC.Ptr.Ptr ()
                                                    [LclId] =
                                                        CCCS GHC.Ptr.Ptr! [ww1_s95ny];
                                                  } in 
                                                    Data.OldList.deleteBy
                                                        GHC.Ptr.$fEqPtr_$c==
                                                        sat_s95o3
                                                        ipv3_s95o2; } in
                                        let {
                                          sat_s95o5 [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                          [LclId] =
                                              CCCS :! [GHC.Ptr.nullPtr sat_s95o4];
                                        } in 
                                          case
                                              writeMutVar# [ww_s95nx sat_s95o5 ipv2_s95o1]
                                          of
                                          s2#_s95o6
                                          { __DEFAULT -> (#,#) [s2#_s95o6 GHC.Ptr.nullPtr];
                                          };
                                  };
                            };
                      };
                };
        };

Foreign.Marshal.Pool.pooledRealloc1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s95o7 w1_s95o8 w2_s95o9 w3_s95oa]
        case w_s95o7 of {
          GHC.STRef.STRef ww1_s95oc [Occ=Once] ->
              case w1_s95o8 of {
                GHC.Ptr.Ptr ww3_s95oe [Occ=Once] ->
                    case w2_s95o9 of {
                      GHC.Types.I# ww5_s95og [Occ=Once] ->
                          Foreign.Marshal.Pool.$wpooledReallocBytes
                              ww1_s95oc ww3_s95oe ww5_s95og w3_s95oa;
                    };
              };
        };

Foreign.Marshal.Pool.pooledReallocBytes
  :: forall a.
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=4,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Foreign.Marshal.Pool.pooledRealloc1 eta_B4 eta_B3 eta_B2 eta_B1;

lvl1_r95n5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "undefined"#;

lvl2_r95n6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl1_r95n5;

lvl3_r95n7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# Foreign.Marshal.Pool.$trModule4;

lvl4_r95n8 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# Foreign.Marshal.Pool.$trModule2;

lvl5_r95n9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./Foreign/Marshal/Pool.hs"#;

lvl6_r95na :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_r95n9;

lvl7_r95nb :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [159#];

lvl8_r95nc :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [26#];

lvl9_r95nd :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [35#];

lvl10_r95ne :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_r95n7
                                           lvl4_r95n8
                                           lvl6_r95na
                                           lvl7_r95nb
                                           lvl8_r95nc
                                           lvl7_r95nb
                                           lvl9_r95nd];

lvl11_r95nf :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_r95n6
                                                  lvl10_r95ne
                                                  GHC.Stack.Types.EmptyCallStack];

Foreign.Marshal.Pool.pooledReallocArray1 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl11_r95nf;

Foreign.Marshal.Pool.pooledReallocArray
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s95oh]
        let {
          lvl27_s95oi [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [$dStorable_s95oh] \u []
                  Foreign.Storable.sizeOf
                      $dStorable_s95oh Foreign.Marshal.Pool.pooledReallocArray1; } in
        let {
          sat_s95ow [Occ=Once]
            :: Foreign.Marshal.Pool.Pool
               -> GHC.Ptr.Ptr a_a94L7
               -> GHC.Types.Int
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a_a94L7 #)
          [LclId] =
              [lvl27_s95oi] \r [pool_s95oj ptr_s95ok size_s95ol eta_s95om]
                  case pool_s95oj of {
                    GHC.STRef.STRef ww1_s95oo [Occ=Once] ->
                        case ptr_s95ok of {
                          GHC.Ptr.Ptr ww3_s95oq [Occ=Once] ->
                              case size_s95ol of {
                                GHC.Types.I# x_s95os [Occ=Once] ->
                                    case lvl27_s95oi of {
                                      GHC.Types.I# y_s95ou [Occ=Once] ->
                                          case *# [x_s95os y_s95ou] of sat_s95ov {
                                            __DEFAULT ->
                                                Foreign.Marshal.Pool.$wpooledReallocBytes
                                                    ww1_s95oo ww3_s95oq sat_s95ov eta_s95om;
                                          };
                                    };
                              };
                        };
                  };
        } in  sat_s95ow;

Foreign.Marshal.Pool.pooledReallocArray2
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=5,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s95ox pool_s95oy ptr_s95oz size_s95oA eta_s95oB]
        case pool_s95oy of {
          GHC.STRef.STRef ww1_s95oD [Occ=Once] ->
              case ptr_s95oz of {
                GHC.Ptr.Ptr ww3_s95oF [Occ=Once] ->
                    case size_s95oA of {
                      GHC.Types.I# x_s95oH [Occ=Once] ->
                          case
                              Foreign.Storable.sizeOf
                                  $dStorable_s95ox Foreign.Marshal.Pool.pooledReallocArray1
                          of
                          { GHC.Types.I# y_s95oJ [Occ=Once] ->
                                case +# [x_s95oH 1#] of sat_s95oK {
                                  __DEFAULT ->
                                      case *# [sat_s95oK y_s95oJ] of sat_s95oL {
                                        __DEFAULT ->
                                            Foreign.Marshal.Pool.$wpooledReallocBytes
                                                ww1_s95oD ww3_s95oF sat_s95oL eta_s95oB;
                                      };
                                };
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledReallocArray0
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=5,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Foreign.Marshal.Pool.pooledReallocArray2
            eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

lvl12_r95ng :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [124#];

lvl13_r95nh :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [20#];

lvl14_r95ni :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [29#];

lvl15_r95nj :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_r95n7
                                           lvl4_r95n8
                                           lvl6_r95na
                                           lvl12_r95ng
                                           lvl13_r95nh
                                           lvl12_r95ng
                                           lvl14_r95ni];

lvl16_r95nk :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_r95n6
                                                  lvl15_r95nj
                                                  GHC.Stack.Types.EmptyCallStack];

Foreign.Marshal.Pool.pooledRealloc3 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl16_r95nk;

Foreign.Marshal.Pool.pooledRealloc
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s95oM]
        let {
          lvl27_s95oN [Occ=OnceL, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [$dStorable_s95oM] \u []
                  Foreign.Storable.sizeOf
                      $dStorable_s95oM Foreign.Marshal.Pool.pooledRealloc3; } in
        let {
          sat_s95oR [Occ=Once]
            :: Foreign.Marshal.Pool.Pool
               -> GHC.Ptr.Ptr a_a94LU
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a_a94LU #)
          [LclId] =
              [lvl27_s95oN] \r [pool_s95oO ptr_s95oP eta_s95oQ]
                  Foreign.Marshal.Pool.pooledRealloc1
                      pool_s95oO ptr_s95oP lvl27_s95oN eta_s95oQ;
        } in  sat_s95oR;

Foreign.Marshal.Pool.pooledMallocBytes1
  :: forall a.
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=3,
 Str=<L,1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s95oS size_s95oT s_s95oU]
        case size_s95oT of {
          GHC.Types.I# x#_s95oW [Occ=Once] ->
              case int2Word# [x#_s95oW] of sat_s95oY {
                __DEFAULT ->
                    case __pkg_ccall base-4.11.0.0 [sat_s95oY s_s95oU] of {
                      (#,#) ds1_s95p0 [Occ=Once*] ds2_s95p1 ->
                          case eqAddr# [ds2_s95p1 __NULL] of {
                            __DEFAULT ->
                                case ds_s95oS of {
                                  GHC.STRef.STRef var#_s95p4 ->
                                      case readMutVar# [var#_s95p4 ds1_s95p0] of {
                                        (#,#) ipv_s95p6 [Occ=Once] ipv1_s95p7 [Occ=Once] ->
                                            let {
                                              ipv2_s95p8 :: GHC.Ptr.Ptr ()
                                              [LclId, Unf=OtherCon []] =
                                                  CCCS GHC.Ptr.Ptr! [ds2_s95p1]; } in
                                            let {
                                              sat_s95p9 [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                              [LclId] =
                                                  CCCS :! [ipv2_s95p8 ipv1_s95p7];
                                            } in 
                                              case
                                                  writeMutVar# [var#_s95p4 sat_s95p9 ipv_s95p6]
                                              of
                                              s2#_s95pa
                                              { __DEFAULT -> (#,#) [s2#_s95pa ipv2_s95p8];
                                              };
                                      };
                                };
                            1# -> raiseIO# [Foreign.Marshal.Alloc.malloc1 ds1_s95p0];
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledMallocBytes
  :: forall a.
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=3,
 Str=<L,1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Foreign.Marshal.Pool.pooledMallocBytes1 eta_B3 eta_B2 eta_B1;

lvl17_r95nl :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [144#];

lvl18_r95nm :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [25#];

lvl19_r95nn :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [34#];

lvl20_r95no :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_r95n7
                                           lvl4_r95n8
                                           lvl6_r95na
                                           lvl17_r95nl
                                           lvl18_r95nm
                                           lvl17_r95nl
                                           lvl19_r95nn];

lvl21_r95np :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_r95n6
                                                  lvl20_r95no
                                                  GHC.Stack.Types.EmptyCallStack];

Foreign.Marshal.Pool.pooledMallocArray1 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl21_r95np;

Foreign.Marshal.Pool.pooledMallocArray
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s95pc]
        let {
          lvl27_s95pd [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [$dStorable_s95pc] \u []
                  Foreign.Storable.sizeOf
                      $dStorable_s95pc Foreign.Marshal.Pool.pooledMallocArray1; } in
        let {
          sat_s95pB [Occ=Once]
            :: Foreign.Marshal.Pool.Pool
               -> GHC.Types.Int
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a_a94MR #)
          [LclId] =
              [lvl27_s95pd] \r [pool_s95pe size_s95pf s_s95pg]
                  case size_s95pf of {
                    GHC.Types.I# x_s95pi [Occ=Once] ->
                        case lvl27_s95pd of {
                          GHC.Types.I# y_s95pk [Occ=Once] ->
                              case *# [x_s95pi y_s95pk] of sat_s95pm {
                                __DEFAULT ->
                                    case int2Word# [sat_s95pm] of sat_s95pn {
                                      __DEFAULT ->
                                          case __pkg_ccall base-4.11.0.0 [sat_s95pn s_s95pg] of {
                                            (#,#) ds_s95pp [Occ=Once*] ds1_s95pq ->
                                                case eqAddr# [ds1_s95pq __NULL] of {
                                                  __DEFAULT ->
                                                      case pool_s95pe of {
                                                        GHC.STRef.STRef var#_s95pt ->
                                                            case
                                                                readMutVar# [var#_s95pt ds_s95pp]
                                                            of
                                                            { (#,#) ipv_s95pv [Occ=Once]
                                                                    ipv1_s95pw [Occ=Once] ->
                                                                  let {
                                                                    ipv2_s95px :: GHC.Ptr.Ptr ()
                                                                    [LclId, Unf=OtherCon []] =
                                                                        CCCS GHC.Ptr.Ptr! [ds1_s95pq]; } in
                                                                  let {
                                                                    sat_s95py [Occ=Once]
                                                                      :: [GHC.Ptr.Ptr ()]
                                                                    [LclId] =
                                                                        CCCS :! [ipv2_s95px
                                                                                 ipv1_s95pw];
                                                                  } in 
                                                                    case
                                                                        writeMutVar# [var#_s95pt
                                                                                      sat_s95py
                                                                                      ipv_s95pv]
                                                                    of
                                                                    s2#_s95pz
                                                                    { __DEFAULT ->
                                                                          (#,#) [s2#_s95pz
                                                                                 ipv2_s95px];
                                                                    };
                                                            };
                                                      };
                                                  1# ->
                                                      raiseIO# [Foreign.Marshal.Alloc.malloc1
                                                                ds_s95pp];
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in  sat_s95pB;

Foreign.Marshal.Pool.$wpooledMallocArray0 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><L,1*U(U)><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s95pC w1_s95pD ww_s95pE w2_s95pF]
        case
            Foreign.Storable.sizeOf
                w_s95pC Foreign.Marshal.Pool.pooledMallocArray1
        of
        { GHC.Types.I# y_s95pH [Occ=Once] ->
              case +# [ww_s95pE 1#] of sat_s95pJ {
                __DEFAULT ->
                    case *# [sat_s95pJ y_s95pH] of sat_s95pK {
                      __DEFAULT ->
                          case int2Word# [sat_s95pK] of sat_s95pL {
                            __DEFAULT ->
                                case __pkg_ccall base-4.11.0.0 [sat_s95pL w2_s95pF] of {
                                  (#,#) ds_s95pN [Occ=Once*] ds1_s95pO ->
                                      case eqAddr# [ds1_s95pO __NULL] of {
                                        __DEFAULT ->
                                            case w1_s95pD of {
                                              GHC.STRef.STRef var#_s95pR ->
                                                  case readMutVar# [var#_s95pR ds_s95pN] of {
                                                    (#,#) ipv_s95pT [Occ=Once]
                                                          ipv1_s95pU [Occ=Once] ->
                                                        let {
                                                          ipv2_s95pV :: GHC.Ptr.Ptr ()
                                                          [LclId, Unf=OtherCon []] =
                                                              CCCS GHC.Ptr.Ptr! [ds1_s95pO]; } in
                                                        let {
                                                          sat_s95pW [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                          [LclId] =
                                                              CCCS :! [ipv2_s95pV ipv1_s95pU];
                                                        } in 
                                                          case
                                                              writeMutVar# [var#_s95pR
                                                                            sat_s95pW
                                                                            ipv_s95pT]
                                                          of
                                                          s2#_s95pX
                                                          { __DEFAULT ->
                                                                (#,#) [s2#_s95pX ipv2_s95pV];
                                                          };
                                                  };
                                            };
                                        1# -> raiseIO# [Foreign.Marshal.Alloc.malloc1 ds_s95pN];
                                      };
                                };
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledMallocArray2 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><L,1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s95pZ w1_s95q0 w2_s95q1 w3_s95q2]
        case w2_s95q1 of {
          GHC.Types.I# ww1_s95q4 [Occ=Once] ->
              Foreign.Marshal.Pool.$wpooledMallocArray0
                  w_s95pZ w1_s95q0 ww1_s95q4 w3_s95q2;
        };

Foreign.Marshal.Pool.pooledMallocArray0
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><L,1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Foreign.Marshal.Pool.pooledMallocArray2
            eta_B4 eta_B3 eta_B2 eta_B1;

lvl22_r95nq :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [106#];

lvl23_r95nr :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [19#];

lvl24_r95ns :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [28#];

lvl25_r95nt :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_r95n7
                                           lvl4_r95n8
                                           lvl6_r95na
                                           lvl22_r95nq
                                           lvl23_r95nr
                                           lvl22_r95nq
                                           lvl24_r95ns];

lvl26_r95nu :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_r95n6
                                                  lvl25_r95nt
                                                  GHC.Stack.Types.EmptyCallStack];

Foreign.Marshal.Pool.pooledMalloc1 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl26_r95nu;

Foreign.Marshal.Pool.pooledMalloc
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s95q5]
        let {
          lvl27_s95q6 [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [$dStorable_s95q5] \u []
                  Foreign.Storable.sizeOf
                      $dStorable_s95q5 Foreign.Marshal.Pool.pooledMalloc1; } in
        let {
          sat_s95qq [Occ=Once]
            :: Foreign.Marshal.Pool.Pool
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a_a94Og #)
          [LclId] =
              [lvl27_s95q6] \r [pool_s95q7 s_s95q8]
                  case lvl27_s95q6 of {
                    GHC.Types.I# x#_s95qa [Occ=Once] ->
                        case int2Word# [x#_s95qa] of sat_s95qc {
                          __DEFAULT ->
                              case __pkg_ccall base-4.11.0.0 [sat_s95qc s_s95q8] of {
                                (#,#) ds_s95qe [Occ=Once*] ds1_s95qf ->
                                    case eqAddr# [ds1_s95qf __NULL] of {
                                      __DEFAULT ->
                                          case pool_s95q7 of {
                                            GHC.STRef.STRef var#_s95qi ->
                                                case readMutVar# [var#_s95qi ds_s95qe] of {
                                                  (#,#) ipv_s95qk [Occ=Once]
                                                        ipv1_s95ql [Occ=Once] ->
                                                      let {
                                                        ipv2_s95qm :: GHC.Ptr.Ptr ()
                                                        [LclId, Unf=OtherCon []] =
                                                            CCCS GHC.Ptr.Ptr! [ds1_s95qf]; } in
                                                      let {
                                                        sat_s95qn [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                        [LclId] =
                                                            CCCS :! [ipv2_s95qm ipv1_s95ql];
                                                      } in 
                                                        case
                                                            writeMutVar# [var#_s95qi
                                                                          sat_s95qn
                                                                          ipv_s95qk]
                                                        of
                                                        s2#_s95qo
                                                        { __DEFAULT -> (#,#) [s2#_s95qo ipv2_s95qm];
                                                        };
                                                };
                                          };
                                      1# -> raiseIO# [Foreign.Marshal.Alloc.malloc1 ds_s95qe];
                                    };
                              };
                        };
                  };
        } in  sat_s95qq;

Foreign.Marshal.Pool.pooledNewArray2
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> a
     -> [a]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=5,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,U))))),A,A,A,A)><L,1*U(U)><L,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s95qr pool_s95qs marker_s95qt vals_s95qu s_s95qv]
        case GHC.List.$wlenAcc vals_s95qu 0# of ww2_s95qw {
          __DEFAULT ->
              case
                  Foreign.Storable.sizeOf
                      $dStorable_s95qr Foreign.Marshal.Pool.pooledMallocArray1
              of
              { GHC.Types.I# y_s95qy [Occ=Once] ->
                    case +# [ww2_s95qw 1#] of sat_s95qA {
                      __DEFAULT ->
                          case *# [sat_s95qA y_s95qy] of sat_s95qB {
                            __DEFAULT ->
                                case int2Word# [sat_s95qB] of sat_s95qC {
                                  __DEFAULT ->
                                      case __pkg_ccall base-4.11.0.0 [sat_s95qC s_s95qv] of {
                                        (#,#) ds_s95qE [Occ=Once*] ds1_s95qF ->
                                            case eqAddr# [ds1_s95qF __NULL] of {
                                              __DEFAULT ->
                                                  case pool_s95qs of {
                                                    GHC.STRef.STRef var#_s95qI ->
                                                        case readMutVar# [var#_s95qI ds_s95qE] of {
                                                          (#,#) ipv_s95qK [Occ=Once]
                                                                ipv1_s95qL [Occ=Once] ->
                                                              let {
                                                                ipv2_s95qM :: GHC.Ptr.Ptr ()
                                                                [LclId, Unf=OtherCon []] =
                                                                    CCCS GHC.Ptr.Ptr! [ds1_s95qF]; } in
                                                              let {
                                                                sat_s95qN [Occ=Once]
                                                                  :: [GHC.Ptr.Ptr ()]
                                                                [LclId] =
                                                                    CCCS :! [ipv2_s95qM ipv1_s95qL];
                                                              } in 
                                                                case
                                                                    writeMutVar# [var#_s95qI
                                                                                  sat_s95qN
                                                                                  ipv_s95qK]
                                                                of
                                                                s2#_s95qO
                                                                { __DEFAULT ->
                                                                      case
                                                                          Foreign.Marshal.Array.newArray4
                                                                              $dStorable_s95qr
                                                                              marker_s95qt
                                                                              ipv2_s95qM
                                                                              vals_s95qu
                                                                              s2#_s95qO
                                                                      of
                                                                      { (#,#) ipv3_s95qQ [Occ=Once]
                                                                              _ [Occ=Dead] ->
                                                                            (#,#) [ipv3_s95qQ
                                                                                   ipv2_s95qM];
                                                                      };
                                                                };
                                                        };
                                                  };
                                              1# ->
                                                  raiseIO# [Foreign.Marshal.Alloc.malloc1 ds_s95qE];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledNewArray0
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> a -> [a] -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=5,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,U))))),A,A,A,A)><L,1*U(U)><L,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Foreign.Marshal.Pool.pooledNewArray2
            eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Foreign.Marshal.Pool.pooledNewArray1
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> [a]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><L,1*U(U)><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s95qT pool_s95qU vals_s95qV s_s95qW]
        case GHC.List.$wlenAcc vals_s95qV 0# of ww2_s95qX {
          __DEFAULT ->
              case
                  Foreign.Storable.sizeOf
                      $dStorable_s95qT Foreign.Marshal.Pool.pooledMallocArray1
              of
              { GHC.Types.I# y_s95qZ [Occ=Once] ->
                    case *# [ww2_s95qX y_s95qZ] of sat_s95r1 {
                      __DEFAULT ->
                          case int2Word# [sat_s95r1] of sat_s95r2 {
                            __DEFAULT ->
                                case __pkg_ccall base-4.11.0.0 [sat_s95r2 s_s95qW] of {
                                  (#,#) ds_s95r4 [Occ=Once*] ds1_s95r5 ->
                                      case eqAddr# [ds1_s95r5 __NULL] of {
                                        __DEFAULT ->
                                            case pool_s95qU of {
                                              GHC.STRef.STRef var#_s95r8 ->
                                                  case readMutVar# [var#_s95r8 ds_s95r4] of {
                                                    (#,#) ipv_s95ra [Occ=Once]
                                                          ipv1_s95rb [Occ=Once] ->
                                                        let {
                                                          ipv2_s95rc :: GHC.Ptr.Ptr ()
                                                          [LclId, Unf=OtherCon []] =
                                                              CCCS GHC.Ptr.Ptr! [ds1_s95r5]; } in
                                                        let {
                                                          sat_s95rd [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                          [LclId] =
                                                              CCCS :! [ipv2_s95rc ipv1_s95rb];
                                                        } in 
                                                          case
                                                              writeMutVar# [var#_s95r8
                                                                            sat_s95rd
                                                                            ipv_s95ra]
                                                          of
                                                          s2#_s95re
                                                          { __DEFAULT ->
                                                                case
                                                                    Foreign.Marshal.Array.newArray2
                                                                        $dStorable_s95qT
                                                                        ipv2_s95rc
                                                                        vals_s95qV
                                                                        s2#_s95re
                                                                of
                                                                { (#,#) ipv3_s95rg [Occ=Once]
                                                                        _ [Occ=Dead] ->
                                                                      (#,#) [ipv3_s95rg ipv2_s95rc];
                                                                };
                                                          };
                                                  };
                                            };
                                        1# -> raiseIO# [Foreign.Marshal.Alloc.malloc1 ds_s95r4];
                                      };
                                };
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledNewArray
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool -> [a] -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><L,1*U(U)><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Foreign.Marshal.Pool.pooledNewArray1 eta_B4 eta_B3 eta_B2 eta_B1;

Foreign.Marshal.Pool.pooledNew1
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,A,A,A,A,1*C1(C1(C1(U(U,A)))))><L,1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s95rj pool_s95rk val_s95rl s_s95rm]
        case
            Foreign.Storable.sizeOf
                $dStorable_s95rj Foreign.Marshal.Pool.pooledMalloc1
        of
        { GHC.Types.I# x#_s95ro [Occ=Once] ->
              case int2Word# [x#_s95ro] of sat_s95rq {
                __DEFAULT ->
                    case __pkg_ccall base-4.11.0.0 [sat_s95rq s_s95rm] of {
                      (#,#) ds_s95rs [Occ=Once*] ds1_s95rt ->
                          case eqAddr# [ds1_s95rt __NULL] of {
                            __DEFAULT ->
                                case pool_s95rk of {
                                  GHC.STRef.STRef var#_s95rw ->
                                      case readMutVar# [var#_s95rw ds_s95rs] of {
                                        (#,#) ipv_s95ry [Occ=Once] ipv1_s95rz [Occ=Once] ->
                                            let {
                                              ipv2_s95rA :: GHC.Ptr.Ptr ()
                                              [LclId, Unf=OtherCon []] =
                                                  CCCS GHC.Ptr.Ptr! [ds1_s95rt]; } in
                                            let {
                                              sat_s95rB [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                              [LclId] =
                                                  CCCS :! [ipv2_s95rA ipv1_s95rz];
                                            } in 
                                              case
                                                  writeMutVar# [var#_s95rw sat_s95rB ipv_s95ry]
                                              of
                                              s2#_s95rC
                                              { __DEFAULT ->
                                                    case
                                                        Foreign.Storable.poke
                                                            $dStorable_s95rj
                                                            ipv2_s95rA
                                                            val_s95rl
                                                            s2#_s95rC
                                                    of
                                                    { (#,#) ipv3_s95rE [Occ=Once] _ [Occ=Dead] ->
                                                          (#,#) [ipv3_s95rE ipv2_s95rA];
                                                    };
                                              };
                                      };
                                };
                            1# -> raiseIO# [Foreign.Marshal.Alloc.malloc1 ds_s95rs];
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledNew
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool -> a -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,A,A,A,A,1*C1(C1(C1(U(U,A)))))><L,1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Foreign.Marshal.Pool.pooledNew1 eta_B4 eta_B3 eta_B2 eta_B1;

Foreign.Marshal.Pool.freePool2 [Occ=LoopBreaker]
  :: [GHC.Ptr.Ptr ()]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s95rH eta_s95rI]
        case ds_s95rH of {
          [] -> (#,#) [eta_s95rI GHC.Tuple.()];
          : p_s95rK [Occ=Once!] ps_s95rL [Occ=Once] ->
              case p_s95rK of {
                GHC.Ptr.Ptr ds2_s95rN [Occ=Once] ->
                    case __pkg_ccall base-4.11.0.0 [ds2_s95rN eta_s95rI] of {
                      Unit# ds4_s95rQ [Occ=Once] ->
                          Foreign.Marshal.Pool.freePool2 ps_s95rL ds4_s95rQ;
                    };
              };
        };

Foreign.Marshal.Pool.freePool1
  :: Foreign.Marshal.Pool.Pool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s95rR s_s95rS]
        case ds_s95rR of {
          GHC.STRef.STRef var#_s95rU [Occ=Once] ->
              case readMutVar# [var#_s95rU s_s95rS] of {
                (#,#) ipv_s95rW [Occ=Once] ipv1_s95rX [Occ=Once] ->
                    Foreign.Marshal.Pool.freePool2 ipv1_s95rX ipv_s95rW;
              };
        };

Foreign.Marshal.Pool.freePool
  :: Foreign.Marshal.Pool.Pool -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Foreign.Marshal.Pool.freePool1 eta_B2 eta_B1;

Foreign.Marshal.Pool.newPool1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Foreign.Marshal.Pool.Pool #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s95rY]
        case newMutVar# [GHC.Types.[] s_s95rY] of {
          (#,#) ipv_s95s0 [Occ=Once] ipv1_s95s1 [Occ=Once] ->
              let {
                sat_s95s2 [Occ=Once] :: Foreign.Marshal.Pool.Pool
                [LclId] =
                    CCCS GHC.STRef.STRef! [ipv1_s95s1];
              } in  (#,#) [ipv_s95s0 sat_s95s2];
        };

Foreign.Marshal.Pool.newPool
  :: GHC.Types.IO Foreign.Marshal.Pool.Pool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] Foreign.Marshal.Pool.newPool1 eta_B1;

Foreign.Marshal.Pool.withPool1
  :: forall b.
     (Foreign.Marshal.Pool.Pool -> GHC.Types.IO b)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [act_s95s3 eta_s95s4]
        case getMaskingState# [eta_s95s4] of {
          (#,#) ipv_s95s6 [Occ=Once*] ipv1_s95s7 [Occ=Once!] ->
              let-no-escape {
                io_s95s8 [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                  :: (forall a. GHC.Types.IO a -> GHC.Types.IO a)
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                [LclId[JoinId(2)],
                 Arity=2,
                 Str=<C(S),1*C1(U)><S,U>,
                 Unf=OtherCon []] =
                    sat-only [act_s95s3] \r [restore_s95s9 s_s95sa]
                        case newMutVar# [GHC.Types.[] s_s95sa] of {
                          (#,#) ipv2_s95sc [Occ=Once] ipv3_s95sd ->
                              let {
                                sat_s95sf [Occ=Once] :: GHC.Types.IO b_a94PM
                                [LclId] =
                                    [act_s95s3 ipv3_s95sd] \u []
                                        let {
                                          sat_s95se [Occ=Once] :: Foreign.Marshal.Pool.Pool
                                          [LclId] =
                                              CCCS GHC.STRef.STRef! [ipv3_s95sd];
                                        } in  act_s95s3 sat_s95se;
                              } in 
                                case restore_s95s9 sat_s95sf of io1_s95sg {
                                  __DEFAULT ->
                                      let {
                                        sat_s95su [Occ=Once]
                                          :: GHC.Exception.SomeException
                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                                        [LclId] =
                                            [ipv3_s95sd] \r [ds2_s95sh]
                                                case ds2_s95sh of {
                                                  GHC.Exception.SomeException $dException_s95sj [Occ=Once]
                                                                              e1_s95sk [Occ=Once] ->
                                                      let {
                                                        sat_s95st [Occ=OnceT[0]]
                                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   b_a94PM #)
                                                        [LclId] =
                                                            [ipv3_s95sd
                                                             $dException_s95sj
                                                             e1_s95sk] \r [s1_s95sl]
                                                                case
                                                                    readMutVar# [ipv3_s95sd
                                                                                 s1_s95sl]
                                                                of
                                                                { (#,#) ipv4_s95sn [Occ=Once]
                                                                        ipv5_s95so [Occ=Once] ->
                                                                      case
                                                                          Foreign.Marshal.Pool.freePool2
                                                                              ipv5_s95so ipv4_s95sn
                                                                      of
                                                                      { (#,#) _ [Occ=Dead]
                                                                              _ [Occ=Dead] ->
                                                                            GHC.Exception.throw
                                                                                $dException_s95sj
                                                                                e1_s95sk;
                                                                      };
                                                                };
                                                      } in  sat_s95st;
                                                };
                                      } in 
                                        case catch# [io1_s95sg sat_s95su ipv2_s95sc] of {
                                          (#,#) ipv4_s95sw [Occ=Once] ipv5_s95sx [Occ=Once] ->
                                              case readMutVar# [ipv3_s95sd ipv4_s95sw] of {
                                                (#,#) ipv6_s95sz [Occ=Once] ipv7_s95sA [Occ=Once] ->
                                                    case
                                                        Foreign.Marshal.Pool.freePool2
                                                            ipv7_s95sA ipv6_s95sz
                                                    of
                                                    { (#,#) ipv8_s95sC [Occ=Once] _ [Occ=Dead] ->
                                                          (#,#) [ipv8_s95sC ipv5_s95sx];
                                                    };
                                              };
                                        };
                                };
                        };
              } in 
                case ipv1_s95s7 of {
                  __DEFAULT ->
                      let {
                        sat_s95sF [Occ=Once] :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                        [LclId] =
                            [] \r [eta_B2 eta_B1] maskAsyncExceptions# [eta_B2 eta_B1];
                      } in  io_s95s8 sat_s95sF ipv_s95s6;
                  0# ->
                      let {
                        sat_s95ta [Occ=Once]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                        [LclId] =
                            [act_s95s3] \r [s_s95sG]
                                case newMutVar# [GHC.Types.[] s_s95sG] of {
                                  (#,#) ipv2_s95sI [Occ=Once] ipv3_s95sJ ->
                                      let {
                                        sat_s95t0 [Occ=Once]
                                          :: GHC.Exception.SomeException
                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                                        [LclId] =
                                            [ipv3_s95sJ] \r [ds3_s95sN]
                                                case ds3_s95sN of {
                                                  GHC.Exception.SomeException $dException_s95sP [Occ=Once]
                                                                              e1_s95sQ [Occ=Once] ->
                                                      let {
                                                        sat_s95sZ [Occ=OnceT[0]]
                                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   b_a94PM #)
                                                        [LclId] =
                                                            [ipv3_s95sJ
                                                             $dException_s95sP
                                                             e1_s95sQ] \r [s1_s95sR]
                                                                case
                                                                    readMutVar# [ipv3_s95sJ
                                                                                 s1_s95sR]
                                                                of
                                                                { (#,#) ipv4_s95sT [Occ=Once]
                                                                        ipv5_s95sU [Occ=Once] ->
                                                                      case
                                                                          Foreign.Marshal.Pool.freePool2
                                                                              ipv5_s95sU ipv4_s95sT
                                                                      of
                                                                      { (#,#) _ [Occ=Dead]
                                                                              _ [Occ=Dead] ->
                                                                            GHC.Exception.throw
                                                                                $dException_s95sP
                                                                                e1_s95sQ;
                                                                      };
                                                                };
                                                      } in  sat_s95sZ;
                                                }; } in
                                      let {
                                        sat_s95sL [Occ=Once]
                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                                        [LclId] =
                                            [act_s95s3 ipv3_s95sJ] \u []
                                                let {
                                                  sat_s95sK [Occ=Once] :: Foreign.Marshal.Pool.Pool
                                                  [LclId] =
                                                      CCCS GHC.STRef.STRef! [ipv3_s95sJ];
                                                } in  act_s95s3 sat_s95sK; } in
                                      let {
                                        sat_s95sM [Occ=Once]
                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                                        [LclId] =
                                            [sat_s95sL] \r [eta_B1]
                                                unmaskAsyncExceptions# [sat_s95sL eta_B1];
                                      } in 
                                        case catch# [sat_s95sM sat_s95t0 ipv2_s95sI] of {
                                          (#,#) ipv4_s95t2 [Occ=Once] ipv5_s95t3 [Occ=Once] ->
                                              case readMutVar# [ipv3_s95sJ ipv4_s95t2] of {
                                                (#,#) ipv6_s95t5 [Occ=Once] ipv7_s95t6 [Occ=Once] ->
                                                    case
                                                        Foreign.Marshal.Pool.freePool2
                                                            ipv7_s95t6 ipv6_s95t5
                                                    of
                                                    { (#,#) ipv8_s95t8 [Occ=Once] _ [Occ=Dead] ->
                                                          (#,#) [ipv8_s95t8 ipv5_s95t3];
                                                    };
                                              };
                                        };
                                };
                      } in  maskAsyncExceptions# [sat_s95ta ipv_s95s6];
                  1# ->
                      let {
                        sat_s95tb [Occ=Once] :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                        [LclId] =
                            [] \r [eta_B2 eta_B1] maskUninterruptible# [eta_B2 eta_B1];
                      } in  io_s95s8 sat_s95tb ipv_s95s6;
                };
        };

Foreign.Marshal.Pool.withPool
  :: forall b.
     (Foreign.Marshal.Pool.Pool -> GHC.Types.IO b) -> GHC.Types.IO b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Foreign.Marshal.Pool.withPool1 eta_B2 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:04:14.808724491 UTC

Foreign.Marshal.Pool.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Foreign.Marshal.Pool.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Marshal.Pool.$trModule4];

Foreign.Marshal.Pool.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Foreign.Marshal.Pool"#;

Foreign.Marshal.Pool.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Marshal.Pool.$trModule2];

Foreign.Marshal.Pool.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Foreign.Marshal.Pool.$trModule3
                                     Foreign.Marshal.Pool.$trModule1];

$krep_r95mW :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep1_r95mX :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r95mW GHC.Types.[]];

$krep2_r95mY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Ptr.$tcPtr
                                              $krep1_r95mX];

$krep3_r95mZ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r95mY GHC.Types.[]];

$krep4_r95n0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep3_r95mZ];

$krep5_r95n1 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep4_r95n0 GHC.Types.[]];

$krep6_r95n2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep5_r95n1];

Foreign.Marshal.Pool.$tcPool2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pool"#;

Foreign.Marshal.Pool.$tcPool1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Marshal.Pool.$tcPool2];

Foreign.Marshal.Pool.$tcPool :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6812857741828992361##
                                    12127662557529231519##
                                    Foreign.Marshal.Pool.$trModule
                                    Foreign.Marshal.Pool.$tcPool1
                                    0#
                                    GHC.Types.krep$*];

$krep7_r95n3 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.Marshal.Pool.$tcPool
                                              GHC.Types.[]];

Foreign.Marshal.Pool.$tc'Pool1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_r95n2 $krep7_r95n3];

Foreign.Marshal.Pool.$tc'Pool3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Pool"#;

Foreign.Marshal.Pool.$tc'Pool2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Marshal.Pool.$tc'Pool3];

Foreign.Marshal.Pool.$tc'Pool :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11588816997626637361##
                                    15405086111208545194##
                                    Foreign.Marshal.Pool.$trModule
                                    Foreign.Marshal.Pool.$tc'Pool2
                                    0#
                                    Foreign.Marshal.Pool.$tc'Pool1];

lvl_r95n4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "pointer not in pool"#;

Foreign.Marshal.Pool.pooledRealloc2
  :: [GHC.Ptr.Ptr ()] -> [GHC.Types.Char]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s95nw] GHC.CString.unpackCString# lvl_r95n4;

Foreign.Marshal.Pool.$wpooledReallocBytes [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.MutVar# GHC.Prim.RealWorld [GHC.Ptr.Ptr ()]
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId, Arity=4, Str=<S,U><S,U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s95nx ww1_s95ny ww2_s95nz void_0E]
        case readMutVar# [ww_s95nx GHC.Prim.void#] of {
          Unit# ipv1_s95nD ->
              let {
                sat_s95nE [Occ=Once] :: GHC.Ptr.Ptr ()
                [LclId] =
                    CCCS GHC.Ptr.Ptr! [ww1_s95ny];
              } in 
                case GHC.List.elem GHC.Ptr.$fEqPtr sat_s95nE ipv1_s95nD of {
                  GHC.Types.False ->
                      Foreign.Marshal.Error.throwIf2
                          ipv1_s95nD Foreign.Marshal.Pool.pooledRealloc2 GHC.Prim.void#;
                  GHC.Types.True ->
                      case ww2_s95nz of ds_s95nH {
                        __DEFAULT ->
                            case int2Word# [ds_s95nH] of sat_s95nJ {
                              __DEFAULT ->
                                  case
                                      __pkg_ccall base-4.11.0.0 [ww1_s95ny sat_s95nJ GHC.Prim.void#]
                                  of
                                  { Unit# ds3_s95nM ->
                                        case eqAddr# [ds3_s95nM __NULL] of {
                                          __DEFAULT ->
                                              case readMutVar# [ww_s95nx GHC.Prim.void#] of {
                                                Unit# ipv3_s95nQ [Occ=Once] ->
                                                    let {
                                                      ipv4_s95nR :: GHC.Ptr.Ptr ()
                                                      [LclId, Unf=OtherCon []] =
                                                          CCCS GHC.Ptr.Ptr! [ds3_s95nM]; } in
                                                    let {
                                                      sat_s95nT [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                      [LclId] =
                                                          [ww1_s95ny ipv3_s95nQ] \u []
                                                              let {
                                                                sat_s95nS [Occ=Once]
                                                                  :: GHC.Ptr.Ptr ()
                                                                [LclId] =
                                                                    CCCS GHC.Ptr.Ptr! [ww1_s95ny];
                                                              } in 
                                                                Data.OldList.deleteBy
                                                                    GHC.Ptr.$fEqPtr_$c==
                                                                    sat_s95nS
                                                                    ipv3_s95nQ; } in
                                                    let {
                                                      sat_s95nU [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                      [LclId] =
                                                          CCCS :! [ipv4_s95nR sat_s95nT];
                                                    } in 
                                                      case
                                                          writeMutVar# [ww_s95nx
                                                                        sat_s95nU
                                                                        GHC.Prim.void#]
                                                      of
                                                      s2#_s95nV
                                                      { (##) -> Unit# [ipv4_s95nR];
                                                      };
                                              };
                                          1# ->
                                              raiseIO# [Foreign.Marshal.Alloc.realloc2
                                                        GHC.Prim.void#];
                                        };
                                  };
                            };
                        0# ->
                            case __pkg_ccall base-4.11.0.0 [ww1_s95ny GHC.Prim.void#] of {
                              (##) ->
                                  case readMutVar# [ww_s95nx GHC.Prim.void#] of {
                                    Unit# ipv3_s95o2 [Occ=Once] ->
                                        let {
                                          sat_s95o4 [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                          [LclId] =
                                              [ww1_s95ny ipv3_s95o2] \u []
                                                  let {
                                                    sat_s95o3 [Occ=Once] :: GHC.Ptr.Ptr ()
                                                    [LclId] =
                                                        CCCS GHC.Ptr.Ptr! [ww1_s95ny];
                                                  } in 
                                                    Data.OldList.deleteBy
                                                        GHC.Ptr.$fEqPtr_$c==
                                                        sat_s95o3
                                                        ipv3_s95o2; } in
                                        let {
                                          sat_s95o5 [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                          [LclId] =
                                              CCCS :! [GHC.Ptr.nullPtr sat_s95o4];
                                        } in 
                                          case
                                              writeMutVar# [ww_s95nx sat_s95o5 GHC.Prim.void#]
                                          of
                                          s2#_s95o6
                                          { (##) -> Unit# [GHC.Ptr.nullPtr];
                                          };
                                  };
                            };
                      };
                };
        };

Foreign.Marshal.Pool.pooledRealloc1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s95o7 w1_s95o8 w2_s95o9 void_0E]
        case w_s95o7 of {
          GHC.STRef.STRef ww1_s95oc [Occ=Once] ->
              case w1_s95o8 of {
                GHC.Ptr.Ptr ww3_s95oe [Occ=Once] ->
                    case w2_s95o9 of {
                      GHC.Types.I# ww5_s95og [Occ=Once] ->
                          Foreign.Marshal.Pool.$wpooledReallocBytes
                              ww1_s95oc ww3_s95oe ww5_s95og GHC.Prim.void#;
                    };
              };
        };

Foreign.Marshal.Pool.pooledReallocBytes
  :: forall a.
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=4,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        Foreign.Marshal.Pool.pooledRealloc1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

lvl1_r95n5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "undefined"#;

lvl2_r95n6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl1_r95n5;

lvl3_r95n7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# Foreign.Marshal.Pool.$trModule4;

lvl4_r95n8 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# Foreign.Marshal.Pool.$trModule2;

lvl5_r95n9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./Foreign/Marshal/Pool.hs"#;

lvl6_r95na :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_r95n9;

lvl7_r95nb :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [159#];

lvl8_r95nc :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [26#];

lvl9_r95nd :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [35#];

lvl10_r95ne :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_r95n7
                                           lvl4_r95n8
                                           lvl6_r95na
                                           lvl7_r95nb
                                           lvl8_r95nc
                                           lvl7_r95nb
                                           lvl9_r95nd];

lvl11_r95nf :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_r95n6
                                                  lvl10_r95ne
                                                  GHC.Stack.Types.EmptyCallStack];

Foreign.Marshal.Pool.pooledReallocArray1 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl11_r95nf;

Foreign.Marshal.Pool.pooledReallocArray
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s95oh]
        let {
          lvl27_s95oi [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [$dStorable_s95oh] \u []
                  Foreign.Storable.sizeOf
                      $dStorable_s95oh Foreign.Marshal.Pool.pooledReallocArray1; } in
        let {
          sat_s95ow [Occ=Once]
            :: Foreign.Marshal.Pool.Pool
               -> GHC.Ptr.Ptr a_a94L7
               -> GHC.Types.Int
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a_a94L7 #)
          [LclId] =
              [lvl27_s95oi] \r [pool_s95oj ptr_s95ok size_s95ol void_0E]
                  case pool_s95oj of {
                    GHC.STRef.STRef ww1_s95oo [Occ=Once] ->
                        case ptr_s95ok of {
                          GHC.Ptr.Ptr ww3_s95oq [Occ=Once] ->
                              case size_s95ol of {
                                GHC.Types.I# x_s95os [Occ=Once] ->
                                    case lvl27_s95oi of {
                                      GHC.Types.I# y_s95ou [Occ=Once] ->
                                          case *# [x_s95os y_s95ou] of sat_s95ov {
                                            __DEFAULT ->
                                                Foreign.Marshal.Pool.$wpooledReallocBytes
                                                    ww1_s95oo ww3_s95oq sat_s95ov GHC.Prim.void#;
                                          };
                                    };
                              };
                        };
                  };
        } in  sat_s95ow;

Foreign.Marshal.Pool.pooledReallocArray2
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=5,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s95ox pool_s95oy ptr_s95oz size_s95oA void_0E]
        case pool_s95oy of {
          GHC.STRef.STRef ww1_s95oD [Occ=Once] ->
              case ptr_s95oz of {
                GHC.Ptr.Ptr ww3_s95oF [Occ=Once] ->
                    case size_s95oA of {
                      GHC.Types.I# x_s95oH [Occ=Once] ->
                          case
                              Foreign.Storable.sizeOf
                                  $dStorable_s95ox Foreign.Marshal.Pool.pooledReallocArray1
                          of
                          { GHC.Types.I# y_s95oJ [Occ=Once] ->
                                case +# [x_s95oH 1#] of sat_s95oK {
                                  __DEFAULT ->
                                      case *# [sat_s95oK y_s95oJ] of sat_s95oL {
                                        __DEFAULT ->
                                            Foreign.Marshal.Pool.$wpooledReallocBytes
                                                ww1_s95oD ww3_s95oF sat_s95oL GHC.Prim.void#;
                                      };
                                };
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledReallocArray0
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=5,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        Foreign.Marshal.Pool.pooledReallocArray2
            eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

lvl12_r95ng :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [124#];

lvl13_r95nh :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [20#];

lvl14_r95ni :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [29#];

lvl15_r95nj :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_r95n7
                                           lvl4_r95n8
                                           lvl6_r95na
                                           lvl12_r95ng
                                           lvl13_r95nh
                                           lvl12_r95ng
                                           lvl14_r95ni];

lvl16_r95nk :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_r95n6
                                                  lvl15_r95nj
                                                  GHC.Stack.Types.EmptyCallStack];

Foreign.Marshal.Pool.pooledRealloc3 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl16_r95nk;

Foreign.Marshal.Pool.pooledRealloc
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s95oM]
        let {
          lvl27_s95oN [Occ=OnceL, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [$dStorable_s95oM] \u []
                  Foreign.Storable.sizeOf
                      $dStorable_s95oM Foreign.Marshal.Pool.pooledRealloc3; } in
        let {
          sat_s95oR [Occ=Once]
            :: Foreign.Marshal.Pool.Pool
               -> GHC.Ptr.Ptr a_a94LU
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a_a94LU #)
          [LclId] =
              [lvl27_s95oN] \r [pool_s95oO ptr_s95oP void_0E]
                  Foreign.Marshal.Pool.pooledRealloc1
                      pool_s95oO ptr_s95oP lvl27_s95oN GHC.Prim.void#;
        } in  sat_s95oR;

Foreign.Marshal.Pool.pooledMallocBytes1
  :: forall a.
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=3,
 Str=<L,1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s95oS size_s95oT void_0E]
        case size_s95oT of {
          GHC.Types.I# x#_s95oW [Occ=Once] ->
              case int2Word# [x#_s95oW] of sat_s95oY {
                __DEFAULT ->
                    case __pkg_ccall base-4.11.0.0 [sat_s95oY GHC.Prim.void#] of {
                      Unit# ds2_s95p1 ->
                          case eqAddr# [ds2_s95p1 __NULL] of {
                            __DEFAULT ->
                                case ds_s95oS of {
                                  GHC.STRef.STRef var#_s95p4 ->
                                      case readMutVar# [var#_s95p4 GHC.Prim.void#] of {
                                        Unit# ipv1_s95p7 [Occ=Once] ->
                                            let {
                                              ipv2_s95p8 :: GHC.Ptr.Ptr ()
                                              [LclId, Unf=OtherCon []] =
                                                  CCCS GHC.Ptr.Ptr! [ds2_s95p1]; } in
                                            let {
                                              sat_s95p9 [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                              [LclId] =
                                                  CCCS :! [ipv2_s95p8 ipv1_s95p7];
                                            } in 
                                              case
                                                  writeMutVar# [var#_s95p4 sat_s95p9 GHC.Prim.void#]
                                              of
                                              s2#_s95pa
                                              { (##) -> Unit# [ipv2_s95p8];
                                              };
                                      };
                                };
                            1# -> raiseIO# [Foreign.Marshal.Alloc.malloc1 GHC.Prim.void#];
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledMallocBytes
  :: forall a.
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=3,
 Str=<L,1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        Foreign.Marshal.Pool.pooledMallocBytes1
            eta_B3 eta_B2 GHC.Prim.void#;

lvl17_r95nl :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [144#];

lvl18_r95nm :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [25#];

lvl19_r95nn :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [34#];

lvl20_r95no :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_r95n7
                                           lvl4_r95n8
                                           lvl6_r95na
                                           lvl17_r95nl
                                           lvl18_r95nm
                                           lvl17_r95nl
                                           lvl19_r95nn];

lvl21_r95np :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_r95n6
                                                  lvl20_r95no
                                                  GHC.Stack.Types.EmptyCallStack];

Foreign.Marshal.Pool.pooledMallocArray1 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl21_r95np;

Foreign.Marshal.Pool.pooledMallocArray
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s95pc]
        let {
          lvl27_s95pd [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [$dStorable_s95pc] \u []
                  Foreign.Storable.sizeOf
                      $dStorable_s95pc Foreign.Marshal.Pool.pooledMallocArray1; } in
        let {
          sat_s95pB [Occ=Once]
            :: Foreign.Marshal.Pool.Pool
               -> GHC.Types.Int
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a_a94MR #)
          [LclId] =
              [lvl27_s95pd] \r [pool_s95pe size_s95pf void_0E]
                  case size_s95pf of {
                    GHC.Types.I# x_s95pi [Occ=Once] ->
                        case lvl27_s95pd of {
                          GHC.Types.I# y_s95pk [Occ=Once] ->
                              case *# [x_s95pi y_s95pk] of sat_s95pm {
                                __DEFAULT ->
                                    case int2Word# [sat_s95pm] of sat_s95pn {
                                      __DEFAULT ->
                                          case
                                              __pkg_ccall base-4.11.0.0 [sat_s95pn GHC.Prim.void#]
                                          of
                                          { Unit# ds1_s95pq ->
                                                case eqAddr# [ds1_s95pq __NULL] of {
                                                  __DEFAULT ->
                                                      case pool_s95pe of {
                                                        GHC.STRef.STRef var#_s95pt ->
                                                            case
                                                                readMutVar# [var#_s95pt
                                                                             GHC.Prim.void#]
                                                            of
                                                            { Unit# ipv1_s95pw [Occ=Once] ->
                                                                  let {
                                                                    ipv2_s95px :: GHC.Ptr.Ptr ()
                                                                    [LclId, Unf=OtherCon []] =
                                                                        CCCS GHC.Ptr.Ptr! [ds1_s95pq]; } in
                                                                  let {
                                                                    sat_s95py [Occ=Once]
                                                                      :: [GHC.Ptr.Ptr ()]
                                                                    [LclId] =
                                                                        CCCS :! [ipv2_s95px
                                                                                 ipv1_s95pw];
                                                                  } in 
                                                                    case
                                                                        writeMutVar# [var#_s95pt
                                                                                      sat_s95py
                                                                                      GHC.Prim.void#]
                                                                    of
                                                                    s2#_s95pz
                                                                    { (##) -> Unit# [ipv2_s95px];
                                                                    };
                                                            };
                                                      };
                                                  1# ->
                                                      raiseIO# [Foreign.Marshal.Alloc.malloc1
                                                                GHC.Prim.void#];
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in  sat_s95pB;

Foreign.Marshal.Pool.$wpooledMallocArray0 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><L,1*U(U)><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s95pC w1_s95pD ww_s95pE void_0E]
        case
            Foreign.Storable.sizeOf
                w_s95pC Foreign.Marshal.Pool.pooledMallocArray1
        of
        { GHC.Types.I# y_s95pH [Occ=Once] ->
              case +# [ww_s95pE 1#] of sat_s95pJ {
                __DEFAULT ->
                    case *# [sat_s95pJ y_s95pH] of sat_s95pK {
                      __DEFAULT ->
                          case int2Word# [sat_s95pK] of sat_s95pL {
                            __DEFAULT ->
                                case __pkg_ccall base-4.11.0.0 [sat_s95pL GHC.Prim.void#] of {
                                  Unit# ds1_s95pO ->
                                      case eqAddr# [ds1_s95pO __NULL] of {
                                        __DEFAULT ->
                                            case w1_s95pD of {
                                              GHC.STRef.STRef var#_s95pR ->
                                                  case readMutVar# [var#_s95pR GHC.Prim.void#] of {
                                                    Unit# ipv1_s95pU [Occ=Once] ->
                                                        let {
                                                          ipv2_s95pV :: GHC.Ptr.Ptr ()
                                                          [LclId, Unf=OtherCon []] =
                                                              CCCS GHC.Ptr.Ptr! [ds1_s95pO]; } in
                                                        let {
                                                          sat_s95pW [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                          [LclId] =
                                                              CCCS :! [ipv2_s95pV ipv1_s95pU];
                                                        } in 
                                                          case
                                                              writeMutVar# [var#_s95pR
                                                                            sat_s95pW
                                                                            GHC.Prim.void#]
                                                          of
                                                          s2#_s95pX
                                                          { (##) -> Unit# [ipv2_s95pV];
                                                          };
                                                  };
                                            };
                                        1# ->
                                            raiseIO# [Foreign.Marshal.Alloc.malloc1 GHC.Prim.void#];
                                      };
                                };
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledMallocArray2 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><L,1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s95pZ w1_s95q0 w2_s95q1 void_0E]
        case w2_s95q1 of {
          GHC.Types.I# ww1_s95q4 [Occ=Once] ->
              Foreign.Marshal.Pool.$wpooledMallocArray0
                  w_s95pZ w1_s95q0 ww1_s95q4 GHC.Prim.void#;
        };

Foreign.Marshal.Pool.pooledMallocArray0
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><L,1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        Foreign.Marshal.Pool.pooledMallocArray2
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

lvl22_r95nq :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [106#];

lvl23_r95nr :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [19#];

lvl24_r95ns :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [28#];

lvl25_r95nt :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_r95n7
                                           lvl4_r95n8
                                           lvl6_r95na
                                           lvl22_r95nq
                                           lvl23_r95nr
                                           lvl22_r95nq
                                           lvl24_r95ns];

lvl26_r95nu :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_r95n6
                                                  lvl25_r95nt
                                                  GHC.Stack.Types.EmptyCallStack];

Foreign.Marshal.Pool.pooledMalloc1 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl26_r95nu;

Foreign.Marshal.Pool.pooledMalloc
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s95q5]
        let {
          lvl27_s95q6 [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [$dStorable_s95q5] \u []
                  Foreign.Storable.sizeOf
                      $dStorable_s95q5 Foreign.Marshal.Pool.pooledMalloc1; } in
        let {
          sat_s95qq [Occ=Once]
            :: Foreign.Marshal.Pool.Pool
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a_a94Og #)
          [LclId] =
              [lvl27_s95q6] \r [pool_s95q7 void_0E]
                  case lvl27_s95q6 of {
                    GHC.Types.I# x#_s95qa [Occ=Once] ->
                        case int2Word# [x#_s95qa] of sat_s95qc {
                          __DEFAULT ->
                              case __pkg_ccall base-4.11.0.0 [sat_s95qc GHC.Prim.void#] of {
                                Unit# ds1_s95qf ->
                                    case eqAddr# [ds1_s95qf __NULL] of {
                                      __DEFAULT ->
                                          case pool_s95q7 of {
                                            GHC.STRef.STRef var#_s95qi ->
                                                case readMutVar# [var#_s95qi GHC.Prim.void#] of {
                                                  Unit# ipv1_s95ql [Occ=Once] ->
                                                      let {
                                                        ipv2_s95qm :: GHC.Ptr.Ptr ()
                                                        [LclId, Unf=OtherCon []] =
                                                            CCCS GHC.Ptr.Ptr! [ds1_s95qf]; } in
                                                      let {
                                                        sat_s95qn [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                        [LclId] =
                                                            CCCS :! [ipv2_s95qm ipv1_s95ql];
                                                      } in 
                                                        case
                                                            writeMutVar# [var#_s95qi
                                                                          sat_s95qn
                                                                          GHC.Prim.void#]
                                                        of
                                                        s2#_s95qo
                                                        { (##) -> Unit# [ipv2_s95qm];
                                                        };
                                                };
                                          };
                                      1# -> raiseIO# [Foreign.Marshal.Alloc.malloc1 GHC.Prim.void#];
                                    };
                              };
                        };
                  };
        } in  sat_s95qq;

Foreign.Marshal.Pool.pooledNewArray2
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> a
     -> [a]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=5,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,U))))),A,A,A,A)><L,1*U(U)><L,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s95qr pool_s95qs marker_s95qt vals_s95qu void_0E]
        case GHC.List.$wlenAcc vals_s95qu 0# of ww2_s95qw {
          __DEFAULT ->
              case
                  Foreign.Storable.sizeOf
                      $dStorable_s95qr Foreign.Marshal.Pool.pooledMallocArray1
              of
              { GHC.Types.I# y_s95qy [Occ=Once] ->
                    case +# [ww2_s95qw 1#] of sat_s95qA {
                      __DEFAULT ->
                          case *# [sat_s95qA y_s95qy] of sat_s95qB {
                            __DEFAULT ->
                                case int2Word# [sat_s95qB] of sat_s95qC {
                                  __DEFAULT ->
                                      case __pkg_ccall base-4.11.0.0 [sat_s95qC GHC.Prim.void#] of {
                                        Unit# ds1_s95qF ->
                                            case eqAddr# [ds1_s95qF __NULL] of {
                                              __DEFAULT ->
                                                  case pool_s95qs of {
                                                    GHC.STRef.STRef var#_s95qI ->
                                                        case
                                                            readMutVar# [var#_s95qI GHC.Prim.void#]
                                                        of
                                                        { Unit# ipv1_s95qL [Occ=Once] ->
                                                              let {
                                                                ipv2_s95qM :: GHC.Ptr.Ptr ()
                                                                [LclId, Unf=OtherCon []] =
                                                                    CCCS GHC.Ptr.Ptr! [ds1_s95qF]; } in
                                                              let {
                                                                sat_s95qN [Occ=Once]
                                                                  :: [GHC.Ptr.Ptr ()]
                                                                [LclId] =
                                                                    CCCS :! [ipv2_s95qM ipv1_s95qL];
                                                              } in 
                                                                case
                                                                    writeMutVar# [var#_s95qI
                                                                                  sat_s95qN
                                                                                  GHC.Prim.void#]
                                                                of
                                                                s2#_s95qO
                                                                { (##) ->
                                                                      case
                                                                          Foreign.Marshal.Array.newArray4
                                                                              $dStorable_s95qr
                                                                              marker_s95qt
                                                                              ipv2_s95qM
                                                                              vals_s95qu
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# _ [Occ=Dead] ->
                                                                            Unit# [ipv2_s95qM];
                                                                      };
                                                                };
                                                        };
                                                  };
                                              1# ->
                                                  raiseIO# [Foreign.Marshal.Alloc.malloc1
                                                            GHC.Prim.void#];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledNewArray0
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> a -> [a] -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=5,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,U))))),A,A,A,A)><L,1*U(U)><L,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        Foreign.Marshal.Pool.pooledNewArray2
            eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

Foreign.Marshal.Pool.pooledNewArray1
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> [a]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><L,1*U(U)><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s95qT pool_s95qU vals_s95qV void_0E]
        case GHC.List.$wlenAcc vals_s95qV 0# of ww2_s95qX {
          __DEFAULT ->
              case
                  Foreign.Storable.sizeOf
                      $dStorable_s95qT Foreign.Marshal.Pool.pooledMallocArray1
              of
              { GHC.Types.I# y_s95qZ [Occ=Once] ->
                    case *# [ww2_s95qX y_s95qZ] of sat_s95r1 {
                      __DEFAULT ->
                          case int2Word# [sat_s95r1] of sat_s95r2 {
                            __DEFAULT ->
                                case __pkg_ccall base-4.11.0.0 [sat_s95r2 GHC.Prim.void#] of {
                                  Unit# ds1_s95r5 ->
                                      case eqAddr# [ds1_s95r5 __NULL] of {
                                        __DEFAULT ->
                                            case pool_s95qU of {
                                              GHC.STRef.STRef var#_s95r8 ->
                                                  case readMutVar# [var#_s95r8 GHC.Prim.void#] of {
                                                    Unit# ipv1_s95rb [Occ=Once] ->
                                                        let {
                                                          ipv2_s95rc :: GHC.Ptr.Ptr ()
                                                          [LclId, Unf=OtherCon []] =
                                                              CCCS GHC.Ptr.Ptr! [ds1_s95r5]; } in
                                                        let {
                                                          sat_s95rd [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                          [LclId] =
                                                              CCCS :! [ipv2_s95rc ipv1_s95rb];
                                                        } in 
                                                          case
                                                              writeMutVar# [var#_s95r8
                                                                            sat_s95rd
                                                                            GHC.Prim.void#]
                                                          of
                                                          s2#_s95re
                                                          { (##) ->
                                                                case
                                                                    Foreign.Marshal.Array.newArray2
                                                                        $dStorable_s95qT
                                                                        ipv2_s95rc
                                                                        vals_s95qV
                                                                        GHC.Prim.void#
                                                                of
                                                                { Unit# _ [Occ=Dead] ->
                                                                      Unit# [ipv2_s95rc];
                                                                };
                                                          };
                                                  };
                                            };
                                        1# ->
                                            raiseIO# [Foreign.Marshal.Alloc.malloc1 GHC.Prim.void#];
                                      };
                                };
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledNewArray
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool -> [a] -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><L,1*U(U)><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        Foreign.Marshal.Pool.pooledNewArray1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

Foreign.Marshal.Pool.pooledNew1
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,A,A,A,A,1*C1(C1(C1(U(U,A)))))><L,1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s95rj pool_s95rk val_s95rl void_0E]
        case
            Foreign.Storable.sizeOf
                $dStorable_s95rj Foreign.Marshal.Pool.pooledMalloc1
        of
        { GHC.Types.I# x#_s95ro [Occ=Once] ->
              case int2Word# [x#_s95ro] of sat_s95rq {
                __DEFAULT ->
                    case __pkg_ccall base-4.11.0.0 [sat_s95rq GHC.Prim.void#] of {
                      Unit# ds1_s95rt ->
                          case eqAddr# [ds1_s95rt __NULL] of {
                            __DEFAULT ->
                                case pool_s95rk of {
                                  GHC.STRef.STRef var#_s95rw ->
                                      case readMutVar# [var#_s95rw GHC.Prim.void#] of {
                                        Unit# ipv1_s95rz [Occ=Once] ->
                                            let {
                                              ipv2_s95rA :: GHC.Ptr.Ptr ()
                                              [LclId, Unf=OtherCon []] =
                                                  CCCS GHC.Ptr.Ptr! [ds1_s95rt]; } in
                                            let {
                                              sat_s95rB [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                              [LclId] =
                                                  CCCS :! [ipv2_s95rA ipv1_s95rz];
                                            } in 
                                              case
                                                  writeMutVar# [var#_s95rw sat_s95rB GHC.Prim.void#]
                                              of
                                              s2#_s95rC
                                              { (##) ->
                                                    case
                                                        Foreign.Storable.poke
                                                            $dStorable_s95rj
                                                            ipv2_s95rA
                                                            val_s95rl
                                                            GHC.Prim.void#
                                                    of
                                                    { Unit# _ [Occ=Dead] -> Unit# [ipv2_s95rA];
                                                    };
                                              };
                                      };
                                };
                            1# -> raiseIO# [Foreign.Marshal.Alloc.malloc1 GHC.Prim.void#];
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledNew
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool -> a -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,A,A,A,A,1*C1(C1(C1(U(U,A)))))><L,1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        Foreign.Marshal.Pool.pooledNew1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

Foreign.Marshal.Pool.freePool2 [Occ=LoopBreaker]
  :: [GHC.Ptr.Ptr ()]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s95rH void_0E]
        case ds_s95rH of {
          [] -> Unit# [GHC.Tuple.()];
          : p_s95rK [Occ=Once!] ps_s95rL [Occ=Once] ->
              case p_s95rK of {
                GHC.Ptr.Ptr ds2_s95rN [Occ=Once] ->
                    case __pkg_ccall base-4.11.0.0 [ds2_s95rN GHC.Prim.void#] of {
                      (##) -> Foreign.Marshal.Pool.freePool2 ps_s95rL GHC.Prim.void#;
                    };
              };
        };

Foreign.Marshal.Pool.freePool1
  :: Foreign.Marshal.Pool.Pool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s95rR void_0E]
        case ds_s95rR of {
          GHC.STRef.STRef var#_s95rU [Occ=Once] ->
              case readMutVar# [var#_s95rU GHC.Prim.void#] of {
                Unit# ipv1_s95rX [Occ=Once] ->
                    Foreign.Marshal.Pool.freePool2 ipv1_s95rX GHC.Prim.void#;
              };
        };

Foreign.Marshal.Pool.freePool
  :: Foreign.Marshal.Pool.Pool -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Foreign.Marshal.Pool.freePool1 eta_B2 GHC.Prim.void#;

Foreign.Marshal.Pool.newPool1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Foreign.Marshal.Pool.Pool #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case newMutVar# [GHC.Types.[] GHC.Prim.void#] of {
          Unit# ipv1_s95s1 [Occ=Once] ->
              let {
                sat_s95s2 [Occ=Once] :: Foreign.Marshal.Pool.Pool
                [LclId] =
                    CCCS GHC.STRef.STRef! [ipv1_s95s1];
              } in  Unit# [sat_s95s2];
        };

Foreign.Marshal.Pool.newPool
  :: GHC.Types.IO Foreign.Marshal.Pool.Pool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Foreign.Marshal.Pool.newPool1 GHC.Prim.void#;

Foreign.Marshal.Pool.withPool1
  :: forall b.
     (Foreign.Marshal.Pool.Pool -> GHC.Types.IO b)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [act_s95s3 void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_s95s7 [Occ=Once!] ->
              let-no-escape {
                io_s95s8 [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                  :: (forall a. GHC.Types.IO a -> GHC.Types.IO a)
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                [LclId[JoinId(2)],
                 Arity=2,
                 Str=<C(S),1*C1(U)><S,U>,
                 Unf=OtherCon []] =
                    sat-only [act_s95s3] \r [restore_s95s9 void_0E]
                        case newMutVar# [GHC.Types.[] GHC.Prim.void#] of {
                          Unit# ipv3_s95sd ->
                              let {
                                sat_s95sf [Occ=Once] :: GHC.Types.IO b_a94PM
                                [LclId] =
                                    [act_s95s3 ipv3_s95sd] \u []
                                        let {
                                          sat_s95se [Occ=Once] :: Foreign.Marshal.Pool.Pool
                                          [LclId] =
                                              CCCS GHC.STRef.STRef! [ipv3_s95sd];
                                        } in  act_s95s3 sat_s95se;
                              } in 
                                case restore_s95s9 sat_s95sf of io1_s95sg {
                                  __DEFAULT ->
                                      let {
                                        sat_s95su [Occ=Once]
                                          :: GHC.Exception.SomeException
                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                                        [LclId] =
                                            [ipv3_s95sd] \r [ds2_s95sh]
                                                case ds2_s95sh of {
                                                  GHC.Exception.SomeException $dException_s95sj [Occ=Once]
                                                                              e1_s95sk [Occ=Once] ->
                                                      let {
                                                        sat_s95st [Occ=OnceT[0]]
                                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   b_a94PM #)
                                                        [LclId] =
                                                            [ipv3_s95sd
                                                             $dException_s95sj
                                                             e1_s95sk] \r [void_0E]
                                                                case
                                                                    readMutVar# [ipv3_s95sd
                                                                                 GHC.Prim.void#]
                                                                of
                                                                { Unit# ipv5_s95so [Occ=Once] ->
                                                                      case
                                                                          Foreign.Marshal.Pool.freePool2
                                                                              ipv5_s95so
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# _ [Occ=Dead] ->
                                                                            GHC.Exception.throw
                                                                                $dException_s95sj
                                                                                e1_s95sk;
                                                                      };
                                                                };
                                                      } in  sat_s95st;
                                                };
                                      } in 
                                        case catch# [io1_s95sg sat_s95su GHC.Prim.void#] of {
                                          Unit# ipv5_s95sx [Occ=Once] ->
                                              case readMutVar# [ipv3_s95sd GHC.Prim.void#] of {
                                                Unit# ipv7_s95sA [Occ=Once] ->
                                                    case
                                                        Foreign.Marshal.Pool.freePool2
                                                            ipv7_s95sA GHC.Prim.void#
                                                    of
                                                    { Unit# _ [Occ=Dead] -> Unit# [ipv5_s95sx];
                                                    };
                                              };
                                        };
                                };
                        };
              } in 
                case ipv1_s95s7 of {
                  __DEFAULT ->
                      let {
                        sat_s95sF [Occ=Once] :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                        [LclId] =
                            [] \r [eta_B2 void_0E]
                                maskAsyncExceptions# [eta_B2 GHC.Prim.void#];
                      } in  io_s95s8 sat_s95sF GHC.Prim.void#;
                  0# ->
                      let {
                        sat_s95ta [Occ=Once]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                        [LclId] =
                            [act_s95s3] \r [void_0E]
                                case newMutVar# [GHC.Types.[] GHC.Prim.void#] of {
                                  Unit# ipv3_s95sJ ->
                                      let {
                                        sat_s95t0 [Occ=Once]
                                          :: GHC.Exception.SomeException
                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                                        [LclId] =
                                            [ipv3_s95sJ] \r [ds3_s95sN]
                                                case ds3_s95sN of {
                                                  GHC.Exception.SomeException $dException_s95sP [Occ=Once]
                                                                              e1_s95sQ [Occ=Once] ->
                                                      let {
                                                        sat_s95sZ [Occ=OnceT[0]]
                                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   b_a94PM #)
                                                        [LclId] =
                                                            [ipv3_s95sJ
                                                             $dException_s95sP
                                                             e1_s95sQ] \r [void_0E]
                                                                case
                                                                    readMutVar# [ipv3_s95sJ
                                                                                 GHC.Prim.void#]
                                                                of
                                                                { Unit# ipv5_s95sU [Occ=Once] ->
                                                                      case
                                                                          Foreign.Marshal.Pool.freePool2
                                                                              ipv5_s95sU
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# _ [Occ=Dead] ->
                                                                            GHC.Exception.throw
                                                                                $dException_s95sP
                                                                                e1_s95sQ;
                                                                      };
                                                                };
                                                      } in  sat_s95sZ;
                                                }; } in
                                      let {
                                        sat_s95sL [Occ=Once]
                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                                        [LclId] =
                                            [act_s95s3 ipv3_s95sJ] \u []
                                                let {
                                                  sat_s95sK [Occ=Once] :: Foreign.Marshal.Pool.Pool
                                                  [LclId] =
                                                      CCCS GHC.STRef.STRef! [ipv3_s95sJ];
                                                } in  act_s95s3 sat_s95sK; } in
                                      let {
                                        sat_s95sM [Occ=Once]
                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                                        [LclId] =
                                            [sat_s95sL] \r [void_0E]
                                                unmaskAsyncExceptions# [sat_s95sL GHC.Prim.void#];
                                      } in 
                                        case catch# [sat_s95sM sat_s95t0 GHC.Prim.void#] of {
                                          Unit# ipv5_s95t3 [Occ=Once] ->
                                              case readMutVar# [ipv3_s95sJ GHC.Prim.void#] of {
                                                Unit# ipv7_s95t6 [Occ=Once] ->
                                                    case
                                                        Foreign.Marshal.Pool.freePool2
                                                            ipv7_s95t6 GHC.Prim.void#
                                                    of
                                                    { Unit# _ [Occ=Dead] -> Unit# [ipv5_s95t3];
                                                    };
                                              };
                                        };
                                };
                      } in  maskAsyncExceptions# [sat_s95ta GHC.Prim.void#];
                  1# ->
                      let {
                        sat_s95tb [Occ=Once] :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                        [LclId] =
                            [] \r [eta_B2 void_0E]
                                maskUninterruptible# [eta_B2 GHC.Prim.void#];
                      } in  io_s95s8 sat_s95tb GHC.Prim.void#;
                };
        };

Foreign.Marshal.Pool.withPool
  :: forall b.
     (Foreign.Marshal.Pool.Pool -> GHC.Types.IO b) -> GHC.Types.IO b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Foreign.Marshal.Pool.withPool1 eta_B2 GHC.Prim.void#;


==================== Pre unarise: ====================
2018-03-16 16:04:16.701846114 UTC

Foreign.Marshal.Pool.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Foreign.Marshal.Pool.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Marshal.Pool.$trModule4];

Foreign.Marshal.Pool.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Foreign.Marshal.Pool"#;

Foreign.Marshal.Pool.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Marshal.Pool.$trModule2];

Foreign.Marshal.Pool.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Foreign.Marshal.Pool.$trModule3
                                     Foreign.Marshal.Pool.$trModule1];

$krep_r95mW :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep1_r95mX :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r95mW GHC.Types.[]];

$krep2_r95mY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Ptr.$tcPtr
                                              $krep1_r95mX];

$krep3_r95mZ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r95mY GHC.Types.[]];

$krep4_r95n0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep3_r95mZ];

$krep5_r95n1 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep4_r95n0 GHC.Types.[]];

$krep6_r95n2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep5_r95n1];

Foreign.Marshal.Pool.$tcPool2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pool"#;

Foreign.Marshal.Pool.$tcPool1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Marshal.Pool.$tcPool2];

Foreign.Marshal.Pool.$tcPool :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6812857741828992361##
                                    12127662557529231519##
                                    Foreign.Marshal.Pool.$trModule
                                    Foreign.Marshal.Pool.$tcPool1
                                    0#
                                    GHC.Types.krep$*];

$krep7_r95n3 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.Marshal.Pool.$tcPool
                                              GHC.Types.[]];

Foreign.Marshal.Pool.$tc'Pool1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_r95n2 $krep7_r95n3];

Foreign.Marshal.Pool.$tc'Pool3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Pool"#;

Foreign.Marshal.Pool.$tc'Pool2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Marshal.Pool.$tc'Pool3];

Foreign.Marshal.Pool.$tc'Pool :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11588816997626637361##
                                    15405086111208545194##
                                    Foreign.Marshal.Pool.$trModule
                                    Foreign.Marshal.Pool.$tc'Pool2
                                    0#
                                    Foreign.Marshal.Pool.$tc'Pool1];

lvl_r95n4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "pointer not in pool"#;

Foreign.Marshal.Pool.pooledRealloc2
  :: [GHC.Ptr.Ptr ()] -> [GHC.Types.Char]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s96lZ] GHC.CString.unpackCString# lvl_r95n4;

Foreign.Marshal.Pool.$wpooledReallocBytes [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.MutVar# GHC.Prim.RealWorld [GHC.Ptr.Ptr ()]
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId, Arity=4, Str=<S,U><S,U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s96m0 ww1_s96m1 ww2_s96m2 w_s96m3]
        case readMutVar# [ww_s96m0 w_s96m3] of {
          (#,#) ipv_s96m5 [Occ=Once*] ipv1_s96m6 ->
              let {
                sat_s96m7 [Occ=Once] :: GHC.Ptr.Ptr ()
                [LclId] =
                    CCCS GHC.Ptr.Ptr! [ww1_s96m1];
              } in 
                case GHC.List.elem GHC.Ptr.$fEqPtr sat_s96m7 ipv1_s96m6 of {
                  GHC.Types.False ->
                      Foreign.Marshal.Error.throwIf2
                          ipv1_s96m6 Foreign.Marshal.Pool.pooledRealloc2 ipv_s96m5;
                  GHC.Types.True ->
                      case ww2_s96m2 of ds_s96ma {
                        __DEFAULT ->
                            case int2Word# [ds_s96ma] of sat_s96mc {
                              __DEFAULT ->
                                  case
                                      __pkg_ccall base-4.11.0.0 [ww1_s96m1 sat_s96mc ipv_s96m5]
                                  of
                                  { (#,#) ds2_s96me [Occ=Once*] ds3_s96mf ->
                                        case eqAddr# [ds3_s96mf __NULL] of {
                                          __DEFAULT ->
                                              case readMutVar# [ww_s96m0 ds2_s96me] of {
                                                (#,#) ipv2_s96mi [Occ=Once] ipv3_s96mj [Occ=Once] ->
                                                    let {
                                                      ipv4_s96mk :: GHC.Ptr.Ptr ()
                                                      [LclId, Unf=OtherCon []] =
                                                          CCCS GHC.Ptr.Ptr! [ds3_s96mf]; } in
                                                    let {
                                                      sat_s96mm [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                      [LclId] =
                                                          [ww1_s96m1 ipv3_s96mj] \u []
                                                              let {
                                                                sat_s96ml [Occ=Once]
                                                                  :: GHC.Ptr.Ptr ()
                                                                [LclId] =
                                                                    CCCS GHC.Ptr.Ptr! [ww1_s96m1];
                                                              } in 
                                                                Data.OldList.deleteBy
                                                                    GHC.Ptr.$fEqPtr_$c==
                                                                    sat_s96ml
                                                                    ipv3_s96mj; } in
                                                    let {
                                                      sat_s96mn [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                      [LclId] =
                                                          CCCS :! [ipv4_s96mk sat_s96mm];
                                                    } in 
                                                      case
                                                          writeMutVar# [ww_s96m0
                                                                        sat_s96mn
                                                                        ipv2_s96mi]
                                                      of
                                                      s2#_s96mo
                                                      { __DEFAULT -> (#,#) [s2#_s96mo ipv4_s96mk];
                                                      };
                                              };
                                          1# -> raiseIO# [Foreign.Marshal.Alloc.realloc2 ds2_s96me];
                                        };
                                  };
                            };
                        0# ->
                            case __pkg_ccall base-4.11.0.0 [ww1_s96m1 ipv_s96m5] of {
                              Unit# ds2_s96ms [Occ=Once] ->
                                  case readMutVar# [ww_s96m0 ds2_s96ms] of {
                                    (#,#) ipv2_s96mu [Occ=Once] ipv3_s96mv [Occ=Once] ->
                                        let {
                                          sat_s96mx [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                          [LclId] =
                                              [ww1_s96m1 ipv3_s96mv] \u []
                                                  let {
                                                    sat_s96mw [Occ=Once] :: GHC.Ptr.Ptr ()
                                                    [LclId] =
                                                        CCCS GHC.Ptr.Ptr! [ww1_s96m1];
                                                  } in 
                                                    Data.OldList.deleteBy
                                                        GHC.Ptr.$fEqPtr_$c==
                                                        sat_s96mw
                                                        ipv3_s96mv; } in
                                        let {
                                          sat_s96my [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                          [LclId] =
                                              CCCS :! [GHC.Ptr.nullPtr sat_s96mx];
                                        } in 
                                          case
                                              writeMutVar# [ww_s96m0 sat_s96my ipv2_s96mu]
                                          of
                                          s2#_s96mz
                                          { __DEFAULT -> (#,#) [s2#_s96mz GHC.Ptr.nullPtr];
                                          };
                                  };
                            };
                      };
                };
        };

Foreign.Marshal.Pool.pooledRealloc1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s96mA w1_s96mB w2_s96mC w3_s96mD]
        case w_s96mA of {
          GHC.STRef.STRef ww1_s96mF [Occ=Once] ->
              case w1_s96mB of {
                GHC.Ptr.Ptr ww3_s96mH [Occ=Once] ->
                    case w2_s96mC of {
                      GHC.Types.I# ww5_s96mJ [Occ=Once] ->
                          Foreign.Marshal.Pool.$wpooledReallocBytes
                              ww1_s96mF ww3_s96mH ww5_s96mJ w3_s96mD;
                    };
              };
        };

Foreign.Marshal.Pool.pooledReallocBytes
  :: forall a.
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=4,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Foreign.Marshal.Pool.pooledRealloc1 eta_B4 eta_B3 eta_B2 eta_B1;

lvl1_r95n5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "undefined"#;

lvl2_r95n6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl1_r95n5;

lvl3_r95n7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# Foreign.Marshal.Pool.$trModule4;

lvl4_r95n8 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# Foreign.Marshal.Pool.$trModule2;

lvl5_r95n9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./Foreign/Marshal/Pool.hs"#;

lvl6_r95na :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_r95n9;

lvl7_r95nb :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [159#];

lvl8_r95nc :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [26#];

lvl9_r95nd :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [35#];

lvl10_r95ne :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_r95n7
                                           lvl4_r95n8
                                           lvl6_r95na
                                           lvl7_r95nb
                                           lvl8_r95nc
                                           lvl7_r95nb
                                           lvl9_r95nd];

lvl11_r95nf :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_r95n6
                                                  lvl10_r95ne
                                                  GHC.Stack.Types.EmptyCallStack];

Foreign.Marshal.Pool.pooledReallocArray1 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl11_r95nf;

Foreign.Marshal.Pool.pooledReallocArray
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s96mK]
        let {
          lvl27_s96mL [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [$dStorable_s96mK] \u []
                  Foreign.Storable.sizeOf
                      $dStorable_s96mK Foreign.Marshal.Pool.pooledReallocArray1; } in
        let {
          sat_s96mZ [Occ=Once]
            :: Foreign.Marshal.Pool.Pool
               -> GHC.Ptr.Ptr a_a94L7
               -> GHC.Types.Int
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a_a94L7 #)
          [LclId] =
              [lvl27_s96mL] \r [pool_s96mM ptr_s96mN size_s96mO eta_s96mP]
                  case pool_s96mM of {
                    GHC.STRef.STRef ww1_s96mR [Occ=Once] ->
                        case ptr_s96mN of {
                          GHC.Ptr.Ptr ww3_s96mT [Occ=Once] ->
                              case size_s96mO of {
                                GHC.Types.I# x_s96mV [Occ=Once] ->
                                    case lvl27_s96mL of {
                                      GHC.Types.I# y_s96mX [Occ=Once] ->
                                          case *# [x_s96mV y_s96mX] of sat_s96mY {
                                            __DEFAULT ->
                                                Foreign.Marshal.Pool.$wpooledReallocBytes
                                                    ww1_s96mR ww3_s96mT sat_s96mY eta_s96mP;
                                          };
                                    };
                              };
                        };
                  };
        } in  sat_s96mZ;

Foreign.Marshal.Pool.pooledReallocArray2
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=5,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s96n0 pool_s96n1 ptr_s96n2 size_s96n3 eta_s96n4]
        case pool_s96n1 of {
          GHC.STRef.STRef ww1_s96n6 [Occ=Once] ->
              case ptr_s96n2 of {
                GHC.Ptr.Ptr ww3_s96n8 [Occ=Once] ->
                    case size_s96n3 of {
                      GHC.Types.I# x_s96na [Occ=Once] ->
                          case
                              Foreign.Storable.sizeOf
                                  $dStorable_s96n0 Foreign.Marshal.Pool.pooledReallocArray1
                          of
                          { GHC.Types.I# y_s96nc [Occ=Once] ->
                                case +# [x_s96na 1#] of sat_s96nd {
                                  __DEFAULT ->
                                      case *# [sat_s96nd y_s96nc] of sat_s96ne {
                                        __DEFAULT ->
                                            Foreign.Marshal.Pool.$wpooledReallocBytes
                                                ww1_s96n6 ww3_s96n8 sat_s96ne eta_s96n4;
                                      };
                                };
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledReallocArray0
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=5,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Foreign.Marshal.Pool.pooledReallocArray2
            eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

lvl12_r95ng :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [124#];

lvl13_r95nh :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [20#];

lvl14_r95ni :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [29#];

lvl15_r95nj :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_r95n7
                                           lvl4_r95n8
                                           lvl6_r95na
                                           lvl12_r95ng
                                           lvl13_r95nh
                                           lvl12_r95ng
                                           lvl14_r95ni];

lvl16_r95nk :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_r95n6
                                                  lvl15_r95nj
                                                  GHC.Stack.Types.EmptyCallStack];

Foreign.Marshal.Pool.pooledRealloc3 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl16_r95nk;

Foreign.Marshal.Pool.pooledRealloc
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s96nf]
        let {
          lvl27_s96ng [Occ=OnceL, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [$dStorable_s96nf] \u []
                  Foreign.Storable.sizeOf
                      $dStorable_s96nf Foreign.Marshal.Pool.pooledRealloc3; } in
        let {
          sat_s96nk [Occ=Once]
            :: Foreign.Marshal.Pool.Pool
               -> GHC.Ptr.Ptr a_a94LU
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a_a94LU #)
          [LclId] =
              [lvl27_s96ng] \r [pool_s96nh ptr_s96ni eta_s96nj]
                  Foreign.Marshal.Pool.pooledRealloc1
                      pool_s96nh ptr_s96ni lvl27_s96ng eta_s96nj;
        } in  sat_s96nk;

Foreign.Marshal.Pool.pooledMallocBytes1
  :: forall a.
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=3,
 Str=<L,1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s96nl size_s96nm s_s96nn]
        case size_s96nm of {
          GHC.Types.I# x#_s96np [Occ=Once] ->
              case int2Word# [x#_s96np] of sat_s96nr {
                __DEFAULT ->
                    case __pkg_ccall base-4.11.0.0 [sat_s96nr s_s96nn] of {
                      (#,#) ds1_s96nt [Occ=Once*] ds2_s96nu ->
                          case eqAddr# [ds2_s96nu __NULL] of {
                            __DEFAULT ->
                                case ds_s96nl of {
                                  GHC.STRef.STRef var#_s96nx ->
                                      case readMutVar# [var#_s96nx ds1_s96nt] of {
                                        (#,#) ipv_s96nz [Occ=Once] ipv1_s96nA [Occ=Once] ->
                                            let {
                                              ipv2_s96nB :: GHC.Ptr.Ptr ()
                                              [LclId, Unf=OtherCon []] =
                                                  CCCS GHC.Ptr.Ptr! [ds2_s96nu]; } in
                                            let {
                                              sat_s96nC [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                              [LclId] =
                                                  CCCS :! [ipv2_s96nB ipv1_s96nA];
                                            } in 
                                              case
                                                  writeMutVar# [var#_s96nx sat_s96nC ipv_s96nz]
                                              of
                                              s2#_s96nD
                                              { __DEFAULT -> (#,#) [s2#_s96nD ipv2_s96nB];
                                              };
                                      };
                                };
                            1# -> raiseIO# [Foreign.Marshal.Alloc.malloc1 ds1_s96nt];
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledMallocBytes
  :: forall a.
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=3,
 Str=<L,1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Foreign.Marshal.Pool.pooledMallocBytes1 eta_B3 eta_B2 eta_B1;

lvl17_r95nl :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [144#];

lvl18_r95nm :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [25#];

lvl19_r95nn :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [34#];

lvl20_r95no :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_r95n7
                                           lvl4_r95n8
                                           lvl6_r95na
                                           lvl17_r95nl
                                           lvl18_r95nm
                                           lvl17_r95nl
                                           lvl19_r95nn];

lvl21_r95np :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_r95n6
                                                  lvl20_r95no
                                                  GHC.Stack.Types.EmptyCallStack];

Foreign.Marshal.Pool.pooledMallocArray1 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl21_r95np;

Foreign.Marshal.Pool.pooledMallocArray
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s96nF]
        let {
          lvl27_s96nG [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [$dStorable_s96nF] \u []
                  Foreign.Storable.sizeOf
                      $dStorable_s96nF Foreign.Marshal.Pool.pooledMallocArray1; } in
        let {
          sat_s96o4 [Occ=Once]
            :: Foreign.Marshal.Pool.Pool
               -> GHC.Types.Int
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a_a94MR #)
          [LclId] =
              [lvl27_s96nG] \r [pool_s96nH size_s96nI s_s96nJ]
                  case size_s96nI of {
                    GHC.Types.I# x_s96nL [Occ=Once] ->
                        case lvl27_s96nG of {
                          GHC.Types.I# y_s96nN [Occ=Once] ->
                              case *# [x_s96nL y_s96nN] of sat_s96nP {
                                __DEFAULT ->
                                    case int2Word# [sat_s96nP] of sat_s96nQ {
                                      __DEFAULT ->
                                          case __pkg_ccall base-4.11.0.0 [sat_s96nQ s_s96nJ] of {
                                            (#,#) ds_s96nS [Occ=Once*] ds1_s96nT ->
                                                case eqAddr# [ds1_s96nT __NULL] of {
                                                  __DEFAULT ->
                                                      case pool_s96nH of {
                                                        GHC.STRef.STRef var#_s96nW ->
                                                            case
                                                                readMutVar# [var#_s96nW ds_s96nS]
                                                            of
                                                            { (#,#) ipv_s96nY [Occ=Once]
                                                                    ipv1_s96nZ [Occ=Once] ->
                                                                  let {
                                                                    ipv2_s96o0 :: GHC.Ptr.Ptr ()
                                                                    [LclId, Unf=OtherCon []] =
                                                                        CCCS GHC.Ptr.Ptr! [ds1_s96nT]; } in
                                                                  let {
                                                                    sat_s96o1 [Occ=Once]
                                                                      :: [GHC.Ptr.Ptr ()]
                                                                    [LclId] =
                                                                        CCCS :! [ipv2_s96o0
                                                                                 ipv1_s96nZ];
                                                                  } in 
                                                                    case
                                                                        writeMutVar# [var#_s96nW
                                                                                      sat_s96o1
                                                                                      ipv_s96nY]
                                                                    of
                                                                    s2#_s96o2
                                                                    { __DEFAULT ->
                                                                          (#,#) [s2#_s96o2
                                                                                 ipv2_s96o0];
                                                                    };
                                                            };
                                                      };
                                                  1# ->
                                                      raiseIO# [Foreign.Marshal.Alloc.malloc1
                                                                ds_s96nS];
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in  sat_s96o4;

Foreign.Marshal.Pool.$wpooledMallocArray0 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><L,1*U(U)><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s96o5 w1_s96o6 ww_s96o7 w2_s96o8]
        case
            Foreign.Storable.sizeOf
                w_s96o5 Foreign.Marshal.Pool.pooledMallocArray1
        of
        { GHC.Types.I# y_s96oa [Occ=Once] ->
              case +# [ww_s96o7 1#] of sat_s96oc {
                __DEFAULT ->
                    case *# [sat_s96oc y_s96oa] of sat_s96od {
                      __DEFAULT ->
                          case int2Word# [sat_s96od] of sat_s96oe {
                            __DEFAULT ->
                                case __pkg_ccall base-4.11.0.0 [sat_s96oe w2_s96o8] of {
                                  (#,#) ds_s96og [Occ=Once*] ds1_s96oh ->
                                      case eqAddr# [ds1_s96oh __NULL] of {
                                        __DEFAULT ->
                                            case w1_s96o6 of {
                                              GHC.STRef.STRef var#_s96ok ->
                                                  case readMutVar# [var#_s96ok ds_s96og] of {
                                                    (#,#) ipv_s96om [Occ=Once]
                                                          ipv1_s96on [Occ=Once] ->
                                                        let {
                                                          ipv2_s96oo :: GHC.Ptr.Ptr ()
                                                          [LclId, Unf=OtherCon []] =
                                                              CCCS GHC.Ptr.Ptr! [ds1_s96oh]; } in
                                                        let {
                                                          sat_s96op [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                          [LclId] =
                                                              CCCS :! [ipv2_s96oo ipv1_s96on];
                                                        } in 
                                                          case
                                                              writeMutVar# [var#_s96ok
                                                                            sat_s96op
                                                                            ipv_s96om]
                                                          of
                                                          s2#_s96oq
                                                          { __DEFAULT ->
                                                                (#,#) [s2#_s96oq ipv2_s96oo];
                                                          };
                                                  };
                                            };
                                        1# -> raiseIO# [Foreign.Marshal.Alloc.malloc1 ds_s96og];
                                      };
                                };
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledMallocArray2 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><L,1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s96os w1_s96ot w2_s96ou w3_s96ov]
        case w2_s96ou of {
          GHC.Types.I# ww1_s96ox [Occ=Once] ->
              Foreign.Marshal.Pool.$wpooledMallocArray0
                  w_s96os w1_s96ot ww1_s96ox w3_s96ov;
        };

Foreign.Marshal.Pool.pooledMallocArray0
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><L,1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Foreign.Marshal.Pool.pooledMallocArray2
            eta_B4 eta_B3 eta_B2 eta_B1;

lvl22_r95nq :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [106#];

lvl23_r95nr :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [19#];

lvl24_r95ns :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [28#];

lvl25_r95nt :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_r95n7
                                           lvl4_r95n8
                                           lvl6_r95na
                                           lvl22_r95nq
                                           lvl23_r95nr
                                           lvl22_r95nq
                                           lvl24_r95ns];

lvl26_r95nu :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_r95n6
                                                  lvl25_r95nt
                                                  GHC.Stack.Types.EmptyCallStack];

Foreign.Marshal.Pool.pooledMalloc1 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl26_r95nu;

Foreign.Marshal.Pool.pooledMalloc
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s96oy]
        let {
          lvl27_s96oz [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [$dStorable_s96oy] \u []
                  Foreign.Storable.sizeOf
                      $dStorable_s96oy Foreign.Marshal.Pool.pooledMalloc1; } in
        let {
          sat_s96oT [Occ=Once]
            :: Foreign.Marshal.Pool.Pool
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a_a94Og #)
          [LclId] =
              [lvl27_s96oz] \r [pool_s96oA s_s96oB]
                  case lvl27_s96oz of {
                    GHC.Types.I# x#_s96oD [Occ=Once] ->
                        case int2Word# [x#_s96oD] of sat_s96oF {
                          __DEFAULT ->
                              case __pkg_ccall base-4.11.0.0 [sat_s96oF s_s96oB] of {
                                (#,#) ds_s96oH [Occ=Once*] ds1_s96oI ->
                                    case eqAddr# [ds1_s96oI __NULL] of {
                                      __DEFAULT ->
                                          case pool_s96oA of {
                                            GHC.STRef.STRef var#_s96oL ->
                                                case readMutVar# [var#_s96oL ds_s96oH] of {
                                                  (#,#) ipv_s96oN [Occ=Once]
                                                        ipv1_s96oO [Occ=Once] ->
                                                      let {
                                                        ipv2_s96oP :: GHC.Ptr.Ptr ()
                                                        [LclId, Unf=OtherCon []] =
                                                            CCCS GHC.Ptr.Ptr! [ds1_s96oI]; } in
                                                      let {
                                                        sat_s96oQ [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                        [LclId] =
                                                            CCCS :! [ipv2_s96oP ipv1_s96oO];
                                                      } in 
                                                        case
                                                            writeMutVar# [var#_s96oL
                                                                          sat_s96oQ
                                                                          ipv_s96oN]
                                                        of
                                                        s2#_s96oR
                                                        { __DEFAULT -> (#,#) [s2#_s96oR ipv2_s96oP];
                                                        };
                                                };
                                          };
                                      1# -> raiseIO# [Foreign.Marshal.Alloc.malloc1 ds_s96oH];
                                    };
                              };
                        };
                  };
        } in  sat_s96oT;

Foreign.Marshal.Pool.pooledNewArray2
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> a
     -> [a]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=5,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,U))))),A,A,A,A)><L,1*U(U)><L,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s96oU pool_s96oV marker_s96oW vals_s96oX s_s96oY]
        case GHC.List.$wlenAcc vals_s96oX 0# of ww2_s96oZ {
          __DEFAULT ->
              case
                  Foreign.Storable.sizeOf
                      $dStorable_s96oU Foreign.Marshal.Pool.pooledMallocArray1
              of
              { GHC.Types.I# y_s96p1 [Occ=Once] ->
                    case +# [ww2_s96oZ 1#] of sat_s96p3 {
                      __DEFAULT ->
                          case *# [sat_s96p3 y_s96p1] of sat_s96p4 {
                            __DEFAULT ->
                                case int2Word# [sat_s96p4] of sat_s96p5 {
                                  __DEFAULT ->
                                      case __pkg_ccall base-4.11.0.0 [sat_s96p5 s_s96oY] of {
                                        (#,#) ds_s96p7 [Occ=Once*] ds1_s96p8 ->
                                            case eqAddr# [ds1_s96p8 __NULL] of {
                                              __DEFAULT ->
                                                  case pool_s96oV of {
                                                    GHC.STRef.STRef var#_s96pb ->
                                                        case readMutVar# [var#_s96pb ds_s96p7] of {
                                                          (#,#) ipv_s96pd [Occ=Once]
                                                                ipv1_s96pe [Occ=Once] ->
                                                              let {
                                                                ipv2_s96pf :: GHC.Ptr.Ptr ()
                                                                [LclId, Unf=OtherCon []] =
                                                                    CCCS GHC.Ptr.Ptr! [ds1_s96p8]; } in
                                                              let {
                                                                sat_s96pg [Occ=Once]
                                                                  :: [GHC.Ptr.Ptr ()]
                                                                [LclId] =
                                                                    CCCS :! [ipv2_s96pf ipv1_s96pe];
                                                              } in 
                                                                case
                                                                    writeMutVar# [var#_s96pb
                                                                                  sat_s96pg
                                                                                  ipv_s96pd]
                                                                of
                                                                s2#_s96ph
                                                                { __DEFAULT ->
                                                                      case
                                                                          Foreign.Marshal.Array.newArray4
                                                                              $dStorable_s96oU
                                                                              marker_s96oW
                                                                              ipv2_s96pf
                                                                              vals_s96oX
                                                                              s2#_s96ph
                                                                      of
                                                                      { (#,#) ipv3_s96pj [Occ=Once]
                                                                              _ [Occ=Dead] ->
                                                                            (#,#) [ipv3_s96pj
                                                                                   ipv2_s96pf];
                                                                      };
                                                                };
                                                        };
                                                  };
                                              1# ->
                                                  raiseIO# [Foreign.Marshal.Alloc.malloc1 ds_s96p7];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledNewArray0
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> a -> [a] -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=5,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,U))))),A,A,A,A)><L,1*U(U)><L,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Foreign.Marshal.Pool.pooledNewArray2
            eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Foreign.Marshal.Pool.pooledNewArray1
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> [a]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><L,1*U(U)><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s96pm pool_s96pn vals_s96po s_s96pp]
        case GHC.List.$wlenAcc vals_s96po 0# of ww2_s96pq {
          __DEFAULT ->
              case
                  Foreign.Storable.sizeOf
                      $dStorable_s96pm Foreign.Marshal.Pool.pooledMallocArray1
              of
              { GHC.Types.I# y_s96ps [Occ=Once] ->
                    case *# [ww2_s96pq y_s96ps] of sat_s96pu {
                      __DEFAULT ->
                          case int2Word# [sat_s96pu] of sat_s96pv {
                            __DEFAULT ->
                                case __pkg_ccall base-4.11.0.0 [sat_s96pv s_s96pp] of {
                                  (#,#) ds_s96px [Occ=Once*] ds1_s96py ->
                                      case eqAddr# [ds1_s96py __NULL] of {
                                        __DEFAULT ->
                                            case pool_s96pn of {
                                              GHC.STRef.STRef var#_s96pB ->
                                                  case readMutVar# [var#_s96pB ds_s96px] of {
                                                    (#,#) ipv_s96pD [Occ=Once]
                                                          ipv1_s96pE [Occ=Once] ->
                                                        let {
                                                          ipv2_s96pF :: GHC.Ptr.Ptr ()
                                                          [LclId, Unf=OtherCon []] =
                                                              CCCS GHC.Ptr.Ptr! [ds1_s96py]; } in
                                                        let {
                                                          sat_s96pG [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                          [LclId] =
                                                              CCCS :! [ipv2_s96pF ipv1_s96pE];
                                                        } in 
                                                          case
                                                              writeMutVar# [var#_s96pB
                                                                            sat_s96pG
                                                                            ipv_s96pD]
                                                          of
                                                          s2#_s96pH
                                                          { __DEFAULT ->
                                                                case
                                                                    Foreign.Marshal.Array.newArray2
                                                                        $dStorable_s96pm
                                                                        ipv2_s96pF
                                                                        vals_s96po
                                                                        s2#_s96pH
                                                                of
                                                                { (#,#) ipv3_s96pJ [Occ=Once]
                                                                        _ [Occ=Dead] ->
                                                                      (#,#) [ipv3_s96pJ ipv2_s96pF];
                                                                };
                                                          };
                                                  };
                                            };
                                        1# -> raiseIO# [Foreign.Marshal.Alloc.malloc1 ds_s96px];
                                      };
                                };
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledNewArray
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool -> [a] -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><L,1*U(U)><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Foreign.Marshal.Pool.pooledNewArray1 eta_B4 eta_B3 eta_B2 eta_B1;

Foreign.Marshal.Pool.pooledNew1
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,A,A,A,A,1*C1(C1(C1(U(U,A)))))><L,1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s96pM pool_s96pN val_s96pO s_s96pP]
        case
            Foreign.Storable.sizeOf
                $dStorable_s96pM Foreign.Marshal.Pool.pooledMalloc1
        of
        { GHC.Types.I# x#_s96pR [Occ=Once] ->
              case int2Word# [x#_s96pR] of sat_s96pT {
                __DEFAULT ->
                    case __pkg_ccall base-4.11.0.0 [sat_s96pT s_s96pP] of {
                      (#,#) ds_s96pV [Occ=Once*] ds1_s96pW ->
                          case eqAddr# [ds1_s96pW __NULL] of {
                            __DEFAULT ->
                                case pool_s96pN of {
                                  GHC.STRef.STRef var#_s96pZ ->
                                      case readMutVar# [var#_s96pZ ds_s96pV] of {
                                        (#,#) ipv_s96q1 [Occ=Once] ipv1_s96q2 [Occ=Once] ->
                                            let {
                                              ipv2_s96q3 :: GHC.Ptr.Ptr ()
                                              [LclId, Unf=OtherCon []] =
                                                  CCCS GHC.Ptr.Ptr! [ds1_s96pW]; } in
                                            let {
                                              sat_s96q4 [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                              [LclId] =
                                                  CCCS :! [ipv2_s96q3 ipv1_s96q2];
                                            } in 
                                              case
                                                  writeMutVar# [var#_s96pZ sat_s96q4 ipv_s96q1]
                                              of
                                              s2#_s96q5
                                              { __DEFAULT ->
                                                    case
                                                        Foreign.Storable.poke
                                                            $dStorable_s96pM
                                                            ipv2_s96q3
                                                            val_s96pO
                                                            s2#_s96q5
                                                    of
                                                    { (#,#) ipv3_s96q7 [Occ=Once] _ [Occ=Dead] ->
                                                          (#,#) [ipv3_s96q7 ipv2_s96q3];
                                                    };
                                              };
                                      };
                                };
                            1# -> raiseIO# [Foreign.Marshal.Alloc.malloc1 ds_s96pV];
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledNew
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool -> a -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,A,A,A,A,1*C1(C1(C1(U(U,A)))))><L,1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Foreign.Marshal.Pool.pooledNew1 eta_B4 eta_B3 eta_B2 eta_B1;

Foreign.Marshal.Pool.freePool2 [Occ=LoopBreaker]
  :: [GHC.Ptr.Ptr ()]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s96qa eta_s96qb]
        case ds_s96qa of {
          [] -> (#,#) [eta_s96qb GHC.Tuple.()];
          : p_s96qd [Occ=Once!] ps_s96qe [Occ=Once] ->
              case p_s96qd of {
                GHC.Ptr.Ptr ds2_s96qg [Occ=Once] ->
                    case __pkg_ccall base-4.11.0.0 [ds2_s96qg eta_s96qb] of {
                      Unit# ds4_s96qj [Occ=Once] ->
                          Foreign.Marshal.Pool.freePool2 ps_s96qe ds4_s96qj;
                    };
              };
        };

Foreign.Marshal.Pool.freePool1
  :: Foreign.Marshal.Pool.Pool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s96qk s_s96ql]
        case ds_s96qk of {
          GHC.STRef.STRef var#_s96qn [Occ=Once] ->
              case readMutVar# [var#_s96qn s_s96ql] of {
                (#,#) ipv_s96qp [Occ=Once] ipv1_s96qq [Occ=Once] ->
                    Foreign.Marshal.Pool.freePool2 ipv1_s96qq ipv_s96qp;
              };
        };

Foreign.Marshal.Pool.freePool
  :: Foreign.Marshal.Pool.Pool -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Foreign.Marshal.Pool.freePool1 eta_B2 eta_B1;

Foreign.Marshal.Pool.newPool1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Foreign.Marshal.Pool.Pool #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s96qr]
        case newMutVar# [GHC.Types.[] s_s96qr] of {
          (#,#) ipv_s96qt [Occ=Once] ipv1_s96qu [Occ=Once] ->
              let {
                sat_s96qv [Occ=Once] :: Foreign.Marshal.Pool.Pool
                [LclId] =
                    CCCS GHC.STRef.STRef! [ipv1_s96qu];
              } in  (#,#) [ipv_s96qt sat_s96qv];
        };

Foreign.Marshal.Pool.newPool
  :: GHC.Types.IO Foreign.Marshal.Pool.Pool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] Foreign.Marshal.Pool.newPool1 eta_B1;

Foreign.Marshal.Pool.withPool1
  :: forall b.
     (Foreign.Marshal.Pool.Pool -> GHC.Types.IO b)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [act_s96qw eta_s96qx]
        case getMaskingState# [eta_s96qx] of {
          (#,#) ipv_s96qz [Occ=Once*] ipv1_s96qA [Occ=Once!] ->
              let-no-escape {
                io_s96qB [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                  :: (forall a. GHC.Types.IO a -> GHC.Types.IO a)
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                [LclId[JoinId(2)],
                 Arity=2,
                 Str=<C(S),1*C1(U)><S,U>,
                 Unf=OtherCon []] =
                    sat-only [act_s96qw] \r [restore_s96qC s_s96qD]
                        case newMutVar# [GHC.Types.[] s_s96qD] of {
                          (#,#) ipv2_s96qF [Occ=Once] ipv3_s96qG ->
                              let {
                                sat_s96qI [Occ=Once] :: GHC.Types.IO b_a94PM
                                [LclId] =
                                    [act_s96qw ipv3_s96qG] \u []
                                        let {
                                          sat_s96qH [Occ=Once] :: Foreign.Marshal.Pool.Pool
                                          [LclId] =
                                              CCCS GHC.STRef.STRef! [ipv3_s96qG];
                                        } in  act_s96qw sat_s96qH;
                              } in 
                                case restore_s96qC sat_s96qI of io1_s96qJ {
                                  __DEFAULT ->
                                      let {
                                        sat_s96qX [Occ=Once]
                                          :: GHC.Exception.SomeException
                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                                        [LclId] =
                                            [ipv3_s96qG] \r [ds2_s96qK]
                                                case ds2_s96qK of {
                                                  GHC.Exception.SomeException $dException_s96qM [Occ=Once]
                                                                              e1_s96qN [Occ=Once] ->
                                                      let {
                                                        sat_s96qW [Occ=OnceT[0]]
                                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   b_a94PM #)
                                                        [LclId] =
                                                            [ipv3_s96qG
                                                             $dException_s96qM
                                                             e1_s96qN] \r [s1_s96qO]
                                                                case
                                                                    readMutVar# [ipv3_s96qG
                                                                                 s1_s96qO]
                                                                of
                                                                { (#,#) ipv4_s96qQ [Occ=Once]
                                                                        ipv5_s96qR [Occ=Once] ->
                                                                      case
                                                                          Foreign.Marshal.Pool.freePool2
                                                                              ipv5_s96qR ipv4_s96qQ
                                                                      of
                                                                      { (#,#) _ [Occ=Dead]
                                                                              _ [Occ=Dead] ->
                                                                            GHC.Exception.throw
                                                                                $dException_s96qM
                                                                                e1_s96qN;
                                                                      };
                                                                };
                                                      } in  sat_s96qW;
                                                };
                                      } in 
                                        case catch# [io1_s96qJ sat_s96qX ipv2_s96qF] of {
                                          (#,#) ipv4_s96qZ [Occ=Once] ipv5_s96r0 [Occ=Once] ->
                                              case readMutVar# [ipv3_s96qG ipv4_s96qZ] of {
                                                (#,#) ipv6_s96r2 [Occ=Once] ipv7_s96r3 [Occ=Once] ->
                                                    case
                                                        Foreign.Marshal.Pool.freePool2
                                                            ipv7_s96r3 ipv6_s96r2
                                                    of
                                                    { (#,#) ipv8_s96r5 [Occ=Once] _ [Occ=Dead] ->
                                                          (#,#) [ipv8_s96r5 ipv5_s96r0];
                                                    };
                                              };
                                        };
                                };
                        };
              } in 
                case ipv1_s96qA of {
                  __DEFAULT ->
                      let {
                        sat_s96r8 [Occ=Once] :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                        [LclId] =
                            [] \r [eta_B2 eta_B1] maskAsyncExceptions# [eta_B2 eta_B1];
                      } in  io_s96qB sat_s96r8 ipv_s96qz;
                  0# ->
                      let {
                        sat_s96rD [Occ=Once]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                        [LclId] =
                            [act_s96qw] \r [s_s96r9]
                                case newMutVar# [GHC.Types.[] s_s96r9] of {
                                  (#,#) ipv2_s96rb [Occ=Once] ipv3_s96rc ->
                                      let {
                                        sat_s96rt [Occ=Once]
                                          :: GHC.Exception.SomeException
                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                                        [LclId] =
                                            [ipv3_s96rc] \r [ds3_s96rg]
                                                case ds3_s96rg of {
                                                  GHC.Exception.SomeException $dException_s96ri [Occ=Once]
                                                                              e1_s96rj [Occ=Once] ->
                                                      let {
                                                        sat_s96rs [Occ=OnceT[0]]
                                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   b_a94PM #)
                                                        [LclId] =
                                                            [ipv3_s96rc
                                                             $dException_s96ri
                                                             e1_s96rj] \r [s1_s96rk]
                                                                case
                                                                    readMutVar# [ipv3_s96rc
                                                                                 s1_s96rk]
                                                                of
                                                                { (#,#) ipv4_s96rm [Occ=Once]
                                                                        ipv5_s96rn [Occ=Once] ->
                                                                      case
                                                                          Foreign.Marshal.Pool.freePool2
                                                                              ipv5_s96rn ipv4_s96rm
                                                                      of
                                                                      { (#,#) _ [Occ=Dead]
                                                                              _ [Occ=Dead] ->
                                                                            GHC.Exception.throw
                                                                                $dException_s96ri
                                                                                e1_s96rj;
                                                                      };
                                                                };
                                                      } in  sat_s96rs;
                                                }; } in
                                      let {
                                        sat_s96re [Occ=Once]
                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                                        [LclId] =
                                            [act_s96qw ipv3_s96rc] \u []
                                                let {
                                                  sat_s96rd [Occ=Once] :: Foreign.Marshal.Pool.Pool
                                                  [LclId] =
                                                      CCCS GHC.STRef.STRef! [ipv3_s96rc];
                                                } in  act_s96qw sat_s96rd; } in
                                      let {
                                        sat_s96rf [Occ=Once]
                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                                        [LclId] =
                                            [sat_s96re] \r [eta_B1]
                                                unmaskAsyncExceptions# [sat_s96re eta_B1];
                                      } in 
                                        case catch# [sat_s96rf sat_s96rt ipv2_s96rb] of {
                                          (#,#) ipv4_s96rv [Occ=Once] ipv5_s96rw [Occ=Once] ->
                                              case readMutVar# [ipv3_s96rc ipv4_s96rv] of {
                                                (#,#) ipv6_s96ry [Occ=Once] ipv7_s96rz [Occ=Once] ->
                                                    case
                                                        Foreign.Marshal.Pool.freePool2
                                                            ipv7_s96rz ipv6_s96ry
                                                    of
                                                    { (#,#) ipv8_s96rB [Occ=Once] _ [Occ=Dead] ->
                                                          (#,#) [ipv8_s96rB ipv5_s96rw];
                                                    };
                                              };
                                        };
                                };
                      } in  maskAsyncExceptions# [sat_s96rD ipv_s96qz];
                  1# ->
                      let {
                        sat_s96rE [Occ=Once] :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                        [LclId] =
                            [] \r [eta_B2 eta_B1] maskUninterruptible# [eta_B2 eta_B1];
                      } in  io_s96qB sat_s96rE ipv_s96qz;
                };
        };

Foreign.Marshal.Pool.withPool
  :: forall b.
     (Foreign.Marshal.Pool.Pool -> GHC.Types.IO b) -> GHC.Types.IO b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Foreign.Marshal.Pool.withPool1 eta_B2 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:04:16.727784757 UTC

Foreign.Marshal.Pool.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Foreign.Marshal.Pool.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Marshal.Pool.$trModule4];

Foreign.Marshal.Pool.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Foreign.Marshal.Pool"#;

Foreign.Marshal.Pool.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Marshal.Pool.$trModule2];

Foreign.Marshal.Pool.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Foreign.Marshal.Pool.$trModule3
                                     Foreign.Marshal.Pool.$trModule1];

$krep_r95mW :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep1_r95mX :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r95mW GHC.Types.[]];

$krep2_r95mY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Ptr.$tcPtr
                                              $krep1_r95mX];

$krep3_r95mZ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r95mY GHC.Types.[]];

$krep4_r95n0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep3_r95mZ];

$krep5_r95n1 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep4_r95n0 GHC.Types.[]];

$krep6_r95n2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep5_r95n1];

Foreign.Marshal.Pool.$tcPool2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Pool"#;

Foreign.Marshal.Pool.$tcPool1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Marshal.Pool.$tcPool2];

Foreign.Marshal.Pool.$tcPool :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6812857741828992361##
                                    12127662557529231519##
                                    Foreign.Marshal.Pool.$trModule
                                    Foreign.Marshal.Pool.$tcPool1
                                    0#
                                    GHC.Types.krep$*];

$krep7_r95n3 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.Marshal.Pool.$tcPool
                                              GHC.Types.[]];

Foreign.Marshal.Pool.$tc'Pool1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_r95n2 $krep7_r95n3];

Foreign.Marshal.Pool.$tc'Pool3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Pool"#;

Foreign.Marshal.Pool.$tc'Pool2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Marshal.Pool.$tc'Pool3];

Foreign.Marshal.Pool.$tc'Pool :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11588816997626637361##
                                    15405086111208545194##
                                    Foreign.Marshal.Pool.$trModule
                                    Foreign.Marshal.Pool.$tc'Pool2
                                    0#
                                    Foreign.Marshal.Pool.$tc'Pool1];

lvl_r95n4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "pointer not in pool"#;

Foreign.Marshal.Pool.pooledRealloc2
  :: [GHC.Ptr.Ptr ()] -> [GHC.Types.Char]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s96lZ] GHC.CString.unpackCString# lvl_r95n4;

Foreign.Marshal.Pool.$wpooledReallocBytes [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.MutVar# GHC.Prim.RealWorld [GHC.Ptr.Ptr ()]
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId, Arity=4, Str=<S,U><S,U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s96m0 ww1_s96m1 ww2_s96m2 void_0E]
        case readMutVar# [ww_s96m0 GHC.Prim.void#] of {
          Unit# ipv1_s96m6 ->
              let {
                sat_s96m7 [Occ=Once] :: GHC.Ptr.Ptr ()
                [LclId] =
                    CCCS GHC.Ptr.Ptr! [ww1_s96m1];
              } in 
                case GHC.List.elem GHC.Ptr.$fEqPtr sat_s96m7 ipv1_s96m6 of {
                  GHC.Types.False ->
                      Foreign.Marshal.Error.throwIf2
                          ipv1_s96m6 Foreign.Marshal.Pool.pooledRealloc2 GHC.Prim.void#;
                  GHC.Types.True ->
                      case ww2_s96m2 of ds_s96ma {
                        __DEFAULT ->
                            case int2Word# [ds_s96ma] of sat_s96mc {
                              __DEFAULT ->
                                  case
                                      __pkg_ccall base-4.11.0.0 [ww1_s96m1 sat_s96mc GHC.Prim.void#]
                                  of
                                  { Unit# ds3_s96mf ->
                                        case eqAddr# [ds3_s96mf __NULL] of {
                                          __DEFAULT ->
                                              case readMutVar# [ww_s96m0 GHC.Prim.void#] of {
                                                Unit# ipv3_s96mj [Occ=Once] ->
                                                    let {
                                                      ipv4_s96mk :: GHC.Ptr.Ptr ()
                                                      [LclId, Unf=OtherCon []] =
                                                          CCCS GHC.Ptr.Ptr! [ds3_s96mf]; } in
                                                    let {
                                                      sat_s96mm [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                      [LclId] =
                                                          [ww1_s96m1 ipv3_s96mj] \u []
                                                              let {
                                                                sat_s96ml [Occ=Once]
                                                                  :: GHC.Ptr.Ptr ()
                                                                [LclId] =
                                                                    CCCS GHC.Ptr.Ptr! [ww1_s96m1];
                                                              } in 
                                                                Data.OldList.deleteBy
                                                                    GHC.Ptr.$fEqPtr_$c==
                                                                    sat_s96ml
                                                                    ipv3_s96mj; } in
                                                    let {
                                                      sat_s96mn [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                      [LclId] =
                                                          CCCS :! [ipv4_s96mk sat_s96mm];
                                                    } in 
                                                      case
                                                          writeMutVar# [ww_s96m0
                                                                        sat_s96mn
                                                                        GHC.Prim.void#]
                                                      of
                                                      s2#_s96mo
                                                      { (##) -> Unit# [ipv4_s96mk];
                                                      };
                                              };
                                          1# ->
                                              raiseIO# [Foreign.Marshal.Alloc.realloc2
                                                        GHC.Prim.void#];
                                        };
                                  };
                            };
                        0# ->
                            case __pkg_ccall base-4.11.0.0 [ww1_s96m1 GHC.Prim.void#] of {
                              (##) ->
                                  case readMutVar# [ww_s96m0 GHC.Prim.void#] of {
                                    Unit# ipv3_s96mv [Occ=Once] ->
                                        let {
                                          sat_s96mx [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                          [LclId] =
                                              [ww1_s96m1 ipv3_s96mv] \u []
                                                  let {
                                                    sat_s96mw [Occ=Once] :: GHC.Ptr.Ptr ()
                                                    [LclId] =
                                                        CCCS GHC.Ptr.Ptr! [ww1_s96m1];
                                                  } in 
                                                    Data.OldList.deleteBy
                                                        GHC.Ptr.$fEqPtr_$c==
                                                        sat_s96mw
                                                        ipv3_s96mv; } in
                                        let {
                                          sat_s96my [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                          [LclId] =
                                              CCCS :! [GHC.Ptr.nullPtr sat_s96mx];
                                        } in 
                                          case
                                              writeMutVar# [ww_s96m0 sat_s96my GHC.Prim.void#]
                                          of
                                          s2#_s96mz
                                          { (##) -> Unit# [GHC.Ptr.nullPtr];
                                          };
                                  };
                            };
                      };
                };
        };

Foreign.Marshal.Pool.pooledRealloc1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s96mA w1_s96mB w2_s96mC void_0E]
        case w_s96mA of {
          GHC.STRef.STRef ww1_s96mF [Occ=Once] ->
              case w1_s96mB of {
                GHC.Ptr.Ptr ww3_s96mH [Occ=Once] ->
                    case w2_s96mC of {
                      GHC.Types.I# ww5_s96mJ [Occ=Once] ->
                          Foreign.Marshal.Pool.$wpooledReallocBytes
                              ww1_s96mF ww3_s96mH ww5_s96mJ GHC.Prim.void#;
                    };
              };
        };

Foreign.Marshal.Pool.pooledReallocBytes
  :: forall a.
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=4,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        Foreign.Marshal.Pool.pooledRealloc1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

lvl1_r95n5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "undefined"#;

lvl2_r95n6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl1_r95n5;

lvl3_r95n7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# Foreign.Marshal.Pool.$trModule4;

lvl4_r95n8 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# Foreign.Marshal.Pool.$trModule2;

lvl5_r95n9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./Foreign/Marshal/Pool.hs"#;

lvl6_r95na :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_r95n9;

lvl7_r95nb :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [159#];

lvl8_r95nc :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [26#];

lvl9_r95nd :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [35#];

lvl10_r95ne :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_r95n7
                                           lvl4_r95n8
                                           lvl6_r95na
                                           lvl7_r95nb
                                           lvl8_r95nc
                                           lvl7_r95nb
                                           lvl9_r95nd];

lvl11_r95nf :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_r95n6
                                                  lvl10_r95ne
                                                  GHC.Stack.Types.EmptyCallStack];

Foreign.Marshal.Pool.pooledReallocArray1 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl11_r95nf;

Foreign.Marshal.Pool.pooledReallocArray
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s96mK]
        let {
          lvl27_s96mL [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [$dStorable_s96mK] \u []
                  Foreign.Storable.sizeOf
                      $dStorable_s96mK Foreign.Marshal.Pool.pooledReallocArray1; } in
        let {
          sat_s96mZ [Occ=Once]
            :: Foreign.Marshal.Pool.Pool
               -> GHC.Ptr.Ptr a_a94L7
               -> GHC.Types.Int
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a_a94L7 #)
          [LclId] =
              [lvl27_s96mL] \r [pool_s96mM ptr_s96mN size_s96mO void_0E]
                  case pool_s96mM of {
                    GHC.STRef.STRef ww1_s96mR [Occ=Once] ->
                        case ptr_s96mN of {
                          GHC.Ptr.Ptr ww3_s96mT [Occ=Once] ->
                              case size_s96mO of {
                                GHC.Types.I# x_s96mV [Occ=Once] ->
                                    case lvl27_s96mL of {
                                      GHC.Types.I# y_s96mX [Occ=Once] ->
                                          case *# [x_s96mV y_s96mX] of sat_s96mY {
                                            __DEFAULT ->
                                                Foreign.Marshal.Pool.$wpooledReallocBytes
                                                    ww1_s96mR ww3_s96mT sat_s96mY GHC.Prim.void#;
                                          };
                                    };
                              };
                        };
                  };
        } in  sat_s96mZ;

Foreign.Marshal.Pool.pooledReallocArray2
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=5,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s96n0 pool_s96n1 ptr_s96n2 size_s96n3 void_0E]
        case pool_s96n1 of {
          GHC.STRef.STRef ww1_s96n6 [Occ=Once] ->
              case ptr_s96n2 of {
                GHC.Ptr.Ptr ww3_s96n8 [Occ=Once] ->
                    case size_s96n3 of {
                      GHC.Types.I# x_s96na [Occ=Once] ->
                          case
                              Foreign.Storable.sizeOf
                                  $dStorable_s96n0 Foreign.Marshal.Pool.pooledReallocArray1
                          of
                          { GHC.Types.I# y_s96nc [Occ=Once] ->
                                case +# [x_s96na 1#] of sat_s96nd {
                                  __DEFAULT ->
                                      case *# [sat_s96nd y_s96nc] of sat_s96ne {
                                        __DEFAULT ->
                                            Foreign.Marshal.Pool.$wpooledReallocBytes
                                                ww1_s96n6 ww3_s96n8 sat_s96ne GHC.Prim.void#;
                                      };
                                };
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledReallocArray0
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=5,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        Foreign.Marshal.Pool.pooledReallocArray2
            eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

lvl12_r95ng :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [124#];

lvl13_r95nh :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [20#];

lvl14_r95ni :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [29#];

lvl15_r95nj :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_r95n7
                                           lvl4_r95n8
                                           lvl6_r95na
                                           lvl12_r95ng
                                           lvl13_r95nh
                                           lvl12_r95ng
                                           lvl14_r95ni];

lvl16_r95nk :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_r95n6
                                                  lvl15_r95nj
                                                  GHC.Stack.Types.EmptyCallStack];

Foreign.Marshal.Pool.pooledRealloc3 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl16_r95nk;

Foreign.Marshal.Pool.pooledRealloc
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Ptr.Ptr a -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s96nf]
        let {
          lvl27_s96ng [Occ=OnceL, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [$dStorable_s96nf] \u []
                  Foreign.Storable.sizeOf
                      $dStorable_s96nf Foreign.Marshal.Pool.pooledRealloc3; } in
        let {
          sat_s96nk [Occ=Once]
            :: Foreign.Marshal.Pool.Pool
               -> GHC.Ptr.Ptr a_a94LU
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a_a94LU #)
          [LclId] =
              [lvl27_s96ng] \r [pool_s96nh ptr_s96ni void_0E]
                  Foreign.Marshal.Pool.pooledRealloc1
                      pool_s96nh ptr_s96ni lvl27_s96ng GHC.Prim.void#;
        } in  sat_s96nk;

Foreign.Marshal.Pool.pooledMallocBytes1
  :: forall a.
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=3,
 Str=<L,1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s96nl size_s96nm void_0E]
        case size_s96nm of {
          GHC.Types.I# x#_s96np [Occ=Once] ->
              case int2Word# [x#_s96np] of sat_s96nr {
                __DEFAULT ->
                    case __pkg_ccall base-4.11.0.0 [sat_s96nr GHC.Prim.void#] of {
                      Unit# ds2_s96nu ->
                          case eqAddr# [ds2_s96nu __NULL] of {
                            __DEFAULT ->
                                case ds_s96nl of {
                                  GHC.STRef.STRef var#_s96nx ->
                                      case readMutVar# [var#_s96nx GHC.Prim.void#] of {
                                        Unit# ipv1_s96nA [Occ=Once] ->
                                            let {
                                              ipv2_s96nB :: GHC.Ptr.Ptr ()
                                              [LclId, Unf=OtherCon []] =
                                                  CCCS GHC.Ptr.Ptr! [ds2_s96nu]; } in
                                            let {
                                              sat_s96nC [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                              [LclId] =
                                                  CCCS :! [ipv2_s96nB ipv1_s96nA];
                                            } in 
                                              case
                                                  writeMutVar# [var#_s96nx sat_s96nC GHC.Prim.void#]
                                              of
                                              s2#_s96nD
                                              { (##) -> Unit# [ipv2_s96nB];
                                              };
                                      };
                                };
                            1# -> raiseIO# [Foreign.Marshal.Alloc.malloc1 GHC.Prim.void#];
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledMallocBytes
  :: forall a.
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=3,
 Str=<L,1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        Foreign.Marshal.Pool.pooledMallocBytes1
            eta_B3 eta_B2 GHC.Prim.void#;

lvl17_r95nl :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [144#];

lvl18_r95nm :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [25#];

lvl19_r95nn :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [34#];

lvl20_r95no :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_r95n7
                                           lvl4_r95n8
                                           lvl6_r95na
                                           lvl17_r95nl
                                           lvl18_r95nm
                                           lvl17_r95nl
                                           lvl19_r95nn];

lvl21_r95np :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_r95n6
                                                  lvl20_r95no
                                                  GHC.Stack.Types.EmptyCallStack];

Foreign.Marshal.Pool.pooledMallocArray1 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl21_r95np;

Foreign.Marshal.Pool.pooledMallocArray
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s96nF]
        let {
          lvl27_s96nG [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [$dStorable_s96nF] \u []
                  Foreign.Storable.sizeOf
                      $dStorable_s96nF Foreign.Marshal.Pool.pooledMallocArray1; } in
        let {
          sat_s96o4 [Occ=Once]
            :: Foreign.Marshal.Pool.Pool
               -> GHC.Types.Int
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a_a94MR #)
          [LclId] =
              [lvl27_s96nG] \r [pool_s96nH size_s96nI void_0E]
                  case size_s96nI of {
                    GHC.Types.I# x_s96nL [Occ=Once] ->
                        case lvl27_s96nG of {
                          GHC.Types.I# y_s96nN [Occ=Once] ->
                              case *# [x_s96nL y_s96nN] of sat_s96nP {
                                __DEFAULT ->
                                    case int2Word# [sat_s96nP] of sat_s96nQ {
                                      __DEFAULT ->
                                          case
                                              __pkg_ccall base-4.11.0.0 [sat_s96nQ GHC.Prim.void#]
                                          of
                                          { Unit# ds1_s96nT ->
                                                case eqAddr# [ds1_s96nT __NULL] of {
                                                  __DEFAULT ->
                                                      case pool_s96nH of {
                                                        GHC.STRef.STRef var#_s96nW ->
                                                            case
                                                                readMutVar# [var#_s96nW
                                                                             GHC.Prim.void#]
                                                            of
                                                            { Unit# ipv1_s96nZ [Occ=Once] ->
                                                                  let {
                                                                    ipv2_s96o0 :: GHC.Ptr.Ptr ()
                                                                    [LclId, Unf=OtherCon []] =
                                                                        CCCS GHC.Ptr.Ptr! [ds1_s96nT]; } in
                                                                  let {
                                                                    sat_s96o1 [Occ=Once]
                                                                      :: [GHC.Ptr.Ptr ()]
                                                                    [LclId] =
                                                                        CCCS :! [ipv2_s96o0
                                                                                 ipv1_s96nZ];
                                                                  } in 
                                                                    case
                                                                        writeMutVar# [var#_s96nW
                                                                                      sat_s96o1
                                                                                      GHC.Prim.void#]
                                                                    of
                                                                    s2#_s96o2
                                                                    { (##) -> Unit# [ipv2_s96o0];
                                                                    };
                                                            };
                                                      };
                                                  1# ->
                                                      raiseIO# [Foreign.Marshal.Alloc.malloc1
                                                                GHC.Prim.void#];
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in  sat_s96o4;

Foreign.Marshal.Pool.$wpooledMallocArray0 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><L,1*U(U)><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s96o5 w1_s96o6 ww_s96o7 void_0E]
        case
            Foreign.Storable.sizeOf
                w_s96o5 Foreign.Marshal.Pool.pooledMallocArray1
        of
        { GHC.Types.I# y_s96oa [Occ=Once] ->
              case +# [ww_s96o7 1#] of sat_s96oc {
                __DEFAULT ->
                    case *# [sat_s96oc y_s96oa] of sat_s96od {
                      __DEFAULT ->
                          case int2Word# [sat_s96od] of sat_s96oe {
                            __DEFAULT ->
                                case __pkg_ccall base-4.11.0.0 [sat_s96oe GHC.Prim.void#] of {
                                  Unit# ds1_s96oh ->
                                      case eqAddr# [ds1_s96oh __NULL] of {
                                        __DEFAULT ->
                                            case w1_s96o6 of {
                                              GHC.STRef.STRef var#_s96ok ->
                                                  case readMutVar# [var#_s96ok GHC.Prim.void#] of {
                                                    Unit# ipv1_s96on [Occ=Once] ->
                                                        let {
                                                          ipv2_s96oo :: GHC.Ptr.Ptr ()
                                                          [LclId, Unf=OtherCon []] =
                                                              CCCS GHC.Ptr.Ptr! [ds1_s96oh]; } in
                                                        let {
                                                          sat_s96op [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                          [LclId] =
                                                              CCCS :! [ipv2_s96oo ipv1_s96on];
                                                        } in 
                                                          case
                                                              writeMutVar# [var#_s96ok
                                                                            sat_s96op
                                                                            GHC.Prim.void#]
                                                          of
                                                          s2#_s96oq
                                                          { (##) -> Unit# [ipv2_s96oo];
                                                          };
                                                  };
                                            };
                                        1# ->
                                            raiseIO# [Foreign.Marshal.Alloc.malloc1 GHC.Prim.void#];
                                      };
                                };
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledMallocArray2 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><L,1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s96os w1_s96ot w2_s96ou void_0E]
        case w2_s96ou of {
          GHC.Types.I# ww1_s96ox [Occ=Once] ->
              Foreign.Marshal.Pool.$wpooledMallocArray0
                  w_s96os w1_s96ot ww1_s96ox GHC.Prim.void#;
        };

Foreign.Marshal.Pool.pooledMallocArray0
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> GHC.Types.Int -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><L,1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        Foreign.Marshal.Pool.pooledMallocArray2
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

lvl22_r95nq :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [106#];

lvl23_r95nr :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [19#];

lvl24_r95ns :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [28#];

lvl25_r95nt :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_r95n7
                                           lvl4_r95n8
                                           lvl6_r95na
                                           lvl22_r95nq
                                           lvl23_r95nr
                                           lvl22_r95nq
                                           lvl24_r95ns];

lvl26_r95nu :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_r95n6
                                                  lvl25_r95nt
                                                  GHC.Stack.Types.EmptyCallStack];

Foreign.Marshal.Pool.pooledMalloc1 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl26_r95nu;

Foreign.Marshal.Pool.pooledMalloc
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s96oy]
        let {
          lvl27_s96oz [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId] =
              [$dStorable_s96oy] \u []
                  Foreign.Storable.sizeOf
                      $dStorable_s96oy Foreign.Marshal.Pool.pooledMalloc1; } in
        let {
          sat_s96oT [Occ=Once]
            :: Foreign.Marshal.Pool.Pool
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a_a94Og #)
          [LclId] =
              [lvl27_s96oz] \r [pool_s96oA void_0E]
                  case lvl27_s96oz of {
                    GHC.Types.I# x#_s96oD [Occ=Once] ->
                        case int2Word# [x#_s96oD] of sat_s96oF {
                          __DEFAULT ->
                              case __pkg_ccall base-4.11.0.0 [sat_s96oF GHC.Prim.void#] of {
                                Unit# ds1_s96oI ->
                                    case eqAddr# [ds1_s96oI __NULL] of {
                                      __DEFAULT ->
                                          case pool_s96oA of {
                                            GHC.STRef.STRef var#_s96oL ->
                                                case readMutVar# [var#_s96oL GHC.Prim.void#] of {
                                                  Unit# ipv1_s96oO [Occ=Once] ->
                                                      let {
                                                        ipv2_s96oP :: GHC.Ptr.Ptr ()
                                                        [LclId, Unf=OtherCon []] =
                                                            CCCS GHC.Ptr.Ptr! [ds1_s96oI]; } in
                                                      let {
                                                        sat_s96oQ [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                        [LclId] =
                                                            CCCS :! [ipv2_s96oP ipv1_s96oO];
                                                      } in 
                                                        case
                                                            writeMutVar# [var#_s96oL
                                                                          sat_s96oQ
                                                                          GHC.Prim.void#]
                                                        of
                                                        s2#_s96oR
                                                        { (##) -> Unit# [ipv2_s96oP];
                                                        };
                                                };
                                          };
                                      1# -> raiseIO# [Foreign.Marshal.Alloc.malloc1 GHC.Prim.void#];
                                    };
                              };
                        };
                  };
        } in  sat_s96oT;

Foreign.Marshal.Pool.pooledNewArray2
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> a
     -> [a]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=5,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,U))))),A,A,A,A)><L,1*U(U)><L,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s96oU pool_s96oV marker_s96oW vals_s96oX void_0E]
        case GHC.List.$wlenAcc vals_s96oX 0# of ww2_s96oZ {
          __DEFAULT ->
              case
                  Foreign.Storable.sizeOf
                      $dStorable_s96oU Foreign.Marshal.Pool.pooledMallocArray1
              of
              { GHC.Types.I# y_s96p1 [Occ=Once] ->
                    case +# [ww2_s96oZ 1#] of sat_s96p3 {
                      __DEFAULT ->
                          case *# [sat_s96p3 y_s96p1] of sat_s96p4 {
                            __DEFAULT ->
                                case int2Word# [sat_s96p4] of sat_s96p5 {
                                  __DEFAULT ->
                                      case __pkg_ccall base-4.11.0.0 [sat_s96p5 GHC.Prim.void#] of {
                                        Unit# ds1_s96p8 ->
                                            case eqAddr# [ds1_s96p8 __NULL] of {
                                              __DEFAULT ->
                                                  case pool_s96oV of {
                                                    GHC.STRef.STRef var#_s96pb ->
                                                        case
                                                            readMutVar# [var#_s96pb GHC.Prim.void#]
                                                        of
                                                        { Unit# ipv1_s96pe [Occ=Once] ->
                                                              let {
                                                                ipv2_s96pf :: GHC.Ptr.Ptr ()
                                                                [LclId, Unf=OtherCon []] =
                                                                    CCCS GHC.Ptr.Ptr! [ds1_s96p8]; } in
                                                              let {
                                                                sat_s96pg [Occ=Once]
                                                                  :: [GHC.Ptr.Ptr ()]
                                                                [LclId] =
                                                                    CCCS :! [ipv2_s96pf ipv1_s96pe];
                                                              } in 
                                                                case
                                                                    writeMutVar# [var#_s96pb
                                                                                  sat_s96pg
                                                                                  GHC.Prim.void#]
                                                                of
                                                                s2#_s96ph
                                                                { (##) ->
                                                                      case
                                                                          Foreign.Marshal.Array.newArray4
                                                                              $dStorable_s96oU
                                                                              marker_s96oW
                                                                              ipv2_s96pf
                                                                              vals_s96oX
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# _ [Occ=Dead] ->
                                                                            Unit# [ipv2_s96pf];
                                                                      };
                                                                };
                                                        };
                                                  };
                                              1# ->
                                                  raiseIO# [Foreign.Marshal.Alloc.malloc1
                                                            GHC.Prim.void#];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledNewArray0
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> a -> [a] -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=5,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,U))))),A,A,A,A)><L,1*U(U)><L,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        Foreign.Marshal.Pool.pooledNewArray2
            eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

Foreign.Marshal.Pool.pooledNewArray1
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> [a]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><L,1*U(U)><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s96pm pool_s96pn vals_s96po void_0E]
        case GHC.List.$wlenAcc vals_s96po 0# of ww2_s96pq {
          __DEFAULT ->
              case
                  Foreign.Storable.sizeOf
                      $dStorable_s96pm Foreign.Marshal.Pool.pooledMallocArray1
              of
              { GHC.Types.I# y_s96ps [Occ=Once] ->
                    case *# [ww2_s96pq y_s96ps] of sat_s96pu {
                      __DEFAULT ->
                          case int2Word# [sat_s96pu] of sat_s96pv {
                            __DEFAULT ->
                                case __pkg_ccall base-4.11.0.0 [sat_s96pv GHC.Prim.void#] of {
                                  Unit# ds1_s96py ->
                                      case eqAddr# [ds1_s96py __NULL] of {
                                        __DEFAULT ->
                                            case pool_s96pn of {
                                              GHC.STRef.STRef var#_s96pB ->
                                                  case readMutVar# [var#_s96pB GHC.Prim.void#] of {
                                                    Unit# ipv1_s96pE [Occ=Once] ->
                                                        let {
                                                          ipv2_s96pF :: GHC.Ptr.Ptr ()
                                                          [LclId, Unf=OtherCon []] =
                                                              CCCS GHC.Ptr.Ptr! [ds1_s96py]; } in
                                                        let {
                                                          sat_s96pG [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                                          [LclId] =
                                                              CCCS :! [ipv2_s96pF ipv1_s96pE];
                                                        } in 
                                                          case
                                                              writeMutVar# [var#_s96pB
                                                                            sat_s96pG
                                                                            GHC.Prim.void#]
                                                          of
                                                          s2#_s96pH
                                                          { (##) ->
                                                                case
                                                                    Foreign.Marshal.Array.newArray2
                                                                        $dStorable_s96pm
                                                                        ipv2_s96pF
                                                                        vals_s96po
                                                                        GHC.Prim.void#
                                                                of
                                                                { Unit# _ [Occ=Dead] ->
                                                                      Unit# [ipv2_s96pF];
                                                                };
                                                          };
                                                  };
                                            };
                                        1# ->
                                            raiseIO# [Foreign.Marshal.Alloc.malloc1 GHC.Prim.void#];
                                      };
                                };
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledNewArray
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool -> [a] -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><L,1*U(U)><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        Foreign.Marshal.Pool.pooledNewArray1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

Foreign.Marshal.Pool.pooledNew1
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Ptr.Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,A,A,A,A,1*C1(C1(C1(U(U,A)))))><L,1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s96pM pool_s96pN val_s96pO void_0E]
        case
            Foreign.Storable.sizeOf
                $dStorable_s96pM Foreign.Marshal.Pool.pooledMalloc1
        of
        { GHC.Types.I# x#_s96pR [Occ=Once] ->
              case int2Word# [x#_s96pR] of sat_s96pT {
                __DEFAULT ->
                    case __pkg_ccall base-4.11.0.0 [sat_s96pT GHC.Prim.void#] of {
                      Unit# ds1_s96pW ->
                          case eqAddr# [ds1_s96pW __NULL] of {
                            __DEFAULT ->
                                case pool_s96pN of {
                                  GHC.STRef.STRef var#_s96pZ ->
                                      case readMutVar# [var#_s96pZ GHC.Prim.void#] of {
                                        Unit# ipv1_s96q2 [Occ=Once] ->
                                            let {
                                              ipv2_s96q3 :: GHC.Ptr.Ptr ()
                                              [LclId, Unf=OtherCon []] =
                                                  CCCS GHC.Ptr.Ptr! [ds1_s96pW]; } in
                                            let {
                                              sat_s96q4 [Occ=Once] :: [GHC.Ptr.Ptr ()]
                                              [LclId] =
                                                  CCCS :! [ipv2_s96q3 ipv1_s96q2];
                                            } in 
                                              case
                                                  writeMutVar# [var#_s96pZ sat_s96q4 GHC.Prim.void#]
                                              of
                                              s2#_s96q5
                                              { (##) ->
                                                    case
                                                        Foreign.Storable.poke
                                                            $dStorable_s96pM
                                                            ipv2_s96q3
                                                            val_s96pO
                                                            GHC.Prim.void#
                                                    of
                                                    { Unit# _ [Occ=Dead] -> Unit# [ipv2_s96q3];
                                                    };
                                              };
                                      };
                                };
                            1# -> raiseIO# [Foreign.Marshal.Alloc.malloc1 GHC.Prim.void#];
                          };
                    };
              };
        };

Foreign.Marshal.Pool.pooledNew
  :: forall a.
     Foreign.Storable.Storable a =>
     Foreign.Marshal.Pool.Pool -> a -> GHC.Types.IO (GHC.Ptr.Ptr a)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,A,A,A,A,1*C1(C1(C1(U(U,A)))))><L,1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        Foreign.Marshal.Pool.pooledNew1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

Foreign.Marshal.Pool.freePool2 [Occ=LoopBreaker]
  :: [GHC.Ptr.Ptr ()]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s96qa void_0E]
        case ds_s96qa of {
          [] -> Unit# [GHC.Tuple.()];
          : p_s96qd [Occ=Once!] ps_s96qe [Occ=Once] ->
              case p_s96qd of {
                GHC.Ptr.Ptr ds2_s96qg [Occ=Once] ->
                    case __pkg_ccall base-4.11.0.0 [ds2_s96qg GHC.Prim.void#] of {
                      (##) -> Foreign.Marshal.Pool.freePool2 ps_s96qe GHC.Prim.void#;
                    };
              };
        };

Foreign.Marshal.Pool.freePool1
  :: Foreign.Marshal.Pool.Pool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s96qk void_0E]
        case ds_s96qk of {
          GHC.STRef.STRef var#_s96qn [Occ=Once] ->
              case readMutVar# [var#_s96qn GHC.Prim.void#] of {
                Unit# ipv1_s96qq [Occ=Once] ->
                    Foreign.Marshal.Pool.freePool2 ipv1_s96qq GHC.Prim.void#;
              };
        };

Foreign.Marshal.Pool.freePool
  :: Foreign.Marshal.Pool.Pool -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Foreign.Marshal.Pool.freePool1 eta_B2 GHC.Prim.void#;

Foreign.Marshal.Pool.newPool1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Foreign.Marshal.Pool.Pool #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case newMutVar# [GHC.Types.[] GHC.Prim.void#] of {
          Unit# ipv1_s96qu [Occ=Once] ->
              let {
                sat_s96qv [Occ=Once] :: Foreign.Marshal.Pool.Pool
                [LclId] =
                    CCCS GHC.STRef.STRef! [ipv1_s96qu];
              } in  Unit# [sat_s96qv];
        };

Foreign.Marshal.Pool.newPool
  :: GHC.Types.IO Foreign.Marshal.Pool.Pool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Foreign.Marshal.Pool.newPool1 GHC.Prim.void#;

Foreign.Marshal.Pool.withPool1
  :: forall b.
     (Foreign.Marshal.Pool.Pool -> GHC.Types.IO b)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [act_s96qw void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_s96qA [Occ=Once!] ->
              let-no-escape {
                io_s96qB [Occ=Once*!T[2], Dmd=<L,1*C1(C1(U(U,U)))>]
                  :: (forall a. GHC.Types.IO a -> GHC.Types.IO a)
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                [LclId[JoinId(2)],
                 Arity=2,
                 Str=<C(S),1*C1(U)><S,U>,
                 Unf=OtherCon []] =
                    sat-only [act_s96qw] \r [restore_s96qC void_0E]
                        case newMutVar# [GHC.Types.[] GHC.Prim.void#] of {
                          Unit# ipv3_s96qG ->
                              let {
                                sat_s96qI [Occ=Once] :: GHC.Types.IO b_a94PM
                                [LclId] =
                                    [act_s96qw ipv3_s96qG] \u []
                                        let {
                                          sat_s96qH [Occ=Once] :: Foreign.Marshal.Pool.Pool
                                          [LclId] =
                                              CCCS GHC.STRef.STRef! [ipv3_s96qG];
                                        } in  act_s96qw sat_s96qH;
                              } in 
                                case restore_s96qC sat_s96qI of io1_s96qJ {
                                  __DEFAULT ->
                                      let {
                                        sat_s96qX [Occ=Once]
                                          :: GHC.Exception.SomeException
                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                                        [LclId] =
                                            [ipv3_s96qG] \r [ds2_s96qK]
                                                case ds2_s96qK of {
                                                  GHC.Exception.SomeException $dException_s96qM [Occ=Once]
                                                                              e1_s96qN [Occ=Once] ->
                                                      let {
                                                        sat_s96qW [Occ=OnceT[0]]
                                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   b_a94PM #)
                                                        [LclId] =
                                                            [ipv3_s96qG
                                                             $dException_s96qM
                                                             e1_s96qN] \r [void_0E]
                                                                case
                                                                    readMutVar# [ipv3_s96qG
                                                                                 GHC.Prim.void#]
                                                                of
                                                                { Unit# ipv5_s96qR [Occ=Once] ->
                                                                      case
                                                                          Foreign.Marshal.Pool.freePool2
                                                                              ipv5_s96qR
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# _ [Occ=Dead] ->
                                                                            GHC.Exception.throw
                                                                                $dException_s96qM
                                                                                e1_s96qN;
                                                                      };
                                                                };
                                                      } in  sat_s96qW;
                                                };
                                      } in 
                                        case catch# [io1_s96qJ sat_s96qX GHC.Prim.void#] of {
                                          Unit# ipv5_s96r0 [Occ=Once] ->
                                              case readMutVar# [ipv3_s96qG GHC.Prim.void#] of {
                                                Unit# ipv7_s96r3 [Occ=Once] ->
                                                    case
                                                        Foreign.Marshal.Pool.freePool2
                                                            ipv7_s96r3 GHC.Prim.void#
                                                    of
                                                    { Unit# _ [Occ=Dead] -> Unit# [ipv5_s96r0];
                                                    };
                                              };
                                        };
                                };
                        };
              } in 
                case ipv1_s96qA of {
                  __DEFAULT ->
                      let {
                        sat_s96r8 [Occ=Once] :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                        [LclId] =
                            [] \r [eta_B2 void_0E]
                                maskAsyncExceptions# [eta_B2 GHC.Prim.void#];
                      } in  io_s96qB sat_s96r8 GHC.Prim.void#;
                  0# ->
                      let {
                        sat_s96rD [Occ=Once]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                        [LclId] =
                            [act_s96qw] \r [void_0E]
                                case newMutVar# [GHC.Types.[] GHC.Prim.void#] of {
                                  Unit# ipv3_s96rc ->
                                      let {
                                        sat_s96rt [Occ=Once]
                                          :: GHC.Exception.SomeException
                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                                        [LclId] =
                                            [ipv3_s96rc] \r [ds3_s96rg]
                                                case ds3_s96rg of {
                                                  GHC.Exception.SomeException $dException_s96ri [Occ=Once]
                                                                              e1_s96rj [Occ=Once] ->
                                                      let {
                                                        sat_s96rs [Occ=OnceT[0]]
                                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   b_a94PM #)
                                                        [LclId] =
                                                            [ipv3_s96rc
                                                             $dException_s96ri
                                                             e1_s96rj] \r [void_0E]
                                                                case
                                                                    readMutVar# [ipv3_s96rc
                                                                                 GHC.Prim.void#]
                                                                of
                                                                { Unit# ipv5_s96rn [Occ=Once] ->
                                                                      case
                                                                          Foreign.Marshal.Pool.freePool2
                                                                              ipv5_s96rn
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# _ [Occ=Dead] ->
                                                                            GHC.Exception.throw
                                                                                $dException_s96ri
                                                                                e1_s96rj;
                                                                      };
                                                                };
                                                      } in  sat_s96rs;
                                                }; } in
                                      let {
                                        sat_s96re [Occ=Once]
                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                                        [LclId] =
                                            [act_s96qw ipv3_s96rc] \u []
                                                let {
                                                  sat_s96rd [Occ=Once] :: Foreign.Marshal.Pool.Pool
                                                  [LclId] =
                                                      CCCS GHC.STRef.STRef! [ipv3_s96rc];
                                                } in  act_s96qw sat_s96rd; } in
                                      let {
                                        sat_s96rf [Occ=Once]
                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a94PM #)
                                        [LclId] =
                                            [sat_s96re] \r [void_0E]
                                                unmaskAsyncExceptions# [sat_s96re GHC.Prim.void#];
                                      } in 
                                        case catch# [sat_s96rf sat_s96rt GHC.Prim.void#] of {
                                          Unit# ipv5_s96rw [Occ=Once] ->
                                              case readMutVar# [ipv3_s96rc GHC.Prim.void#] of {
                                                Unit# ipv7_s96rz [Occ=Once] ->
                                                    case
                                                        Foreign.Marshal.Pool.freePool2
                                                            ipv7_s96rz GHC.Prim.void#
                                                    of
                                                    { Unit# _ [Occ=Dead] -> Unit# [ipv5_s96rw];
                                                    };
                                              };
                                        };
                                };
                      } in  maskAsyncExceptions# [sat_s96rD GHC.Prim.void#];
                  1# ->
                      let {
                        sat_s96rE [Occ=Once] :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                        [LclId] =
                            [] \r [eta_B2 void_0E]
                                maskUninterruptible# [eta_B2 GHC.Prim.void#];
                      } in  io_s96qB sat_s96rE GHC.Prim.void#;
                };
        };

Foreign.Marshal.Pool.withPool
  :: forall b.
     (Foreign.Marshal.Pool.Pool -> GHC.Types.IO b) -> GHC.Types.IO b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Foreign.Marshal.Pool.withPool1 eta_B2 GHC.Prim.void#;

