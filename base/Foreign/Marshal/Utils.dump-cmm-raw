
==================== Raw Cmm ====================
2018-03-16 16:03:58.080833477 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:58.081981939 UTC

[section ""cstring" . lvl_r8Ohb_bytes" {
     lvl_r8Ohb_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.084195188 UTC

[section ""data" . lvl1_r8Ohc_closure" {
     lvl1_r8Ohc_closure:
         const lvl1_r8Ohc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r8Ohc_entry() //  [R1]
         { []
         }
     {offset
       c8OyE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8OyF; else goto c8OyG;
       c8OyF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8OyG: // global
           (_c8OyB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8OyB::I64 == 0) goto c8OyD; else goto c8OyC;
       c8OyD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8OyC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8OyB::I64;
           R2 = lvl_r8Ohb_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r8Ohc_info" {
     lvl1_r8Ohc_info:
         const lvl1_r8Ohc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.08771181 UTC

[section ""cstring" . Foreign.Marshal.Utils.$trModule4_bytes" {
     Foreign.Marshal.Utils.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.09010037 UTC

[section ""data" . lvl2_r8Ohd_closure" {
     lvl2_r8Ohd_closure:
         const lvl2_r8Ohd_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r8Ohd_entry() //  [R1]
         { []
         }
     {offset
       c8OyV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8OyW; else goto c8OyX;
       c8OyW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8OyX: // global
           (_c8OyS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8OyS::I64 == 0) goto c8OyU; else goto c8OyT;
       c8OyU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8OyT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8OyS::I64;
           R2 = Foreign.Marshal.Utils.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_r8Ohd_info" {
     lvl2_r8Ohd_info:
         const lvl2_r8Ohd_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.093579613 UTC

[section ""cstring" . lvl3_r8Ohe_bytes" {
     lvl3_r8Ohe_bytes:
         I8[] [70,111,114,101,105,103,110,46,77,97,114,115,104,97,108,46,65,108,108,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.095797493 UTC

[section ""data" . lvl4_r8Ohf_closure" {
     lvl4_r8Ohf_closure:
         const lvl4_r8Ohf_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r8Ohf_entry() //  [R1]
         { []
         }
     {offset
       c8Ozc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Ozd; else goto c8Oze;
       c8Ozd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Oze: // global
           (_c8Oz9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8Oz9::I64 == 0) goto c8Ozb; else goto c8Oza;
       c8Ozb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8Oza: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8Oz9::I64;
           R2 = lvl3_r8Ohe_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_r8Ohf_info" {
     lvl4_r8Ohf_info:
         const lvl4_r8Ohf_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.099305086 UTC

[section ""cstring" . lvl5_r8Ohg_bytes" {
     lvl5_r8Ohg_bytes:
         I8[] [46,47,70,111,114,101,105,103,110,47,77,97,114,115,104,97,108,47,65,108,108,111,99,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.101972803 UTC

[section ""data" . lvl6_r8Ohh_closure" {
     lvl6_r8Ohh_closure:
         const lvl6_r8Ohh_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r8Ohh_entry() //  [R1]
         { []
         }
     {offset
       c8Ozt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Ozu; else goto c8Ozv;
       c8Ozu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Ozv: // global
           (_c8Ozq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8Ozq::I64 == 0) goto c8Ozs; else goto c8Ozr;
       c8Ozs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8Ozr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8Ozq::I64;
           R2 = lvl5_r8Ohg_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r8Ohh_info" {
     lvl6_r8Ohh_info:
         const lvl6_r8Ohh_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.106595152 UTC

[section ""data" . lvl7_r8Ohi_closure" {
     lvl7_r8Ohi_closure:
         const GHC.Types.I#_con_info;
         const 84;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.108223097 UTC

[section ""data" . lvl8_r8Ohj_closure" {
     lvl8_r8Ohj_closure:
         const GHC.Types.I#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.109844037 UTC

[section ""data" . lvl9_r8Ohk_closure" {
     lvl9_r8Ohk_closure:
         const GHC.Types.I#_con_info;
         const 41;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.111506032 UTC

[section ""data" . lvl10_r8Ohl_closure" {
     lvl10_r8Ohl_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8Ohd_closure;
         const lvl4_r8Ohf_closure;
         const lvl6_r8Ohh_closure;
         const lvl7_r8Ohi_closure+1;
         const lvl8_r8Ohj_closure+1;
         const lvl7_r8Ohi_closure+1;
         const lvl9_r8Ohk_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.11365417 UTC

[section ""data" . lvl11_r8Ohm_closure" {
     lvl11_r8Ohm_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8Ohc_closure;
         const lvl10_r8Ohl_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.115984572 UTC

[section ""data" . Foreign.Marshal.Utils.new2_closure" {
     Foreign.Marshal.Utils.new2_closure:
         const Foreign.Marshal.Utils.new2_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Utils.new2_entry() //  [R1]
         { []
         }
     {offset
       c8OzO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8OzP; else goto c8OzQ;
       c8OzP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8OzQ: // global
           (_c8OzL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8OzL::I64 == 0) goto c8OzN; else goto c8OzM;
       c8OzN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8OzM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8OzL::I64;
           R2 = lvl11_r8Ohm_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.new2_info" {
     Foreign.Marshal.Utils.new2_info:
         const Foreign.Marshal.Utils.new2_entry;
         const 0;
         const 12884901909;
         const S8Okh_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.12092518 UTC

[section ""data" . Foreign.Marshal.Utils.new1_closure" {
     Foreign.Marshal.Utils.new1_closure:
         const Foreign.Marshal.Utils.new1_info;
         const 0;
 },
 Foreign.Marshal.Utils.new1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8OA4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c8OA5; else goto c8OA6;
       c8OA5: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.new1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OA6: // global
           I64[Sp - 24] = block_c8OA2_info;
           _s8Ohx::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = Foreign.Marshal.Utils.new2_closure;
           P64[Sp - 16] = _s8Ohx::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.new1_info" {
     Foreign.Marshal.Utils.new1_info:
         const Foreign.Marshal.Utils.new1_entry;
         const 0;
         const 30064771086;
         const 12884901903;
         const S8Okh_srt+16;
 },
 _c8OA2() //  [R1]
         { []
         }
     {offset
       c8OA2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8OAb; else goto c8OAa;
       c8OAb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8OAa: // global
           _s8Ohx::P64 = P64[Sp + 8];
           _s8Ohy::P64 = P64[Sp + 16];
           (_s8OhG::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[R1 + 7]);
           if (_s8OhG::I64 == 0) goto c8OAq; else goto c8OAn;
       c8OAq: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8OAn: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8OhG::I64;
           I64[Sp + 8] = block_c8OAl_info;
           R2 = _s8Ohx::P64;
           I64[Sp - 16] = stg_ap_ppv_info;
           _c8OAk::P64 = Hp - 7;
           P64[Sp - 8] = _c8OAk::P64;
           P64[Sp] = _s8Ohy::P64;
           P64[Sp + 16] = _c8OAk::P64;
           Sp = Sp - 16;
           call Foreign.Storable.poke_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OA2_info" {
     block_c8OA2_info:
         const _c8OA2;
         const 2;
         const 4294967326;
         const S8Okh_srt+16;
 },
 _c8OAl() //  []
         { []
         }
     {offset
       c8OAl: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OAl_info" {
     block_c8OAl_info:
         const _c8OAl;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.128341377 UTC

[section ""data" . Foreign.Marshal.Utils.new_closure" {
     Foreign.Marshal.Utils.new_closure:
         const Foreign.Marshal.Utils.new_info;
         const 0;
 },
 Foreign.Marshal.Utils.new_entry() //  [R2, R3]
         { []
         }
     {offset
       c8OAH: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Utils.new1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.new_info" {
     Foreign.Marshal.Utils.new_info:
         const Foreign.Marshal.Utils.new_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8Okh_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.131412668 UTC

[section ""data" . lvl12_r8Ohn_closure" {
     lvl12_r8Ohn_closure:
         const GHC.Types.I#_con_info;
         const 117;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.133072789 UTC

[section ""data" . lvl13_r8Oho_closure" {
     lvl13_r8Oho_closure:
         const GHC.Types.I#_con_info;
         const 60;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.135314284 UTC

[section ""data" . lvl14_r8Ohp_closure" {
     lvl14_r8Ohp_closure:
         const GHC.Types.I#_con_info;
         const 69;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.137017573 UTC

[section ""data" . lvl15_r8Ohq_closure" {
     lvl15_r8Ohq_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8Ohd_closure;
         const lvl4_r8Ohf_closure;
         const lvl6_r8Ohh_closure;
         const lvl12_r8Ohn_closure+1;
         const lvl13_r8Oho_closure+1;
         const lvl12_r8Ohn_closure+1;
         const lvl14_r8Ohp_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.139078918 UTC

[section ""data" . lvl16_r8Ohr_closure" {
     lvl16_r8Ohr_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8Ohc_closure;
         const lvl15_r8Ohq_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.141388115 UTC

[section ""data" . Foreign.Marshal.Utils.with2_closure" {
     Foreign.Marshal.Utils.with2_closure:
         const Foreign.Marshal.Utils.with2_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Utils.with2_entry() //  [R1]
         { []
         }
     {offset
       c8OAZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8OB0; else goto c8OB1;
       c8OB0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8OB1: // global
           (_c8OAW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8OAW::I64 == 0) goto c8OAY; else goto c8OAX;
       c8OAY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8OAX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8OAW::I64;
           R2 = lvl16_r8Ohr_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.with2_info" {
     Foreign.Marshal.Utils.with2_info:
         const Foreign.Marshal.Utils.with2_entry;
         const 0;
         const 141733920789;
         const S8Okh_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.144968642 UTC

[section ""data" . lvl17_r8Ohs_closure" {
     lvl17_r8Ohs_closure:
         const GHC.Types.I#_con_info;
         const 31;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.146620831 UTC

[section ""data" . lvl18_r8Oht_closure" {
     lvl18_r8Oht_closure:
         const GHC.Types.I#_con_info;
         const 40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.148392812 UTC

[section ""data" . lvl19_r8Ohu_closure" {
     lvl19_r8Ohu_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8Ohd_closure;
         const lvl4_r8Ohf_closure;
         const lvl6_r8Ohh_closure;
         const lvl12_r8Ohn_closure+1;
         const lvl17_r8Ohs_closure+1;
         const lvl12_r8Ohn_closure+1;
         const lvl18_r8Oht_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.150581608 UTC

[section ""data" . lvl20_r8Ohv_closure" {
     lvl20_r8Ohv_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8Ohc_closure;
         const lvl19_r8Ohu_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.152891246 UTC

[section ""data" . Foreign.Marshal.Utils.with3_closure" {
     Foreign.Marshal.Utils.with3_closure:
         const Foreign.Marshal.Utils.with3_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Utils.with3_entry() //  [R1]
         { []
         }
     {offset
       c8OBj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8OBk; else goto c8OBl;
       c8OBk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8OBl: // global
           (_c8OBg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8OBg::I64 == 0) goto c8OBi; else goto c8OBh;
       c8OBi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8OBh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8OBg::I64;
           R2 = lvl20_r8Ohv_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.with3_info" {
     Foreign.Marshal.Utils.with3_info:
         const Foreign.Marshal.Utils.with3_entry;
         const 0;
         const 279172874261;
         const S8Okh_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.158403792 UTC

[section ""data" . Foreign.Marshal.Utils.with1_closure" {
     Foreign.Marshal.Utils.with1_closure:
         const Foreign.Marshal.Utils.with1_info;
         const 0;
 },
 Foreign.Marshal.Utils.with1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OBz: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c8OBD; else goto c8OBE;
       c8OBD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.with1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OBE: // global
           I64[Sp - 32] = block_c8OBx_info;
           _s8OhM::P64 = R2;
           R2 = R2;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Foreign.Marshal.Utils.with3_closure;
           P64[Sp - 24] = _s8OhM::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.with1_info" {
     Foreign.Marshal.Utils.with1_info:
         const Foreign.Marshal.Utils.with1_entry;
         const 0;
         const 30064771086;
         const 17179869207;
         const S8Okh_srt+56;
 },
 _c8OBx() //  [R1]
         { []
         }
     {offset
       c8OBx: // global
           I64[Sp - 8] = block_c8OBC_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = Foreign.Marshal.Utils.with2_closure;
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 24;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OBx_info" {
     block_c8OBx_info:
         const _c8OBx;
         const 3;
         const 4294967326;
         const S8Okh_srt+64;
 },
 _c8OBC() //  [R1]
         { []
         }
     {offset
       c8OBC: // global
           _s8OhR::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c8OBJ_info;
           R2 = I64[R1 + 7];
           R1 = _s8OhR::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OBC_info" {
     block_c8OBC_info:
         const _c8OBC;
         const 68;
         const 30;
 },
 _c8OBJ() //  [R1]
         { []
         }
     {offset
       c8OBJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8OBO; else goto c8OBN;
       c8OBO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8OBN: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           P64[Hp] = R1 + 16;
           I64[Sp] = block_c8OBT_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_ppv_info;
           _c8OBS::P64 = Hp - 7;
           P64[Sp - 16] = _c8OBS::P64;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp + 8] = R1;
           P64[Sp + 16] = _c8OBS::P64;
           Sp = Sp - 24;
           call Foreign.Storable.poke_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OBJ_info" {
     block_c8OBJ_info:
         const _c8OBJ;
         const 3;
         const 30;
 },
 _c8OBT() //  []
         { []
         }
     {offset
       c8OBT: // global
           I64[Sp] = block_c8OBV_info;
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 24];
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OBT_info" {
     block_c8OBT_info:
         const _c8OBT;
         const 3;
         const 30;
 },
 _c8OBV() //  [R1]
         { []
         }
     {offset
       c8OBV: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OBV_info" {
     block_c8OBV_info:
         const _c8OBV;
         const 387;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.17079128 UTC

[section ""data" . Foreign.Marshal.Utils.with_closure" {
     Foreign.Marshal.Utils.with_closure:
         const Foreign.Marshal.Utils.with_info;
         const 0;
 },
 Foreign.Marshal.Utils.with_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OCs: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Utils.with1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.with_info" {
     Foreign.Marshal.Utils.with_info:
         const Foreign.Marshal.Utils.with_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S8Okh_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.174631706 UTC

[section ""data" . Foreign.Marshal.Utils.fromBool2_closure" {
     Foreign.Marshal.Utils.fromBool2_closure:
         const Foreign.Marshal.Utils.fromBool2_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Utils.fromBool2_entry() //  [R1]
         { []
         }
     {offset
       c8OCF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8OCG; else goto c8OCH;
       c8OCG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8OCH: // global
           (_c8OCC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8OCC::I64 == 0) goto c8OCE; else goto c8OCD;
       c8OCE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8OCD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8OCC::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.fromBool2_info" {
     Foreign.Marshal.Utils.fromBool2_info:
         const Foreign.Marshal.Utils.fromBool2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.178258476 UTC

[section ""data" . sat_s8Oi9_closure" {
     sat_s8Oi9_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.179979539 UTC

[section ""data" . sat_s8Oia_closure" {
     sat_s8Oia_closure:
         const :_con_info;
         const sat_s8Oi9_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.182135605 UTC

[section ""data" . Foreign.Marshal.Utils.fromBool1_closure" {
     Foreign.Marshal.Utils.fromBool1_closure:
         const Foreign.Marshal.Utils.fromBool1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Utils.fromBool1_entry() //  [R1]
         { []
         }
     {offset
       c8OCX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8OCY; else goto c8OCZ;
       c8OCY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8OCZ: // global
           (_c8OCU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8OCU::I64 == 0) goto c8OCW; else goto c8OCV;
       c8OCW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8OCV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8OCU::I64;
           R3 = sat_s8Oia_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.fromBool1_info" {
     Foreign.Marshal.Utils.fromBool1_info:
         const Foreign.Marshal.Utils.fromBool1_entry;
         const 0;
         const 4294967317;
         const S8Okh_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.186815871 UTC

[section ""data" . Foreign.Marshal.Utils.fromBool_closure" {
     Foreign.Marshal.Utils.fromBool_closure:
         const Foreign.Marshal.Utils.fromBool_info;
         const 0;
 },
 Foreign.Marshal.Utils.fromBool_entry() //  [R2, R3]
         { []
         }
     {offset
       c8ODi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ODj; else goto c8ODk;
       c8ODj: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.fromBool_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8ODk: // global
           I64[Sp - 16] = block_c8ODb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8ODr; else goto c8ODc;
       u8ODr: // global
           call _c8ODb(R1) args: 0, res: 0, upd: 0;
       c8ODc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.fromBool_info" {
     Foreign.Marshal.Utils.fromBool_info:
         const Foreign.Marshal.Utils.fromBool_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S8Okh_srt+88;
 },
 _c8ODb() //  [R1]
         { []
         }
     {offset
       c8ODb: // global
           _s8Oib::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8ODf; else goto c8ODg;
       c8ODf: // global
           R2 = _s8Oib::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = Foreign.Marshal.Utils.fromBool2_closure;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
       c8ODg: // global
           R2 = _s8Oib::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = Foreign.Marshal.Utils.fromBool1_closure;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ODb_info" {
     block_c8ODb_info:
         const _c8ODb;
         const 1;
         const 12884901918;
         const S8Okh_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.193101128 UTC

[section ""data" . Foreign.Marshal.Utils.toBool_closure" {
     Foreign.Marshal.Utils.toBool_closure:
         const Foreign.Marshal.Utils.toBool_info;
         const 0;
 },
 ds_s8Oig_entry() //  [R1]
         { []
         }
     {offset
       c8ODL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8ODM; else goto c8ODN;
       c8ODM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8ODN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Utils.fromBool2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s8Oig_info" {
     ds_s8Oig_info:
         const ds_s8Oig_entry;
         const 1;
         const 4294967312;
         const S8Okh_srt+104;
 },
 sat_s8Oii_entry() //  [R1, R2]
         { []
         }
     {offset
       c8ODT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8ODU; else goto c8ODV;
       c8ODU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ODV: // global
           _s8Oih::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s8Oih::P64;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes./=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8Oii_info" {
     sat_s8Oii_info:
         const sat_s8Oii_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Foreign.Marshal.Utils.toBool_entry() //  [R2, R3]
         { []
         }
     {offset
       c8ODW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8OE0; else goto c8ODZ;
       c8OE0: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.toBool_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8ODZ: // global
           I64[Hp - 40] = ds_s8Oig_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s8Oii_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.toBool_info" {
     Foreign.Marshal.Utils.toBool_info:
         const Foreign.Marshal.Utils.toBool_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S8Okh_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.201033958 UTC

[section ""data" . Foreign.Marshal.Utils.maybeNew1_closure" {
     Foreign.Marshal.Utils.maybeNew1_closure:
         const Foreign.Marshal.Utils.maybeNew1_info;
 },
 Foreign.Marshal.Utils.maybeNew1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8OEr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8OEs; else goto c8OEt;
       c8OEs: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.maybeNew1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OEt: // global
           I64[Sp - 16] = block_c8OEk_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8OEA; else goto c8OEl;
       u8OEA: // global
           call _c8OEk(R1) args: 0, res: 0, upd: 0;
       c8OEl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.maybeNew1_info" {
     Foreign.Marshal.Utils.maybeNew1_info:
         const Foreign.Marshal.Utils.maybeNew1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c8OEk() //  [R1]
         { []
         }
     {offset
       c8OEk: // global
           if (R1 & 7 == 1) goto c8OEo; else goto c8OEp;
       c8OEo: // global
           R1 = GHC.Ptr.nullPtr_closure;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8OEp: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OEk_info" {
     block_c8OEk_info:
         const _c8OEk;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.207710393 UTC

[section ""data" . Foreign.Marshal.Utils.maybeNew_closure" {
     Foreign.Marshal.Utils.maybeNew_closure:
         const Foreign.Marshal.Utils.maybeNew_info;
 },
 Foreign.Marshal.Utils.maybeNew_entry() //  [R2, R3]
         { []
         }
     {offset
       c8OER: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Utils.maybeNew1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.maybeNew_info" {
     Foreign.Marshal.Utils.maybeNew_info:
         const Foreign.Marshal.Utils.maybeNew_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.211301437 UTC

[section ""data" . Foreign.Marshal.Utils.maybeWith_n_closure" {
     Foreign.Marshal.Utils.maybeWith_n_closure:
         const Foreign.Marshal.Utils.maybeWith_n_info;
 },
 Foreign.Marshal.Utils.maybeWith_n_entry() //  [R2]
         { []
         }
     {offset
       c8OF2: // global
           _s8Oio::P64 = R2;
           R2 = GHC.Ptr.nullPtr_closure;
           R1 = _s8Oio::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.maybeWith_n_info" {
     Foreign.Marshal.Utils.maybeWith_n_info:
         const Foreign.Marshal.Utils.maybeWith_n_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.215771181 UTC

[section ""data" . Foreign.Marshal.Utils.maybeWith_closure" {
     Foreign.Marshal.Utils.maybeWith_closure:
         const Foreign.Marshal.Utils.maybeWith_info;
 },
 Foreign.Marshal.Utils.maybeWith_entry() //  [R2, R3]
         { []
         }
     {offset
       c8OFk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8OFl; else goto c8OFm;
       c8OFl: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.maybeWith_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OFm: // global
           I64[Sp - 16] = block_c8OFd_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8OFt; else goto c8OFe;
       u8OFt: // global
           call _c8OFd(R1) args: 0, res: 0, upd: 0;
       c8OFe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.maybeWith_info" {
     Foreign.Marshal.Utils.maybeWith_info:
         const Foreign.Marshal.Utils.maybeWith_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8OFd() //  [R1]
         { []
         }
     {offset
       c8OFd: // global
           if (R1 & 7 == 1) goto c8OFh; else goto c8OFi;
       c8OFh: // global
           R1 = Foreign.Marshal.Utils.maybeWith_n_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8OFi: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OFd_info" {
     block_c8OFd_info:
         const _c8OFd;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.222745744 UTC

[section ""data" . Foreign.Marshal.Utils.maybePeek1_closure" {
     Foreign.Marshal.Utils.maybePeek1_closure:
         const Foreign.Marshal.Utils.maybePeek1_info;
 },
 Foreign.Marshal.Utils.maybePeek1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8OFN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8OFO; else goto c8OFP;
       c8OFO: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.maybePeek1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OFP: // global
           I64[Sp - 16] = block_c8OFK_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8OG5; else goto c8OFL;
       u8OG5: // global
           call _c8OFK(R1) args: 0, res: 0, upd: 0;
       c8OFL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.maybePeek1_info" {
     Foreign.Marshal.Utils.maybePeek1_info:
         const Foreign.Marshal.Utils.maybePeek1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c8OFK() //  [R1]
         { []
         }
     {offset
       c8OFK: // global
           if (I64[R1 + 7] == 0) goto c8OG4; else goto c8OG0;
       c8OG4: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8OG0: // global
           _s8Oit::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8OFW_info;
           R2 = R1;
           R1 = _s8Oit::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OFK_info" {
     block_c8OFK_info:
         const _c8OFK;
         const 1;
         const 30;
 },
 _c8OFW() //  [R1]
         { []
         }
     {offset
       c8OFW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8OG3; else goto c8OG2;
       c8OG3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8OG2: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OFW_info" {
     block_c8OFW_info:
         const _c8OFW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.230431404 UTC

[section ""data" . Foreign.Marshal.Utils.maybePeek_closure" {
     Foreign.Marshal.Utils.maybePeek_closure:
         const Foreign.Marshal.Utils.maybePeek_info;
 },
 Foreign.Marshal.Utils.maybePeek_entry() //  [R2, R3]
         { []
         }
     {offset
       c8OGo: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Utils.maybePeek1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.maybePeek_info" {
     Foreign.Marshal.Utils.maybePeek_info:
         const Foreign.Marshal.Utils.maybePeek_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.236077398 UTC

[section ""data" . Foreign.Marshal.Utils.withMany_closure" {
     Foreign.Marshal.Utils.withMany_closure:
         const Foreign.Marshal.Utils.withMany_info;
 },
 sat_s8OiM_entry() //  [R1, R2]
         { []
         }
     {offset
       c8OGQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8OGU; else goto c8OGT;
       c8OGU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8OGT: // global
           _s8OiF::P64 = P64[R1 + 7];
           _s8OiJ::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s8OiJ::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s8OiF::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8OiM_info" {
     sat_s8OiM_info:
         const sat_s8OiM_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s8OiN_entry() //  [R1, R2]
         { []
         }
     {offset
       c8OGV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8OGZ; else goto c8OGY;
       c8OGZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8OGY: // global
           _s8OiD::P64 = P64[R1 + 7];
           _s8OiF::P64 = P64[R1 + 15];
           _s8OiI::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_s8OiM_info;
           P64[Hp - 8] = _s8OiF::P64;
           P64[Hp] = R2;
           R4 = Hp - 15;
           R3 = _s8OiI::P64;
           R2 = _s8OiD::P64;
           call Foreign.Marshal.Utils.withMany_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8OiN_info" {
     sat_s8OiN_info:
         const sat_s8OiN_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Foreign.Marshal.Utils.withMany_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OH4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8OH5; else goto c8OH6;
       c8OH5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.withMany_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OH6: // global
           I64[Sp - 24] = block_c8OGz_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8OHc; else goto c8OGA;
       u8OHc: // global
           call _c8OGz(R1) args: 0, res: 0, upd: 0;
       c8OGA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.withMany_info" {
     Foreign.Marshal.Utils.withMany_info:
         const Foreign.Marshal.Utils.withMany_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c8OGz() //  [R1]
         { []
         }
     {offset
       c8OGz: // global
           _s8OiF::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c8OH1; else goto c8OH2;
       c8OH1: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = _s8OiF::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c8OH2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8OHb; else goto c8OHa;
       c8OHb: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8OHa: // global
           _s8OiH::P64 = P64[R1 + 6];
           _s8OiI::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_s8OiN_info;
           _s8OiD::P64 = P64[Sp + 8];
           P64[Hp - 16] = _s8OiD::P64;
           P64[Hp - 8] = _s8OiF::P64;
           P64[Hp] = _s8OiI::P64;
           R3 = Hp - 23;
           R2 = _s8OiH::P64;
           R1 = _s8OiD::P64;
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OGz_info" {
     block_c8OGz_info:
         const _c8OGz;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.246154729 UTC

[section ""data" . Foreign.Marshal.Utils.$trModule3_closure" {
     Foreign.Marshal.Utils.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Utils.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.247869498 UTC

[section ""cstring" . Foreign.Marshal.Utils.$trModule2_bytes" {
     Foreign.Marshal.Utils.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,77,97,114,115,104,97,108,46,85,116,105,108,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.249709994 UTC

[section ""data" . Foreign.Marshal.Utils.$trModule1_closure" {
     Foreign.Marshal.Utils.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Utils.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.251491612 UTC

[section ""data" . Foreign.Marshal.Utils.$trModule_closure" {
     Foreign.Marshal.Utils.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.Marshal.Utils.$trModule3_closure+1;
         const Foreign.Marshal.Utils.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.255139392 UTC

[section ""data" . Foreign.Marshal.Utils.copyBytes1_closure" {
     Foreign.Marshal.Utils.copyBytes1_closure:
         const Foreign.Marshal.Utils.copyBytes1_info;
 },
 Foreign.Marshal.Utils.copyBytes1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OHF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8OHO; else goto c8OHP;
       c8OHO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.copyBytes1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OHP: // global
           I64[Sp - 24] = block_c8OHC_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8OI5; else goto c8OHD;
       u8OI5: // global
           call _c8OHC(R1) args: 0, res: 0, upd: 0;
       c8OHD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.copyBytes1_info" {
     Foreign.Marshal.Utils.copyBytes1_info:
         const Foreign.Marshal.Utils.copyBytes1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c8OHC() //  [R1]
         { []
         }
     {offset
       c8OHC: // global
           I64[Sp] = block_c8OHI_info;
           _s8OiT::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8OiT::I64;
           if (R1 & 7 != 0) goto u8OI4; else goto c8OHJ;
       u8OI4: // global
           call _c8OHI(R1) args: 0, res: 0, upd: 0;
       c8OHJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OHC_info" {
     block_c8OHC_info:
         const _c8OHC;
         const 2;
         const 30;
 },
 _c8OHI() //  [R1]
         { []
         }
     {offset
       c8OHI: // global
           I64[Sp] = block_c8OHN_info;
           _s8OiV::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8OiV::I64;
           if (R1 & 7 != 0) goto u8OI6; else goto c8OHS;
       u8OI6: // global
           call _c8OHN(R1) args: 0, res: 0, upd: 0;
       c8OHS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OHI_info" {
     block_c8OHI_info:
         const _c8OHI;
         const 66;
         const 30;
 },
 _c8OHN() //  [R1]
         { []
         }
     {offset
       c8OHN: // global
           (_s8Oj2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(I64[Sp + 8], I64[Sp + 16], I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OHN_info" {
     block_c8OHN_info:
         const _c8OHN;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.265381099 UTC

[section ""data" . Foreign.Marshal.Utils.copyBytes_closure" {
     Foreign.Marshal.Utils.copyBytes_closure:
         const Foreign.Marshal.Utils.copyBytes_info;
 },
 Foreign.Marshal.Utils.copyBytes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OIt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Utils.copyBytes1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.copyBytes_info" {
     Foreign.Marshal.Utils.copyBytes_info:
         const Foreign.Marshal.Utils.copyBytes_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.270496941 UTC

[section ""data" . Foreign.Marshal.Utils.moveBytes1_closure" {
     Foreign.Marshal.Utils.moveBytes1_closure:
         const Foreign.Marshal.Utils.moveBytes1_info;
 },
 Foreign.Marshal.Utils.moveBytes1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OIH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8OIQ; else goto c8OIR;
       c8OIQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.moveBytes1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OIR: // global
           I64[Sp - 24] = block_c8OIE_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8OJ7; else goto c8OIF;
       u8OJ7: // global
           call _c8OIE(R1) args: 0, res: 0, upd: 0;
       c8OIF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.moveBytes1_info" {
     Foreign.Marshal.Utils.moveBytes1_info:
         const Foreign.Marshal.Utils.moveBytes1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c8OIE() //  [R1]
         { []
         }
     {offset
       c8OIE: // global
           I64[Sp] = block_c8OIK_info;
           _s8Oj8::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8Oj8::I64;
           if (R1 & 7 != 0) goto u8OJ6; else goto c8OIL;
       u8OJ6: // global
           call _c8OIK(R1) args: 0, res: 0, upd: 0;
       c8OIL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OIE_info" {
     block_c8OIE_info:
         const _c8OIE;
         const 2;
         const 30;
 },
 _c8OIK() //  [R1]
         { []
         }
     {offset
       c8OIK: // global
           I64[Sp] = block_c8OIP_info;
           _s8Oja::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8Oja::I64;
           if (R1 & 7 != 0) goto u8OJ8; else goto c8OIU;
       u8OJ8: // global
           call _c8OIP(R1) args: 0, res: 0, upd: 0;
       c8OIU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OIK_info" {
     block_c8OIK_info:
         const _c8OIK;
         const 66;
         const 30;
 },
 _c8OIP() //  [R1]
         { []
         }
     {offset
       c8OIP: // global
           (_s8Ojh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memmove(I64[Sp + 8], I64[Sp + 16], I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OIP_info" {
     block_c8OIP_info:
         const _c8OIP;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.281677864 UTC

[section ""data" . Foreign.Marshal.Utils.moveBytes_closure" {
     Foreign.Marshal.Utils.moveBytes_closure:
         const Foreign.Marshal.Utils.moveBytes_info;
 },
 Foreign.Marshal.Utils.moveBytes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OJv: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Utils.moveBytes1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.moveBytes_info" {
     Foreign.Marshal.Utils.moveBytes_info:
         const Foreign.Marshal.Utils.moveBytes_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.286651145 UTC

[section ""data" . Foreign.Marshal.Utils.fillBytes1_closure" {
     Foreign.Marshal.Utils.fillBytes1_closure:
         const Foreign.Marshal.Utils.fillBytes1_info;
 },
 Foreign.Marshal.Utils.fillBytes1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OJJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8OJS; else goto c8OJT;
       c8OJS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.fillBytes1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OJT: // global
           I64[Sp - 24] = block_c8OJG_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8OKc; else goto c8OJH;
       u8OKc: // global
           call _c8OJG(R1) args: 0, res: 0, upd: 0;
       c8OJH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.fillBytes1_info" {
     Foreign.Marshal.Utils.fillBytes1_info:
         const Foreign.Marshal.Utils.fillBytes1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c8OJG() //  [R1]
         { []
         }
     {offset
       c8OJG: // global
           I64[Sp] = block_c8OJM_info;
           _s8Ojn::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8Ojn::I64;
           if (R1 & 7 != 0) goto u8OKb; else goto c8OJN;
       u8OKb: // global
           call _c8OJM(R1) args: 0, res: 0, upd: 0;
       c8OJN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OJG_info" {
     block_c8OJG_info:
         const _c8OJG;
         const 2;
         const 30;
 },
 _c8OJM() //  [R1]
         { []
         }
     {offset
       c8OJM: // global
           I64[Sp] = block_c8OJR_info;
           _s8Ojp::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8Ojp::I64;
           if (R1 & 7 != 0) goto u8OKd; else goto c8OJW;
       u8OKd: // global
           call _c8OJR(R1) args: 0, res: 0, upd: 0;
       c8OJW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OJM_info" {
     block_c8OJM_info:
         const _c8OJM;
         const 66;
         const 30;
 },
 _c8OJR() //  [R1]
         { []
         }
     {offset
       c8OJR: // global
           (_s8Ojx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     ‘signed’,]  result hints:  [PtrHint] memset(I64[Sp + 8], I64[Sp + 16], I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OJR_info" {
     block_c8OJR_info:
         const _c8OJR;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.295494758 UTC

[section ""data" . Foreign.Marshal.Utils.fillBytes_closure" {
     Foreign.Marshal.Utils.fillBytes_closure:
         const Foreign.Marshal.Utils.fillBytes_info;
 },
 Foreign.Marshal.Utils.fillBytes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OKA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Utils.fillBytes1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.fillBytes_info" {
     Foreign.Marshal.Utils.fillBytes_info:
         const Foreign.Marshal.Utils.fillBytes_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.299094058 UTC

[section ""relreadonly" . S8Okh_srt" {
     S8Okh_srt:
         const GHC.Err.undefined_closure;
         const lvl11_r8Ohm_closure;
         const Foreign.Marshal.Alloc.malloc1_closure;
         const Foreign.Marshal.Utils.new1_closure;
         const Foreign.Marshal.Utils.new2_closure;
         const lvl16_r8Ohr_closure;
         const lvl20_r8Ohv_closure;
         const Foreign.Marshal.Utils.with1_closure;
         const Foreign.Marshal.Utils.with2_closure;
         const Foreign.Marshal.Utils.with3_closure;
         const sat_s8Oia_closure;
         const Foreign.Marshal.Utils.fromBool_closure;
         const Foreign.Marshal.Utils.fromBool1_closure;
         const Foreign.Marshal.Utils.fromBool2_closure;
         const Foreign.Marshal.Utils.toBool_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.746409398 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:58.747551149 UTC

[section ""cstring" . lvl_r8Ohb_bytes" {
     lvl_r8Ohb_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.750195954 UTC

[section ""data" . lvl1_r8Ohc_closure" {
     lvl1_r8Ohc_closure:
         const lvl1_r8Ohc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r8Ohc_entry() //  [R1]
         { []
         }
     {offset
       c8OMQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8OMR; else goto c8OMS;
       c8OMR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8OMS: // global
           (_c8OMN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8OMN::I64 == 0) goto c8OMP; else goto c8OMO;
       c8OMP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8OMO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8OMN::I64;
           R2 = lvl_r8Ohb_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r8Ohc_info" {
     lvl1_r8Ohc_info:
         const lvl1_r8Ohc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.753952816 UTC

[section ""cstring" . Foreign.Marshal.Utils.$trModule4_bytes" {
     Foreign.Marshal.Utils.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.756316402 UTC

[section ""data" . lvl2_r8Ohd_closure" {
     lvl2_r8Ohd_closure:
         const lvl2_r8Ohd_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r8Ohd_entry() //  [R1]
         { []
         }
     {offset
       c8ON8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ON9; else goto c8ONa;
       c8ON9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8ONa: // global
           (_c8ON5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8ON5::I64 == 0) goto c8ON7; else goto c8ON6;
       c8ON7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8ON6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8ON5::I64;
           R2 = Foreign.Marshal.Utils.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_r8Ohd_info" {
     lvl2_r8Ohd_info:
         const lvl2_r8Ohd_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.76011309 UTC

[section ""cstring" . lvl3_r8Ohe_bytes" {
     lvl3_r8Ohe_bytes:
         I8[] [70,111,114,101,105,103,110,46,77,97,114,115,104,97,108,46,65,108,108,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.762498297 UTC

[section ""data" . lvl4_r8Ohf_closure" {
     lvl4_r8Ohf_closure:
         const lvl4_r8Ohf_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r8Ohf_entry() //  [R1]
         { []
         }
     {offset
       c8ONq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ONr; else goto c8ONs;
       c8ONr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8ONs: // global
           (_c8ONn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8ONn::I64 == 0) goto c8ONp; else goto c8ONo;
       c8ONp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8ONo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8ONn::I64;
           R2 = lvl3_r8Ohe_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_r8Ohf_info" {
     lvl4_r8Ohf_info:
         const lvl4_r8Ohf_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.766603385 UTC

[section ""cstring" . lvl5_r8Ohg_bytes" {
     lvl5_r8Ohg_bytes:
         I8[] [46,47,70,111,114,101,105,103,110,47,77,97,114,115,104,97,108,47,65,108,108,111,99,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.769784964 UTC

[section ""data" . lvl6_r8Ohh_closure" {
     lvl6_r8Ohh_closure:
         const lvl6_r8Ohh_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r8Ohh_entry() //  [R1]
         { []
         }
     {offset
       c8ONI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ONJ; else goto c8ONK;
       c8ONJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8ONK: // global
           (_c8ONF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8ONF::I64 == 0) goto c8ONH; else goto c8ONG;
       c8ONH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8ONG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8ONF::I64;
           R2 = lvl5_r8Ohg_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r8Ohh_info" {
     lvl6_r8Ohh_info:
         const lvl6_r8Ohh_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.773915962 UTC

[section ""data" . lvl7_r8Ohi_closure" {
     lvl7_r8Ohi_closure:
         const GHC.Types.I#_con_info;
         const 84;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.775723417 UTC

[section ""data" . lvl8_r8Ohj_closure" {
     lvl8_r8Ohj_closure:
         const GHC.Types.I#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.777523501 UTC

[section ""data" . lvl9_r8Ohk_closure" {
     lvl9_r8Ohk_closure:
         const GHC.Types.I#_con_info;
         const 41;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.779366937 UTC

[section ""data" . lvl10_r8Ohl_closure" {
     lvl10_r8Ohl_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8Ohd_closure;
         const lvl4_r8Ohf_closure;
         const lvl6_r8Ohh_closure;
         const lvl7_r8Ohi_closure+1;
         const lvl8_r8Ohj_closure+1;
         const lvl7_r8Ohi_closure+1;
         const lvl9_r8Ohk_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.781428365 UTC

[section ""data" . lvl11_r8Ohm_closure" {
     lvl11_r8Ohm_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8Ohc_closure;
         const lvl10_r8Ohl_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.784156656 UTC

[section ""data" . Foreign.Marshal.Utils.new2_closure" {
     Foreign.Marshal.Utils.new2_closure:
         const Foreign.Marshal.Utils.new2_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Utils.new2_entry() //  [R1]
         { []
         }
     {offset
       c8OO4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8OO5; else goto c8OO6;
       c8OO5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8OO6: // global
           (_c8OO1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8OO1::I64 == 0) goto c8OO3; else goto c8OO2;
       c8OO3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8OO2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8OO1::I64;
           R2 = lvl11_r8Ohm_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.new2_info" {
     Foreign.Marshal.Utils.new2_info:
         const Foreign.Marshal.Utils.new2_entry;
         const 0;
         const 12884901909;
         const S8OO7_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.790372388 UTC

[section ""data" . Foreign.Marshal.Utils.new1_closure" {
     Foreign.Marshal.Utils.new1_closure:
         const Foreign.Marshal.Utils.new1_info;
         const 0;
 },
 Foreign.Marshal.Utils.new1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8OOm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c8OOn; else goto c8OOo;
       c8OOn: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.new1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OOo: // global
           I64[Sp - 24] = block_c8OOk_info;
           _s8OKI::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = Foreign.Marshal.Utils.new2_closure;
           P64[Sp - 16] = _s8OKI::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.new1_info" {
     Foreign.Marshal.Utils.new1_info:
         const Foreign.Marshal.Utils.new1_entry;
         const 0;
         const 30064771086;
         const 12884901903;
         const S8OO7_srt+16;
 },
 _c8OOk() //  [R1]
         { []
         }
     {offset
       c8OOk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8OOt; else goto c8OOs;
       c8OOt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8OOs: // global
           _s8OKI::P64 = P64[Sp + 8];
           _s8OKJ::P64 = P64[Sp + 16];
           (_s8OKR::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[R1 + 7]);
           if (_s8OKR::I64 == 0) goto c8OOI; else goto c8OOF;
       c8OOI: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8OOF: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8OKR::I64;
           I64[Sp + 8] = block_c8OOD_info;
           R2 = _s8OKI::P64;
           I64[Sp - 16] = stg_ap_ppv_info;
           _c8OOC::P64 = Hp - 7;
           P64[Sp - 8] = _c8OOC::P64;
           P64[Sp] = _s8OKJ::P64;
           P64[Sp + 16] = _c8OOC::P64;
           Sp = Sp - 16;
           call Foreign.Storable.poke_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OOk_info" {
     block_c8OOk_info:
         const _c8OOk;
         const 2;
         const 4294967326;
         const S8OO7_srt+16;
 },
 _c8OOD() //  []
         { []
         }
     {offset
       c8OOD: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OOD_info" {
     block_c8OOD_info:
         const _c8OOD;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.799474644 UTC

[section ""data" . Foreign.Marshal.Utils.new_closure" {
     Foreign.Marshal.Utils.new_closure:
         const Foreign.Marshal.Utils.new_info;
         const 0;
 },
 Foreign.Marshal.Utils.new_entry() //  [R2, R3]
         { []
         }
     {offset
       c8OP5: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Utils.new1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.new_info" {
     Foreign.Marshal.Utils.new_info:
         const Foreign.Marshal.Utils.new_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8OO7_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.802952366 UTC

[section ""data" . lvl12_r8Ohn_closure" {
     lvl12_r8Ohn_closure:
         const GHC.Types.I#_con_info;
         const 117;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.804776207 UTC

[section ""data" . lvl13_r8Oho_closure" {
     lvl13_r8Oho_closure:
         const GHC.Types.I#_con_info;
         const 60;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.80684786 UTC

[section ""data" . lvl14_r8Ohp_closure" {
     lvl14_r8Ohp_closure:
         const GHC.Types.I#_con_info;
         const 69;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.80863706 UTC

[section ""data" . lvl15_r8Ohq_closure" {
     lvl15_r8Ohq_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8Ohd_closure;
         const lvl4_r8Ohf_closure;
         const lvl6_r8Ohh_closure;
         const lvl12_r8Ohn_closure+1;
         const lvl13_r8Oho_closure+1;
         const lvl12_r8Ohn_closure+1;
         const lvl14_r8Ohp_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.810523032 UTC

[section ""data" . lvl16_r8Ohr_closure" {
     lvl16_r8Ohr_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8Ohc_closure;
         const lvl15_r8Ohq_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.813048852 UTC

[section ""data" . Foreign.Marshal.Utils.with2_closure" {
     Foreign.Marshal.Utils.with2_closure:
         const Foreign.Marshal.Utils.with2_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Utils.with2_entry() //  [R1]
         { []
         }
     {offset
       c8OPn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8OPo; else goto c8OPp;
       c8OPo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8OPp: // global
           (_c8OPk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8OPk::I64 == 0) goto c8OPm; else goto c8OPl;
       c8OPm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8OPl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8OPk::I64;
           R2 = lvl16_r8Ohr_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.with2_info" {
     Foreign.Marshal.Utils.with2_info:
         const Foreign.Marshal.Utils.with2_entry;
         const 0;
         const 141733920789;
         const S8OO7_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.817114188 UTC

[section ""data" . lvl17_r8Ohs_closure" {
     lvl17_r8Ohs_closure:
         const GHC.Types.I#_con_info;
         const 31;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.818928484 UTC

[section ""data" . lvl18_r8Oht_closure" {
     lvl18_r8Oht_closure:
         const GHC.Types.I#_con_info;
         const 40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.821127597 UTC

[section ""data" . lvl19_r8Ohu_closure" {
     lvl19_r8Ohu_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8Ohd_closure;
         const lvl4_r8Ohf_closure;
         const lvl6_r8Ohh_closure;
         const lvl12_r8Ohn_closure+1;
         const lvl17_r8Ohs_closure+1;
         const lvl12_r8Ohn_closure+1;
         const lvl18_r8Oht_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.823199983 UTC

[section ""data" . lvl20_r8Ohv_closure" {
     lvl20_r8Ohv_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8Ohc_closure;
         const lvl19_r8Ohu_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.825683155 UTC

[section ""data" . Foreign.Marshal.Utils.with3_closure" {
     Foreign.Marshal.Utils.with3_closure:
         const Foreign.Marshal.Utils.with3_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Utils.with3_entry() //  [R1]
         { []
         }
     {offset
       c8OPI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8OPJ; else goto c8OPK;
       c8OPJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8OPK: // global
           (_c8OPF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8OPF::I64 == 0) goto c8OPH; else goto c8OPG;
       c8OPH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8OPG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8OPF::I64;
           R2 = lvl20_r8Ohv_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.with3_info" {
     Foreign.Marshal.Utils.with3_info:
         const Foreign.Marshal.Utils.with3_entry;
         const 0;
         const 279172874261;
         const S8OO7_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.832505742 UTC

[section ""data" . Foreign.Marshal.Utils.with1_closure" {
     Foreign.Marshal.Utils.with1_closure:
         const Foreign.Marshal.Utils.with1_info;
         const 0;
 },
 Foreign.Marshal.Utils.with1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OPZ: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c8OQ3; else goto c8OQ4;
       c8OQ3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.with1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OQ4: // global
           I64[Sp - 32] = block_c8OPX_info;
           _s8OKX::P64 = R2;
           R2 = R2;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Foreign.Marshal.Utils.with3_closure;
           P64[Sp - 24] = _s8OKX::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.with1_info" {
     Foreign.Marshal.Utils.with1_info:
         const Foreign.Marshal.Utils.with1_entry;
         const 0;
         const 30064771086;
         const 17179869207;
         const S8OO7_srt+56;
 },
 _c8OPX() //  [R1]
         { []
         }
     {offset
       c8OPX: // global
           I64[Sp - 8] = block_c8OQ2_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = Foreign.Marshal.Utils.with2_closure;
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 24;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OPX_info" {
     block_c8OPX_info:
         const _c8OPX;
         const 3;
         const 4294967326;
         const S8OO7_srt+64;
 },
 _c8OQ2() //  [R1]
         { []
         }
     {offset
       c8OQ2: // global
           _s8OL2::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c8OQ9_info;
           R2 = I64[R1 + 7];
           R1 = _s8OL2::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OQ2_info" {
     block_c8OQ2_info:
         const _c8OQ2;
         const 68;
         const 30;
 },
 _c8OQ9() //  [R1]
         { []
         }
     {offset
       c8OQ9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8OQe; else goto c8OQd;
       c8OQe: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8OQd: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           P64[Hp] = R1 + 16;
           I64[Sp] = block_c8OQj_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_ppv_info;
           _c8OQi::P64 = Hp - 7;
           P64[Sp - 16] = _c8OQi::P64;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp + 8] = R1;
           P64[Sp + 16] = _c8OQi::P64;
           Sp = Sp - 24;
           call Foreign.Storable.poke_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OQ9_info" {
     block_c8OQ9_info:
         const _c8OQ9;
         const 3;
         const 30;
 },
 _c8OQj() //  []
         { []
         }
     {offset
       c8OQj: // global
           I64[Sp] = block_c8OQl_info;
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 24];
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OQj_info" {
     block_c8OQj_info:
         const _c8OQj;
         const 3;
         const 30;
 },
 _c8OQl() //  [R1]
         { []
         }
     {offset
       c8OQl: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OQl_info" {
     block_c8OQl_info:
         const _c8OQl;
         const 387;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.846619616 UTC

[section ""data" . Foreign.Marshal.Utils.with_closure" {
     Foreign.Marshal.Utils.with_closure:
         const Foreign.Marshal.Utils.with_info;
         const 0;
 },
 Foreign.Marshal.Utils.with_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OR3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Utils.with1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.with_info" {
     Foreign.Marshal.Utils.with_info:
         const Foreign.Marshal.Utils.with_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S8OO7_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.851188235 UTC

[section ""data" . Foreign.Marshal.Utils.fromBool2_closure" {
     Foreign.Marshal.Utils.fromBool2_closure:
         const Foreign.Marshal.Utils.fromBool2_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Utils.fromBool2_entry() //  [R1]
         { []
         }
     {offset
       c8ORg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ORh; else goto c8ORi;
       c8ORh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8ORi: // global
           (_c8ORd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8ORd::I64 == 0) goto c8ORf; else goto c8ORe;
       c8ORf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8ORe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8ORd::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.fromBool2_info" {
     Foreign.Marshal.Utils.fromBool2_info:
         const Foreign.Marshal.Utils.fromBool2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.855080988 UTC

[section ""data" . sat_s8OLk_closure" {
     sat_s8OLk_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.856709168 UTC

[section ""data" . sat_s8OLl_closure" {
     sat_s8OLl_closure:
         const :_con_info;
         const sat_s8OLk_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.85923632 UTC

[section ""data" . Foreign.Marshal.Utils.fromBool1_closure" {
     Foreign.Marshal.Utils.fromBool1_closure:
         const Foreign.Marshal.Utils.fromBool1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Utils.fromBool1_entry() //  [R1]
         { []
         }
     {offset
       c8ORB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ORC; else goto c8ORD;
       c8ORC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8ORD: // global
           (_c8ORy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8ORy::I64 == 0) goto c8ORA; else goto c8ORz;
       c8ORA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8ORz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8ORy::I64;
           R3 = sat_s8OLl_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.fromBool1_info" {
     Foreign.Marshal.Utils.fromBool1_info:
         const Foreign.Marshal.Utils.fromBool1_entry;
         const 0;
         const 4294967317;
         const S8OO7_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.864743645 UTC

[section ""data" . Foreign.Marshal.Utils.fromBool_closure" {
     Foreign.Marshal.Utils.fromBool_closure:
         const Foreign.Marshal.Utils.fromBool_info;
         const 0;
 },
 Foreign.Marshal.Utils.fromBool_entry() //  [R2, R3]
         { []
         }
     {offset
       c8ORY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ORZ; else goto c8OS0;
       c8ORZ: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.fromBool_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OS0: // global
           I64[Sp - 16] = block_c8ORR_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8OS7; else goto c8ORS;
       u8OS7: // global
           call _c8ORR(R1) args: 0, res: 0, upd: 0;
       c8ORS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.fromBool_info" {
     Foreign.Marshal.Utils.fromBool_info:
         const Foreign.Marshal.Utils.fromBool_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S8OO7_srt+88;
 },
 _c8ORR() //  [R1]
         { []
         }
     {offset
       c8ORR: // global
           _s8OLm::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8ORV; else goto c8ORW;
       c8ORV: // global
           R2 = _s8OLm::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = Foreign.Marshal.Utils.fromBool2_closure;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
       c8ORW: // global
           R2 = _s8OLm::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = Foreign.Marshal.Utils.fromBool1_closure;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ORR_info" {
     block_c8ORR_info:
         const _c8ORR;
         const 1;
         const 12884901918;
         const S8OO7_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.871545185 UTC

[section ""data" . Foreign.Marshal.Utils.toBool_closure" {
     Foreign.Marshal.Utils.toBool_closure:
         const Foreign.Marshal.Utils.toBool_info;
         const 0;
 },
 ds_s8OLr_entry() //  [R1]
         { []
         }
     {offset
       c8OSw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8OSx; else goto c8OSy;
       c8OSx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8OSy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Utils.fromBool2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s8OLr_info" {
     ds_s8OLr_info:
         const ds_s8OLr_entry;
         const 1;
         const 4294967312;
         const S8OO7_srt+104;
 },
 sat_s8OLt_entry() //  [R1, R2]
         { []
         }
     {offset
       c8OSE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8OSF; else goto c8OSG;
       c8OSF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8OSG: // global
           _s8OLs::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s8OLs::P64;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes./=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8OLt_info" {
     sat_s8OLt_info:
         const sat_s8OLt_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Foreign.Marshal.Utils.toBool_entry() //  [R2, R3]
         { []
         }
     {offset
       c8OSH: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8OSL; else goto c8OSK;
       c8OSL: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.toBool_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OSK: // global
           I64[Hp - 40] = ds_s8OLr_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s8OLt_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.toBool_info" {
     Foreign.Marshal.Utils.toBool_info:
         const Foreign.Marshal.Utils.toBool_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S8OO7_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.880808007 UTC

[section ""data" . Foreign.Marshal.Utils.maybeNew1_closure" {
     Foreign.Marshal.Utils.maybeNew1_closure:
         const Foreign.Marshal.Utils.maybeNew1_info;
 },
 Foreign.Marshal.Utils.maybeNew1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8OTi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8OTj; else goto c8OTk;
       c8OTj: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.maybeNew1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OTk: // global
           I64[Sp - 16] = block_c8OTb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8OTr; else goto c8OTc;
       u8OTr: // global
           call _c8OTb(R1) args: 0, res: 0, upd: 0;
       c8OTc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.maybeNew1_info" {
     Foreign.Marshal.Utils.maybeNew1_info:
         const Foreign.Marshal.Utils.maybeNew1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c8OTb() //  [R1]
         { []
         }
     {offset
       c8OTb: // global
           if (R1 & 7 == 1) goto c8OTf; else goto c8OTg;
       c8OTf: // global
           R1 = GHC.Ptr.nullPtr_closure;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8OTg: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OTb_info" {
     block_c8OTb_info:
         const _c8OTb;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.886713485 UTC

[section ""data" . Foreign.Marshal.Utils.maybeNew_closure" {
     Foreign.Marshal.Utils.maybeNew_closure:
         const Foreign.Marshal.Utils.maybeNew_info;
 },
 Foreign.Marshal.Utils.maybeNew_entry() //  [R2, R3]
         { []
         }
     {offset
       c8OTJ: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Utils.maybeNew1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.maybeNew_info" {
     Foreign.Marshal.Utils.maybeNew_info:
         const Foreign.Marshal.Utils.maybeNew_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.890169519 UTC

[section ""data" . Foreign.Marshal.Utils.maybeWith_n_closure" {
     Foreign.Marshal.Utils.maybeWith_n_closure:
         const Foreign.Marshal.Utils.maybeWith_n_info;
 },
 Foreign.Marshal.Utils.maybeWith_n_entry() //  [R2]
         { []
         }
     {offset
       c8OTU: // global
           _s8OLz::P64 = R2;
           R2 = GHC.Ptr.nullPtr_closure;
           R1 = _s8OLz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.maybeWith_n_info" {
     Foreign.Marshal.Utils.maybeWith_n_info:
         const Foreign.Marshal.Utils.maybeWith_n_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.895026108 UTC

[section ""data" . Foreign.Marshal.Utils.maybeWith_closure" {
     Foreign.Marshal.Utils.maybeWith_closure:
         const Foreign.Marshal.Utils.maybeWith_info;
 },
 Foreign.Marshal.Utils.maybeWith_entry() //  [R2, R3]
         { []
         }
     {offset
       c8OUc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8OUd; else goto c8OUe;
       c8OUd: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.maybeWith_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OUe: // global
           I64[Sp - 16] = block_c8OU5_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8OUl; else goto c8OU6;
       u8OUl: // global
           call _c8OU5(R1) args: 0, res: 0, upd: 0;
       c8OU6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.maybeWith_info" {
     Foreign.Marshal.Utils.maybeWith_info:
         const Foreign.Marshal.Utils.maybeWith_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8OU5() //  [R1]
         { []
         }
     {offset
       c8OU5: // global
           if (R1 & 7 == 1) goto c8OU9; else goto c8OUa;
       c8OU9: // global
           R1 = Foreign.Marshal.Utils.maybeWith_n_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8OUa: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OU5_info" {
     block_c8OU5_info:
         const _c8OU5;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.903359757 UTC

[section ""data" . Foreign.Marshal.Utils.maybePeek1_closure" {
     Foreign.Marshal.Utils.maybePeek1_closure:
         const Foreign.Marshal.Utils.maybePeek1_info;
 },
 Foreign.Marshal.Utils.maybePeek1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8OUG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8OUH; else goto c8OUI;
       c8OUH: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.maybePeek1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OUI: // global
           I64[Sp - 16] = block_c8OUD_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8OUY; else goto c8OUE;
       u8OUY: // global
           call _c8OUD(R1) args: 0, res: 0, upd: 0;
       c8OUE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.maybePeek1_info" {
     Foreign.Marshal.Utils.maybePeek1_info:
         const Foreign.Marshal.Utils.maybePeek1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c8OUD() //  [R1]
         { []
         }
     {offset
       c8OUD: // global
           if (I64[R1 + 7] == 0) goto c8OUX; else goto c8OUT;
       c8OUX: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8OUT: // global
           _s8OLE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8OUP_info;
           R2 = R1;
           R1 = _s8OLE::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OUD_info" {
     block_c8OUD_info:
         const _c8OUD;
         const 1;
         const 30;
 },
 _c8OUP() //  [R1]
         { []
         }
     {offset
       c8OUP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8OUW; else goto c8OUV;
       c8OUW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8OUV: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OUP_info" {
     block_c8OUP_info:
         const _c8OUP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.911498699 UTC

[section ""data" . Foreign.Marshal.Utils.maybePeek_closure" {
     Foreign.Marshal.Utils.maybePeek_closure:
         const Foreign.Marshal.Utils.maybePeek_info;
 },
 Foreign.Marshal.Utils.maybePeek_entry() //  [R2, R3]
         { []
         }
     {offset
       c8OVl: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Utils.maybePeek1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.maybePeek_info" {
     Foreign.Marshal.Utils.maybePeek_info:
         const Foreign.Marshal.Utils.maybePeek_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.916824758 UTC

[section ""data" . Foreign.Marshal.Utils.withMany_closure" {
     Foreign.Marshal.Utils.withMany_closure:
         const Foreign.Marshal.Utils.withMany_info;
 },
 sat_s8OLX_entry() //  [R1, R2]
         { []
         }
     {offset
       c8OVN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8OVR; else goto c8OVQ;
       c8OVR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8OVQ: // global
           _s8OLQ::P64 = P64[R1 + 7];
           _s8OLU::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s8OLU::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s8OLQ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8OLX_info" {
     sat_s8OLX_info:
         const sat_s8OLX_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s8OLY_entry() //  [R1, R2]
         { []
         }
     {offset
       c8OVS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8OVW; else goto c8OVV;
       c8OVW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8OVV: // global
           _s8OLO::P64 = P64[R1 + 7];
           _s8OLQ::P64 = P64[R1 + 15];
           _s8OLT::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_s8OLX_info;
           P64[Hp - 8] = _s8OLQ::P64;
           P64[Hp] = R2;
           R4 = Hp - 15;
           R3 = _s8OLT::P64;
           R2 = _s8OLO::P64;
           call Foreign.Marshal.Utils.withMany_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8OLY_info" {
     sat_s8OLY_info:
         const sat_s8OLY_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Foreign.Marshal.Utils.withMany_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OW1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8OW2; else goto c8OW3;
       c8OW2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.withMany_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OW3: // global
           I64[Sp - 24] = block_c8OVw_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8OW9; else goto c8OVx;
       u8OW9: // global
           call _c8OVw(R1) args: 0, res: 0, upd: 0;
       c8OVx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.withMany_info" {
     Foreign.Marshal.Utils.withMany_info:
         const Foreign.Marshal.Utils.withMany_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c8OVw() //  [R1]
         { []
         }
     {offset
       c8OVw: // global
           _s8OLQ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c8OVY; else goto c8OVZ;
       c8OVY: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = _s8OLQ::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c8OVZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8OW8; else goto c8OW7;
       c8OW8: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8OW7: // global
           _s8OLS::P64 = P64[R1 + 6];
           _s8OLT::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_s8OLY_info;
           _s8OLO::P64 = P64[Sp + 8];
           P64[Hp - 16] = _s8OLO::P64;
           P64[Hp - 8] = _s8OLQ::P64;
           P64[Hp] = _s8OLT::P64;
           R3 = Hp - 23;
           R2 = _s8OLS::P64;
           R1 = _s8OLO::P64;
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OVw_info" {
     block_c8OVw_info:
         const _c8OVw;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.92829593 UTC

[section ""data" . Foreign.Marshal.Utils.$trModule3_closure" {
     Foreign.Marshal.Utils.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Utils.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.929979637 UTC

[section ""cstring" . Foreign.Marshal.Utils.$trModule2_bytes" {
     Foreign.Marshal.Utils.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,77,97,114,115,104,97,108,46,85,116,105,108,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.931627235 UTC

[section ""data" . Foreign.Marshal.Utils.$trModule1_closure" {
     Foreign.Marshal.Utils.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Utils.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.933750193 UTC

[section ""data" . Foreign.Marshal.Utils.$trModule_closure" {
     Foreign.Marshal.Utils.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.Marshal.Utils.$trModule3_closure+1;
         const Foreign.Marshal.Utils.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.937025288 UTC

[section ""data" . Foreign.Marshal.Utils.copyBytes1_closure" {
     Foreign.Marshal.Utils.copyBytes1_closure:
         const Foreign.Marshal.Utils.copyBytes1_info;
 },
 Foreign.Marshal.Utils.copyBytes1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OWH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8OWQ; else goto c8OWR;
       c8OWQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.copyBytes1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OWR: // global
           I64[Sp - 24] = block_c8OWE_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8OX7; else goto c8OWF;
       u8OX7: // global
           call _c8OWE(R1) args: 0, res: 0, upd: 0;
       c8OWF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.copyBytes1_info" {
     Foreign.Marshal.Utils.copyBytes1_info:
         const Foreign.Marshal.Utils.copyBytes1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c8OWE() //  [R1]
         { []
         }
     {offset
       c8OWE: // global
           I64[Sp] = block_c8OWK_info;
           _s8OM4::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8OM4::I64;
           if (R1 & 7 != 0) goto u8OX6; else goto c8OWL;
       u8OX6: // global
           call _c8OWK(R1) args: 0, res: 0, upd: 0;
       c8OWL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OWE_info" {
     block_c8OWE_info:
         const _c8OWE;
         const 2;
         const 30;
 },
 _c8OWK() //  [R1]
         { []
         }
     {offset
       c8OWK: // global
           I64[Sp] = block_c8OWP_info;
           _s8OM6::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8OM6::I64;
           if (R1 & 7 != 0) goto u8OX8; else goto c8OWU;
       u8OX8: // global
           call _c8OWP(R1) args: 0, res: 0, upd: 0;
       c8OWU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OWK_info" {
     block_c8OWK_info:
         const _c8OWK;
         const 66;
         const 30;
 },
 _c8OWP() //  [R1]
         { []
         }
     {offset
       c8OWP: // global
           (_s8OMd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(I64[Sp + 8], I64[Sp + 16], I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OWP_info" {
     block_c8OWP_info:
         const _c8OWP;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.946165152 UTC

[section ""data" . Foreign.Marshal.Utils.copyBytes_closure" {
     Foreign.Marshal.Utils.copyBytes_closure:
         const Foreign.Marshal.Utils.copyBytes_info;
 },
 Foreign.Marshal.Utils.copyBytes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OXz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Utils.copyBytes1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.copyBytes_info" {
     Foreign.Marshal.Utils.copyBytes_info:
         const Foreign.Marshal.Utils.copyBytes_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.951378729 UTC

[section ""data" . Foreign.Marshal.Utils.moveBytes1_closure" {
     Foreign.Marshal.Utils.moveBytes1_closure:
         const Foreign.Marshal.Utils.moveBytes1_info;
 },
 Foreign.Marshal.Utils.moveBytes1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OXN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8OXW; else goto c8OXX;
       c8OXW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.moveBytes1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OXX: // global
           I64[Sp - 24] = block_c8OXK_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8OYd; else goto c8OXL;
       u8OYd: // global
           call _c8OXK(R1) args: 0, res: 0, upd: 0;
       c8OXL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.moveBytes1_info" {
     Foreign.Marshal.Utils.moveBytes1_info:
         const Foreign.Marshal.Utils.moveBytes1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c8OXK() //  [R1]
         { []
         }
     {offset
       c8OXK: // global
           I64[Sp] = block_c8OXQ_info;
           _s8OMj::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8OMj::I64;
           if (R1 & 7 != 0) goto u8OYc; else goto c8OXR;
       u8OYc: // global
           call _c8OXQ(R1) args: 0, res: 0, upd: 0;
       c8OXR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OXK_info" {
     block_c8OXK_info:
         const _c8OXK;
         const 2;
         const 30;
 },
 _c8OXQ() //  [R1]
         { []
         }
     {offset
       c8OXQ: // global
           I64[Sp] = block_c8OXV_info;
           _s8OMl::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8OMl::I64;
           if (R1 & 7 != 0) goto u8OYe; else goto c8OY0;
       u8OYe: // global
           call _c8OXV(R1) args: 0, res: 0, upd: 0;
       c8OY0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OXQ_info" {
     block_c8OXQ_info:
         const _c8OXQ;
         const 66;
         const 30;
 },
 _c8OXV() //  [R1]
         { []
         }
     {offset
       c8OXV: // global
           (_s8OMs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memmove(I64[Sp + 8], I64[Sp + 16], I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OXV_info" {
     block_c8OXV_info:
         const _c8OXV;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.960388314 UTC

[section ""data" . Foreign.Marshal.Utils.moveBytes_closure" {
     Foreign.Marshal.Utils.moveBytes_closure:
         const Foreign.Marshal.Utils.moveBytes_info;
 },
 Foreign.Marshal.Utils.moveBytes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OYF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Utils.moveBytes1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.moveBytes_info" {
     Foreign.Marshal.Utils.moveBytes_info:
         const Foreign.Marshal.Utils.moveBytes_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.965548226 UTC

[section ""data" . Foreign.Marshal.Utils.fillBytes1_closure" {
     Foreign.Marshal.Utils.fillBytes1_closure:
         const Foreign.Marshal.Utils.fillBytes1_info;
 },
 Foreign.Marshal.Utils.fillBytes1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OYT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8OZ2; else goto c8OZ3;
       c8OZ2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Utils.fillBytes1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8OZ3: // global
           I64[Sp - 24] = block_c8OYQ_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8OZm; else goto c8OYR;
       u8OZm: // global
           call _c8OYQ(R1) args: 0, res: 0, upd: 0;
       c8OYR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.fillBytes1_info" {
     Foreign.Marshal.Utils.fillBytes1_info:
         const Foreign.Marshal.Utils.fillBytes1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c8OYQ() //  [R1]
         { []
         }
     {offset
       c8OYQ: // global
           I64[Sp] = block_c8OYW_info;
           _s8OMy::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8OMy::I64;
           if (R1 & 7 != 0) goto u8OZl; else goto c8OYX;
       u8OZl: // global
           call _c8OYW(R1) args: 0, res: 0, upd: 0;
       c8OYX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OYQ_info" {
     block_c8OYQ_info:
         const _c8OYQ;
         const 2;
         const 30;
 },
 _c8OYW() //  [R1]
         { []
         }
     {offset
       c8OYW: // global
           I64[Sp] = block_c8OZ1_info;
           _s8OMA::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8OMA::I64;
           if (R1 & 7 != 0) goto u8OZn; else goto c8OZ6;
       u8OZn: // global
           call _c8OZ1(R1) args: 0, res: 0, upd: 0;
       c8OZ6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OYW_info" {
     block_c8OYW_info:
         const _c8OYW;
         const 66;
         const 30;
 },
 _c8OZ1() //  [R1]
         { []
         }
     {offset
       c8OZ1: // global
           (_s8OMI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     ‘signed’,]  result hints:  [PtrHint] memset(I64[Sp + 8], I64[Sp + 16], I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8OZ1_info" {
     block_c8OZ1_info:
         const _c8OZ1;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.974446197 UTC

[section ""data" . Foreign.Marshal.Utils.fillBytes_closure" {
     Foreign.Marshal.Utils.fillBytes_closure:
         const Foreign.Marshal.Utils.fillBytes_info;
 },
 Foreign.Marshal.Utils.fillBytes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8OZO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Utils.fillBytes1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Utils.fillBytes_info" {
     Foreign.Marshal.Utils.fillBytes_info:
         const Foreign.Marshal.Utils.fillBytes_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:58.978232128 UTC

[section ""relreadonly" . S8OO7_srt" {
     S8OO7_srt:
         const GHC.Err.undefined_closure;
         const lvl11_r8Ohm_closure;
         const Foreign.Marshal.Alloc.malloc1_closure;
         const Foreign.Marshal.Utils.new1_closure;
         const Foreign.Marshal.Utils.new2_closure;
         const lvl16_r8Ohr_closure;
         const lvl20_r8Ohv_closure;
         const Foreign.Marshal.Utils.with1_closure;
         const Foreign.Marshal.Utils.with2_closure;
         const Foreign.Marshal.Utils.with3_closure;
         const sat_s8OLl_closure;
         const Foreign.Marshal.Utils.fromBool_closure;
         const Foreign.Marshal.Utils.fromBool1_closure;
         const Foreign.Marshal.Utils.fromBool2_closure;
         const Foreign.Marshal.Utils.toBool_closure;
 }]

