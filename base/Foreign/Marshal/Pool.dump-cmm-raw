
==================== Raw Cmm ====================
2018-03-16 16:04:15.016351953 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:04:15.017492979 UTC

[section ""cstring" . Foreign.Marshal.Pool.$trModule4_bytes" {
     Foreign.Marshal.Pool.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.019292777 UTC

[section ""data" . Foreign.Marshal.Pool.$trModule3_closure" {
     Foreign.Marshal.Pool.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Pool.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.021000739 UTC

[section ""cstring" . Foreign.Marshal.Pool.$trModule2_bytes" {
     Foreign.Marshal.Pool.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,77,97,114,115,104,97,108,46,80,111,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.02285481 UTC

[section ""data" . Foreign.Marshal.Pool.$trModule1_closure" {
     Foreign.Marshal.Pool.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Pool.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.025202501 UTC

[section ""data" . Foreign.Marshal.Pool.$trModule_closure" {
     Foreign.Marshal.Pool.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.Marshal.Pool.$trModule3_closure+1;
         const Foreign.Marshal.Pool.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.026918082 UTC

[section ""data" . $krep_r95mW_closure" {
     $krep_r95mW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.028581545 UTC

[section ""data" . $krep1_r95mX_closure" {
     $krep1_r95mX_closure:
         const :_con_info;
         const $krep_r95mW_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.030333549 UTC

[section ""data" . $krep2_r95mY_closure" {
     $krep2_r95mY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep1_r95mX_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.032032053 UTC

[section ""data" . $krep3_r95mZ_closure" {
     $krep3_r95mZ_closure:
         const :_con_info;
         const $krep2_r95mY_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.033693901 UTC

[section ""data" . $krep4_r95n0_closure" {
     $krep4_r95n0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep3_r95mZ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.035463813 UTC

[section ""data" . $krep5_r95n1_closure" {
     $krep5_r95n1_closure:
         const :_con_info;
         const $krep4_r95n0_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.037604066 UTC

[section ""data" . $krep6_r95n2_closure" {
     $krep6_r95n2_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep5_r95n1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.039723955 UTC

[section ""cstring" . Foreign.Marshal.Pool.$tcPool2_bytes" {
     Foreign.Marshal.Pool.$tcPool2_bytes:
         I8[] [80,111,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.041875661 UTC

[section ""data" . Foreign.Marshal.Pool.$tcPool1_closure" {
     Foreign.Marshal.Pool.$tcPool1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Pool.$tcPool2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.043670301 UTC

[section ""data" . Foreign.Marshal.Pool.$tcPool_closure" {
     Foreign.Marshal.Pool.$tcPool_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Marshal.Pool.$trModule_closure+1;
         const Foreign.Marshal.Pool.$tcPool1_closure+1;
         const GHC.Types.krep$*_closure;
         const 6812857741828992361;
         const 12127662557529231519;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.04554404 UTC

[section ""data" . $krep7_r95n3_closure" {
     $krep7_r95n3_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.Marshal.Pool.$tcPool_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.047260425 UTC

[section ""data" . Foreign.Marshal.Pool.$tc'Pool1_closure" {
     Foreign.Marshal.Pool.$tc'Pool1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r95n2_closure+1;
         const $krep7_r95n3_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.048986507 UTC

[section ""cstring" . Foreign.Marshal.Pool.$tc'Pool3_bytes" {
     Foreign.Marshal.Pool.$tc'Pool3_bytes:
         I8[] [39,80,111,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.051327097 UTC

[section ""data" . Foreign.Marshal.Pool.$tc'Pool2_closure" {
     Foreign.Marshal.Pool.$tc'Pool2_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Pool.$tc'Pool3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.053127806 UTC

[section ""data" . Foreign.Marshal.Pool.$tc'Pool_closure" {
     Foreign.Marshal.Pool.$tc'Pool_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Marshal.Pool.$trModule_closure+1;
         const Foreign.Marshal.Pool.$tc'Pool2_closure+1;
         const Foreign.Marshal.Pool.$tc'Pool1_closure+4;
         const 11588816997626637361;
         const 15405086111208545194;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.055286103 UTC

[section ""cstring" . lvl_r95n4_bytes" {
     lvl_r95n4_bytes:
         I8[] [112,111,105,110,116,101,114,32,110,111,116,32,105,110,32,112,111,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.057697908 UTC

[section ""data" . Foreign.Marshal.Pool.pooledRealloc2_closure" {
     Foreign.Marshal.Pool.pooledRealloc2_closure:
         const Foreign.Marshal.Pool.pooledRealloc2_info;
 },
 Foreign.Marshal.Pool.pooledRealloc2_entry() //  []
         { []
         }
     {offset
       c95Y4: // global
           R2 = lvl_r95n4_bytes;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledRealloc2_info" {
     Foreign.Marshal.Pool.pooledRealloc2_info:
         const Foreign.Marshal.Pool.pooledRealloc2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.064035664 UTC

[section ""data" . Foreign.Marshal.Pool.$wpooledReallocBytes_closure" {
     Foreign.Marshal.Pool.$wpooledReallocBytes_closure:
         const Foreign.Marshal.Pool.$wpooledReallocBytes_info;
         const 0;
 },
 sat_s95nT_entry() //  [R1]
         { []
         }
     {offset
       c95YC: // global
           _s95nT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c95YD; else goto c95YE;
       c95YE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c95YG; else goto c95YF;
       c95YG: // global
           HpAlloc = 16;
           goto c95YD;
       c95YD: // global
           R1 = _s95nT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c95YF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s95nT::P64;
           _s95nQ::P64 = P64[_s95nT::P64 + 16];
           _s95ny::I64 = I64[_s95nT::P64 + 24];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s95ny::I64;
           R4 = _s95nQ::P64;
           R3 = Hp - 7;
           R2 = GHC.Ptr.$fEqPtr_$c==_closure+2;
           Sp = Sp - 16;
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s95nT_info" {
     sat_s95nT_info:
         const sat_s95nT_entry;
         const 4294967297;
         const 19;
 },
 sat_s95o4_entry() //  [R1]
         { []
         }
     {offset
       c95YP: // global
           _s95o4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c95YQ; else goto c95YR;
       c95YR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c95YT; else goto c95YS;
       c95YT: // global
           HpAlloc = 16;
           goto c95YQ;
       c95YQ: // global
           R1 = _s95o4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c95YS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s95o4::P64;
           _s95o2::P64 = P64[_s95o4::P64 + 16];
           _s95ny::I64 = I64[_s95o4::P64 + 24];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s95ny::I64;
           R4 = _s95o2::P64;
           R3 = Hp - 7;
           R2 = GHC.Ptr.$fEqPtr_$c==_closure+2;
           Sp = Sp - 16;
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s95o4_info" {
     sat_s95o4_info:
         const sat_s95o4_entry;
         const 4294967297;
         const 19;
 },
 Foreign.Marshal.Pool.$wpooledReallocBytes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c95YY: // global
           _s95nz::I64 = R4;
           _s95ny::I64 = R3;
           _s95nx::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c95YZ; else goto c95Z0;
       c95Z0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c95Z2; else goto c95Z1;
       c95Z2: // global
           HpAlloc = 16;
           goto c95YZ;
       c95YZ: // global
           R4 = _s95nz::I64;
           R3 = _s95ny::I64;
           R2 = _s95nx::P64;
           R1 = Foreign.Marshal.Pool.$wpooledReallocBytes_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c95Z1: // global
           _s95nD::P64 = P64[_s95nx::P64 + 8];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s95ny::I64;
           I64[Sp - 40] = block_c95Yg_info;
           R4 = _s95nD::P64;
           R3 = Hp - 7;
           R2 = GHC.Ptr.$fEqPtr_closure;
           P64[Sp - 32] = _s95nx::P64;
           I64[Sp - 24] = _s95ny::I64;
           I64[Sp - 16] = _s95nz::I64;
           P64[Sp - 8] = _s95nD::P64;
           Sp = Sp - 40;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.$wpooledReallocBytes_info" {
     Foreign.Marshal.Pool.$wpooledReallocBytes_info:
         const Foreign.Marshal.Pool.$wpooledReallocBytes_entry;
         const 0;
         const 30064771086;
         const 17179869204;
         const S95uu_srt;
 },
 _c95Yg() //  [R1]
         { []
         }
     {offset
       c95Yg: // global
           if (R1 & 7 == 1) goto c95YV; else goto c95YW;
       c95YV: // global
           R3 = Foreign.Marshal.Pool.pooledRealloc2_closure+1;
           R2 = P64[Sp + 32];
           Sp = Sp + 40;
           call Foreign.Marshal.Error.throwIf2_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       c95YW: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c95Z7; else goto c95Z6;
       c95Z7: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c95Z6: // global
           _s95nx::P64 = P64[Sp + 8];
           _s95ny::I64 = I64[Sp + 16];
           _s95nH::I64 = I64[Sp + 24];
           if (_s95nH::I64 != 0) goto c95Zc; else goto c95Zd;
       c95Zc: // global
           (_s95nM::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] realloc(_s95ny::I64, _s95nH::I64);
           if (_s95nM::I64 == 0) goto c95Za; else goto c95Z9;
       c95Za: // global
           Hp = Hp - 72;
           R1 = Foreign.Marshal.Alloc.realloc2_closure;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c95Z9: // global
           _s95nQ::P64 = P64[_s95nx::P64 + 8];
           I64[Hp - 64] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 56] = _s95nM::I64;
           I64[Hp - 48] = sat_s95nT_info;
           P64[Hp - 32] = _s95nQ::P64;
           I64[Hp - 24] = _s95ny::I64;
           I64[Hp - 16] = :_con_info;
           _c95Yw::P64 = Hp - 63;
           P64[Hp - 8] = _c95Yw::P64;
           P64[Hp] = Hp - 48;
           call MO_WriteBarrier();
           P64[_s95nx::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s95nx::P64);
           R1 = _c95Yw::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c95Zd: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(_s95ny::I64);
           _s95o2::P64 = P64[_s95nx::P64 + 8];
           I64[Hp - 64] = sat_s95o4_info;
           P64[Hp - 48] = _s95o2::P64;
           I64[Hp - 40] = _s95ny::I64;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Ptr.nullPtr_closure;
           P64[Hp - 16] = Hp - 64;
           call MO_WriteBarrier();
           P64[_s95nx::P64 + 8] = Hp - 30;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s95nx::P64);
           Hp = Hp - 16;
           R1 = GHC.Ptr.nullPtr_closure;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c95Yg_info" {
     block_c95Yg_info:
         const _c95Yg;
         const 388;
         const 12884901918;
         const S95uu_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.076455003 UTC

[section ""data" . Foreign.Marshal.Pool.pooledRealloc1_closure" {
     Foreign.Marshal.Pool.pooledRealloc1_closure:
         const Foreign.Marshal.Pool.pooledRealloc1_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledRealloc1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c95ZU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9603; else goto c9604;
       c9603: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledRealloc1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9604: // global
           I64[Sp - 24] = block_c95ZR_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u960d; else goto c95ZS;
       u960d: // global
           call _c95ZR(R1) args: 0, res: 0, upd: 0;
       c95ZS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledRealloc1_info" {
     Foreign.Marshal.Pool.pooledRealloc1_info:
         const Foreign.Marshal.Pool.pooledRealloc1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S95uu_srt+16;
 },
 _c95ZR() //  [R1]
         { []
         }
     {offset
       c95ZR: // global
           I64[Sp] = block_c95ZX_info;
           _s95oc::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s95oc::P64;
           if (R1 & 7 != 0) goto u960c; else goto c95ZY;
       u960c: // global
           call _c95ZX(R1) args: 0, res: 0, upd: 0;
       c95ZY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c95ZR_info" {
     block_c95ZR_info:
         const _c95ZR;
         const 2;
         const 4294967326;
         const S95uu_srt+16;
 },
 _c95ZX() //  [R1]
         { []
         }
     {offset
       c95ZX: // global
           I64[Sp] = block_c9602_info;
           _s95oe::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s95oe::I64;
           if (R1 & 7 != 0) goto u960e; else goto c9607;
       u960e: // global
           call _c9602(R1) args: 0, res: 0, upd: 0;
       c9607: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c95ZX_info" {
     block_c95ZX_info:
         const _c95ZX;
         const 2;
         const 4294967326;
         const S95uu_srt+16;
 },
 _c9602() //  [R1]
         { []
         }
     {offset
       c9602: // global
           R4 = I64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Foreign.Marshal.Pool.$wpooledReallocBytes_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9602_info" {
     block_c9602_info:
         const _c9602;
         const 130;
         const 4294967326;
         const S95uu_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.085045937 UTC

[section ""data" . Foreign.Marshal.Pool.pooledReallocBytes_closure" {
     Foreign.Marshal.Pool.pooledReallocBytes_closure:
         const Foreign.Marshal.Pool.pooledReallocBytes_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledReallocBytes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c960A: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Pool.pooledRealloc1_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledReallocBytes_info" {
     Foreign.Marshal.Pool.pooledReallocBytes_info:
         const Foreign.Marshal.Pool.pooledReallocBytes_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S95uu_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.088513233 UTC

[section ""cstring" . lvl1_r95n5_bytes" {
     lvl1_r95n5_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.091236377 UTC

[section ""data" . lvl2_r95n6_closure" {
     lvl2_r95n6_closure:
         const lvl2_r95n6_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r95n6_entry() //  [R1]
         { []
         }
     {offset
       c960O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c960P; else goto c960Q;
       c960P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c960Q: // global
           (_c960L::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c960L::I64 == 0) goto c960N; else goto c960M;
       c960N: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c960M: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c960L::I64;
           R2 = lvl1_r95n5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_r95n6_info" {
     lvl2_r95n6_info:
         const lvl2_r95n6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.095195431 UTC

[section ""data" . lvl3_r95n7_closure" {
     lvl3_r95n7_closure:
         const lvl3_r95n7_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r95n7_entry() //  [R1]
         { []
         }
     {offset
       c9614: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9615; else goto c9616;
       c9615: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9616: // global
           (_c9611::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9611::I64 == 0) goto c9613; else goto c9612;
       c9613: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9612: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9611::I64;
           R2 = Foreign.Marshal.Pool.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r95n7_info" {
     lvl3_r95n7_info:
         const lvl3_r95n7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.099405008 UTC

[section ""data" . lvl4_r95n8_closure" {
     lvl4_r95n8_closure:
         const lvl4_r95n8_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r95n8_entry() //  [R1]
         { []
         }
     {offset
       c961k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c961l; else goto c961m;
       c961l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c961m: // global
           (_c961h::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c961h::I64 == 0) goto c961j; else goto c961i;
       c961j: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c961i: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c961h::I64;
           R2 = Foreign.Marshal.Pool.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_r95n8_info" {
     lvl4_r95n8_info:
         const lvl4_r95n8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.103348973 UTC

[section ""cstring" . lvl5_r95n9_bytes" {
     lvl5_r95n9_bytes:
         I8[] [46,47,70,111,114,101,105,103,110,47,77,97,114,115,104,97,108,47,80,111,111,108,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.105538981 UTC

[section ""data" . lvl6_r95na_closure" {
     lvl6_r95na_closure:
         const lvl6_r95na_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r95na_entry() //  [R1]
         { []
         }
     {offset
       c961B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c961C; else goto c961D;
       c961C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c961D: // global
           (_c961y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c961y::I64 == 0) goto c961A; else goto c961z;
       c961A: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c961z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c961y::I64;
           R2 = lvl5_r95n9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r95na_info" {
     lvl6_r95na_info:
         const lvl6_r95na_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.108957604 UTC

[section ""data" . lvl7_r95nb_closure" {
     lvl7_r95nb_closure:
         const GHC.Types.I#_con_info;
         const 159;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.110670514 UTC

[section ""data" . lvl8_r95nc_closure" {
     lvl8_r95nc_closure:
         const GHC.Types.I#_con_info;
         const 26;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.112261174 UTC

[section ""data" . lvl9_r95nd_closure" {
     lvl9_r95nd_closure:
         const GHC.Types.I#_con_info;
         const 35;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.114063496 UTC

[section ""data" . lvl10_r95ne_closure" {
     lvl10_r95ne_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl3_r95n7_closure;
         const lvl4_r95n8_closure;
         const lvl6_r95na_closure;
         const lvl7_r95nb_closure+1;
         const lvl8_r95nc_closure+1;
         const lvl7_r95nb_closure+1;
         const lvl9_r95nd_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.115928075 UTC

[section ""data" . lvl11_r95nf_closure" {
     lvl11_r95nf_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl2_r95n6_closure;
         const lvl10_r95ne_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.118969978 UTC

[section ""data" . Foreign.Marshal.Pool.pooledReallocArray1_closure" {
     Foreign.Marshal.Pool.pooledReallocArray1_closure:
         const Foreign.Marshal.Pool.pooledReallocArray1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Pool.pooledReallocArray1_entry() //  [R1]
         { []
         }
     {offset
       c961W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c961X; else goto c961Y;
       c961X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c961Y: // global
           (_c961T::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c961T::I64 == 0) goto c961V; else goto c961U;
       c961V: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c961U: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c961T::I64;
           R2 = lvl11_r95nf_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledReallocArray1_info" {
     Foreign.Marshal.Pool.pooledReallocArray1_info:
         const Foreign.Marshal.Pool.pooledReallocArray1_entry;
         const 0;
         const 12884901909;
         const S95uu_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.124986803 UTC

[section ""data" . Foreign.Marshal.Pool.pooledReallocArray_closure" {
     Foreign.Marshal.Pool.pooledReallocArray_closure:
         const Foreign.Marshal.Pool.pooledReallocArray_info;
         const 0;
 },
 lvl27_s95oi_entry() //  [R1]
         { []
         }
     {offset
       c962e: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c962f; else goto c962g;
       c962f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c962g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Pool.pooledReallocArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_s95oi_info" {
     lvl27_s95oi_info:
         const lvl27_s95oi_entry;
         const 1;
         const 4294967312;
         const S95uu_srt+48;
 },
 sat_s95ow_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c962p: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c962D; else goto c962E;
       c962D: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c962E: // global
           I64[Sp - 32] = block_c962m_info;
           _s95oi::P64 = P64[R1 + 4];
           R1 = R2;
           P64[Sp - 24] = _s95oi::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u962P; else goto c962n;
       u962P: // global
           call _c962m(R1) args: 0, res: 0, upd: 0;
       c962n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s95ow_info" {
     sat_s95ow_info:
         const sat_s95ow_entry;
         const 1;
         const 4294967305;
         const 17179869207;
         const S95uu_srt+16;
 },
 _c962m() //  [R1]
         { []
         }
     {offset
       c962m: // global
           I64[Sp] = block_c962s_info;
           _s95oo::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s95oo::P64;
           if (R1 & 7 != 0) goto u962O; else goto c962t;
       u962O: // global
           call _c962s(R1) args: 0, res: 0, upd: 0;
       c962t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c962m_info" {
     block_c962m_info:
         const _c962m;
         const 3;
         const 4294967326;
         const S95uu_srt+16;
 },
 _c962s() //  [R1]
         { []
         }
     {offset
       c962s: // global
           I64[Sp] = block_c962x_info;
           _s95oq::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s95oq::I64;
           if (R1 & 7 != 0) goto u962Q; else goto c962y;
       u962Q: // global
           call _c962x(R1) args: 0, res: 0, upd: 0;
       c962y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c962s_info" {
     block_c962s_info:
         const _c962s;
         const 3;
         const 4294967326;
         const S95uu_srt+16;
 },
 _c962x() //  [R1]
         { []
         }
     {offset
       c962x: // global
           I64[Sp] = block_c962C_info;
           _s95os::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s95os::I64;
           if (R1 & 7 != 0) goto u962R; else goto c962I;
       u962R: // global
           call _c962C(R1) args: 0, res: 0, upd: 0;
       c962I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c962x_info" {
     block_c962x_info:
         const _c962x;
         const 259;
         const 4294967326;
         const S95uu_srt+16;
 },
 _c962C() //  [R1]
         { []
         }
     {offset
       c962C: // global
           R4 = I64[Sp + 8] * I64[R1 + 7];
           R3 = I64[Sp + 24];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call Foreign.Marshal.Pool.$wpooledReallocBytes_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c962C_info" {
     block_c962C_info:
         const _c962C;
         const 323;
         const 4294967326;
         const S95uu_srt+16;
 },
 Foreign.Marshal.Pool.pooledReallocArray_entry() //  [R2]
         { []
         }
     {offset
       c962S: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c962W; else goto c962V;
       c962W: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledReallocArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c962V: // global
           I64[Hp - 32] = lvl27_s95oi_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s95ow_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledReallocArray_info" {
     Foreign.Marshal.Pool.pooledReallocArray_info:
         const Foreign.Marshal.Pool.pooledReallocArray_entry;
         const 0;
         const 210453397518;
         const 4294967301;
         const S95uu_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.140573861 UTC

[section ""data" . Foreign.Marshal.Pool.pooledReallocArray2_closure" {
     Foreign.Marshal.Pool.pooledReallocArray2_closure:
         const Foreign.Marshal.Pool.pooledReallocArray2_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledReallocArray2_entry() //  [R2, R3, R4,
                                                       R5]
         { []
         }
     {offset
       c963A: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c963O; else goto c963P;
       c963O: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledReallocArray2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c963P: // global
           I64[Sp - 32] = block_c963x_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9642; else goto c963y;
       u9642: // global
           call _c963x(R1) args: 0, res: 0, upd: 0;
       c963y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledReallocArray2_info" {
     Foreign.Marshal.Pool.pooledReallocArray2_info:
         const Foreign.Marshal.Pool.pooledReallocArray2_entry;
         const 0;
         const 347892350990;
         const 21474836504;
         const S95uu_srt+16;
 },
 _c963x() //  [R1]
         { []
         }
     {offset
       c963x: // global
           I64[Sp] = block_c963D_info;
           _s95oD::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s95oD::P64;
           if (R1 & 7 != 0) goto u9641; else goto c963E;
       u9641: // global
           call _c963D(R1) args: 0, res: 0, upd: 0;
       c963E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c963x_info" {
     block_c963x_info:
         const _c963x;
         const 3;
         const 73014444062;
         const S95uu_srt+16;
 },
 _c963D() //  [R1]
         { []
         }
     {offset
       c963D: // global
           I64[Sp] = block_c963I_info;
           _s95oF::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s95oF::I64;
           if (R1 & 7 != 0) goto u9643; else goto c963J;
       u9643: // global
           call _c963I(R1) args: 0, res: 0, upd: 0;
       c963J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c963D_info" {
     block_c963D_info:
         const _c963D;
         const 3;
         const 73014444062;
         const S95uu_srt+16;
 },
 _c963I() //  [R1]
         { []
         }
     {offset
       c963I: // global
           I64[Sp] = block_c963N_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Foreign.Marshal.Pool.pooledReallocArray1_closure;
           I64[Sp + 8] = I64[R1 + 7];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c963I_info" {
     block_c963I_info:
         const _c963I;
         const 259;
         const 73014444062;
         const S95uu_srt+16;
 },
 _c963N() //  [R1]
         { []
         }
     {offset
       c963N: // global
           R4 = (I64[Sp + 8] + 1) * I64[R1 + 7];
           R3 = I64[Sp + 24];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call Foreign.Marshal.Pool.$wpooledReallocBytes_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c963N_info" {
     block_c963N_info:
         const _c963N;
         const 323;
         const 4294967326;
         const S95uu_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.150965445 UTC

[section ""data" . Foreign.Marshal.Pool.pooledReallocArray0_closure" {
     Foreign.Marshal.Pool.pooledReallocArray0_closure:
         const Foreign.Marshal.Pool.pooledReallocArray0_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledReallocArray0_entry() //  [R2, R3, R4,
                                                       R5]
         { []
         }
     {offset
       c964w: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Pool.pooledReallocArray2_entry(R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledReallocArray0_info" {
     Foreign.Marshal.Pool.pooledReallocArray0_info:
         const Foreign.Marshal.Pool.pooledReallocArray0_entry;
         const 0;
         const 4294967310;
         const 21474836504;
         const S95uu_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.154046072 UTC

[section ""data" . lvl12_r95ng_closure" {
     lvl12_r95ng_closure:
         const GHC.Types.I#_con_info;
         const 124;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.155680648 UTC

[section ""data" . lvl13_r95nh_closure" {
     lvl13_r95nh_closure:
         const GHC.Types.I#_con_info;
         const 20;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.157375126 UTC

[section ""data" . lvl14_r95ni_closure" {
     lvl14_r95ni_closure:
         const GHC.Types.I#_con_info;
         const 29;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.159041284 UTC

[section ""data" . lvl15_r95nj_closure" {
     lvl15_r95nj_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl3_r95n7_closure;
         const lvl4_r95n8_closure;
         const lvl6_r95na_closure;
         const lvl12_r95ng_closure+1;
         const lvl13_r95nh_closure+1;
         const lvl12_r95ng_closure+1;
         const lvl14_r95ni_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.160857308 UTC

[section ""data" . lvl16_r95nk_closure" {
     lvl16_r95nk_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl2_r95n6_closure;
         const lvl15_r95nj_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.163884167 UTC

[section ""data" . Foreign.Marshal.Pool.pooledRealloc3_closure" {
     Foreign.Marshal.Pool.pooledRealloc3_closure:
         const Foreign.Marshal.Pool.pooledRealloc3_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Pool.pooledRealloc3_entry() //  [R1]
         { []
         }
     {offset
       c964O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c964P; else goto c964Q;
       c964P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c964Q: // global
           (_c964L::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c964L::I64 == 0) goto c964N; else goto c964M;
       c964N: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c964M: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c964L::I64;
           R2 = lvl16_r95nk_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledRealloc3_info" {
     Foreign.Marshal.Pool.pooledRealloc3_info:
         const Foreign.Marshal.Pool.pooledRealloc3_entry;
         const 0;
         const 141733920789;
         const S95uu_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.168597245 UTC

[section ""data" . Foreign.Marshal.Pool.pooledRealloc_closure" {
     Foreign.Marshal.Pool.pooledRealloc_closure:
         const Foreign.Marshal.Pool.pooledRealloc_info;
         const 0;
 },
 lvl27_s95oN_entry() //  [R1]
         { []
         }
     {offset
       c9656: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9657; else goto c9658;
       c9657: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9658: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Pool.pooledRealloc3_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_s95oN_info" {
     lvl27_s95oN_info:
         const lvl27_s95oN_entry;
         const 1;
         const 4294967312;
         const S95uu_srt+80;
 },
 sat_s95oR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c965e: // global
           R4 = P64[R1 + 5];
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Pool.pooledRealloc1_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s95oR_info" {
     sat_s95oR_info:
         const sat_s95oR_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const S95uu_srt+24;
 },
 Foreign.Marshal.Pool.pooledRealloc_entry() //  [R2]
         { []
         }
     {offset
       c965h: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c965l; else goto c965k;
       c965l: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledRealloc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c965k: // global
           I64[Hp - 32] = lvl27_s95oN_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s95oR_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledRealloc_info" {
     Foreign.Marshal.Pool.pooledRealloc_info:
         const Foreign.Marshal.Pool.pooledRealloc_entry;
         const 0;
         const 1653562408974;
         const 4294967301;
         const S95uu_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.176564441 UTC

[section ""data" . Foreign.Marshal.Pool.pooledMallocBytes1_closure" {
     Foreign.Marshal.Pool.pooledMallocBytes1_closure:
         const Foreign.Marshal.Pool.pooledMallocBytes1_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledMallocBytes1_entry() //  [R2, R3]
         { []
         }
     {offset
       c965G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c965H; else goto c965I;
       c965H: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledMallocBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c965I: // global
           I64[Sp - 16] = block_c965D_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u966b; else goto c965E;
       u966b: // global
           call _c965D(R1) args: 0, res: 0, upd: 0;
       c965E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledMallocBytes1_info" {
     Foreign.Marshal.Pool.pooledMallocBytes1_info:
         const Foreign.Marshal.Pool.pooledMallocBytes1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S95uu_srt+96;
 },
 _c965D() //  [R1]
         { []
         }
     {offset
       c965D: // global
           _s95oS::P64 = P64[Sp + 8];
           (_s95p1::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[R1 + 7]);
           if (_s95p1::I64 == 0) goto c9665; else goto c9661;
       c9665: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c9661: // global
           I64[Sp] = block_c965U_info;
           R1 = _s95oS::P64;
           I64[Sp + 8] = _s95p1::I64;
           if (R1 & 7 != 0) goto u966a; else goto c965V;
       u966a: // global
           call _c965U(R1) args: 0, res: 0, upd: 0;
       c965V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c965D_info" {
     block_c965D_info:
         const _c965D;
         const 1;
         const 4294967326;
         const S95uu_srt+96;
 },
 _c965U() //  [R1]
         { []
         }
     {offset
       c965U: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9664; else goto c9663;
       c9664: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9663: // global
           _s95p4::P64 = P64[R1 + 7];
           _s95p7::P64 = P64[_s95p4::P64 + 8];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           _c965Z::P64 = Hp - 31;
           P64[Hp - 8] = _c965Z::P64;
           P64[Hp] = _s95p7::P64;
           call MO_WriteBarrier();
           P64[_s95p4::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s95p4::P64);
           R1 = _c965Z::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c965U_info" {
     block_c965U_info:
         const _c965U;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.185384295 UTC

[section ""data" . Foreign.Marshal.Pool.pooledMallocBytes_closure" {
     Foreign.Marshal.Pool.pooledMallocBytes_closure:
         const Foreign.Marshal.Pool.pooledMallocBytes_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledMallocBytes_entry() //  [R2, R3]
         { []
         }
     {offset
       c966x: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Pool.pooledMallocBytes1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledMallocBytes_info" {
     Foreign.Marshal.Pool.pooledMallocBytes_info:
         const Foreign.Marshal.Pool.pooledMallocBytes_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S95uu_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.188451775 UTC

[section ""data" . lvl17_r95nl_closure" {
     lvl17_r95nl_closure:
         const GHC.Types.I#_con_info;
         const 144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.190366645 UTC

[section ""data" . lvl18_r95nm_closure" {
     lvl18_r95nm_closure:
         const GHC.Types.I#_con_info;
         const 25;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.192044208 UTC

[section ""data" . lvl19_r95nn_closure" {
     lvl19_r95nn_closure:
         const GHC.Types.I#_con_info;
         const 34;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.193851653 UTC

[section ""data" . lvl20_r95no_closure" {
     lvl20_r95no_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl3_r95n7_closure;
         const lvl4_r95n8_closure;
         const lvl6_r95na_closure;
         const lvl17_r95nl_closure+1;
         const lvl18_r95nm_closure+1;
         const lvl17_r95nl_closure+1;
         const lvl19_r95nn_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.196050015 UTC

[section ""data" . lvl21_r95np_closure" {
     lvl21_r95np_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl2_r95n6_closure;
         const lvl20_r95no_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.198374484 UTC

[section ""data" . Foreign.Marshal.Pool.pooledMallocArray1_closure" {
     Foreign.Marshal.Pool.pooledMallocArray1_closure:
         const Foreign.Marshal.Pool.pooledMallocArray1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Pool.pooledMallocArray1_entry() //  [R1]
         { []
         }
     {offset
       c966P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c966Q; else goto c966R;
       c966Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c966R: // global
           (_c966M::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c966M::I64 == 0) goto c966O; else goto c966N;
       c966O: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c966N: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c966M::I64;
           R2 = lvl21_r95np_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledMallocArray1_info" {
     Foreign.Marshal.Pool.pooledMallocArray1_info:
         const Foreign.Marshal.Pool.pooledMallocArray1_entry;
         const 0;
         const 4402341478421;
         const S95uu_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.204962506 UTC

[section ""data" . Foreign.Marshal.Pool.pooledMallocArray_closure" {
     Foreign.Marshal.Pool.pooledMallocArray_closure:
         const Foreign.Marshal.Pool.pooledMallocArray_info;
         const 0;
 },
 lvl27_s95pd_entry() //  [R1]
         { []
         }
     {offset
       c9677: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9678; else goto c9679;
       c9678: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9679: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Pool.pooledMallocArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_s95pd_info" {
     lvl27_s95pd_info:
         const lvl27_s95pd_entry;
         const 1;
         const 4294967312;
         const S95uu_srt+120;
 },
 sat_s95pB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c967i: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c967m; else goto c967n;
       c967m: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c967n: // global
           I64[Sp - 24] = block_c967f_info;
           _s95pd::P64 = P64[R1 + 5];
           R1 = R3;
           P64[Sp - 16] = _s95pd::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u967W; else goto c967g;
       u967W: // global
           call _c967f(R1) args: 0, res: 0, upd: 0;
       c967g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s95pB_info" {
     sat_s95pB_info:
         const sat_s95pB_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const S95uu_srt+96;
 },
 _c967f() //  [R1]
         { []
         }
     {offset
       c967f: // global
           I64[Sp] = block_c967l_info;
           _s95pi::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s95pi::I64;
           if (R1 & 7 != 0) goto u967V; else goto c967p;
       u967V: // global
           call _c967l(R1) args: 0, res: 0, upd: 0;
       c967p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c967f_info" {
     block_c967f_info:
         const _c967f;
         const 2;
         const 4294967326;
         const S95uu_srt+96;
 },
 _c967l() //  [R1]
         { []
         }
     {offset
       c967l: // global
           _s95pe::P64 = P64[Sp + 16];
           (_s95pq::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[Sp + 8] * I64[R1 + 7]);
           if (_s95pq::I64 == 0) goto c967Q; else goto c967M;
       c967Q: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c967M: // global
           I64[Sp + 8] = block_c967F_info;
           R1 = _s95pe::P64;
           I64[Sp + 16] = _s95pq::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u967X; else goto c967G;
       u967X: // global
           call _c967F(R1) args: 0, res: 0, upd: 0;
       c967G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c967l_info" {
     block_c967l_info:
         const _c967l;
         const 66;
         const 4294967326;
         const S95uu_srt+96;
 },
 _c967F() //  [R1]
         { []
         }
     {offset
       c967F: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c967P; else goto c967O;
       c967P: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c967O: // global
           _s95pt::P64 = P64[R1 + 7];
           _s95pw::P64 = P64[_s95pt::P64 + 8];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           _c967K::P64 = Hp - 31;
           P64[Hp - 8] = _c967K::P64;
           P64[Hp] = _s95pw::P64;
           call MO_WriteBarrier();
           P64[_s95pt::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s95pt::P64);
           R1 = _c967K::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c967F_info" {
     block_c967F_info:
         const _c967F;
         const 65;
         const 30;
 },
 Foreign.Marshal.Pool.pooledMallocArray_entry() //  [R2]
         { []
         }
     {offset
       c967Y: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9682; else goto c9681;
       c9682: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledMallocArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9681: // global
           I64[Hp - 32] = lvl27_s95pd_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s95pB_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledMallocArray_info" {
     Foreign.Marshal.Pool.pooledMallocArray_info:
         const Foreign.Marshal.Pool.pooledMallocArray_entry;
         const 0;
         const 107374182414;
         const 4294967301;
         const S95uu_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.219524194 UTC

[section ""data" . Foreign.Marshal.Pool.$wpooledMallocArray0_closure" {
     Foreign.Marshal.Pool.$wpooledMallocArray0_closure:
         const Foreign.Marshal.Pool.$wpooledMallocArray0_info;
         const 0;
 },
 Foreign.Marshal.Pool.$wpooledMallocArray0_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c968F: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c968G; else goto c968H;
       c968G: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.$wpooledMallocArray0_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c968H: // global
           I64[Sp - 24] = block_c968D_info;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = Foreign.Marshal.Pool.pooledMallocArray1_closure;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 40;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.$wpooledMallocArray0_info" {
     Foreign.Marshal.Pool.$wpooledMallocArray0_info:
         const Foreign.Marshal.Pool.$wpooledMallocArray0_entry;
         const 0;
         const 176093659150;
         const 17179869206;
         const S95uu_srt+96;
 },
 _c968D() //  [R1]
         { []
         }
     {offset
       c968D: // global
           _s95pD::P64 = P64[Sp + 8];
           (_s95pO::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc((I64[Sp + 16] + 1) * I64[R1 + 7]);
           if (_s95pO::I64 == 0) goto c969a; else goto c9696;
       c969a: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c9696: // global
           I64[Sp + 8] = block_c968Z_info;
           R1 = _s95pD::P64;
           I64[Sp + 16] = _s95pO::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u969f; else goto c9690;
       u969f: // global
           call _c968Z(R1) args: 0, res: 0, upd: 0;
       c9690: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c968D_info" {
     block_c968D_info:
         const _c968D;
         const 130;
         const 4294967326;
         const S95uu_srt+96;
 },
 _c968Z() //  [R1]
         { []
         }
     {offset
       c968Z: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9699; else goto c9698;
       c9699: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9698: // global
           _s95pR::P64 = P64[R1 + 7];
           _s95pU::P64 = P64[_s95pR::P64 + 8];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           _c9694::P64 = Hp - 31;
           P64[Hp - 8] = _c9694::P64;
           P64[Hp] = _s95pU::P64;
           call MO_WriteBarrier();
           P64[_s95pR::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s95pR::P64);
           R1 = _c9694::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c968Z_info" {
     block_c968Z_info:
         const _c968Z;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.22826468 UTC

[section ""data" . Foreign.Marshal.Pool.pooledMallocArray2_closure" {
     Foreign.Marshal.Pool.pooledMallocArray2_closure:
         const Foreign.Marshal.Pool.pooledMallocArray2_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledMallocArray2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c969G: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c969H; else goto c969I;
       c969H: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledMallocArray2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c969I: // global
           I64[Sp - 24] = block_c969D_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u969M; else goto c969E;
       u969M: // global
           call _c969D(R1) args: 0, res: 0, upd: 0;
       c969E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledMallocArray2_info" {
     Foreign.Marshal.Pool.pooledMallocArray2_info:
         const Foreign.Marshal.Pool.pooledMallocArray2_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S95uu_srt+136;
 },
 _c969D() //  [R1]
         { []
         }
     {offset
       c969D: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Foreign.Marshal.Pool.$wpooledMallocArray0_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c969D_info" {
     block_c969D_info:
         const _c969D;
         const 2;
         const 4294967326;
         const S95uu_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.233454154 UTC

[section ""data" . Foreign.Marshal.Pool.pooledMallocArray0_closure" {
     Foreign.Marshal.Pool.pooledMallocArray0_closure:
         const Foreign.Marshal.Pool.pooledMallocArray0_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledMallocArray0_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c96a0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Pool.pooledMallocArray2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledMallocArray0_info" {
     Foreign.Marshal.Pool.pooledMallocArray0_info:
         const Foreign.Marshal.Pool.pooledMallocArray0_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S95uu_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.2364883 UTC

[section ""data" . lvl22_r95nq_closure" {
     lvl22_r95nq_closure:
         const GHC.Types.I#_con_info;
         const 106;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.238426962 UTC

[section ""data" . lvl23_r95nr_closure" {
     lvl23_r95nr_closure:
         const GHC.Types.I#_con_info;
         const 19;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.24015079 UTC

[section ""data" . lvl24_r95ns_closure" {
     lvl24_r95ns_closure:
         const GHC.Types.I#_con_info;
         const 28;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.242314896 UTC

[section ""data" . lvl25_r95nt_closure" {
     lvl25_r95nt_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl3_r95n7_closure;
         const lvl4_r95n8_closure;
         const lvl6_r95na_closure;
         const lvl22_r95nq_closure+1;
         const lvl23_r95nr_closure+1;
         const lvl22_r95nq_closure+1;
         const lvl24_r95ns_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.244086735 UTC

[section ""data" . lvl26_r95nu_closure" {
     lvl26_r95nu_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl2_r95n6_closure;
         const lvl25_r95nt_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.246437898 UTC

[section ""data" . Foreign.Marshal.Pool.pooledMalloc1_closure" {
     Foreign.Marshal.Pool.pooledMalloc1_closure:
         const Foreign.Marshal.Pool.pooledMalloc1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Pool.pooledMalloc1_entry() //  [R1]
         { []
         }
     {offset
       c96ai: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96aj; else goto c96ak;
       c96aj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96ak: // global
           (_c96af::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c96af::I64 == 0) goto c96ah; else goto c96ag;
       c96ah: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c96ag: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c96af::I64;
           R2 = lvl26_r95nu_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledMalloc1_info" {
     Foreign.Marshal.Pool.pooledMalloc1_info:
         const Foreign.Marshal.Pool.pooledMalloc1_entry;
         const 0;
         const 140741783322645;
         const S95uu_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.252631539 UTC

[section ""data" . Foreign.Marshal.Pool.pooledMalloc_closure" {
     Foreign.Marshal.Pool.pooledMalloc_closure:
         const Foreign.Marshal.Pool.pooledMalloc_info;
         const 0;
 },
 lvl27_s95q6_entry() //  [R1]
         { []
         }
     {offset
       c96aA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c96aB; else goto c96aC;
       c96aB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96aC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Pool.pooledMalloc1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_s95q6_info" {
     lvl27_s95q6_info:
         const lvl27_s95q6_entry;
         const 1;
         const 4294967312;
         const S95uu_srt+160;
 },
 sat_s95qq_entry() //  [R1, R2]
         { []
         }
     {offset
       c96aL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96aM; else goto c96aN;
       c96aM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c96aN: // global
           I64[Sp - 16] = block_c96aI_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u96bg; else goto c96aJ;
       u96bg: // global
           call _c96aI(R1) args: 0, res: 0, upd: 0;
       c96aJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s95qq_info" {
     sat_s95qq_info:
         const sat_s95qq_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const S95uu_srt+96;
 },
 _c96aI() //  [R1]
         { []
         }
     {offset
       c96aI: // global
           _s95q7::P64 = P64[Sp + 8];
           (_s95qf::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[R1 + 7]);
           if (_s95qf::I64 == 0) goto c96ba; else goto c96b6;
       c96ba: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c96b6: // global
           I64[Sp] = block_c96aZ_info;
           R1 = _s95q7::P64;
           I64[Sp + 8] = _s95qf::I64;
           if (R1 & 7 != 0) goto u96bf; else goto c96b0;
       u96bf: // global
           call _c96aZ(R1) args: 0, res: 0, upd: 0;
       c96b0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96aI_info" {
     block_c96aI_info:
         const _c96aI;
         const 1;
         const 4294967326;
         const S95uu_srt+96;
 },
 _c96aZ() //  [R1]
         { []
         }
     {offset
       c96aZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c96b9; else goto c96b8;
       c96b9: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96b8: // global
           _s95qi::P64 = P64[R1 + 7];
           _s95ql::P64 = P64[_s95qi::P64 + 8];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           _c96b4::P64 = Hp - 31;
           P64[Hp - 8] = _c96b4::P64;
           P64[Hp] = _s95ql::P64;
           call MO_WriteBarrier();
           P64[_s95qi::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s95qi::P64);
           R1 = _c96b4::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96aZ_info" {
     block_c96aZ_info:
         const _c96aZ;
         const 65;
         const 30;
 },
 Foreign.Marshal.Pool.pooledMalloc_entry() //  [R2]
         { []
         }
     {offset
       c96bh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c96bl; else goto c96bk;
       c96bl: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledMalloc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c96bk: // global
           I64[Hp - 32] = lvl27_s95q6_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s95qq_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledMalloc_info" {
     Foreign.Marshal.Pool.pooledMalloc_info:
         const Foreign.Marshal.Pool.pooledMalloc_entry;
         const 0;
         const 3302829850638;
         const 4294967301;
         const S95uu_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.266089079 UTC

[section ""data" . Foreign.Marshal.Pool.pooledNewArray2_closure" {
     Foreign.Marshal.Pool.pooledNewArray2_closure:
         const Foreign.Marshal.Pool.pooledNewArray2_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledNewArray2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c96bS: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c96bW; else goto c96bX;
       c96bW: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledNewArray2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c96bX: // global
           I64[Sp - 40] = block_c96bQ_info;
           _s95qs::P64 = R3;
           R3 = 0;
           _s95qr::P64 = R2;
           R2 = R5;
           P64[Sp - 32] = _s95qr::P64;
           P64[Sp - 24] = _s95qs::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledNewArray2_info" {
     Foreign.Marshal.Pool.pooledNewArray2_info:
         const Foreign.Marshal.Pool.pooledNewArray2_entry;
         const 0;
         const 4436701216782;
         const 21474836504;
         const S95uu_srt+96;
 },
 _c96bQ() //  [R1]
         { []
         }
     {offset
       c96bQ: // global
           I64[Sp - 8] = block_c96bV_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = Foreign.Marshal.Pool.pooledMallocArray1_closure;
           I64[Sp] = R1;
           Sp = Sp - 24;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96bQ_info" {
     block_c96bQ_info:
         const _c96bQ;
         const 4;
         const 38654705694;
         const S95uu_srt+96;
 },
 _c96bV() //  [R1]
         { []
         }
     {offset
       c96bV: // global
           _s95qs::P64 = P64[Sp + 24];
           (_s95qF::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc((I64[Sp + 8] + 1) * I64[R1 + 7]);
           if (_s95qF::I64 == 0) goto c96cz; else goto c96ct;
       c96cz: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 48;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c96ct: // global
           I64[Sp + 8] = block_c96ch_info;
           R1 = _s95qs::P64;
           I64[Sp + 24] = _s95qF::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u96cA; else goto c96ci;
       u96cA: // global
           call _c96ch(R1) args: 0, res: 0, upd: 0;
       c96ci: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96bV_info" {
     block_c96bV_info:
         const _c96bV;
         const 69;
         const 4294967326;
         const S95uu_srt+96;
 },
 _c96ch() //  [R1]
         { []
         }
     {offset
       c96ch: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c96cw; else goto c96cv;
       c96cw: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96cv: // global
           _s95qI::P64 = P64[R1 + 7];
           _s95qL::P64 = P64[_s95qI::P64 + 8];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           _c96cm::P64 = Hp - 31;
           P64[Hp - 8] = _c96cm::P64;
           P64[Hp] = _s95qL::P64;
           _s95qr::P64 = P64[Sp + 8];
           _s95qt::P64 = P64[Sp + 24];
           _s95qu::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[_s95qI::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s95qI::P64);
           I64[Sp + 24] = block_c96cr_info;
           R5 = _s95qu::P64;
           R4 = _c96cm::P64;
           R3 = _s95qt::P64;
           R2 = _s95qr::P64;
           P64[Sp + 32] = _c96cm::P64;
           Sp = Sp + 24;
           call Foreign.Marshal.Array.newArray4_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96ch_info" {
     block_c96ch_info:
         const _c96ch;
         const 132;
         const 30;
 },
 _c96cr() //  []
         { []
         }
     {offset
       c96cr: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96cr_info" {
     block_c96cr_info:
         const _c96cr;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.277564281 UTC

[section ""data" . Foreign.Marshal.Pool.pooledNewArray0_closure" {
     Foreign.Marshal.Pool.pooledNewArray0_closure:
         const Foreign.Marshal.Pool.pooledNewArray0_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledNewArray0_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c96d4: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Pool.pooledNewArray2_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledNewArray0_info" {
     Foreign.Marshal.Pool.pooledNewArray0_info:
         const Foreign.Marshal.Pool.pooledNewArray0_entry;
         const 0;
         const 4294967310;
         const 21474836504;
         const S95uu_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.282763586 UTC

[section ""data" . Foreign.Marshal.Pool.pooledNewArray1_closure" {
     Foreign.Marshal.Pool.pooledNewArray1_closure:
         const Foreign.Marshal.Pool.pooledNewArray1_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledNewArray1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c96dh: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c96dl; else goto c96dm;
       c96dl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledNewArray1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c96dm: // global
           I64[Sp - 32] = block_c96df_info;
           _s95qU::P64 = R3;
           R3 = 0;
           _s95qT::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _s95qT::P64;
           P64[Sp - 16] = _s95qU::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledNewArray1_info" {
     Foreign.Marshal.Pool.pooledNewArray1_info:
         const Foreign.Marshal.Pool.pooledNewArray1_entry;
         const 0;
         const 8834747727886;
         const 17179869207;
         const S95uu_srt+96;
 },
 _c96df() //  [R1]
         { []
         }
     {offset
       c96df: // global
           I64[Sp - 8] = block_c96dk_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = Foreign.Marshal.Pool.pooledMallocArray1_closure;
           I64[Sp] = R1;
           Sp = Sp - 24;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96df_info" {
     block_c96df_info:
         const _c96df;
         const 3;
         const 38654705694;
         const S95uu_srt+96;
 },
 _c96dk() //  [R1]
         { []
         }
     {offset
       c96dk: // global
           _s95qU::P64 = P64[Sp + 24];
           (_s95r5::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[Sp + 8] * I64[R1 + 7]);
           if (_s95r5::I64 == 0) goto c96dV; else goto c96dP;
       c96dV: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c96dP: // global
           I64[Sp + 8] = block_c96dD_info;
           R1 = _s95qU::P64;
           I64[Sp + 24] = _s95r5::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u96dW; else goto c96dE;
       u96dW: // global
           call _c96dD(R1) args: 0, res: 0, upd: 0;
       c96dE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96dk_info" {
     block_c96dk_info:
         const _c96dk;
         const 68;
         const 4294967326;
         const S95uu_srt+96;
 },
 _c96dD() //  [R1]
         { []
         }
     {offset
       c96dD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c96dS; else goto c96dR;
       c96dS: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96dR: // global
           _s95r8::P64 = P64[R1 + 7];
           _s95rb::P64 = P64[_s95r8::P64 + 8];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           _c96dI::P64 = Hp - 31;
           P64[Hp - 8] = _c96dI::P64;
           P64[Hp] = _s95rb::P64;
           _s95qT::P64 = P64[Sp + 8];
           _s95qV::P64 = P64[Sp + 24];
           call MO_WriteBarrier();
           P64[_s95r8::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s95r8::P64);
           I64[Sp + 16] = block_c96dN_info;
           R4 = _s95qV::P64;
           R3 = _c96dI::P64;
           R2 = _s95qT::P64;
           P64[Sp + 24] = _c96dI::P64;
           Sp = Sp + 16;
           call Foreign.Marshal.Array.newArray2_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96dD_info" {
     block_c96dD_info:
         const _c96dD;
         const 131;
         const 30;
 },
 _c96dN() //  []
         { []
         }
     {offset
       c96dN: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96dN_info" {
     block_c96dN_info:
         const _c96dN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.293961152 UTC

[section ""data" . Foreign.Marshal.Pool.pooledNewArray_closure" {
     Foreign.Marshal.Pool.pooledNewArray_closure:
         const Foreign.Marshal.Pool.pooledNewArray_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledNewArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c96ep: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Pool.pooledNewArray1_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledNewArray_info" {
     Foreign.Marshal.Pool.pooledNewArray_info:
         const Foreign.Marshal.Pool.pooledNewArray_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S95uu_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.29923035 UTC

[section ""data" . Foreign.Marshal.Pool.pooledNew1_closure" {
     Foreign.Marshal.Pool.pooledNew1_closure:
         const Foreign.Marshal.Pool.pooledNew1_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledNew1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c96eC: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c96eD; else goto c96eE;
       c96eD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledNew1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c96eE: // global
           I64[Sp - 32] = block_c96eA_info;
           _s95rj::P64 = R2;
           R2 = R2;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Foreign.Marshal.Pool.pooledMalloc1_closure;
           P64[Sp - 24] = _s95rj::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledNew1_info" {
     Foreign.Marshal.Pool.pooledNew1_info:
         const Foreign.Marshal.Pool.pooledNew1_entry;
         const 0;
         const 18695992639502;
         const 17179869207;
         const S95uu_srt+96;
 },
 _c96eA() //  [R1]
         { []
         }
     {offset
       c96eA: // global
           _s95rk::P64 = P64[Sp + 16];
           (_s95rt::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[R1 + 7]);
           if (_s95rt::I64 == 0) goto c96f8; else goto c96f2;
       c96f8: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c96f2: // global
           I64[Sp] = block_c96eQ_info;
           R1 = _s95rk::P64;
           I64[Sp + 16] = _s95rt::I64;
           if (R1 & 7 != 0) goto u96f9; else goto c96eR;
       u96f9: // global
           call _c96eQ(R1) args: 0, res: 0, upd: 0;
       c96eR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96eA_info" {
     block_c96eA_info:
         const _c96eA;
         const 3;
         const 4294967326;
         const S95uu_srt+96;
 },
 _c96eQ() //  [R1]
         { []
         }
     {offset
       c96eQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c96f5; else goto c96f4;
       c96f5: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96f4: // global
           _s95rw::P64 = P64[R1 + 7];
           _s95rz::P64 = P64[_s95rw::P64 + 8];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           _c96eV::P64 = Hp - 31;
           P64[Hp - 8] = _c96eV::P64;
           P64[Hp] = _s95rz::P64;
           _s95rj::P64 = P64[Sp + 8];
           _s95rl::P64 = P64[Sp + 24];
           call MO_WriteBarrier();
           P64[_s95rw::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s95rw::P64);
           I64[Sp + 16] = block_c96f0_info;
           R2 = _s95rj::P64;
           I64[Sp - 8] = stg_ap_ppv_info;
           P64[Sp] = _c96eV::P64;
           P64[Sp + 8] = _s95rl::P64;
           P64[Sp + 24] = _c96eV::P64;
           Sp = Sp - 8;
           call Foreign.Storable.poke_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96eQ_info" {
     block_c96eQ_info:
         const _c96eQ;
         const 131;
         const 30;
 },
 _c96f0() //  []
         { []
         }
     {offset
       c96f0: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96f0_info" {
     block_c96f0_info:
         const _c96f0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.308753264 UTC

[section ""data" . Foreign.Marshal.Pool.pooledNew_closure" {
     Foreign.Marshal.Pool.pooledNew_closure:
         const Foreign.Marshal.Pool.pooledNew_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledNew_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c96fx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Pool.pooledNew1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledNew_info" {
     Foreign.Marshal.Pool.pooledNew_info:
         const Foreign.Marshal.Pool.pooledNew_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S95uu_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.313155432 UTC

[section ""data" . Foreign.Marshal.Pool.freePool2_closure" {
     Foreign.Marshal.Pool.freePool2_closure:
         const Foreign.Marshal.Pool.freePool2_info;
 },
 Foreign.Marshal.Pool.freePool2_entry() //  [R2]
         { []
         }
     {offset
       c96fP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96fQ; else goto u96g6;
       c96fQ: // global
           R2 = R2;
           R1 = Foreign.Marshal.Pool.freePool2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u96g6: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c96fF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.freePool2_info" {
     Foreign.Marshal.Pool.freePool2_info:
         const Foreign.Marshal.Pool.freePool2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c96fF() //  []
         { []
         }
     {offset
       c96fF: // global
           _s95rH::P64 = P64[Sp];
           I64[Sp] = block_c96fI_info;
           R1 = _s95rH::P64;
           if (R1 & 7 != 0) goto u96g8; else goto c96fJ;
       u96g8: // global
           call _c96fI(R1) args: 0, res: 0, upd: 0;
       c96fJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c96fI() //  [R1]
         { []
         }
     {offset
       c96fI: // global
           if (R1 & 7 == 1) goto c96fM; else goto c96fN;
       c96fM: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c96fN: // global
           I64[Sp - 8] = block_c96fX_info;
           _s95rL::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s95rL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u96g9; else goto c96fZ;
       u96g9: // global
           call _c96fX(R1) args: 0, res: 0, upd: 0;
       c96fZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96fI_info" {
     block_c96fI_info:
         const _c96fI;
         const 0;
         const 30;
 },
 _c96fX() //  [R1]
         { []
         }
     {offset
       c96fX: // global
           _s95rL::P64 = P64[Sp + 8];
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(I64[R1 + 7]);
           P64[Sp + 8] = _s95rL::P64;
           Sp = Sp + 8;
           call _c96fF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c96fX_info" {
     block_c96fX_info:
         const _c96fX;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.321763575 UTC

[section ""data" . Foreign.Marshal.Pool.freePool1_closure" {
     Foreign.Marshal.Pool.freePool1_closure:
         const Foreign.Marshal.Pool.freePool1_info;
 },
 Foreign.Marshal.Pool.freePool1_entry() //  [R2]
         { []
         }
     {offset
       c96gB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c96gC; else goto c96gD;
       c96gC: // global
           R2 = R2;
           R1 = Foreign.Marshal.Pool.freePool1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c96gD: // global
           I64[Sp - 8] = block_c96gy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u96gH; else goto c96gz;
       u96gH: // global
           call _c96gy(R1) args: 0, res: 0, upd: 0;
       c96gz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.freePool1_info" {
     Foreign.Marshal.Pool.freePool1_info:
         const Foreign.Marshal.Pool.freePool1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c96gy() //  [R1]
         { []
         }
     {offset
       c96gy: // global
           R2 = P64[P64[R1 + 7] + 8];
           Sp = Sp + 8;
           call Foreign.Marshal.Pool.freePool2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96gy_info" {
     block_c96gy_info:
         const _c96gy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.326916012 UTC

[section ""data" . Foreign.Marshal.Pool.freePool_closure" {
     Foreign.Marshal.Pool.freePool_closure:
         const Foreign.Marshal.Pool.freePool_info;
 },
 Foreign.Marshal.Pool.freePool_entry() //  [R2]
         { []
         }
     {offset
       c96gW: // global
           R2 = R2;
           call Foreign.Marshal.Pool.freePool1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.freePool_info" {
     Foreign.Marshal.Pool.freePool_info:
         const Foreign.Marshal.Pool.freePool_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.330560478 UTC

[section ""data" . Foreign.Marshal.Pool.newPool1_closure" {
     Foreign.Marshal.Pool.newPool1_closure:
         const Foreign.Marshal.Pool.newPool1_info;
 },
 Foreign.Marshal.Pool.newPool1_entry() //  []
         { []
         }
     {offset
       c96ha: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c96hb; else goto c96hc;
       c96hb: // global
           R1 = Foreign.Marshal.Pool.newPool1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c96hc: // global
           I64[Sp - 8] = block_c96h7_info;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.newPool1_info" {
     Foreign.Marshal.Pool.newPool1_info:
         const Foreign.Marshal.Pool.newPool1_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _c96h7() //  [R1]
         { []
         }
     {offset
       c96h7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c96hf; else goto c96he;
       c96hf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96he: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96h7_info" {
     block_c96h7_info:
         const _c96h7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.336004784 UTC

[section ""data" . Foreign.Marshal.Pool.newPool_closure" {
     Foreign.Marshal.Pool.newPool_closure:
         const Foreign.Marshal.Pool.newPool_info;
 },
 Foreign.Marshal.Pool.newPool_entry() //  []
         { []
         }
     {offset
       c96ht: // global
           call Foreign.Marshal.Pool.newPool1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.newPool_info" {
     Foreign.Marshal.Pool.newPool_info:
         const Foreign.Marshal.Pool.newPool_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.34706996 UTC

[section ""data" . Foreign.Marshal.Pool.withPool1_closure" {
     Foreign.Marshal.Pool.withPool1_closure:
         const Foreign.Marshal.Pool.withPool1_info;
 },
 sat_s95sf_entry() //  [R1]
         { []
         }
     {offset
       c96hS: // global
           _s95sf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c96hT; else goto c96hU;
       c96hU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c96hW; else goto c96hV;
       c96hW: // global
           HpAlloc = 16;
           goto c96hT;
       c96hT: // global
           R1 = _s95sf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96hV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s95sf::P64;
           _s95s3::P64 = P64[_s95sf::P64 + 16];
           _s95sd::P64 = P64[_s95sf::P64 + 24];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _s95sd::P64;
           R2 = Hp - 7;
           R1 = _s95s3::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s95sf_info" {
     sat_s95sf_info:
         const sat_s95sf_entry;
         const 2;
         const 18;
 },
 sat_s95st_entry() //  [R1]
         { []
         }
     {offset
       c96ig: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c96ih; else goto c96ii;
       c96ih: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c96ii: // global
           _s95so::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp - 24] = block_c96ie_info;
           R2 = _s95so::P64;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = P64[R1 + 23];
           Sp = Sp - 24;
           call Foreign.Marshal.Pool.freePool2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s95st_info" {
     sat_s95st_info:
         const sat_s95st_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _c96ie() //  []
         { []
         }
     {offset
       c96ie: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96ie_info" {
     block_c96ie_info:
         const _c96ie;
         const 2;
         const 30;
 },
 sat_s95su_entry() //  [R1, R2]
         { []
         }
     {offset
       c96ik: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96il; else goto c96im;
       c96il: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c96im: // global
           I64[Sp - 16] = block_c96i4_info;
           _s95sd::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s95sd::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u96iq; else goto c96i5;
       u96iq: // global
           call _c96i4(R1) args: 0, res: 0, upd: 0;
       c96i5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s95su_info" {
     sat_s95su_info:
         const sat_s95su_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c96i4() //  [R1]
         { []
         }
     {offset
       c96i4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c96ip; else goto c96io;
       c96ip: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96io: // global
           _s95sj::P64 = P64[R1 + 7];
           _s95sk::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s95st_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s95sj::P64;
           P64[Hp] = _s95sk::P64;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96i4_info" {
     block_c96i4_info:
         const _c96i4;
         const 1;
         const 30;
 },
 sat_s95sF_entry() //  [R2]
         { []
         }
     {offset
       c96iy: // global
           R1 = R2;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s95sF_info" {
     sat_s95sF_info:
         const sat_s95sF_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 sat_s95sZ_entry() //  [R1]
         { []
         }
     {offset
       c96j0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c96j1; else goto c96j2;
       c96j1: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c96j2: // global
           _s95sU::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp - 24] = block_c96iY_info;
           R2 = _s95sU::P64;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = P64[R1 + 23];
           Sp = Sp - 24;
           call Foreign.Marshal.Pool.freePool2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s95sZ_info" {
     sat_s95sZ_info:
         const sat_s95sZ_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _c96iY() //  []
         { []
         }
     {offset
       c96iY: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96iY_info" {
     block_c96iY_info:
         const _c96iY;
         const 2;
         const 30;
 },
 sat_s95t0_entry() //  [R1, R2]
         { []
         }
     {offset
       c96j4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96j5; else goto c96j6;
       c96j5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c96j6: // global
           I64[Sp - 16] = block_c96iO_info;
           _s95sJ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s95sJ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u96ja; else goto c96iP;
       u96ja: // global
           call _c96iO(R1) args: 0, res: 0, upd: 0;
       c96iP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s95t0_info" {
     sat_s95t0_info:
         const sat_s95t0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c96iO() //  [R1]
         { []
         }
     {offset
       c96iO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c96j9; else goto c96j8;
       c96j9: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96j8: // global
           _s95sP::P64 = P64[R1 + 7];
           _s95sQ::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s95sZ_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s95sP::P64;
           P64[Hp] = _s95sQ::P64;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96iO_info" {
     block_c96iO_info:
         const _c96iO;
         const 1;
         const 30;
 },
 sat_s95sL_entry() //  [R1]
         { []
         }
     {offset
       c96jg: // global
           _s95sL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c96jh; else goto c96ji;
       c96ji: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c96jk; else goto c96jj;
       c96jk: // global
           HpAlloc = 16;
           goto c96jh;
       c96jh: // global
           R1 = _s95sL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96jj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s95sL::P64;
           _s95s3::P64 = P64[_s95sL::P64 + 16];
           _s95sJ::P64 = P64[_s95sL::P64 + 24];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _s95sJ::P64;
           R2 = Hp - 7;
           R1 = _s95s3::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s95sL_info" {
     sat_s95sL_info:
         const sat_s95sL_entry;
         const 2;
         const 18;
 },
 sat_s95sM_entry() //  [R1]
         { []
         }
     {offset
       c96jq: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s95sM_info" {
     sat_s95sM_info:
         const sat_s95sM_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s95ta_entry() //  [R1]
         { []
         }
     {offset
       c96jx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96jy; else goto c96jz;
       c96jy: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c96jz: // global
           I64[Sp - 16] = block_c96iH_info;
           _s95s3::P64 = P64[R1 + 7];
           R1 = GHC.Types.[]_closure+1;
           P64[Sp - 8] = _s95s3::P64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s95ta_info" {
     sat_s95ta_info:
         const sat_s95ta_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _c96iH() //  [R1]
         { []
         }
     {offset
       c96iH: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c96jC; else goto c96jB;
       c96jC: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96jB: // global
           I64[Hp - 56] = sat_s95t0_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = sat_s95sL_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s95sM_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c96jt_info;
           R2 = Hp - 55;
           _s95sJ::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 8] = _s95sJ::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96iH_info" {
     block_c96iH_info:
         const _c96iH;
         const 1;
         const 30;
 },
 _c96jt() //  [R1]
         { []
         }
     {offset
       c96jt: // global
           _s95t6::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp] = block_c96jv_info;
           R2 = _s95t6::P64;
           P64[Sp + 8] = R1;
           call Foreign.Marshal.Pool.freePool2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96jt_info" {
     block_c96jt_info:
         const _c96jt;
         const 1;
         const 30;
 },
 _c96jv() //  []
         { []
         }
     {offset
       c96jv: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96jv_info" {
     block_c96jv_info:
         const _c96jv;
         const 1;
         const 30;
 },
 sat_s95tb_entry() //  [R2]
         { []
         }
     {offset
       c96jL: // global
           R1 = R2;
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s95tb_info" {
     sat_s95tb_info:
         const sat_s95tb_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 Foreign.Marshal.Pool.withPool1_entry() //  [R2]
         { []
         }
     {offset
       c96jS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c96jT; else goto c96jU;
       c96jT: // global
           R2 = R2;
           R1 = Foreign.Marshal.Pool.withPool1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c96jU: // global
           I64[Sp - 16] = block_c96hE_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.withPool1_info" {
     Foreign.Marshal.Pool.withPool1_info:
         const Foreign.Marshal.Pool.withPool1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c96hE() //  [R1]
         { []
         }
     {offset
       c96hE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c96jX; else goto c96jW;
       c96jX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c96jW: // global
           if (R1 == 0) goto c96jQ; else goto u96kb;
       c96jQ: // global
           I64[Hp - 8] = sat_s95ta_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u96kb: // global
           if (R1 == 1) goto c96jR; else goto c96jP;
       c96jR: // global
           I64[Hp - 8] = sat_s95tb_info;
           _s95s9::P64 = Hp - 6;
           goto s95s8;
       c96jP: // global
           I64[Hp - 8] = sat_s95sF_info;
           _s95s9::P64 = Hp - 6;
           goto s95s8;
       s95s8: // global
           I64[Sp - 8] = block_c96hL_info;
           R1 = GHC.Types.[]_closure+1;
           P64[Sp] = _s95s9::P64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96hE_info" {
     block_c96hE_info:
         const _c96hE;
         const 1;
         const 30;
 },
 _c96hL() //  [R1]
         { []
         }
     {offset
       c96hL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c96k4; else goto c96k3;
       c96k4: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96k3: // global
           I64[Hp - 24] = sat_s95sf_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           _s95s9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c96hX_info;
           R2 = Hp - 24;
           _s95sd::P64 = R1;
           R1 = _s95s9::P64;
           P64[Sp + 16] = _s95sd::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96hL_info" {
     block_c96hL_info:
         const _c96hL;
         const 2;
         const 30;
 },
 _c96hX() //  [R1]
         { []
         }
     {offset
       c96hX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c96k7; else goto c96k6;
       c96k7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96k6: // global
           I64[Hp - 8] = sat_s95su_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp] = block_c96jY_info;
           R2 = Hp - 7;
           R1 = R1;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96hX_info" {
     block_c96hX_info:
         const _c96hX;
         const 1;
         const 30;
 },
 _c96jY() //  [R1]
         { []
         }
     {offset
       c96jY: // global
           _s95sA::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp] = block_c96k0_info;
           R2 = _s95sA::P64;
           P64[Sp + 8] = R1;
           call Foreign.Marshal.Pool.freePool2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96jY_info" {
     block_c96jY_info:
         const _c96jY;
         const 1;
         const 30;
 },
 _c96k0() //  []
         { []
         }
     {offset
       c96k0: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96k0_info" {
     block_c96k0_info:
         const _c96k0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.38728618 UTC

[section ""data" . Foreign.Marshal.Pool.withPool_closure" {
     Foreign.Marshal.Pool.withPool_closure:
         const Foreign.Marshal.Pool.withPool_info;
 },
 Foreign.Marshal.Pool.withPool_entry() //  [R2]
         { []
         }
     {offset
       c96lR: // global
           R2 = R2;
           call Foreign.Marshal.Pool.withPool1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.withPool_info" {
     Foreign.Marshal.Pool.withPool_info:
         const Foreign.Marshal.Pool.withPool_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:15.390576272 UTC

[section ""relreadonly" . S95uu_srt" {
     S95uu_srt:
         const Foreign.Marshal.Error.throwIf2_closure;
         const Foreign.Marshal.Alloc.realloc2_closure;
         const Foreign.Marshal.Pool.$wpooledReallocBytes_closure;
         const Foreign.Marshal.Pool.pooledRealloc1_closure;
         const GHC.Err.undefined_closure;
         const lvl11_r95nf_closure;
         const Foreign.Marshal.Pool.pooledReallocArray1_closure;
         const Foreign.Marshal.Pool.pooledReallocArray_closure;
         const Foreign.Marshal.Pool.pooledReallocArray2_closure;
         const lvl16_r95nk_closure;
         const Foreign.Marshal.Pool.pooledRealloc3_closure;
         const Foreign.Marshal.Pool.pooledRealloc_closure;
         const Foreign.Marshal.Alloc.malloc1_closure;
         const Foreign.Marshal.Pool.pooledMallocBytes1_closure;
         const lvl21_r95np_closure;
         const Foreign.Marshal.Pool.pooledMallocArray1_closure;
         const Foreign.Marshal.Pool.pooledMallocArray_closure;
         const Foreign.Marshal.Pool.$wpooledMallocArray0_closure;
         const Foreign.Marshal.Pool.pooledMallocArray2_closure;
         const lvl26_r95nu_closure;
         const Foreign.Marshal.Pool.pooledMalloc1_closure;
         const Foreign.Marshal.Pool.pooledMalloc_closure;
         const Foreign.Marshal.Pool.pooledNewArray2_closure;
         const Foreign.Marshal.Pool.pooledNewArray1_closure;
         const Foreign.Marshal.Pool.pooledNew1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.750054494 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:04:16.751139968 UTC

[section ""cstring" . Foreign.Marshal.Pool.$trModule4_bytes" {
     Foreign.Marshal.Pool.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.752902449 UTC

[section ""data" . Foreign.Marshal.Pool.$trModule3_closure" {
     Foreign.Marshal.Pool.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Pool.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.755238621 UTC

[section ""cstring" . Foreign.Marshal.Pool.$trModule2_bytes" {
     Foreign.Marshal.Pool.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,77,97,114,115,104,97,108,46,80,111,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.756968736 UTC

[section ""data" . Foreign.Marshal.Pool.$trModule1_closure" {
     Foreign.Marshal.Pool.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Pool.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.758785164 UTC

[section ""data" . Foreign.Marshal.Pool.$trModule_closure" {
     Foreign.Marshal.Pool.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.Marshal.Pool.$trModule3_closure+1;
         const Foreign.Marshal.Pool.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.760611292 UTC

[section ""data" . $krep_r95mW_closure" {
     $krep_r95mW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.762490225 UTC

[section ""data" . $krep1_r95mX_closure" {
     $krep1_r95mX_closure:
         const :_con_info;
         const $krep_r95mW_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.764291209 UTC

[section ""data" . $krep2_r95mY_closure" {
     $krep2_r95mY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep1_r95mX_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.766213576 UTC

[section ""data" . $krep3_r95mZ_closure" {
     $krep3_r95mZ_closure:
         const :_con_info;
         const $krep2_r95mY_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.768437851 UTC

[section ""data" . $krep4_r95n0_closure" {
     $krep4_r95n0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep3_r95mZ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.770290951 UTC

[section ""data" . $krep5_r95n1_closure" {
     $krep5_r95n1_closure:
         const :_con_info;
         const $krep4_r95n0_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.772143442 UTC

[section ""data" . $krep6_r95n2_closure" {
     $krep6_r95n2_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep5_r95n1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.773937032 UTC

[section ""cstring" . Foreign.Marshal.Pool.$tcPool2_bytes" {
     Foreign.Marshal.Pool.$tcPool2_bytes:
         I8[] [80,111,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.775645568 UTC

[section ""data" . Foreign.Marshal.Pool.$tcPool1_closure" {
     Foreign.Marshal.Pool.$tcPool1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Pool.$tcPool2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.777452754 UTC

[section ""data" . Foreign.Marshal.Pool.$tcPool_closure" {
     Foreign.Marshal.Pool.$tcPool_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Marshal.Pool.$trModule_closure+1;
         const Foreign.Marshal.Pool.$tcPool1_closure+1;
         const GHC.Types.krep$*_closure;
         const 6812857741828992361;
         const 12127662557529231519;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.77965122 UTC

[section ""data" . $krep7_r95n3_closure" {
     $krep7_r95n3_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.Marshal.Pool.$tcPool_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.781982473 UTC

[section ""data" . Foreign.Marshal.Pool.$tc'Pool1_closure" {
     Foreign.Marshal.Pool.$tc'Pool1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r95n2_closure+1;
         const $krep7_r95n3_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.78376473 UTC

[section ""cstring" . Foreign.Marshal.Pool.$tc'Pool3_bytes" {
     Foreign.Marshal.Pool.$tc'Pool3_bytes:
         I8[] [39,80,111,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.785538277 UTC

[section ""data" . Foreign.Marshal.Pool.$tc'Pool2_closure" {
     Foreign.Marshal.Pool.$tc'Pool2_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Pool.$tc'Pool3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.787349508 UTC

[section ""data" . Foreign.Marshal.Pool.$tc'Pool_closure" {
     Foreign.Marshal.Pool.$tc'Pool_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Marshal.Pool.$trModule_closure+1;
         const Foreign.Marshal.Pool.$tc'Pool2_closure+1;
         const Foreign.Marshal.Pool.$tc'Pool1_closure+4;
         const 11588816997626637361;
         const 15405086111208545194;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.789836707 UTC

[section ""cstring" . lvl_r95n4_bytes" {
     lvl_r95n4_bytes:
         I8[] [112,111,105,110,116,101,114,32,110,111,116,32,105,110,32,112,111,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.792370411 UTC

[section ""data" . Foreign.Marshal.Pool.pooledRealloc2_closure" {
     Foreign.Marshal.Pool.pooledRealloc2_closure:
         const Foreign.Marshal.Pool.pooledRealloc2_info;
 },
 Foreign.Marshal.Pool.pooledRealloc2_entry() //  []
         { []
         }
     {offset
       c96s4: // global
           R2 = lvl_r95n4_bytes;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledRealloc2_info" {
     Foreign.Marshal.Pool.pooledRealloc2_info:
         const Foreign.Marshal.Pool.pooledRealloc2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.798974176 UTC

[section ""data" . Foreign.Marshal.Pool.$wpooledReallocBytes_closure" {
     Foreign.Marshal.Pool.$wpooledReallocBytes_closure:
         const Foreign.Marshal.Pool.$wpooledReallocBytes_info;
         const 0;
 },
 sat_s96mm_entry() //  [R1]
         { []
         }
     {offset
       c96sC: // global
           _s96mm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c96sD; else goto c96sE;
       c96sE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c96sG; else goto c96sF;
       c96sG: // global
           HpAlloc = 16;
           goto c96sD;
       c96sD: // global
           R1 = _s96mm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96sF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s96mm::P64;
           _s96mj::P64 = P64[_s96mm::P64 + 16];
           _s96m1::I64 = I64[_s96mm::P64 + 24];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s96m1::I64;
           R4 = _s96mj::P64;
           R3 = Hp - 7;
           R2 = GHC.Ptr.$fEqPtr_$c==_closure+2;
           Sp = Sp - 16;
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s96mm_info" {
     sat_s96mm_info:
         const sat_s96mm_entry;
         const 4294967297;
         const 19;
 },
 sat_s96mx_entry() //  [R1]
         { []
         }
     {offset
       c96sP: // global
           _s96mx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c96sQ; else goto c96sR;
       c96sR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c96sT; else goto c96sS;
       c96sT: // global
           HpAlloc = 16;
           goto c96sQ;
       c96sQ: // global
           R1 = _s96mx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96sS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s96mx::P64;
           _s96mv::P64 = P64[_s96mx::P64 + 16];
           _s96m1::I64 = I64[_s96mx::P64 + 24];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s96m1::I64;
           R4 = _s96mv::P64;
           R3 = Hp - 7;
           R2 = GHC.Ptr.$fEqPtr_$c==_closure+2;
           Sp = Sp - 16;
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s96mx_info" {
     sat_s96mx_info:
         const sat_s96mx_entry;
         const 4294967297;
         const 19;
 },
 Foreign.Marshal.Pool.$wpooledReallocBytes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c96sY: // global
           _s96m2::I64 = R4;
           _s96m1::I64 = R3;
           _s96m0::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c96sZ; else goto c96t0;
       c96t0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c96t2; else goto c96t1;
       c96t2: // global
           HpAlloc = 16;
           goto c96sZ;
       c96sZ: // global
           R4 = _s96m2::I64;
           R3 = _s96m1::I64;
           R2 = _s96m0::P64;
           R1 = Foreign.Marshal.Pool.$wpooledReallocBytes_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c96t1: // global
           _s96m6::P64 = P64[_s96m0::P64 + 8];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s96m1::I64;
           I64[Sp - 40] = block_c96sg_info;
           R4 = _s96m6::P64;
           R3 = Hp - 7;
           R2 = GHC.Ptr.$fEqPtr_closure;
           P64[Sp - 32] = _s96m0::P64;
           I64[Sp - 24] = _s96m1::I64;
           I64[Sp - 16] = _s96m2::I64;
           P64[Sp - 8] = _s96m6::P64;
           Sp = Sp - 40;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.$wpooledReallocBytes_info" {
     Foreign.Marshal.Pool.$wpooledReallocBytes_info:
         const Foreign.Marshal.Pool.$wpooledReallocBytes_entry;
         const 0;
         const 30064771086;
         const 17179869204;
         const S96tm_srt;
 },
 _c96sg() //  [R1]
         { []
         }
     {offset
       c96sg: // global
           if (R1 & 7 == 1) goto c96sV; else goto c96sW;
       c96sV: // global
           R3 = Foreign.Marshal.Pool.pooledRealloc2_closure+1;
           R2 = P64[Sp + 32];
           Sp = Sp + 40;
           call Foreign.Marshal.Error.throwIf2_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       c96sW: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c96t7; else goto c96t6;
       c96t7: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96t6: // global
           _s96m0::P64 = P64[Sp + 8];
           _s96m1::I64 = I64[Sp + 16];
           _s96ma::I64 = I64[Sp + 24];
           if (_s96ma::I64 != 0) goto c96tc; else goto c96td;
       c96tc: // global
           (_s96mf::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] realloc(_s96m1::I64, _s96ma::I64);
           if (_s96mf::I64 == 0) goto c96ta; else goto c96t9;
       c96ta: // global
           Hp = Hp - 72;
           R1 = Foreign.Marshal.Alloc.realloc2_closure;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c96t9: // global
           _s96mj::P64 = P64[_s96m0::P64 + 8];
           I64[Hp - 64] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 56] = _s96mf::I64;
           I64[Hp - 48] = sat_s96mm_info;
           P64[Hp - 32] = _s96mj::P64;
           I64[Hp - 24] = _s96m1::I64;
           I64[Hp - 16] = :_con_info;
           _c96sw::P64 = Hp - 63;
           P64[Hp - 8] = _c96sw::P64;
           P64[Hp] = Hp - 48;
           call MO_WriteBarrier();
           P64[_s96m0::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s96m0::P64);
           R1 = _c96sw::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c96td: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(_s96m1::I64);
           _s96mv::P64 = P64[_s96m0::P64 + 8];
           I64[Hp - 64] = sat_s96mx_info;
           P64[Hp - 48] = _s96mv::P64;
           I64[Hp - 40] = _s96m1::I64;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Ptr.nullPtr_closure;
           P64[Hp - 16] = Hp - 64;
           call MO_WriteBarrier();
           P64[_s96m0::P64 + 8] = Hp - 30;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s96m0::P64);
           Hp = Hp - 16;
           R1 = GHC.Ptr.nullPtr_closure;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96sg_info" {
     block_c96sg_info:
         const _c96sg;
         const 388;
         const 12884901918;
         const S96tm_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.811492523 UTC

[section ""data" . Foreign.Marshal.Pool.pooledRealloc1_closure" {
     Foreign.Marshal.Pool.pooledRealloc1_closure:
         const Foreign.Marshal.Pool.pooledRealloc1_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledRealloc1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c96u9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c96ui; else goto c96uj;
       c96ui: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledRealloc1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c96uj: // global
           I64[Sp - 24] = block_c96u6_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u96us; else goto c96u7;
       u96us: // global
           call _c96u6(R1) args: 0, res: 0, upd: 0;
       c96u7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledRealloc1_info" {
     Foreign.Marshal.Pool.pooledRealloc1_info:
         const Foreign.Marshal.Pool.pooledRealloc1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S96tm_srt+16;
 },
 _c96u6() //  [R1]
         { []
         }
     {offset
       c96u6: // global
           I64[Sp] = block_c96uc_info;
           _s96mF::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s96mF::P64;
           if (R1 & 7 != 0) goto u96ur; else goto c96ud;
       u96ur: // global
           call _c96uc(R1) args: 0, res: 0, upd: 0;
       c96ud: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96u6_info" {
     block_c96u6_info:
         const _c96u6;
         const 2;
         const 4294967326;
         const S96tm_srt+16;
 },
 _c96uc() //  [R1]
         { []
         }
     {offset
       c96uc: // global
           I64[Sp] = block_c96uh_info;
           _s96mH::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s96mH::I64;
           if (R1 & 7 != 0) goto u96ut; else goto c96um;
       u96ut: // global
           call _c96uh(R1) args: 0, res: 0, upd: 0;
       c96um: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96uc_info" {
     block_c96uc_info:
         const _c96uc;
         const 2;
         const 4294967326;
         const S96tm_srt+16;
 },
 _c96uh() //  [R1]
         { []
         }
     {offset
       c96uh: // global
           R4 = I64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Foreign.Marshal.Pool.$wpooledReallocBytes_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96uh_info" {
     block_c96uh_info:
         const _c96uh;
         const 130;
         const 4294967326;
         const S96tm_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.820477325 UTC

[section ""data" . Foreign.Marshal.Pool.pooledReallocBytes_closure" {
     Foreign.Marshal.Pool.pooledReallocBytes_closure:
         const Foreign.Marshal.Pool.pooledReallocBytes_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledReallocBytes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c96uS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Pool.pooledRealloc1_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledReallocBytes_info" {
     Foreign.Marshal.Pool.pooledReallocBytes_info:
         const Foreign.Marshal.Pool.pooledReallocBytes_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S96tm_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.823583423 UTC

[section ""cstring" . lvl1_r95n5_bytes" {
     lvl1_r95n5_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.826118697 UTC

[section ""data" . lvl2_r95n6_closure" {
     lvl2_r95n6_closure:
         const lvl2_r95n6_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r95n6_entry() //  [R1]
         { []
         }
     {offset
       c96v6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96v7; else goto c96v8;
       c96v7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96v8: // global
           (_c96v3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c96v3::I64 == 0) goto c96v5; else goto c96v4;
       c96v5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c96v4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c96v3::I64;
           R2 = lvl1_r95n5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_r95n6_info" {
     lvl2_r95n6_info:
         const lvl2_r95n6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.830345058 UTC

[section ""data" . lvl3_r95n7_closure" {
     lvl3_r95n7_closure:
         const lvl3_r95n7_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r95n7_entry() //  [R1]
         { []
         }
     {offset
       c96vn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96vo; else goto c96vp;
       c96vo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96vp: // global
           (_c96vk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c96vk::I64 == 0) goto c96vm; else goto c96vl;
       c96vm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c96vl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c96vk::I64;
           R2 = Foreign.Marshal.Pool.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r95n7_info" {
     lvl3_r95n7_info:
         const lvl3_r95n7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.834847113 UTC

[section ""data" . lvl4_r95n8_closure" {
     lvl4_r95n8_closure:
         const lvl4_r95n8_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r95n8_entry() //  [R1]
         { []
         }
     {offset
       c96vE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96vF; else goto c96vG;
       c96vF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96vG: // global
           (_c96vB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c96vB::I64 == 0) goto c96vD; else goto c96vC;
       c96vD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c96vC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c96vB::I64;
           R2 = Foreign.Marshal.Pool.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_r95n8_info" {
     lvl4_r95n8_info:
         const lvl4_r95n8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.838658668 UTC

[section ""cstring" . lvl5_r95n9_bytes" {
     lvl5_r95n9_bytes:
         I8[] [46,47,70,111,114,101,105,103,110,47,77,97,114,115,104,97,108,47,80,111,111,108,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.840858664 UTC

[section ""data" . lvl6_r95na_closure" {
     lvl6_r95na_closure:
         const lvl6_r95na_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r95na_entry() //  [R1]
         { []
         }
     {offset
       c96vW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96vX; else goto c96vY;
       c96vX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96vY: // global
           (_c96vT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c96vT::I64 == 0) goto c96vV; else goto c96vU;
       c96vV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c96vU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c96vT::I64;
           R2 = lvl5_r95n9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r95na_info" {
     lvl6_r95na_info:
         const lvl6_r95na_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.844420847 UTC

[section ""data" . lvl7_r95nb_closure" {
     lvl7_r95nb_closure:
         const GHC.Types.I#_con_info;
         const 159;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.846562927 UTC

[section ""data" . lvl8_r95nc_closure" {
     lvl8_r95nc_closure:
         const GHC.Types.I#_con_info;
         const 26;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.848241182 UTC

[section ""data" . lvl9_r95nd_closure" {
     lvl9_r95nd_closure:
         const GHC.Types.I#_con_info;
         const 35;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.850052714 UTC

[section ""data" . lvl10_r95ne_closure" {
     lvl10_r95ne_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl3_r95n7_closure;
         const lvl4_r95n8_closure;
         const lvl6_r95na_closure;
         const lvl7_r95nb_closure+1;
         const lvl8_r95nc_closure+1;
         const lvl7_r95nb_closure+1;
         const lvl9_r95nd_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.851845942 UTC

[section ""data" . lvl11_r95nf_closure" {
     lvl11_r95nf_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl2_r95n6_closure;
         const lvl10_r95ne_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.855922616 UTC

[section ""data" . Foreign.Marshal.Pool.pooledReallocArray1_closure" {
     Foreign.Marshal.Pool.pooledReallocArray1_closure:
         const Foreign.Marshal.Pool.pooledReallocArray1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Pool.pooledReallocArray1_entry() //  [R1]
         { []
         }
     {offset
       c96wi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96wj; else goto c96wk;
       c96wj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96wk: // global
           (_c96wf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c96wf::I64 == 0) goto c96wh; else goto c96wg;
       c96wh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c96wg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c96wf::I64;
           R2 = lvl11_r95nf_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledReallocArray1_info" {
     Foreign.Marshal.Pool.pooledReallocArray1_info:
         const Foreign.Marshal.Pool.pooledReallocArray1_entry;
         const 0;
         const 12884901909;
         const S96tm_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.86374577 UTC

[section ""data" . Foreign.Marshal.Pool.pooledReallocArray_closure" {
     Foreign.Marshal.Pool.pooledReallocArray_closure:
         const Foreign.Marshal.Pool.pooledReallocArray_info;
         const 0;
 },
 lvl27_s96mL_entry() //  [R1]
         { []
         }
     {offset
       c96wB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c96wC; else goto c96wD;
       c96wC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96wD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Pool.pooledReallocArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_s96mL_info" {
     lvl27_s96mL_info:
         const lvl27_s96mL_entry;
         const 1;
         const 4294967312;
         const S96tm_srt+48;
 },
 sat_s96mZ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c96wM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c96x0; else goto c96x1;
       c96x0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c96x1: // global
           I64[Sp - 32] = block_c96wJ_info;
           _s96mL::P64 = P64[R1 + 4];
           R1 = R2;
           P64[Sp - 24] = _s96mL::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u96xc; else goto c96wK;
       u96xc: // global
           call _c96wJ(R1) args: 0, res: 0, upd: 0;
       c96wK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s96mZ_info" {
     sat_s96mZ_info:
         const sat_s96mZ_entry;
         const 1;
         const 4294967305;
         const 17179869207;
         const S96tm_srt+16;
 },
 _c96wJ() //  [R1]
         { []
         }
     {offset
       c96wJ: // global
           I64[Sp] = block_c96wP_info;
           _s96mR::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s96mR::P64;
           if (R1 & 7 != 0) goto u96xb; else goto c96wQ;
       u96xb: // global
           call _c96wP(R1) args: 0, res: 0, upd: 0;
       c96wQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96wJ_info" {
     block_c96wJ_info:
         const _c96wJ;
         const 3;
         const 4294967326;
         const S96tm_srt+16;
 },
 _c96wP() //  [R1]
         { []
         }
     {offset
       c96wP: // global
           I64[Sp] = block_c96wU_info;
           _s96mT::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s96mT::I64;
           if (R1 & 7 != 0) goto u96xd; else goto c96wV;
       u96xd: // global
           call _c96wU(R1) args: 0, res: 0, upd: 0;
       c96wV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96wP_info" {
     block_c96wP_info:
         const _c96wP;
         const 3;
         const 4294967326;
         const S96tm_srt+16;
 },
 _c96wU() //  [R1]
         { []
         }
     {offset
       c96wU: // global
           I64[Sp] = block_c96wZ_info;
           _s96mV::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s96mV::I64;
           if (R1 & 7 != 0) goto u96xe; else goto c96x5;
       u96xe: // global
           call _c96wZ(R1) args: 0, res: 0, upd: 0;
       c96x5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96wU_info" {
     block_c96wU_info:
         const _c96wU;
         const 259;
         const 4294967326;
         const S96tm_srt+16;
 },
 _c96wZ() //  [R1]
         { []
         }
     {offset
       c96wZ: // global
           R4 = I64[Sp + 8] * I64[R1 + 7];
           R3 = I64[Sp + 24];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call Foreign.Marshal.Pool.$wpooledReallocBytes_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96wZ_info" {
     block_c96wZ_info:
         const _c96wZ;
         const 323;
         const 4294967326;
         const S96tm_srt+16;
 },
 Foreign.Marshal.Pool.pooledReallocArray_entry() //  [R2]
         { []
         }
     {offset
       c96xf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c96xj; else goto c96xi;
       c96xj: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledReallocArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c96xi: // global
           I64[Hp - 32] = lvl27_s96mL_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s96mZ_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledReallocArray_info" {
     Foreign.Marshal.Pool.pooledReallocArray_info:
         const Foreign.Marshal.Pool.pooledReallocArray_entry;
         const 0;
         const 210453397518;
         const 4294967301;
         const S96tm_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.880378504 UTC

[section ""data" . Foreign.Marshal.Pool.pooledReallocArray2_closure" {
     Foreign.Marshal.Pool.pooledReallocArray2_closure:
         const Foreign.Marshal.Pool.pooledReallocArray2_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledReallocArray2_entry() //  [R2, R3, R4,
                                                       R5]
         { []
         }
     {offset
       c96y6: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c96yk; else goto c96yl;
       c96yk: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledReallocArray2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c96yl: // global
           I64[Sp - 32] = block_c96y3_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u96yy; else goto c96y4;
       u96yy: // global
           call _c96y3(R1) args: 0, res: 0, upd: 0;
       c96y4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledReallocArray2_info" {
     Foreign.Marshal.Pool.pooledReallocArray2_info:
         const Foreign.Marshal.Pool.pooledReallocArray2_entry;
         const 0;
         const 347892350990;
         const 21474836504;
         const S96tm_srt+16;
 },
 _c96y3() //  [R1]
         { []
         }
     {offset
       c96y3: // global
           I64[Sp] = block_c96y9_info;
           _s96n6::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s96n6::P64;
           if (R1 & 7 != 0) goto u96yx; else goto c96ya;
       u96yx: // global
           call _c96y9(R1) args: 0, res: 0, upd: 0;
       c96ya: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96y3_info" {
     block_c96y3_info:
         const _c96y3;
         const 3;
         const 73014444062;
         const S96tm_srt+16;
 },
 _c96y9() //  [R1]
         { []
         }
     {offset
       c96y9: // global
           I64[Sp] = block_c96ye_info;
           _s96n8::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s96n8::I64;
           if (R1 & 7 != 0) goto u96yz; else goto c96yf;
       u96yz: // global
           call _c96ye(R1) args: 0, res: 0, upd: 0;
       c96yf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96y9_info" {
     block_c96y9_info:
         const _c96y9;
         const 3;
         const 73014444062;
         const S96tm_srt+16;
 },
 _c96ye() //  [R1]
         { []
         }
     {offset
       c96ye: // global
           I64[Sp] = block_c96yj_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Foreign.Marshal.Pool.pooledReallocArray1_closure;
           I64[Sp + 8] = I64[R1 + 7];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96ye_info" {
     block_c96ye_info:
         const _c96ye;
         const 259;
         const 73014444062;
         const S96tm_srt+16;
 },
 _c96yj() //  [R1]
         { []
         }
     {offset
       c96yj: // global
           R4 = (I64[Sp + 8] + 1) * I64[R1 + 7];
           R3 = I64[Sp + 24];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call Foreign.Marshal.Pool.$wpooledReallocBytes_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96yj_info" {
     block_c96yj_info:
         const _c96yj;
         const 323;
         const 4294967326;
         const S96tm_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.8909538 UTC

[section ""data" . Foreign.Marshal.Pool.pooledReallocArray0_closure" {
     Foreign.Marshal.Pool.pooledReallocArray0_closure:
         const Foreign.Marshal.Pool.pooledReallocArray0_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledReallocArray0_entry() //  [R2, R3, R4,
                                                       R5]
         { []
         }
     {offset
       c96z8: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Pool.pooledReallocArray2_entry(R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledReallocArray0_info" {
     Foreign.Marshal.Pool.pooledReallocArray0_info:
         const Foreign.Marshal.Pool.pooledReallocArray0_entry;
         const 0;
         const 4294967310;
         const 21474836504;
         const S96tm_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.894460285 UTC

[section ""data" . lvl12_r95ng_closure" {
     lvl12_r95ng_closure:
         const GHC.Types.I#_con_info;
         const 124;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.896148171 UTC

[section ""data" . lvl13_r95nh_closure" {
     lvl13_r95nh_closure:
         const GHC.Types.I#_con_info;
         const 20;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.897871578 UTC

[section ""data" . lvl14_r95ni_closure" {
     lvl14_r95ni_closure:
         const GHC.Types.I#_con_info;
         const 29;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.899704018 UTC

[section ""data" . lvl15_r95nj_closure" {
     lvl15_r95nj_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl3_r95n7_closure;
         const lvl4_r95n8_closure;
         const lvl6_r95na_closure;
         const lvl12_r95ng_closure+1;
         const lvl13_r95nh_closure+1;
         const lvl12_r95ng_closure+1;
         const lvl14_r95ni_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.901967142 UTC

[section ""data" . lvl16_r95nk_closure" {
     lvl16_r95nk_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl2_r95n6_closure;
         const lvl15_r95nj_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.904802522 UTC

[section ""data" . Foreign.Marshal.Pool.pooledRealloc3_closure" {
     Foreign.Marshal.Pool.pooledRealloc3_closure:
         const Foreign.Marshal.Pool.pooledRealloc3_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Pool.pooledRealloc3_entry() //  [R1]
         { []
         }
     {offset
       c96zq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96zr; else goto c96zs;
       c96zr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96zs: // global
           (_c96zn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c96zn::I64 == 0) goto c96zp; else goto c96zo;
       c96zp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c96zo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c96zn::I64;
           R2 = lvl16_r95nk_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledRealloc3_info" {
     Foreign.Marshal.Pool.pooledRealloc3_info:
         const Foreign.Marshal.Pool.pooledRealloc3_entry;
         const 0;
         const 141733920789;
         const S96tm_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.909634592 UTC

[section ""data" . Foreign.Marshal.Pool.pooledRealloc_closure" {
     Foreign.Marshal.Pool.pooledRealloc_closure:
         const Foreign.Marshal.Pool.pooledRealloc_info;
         const 0;
 },
 lvl27_s96ng_entry() //  [R1]
         { []
         }
     {offset
       c96zJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c96zK; else goto c96zL;
       c96zK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96zL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Pool.pooledRealloc3_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_s96ng_info" {
     lvl27_s96ng_info:
         const lvl27_s96ng_entry;
         const 1;
         const 4294967312;
         const S96tm_srt+80;
 },
 sat_s96nk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c96zR: // global
           R4 = P64[R1 + 5];
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Pool.pooledRealloc1_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s96nk_info" {
     sat_s96nk_info:
         const sat_s96nk_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const S96tm_srt+24;
 },
 Foreign.Marshal.Pool.pooledRealloc_entry() //  [R2]
         { []
         }
     {offset
       c96zU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c96zY; else goto c96zX;
       c96zY: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledRealloc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c96zX: // global
           I64[Hp - 32] = lvl27_s96ng_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s96nk_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledRealloc_info" {
     Foreign.Marshal.Pool.pooledRealloc_info:
         const Foreign.Marshal.Pool.pooledRealloc_entry;
         const 0;
         const 1653562408974;
         const 4294967301;
         const S96tm_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.918488444 UTC

[section ""data" . Foreign.Marshal.Pool.pooledMallocBytes1_closure" {
     Foreign.Marshal.Pool.pooledMallocBytes1_closure:
         const Foreign.Marshal.Pool.pooledMallocBytes1_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledMallocBytes1_entry() //  [R2, R3]
         { []
         }
     {offset
       c96Ao: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96Ap; else goto c96Aq;
       c96Ap: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledMallocBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c96Aq: // global
           I64[Sp - 16] = block_c96Al_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u96AT; else goto c96Am;
       u96AT: // global
           call _c96Al(R1) args: 0, res: 0, upd: 0;
       c96Am: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledMallocBytes1_info" {
     Foreign.Marshal.Pool.pooledMallocBytes1_info:
         const Foreign.Marshal.Pool.pooledMallocBytes1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S96tm_srt+96;
 },
 _c96Al() //  [R1]
         { []
         }
     {offset
       c96Al: // global
           _s96nl::P64 = P64[Sp + 8];
           (_s96nu::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[R1 + 7]);
           if (_s96nu::I64 == 0) goto c96AN; else goto c96AJ;
       c96AN: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c96AJ: // global
           I64[Sp] = block_c96AC_info;
           R1 = _s96nl::P64;
           I64[Sp + 8] = _s96nu::I64;
           if (R1 & 7 != 0) goto u96AS; else goto c96AD;
       u96AS: // global
           call _c96AC(R1) args: 0, res: 0, upd: 0;
       c96AD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96Al_info" {
     block_c96Al_info:
         const _c96Al;
         const 1;
         const 4294967326;
         const S96tm_srt+96;
 },
 _c96AC() //  [R1]
         { []
         }
     {offset
       c96AC: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c96AM; else goto c96AL;
       c96AM: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96AL: // global
           _s96nx::P64 = P64[R1 + 7];
           _s96nA::P64 = P64[_s96nx::P64 + 8];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           _c96AH::P64 = Hp - 31;
           P64[Hp - 8] = _c96AH::P64;
           P64[Hp] = _s96nA::P64;
           call MO_WriteBarrier();
           P64[_s96nx::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s96nx::P64);
           R1 = _c96AH::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96AC_info" {
     block_c96AC_info:
         const _c96AC;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.92628908 UTC

[section ""data" . Foreign.Marshal.Pool.pooledMallocBytes_closure" {
     Foreign.Marshal.Pool.pooledMallocBytes_closure:
         const Foreign.Marshal.Pool.pooledMallocBytes_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledMallocBytes_entry() //  [R2, R3]
         { []
         }
     {offset
       c96Bj: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Pool.pooledMallocBytes1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledMallocBytes_info" {
     Foreign.Marshal.Pool.pooledMallocBytes_info:
         const Foreign.Marshal.Pool.pooledMallocBytes_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S96tm_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.929536391 UTC

[section ""data" . lvl17_r95nl_closure" {
     lvl17_r95nl_closure:
         const GHC.Types.I#_con_info;
         const 144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.93157688 UTC

[section ""data" . lvl18_r95nm_closure" {
     lvl18_r95nm_closure:
         const GHC.Types.I#_con_info;
         const 25;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.933206404 UTC

[section ""data" . lvl19_r95nn_closure" {
     lvl19_r95nn_closure:
         const GHC.Types.I#_con_info;
         const 34;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.934953981 UTC

[section ""data" . lvl20_r95no_closure" {
     lvl20_r95no_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl3_r95n7_closure;
         const lvl4_r95n8_closure;
         const lvl6_r95na_closure;
         const lvl17_r95nl_closure+1;
         const lvl18_r95nm_closure+1;
         const lvl17_r95nl_closure+1;
         const lvl19_r95nn_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.936752021 UTC

[section ""data" . lvl21_r95np_closure" {
     lvl21_r95np_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl2_r95n6_closure;
         const lvl20_r95no_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.939531009 UTC

[section ""data" . Foreign.Marshal.Pool.pooledMallocArray1_closure" {
     Foreign.Marshal.Pool.pooledMallocArray1_closure:
         const Foreign.Marshal.Pool.pooledMallocArray1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Pool.pooledMallocArray1_entry() //  [R1]
         { []
         }
     {offset
       c96BB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96BC; else goto c96BD;
       c96BC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96BD: // global
           (_c96By::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c96By::I64 == 0) goto c96BA; else goto c96Bz;
       c96BA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c96Bz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c96By::I64;
           R2 = lvl21_r95np_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledMallocArray1_info" {
     Foreign.Marshal.Pool.pooledMallocArray1_info:
         const Foreign.Marshal.Pool.pooledMallocArray1_entry;
         const 0;
         const 4402341478421;
         const S96tm_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.946570739 UTC

[section ""data" . Foreign.Marshal.Pool.pooledMallocArray_closure" {
     Foreign.Marshal.Pool.pooledMallocArray_closure:
         const Foreign.Marshal.Pool.pooledMallocArray_info;
         const 0;
 },
 lvl27_s96nG_entry() //  [R1]
         { []
         }
     {offset
       c96BU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c96BV; else goto c96BW;
       c96BV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96BW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Pool.pooledMallocArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_s96nG_info" {
     lvl27_s96nG_info:
         const lvl27_s96nG_entry;
         const 1;
         const 4294967312;
         const S96tm_srt+120;
 },
 sat_s96o4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c96C5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c96C9; else goto c96Ca;
       c96C9: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c96Ca: // global
           I64[Sp - 24] = block_c96C2_info;
           _s96nG::P64 = P64[R1 + 5];
           R1 = R3;
           P64[Sp - 16] = _s96nG::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u96CJ; else goto c96C3;
       u96CJ: // global
           call _c96C2(R1) args: 0, res: 0, upd: 0;
       c96C3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s96o4_info" {
     sat_s96o4_info:
         const sat_s96o4_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const S96tm_srt+96;
 },
 _c96C2() //  [R1]
         { []
         }
     {offset
       c96C2: // global
           I64[Sp] = block_c96C8_info;
           _s96nL::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s96nL::I64;
           if (R1 & 7 != 0) goto u96CI; else goto c96Cc;
       u96CI: // global
           call _c96C8(R1) args: 0, res: 0, upd: 0;
       c96Cc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96C2_info" {
     block_c96C2_info:
         const _c96C2;
         const 2;
         const 4294967326;
         const S96tm_srt+96;
 },
 _c96C8() //  [R1]
         { []
         }
     {offset
       c96C8: // global
           _s96nH::P64 = P64[Sp + 16];
           (_s96nT::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[Sp + 8] * I64[R1 + 7]);
           if (_s96nT::I64 == 0) goto c96CD; else goto c96Cz;
       c96CD: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c96Cz: // global
           I64[Sp + 8] = block_c96Cs_info;
           R1 = _s96nH::P64;
           I64[Sp + 16] = _s96nT::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u96CK; else goto c96Ct;
       u96CK: // global
           call _c96Cs(R1) args: 0, res: 0, upd: 0;
       c96Ct: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96C8_info" {
     block_c96C8_info:
         const _c96C8;
         const 66;
         const 4294967326;
         const S96tm_srt+96;
 },
 _c96Cs() //  [R1]
         { []
         }
     {offset
       c96Cs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c96CC; else goto c96CB;
       c96CC: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96CB: // global
           _s96nW::P64 = P64[R1 + 7];
           _s96nZ::P64 = P64[_s96nW::P64 + 8];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           _c96Cx::P64 = Hp - 31;
           P64[Hp - 8] = _c96Cx::P64;
           P64[Hp] = _s96nZ::P64;
           call MO_WriteBarrier();
           P64[_s96nW::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s96nW::P64);
           R1 = _c96Cx::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96Cs_info" {
     block_c96Cs_info:
         const _c96Cs;
         const 65;
         const 30;
 },
 Foreign.Marshal.Pool.pooledMallocArray_entry() //  [R2]
         { []
         }
     {offset
       c96CL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c96CP; else goto c96CO;
       c96CP: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledMallocArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c96CO: // global
           I64[Hp - 32] = lvl27_s96nG_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s96o4_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledMallocArray_info" {
     Foreign.Marshal.Pool.pooledMallocArray_info:
         const Foreign.Marshal.Pool.pooledMallocArray_entry;
         const 0;
         const 107374182414;
         const 4294967301;
         const S96tm_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.9616661 UTC

[section ""data" . Foreign.Marshal.Pool.$wpooledMallocArray0_closure" {
     Foreign.Marshal.Pool.$wpooledMallocArray0_closure:
         const Foreign.Marshal.Pool.$wpooledMallocArray0_info;
         const 0;
 },
 Foreign.Marshal.Pool.$wpooledMallocArray0_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c96DC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c96DD; else goto c96DE;
       c96DD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.$wpooledMallocArray0_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c96DE: // global
           I64[Sp - 24] = block_c96DA_info;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = Foreign.Marshal.Pool.pooledMallocArray1_closure;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 40;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.$wpooledMallocArray0_info" {
     Foreign.Marshal.Pool.$wpooledMallocArray0_info:
         const Foreign.Marshal.Pool.$wpooledMallocArray0_entry;
         const 0;
         const 176093659150;
         const 17179869206;
         const S96tm_srt+96;
 },
 _c96DA() //  [R1]
         { []
         }
     {offset
       c96DA: // global
           _s96o6::P64 = P64[Sp + 8];
           (_s96oh::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc((I64[Sp + 16] + 1) * I64[R1 + 7]);
           if (_s96oh::I64 == 0) goto c96E7; else goto c96E3;
       c96E7: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c96E3: // global
           I64[Sp + 8] = block_c96DW_info;
           R1 = _s96o6::P64;
           I64[Sp + 16] = _s96oh::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u96Ec; else goto c96DX;
       u96Ec: // global
           call _c96DW(R1) args: 0, res: 0, upd: 0;
       c96DX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96DA_info" {
     block_c96DA_info:
         const _c96DA;
         const 130;
         const 4294967326;
         const S96tm_srt+96;
 },
 _c96DW() //  [R1]
         { []
         }
     {offset
       c96DW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c96E6; else goto c96E5;
       c96E6: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96E5: // global
           _s96ok::P64 = P64[R1 + 7];
           _s96on::P64 = P64[_s96ok::P64 + 8];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           _c96E1::P64 = Hp - 31;
           P64[Hp - 8] = _c96E1::P64;
           P64[Hp] = _s96on::P64;
           call MO_WriteBarrier();
           P64[_s96ok::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s96ok::P64);
           R1 = _c96E1::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96DW_info" {
     block_c96DW_info:
         const _c96DW;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.97001192 UTC

[section ""data" . Foreign.Marshal.Pool.pooledMallocArray2_closure" {
     Foreign.Marshal.Pool.pooledMallocArray2_closure:
         const Foreign.Marshal.Pool.pooledMallocArray2_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledMallocArray2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c96EJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c96EK; else goto c96EL;
       c96EK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledMallocArray2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c96EL: // global
           I64[Sp - 24] = block_c96EG_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u96EP; else goto c96EH;
       u96EP: // global
           call _c96EG(R1) args: 0, res: 0, upd: 0;
       c96EH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledMallocArray2_info" {
     Foreign.Marshal.Pool.pooledMallocArray2_info:
         const Foreign.Marshal.Pool.pooledMallocArray2_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S96tm_srt+136;
 },
 _c96EG() //  [R1]
         { []
         }
     {offset
       c96EG: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Foreign.Marshal.Pool.$wpooledMallocArray0_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96EG_info" {
     block_c96EG_info:
         const _c96EG;
         const 2;
         const 4294967326;
         const S96tm_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.9758547 UTC

[section ""data" . Foreign.Marshal.Pool.pooledMallocArray0_closure" {
     Foreign.Marshal.Pool.pooledMallocArray0_closure:
         const Foreign.Marshal.Pool.pooledMallocArray0_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledMallocArray0_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c96F4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Pool.pooledMallocArray2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledMallocArray0_info" {
     Foreign.Marshal.Pool.pooledMallocArray0_info:
         const Foreign.Marshal.Pool.pooledMallocArray0_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S96tm_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.979474495 UTC

[section ""data" . lvl22_r95nq_closure" {
     lvl22_r95nq_closure:
         const GHC.Types.I#_con_info;
         const 106;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.981187857 UTC

[section ""data" . lvl23_r95nr_closure" {
     lvl23_r95nr_closure:
         const GHC.Types.I#_con_info;
         const 19;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.982952582 UTC

[section ""data" . lvl24_r95ns_closure" {
     lvl24_r95ns_closure:
         const GHC.Types.I#_con_info;
         const 28;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.984725738 UTC

[section ""data" . lvl25_r95nt_closure" {
     lvl25_r95nt_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl3_r95n7_closure;
         const lvl4_r95n8_closure;
         const lvl6_r95na_closure;
         const lvl22_r95nq_closure+1;
         const lvl23_r95nr_closure+1;
         const lvl22_r95nq_closure+1;
         const lvl24_r95ns_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.986900557 UTC

[section ""data" . lvl26_r95nu_closure" {
     lvl26_r95nu_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl2_r95n6_closure;
         const lvl25_r95nt_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.989779593 UTC

[section ""data" . Foreign.Marshal.Pool.pooledMalloc1_closure" {
     Foreign.Marshal.Pool.pooledMalloc1_closure:
         const Foreign.Marshal.Pool.pooledMalloc1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Pool.pooledMalloc1_entry() //  [R1]
         { []
         }
     {offset
       c96Fm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96Fn; else goto c96Fo;
       c96Fn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96Fo: // global
           (_c96Fj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c96Fj::I64 == 0) goto c96Fl; else goto c96Fk;
       c96Fl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c96Fk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c96Fj::I64;
           R2 = lvl26_r95nu_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledMalloc1_info" {
     Foreign.Marshal.Pool.pooledMalloc1_info:
         const Foreign.Marshal.Pool.pooledMalloc1_entry;
         const 0;
         const 140741783322645;
         const S96tm_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:16.995981219 UTC

[section ""data" . Foreign.Marshal.Pool.pooledMalloc_closure" {
     Foreign.Marshal.Pool.pooledMalloc_closure:
         const Foreign.Marshal.Pool.pooledMalloc_info;
         const 0;
 },
 lvl27_s96oz_entry() //  [R1]
         { []
         }
     {offset
       c96FF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c96FG; else goto c96FH;
       c96FG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96FH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Pool.pooledMalloc1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_s96oz_info" {
     lvl27_s96oz_info:
         const lvl27_s96oz_entry;
         const 1;
         const 4294967312;
         const S96tm_srt+160;
 },
 sat_s96oT_entry() //  [R1, R2]
         { []
         }
     {offset
       c96FQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96FR; else goto c96FS;
       c96FR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c96FS: // global
           I64[Sp - 16] = block_c96FN_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u96Gl; else goto c96FO;
       u96Gl: // global
           call _c96FN(R1) args: 0, res: 0, upd: 0;
       c96FO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s96oT_info" {
     sat_s96oT_info:
         const sat_s96oT_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const S96tm_srt+96;
 },
 _c96FN() //  [R1]
         { []
         }
     {offset
       c96FN: // global
           _s96oA::P64 = P64[Sp + 8];
           (_s96oI::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[R1 + 7]);
           if (_s96oI::I64 == 0) goto c96Gf; else goto c96Gb;
       c96Gf: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c96Gb: // global
           I64[Sp] = block_c96G4_info;
           R1 = _s96oA::P64;
           I64[Sp + 8] = _s96oI::I64;
           if (R1 & 7 != 0) goto u96Gk; else goto c96G5;
       u96Gk: // global
           call _c96G4(R1) args: 0, res: 0, upd: 0;
       c96G5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96FN_info" {
     block_c96FN_info:
         const _c96FN;
         const 1;
         const 4294967326;
         const S96tm_srt+96;
 },
 _c96G4() //  [R1]
         { []
         }
     {offset
       c96G4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c96Ge; else goto c96Gd;
       c96Ge: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96Gd: // global
           _s96oL::P64 = P64[R1 + 7];
           _s96oO::P64 = P64[_s96oL::P64 + 8];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           _c96G9::P64 = Hp - 31;
           P64[Hp - 8] = _c96G9::P64;
           P64[Hp] = _s96oO::P64;
           call MO_WriteBarrier();
           P64[_s96oL::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s96oL::P64);
           R1 = _c96G9::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96G4_info" {
     block_c96G4_info:
         const _c96G4;
         const 65;
         const 30;
 },
 Foreign.Marshal.Pool.pooledMalloc_entry() //  [R2]
         { []
         }
     {offset
       c96Gm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c96Gq; else goto c96Gp;
       c96Gq: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledMalloc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c96Gp: // global
           I64[Hp - 32] = lvl27_s96oz_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s96oT_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledMalloc_info" {
     Foreign.Marshal.Pool.pooledMalloc_info:
         const Foreign.Marshal.Pool.pooledMalloc_entry;
         const 0;
         const 3302829850638;
         const 4294967301;
         const S96tm_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:17.010935769 UTC

[section ""data" . Foreign.Marshal.Pool.pooledNewArray2_closure" {
     Foreign.Marshal.Pool.pooledNewArray2_closure:
         const Foreign.Marshal.Pool.pooledNewArray2_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledNewArray2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c96H6: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c96Ha; else goto c96Hb;
       c96Ha: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledNewArray2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c96Hb: // global
           I64[Sp - 40] = block_c96H4_info;
           _s96oV::P64 = R3;
           R3 = 0;
           _s96oU::P64 = R2;
           R2 = R5;
           P64[Sp - 32] = _s96oU::P64;
           P64[Sp - 24] = _s96oV::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledNewArray2_info" {
     Foreign.Marshal.Pool.pooledNewArray2_info:
         const Foreign.Marshal.Pool.pooledNewArray2_entry;
         const 0;
         const 4436701216782;
         const 21474836504;
         const S96tm_srt+96;
 },
 _c96H4() //  [R1]
         { []
         }
     {offset
       c96H4: // global
           I64[Sp - 8] = block_c96H9_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = Foreign.Marshal.Pool.pooledMallocArray1_closure;
           I64[Sp] = R1;
           Sp = Sp - 24;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96H4_info" {
     block_c96H4_info:
         const _c96H4;
         const 4;
         const 38654705694;
         const S96tm_srt+96;
 },
 _c96H9() //  [R1]
         { []
         }
     {offset
       c96H9: // global
           _s96oV::P64 = P64[Sp + 24];
           (_s96p8::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc((I64[Sp + 8] + 1) * I64[R1 + 7]);
           if (_s96p8::I64 == 0) goto c96HN; else goto c96HH;
       c96HN: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 48;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c96HH: // global
           I64[Sp + 8] = block_c96Hv_info;
           R1 = _s96oV::P64;
           I64[Sp + 24] = _s96p8::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u96HO; else goto c96Hw;
       u96HO: // global
           call _c96Hv(R1) args: 0, res: 0, upd: 0;
       c96Hw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96H9_info" {
     block_c96H9_info:
         const _c96H9;
         const 69;
         const 4294967326;
         const S96tm_srt+96;
 },
 _c96Hv() //  [R1]
         { []
         }
     {offset
       c96Hv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c96HK; else goto c96HJ;
       c96HK: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96HJ: // global
           _s96pb::P64 = P64[R1 + 7];
           _s96pe::P64 = P64[_s96pb::P64 + 8];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           _c96HA::P64 = Hp - 31;
           P64[Hp - 8] = _c96HA::P64;
           P64[Hp] = _s96pe::P64;
           _s96oU::P64 = P64[Sp + 8];
           _s96oW::P64 = P64[Sp + 24];
           _s96oX::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[_s96pb::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s96pb::P64);
           I64[Sp + 24] = block_c96HF_info;
           R5 = _s96oX::P64;
           R4 = _c96HA::P64;
           R3 = _s96oW::P64;
           R2 = _s96oU::P64;
           P64[Sp + 32] = _c96HA::P64;
           Sp = Sp + 24;
           call Foreign.Marshal.Array.newArray4_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96Hv_info" {
     block_c96Hv_info:
         const _c96Hv;
         const 132;
         const 30;
 },
 _c96HF() //  []
         { []
         }
     {offset
       c96HF: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96HF_info" {
     block_c96HF_info:
         const _c96HF;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:17.023160955 UTC

[section ""data" . Foreign.Marshal.Pool.pooledNewArray0_closure" {
     Foreign.Marshal.Pool.pooledNewArray0_closure:
         const Foreign.Marshal.Pool.pooledNewArray0_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledNewArray0_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c96Iq: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Pool.pooledNewArray2_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledNewArray0_info" {
     Foreign.Marshal.Pool.pooledNewArray0_info:
         const Foreign.Marshal.Pool.pooledNewArray0_entry;
         const 0;
         const 4294967310;
         const 21474836504;
         const S96tm_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:17.029340296 UTC

[section ""data" . Foreign.Marshal.Pool.pooledNewArray1_closure" {
     Foreign.Marshal.Pool.pooledNewArray1_closure:
         const Foreign.Marshal.Pool.pooledNewArray1_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledNewArray1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c96ID: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c96IH; else goto c96II;
       c96IH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledNewArray1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c96II: // global
           I64[Sp - 32] = block_c96IB_info;
           _s96pn::P64 = R3;
           R3 = 0;
           _s96pm::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _s96pm::P64;
           P64[Sp - 16] = _s96pn::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledNewArray1_info" {
     Foreign.Marshal.Pool.pooledNewArray1_info:
         const Foreign.Marshal.Pool.pooledNewArray1_entry;
         const 0;
         const 8834747727886;
         const 17179869207;
         const S96tm_srt+96;
 },
 _c96IB() //  [R1]
         { []
         }
     {offset
       c96IB: // global
           I64[Sp - 8] = block_c96IG_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = Foreign.Marshal.Pool.pooledMallocArray1_closure;
           I64[Sp] = R1;
           Sp = Sp - 24;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96IB_info" {
     block_c96IB_info:
         const _c96IB;
         const 3;
         const 38654705694;
         const S96tm_srt+96;
 },
 _c96IG() //  [R1]
         { []
         }
     {offset
       c96IG: // global
           _s96pn::P64 = P64[Sp + 24];
           (_s96py::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[Sp + 8] * I64[R1 + 7]);
           if (_s96py::I64 == 0) goto c96Jh; else goto c96Jb;
       c96Jh: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c96Jb: // global
           I64[Sp + 8] = block_c96IZ_info;
           R1 = _s96pn::P64;
           I64[Sp + 24] = _s96py::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u96Ji; else goto c96J0;
       u96Ji: // global
           call _c96IZ(R1) args: 0, res: 0, upd: 0;
       c96J0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96IG_info" {
     block_c96IG_info:
         const _c96IG;
         const 68;
         const 4294967326;
         const S96tm_srt+96;
 },
 _c96IZ() //  [R1]
         { []
         }
     {offset
       c96IZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c96Je; else goto c96Jd;
       c96Je: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96Jd: // global
           _s96pB::P64 = P64[R1 + 7];
           _s96pE::P64 = P64[_s96pB::P64 + 8];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           _c96J4::P64 = Hp - 31;
           P64[Hp - 8] = _c96J4::P64;
           P64[Hp] = _s96pE::P64;
           _s96pm::P64 = P64[Sp + 8];
           _s96po::P64 = P64[Sp + 24];
           call MO_WriteBarrier();
           P64[_s96pB::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s96pB::P64);
           I64[Sp + 16] = block_c96J9_info;
           R4 = _s96po::P64;
           R3 = _c96J4::P64;
           R2 = _s96pm::P64;
           P64[Sp + 24] = _c96J4::P64;
           Sp = Sp + 16;
           call Foreign.Marshal.Array.newArray2_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96IZ_info" {
     block_c96IZ_info:
         const _c96IZ;
         const 131;
         const 30;
 },
 _c96J9() //  []
         { []
         }
     {offset
       c96J9: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96J9_info" {
     block_c96J9_info:
         const _c96J9;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:17.041771119 UTC

[section ""data" . Foreign.Marshal.Pool.pooledNewArray_closure" {
     Foreign.Marshal.Pool.pooledNewArray_closure:
         const Foreign.Marshal.Pool.pooledNewArray_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledNewArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c96JT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Pool.pooledNewArray1_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledNewArray_info" {
     Foreign.Marshal.Pool.pooledNewArray_info:
         const Foreign.Marshal.Pool.pooledNewArray_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S96tm_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:17.048072579 UTC

[section ""data" . Foreign.Marshal.Pool.pooledNew1_closure" {
     Foreign.Marshal.Pool.pooledNew1_closure:
         const Foreign.Marshal.Pool.pooledNew1_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledNew1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c96K6: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c96K7; else goto c96K8;
       c96K7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Pool.pooledNew1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c96K8: // global
           I64[Sp - 32] = block_c96K4_info;
           _s96pM::P64 = R2;
           R2 = R2;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Foreign.Marshal.Pool.pooledMalloc1_closure;
           P64[Sp - 24] = _s96pM::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledNew1_info" {
     Foreign.Marshal.Pool.pooledNew1_info:
         const Foreign.Marshal.Pool.pooledNew1_entry;
         const 0;
         const 18695992639502;
         const 17179869207;
         const S96tm_srt+96;
 },
 _c96K4() //  [R1]
         { []
         }
     {offset
       c96K4: // global
           _s96pN::P64 = P64[Sp + 16];
           (_s96pW::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[R1 + 7]);
           if (_s96pW::I64 == 0) goto c96KC; else goto c96Kw;
       c96KC: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c96Kw: // global
           I64[Sp] = block_c96Kk_info;
           R1 = _s96pN::P64;
           I64[Sp + 16] = _s96pW::I64;
           if (R1 & 7 != 0) goto u96KD; else goto c96Kl;
       u96KD: // global
           call _c96Kk(R1) args: 0, res: 0, upd: 0;
       c96Kl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96K4_info" {
     block_c96K4_info:
         const _c96K4;
         const 3;
         const 4294967326;
         const S96tm_srt+96;
 },
 _c96Kk() //  [R1]
         { []
         }
     {offset
       c96Kk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c96Kz; else goto c96Ky;
       c96Kz: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96Ky: // global
           _s96pZ::P64 = P64[R1 + 7];
           _s96q2::P64 = P64[_s96pZ::P64 + 8];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           _c96Kp::P64 = Hp - 31;
           P64[Hp - 8] = _c96Kp::P64;
           P64[Hp] = _s96q2::P64;
           _s96pM::P64 = P64[Sp + 8];
           _s96pO::P64 = P64[Sp + 24];
           call MO_WriteBarrier();
           P64[_s96pZ::P64 + 8] = Hp - 14;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s96pZ::P64);
           I64[Sp + 16] = block_c96Ku_info;
           R2 = _s96pM::P64;
           I64[Sp - 8] = stg_ap_ppv_info;
           P64[Sp] = _c96Kp::P64;
           P64[Sp + 8] = _s96pO::P64;
           P64[Sp + 24] = _c96Kp::P64;
           Sp = Sp - 8;
           call Foreign.Storable.poke_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96Kk_info" {
     block_c96Kk_info:
         const _c96Kk;
         const 131;
         const 30;
 },
 _c96Ku() //  []
         { []
         }
     {offset
       c96Ku: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96Ku_info" {
     block_c96Ku_info:
         const _c96Ku;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:17.058374624 UTC

[section ""data" . Foreign.Marshal.Pool.pooledNew_closure" {
     Foreign.Marshal.Pool.pooledNew_closure:
         const Foreign.Marshal.Pool.pooledNew_info;
         const 0;
 },
 Foreign.Marshal.Pool.pooledNew_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c96L9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Pool.pooledNew1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.pooledNew_info" {
     Foreign.Marshal.Pool.pooledNew_info:
         const Foreign.Marshal.Pool.pooledNew_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S96tm_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:17.063351266 UTC

[section ""data" . Foreign.Marshal.Pool.freePool2_closure" {
     Foreign.Marshal.Pool.freePool2_closure:
         const Foreign.Marshal.Pool.freePool2_info;
 },
 Foreign.Marshal.Pool.freePool2_entry() //  [R2]
         { []
         }
     {offset
       c96Lr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96Ls; else goto u96LI;
       c96Ls: // global
           R2 = R2;
           R1 = Foreign.Marshal.Pool.freePool2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u96LI: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c96Lh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.freePool2_info" {
     Foreign.Marshal.Pool.freePool2_info:
         const Foreign.Marshal.Pool.freePool2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c96Lh() //  []
         { []
         }
     {offset
       c96Lh: // global
           _s96qa::P64 = P64[Sp];
           I64[Sp] = block_c96Lk_info;
           R1 = _s96qa::P64;
           if (R1 & 7 != 0) goto u96LK; else goto c96Ll;
       u96LK: // global
           call _c96Lk(R1) args: 0, res: 0, upd: 0;
       c96Ll: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c96Lk() //  [R1]
         { []
         }
     {offset
       c96Lk: // global
           if (R1 & 7 == 1) goto c96Lo; else goto c96Lp;
       c96Lo: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c96Lp: // global
           I64[Sp - 8] = block_c96Lz_info;
           _s96qe::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s96qe::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u96LL; else goto c96LB;
       u96LL: // global
           call _c96Lz(R1) args: 0, res: 0, upd: 0;
       c96LB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96Lk_info" {
     block_c96Lk_info:
         const _c96Lk;
         const 0;
         const 30;
 },
 _c96Lz() //  [R1]
         { []
         }
     {offset
       c96Lz: // global
           _s96qe::P64 = P64[Sp + 8];
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(I64[R1 + 7]);
           P64[Sp + 8] = _s96qe::P64;
           Sp = Sp + 8;
           call _c96Lh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c96Lz_info" {
     block_c96Lz_info:
         const _c96Lz;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:17.07160653 UTC

[section ""data" . Foreign.Marshal.Pool.freePool1_closure" {
     Foreign.Marshal.Pool.freePool1_closure:
         const Foreign.Marshal.Pool.freePool1_info;
 },
 Foreign.Marshal.Pool.freePool1_entry() //  [R2]
         { []
         }
     {offset
       c96Mg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c96Mh; else goto c96Mi;
       c96Mh: // global
           R2 = R2;
           R1 = Foreign.Marshal.Pool.freePool1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c96Mi: // global
           I64[Sp - 8] = block_c96Md_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u96Mm; else goto c96Me;
       u96Mm: // global
           call _c96Md(R1) args: 0, res: 0, upd: 0;
       c96Me: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.freePool1_info" {
     Foreign.Marshal.Pool.freePool1_info:
         const Foreign.Marshal.Pool.freePool1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c96Md() //  [R1]
         { []
         }
     {offset
       c96Md: // global
           R2 = P64[P64[R1 + 7] + 8];
           Sp = Sp + 8;
           call Foreign.Marshal.Pool.freePool2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96Md_info" {
     block_c96Md_info:
         const _c96Md;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:17.077165132 UTC

[section ""data" . Foreign.Marshal.Pool.freePool_closure" {
     Foreign.Marshal.Pool.freePool_closure:
         const Foreign.Marshal.Pool.freePool_info;
 },
 Foreign.Marshal.Pool.freePool_entry() //  [R2]
         { []
         }
     {offset
       c96MC: // global
           R2 = R2;
           call Foreign.Marshal.Pool.freePool1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.freePool_info" {
     Foreign.Marshal.Pool.freePool_info:
         const Foreign.Marshal.Pool.freePool_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:17.08094783 UTC

[section ""data" . Foreign.Marshal.Pool.newPool1_closure" {
     Foreign.Marshal.Pool.newPool1_closure:
         const Foreign.Marshal.Pool.newPool1_info;
 },
 Foreign.Marshal.Pool.newPool1_entry() //  []
         { []
         }
     {offset
       c96MQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c96MR; else goto c96MS;
       c96MR: // global
           R1 = Foreign.Marshal.Pool.newPool1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c96MS: // global
           I64[Sp - 8] = block_c96MN_info;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.newPool1_info" {
     Foreign.Marshal.Pool.newPool1_info:
         const Foreign.Marshal.Pool.newPool1_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _c96MN() //  [R1]
         { []
         }
     {offset
       c96MN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c96MV; else goto c96MU;
       c96MV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96MU: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96MN_info" {
     block_c96MN_info:
         const _c96MN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:17.08625874 UTC

[section ""data" . Foreign.Marshal.Pool.newPool_closure" {
     Foreign.Marshal.Pool.newPool_closure:
         const Foreign.Marshal.Pool.newPool_info;
 },
 Foreign.Marshal.Pool.newPool_entry() //  []
         { []
         }
     {offset
       c96Nc: // global
           call Foreign.Marshal.Pool.newPool1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.newPool_info" {
     Foreign.Marshal.Pool.newPool_info:
         const Foreign.Marshal.Pool.newPool_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:17.097753094 UTC

[section ""data" . Foreign.Marshal.Pool.withPool1_closure" {
     Foreign.Marshal.Pool.withPool1_closure:
         const Foreign.Marshal.Pool.withPool1_info;
 },
 sat_s96qI_entry() //  [R1]
         { []
         }
     {offset
       c96NB: // global
           _s96qI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c96NC; else goto c96ND;
       c96ND: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c96NF; else goto c96NE;
       c96NF: // global
           HpAlloc = 16;
           goto c96NC;
       c96NC: // global
           R1 = _s96qI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96NE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s96qI::P64;
           _s96qw::P64 = P64[_s96qI::P64 + 16];
           _s96qG::P64 = P64[_s96qI::P64 + 24];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _s96qG::P64;
           R2 = Hp - 7;
           R1 = _s96qw::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s96qI_info" {
     sat_s96qI_info:
         const sat_s96qI_entry;
         const 2;
         const 18;
 },
 sat_s96qW_entry() //  [R1]
         { []
         }
     {offset
       c96NZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c96O0; else goto c96O1;
       c96O0: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c96O1: // global
           _s96qR::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp - 24] = block_c96NX_info;
           R2 = _s96qR::P64;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = P64[R1 + 23];
           Sp = Sp - 24;
           call Foreign.Marshal.Pool.freePool2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s96qW_info" {
     sat_s96qW_info:
         const sat_s96qW_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _c96NX() //  []
         { []
         }
     {offset
       c96NX: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96NX_info" {
     block_c96NX_info:
         const _c96NX;
         const 2;
         const 30;
 },
 sat_s96qX_entry() //  [R1, R2]
         { []
         }
     {offset
       c96O3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96O4; else goto c96O5;
       c96O4: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c96O5: // global
           I64[Sp - 16] = block_c96NN_info;
           _s96qG::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s96qG::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u96O9; else goto c96NO;
       u96O9: // global
           call _c96NN(R1) args: 0, res: 0, upd: 0;
       c96NO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s96qX_info" {
     sat_s96qX_info:
         const sat_s96qX_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c96NN() //  [R1]
         { []
         }
     {offset
       c96NN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c96O8; else goto c96O7;
       c96O8: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96O7: // global
           _s96qM::P64 = P64[R1 + 7];
           _s96qN::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s96qW_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s96qM::P64;
           P64[Hp] = _s96qN::P64;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96NN_info" {
     block_c96NN_info:
         const _c96NN;
         const 1;
         const 30;
 },
 sat_s96r8_entry() //  [R2]
         { []
         }
     {offset
       c96Oh: // global
           R1 = R2;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s96r8_info" {
     sat_s96r8_info:
         const sat_s96r8_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 sat_s96rs_entry() //  [R1]
         { []
         }
     {offset
       c96OJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c96OK; else goto c96OL;
       c96OK: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c96OL: // global
           _s96rn::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp - 24] = block_c96OH_info;
           R2 = _s96rn::P64;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = P64[R1 + 23];
           Sp = Sp - 24;
           call Foreign.Marshal.Pool.freePool2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s96rs_info" {
     sat_s96rs_info:
         const sat_s96rs_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _c96OH() //  []
         { []
         }
     {offset
       c96OH: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96OH_info" {
     block_c96OH_info:
         const _c96OH;
         const 2;
         const 30;
 },
 sat_s96rt_entry() //  [R1, R2]
         { []
         }
     {offset
       c96ON: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96OO; else goto c96OP;
       c96OO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c96OP: // global
           I64[Sp - 16] = block_c96Ox_info;
           _s96rc::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s96rc::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u96OT; else goto c96Oy;
       u96OT: // global
           call _c96Ox(R1) args: 0, res: 0, upd: 0;
       c96Oy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s96rt_info" {
     sat_s96rt_info:
         const sat_s96rt_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c96Ox() //  [R1]
         { []
         }
     {offset
       c96Ox: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c96OS; else goto c96OR;
       c96OS: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96OR: // global
           _s96ri::P64 = P64[R1 + 7];
           _s96rj::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s96rs_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s96ri::P64;
           P64[Hp] = _s96rj::P64;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96Ox_info" {
     block_c96Ox_info:
         const _c96Ox;
         const 1;
         const 30;
 },
 sat_s96re_entry() //  [R1]
         { []
         }
     {offset
       c96OZ: // global
           _s96re::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c96P0; else goto c96P1;
       c96P1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c96P3; else goto c96P2;
       c96P3: // global
           HpAlloc = 16;
           goto c96P0;
       c96P0: // global
           R1 = _s96re::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c96P2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s96re::P64;
           _s96qw::P64 = P64[_s96re::P64 + 16];
           _s96rc::P64 = P64[_s96re::P64 + 24];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _s96rc::P64;
           R2 = Hp - 7;
           R1 = _s96qw::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s96re_info" {
     sat_s96re_info:
         const sat_s96re_entry;
         const 2;
         const 18;
 },
 sat_s96rf_entry() //  [R1]
         { []
         }
     {offset
       c96P9: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s96rf_info" {
     sat_s96rf_info:
         const sat_s96rf_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s96rD_entry() //  [R1]
         { []
         }
     {offset
       c96Pg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c96Ph; else goto c96Pi;
       c96Ph: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c96Pi: // global
           I64[Sp - 16] = block_c96Oq_info;
           _s96qw::P64 = P64[R1 + 7];
           R1 = GHC.Types.[]_closure+1;
           P64[Sp - 8] = _s96qw::P64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s96rD_info" {
     sat_s96rD_info:
         const sat_s96rD_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _c96Oq() //  [R1]
         { []
         }
     {offset
       c96Oq: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c96Pl; else goto c96Pk;
       c96Pl: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96Pk: // global
           I64[Hp - 56] = sat_s96rt_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = sat_s96re_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s96rf_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c96Pc_info;
           R2 = Hp - 55;
           _s96rc::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 8] = _s96rc::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96Oq_info" {
     block_c96Oq_info:
         const _c96Oq;
         const 1;
         const 30;
 },
 _c96Pc() //  [R1]
         { []
         }
     {offset
       c96Pc: // global
           _s96rz::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp] = block_c96Pe_info;
           R2 = _s96rz::P64;
           P64[Sp + 8] = R1;
           call Foreign.Marshal.Pool.freePool2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96Pc_info" {
     block_c96Pc_info:
         const _c96Pc;
         const 1;
         const 30;
 },
 _c96Pe() //  []
         { []
         }
     {offset
       c96Pe: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96Pe_info" {
     block_c96Pe_info:
         const _c96Pe;
         const 1;
         const 30;
 },
 sat_s96rE_entry() //  [R2]
         { []
         }
     {offset
       c96Pu: // global
           R1 = R2;
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s96rE_info" {
     sat_s96rE_info:
         const sat_s96rE_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 Foreign.Marshal.Pool.withPool1_entry() //  [R2]
         { []
         }
     {offset
       c96PB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c96PC; else goto c96PD;
       c96PC: // global
           R2 = R2;
           R1 = Foreign.Marshal.Pool.withPool1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c96PD: // global
           I64[Sp - 16] = block_c96Nn_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.withPool1_info" {
     Foreign.Marshal.Pool.withPool1_info:
         const Foreign.Marshal.Pool.withPool1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c96Nn() //  [R1]
         { []
         }
     {offset
       c96Nn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c96PG; else goto c96PF;
       c96PG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c96PF: // global
           if (R1 == 0) goto c96Pz; else goto u96PU;
       c96Pz: // global
           I64[Hp - 8] = sat_s96rD_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u96PU: // global
           if (R1 == 1) goto c96PA; else goto c96Py;
       c96PA: // global
           I64[Hp - 8] = sat_s96rE_info;
           _s96qC::P64 = Hp - 6;
           goto s96qB;
       c96Py: // global
           I64[Hp - 8] = sat_s96r8_info;
           _s96qC::P64 = Hp - 6;
           goto s96qB;
       s96qB: // global
           I64[Sp - 8] = block_c96Nu_info;
           R1 = GHC.Types.[]_closure+1;
           P64[Sp] = _s96qC::P64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96Nn_info" {
     block_c96Nn_info:
         const _c96Nn;
         const 1;
         const 30;
 },
 _c96Nu() //  [R1]
         { []
         }
     {offset
       c96Nu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c96PN; else goto c96PM;
       c96PN: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96PM: // global
           I64[Hp - 24] = sat_s96qI_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           _s96qC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c96NG_info;
           R2 = Hp - 24;
           _s96qG::P64 = R1;
           R1 = _s96qC::P64;
           P64[Sp + 16] = _s96qG::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96Nu_info" {
     block_c96Nu_info:
         const _c96Nu;
         const 2;
         const 30;
 },
 _c96NG() //  [R1]
         { []
         }
     {offset
       c96NG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c96PQ; else goto c96PP;
       c96PQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c96PP: // global
           I64[Hp - 8] = sat_s96qX_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp] = block_c96PH_info;
           R2 = Hp - 7;
           R1 = R1;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96NG_info" {
     block_c96NG_info:
         const _c96NG;
         const 1;
         const 30;
 },
 _c96PH() //  [R1]
         { []
         }
     {offset
       c96PH: // global
           _s96r3::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp] = block_c96PJ_info;
           R2 = _s96r3::P64;
           P64[Sp + 8] = R1;
           call Foreign.Marshal.Pool.freePool2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c96PH_info" {
     block_c96PH_info:
         const _c96PH;
         const 1;
         const 30;
 },
 _c96PJ() //  []
         { []
         }
     {offset
       c96PJ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c96PJ_info" {
     block_c96PJ_info:
         const _c96PJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:17.137740124 UTC

[section ""data" . Foreign.Marshal.Pool.withPool_closure" {
     Foreign.Marshal.Pool.withPool_closure:
         const Foreign.Marshal.Pool.withPool_info;
 },
 Foreign.Marshal.Pool.withPool_entry() //  [R2]
         { []
         }
     {offset
       c96S2: // global
           R2 = R2;
           call Foreign.Marshal.Pool.withPool1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Pool.withPool_info" {
     Foreign.Marshal.Pool.withPool_info:
         const Foreign.Marshal.Pool.withPool_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:17.14086142 UTC

[section ""relreadonly" . S96tm_srt" {
     S96tm_srt:
         const Foreign.Marshal.Error.throwIf2_closure;
         const Foreign.Marshal.Alloc.realloc2_closure;
         const Foreign.Marshal.Pool.$wpooledReallocBytes_closure;
         const Foreign.Marshal.Pool.pooledRealloc1_closure;
         const GHC.Err.undefined_closure;
         const lvl11_r95nf_closure;
         const Foreign.Marshal.Pool.pooledReallocArray1_closure;
         const Foreign.Marshal.Pool.pooledReallocArray_closure;
         const Foreign.Marshal.Pool.pooledReallocArray2_closure;
         const lvl16_r95nk_closure;
         const Foreign.Marshal.Pool.pooledRealloc3_closure;
         const Foreign.Marshal.Pool.pooledRealloc_closure;
         const Foreign.Marshal.Alloc.malloc1_closure;
         const Foreign.Marshal.Pool.pooledMallocBytes1_closure;
         const lvl21_r95np_closure;
         const Foreign.Marshal.Pool.pooledMallocArray1_closure;
         const Foreign.Marshal.Pool.pooledMallocArray_closure;
         const Foreign.Marshal.Pool.$wpooledMallocArray0_closure;
         const Foreign.Marshal.Pool.pooledMallocArray2_closure;
         const lvl26_r95nu_closure;
         const Foreign.Marshal.Pool.pooledMalloc1_closure;
         const Foreign.Marshal.Pool.pooledMalloc_closure;
         const Foreign.Marshal.Pool.pooledNewArray2_closure;
         const Foreign.Marshal.Pool.pooledNewArray1_closure;
         const Foreign.Marshal.Pool.pooledNew1_closure;
 }]

