
==================== Raw Cmm ====================
2018-03-16 16:03:59.51212495 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:59.513374948 UTC

[section ""cstring" . lvl_r8PPf_bytes" {
     lvl_r8PPf_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.515888633 UTC

[section ""data" . lvl1_r8PPg_closure" {
     lvl1_r8PPg_closure:
         const lvl1_r8PPg_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r8PPg_entry() //  [R1]
         { []
         }
     {offset
       c8QA2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8QA3; else goto c8QA4;
       c8QA3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QA4: // global
           (_c8QzZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8QzZ::I64 == 0) goto c8QA1; else goto c8QA0;
       c8QA1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8QA0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8QzZ::I64;
           R2 = lvl_r8PPf_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r8PPg_info" {
     lvl1_r8PPg_info:
         const lvl1_r8PPg_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.520722443 UTC

[section ""cstring" . Foreign.Marshal.Array.$trModule4_bytes" {
     Foreign.Marshal.Array.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.523265391 UTC

[section ""data" . lvl2_r8PPh_closure" {
     lvl2_r8PPh_closure:
         const lvl2_r8PPh_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r8PPh_entry() //  [R1]
         { []
         }
     {offset
       c8QAj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8QAk; else goto c8QAl;
       c8QAk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QAl: // global
           (_c8QAg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8QAg::I64 == 0) goto c8QAi; else goto c8QAh;
       c8QAi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8QAh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8QAg::I64;
           R2 = Foreign.Marshal.Array.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_r8PPh_info" {
     lvl2_r8PPh_info:
         const lvl2_r8PPh_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.527146158 UTC

[section ""cstring" . Foreign.Marshal.Array.$trModule2_bytes" {
     Foreign.Marshal.Array.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,77,97,114,115,104,97,108,46,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.529608716 UTC

[section ""data" . lvl3_r8PPi_closure" {
     lvl3_r8PPi_closure:
         const lvl3_r8PPi_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r8PPi_entry() //  [R1]
         { []
         }
     {offset
       c8QAA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8QAB; else goto c8QAC;
       c8QAB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QAC: // global
           (_c8QAx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8QAx::I64 == 0) goto c8QAz; else goto c8QAy;
       c8QAz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8QAy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8QAx::I64;
           R2 = Foreign.Marshal.Array.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r8PPi_info" {
     lvl3_r8PPi_info:
         const lvl3_r8PPi_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.533509668 UTC

[section ""cstring" . lvl4_r8PPj_bytes" {
     lvl4_r8PPj_bytes:
         I8[] [46,47,70,111,114,101,105,103,110,47,77,97,114,115,104,97,108,47,65,114,114,97,121,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.535850099 UTC

[section ""data" . lvl5_r8PPk_closure" {
     lvl5_r8PPk_closure:
         const lvl5_r8PPk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r8PPk_entry() //  [R1]
         { []
         }
     {offset
       c8QAR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8QAS; else goto c8QAT;
       c8QAS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QAT: // global
           (_c8QAO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8QAO::I64 == 0) goto c8QAQ; else goto c8QAP;
       c8QAQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8QAP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8QAO::I64;
           R2 = lvl4_r8PPj_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r8PPk_info" {
     lvl5_r8PPk_info:
         const lvl5_r8PPk_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.539700076 UTC

[section ""data" . lvl6_r8PPl_closure" {
     lvl6_r8PPl_closure:
         const GHC.Types.I#_con_info;
         const 86;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.542127601 UTC

[section ""data" . lvl7_r8PPm_closure" {
     lvl7_r8PPm_closure:
         const GHC.Types.I#_con_info;
         const 25;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.543951808 UTC

[section ""data" . lvl8_r8PPn_closure" {
     lvl8_r8PPn_closure:
         const GHC.Types.I#_con_info;
         const 34;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.546080827 UTC

[section ""data" . lvl9_r8PPo_closure" {
     lvl9_r8PPo_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8PPh_closure;
         const lvl3_r8PPi_closure;
         const lvl5_r8PPk_closure;
         const lvl6_r8PPl_closure+1;
         const lvl7_r8PPm_closure+1;
         const lvl6_r8PPl_closure+1;
         const lvl8_r8PPn_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.548128731 UTC

[section ""data" . lvl10_r8PPp_closure" {
     lvl10_r8PPp_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8PPg_closure;
         const lvl9_r8PPo_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.55082045 UTC

[section ""data" . Foreign.Marshal.Array.mallocArray1_closure" {
     Foreign.Marshal.Array.mallocArray1_closure:
         const Foreign.Marshal.Array.mallocArray1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Array.mallocArray1_entry() //  [R1]
         { []
         }
     {offset
       c8QBc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8QBd; else goto c8QBe;
       c8QBd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QBe: // global
           (_c8QB9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8QB9::I64 == 0) goto c8QBb; else goto c8QBa;
       c8QBb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8QBa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8QB9::I64;
           R2 = lvl10_r8PPp_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.mallocArray1_info" {
     Foreign.Marshal.Array.mallocArray1_info:
         const Foreign.Marshal.Array.mallocArray1_entry;
         const 0;
         const 12884901909;
         const S8PWD_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.55772205 UTC

[section ""data" . Foreign.Marshal.Array.mallocArray_closure" {
     Foreign.Marshal.Array.mallocArray_closure:
         const Foreign.Marshal.Array.mallocArray_info;
         const 0;
 },
 lvl33_s8PPO_entry() //  [R1]
         { []
         }
     {offset
       c8QBu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8QBv; else goto c8QBw;
       c8QBv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QBw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.mallocArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_s8PPO_info" {
     lvl33_s8PPO_info:
         const lvl33_s8PPO_entry;
         const 1;
         const 4294967312;
         const S8PWD_srt+16;
 },
 sat_s8PQ3_entry() //  [R1, R2]
         { []
         }
     {offset
       c8QBF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8QBJ; else goto c8QBK;
       c8QBJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8QBK: // global
           I64[Sp - 16] = block_c8QBC_info;
           _s8PPO::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _s8PPO::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8QC9; else goto c8QBD;
       u8QC9: // global
           call _c8QBC(R1) args: 0, res: 0, upd: 0;
       c8QBD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8PQ3_info" {
     sat_s8PQ3_info:
         const sat_s8PQ3_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const S8PWD_srt+24;
 },
 _c8QBC() //  [R1]
         { []
         }
     {offset
       c8QBC: // global
           I64[Sp] = block_c8QBI_info;
           _s8PPS::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8PPS::I64;
           if (R1 & 7 != 0) goto u8QC8; else goto c8QBM;
       u8QC8: // global
           call _c8QBI(R1) args: 0, res: 0, upd: 0;
       c8QBM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QBC_info" {
     block_c8QBC_info:
         const _c8QBC;
         const 1;
         const 4294967326;
         const S8PWD_srt+24;
 },
 _c8QBI() //  [R1]
         { []
         }
     {offset
       c8QBI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8QBS; else goto c8QBR;
       c8QBS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8QBR: // global
           (_s8PQ0::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[Sp + 8] * I64[R1 + 7]);
           if (_s8PQ0::I64 == 0) goto c8QC7; else goto c8QC6;
       c8QC7: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8QC6: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8PQ0::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QBI_info" {
     block_c8QBI_info:
         const _c8QBI;
         const 65;
         const 4294967326;
         const S8PWD_srt+24;
 },
 Foreign.Marshal.Array.mallocArray_entry() //  [R2]
         { []
         }
     {offset
       c8QCa: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8QCe; else goto c8QCd;
       c8QCe: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Array.mallocArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8QCd: // global
           I64[Hp - 32] = lvl33_s8PPO_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s8PQ3_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.mallocArray_info" {
     Foreign.Marshal.Array.mallocArray_info:
         const Foreign.Marshal.Array.mallocArray_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S8PWD_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.570749493 UTC

[section ""data" . Foreign.Marshal.Array.$wmallocArray0_closure" {
     Foreign.Marshal.Array.$wmallocArray0_closure:
         const Foreign.Marshal.Array.$wmallocArray0_info;
         const 0;
 },
 Foreign.Marshal.Array.$wmallocArray0_entry() //  [R2, R3]
         { []
         }
     {offset
       c8QCK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8QCL; else goto c8QCM;
       c8QCL: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.$wmallocArray0_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QCM: // global
           I64[Sp - 16] = block_c8QCI_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.mallocArray1_closure;
           I64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.$wmallocArray0_info" {
     Foreign.Marshal.Array.$wmallocArray0_info:
         const Foreign.Marshal.Array.$wmallocArray0_entry;
         const 0;
         const 47244640270;
         const 12884901902;
         const S8PWD_srt+16;
 },
 _c8QCI() //  [R1]
         { []
         }
     {offset
       c8QCI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8QCR; else goto c8QCQ;
       c8QCR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8QCQ: // global
           (_s8PQf::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc((I64[Sp + 8] + 1) * I64[R1 + 7]);
           if (_s8PQf::I64 == 0) goto c8QD9; else goto c8QD8;
       c8QD9: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8QD8: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8PQf::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QCI_info" {
     block_c8QCI_info:
         const _c8QCI;
         const 65;
         const 4294967326;
         const S8PWD_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.577564079 UTC

[section ""data" . Foreign.Marshal.Array.mallocArray2_closure" {
     Foreign.Marshal.Array.mallocArray2_closure:
         const Foreign.Marshal.Array.mallocArray2_info;
         const 0;
 },
 Foreign.Marshal.Array.mallocArray2_entry() //  [R2, R3]
         { []
         }
     {offset
       c8QDt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8QDu; else goto c8QDv;
       c8QDu: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.mallocArray2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QDv: // global
           I64[Sp - 16] = block_c8QDq_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8QDz; else goto c8QDr;
       u8QDz: // global
           call _c8QDq(R1) args: 0, res: 0, upd: 0;
       c8QDr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.mallocArray2_info" {
     Foreign.Marshal.Array.mallocArray2_info:
         const Foreign.Marshal.Array.mallocArray2_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S8PWD_srt+40;
 },
 _c8QDq() //  [R1]
         { []
         }
     {offset
       c8QDq: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Foreign.Marshal.Array.$wmallocArray0_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QDq_info" {
     block_c8QDq_info:
         const _c8QDq;
         const 1;
         const 4294967326;
         const S8PWD_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.583234532 UTC

[section ""data" . Foreign.Marshal.Array.mallocArray0_closure" {
     Foreign.Marshal.Array.mallocArray0_closure:
         const Foreign.Marshal.Array.mallocArray0_info;
         const 0;
 },
 Foreign.Marshal.Array.mallocArray0_entry() //  [R2, R3]
         { []
         }
     {offset
       c8QDN: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.mallocArray2_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.mallocArray0_info" {
     Foreign.Marshal.Array.mallocArray0_info:
         const Foreign.Marshal.Array.mallocArray0_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8PWD_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.587097273 UTC

[section ""data" . lvl11_r8PPq_closure" {
     lvl11_r8PPq_closure:
         const GHC.Types.I#_con_info;
         const 100;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.589158724 UTC

[section ""data" . lvl12_r8PPr_closure" {
     lvl12_r8PPr_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8PPh_closure;
         const lvl3_r8PPi_closure;
         const lvl5_r8PPk_closure;
         const lvl11_r8PPq_closure+1;
         const lvl7_r8PPm_closure+1;
         const lvl11_r8PPq_closure+1;
         const lvl8_r8PPn_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.591773776 UTC

[section ""data" . lvl13_r8PPs_closure" {
     lvl13_r8PPs_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8PPg_closure;
         const lvl12_r8PPr_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.594295315 UTC

[section ""data" . Foreign.Marshal.Array.callocArray1_closure" {
     Foreign.Marshal.Array.callocArray1_closure:
         const Foreign.Marshal.Array.callocArray1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Array.callocArray1_entry() //  [R1]
         { []
         }
     {offset
       c8QE3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8QE4; else goto c8QE5;
       c8QE4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QE5: // global
           (_c8QE0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8QE0::I64 == 0) goto c8QE2; else goto c8QE1;
       c8QE2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8QE1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8QE0::I64;
           R2 = lvl13_r8PPs_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.callocArray1_info" {
     Foreign.Marshal.Array.callocArray1_info:
         const Foreign.Marshal.Array.callocArray1_entry;
         const 0;
         const 554050781205;
         const S8PWD_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.600614057 UTC

[section ""data" . Foreign.Marshal.Array.callocArray_closure" {
     Foreign.Marshal.Array.callocArray_closure:
         const Foreign.Marshal.Array.callocArray_info;
         const 0;
 },
 lvl33_s8PQo_entry() //  [R1]
         { []
         }
     {offset
       c8QEl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8QEm; else goto c8QEn;
       c8QEm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QEn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.callocArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_s8PQo_info" {
     lvl33_s8PQo_info:
         const lvl33_s8PQo_entry;
         const 1;
         const 4294967312;
         const S8PWD_srt+64;
 },
 sat_s8PQD_entry() //  [R1, R2]
         { []
         }
     {offset
       c8QEw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8QEA; else goto c8QEB;
       c8QEA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8QEB: // global
           I64[Sp - 16] = block_c8QEt_info;
           _s8PQo::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _s8PQo::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8QF1; else goto c8QEu;
       u8QF1: // global
           call _c8QEt(R1) args: 0, res: 0, upd: 0;
       c8QEu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8PQD_info" {
     sat_s8PQD_info:
         const sat_s8PQD_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const S8PWD_srt+72;
 },
 _c8QEt() //  [R1]
         { []
         }
     {offset
       c8QEt: // global
           I64[Sp] = block_c8QEz_info;
           _s8PQs::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8PQs::I64;
           if (R1 & 7 != 0) goto u8QF0; else goto c8QED;
       u8QF0: // global
           call _c8QEz(R1) args: 0, res: 0, upd: 0;
       c8QED: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QEt_info" {
     block_c8QEt_info:
         const _c8QEt;
         const 1;
         const 4294967326;
         const S8PWD_srt+72;
 },
 _c8QEz() //  [R1]
         { []
         }
     {offset
       c8QEz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8QEJ; else goto c8QEI;
       c8QEJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8QEI: // global
           (_s8PQA::I64) = call "ccall" arg hints:  [,]  result hints:  [PtrHint] calloc(1, I64[Sp + 8] * I64[R1 + 7]);
           if (_s8PQA::I64 == 0) goto c8QEZ; else goto c8QEY;
       c8QEZ: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.calloc1_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8QEY: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8PQA::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QEz_info" {
     block_c8QEz_info:
         const _c8QEz;
         const 65;
         const 4294967326;
         const S8PWD_srt+72;
 },
 Foreign.Marshal.Array.callocArray_entry() //  [R2]
         { []
         }
     {offset
       c8QF2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8QF6; else goto c8QF5;
       c8QF6: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Array.callocArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8QF5: // global
           I64[Hp - 32] = lvl33_s8PQo_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s8PQD_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.callocArray_info" {
     Foreign.Marshal.Array.callocArray_info:
         const Foreign.Marshal.Array.callocArray_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S8PWD_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.613535285 UTC

[section ""data" . Foreign.Marshal.Array.$wcallocArray0_closure" {
     Foreign.Marshal.Array.$wcallocArray0_closure:
         const Foreign.Marshal.Array.$wcallocArray0_info;
         const 0;
 },
 Foreign.Marshal.Array.$wcallocArray0_entry() //  [R2, R3]
         { []
         }
     {offset
       c8QFC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8QFD; else goto c8QFE;
       c8QFD: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.$wcallocArray0_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QFE: // global
           I64[Sp - 16] = block_c8QFA_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.callocArray1_closure;
           I64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.$wcallocArray0_info" {
     Foreign.Marshal.Array.$wcallocArray0_info:
         const Foreign.Marshal.Array.$wcallocArray0_entry;
         const 0;
         const 47244640270;
         const 12884901902;
         const S8PWD_srt+64;
 },
 _c8QFA() //  [R1]
         { []
         }
     {offset
       c8QFA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8QFJ; else goto c8QFI;
       c8QFJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8QFI: // global
           (_s8PQP::I64) = call "ccall" arg hints:  [,]  result hints:  [PtrHint] calloc(1, (I64[Sp + 8] + 1) * I64[R1 + 7]);
           if (_s8PQP::I64 == 0) goto c8QG2; else goto c8QG1;
       c8QG2: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.calloc1_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8QG1: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8PQP::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QFA_info" {
     block_c8QFA_info:
         const _c8QFA;
         const 65;
         const 4294967326;
         const S8PWD_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.620309912 UTC

[section ""data" . Foreign.Marshal.Array.callocArray2_closure" {
     Foreign.Marshal.Array.callocArray2_closure:
         const Foreign.Marshal.Array.callocArray2_info;
         const 0;
 },
 Foreign.Marshal.Array.callocArray2_entry() //  [R2, R3]
         { []
         }
     {offset
       c8QGm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8QGn; else goto c8QGo;
       c8QGn: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.callocArray2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QGo: // global
           I64[Sp - 16] = block_c8QGj_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8QGs; else goto c8QGk;
       u8QGs: // global
           call _c8QGj(R1) args: 0, res: 0, upd: 0;
       c8QGk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.callocArray2_info" {
     Foreign.Marshal.Array.callocArray2_info:
         const Foreign.Marshal.Array.callocArray2_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S8PWD_srt+88;
 },
 _c8QGj() //  [R1]
         { []
         }
     {offset
       c8QGj: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Foreign.Marshal.Array.$wcallocArray0_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QGj_info" {
     block_c8QGj_info:
         const _c8QGj;
         const 1;
         const 4294967326;
         const S8PWD_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.625612247 UTC

[section ""data" . Foreign.Marshal.Array.callocArray0_closure" {
     Foreign.Marshal.Array.callocArray0_closure:
         const Foreign.Marshal.Array.callocArray0_info;
         const 0;
 },
 Foreign.Marshal.Array.callocArray0_entry() //  [R2, R3]
         { []
         }
     {offset
       c8QGG: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.callocArray2_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.callocArray0_info" {
     Foreign.Marshal.Array.callocArray0_info:
         const Foreign.Marshal.Array.callocArray0_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8PWD_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.629008726 UTC

[section ""data" . lvl14_r8PPt_closure" {
     lvl14_r8PPt_closure:
         const GHC.Types.I#_con_info;
         const 115;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.63127297 UTC

[section ""data" . lvl15_r8PPu_closure" {
     lvl15_r8PPu_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8PPh_closure;
         const lvl3_r8PPi_closure;
         const lvl5_r8PPk_closure;
         const lvl14_r8PPt_closure+1;
         const lvl7_r8PPm_closure+1;
         const lvl14_r8PPt_closure+1;
         const lvl8_r8PPn_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.636114985 UTC

[section ""data" . lvl16_r8PPv_closure" {
     lvl16_r8PPv_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8PPg_closure;
         const lvl15_r8PPu_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.640476401 UTC

[section ""data" . Foreign.Marshal.Array.allocaArray1_closure" {
     Foreign.Marshal.Array.allocaArray1_closure:
         const Foreign.Marshal.Array.allocaArray1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Array.allocaArray1_entry() //  [R1]
         { []
         }
     {offset
       c8QGW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8QGX; else goto c8QGY;
       c8QGX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QGY: // global
           (_c8QGT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8QGT::I64 == 0) goto c8QGV; else goto c8QGU;
       c8QGV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8QGU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8QGT::I64;
           R2 = lvl16_r8PPv_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.allocaArray1_info" {
     Foreign.Marshal.Array.allocaArray1_info:
         const Foreign.Marshal.Array.allocaArray1_entry;
         const 0;
         const 35188667056149;
         const S8PWD_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.650189544 UTC

[section ""data" . Foreign.Marshal.Array.allocaArray_closure" {
     Foreign.Marshal.Array.allocaArray_closure:
         const Foreign.Marshal.Array.allocaArray_info;
         const 0;
 },
 lvl33_s8PQY_entry() //  [R1]
         { []
         }
     {offset
       c8QHe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8QHf; else goto c8QHg;
       c8QHf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QHg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.allocaArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_s8PQY_info" {
     lvl33_s8PQY_info:
         const lvl33_s8PQY_entry;
         const 1;
         const 4294967312;
         const S8PWD_srt+112;
 },
 ds1_s8PQZ_entry() //  [R1]
         { []
         }
     {offset
       c8QHl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8QHm; else goto c8QHn;
       c8QHm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QHn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.allocaArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.alignment_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s8PQZ_info" {
     ds1_s8PQZ_info:
         const ds1_s8PQZ_entry;
         const 1;
         const 4294967312;
         const S8PWD_srt+112;
 },
 sat_s8PRm_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c8QHw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8QHF; else goto c8QHG;
       c8QHF: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QHG: // global
           I64[Sp - 32] = block_c8QHt_info;
           _s8PQY::P64 = P64[R1 + 5];
           _s8PQZ::P64 = P64[R1 + 13];
           R1 = R2;
           P64[Sp - 24] = _s8PQY::P64;
           P64[Sp - 16] = _s8PQZ::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8QI5; else goto c8QHu;
       u8QI5: // global
           call _c8QHt(R1) args: 0, res: 0, upd: 0;
       c8QHu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8PRm_info" {
     sat_s8PRm_info:
         const sat_s8PRm_entry;
         const 2;
         const 11;
         const 12884901903;
 },
 _c8QHt() //  [R1]
         { []
         }
     {offset
       c8QHt: // global
           I64[Sp] = block_c8QHz_info;
           _s8PR4::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8PR4::I64;
           if (R1 & 7 != 0) goto u8QI4; else goto c8QHA;
       u8QI4: // global
           call _c8QHz(R1) args: 0, res: 0, upd: 0;
       c8QHA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QHt_info" {
     block_c8QHt_info:
         const _c8QHt;
         const 3;
         const 30;
 },
 _c8QHz() //  [R1]
         { []
         }
     {offset
       c8QHz: // global
           I64[Sp] = block_c8QHE_info;
           _s8PR6::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8PR6::I64;
           if (R1 & 7 != 0) goto u8QI6; else goto c8QHJ;
       u8QI6: // global
           call _c8QHE(R1) args: 0, res: 0, upd: 0;
       c8QHJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QHz_info" {
     block_c8QHz_info:
         const _c8QHz;
         const 67;
         const 30;
 },
 _c8QHE() //  [R1]
         { []
         }
     {offset
       c8QHE: // global
           _s8PR9::I64 = I64[Sp + 8] * I64[Sp + 16];
           I64[Sp + 16] = block_c8QHR_info;
           R2 = I64[R1 + 7];
           R1 = _s8PR9::I64;
           Sp = Sp + 16;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QHE_info" {
     block_c8QHE_info:
         const _c8QHE;
         const 195;
         const 30;
 },
 _c8QHR() //  [R1]
         { []
         }
     {offset
       c8QHR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8QHV; else goto c8QHU;
       c8QHV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8QHU: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           P64[Hp] = R1 + 16;
           I64[Sp] = block_c8QI0_info;
           R2 = Hp - 7;
           _s8PRf::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8PRf::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QHR_info" {
     block_c8QHR_info:
         const _c8QHR;
         const 1;
         const 30;
 },
 _c8QI0() //  [R1]
         { []
         }
     {offset
       c8QI0: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QI0_info" {
     block_c8QI0_info:
         const _c8QI0;
         const 1;
         const 30;
 },
 Foreign.Marshal.Array.allocaArray_entry() //  [R2]
         { []
         }
     {offset
       c8QI7: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c8QIb; else goto c8QIa;
       c8QIb: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Foreign.Marshal.Array.allocaArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8QIa: // global
           I64[Hp - 64] = lvl33_s8PQY_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = ds1_s8PQZ_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s8PRm_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 13;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.allocaArray_info" {
     Foreign.Marshal.Array.allocaArray_info:
         const Foreign.Marshal.Array.allocaArray_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8PWD_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.671185538 UTC

[section ""data" . Foreign.Marshal.Array.allocaArray0_closure" {
     Foreign.Marshal.Array.allocaArray0_closure:
         const Foreign.Marshal.Array.allocaArray0_info;
         const 0;
 },
 sat_s8PRs_entry() //  [R1]
         { []
         }
     {offset
       c8QJ1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8QJ8; else goto c8QJ9;
       c8QJ8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QJ9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8QIY_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8QJd; else goto c8QIZ;
       u8QJd: // global
           call _c8QIY(R1) args: 0, res: 0, upd: 0;
       c8QIZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8PRs_info" {
     sat_s8PRs_info:
         const sat_s8PRs_entry;
         const 1;
         const 16;
 },
 _c8QIY() //  [R1]
         { []
         }
     {offset
       c8QIY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8QJc; else goto c8QJb;
       c8QJc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8QJb: // global
           _s8PRr::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8PRr::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8QIY_info" {
     block_c8QIY_info:
         const _c8QIY;
         const 0;
         const 30;
 },
 Foreign.Marshal.Array.allocaArray0_entry() //  [R2, R3]
         { []
         }
     {offset
       c8QJe: // global
           _s8PRo::P64 = R3;
           _s8PRn::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c8QJf; else goto c8QJg;
       c8QJg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8QJi; else goto c8QJh;
       c8QJi: // global
           HpAlloc = 24;
           goto c8QJf;
       c8QJf: // global
           R3 = _s8PRo::P64;
           R2 = _s8PRn::P64;
           R1 = Foreign.Marshal.Array.allocaArray0_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QJh: // global
           I64[Hp - 16] = sat_s8PRs_info;
           P64[Hp] = _s8PRo::P64;
           R2 = _s8PRn::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Foreign.Marshal.Array.allocaArray_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.allocaArray0_info" {
     Foreign.Marshal.Array.allocaArray0_info:
         const Foreign.Marshal.Array.allocaArray0_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S8PWD_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.67842463 UTC

[section ""data" . lvl17_r8PPw_closure" {
     lvl17_r8PPw_closure:
         const GHC.Types.I#_con_info;
         const 133;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.680237585 UTC

[section ""data" . lvl18_r8PPx_closure" {
     lvl18_r8PPx_closure:
         const GHC.Types.I#_con_info;
         const 27;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.682086477 UTC

[section ""data" . lvl19_r8PPy_closure" {
     lvl19_r8PPy_closure:
         const GHC.Types.I#_con_info;
         const 36;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.683985559 UTC

[section ""data" . lvl20_r8PPz_closure" {
     lvl20_r8PPz_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8PPh_closure;
         const lvl3_r8PPi_closure;
         const lvl5_r8PPk_closure;
         const lvl17_r8PPw_closure+1;
         const lvl18_r8PPx_closure+1;
         const lvl17_r8PPw_closure+1;
         const lvl19_r8PPy_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.686324281 UTC

[section ""data" . lvl21_r8PPA_closure" {
     lvl21_r8PPA_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8PPg_closure;
         const lvl20_r8PPz_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.689014635 UTC

[section ""data" . Foreign.Marshal.Array.reallocArray1_closure" {
     Foreign.Marshal.Array.reallocArray1_closure:
         const Foreign.Marshal.Array.reallocArray1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Array.reallocArray1_entry() //  [R1]
         { []
         }
     {offset
       c8QJK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8QJL; else goto c8QJM;
       c8QJL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QJM: // global
           (_c8QJH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8QJH::I64 == 0) goto c8QJJ; else goto c8QJI;
       c8QJJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8QJI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8QJH::I64;
           R2 = lvl21_r8PPA_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.reallocArray1_info" {
     Foreign.Marshal.Array.reallocArray1_info:
         const Foreign.Marshal.Array.reallocArray1_entry;
         const 0;
         const 562954248388629;
         const S8PWD_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.697918773 UTC

[section ""data" . Foreign.Marshal.Array.reallocArray_closure" {
     Foreign.Marshal.Array.reallocArray_closure:
         const Foreign.Marshal.Array.reallocArray_info;
         const 0;
 },
 lvl33_s8PRu_entry() //  [R1]
         { []
         }
     {offset
       c8QK2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8QK3; else goto c8QK4;
       c8QK3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QK4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.reallocArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_s8PRu_info" {
     lvl33_s8PRu_info:
         const lvl33_s8PRu_entry;
         const 1;
         const 4294967312;
         const S8PWD_srt+144;
 },
 sat_s8PRP_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c8QKd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8QKm; else goto c8QKn;
       c8QKm: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QKn: // global
           I64[Sp - 24] = block_c8QKa_info;
           _s8PRu::P64 = P64[R1 + 5];
           R1 = R3;
           P64[Sp - 16] = _s8PRu::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8QL4; else goto c8QKb;
       u8QL4: // global
           call _c8QKa(R1) args: 0, res: 0, upd: 0;
       c8QKb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8PRP_info" {
     sat_s8PRP_info:
         const sat_s8PRP_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const S8PWD_srt+152;
 },
 _c8QKa() //  [R1]
         { []
         }
     {offset
       c8QKa: // global
           I64[Sp] = block_c8QKg_info;
           _s8PRz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8PRz::I64;
           if (R1 & 7 != 0) goto u8QL3; else goto c8QKh;
       u8QL3: // global
           call _c8QKg(R1) args: 0, res: 0, upd: 0;
       c8QKh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QKa_info" {
     block_c8QKa_info:
         const _c8QKa;
         const 2;
         const 4294967326;
         const S8PWD_srt+152;
 },
 _c8QKg() //  [R1]
         { []
         }
     {offset
       c8QKg: // global
           I64[Sp] = block_c8QKl_info;
           _s8PRB::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8PRB::I64;
           if (R1 & 7 != 0) goto u8QL5; else goto c8QKq;
       u8QL5: // global
           call _c8QKl(R1) args: 0, res: 0, upd: 0;
       c8QKq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QKg_info" {
     block_c8QKg_info:
         const _c8QKg;
         const 66;
         const 4294967326;
         const S8PWD_srt+152;
 },
 _c8QKl() //  [R1]
         { []
         }
     {offset
       c8QKl: // global
           _s8PRD::I64 = I64[R1 + 7];
           _s8PRE::I64 = I64[Sp + 8] * I64[Sp + 16];
           if (_s8PRE::I64 != 0) goto u8QL1; else goto c8QKV;
       u8QL1: // global
           I64[Sp + 8] = _s8PRE::I64;
           I64[Sp + 16] = _s8PRD::I64;
           Sp = Sp + 8;
           call _c8QKB() args: 0, res: 0, upd: 0;
       c8QKV: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(_s8PRD::I64);
           R1 = GHC.Ptr.nullPtr_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QKl_info" {
     block_c8QKl_info:
         const _c8QKl;
         const 194;
         const 4294967326;
         const S8PWD_srt+152;
 },
 _c8QKB() //  []
         { []
         }
     {offset
       c8QKB: // global
           Hp = Hp + 16;
           _s8PRE::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c8QKF; else goto c8QKE;
       c8QKF: // global
           HpAlloc = 16;
           I64[Sp] = block_c8QKy_info;
           R1 = _s8PRE::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c8QKE: // global
           (_s8PRJ::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] realloc(I64[Sp + 8], _s8PRE::I64);
           if (_s8PRJ::I64 == 0) goto c8QKS; else goto c8QKR;
       c8QKS: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.realloc2_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8QKR: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8PRJ::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8QKy() //  [R1]
         { []
         }
     {offset
       c8QKy: // global
           I64[Sp] = R1;
           call _c8QKB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8QKy_info" {
     block_c8QKy_info:
         const _c8QKy;
         const 65;
         const 4294967326;
         const S8PWD_srt+152;
 },
 Foreign.Marshal.Array.reallocArray_entry() //  [R2]
         { []
         }
     {offset
       c8QL8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8QLc; else goto c8QLb;
       c8QLc: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Array.reallocArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8QLb: // global
           I64[Hp - 32] = lvl33_s8PRu_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s8PRP_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.reallocArray_info" {
     Foreign.Marshal.Array.reallocArray_info:
         const Foreign.Marshal.Array.reallocArray_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S8PWD_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.715625526 UTC

[section ""data" . Foreign.Marshal.Array.$wreallocArray0_closure" {
     Foreign.Marshal.Array.$wreallocArray0_closure:
         const Foreign.Marshal.Array.$wreallocArray0_info;
         const 0;
 },
 Foreign.Marshal.Array.$wreallocArray0_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8QLR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c8QLS; else goto c8QLT;
       c8QLS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.$wreallocArray0_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QLT: // global
           I64[Sp - 24] = block_c8QLP_info;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = Foreign.Marshal.Array.reallocArray1_closure;
           I64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 40;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.$wreallocArray0_info" {
     Foreign.Marshal.Array.$wreallocArray0_info:
         const Foreign.Marshal.Array.$wreallocArray0_entry;
         const 0;
         const 47244640270;
         const 17179869204;
         const S8PWD_srt+144;
 },
 _c8QLP() //  [R1]
         { []
         }
     {offset
       c8QLP: // global
           _s8PRX::I64 = (I64[Sp + 16] + 1) * I64[R1 + 7];
           if (_s8PRX::I64 != 0) goto u8QMw; else goto c8QMq;
       u8QMw: // global
           I64[Sp + 16] = _s8PRX::I64;
           Sp = Sp + 8;
           call _c8QM6() args: 0, res: 0, upd: 0;
       c8QMq: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(I64[Sp + 8]);
           R1 = GHC.Ptr.nullPtr_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QLP_info" {
     block_c8QLP_info:
         const _c8QLP;
         const 194;
         const 4294967326;
         const S8PWD_srt+152;
 },
 _c8QM6() //  []
         { []
         }
     {offset
       c8QM6: // global
           Hp = Hp + 16;
           _s8PRX::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c8QMa; else goto c8QM9;
       c8QMa: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c8QM3_info;
           R1 = _s8PRX::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c8QM9: // global
           (_s8PS2::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] realloc(I64[Sp], _s8PRX::I64);
           if (_s8PS2::I64 == 0) goto c8QMn; else goto c8QMm;
       c8QMn: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.realloc2_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8QMm: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8PS2::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8QM3() //  [R1]
         { []
         }
     {offset
       c8QM3: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c8QM6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8QM3_info" {
     block_c8QM3_info:
         const _c8QM3;
         const 194;
         const 4294967326;
         const S8PWD_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.726297018 UTC

[section ""data" . Foreign.Marshal.Array.reallocArray2_closure" {
     Foreign.Marshal.Array.reallocArray2_closure:
         const Foreign.Marshal.Array.reallocArray2_info;
         const 0;
 },
 Foreign.Marshal.Array.reallocArray2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8QMZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8QN3; else goto c8QN4;
       c8QN3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.reallocArray2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QN4: // global
           I64[Sp - 24] = block_c8QMW_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8QNc; else goto c8QMX;
       u8QNc: // global
           call _c8QMW(R1) args: 0, res: 0, upd: 0;
       c8QMX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.reallocArray2_info" {
     Foreign.Marshal.Array.reallocArray2_info:
         const Foreign.Marshal.Array.reallocArray2_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S8PWD_srt+168;
 },
 _c8QMW() //  [R1]
         { []
         }
     {offset
       c8QMW: // global
           I64[Sp] = block_c8QN2_info;
           _s8PSd::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8PSd::I64;
           if (R1 & 7 != 0) goto u8QNb; else goto c8QN6;
       u8QNb: // global
           call _c8QN2(R1) args: 0, res: 0, upd: 0;
       c8QN6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QMW_info" {
     block_c8QMW_info:
         const _c8QMW;
         const 2;
         const 4294967326;
         const S8PWD_srt+168;
 },
 _c8QN2() //  [R1]
         { []
         }
     {offset
       c8QN2: // global
           R4 = I64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Foreign.Marshal.Array.$wreallocArray0_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QN2_info" {
     block_c8QN2_info:
         const _c8QN2;
         const 130;
         const 4294967326;
         const S8PWD_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.733416307 UTC

[section ""data" . Foreign.Marshal.Array.reallocArray0_closure" {
     Foreign.Marshal.Array.reallocArray0_closure:
         const Foreign.Marshal.Array.reallocArray0_info;
         const 0;
 },
 Foreign.Marshal.Array.reallocArray0_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8QNu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.reallocArray2_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.reallocArray0_info" {
     Foreign.Marshal.Array.reallocArray0_info:
         const Foreign.Marshal.Array.reallocArray0_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S8PWD_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.736584859 UTC

[section ""data" . Foreign.Marshal.Array.lengthArray2_closure" {
     Foreign.Marshal.Array.lengthArray2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.740854735 UTC

[section ""data" . Foreign.Marshal.Array.$wpeekArray_closure" {
     Foreign.Marshal.Array.$wpeekArray_closure:
         const Foreign.Marshal.Array.$wpeekArray_info;
 },
 Foreign.Marshal.Array.$wpeekArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8QO2: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8QO3; else goto c8QO4;
       c8QO3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.$wpeekArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QO4: // global
           if (%MO_S_Gt_W64(R3, 0)) goto c8QO0; else goto c8QO1;
       c8QO0: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R3 - 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call _c8QNQ() args: 0, res: 0, upd: 0;
       c8QO1: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.$wpeekArray_info" {
     Foreign.Marshal.Array.$wpeekArray_info:
         const Foreign.Marshal.Array.$wpeekArray_entry;
         const 0;
         const 14;
         const 17179869205;
 },
 _c8QNQ() //  []
         { []
         }
     {offset
       c8QNQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8QOh; else goto c8QOg;
       c8QOh: // global
           HpAlloc = 16;
           I64[Sp] = block_c8QNQ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c8QOg: // global
           _s8PSg::P64 = P64[Sp + 8];
           _s8PSi::P64 = P64[Sp + 16];
           _s8PSw::I64 = I64[Sp + 24];
           if (_s8PSw::I64 != 0) goto c8QOj; else goto c8QOn;
       c8QOj: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8PSw::I64;
           I64[Sp] = block_c8QNW_info;
           R2 = _s8PSg::P64;
           I64[Sp - 24] = stg_ap_ppv_info;
           P64[Sp - 16] = _s8PSi::P64;
           P64[Sp - 8] = Hp - 7;
           I64[Sp + 24] = _s8PSw::I64;
           Sp = Sp - 24;
           call Foreign.Storable.peekElemOff_entry(R2) args: 32, res: 8, upd: 8;
       c8QOn: // global
           Hp = Hp - 16;
           I64[Sp + 24] = block_c8QO8_info;
           R2 = _s8PSg::P64;
           I64[Sp] = stg_ap_ppv_info;
           P64[Sp + 8] = _s8PSi::P64;
           P64[Sp + 16] = Foreign.Marshal.Array.lengthArray2_closure+1;
           P64[Sp + 32] = P64[Sp + 32];
           call Foreign.Storable.peekElemOff_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QNQ_info" {
     block_c8QNQ_info:
         const _c8QNQ;
         const 260;
         const 30;
 },
 _c8QNW() //  [R1]
         { []
         }
     {offset
       c8QNW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8QOm; else goto c8QOl;
       c8QOm: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8QOl: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 24] = I64[Sp + 24] - 1;
           P64[Sp + 32] = Hp - 14;
           call _c8QNQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8QNW_info" {
     block_c8QNW_info:
         const _c8QNW;
         const 260;
         const 30;
 },
 _c8QO8() //  [R1]
         { []
         }
     {offset
       c8QO8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8QOe; else goto c8QOd;
       c8QOe: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8QOd: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QO8_info" {
     block_c8QO8_info:
         const _c8QO8;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.751146181 UTC

[section ""data" . Foreign.Marshal.Array.peekArray1_closure" {
     Foreign.Marshal.Array.peekArray1_closure:
         const Foreign.Marshal.Array.peekArray1_info;
 },
 Foreign.Marshal.Array.peekArray1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8QOW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8QOX; else goto c8QOY;
       c8QOX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.peekArray1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QOY: // global
           I64[Sp - 24] = block_c8QOT_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8QP2; else goto c8QOU;
       u8QP2: // global
           call _c8QOT(R1) args: 0, res: 0, upd: 0;
       c8QOU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.peekArray1_info" {
     Foreign.Marshal.Array.peekArray1_info:
         const Foreign.Marshal.Array.peekArray1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c8QOT() //  [R1]
         { []
         }
     {offset
       c8QOT: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Foreign.Marshal.Array.$wpeekArray_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QOT_info" {
     block_c8QOT_info:
         const _c8QOT;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.756772721 UTC

[section ""data" . Foreign.Marshal.Array.peekArray_closure" {
     Foreign.Marshal.Array.peekArray_closure:
         const Foreign.Marshal.Array.peekArray_info;
 },
 Foreign.Marshal.Array.peekArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8QPg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.peekArray1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.peekArray_info" {
     Foreign.Marshal.Array.peekArray_info:
         const Foreign.Marshal.Array.peekArray_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.762235694 UTC

[section ""data" . Foreign.Marshal.Array.newArray2_closure" {
     Foreign.Marshal.Array.newArray2_closure:
         const Foreign.Marshal.Array.newArray2_info;
 },
 Foreign.Marshal.Array.newArray2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8QPt: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c8QPu; else goto c8QPv;
       c8QPu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.newArray2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QPv: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           I64[Sp - 8] = 0;
           Sp = Sp - 32;
           call _c8QPw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.newArray2_info" {
     Foreign.Marshal.Array.newArray2_info:
         const Foreign.Marshal.Array.newArray2_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c8QPw() //  []
         { []
         }
     {offset
       c8QPw: // global
           I64[Sp - 8] = block_c8QPz_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8QPX; else goto c8QPB;
       u8QPX: // global
           call _c8QPz(R1) args: 0, res: 0, upd: 0;
       c8QPB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8QPz() //  [R1]
         { []
         }
     {offset
       c8QPz: // global
           if (R1 & 7 == 1) goto c8QPH; else goto c8QPM;
       c8QPH: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8QPM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8QPP; else goto c8QPO;
       c8QPP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8QPO: // global
           _s8PST::P64 = P64[R1 + 6];
           _s8PSU::P64 = P64[R1 + 14];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 32];
           I64[Sp] = block_c8QPL_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_pppv_info;
           P64[Sp - 24] = P64[Sp + 16];
           P64[Sp - 16] = Hp - 7;
           P64[Sp - 8] = _s8PST::P64;
           P64[Sp + 24] = _s8PSU::P64;
           Sp = Sp - 32;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QPz_info" {
     block_c8QPz_info:
         const _c8QPz;
         const 772;
         const 30;
 },
 _c8QPL() //  []
         { []
         }
     {offset
       c8QPL: // global
           P64[Sp + 24] = P64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32] + 1;
           Sp = Sp + 8;
           call _c8QPw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8QPL_info" {
     block_c8QPL_info:
         const _c8QPL;
         const 516;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.771513017 UTC

[section ""data" . Foreign.Marshal.Array.pokeArray_closure" {
     Foreign.Marshal.Array.pokeArray_closure:
         const Foreign.Marshal.Array.pokeArray_info;
 },
 Foreign.Marshal.Array.pokeArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8QQo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.newArray2_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.pokeArray_info" {
     Foreign.Marshal.Array.pokeArray_info:
         const Foreign.Marshal.Array.pokeArray_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.777321816 UTC

[section ""data" . Foreign.Marshal.Array.withArrayLen_closure" {
     Foreign.Marshal.Array.withArrayLen_closure:
         const Foreign.Marshal.Array.withArrayLen_info;
         const 0;
 },
 len_s8PT3_entry() //  [R1]
         { []
         }
     {offset
       c8QQF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8QQJ; else goto c8QQK;
       c8QQJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QQK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8QQD_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . len_s8PT3_info" {
     len_s8PT3_info:
         const len_s8PT3_entry;
         const 1;
         const 16;
 },
 _c8QQD() //  [R1]
         { []
         }
     {offset
       c8QQD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8QQN; else goto c8QQM;
       c8QQN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c8QQM: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8QQD_info" {
     block_c8QQD_info:
         const _c8QQD;
         const 0;
         const 30;
 },
 sat_s8PTa_entry() //  [R1, R2]
         { []
         }
     {offset
       c8QQV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8QQW; else goto c8QQX;
       c8QQW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8QQX: // global
           I64[Sp - 32] = block_c8QQT_info;
           R4 = P64[R1 + 14];
           R3 = R2;
           _s8PT5::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 22];
           P64[Sp - 16] = P64[R1 + 30];
           P64[Sp - 8] = _s8PT5::P64;
           Sp = Sp - 32;
           call Foreign.Marshal.Array.newArray2_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8PTa_info" {
     sat_s8PTa_info:
         const sat_s8PTa_entry;
         const 4;
         const 8;
         const 8589934597;
 },
 _c8QQT() //  []
         { []
         }
     {offset
       c8QQT: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QQT_info" {
     block_c8QQT_info:
         const _c8QQT;
         const 3;
         const 30;
 },
 Foreign.Marshal.Array.withArrayLen_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8QQZ: // global
           _s8PT2::P64 = R4;
           _s8PT1::P64 = R3;
           _s8PT0::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c8QR0; else goto c8QR1;
       c8QR1: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c8QR3; else goto c8QR2;
       c8QR3: // global
           HpAlloc = 64;
           goto c8QR0;
       c8QR0: // global
           R4 = _s8PT2::P64;
           R3 = _s8PT1::P64;
           R2 = _s8PT0::P64;
           R1 = Foreign.Marshal.Array.withArrayLen_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QR2: // global
           I64[Hp - 56] = len_s8PT3_info;
           P64[Hp - 40] = _s8PT1::P64;
           I64[Hp - 32] = sat_s8PTa_info;
           P64[Hp - 24] = _s8PT0::P64;
           P64[Hp - 16] = _s8PT1::P64;
           P64[Hp - 8] = _s8PT2::P64;
           _c8QQz::P64 = Hp - 56;
           P64[Hp] = _c8QQz::P64;
           R2 = _s8PT0::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _c8QQz::P64;
           P64[Sp - 8] = Hp - 30;
           Sp = Sp - 24;
           call Foreign.Marshal.Array.allocaArray_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.withArrayLen_info" {
     Foreign.Marshal.Array.withArrayLen_info:
         const Foreign.Marshal.Array.withArrayLen_entry;
         const 0;
         const 1103806595086;
         const 12884901911;
         const S8PWD_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.789946387 UTC

[section ""data" . Foreign.Marshal.Array.withArray_closure" {
     Foreign.Marshal.Array.withArray_closure:
         const Foreign.Marshal.Array.withArray_info;
         const 0;
 },
 sat_s8PTl_entry() //  [R1, R2]
         { []
         }
     {offset
       c8QRC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8QRD; else goto c8QRE;
       c8QRD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8QRE: // global
           I64[Sp - 24] = block_c8QRA_info;
           R4 = P64[R1 + 14];
           R3 = R2;
           _s8PTg::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = P64[R1 + 22];
           P64[Sp - 8] = _s8PTg::P64;
           Sp = Sp - 24;
           call Foreign.Marshal.Array.newArray2_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8PTl_info" {
     sat_s8PTl_info:
         const sat_s8PTl_entry;
         const 3;
         const 8;
         const 8589934597;
 },
 _c8QRA() //  []
         { []
         }
     {offset
       c8QRA: // global
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QRA_info" {
     block_c8QRA_info:
         const _c8QRA;
         const 2;
         const 30;
 },
 sat_s8PTf_entry() //  [R1]
         { []
         }
     {offset
       c8QRM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8QRQ; else goto c8QRR;
       c8QRQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QRR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8QRK_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8PTf_info" {
     sat_s8PTf_info:
         const sat_s8PTf_entry;
         const 1;
         const 16;
 },
 _c8QRK() //  [R1]
         { []
         }
     {offset
       c8QRK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8QRU; else goto c8QRT;
       c8QRU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c8QRT: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8QRK_info" {
     block_c8QRK_info:
         const _c8QRK;
         const 0;
         const 30;
 },
 Foreign.Marshal.Array.withArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8QRV: // global
           _s8PTd::P64 = R4;
           _s8PTc::P64 = R3;
           _s8PTb::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c8QRW; else goto c8QRX;
       c8QRX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c8QRZ; else goto c8QRY;
       c8QRZ: // global
           HpAlloc = 56;
           goto c8QRW;
       c8QRW: // global
           R4 = _s8PTd::P64;
           R3 = _s8PTc::P64;
           R2 = _s8PTb::P64;
           R1 = Foreign.Marshal.Array.withArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QRY: // global
           I64[Hp - 48] = sat_s8PTl_info;
           P64[Hp - 40] = _s8PTb::P64;
           P64[Hp - 32] = _s8PTc::P64;
           P64[Hp - 24] = _s8PTd::P64;
           I64[Hp - 16] = sat_s8PTf_info;
           P64[Hp] = _s8PTc::P64;
           R2 = _s8PTb::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 46;
           Sp = Sp - 24;
           call Foreign.Marshal.Array.allocaArray_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.withArray_info" {
     Foreign.Marshal.Array.withArray_info:
         const Foreign.Marshal.Array.withArray_entry;
         const 0;
         const 2203318222862;
         const 12884901911;
         const S8PWD_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.804520596 UTC

[section ""data" . Foreign.Marshal.Array.newArray1_closure" {
     Foreign.Marshal.Array.newArray1_closure:
         const Foreign.Marshal.Array.newArray1_info;
         const 0;
 },
 Foreign.Marshal.Array.newArray1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8QSt: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c8QSx; else goto c8QSy;
       c8QSx: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.newArray1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QSy: // global
           I64[Sp - 24] = block_c8QSr_info;
           _s8PTn::P64 = R3;
           R3 = 0;
           _s8PTm::P64 = R2;
           R2 = _s8PTn::P64;
           P64[Sp - 16] = _s8PTm::P64;
           P64[Sp - 8] = _s8PTn::P64;
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.newArray1_info" {
     Foreign.Marshal.Array.newArray1_info:
         const Foreign.Marshal.Array.newArray1_entry;
         const 0;
         const 36028809903865870;
         const 12884901903;
         const S8PWD_srt+16;
 },
 _c8QSr() //  [R1]
         { []
         }
     {offset
       c8QSr: // global
           I64[Sp - 8] = block_c8QSw_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = Foreign.Marshal.Array.mallocArray1_closure;
           I64[Sp] = R1;
           Sp = Sp - 24;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QSr_info" {
     block_c8QSr_info:
         const _c8QSr;
         const 2;
         const 12884901918;
         const S8PWD_srt+16;
 },
 _c8QSw() //  [R1]
         { []
         }
     {offset
       c8QSw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8QSF; else goto c8QSE;
       c8QSF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8QSE: // global
           _s8PTm::P64 = P64[Sp + 16];
           _s8PTn::P64 = P64[Sp + 24];
           (_s8PTx::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[Sp + 8] * I64[R1 + 7]);
           if (_s8PTx::I64 == 0) goto c8QSX; else goto c8QSU;
       c8QSX: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8QSU: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8PTx::I64;
           I64[Sp + 16] = block_c8QSS_info;
           R4 = _s8PTn::P64;
           _c8QSR::P64 = Hp - 7;
           R3 = _c8QSR::P64;
           R2 = _s8PTm::P64;
           P64[Sp + 24] = _c8QSR::P64;
           Sp = Sp + 16;
           call Foreign.Marshal.Array.newArray2_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QSw_info" {
     block_c8QSw_info:
         const _c8QSw;
         const 67;
         const 4294967326;
         const S8PWD_srt+24;
 },
 _c8QSS() //  []
         { []
         }
     {offset
       c8QSS: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QSS_info" {
     block_c8QSS_info:
         const _c8QSS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.814548182 UTC

[section ""data" . Foreign.Marshal.Array.newArray_closure" {
     Foreign.Marshal.Array.newArray_closure:
         const Foreign.Marshal.Array.newArray_info;
         const 0;
 },
 Foreign.Marshal.Array.newArray_entry() //  [R2, R3]
         { []
         }
     {offset
       c8QTj: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.newArray1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.newArray_info" {
     Foreign.Marshal.Array.newArray_info:
         const Foreign.Marshal.Array.newArray_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8PWD_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.820539331 UTC

[section ""data" . Foreign.Marshal.Array.newArray4_closure" {
     Foreign.Marshal.Array.newArray4_closure:
         const Foreign.Marshal.Array.newArray4_info;
 },
 Foreign.Marshal.Array.newArray4_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8QTy: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c8QTz; else goto c8QTA;
       c8QTz: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.newArray4_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QTA: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = 0;
           Sp = Sp - 40;
           call _c8QTH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.newArray4_info" {
     Foreign.Marshal.Array.newArray4_info:
         const Foreign.Marshal.Array.newArray4_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _c8QTH() //  []
         { []
         }
     {offset
       c8QTH: // global
           I64[Sp - 8] = block_c8QTK_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8QUc; else goto c8QTM;
       u8QUc: // global
           call _c8QTK(R1) args: 0, res: 0, upd: 0;
       c8QTM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8QTK() //  [R1]
         { []
         }
     {offset
       c8QTK: // global
           _s8PTO::I64 = I64[Sp + 40];
           if (R1 & 7 == 1) goto c8QTS; else goto c8QTX;
       c8QTS: // global
           I64[Sp + 40] = _s8PTO::I64;
           Sp = Sp + 8;
           call _c8QTC() args: 0, res: 0, upd: 0;
       c8QTX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8QU0; else goto c8QTZ;
       c8QU0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8QTZ: // global
           _s8PTR::P64 = P64[R1 + 6];
           _s8PTS::P64 = P64[R1 + 14];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8PTO::I64;
           I64[Sp] = block_c8QTW_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_pppv_info;
           P64[Sp - 24] = P64[Sp + 24];
           P64[Sp - 16] = Hp - 7;
           P64[Sp - 8] = _s8PTR::P64;
           P64[Sp + 32] = _s8PTS::P64;
           Sp = Sp - 32;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QTK_info" {
     block_c8QTK_info:
         const _c8QTK;
         const 1541;
         const 30;
 },
 _c8QTC() //  []
         { []
         }
     {offset
       c8QTC: // global
           Hp = Hp + 16;
           _s8PTJ::I64 = I64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto c8QTG; else goto c8QTF;
       c8QTG: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c8QTB_info;
           R1 = _s8PTJ::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c8QTF: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8PTJ::I64;
           R2 = P64[Sp];
           _s8PTE::P64 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pppv_info;
           P64[Sp + 24] = Hp - 7;
           P64[Sp + 32] = _s8PTE::P64;
           Sp = Sp + 8;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 _c8QTB() //  [R1]
         { []
         }
     {offset
       c8QTB: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _c8QTC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8QTB_info" {
     block_c8QTB_info:
         const _c8QTB;
         const 1541;
         const 30;
 },
 _c8QTW() //  []
         { []
         }
     {offset
       c8QTW: // global
           P64[Sp + 32] = P64[Sp + 32];
           I64[Sp + 40] = I64[Sp + 40] + 1;
           Sp = Sp + 8;
           call _c8QTH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8QTW_info" {
     block_c8QTW_info:
         const _c8QTW;
         const 1029;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.831289874 UTC

[section ""data" . Foreign.Marshal.Array.pokeArray0_closure" {
     Foreign.Marshal.Array.pokeArray0_closure:
         const Foreign.Marshal.Array.pokeArray0_info;
 },
 Foreign.Marshal.Array.pokeArray0_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8QUI: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.newArray4_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.pokeArray0_info" {
     Foreign.Marshal.Array.pokeArray0_info:
         const Foreign.Marshal.Array.pokeArray0_entry;
         const 0;
         const 14;
         const 21474836504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.837968071 UTC

[section ""data" . Foreign.Marshal.Array.withArrayLen0_closure" {
     Foreign.Marshal.Array.withArrayLen0_closure:
         const Foreign.Marshal.Array.withArrayLen0_info;
         const 0;
 },
 len_s8PU2_entry() //  [R1]
         { []
         }
     {offset
       c8QUZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8QV3; else goto c8QV4;
       c8QV3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QV4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8QUX_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . len_s8PU2_info" {
     len_s8PU2_info:
         const len_s8PU2_entry;
         const 1;
         const 16;
 },
 _c8QUX() //  [R1]
         { []
         }
     {offset
       c8QUX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8QV7; else goto c8QV6;
       c8QV7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c8QV6: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8QUX_info" {
     block_c8QUX_info:
         const _c8QUX;
         const 0;
         const 30;
 },
 sat_s8PUd_entry() //  [R1, R2]
         { []
         }
     {offset
       c8QVf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8QVg; else goto c8QVh;
       c8QVg: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8QVh: // global
           I64[Sp - 32] = block_c8QVd_info;
           R5 = P64[R1 + 22];
           R4 = R2;
           R3 = P64[R1 + 14];
           _s8PU8::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 30];
           P64[Sp - 16] = P64[R1 + 38];
           P64[Sp - 8] = _s8PU8::P64;
           Sp = Sp - 32;
           call Foreign.Marshal.Array.newArray4_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8PUd_info" {
     sat_s8PUd_info:
         const sat_s8PUd_entry;
         const 5;
         const 8;
         const 8589934597;
 },
 _c8QVd() //  []
         { []
         }
     {offset
       c8QVd: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QVd_info" {
     block_c8QVd_info:
         const _c8QVd;
         const 3;
         const 30;
 },
 sat_s8PU7_entry() //  [R1]
         { []
         }
     {offset
       c8QVq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8QVx; else goto c8QVy;
       c8QVx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QVy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8QVn_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8QVC; else goto c8QVo;
       u8QVC: // global
           call _c8QVn(R1) args: 0, res: 0, upd: 0;
       c8QVo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8PU7_info" {
     sat_s8PU7_info:
         const sat_s8PU7_entry;
         const 1;
         const 16;
 },
 _c8QVn() //  [R1]
         { []
         }
     {offset
       c8QVn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8QVB; else goto c8QVA;
       c8QVB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8QVA: // global
           _s8PU6::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8PU6::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8QVn_info" {
     block_c8QVn_info:
         const _c8QVn;
         const 0;
         const 30;
 },
 Foreign.Marshal.Array.withArrayLen0_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8QVD: // global
           _s8PU1::P64 = R5;
           _s8PU0::P64 = R4;
           _s8PTZ::P64 = R3;
           _s8PTY::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c8QVE; else goto c8QVF;
       c8QVF: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c8QVH; else goto c8QVG;
       c8QVH: // global
           HpAlloc = 96;
           goto c8QVE;
       c8QVE: // global
           R5 = _s8PU1::P64;
           R4 = _s8PU0::P64;
           R3 = _s8PTZ::P64;
           R2 = _s8PTY::P64;
           R1 = Foreign.Marshal.Array.withArrayLen0_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QVG: // global
           I64[Hp - 88] = len_s8PU2_info;
           P64[Hp - 72] = _s8PU0::P64;
           I64[Hp - 64] = sat_s8PUd_info;
           P64[Hp - 56] = _s8PTY::P64;
           P64[Hp - 48] = _s8PTZ::P64;
           P64[Hp - 40] = _s8PU0::P64;
           P64[Hp - 32] = _s8PU1::P64;
           _c8QUT::P64 = Hp - 88;
           P64[Hp - 24] = _c8QUT::P64;
           I64[Hp - 16] = sat_s8PU7_info;
           P64[Hp] = _c8QUT::P64;
           R2 = _s8PTY::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 62;
           Sp = Sp - 24;
           call Foreign.Marshal.Array.allocaArray_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.withArrayLen0_info" {
     Foreign.Marshal.Array.withArrayLen0_info:
         const Foreign.Marshal.Array.withArrayLen0_entry;
         const 0;
         const 8800387989518;
         const 17179869208;
         const S8PWD_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.852692097 UTC

[section ""data" . Foreign.Marshal.Array.withArray0_closure" {
     Foreign.Marshal.Array.withArray0_closure:
         const Foreign.Marshal.Array.withArray0_info;
         const 0;
 },
 sat_s8PUj_entry() //  [R1]
         { []
         }
     {offset
       c8QWp: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8PUj_info" {
     sat_s8PUj_info:
         const sat_s8PUj_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Foreign.Marshal.Array.withArray0_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8QWs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8QWw; else goto c8QWv;
       c8QWw: // global
           HpAlloc = 16;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.withArray0_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QWv: // global
           I64[Hp - 8] = sat_s8PUj_info;
           P64[Hp] = R5;
           R5 = Hp - 7;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.withArrayLen0_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.withArray0_info" {
     Foreign.Marshal.Array.withArray0_info:
         const Foreign.Marshal.Array.withArray0_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S8PWD_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.859653023 UTC

[section ""data" . Foreign.Marshal.Array.newArray3_closure" {
     Foreign.Marshal.Array.newArray3_closure:
         const Foreign.Marshal.Array.newArray3_info;
         const 0;
 },
 Foreign.Marshal.Array.newArray3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8QWK: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c8QWO; else goto c8QWP;
       c8QWO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.newArray3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QWP: // global
           I64[Sp - 32] = block_c8QWI_info;
           _s8PUl::P64 = R3;
           R3 = 0;
           _s8PUk::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _s8PUk::P64;
           P64[Sp - 16] = _s8PUl::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.newArray3_info" {
     Foreign.Marshal.Array.newArray3_info:
         const Foreign.Marshal.Array.newArray3_entry;
         const 0;
         const 288230389036613646;
         const 17179869207;
         const S8PWD_srt+16;
 },
 _c8QWI() //  [R1]
         { []
         }
     {offset
       c8QWI: // global
           I64[Sp - 8] = block_c8QWN_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = Foreign.Marshal.Array.mallocArray1_closure;
           I64[Sp] = R1;
           Sp = Sp - 24;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QWI_info" {
     block_c8QWI_info:
         const _c8QWI;
         const 3;
         const 12884901918;
         const S8PWD_srt+16;
 },
 _c8QWN() //  [R1]
         { []
         }
     {offset
       c8QWN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8QWW; else goto c8QWV;
       c8QWW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8QWV: // global
           _s8PUk::P64 = P64[Sp + 16];
           _s8PUl::P64 = P64[Sp + 24];
           _s8PUm::P64 = P64[Sp + 32];
           (_s8PUx::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc((I64[Sp + 8] + 1) * I64[R1 + 7]);
           if (_s8PUx::I64 == 0) goto c8QXh; else goto c8QXe;
       c8QXh: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8QXe: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8PUx::I64;
           I64[Sp + 24] = block_c8QXc_info;
           R5 = _s8PUm::P64;
           _c8QXb::P64 = Hp - 7;
           R4 = _c8QXb::P64;
           R3 = _s8PUl::P64;
           R2 = _s8PUk::P64;
           P64[Sp + 32] = _c8QXb::P64;
           Sp = Sp + 24;
           call Foreign.Marshal.Array.newArray4_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QWN_info" {
     block_c8QWN_info:
         const _c8QWN;
         const 68;
         const 4294967326;
         const S8PWD_srt+24;
 },
 _c8QXc() //  []
         { []
         }
     {offset
       c8QXc: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QXc_info" {
     block_c8QXc_info:
         const _c8QXc;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.86935993 UTC

[section ""data" . Foreign.Marshal.Array.newArray0_closure" {
     Foreign.Marshal.Array.newArray0_closure:
         const Foreign.Marshal.Array.newArray0_info;
         const 0;
 },
 Foreign.Marshal.Array.newArray0_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8QXE: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.newArray3_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.newArray0_info" {
     Foreign.Marshal.Array.newArray0_info:
         const Foreign.Marshal.Array.newArray0_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S8PWD_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.87241443 UTC

[section ""data" . lvl22_r8PPB_closure" {
     lvl22_r8PPB_closure:
         const GHC.Types.I#_con_info;
         const 242;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.874129944 UTC

[section ""data" . lvl23_r8PPC_closure" {
     lvl23_r8PPC_closure:
         const GHC.Types.I#_con_info;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.875767821 UTC

[section ""data" . lvl24_r8PPD_closure" {
     lvl24_r8PPD_closure:
         const GHC.Types.I#_con_info;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.877743263 UTC

[section ""data" . lvl25_r8PPE_closure" {
     lvl25_r8PPE_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8PPh_closure;
         const lvl3_r8PPi_closure;
         const lvl5_r8PPk_closure;
         const lvl22_r8PPB_closure+1;
         const lvl23_r8PPC_closure+1;
         const lvl22_r8PPB_closure+1;
         const lvl24_r8PPD_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.879554998 UTC

[section ""data" . lvl26_r8PPF_closure" {
     lvl26_r8PPF_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8PPg_closure;
         const lvl25_r8PPE_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.882110387 UTC

[section ""data" . Foreign.Marshal.Array.copyArray1_closure" {
     Foreign.Marshal.Array.copyArray1_closure:
         const Foreign.Marshal.Array.copyArray1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Array.copyArray1_entry() //  [R1]
         { []
         }
     {offset
       c8QXW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8QXX; else goto c8QXY;
       c8QXX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QXY: // global
           (_c8QXT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8QXT::I64 == 0) goto c8QXV; else goto c8QXU;
       c8QXV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8QXU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8QXT::I64;
           R2 = lvl26_r8PPF_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.copyArray1_info" {
     Foreign.Marshal.Array.copyArray1_info:
         const Foreign.Marshal.Array.copyArray1_entry;
         const 0;
         const 2305843013508661269;
         const S8PWD_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.888829226 UTC

[section ""data" . Foreign.Marshal.Array.copyArray_closure" {
     Foreign.Marshal.Array.copyArray_closure:
         const Foreign.Marshal.Array.copyArray_info;
         const 0;
 },
 lvl33_s8PUE_entry() //  [R1]
         { []
         }
     {offset
       c8QYe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8QYf; else goto c8QYg;
       c8QYf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QYg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.copyArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_s8PUE_info" {
     lvl33_s8PUE_info:
         const lvl33_s8PUE_entry;
         const 1;
         const 4294967312;
         const S8PWD_srt+240;
 },
 sat_s8PUX_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c8QYp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8QYD; else goto c8QYE;
       c8QYD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8QYE: // global
           I64[Sp - 32] = block_c8QYm_info;
           _s8PUE::P64 = P64[R1 + 4];
           R1 = R2;
           P64[Sp - 24] = _s8PUE::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8QYY; else goto c8QYn;
       u8QYY: // global
           call _c8QYm(R1) args: 0, res: 0, upd: 0;
       c8QYn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8PUX_info" {
     sat_s8PUX_info:
         const sat_s8PUX_entry;
         const 1;
         const 9;
         const 17179869207;
 },
 _c8QYm() //  [R1]
         { []
         }
     {offset
       c8QYm: // global
           I64[Sp] = block_c8QYs_info;
           _s8PUK::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8PUK::I64;
           if (R1 & 7 != 0) goto u8QYX; else goto c8QYt;
       u8QYX: // global
           call _c8QYs(R1) args: 0, res: 0, upd: 0;
       c8QYt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QYm_info" {
     block_c8QYm_info:
         const _c8QYm;
         const 3;
         const 30;
 },
 _c8QYs() //  [R1]
         { []
         }
     {offset
       c8QYs: // global
           I64[Sp] = block_c8QYx_info;
           _s8PUM::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s8PUM::I64;
           if (R1 & 7 != 0) goto u8QYZ; else goto c8QYy;
       u8QYZ: // global
           call _c8QYx(R1) args: 0, res: 0, upd: 0;
       c8QYy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QYs_info" {
     block_c8QYs_info:
         const _c8QYs;
         const 131;
         const 30;
 },
 _c8QYx() //  [R1]
         { []
         }
     {offset
       c8QYx: // global
           I64[Sp] = block_c8QYC_info;
           _s8PUO::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8PUO::I64;
           if (R1 & 7 != 0) goto u8QZ0; else goto c8QYI;
       u8QZ0: // global
           call _c8QYC(R1) args: 0, res: 0, upd: 0;
       c8QYI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QYx_info" {
     block_c8QYx_info:
         const _c8QYx;
         const 387;
         const 30;
 },
 _c8QYC() //  [R1]
         { []
         }
     {offset
       c8QYC: // global
           (_s8PUW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(I64[Sp + 16], I64[Sp + 24], I64[Sp + 8] * I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8QYC_info" {
     block_c8QYC_info:
         const _c8QYC;
         const 451;
         const 30;
 },
 Foreign.Marshal.Array.copyArray_entry() //  [R2]
         { []
         }
     {offset
       c8QZ1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8QZ5; else goto c8QZ4;
       c8QZ5: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Array.copyArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8QZ4: // global
           I64[Hp - 32] = lvl33_s8PUE_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s8PUX_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.copyArray_info" {
     Foreign.Marshal.Array.copyArray_info:
         const Foreign.Marshal.Array.copyArray_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8PWD_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.903726397 UTC

[section ""data" . lvl27_r8PPG_closure" {
     lvl27_r8PPG_closure:
         const GHC.Types.I#_con_info;
         const 251;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.906044038 UTC

[section ""data" . lvl28_r8PPH_closure" {
     lvl28_r8PPH_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8PPh_closure;
         const lvl3_r8PPi_closure;
         const lvl5_r8PPk_closure;
         const lvl27_r8PPG_closure+1;
         const lvl23_r8PPC_closure+1;
         const lvl27_r8PPG_closure+1;
         const lvl24_r8PPD_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.908056756 UTC

[section ""data" . lvl29_r8PPI_closure" {
     lvl29_r8PPI_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8PPg_closure;
         const lvl28_r8PPH_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.911220576 UTC

[section ""data" . Foreign.Marshal.Array.moveArray1_closure" {
     Foreign.Marshal.Array.moveArray1_closure:
         const Foreign.Marshal.Array.moveArray1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Array.moveArray1_entry() //  [R1]
         { []
         }
     {offset
       c8QZM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8QZN; else goto c8QZO;
       c8QZN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8QZO: // global
           (_c8QZJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8QZJ::I64 == 0) goto c8QZL; else goto c8QZK;
       c8QZL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8QZK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8QZJ::I64;
           R2 = lvl29_r8PPI_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.moveArray1_info" {
     Foreign.Marshal.Array.moveArray1_info:
         const Foreign.Marshal.Array.moveArray1_entry;
         const 0;
         const 12884901909;
         const S8PWD_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.9183336 UTC

[section ""data" . Foreign.Marshal.Array.moveArray_closure" {
     Foreign.Marshal.Array.moveArray_closure:
         const Foreign.Marshal.Array.moveArray_info;
         const 0;
 },
 lvl33_s8PUZ_entry() //  [R1]
         { []
         }
     {offset
       c8R04: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8R05; else goto c8R06;
       c8R05: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8R06: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.moveArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_s8PUZ_info" {
     lvl33_s8PUZ_info:
         const lvl33_s8PUZ_entry;
         const 1;
         const 4294967312;
         const S8PWD_srt+272;
 },
 sat_s8PVi_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c8R0f: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8R0t; else goto c8R0u;
       c8R0t: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8R0u: // global
           I64[Sp - 32] = block_c8R0c_info;
           _s8PUZ::P64 = P64[R1 + 4];
           R1 = R2;
           P64[Sp - 24] = _s8PUZ::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8R0O; else goto c8R0d;
       u8R0O: // global
           call _c8R0c(R1) args: 0, res: 0, upd: 0;
       c8R0d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8PVi_info" {
     sat_s8PVi_info:
         const sat_s8PVi_entry;
         const 1;
         const 9;
         const 17179869207;
 },
 _c8R0c() //  [R1]
         { []
         }
     {offset
       c8R0c: // global
           I64[Sp] = block_c8R0i_info;
           _s8PV5::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8PV5::I64;
           if (R1 & 7 != 0) goto u8R0N; else goto c8R0j;
       u8R0N: // global
           call _c8R0i(R1) args: 0, res: 0, upd: 0;
       c8R0j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8R0c_info" {
     block_c8R0c_info:
         const _c8R0c;
         const 3;
         const 30;
 },
 _c8R0i() //  [R1]
         { []
         }
     {offset
       c8R0i: // global
           I64[Sp] = block_c8R0n_info;
           _s8PV7::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s8PV7::I64;
           if (R1 & 7 != 0) goto u8R0P; else goto c8R0o;
       u8R0P: // global
           call _c8R0n(R1) args: 0, res: 0, upd: 0;
       c8R0o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8R0i_info" {
     block_c8R0i_info:
         const _c8R0i;
         const 131;
         const 30;
 },
 _c8R0n() //  [R1]
         { []
         }
     {offset
       c8R0n: // global
           I64[Sp] = block_c8R0s_info;
           _s8PV9::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8PV9::I64;
           if (R1 & 7 != 0) goto u8R0Q; else goto c8R0y;
       u8R0Q: // global
           call _c8R0s(R1) args: 0, res: 0, upd: 0;
       c8R0y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8R0n_info" {
     block_c8R0n_info:
         const _c8R0n;
         const 387;
         const 30;
 },
 _c8R0s() //  [R1]
         { []
         }
     {offset
       c8R0s: // global
           (_s8PVh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memmove(I64[Sp + 16], I64[Sp + 24], I64[Sp + 8] * I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8R0s_info" {
     block_c8R0s_info:
         const _c8R0s;
         const 451;
         const 30;
 },
 Foreign.Marshal.Array.moveArray_entry() //  [R2]
         { []
         }
     {offset
       c8R0R: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8R0V; else goto c8R0U;
       c8R0V: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Array.moveArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8R0U: // global
           I64[Hp - 32] = lvl33_s8PUZ_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s8PVi_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.moveArray_info" {
     Foreign.Marshal.Array.moveArray_info:
         const Foreign.Marshal.Array.moveArray_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8PWD_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.934382321 UTC

[section ""data" . Foreign.Marshal.Array.lengthArray1_closure" {
     Foreign.Marshal.Array.lengthArray1_closure:
         const Foreign.Marshal.Array.lengthArray1_info;
 },
 sat_s8PVy_entry() //  [R1]
         { []
         }
     {offset
       c8R1P: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8R1W; else goto c8R1X;
       c8R1W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8R1X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8R1M_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8R21; else goto c8R1N;
       u8R21: // global
           call _c8R1M(R1) args: 0, res: 0, upd: 0;
       c8R1N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8PVy_info" {
     sat_s8PVy_info:
         const sat_s8PVy_entry;
         const 1;
         const 16;
 },
 _c8R1M() //  [R1]
         { []
         }
     {offset
       c8R1M: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8R20; else goto c8R1Z;
       c8R20: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8R1Z: // global
           _s8PVx::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8PVx::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8R1M_info" {
     block_c8R1M_info:
         const _c8R1M;
         const 0;
         const 30;
 },
 Foreign.Marshal.Array.lengthArray1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8R22: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c8R23; else goto c8R24;
       c8R23: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.lengthArray1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8R24: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = Foreign.Marshal.Array.lengthArray2_closure+1;
           Sp = Sp - 40;
           call _c8R1A() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.lengthArray1_info" {
     Foreign.Marshal.Array.lengthArray1_info:
         const Foreign.Marshal.Array.lengthArray1_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _c8R1A() //  []
         { []
         }
     {offset
       c8R1A: // global
           I64[Sp - 8] = block_c8R1C_info;
           R2 = P64[Sp];
           I64[Sp - 32] = stg_ap_ppv_info;
           P64[Sp - 24] = P64[Sp + 24];
           P64[Sp - 16] = P64[Sp + 32];
           Sp = Sp - 32;
           call Foreign.Storable.peekElemOff_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c8R1C() //  [R1]
         { []
         }
     {offset
       c8R1C: // global
           I64[Sp] = block_c8R1E_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R1;
           P64[Sp - 8] = P64[Sp + 24];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8R1C_info" {
     block_c8R1C_info:
         const _c8R1C;
         const 5;
         const 30;
 },
 _c8R1E() //  [R1]
         { []
         }
     {offset
       c8R1E: // global
           _s8PVp::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c8R28; else goto c8R2f;
       c8R28: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8R2b; else goto c8R2a;
       c8R2b: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8R2a: // global
           I64[Hp - 16] = sat_s8PVy_info;
           P64[Hp] = _s8PVp::P64;
           P64[Sp + 40] = Hp - 16;
           Sp = Sp + 8;
           call _c8R1A() args: 0, res: 0, upd: 0;
       c8R2f: // global
           R1 = _s8PVp::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8R1E_info" {
     block_c8R1E_info:
         const _c8R1E;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.945416696 UTC

[section ""data" . Foreign.Marshal.Array.lengthArray0_closure" {
     Foreign.Marshal.Array.lengthArray0_closure:
         const Foreign.Marshal.Array.lengthArray0_info;
 },
 Foreign.Marshal.Array.lengthArray0_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8R2T: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.lengthArray1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.lengthArray0_info" {
     Foreign.Marshal.Array.lengthArray0_info:
         const Foreign.Marshal.Array.lengthArray0_entry;
         const 0;
         const 14;
         const 21474836504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.949220098 UTC

[section ""data" . Foreign.Marshal.Array.peekArray2_closure" {
     Foreign.Marshal.Array.peekArray2_closure:
         const Foreign.Marshal.Array.peekArray2_info;
 },
 Foreign.Marshal.Array.peekArray2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8R36: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8R37; else goto c8R38;
       c8R37: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.peekArray2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8R38: // global
           I64[Sp - 24] = block_c8R34_info;
           _s8PVC::P64 = R5;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           _s8PVz::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s8PVz::P64;
           P64[Sp - 8] = _s8PVC::P64;
           Sp = Sp - 24;
           call Foreign.Marshal.Array.lengthArray1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.peekArray2_info" {
     Foreign.Marshal.Array.peekArray2_info:
         const Foreign.Marshal.Array.peekArray2_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _c8R34() //  [R1]
         { []
         }
     {offset
       c8R34: // global
           R4 = P64[Sp + 16];
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Foreign.Marshal.Array.peekArray1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8R34_info" {
     block_c8R34_info:
         const _c8R34;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.954956072 UTC

[section ""data" . Foreign.Marshal.Array.peekArray0_closure" {
     Foreign.Marshal.Array.peekArray0_closure:
         const Foreign.Marshal.Array.peekArray0_info;
 },
 Foreign.Marshal.Array.peekArray0_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8R3m: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.peekArray2_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.peekArray0_info" {
     Foreign.Marshal.Array.peekArray0_info:
         const Foreign.Marshal.Array.peekArray0_entry;
         const 0;
         const 14;
         const 21474836504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.958435802 UTC

[section ""data" . lvl30_r8PPJ_closure" {
     lvl30_r8PPJ_closure:
         const GHC.Types.I#_con_info;
         const 276;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.960084636 UTC

[section ""data" . lvl31_r8PPK_closure" {
     lvl31_r8PPK_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8PPh_closure;
         const lvl3_r8PPi_closure;
         const lvl5_r8PPk_closure;
         const lvl30_r8PPJ_closure+1;
         const lvl7_r8PPm_closure+1;
         const lvl30_r8PPJ_closure+1;
         const lvl8_r8PPn_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.962205804 UTC

[section ""data" . lvl32_r8PPL_closure" {
     lvl32_r8PPL_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8PPg_closure;
         const lvl31_r8PPK_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.964484734 UTC

[section ""data" . Foreign.Marshal.Array.advancePtr1_closure" {
     Foreign.Marshal.Array.advancePtr1_closure:
         const Foreign.Marshal.Array.advancePtr1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Array.advancePtr1_entry() //  [R1]
         { []
         }
     {offset
       c8R3C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8R3D; else goto c8R3E;
       c8R3D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8R3E: // global
           (_c8R3z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8R3z::I64 == 0) goto c8R3B; else goto c8R3A;
       c8R3B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8R3A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8R3z::I64;
           R2 = lvl32_r8PPL_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.advancePtr1_info" {
     Foreign.Marshal.Array.advancePtr1_info:
         const Foreign.Marshal.Array.advancePtr1_entry;
         const 0;
         const 38654705685;
         const S8PWD_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.970557709 UTC

[section ""data" . Foreign.Marshal.Array.advancePtr_closure" {
     Foreign.Marshal.Array.advancePtr_closure:
         const Foreign.Marshal.Array.advancePtr_info;
         const 0;
 },
 lvl33_s8PVI_entry() //  [R1]
         { []
         }
     {offset
       c8R3U: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8R3V; else goto c8R3W;
       c8R3V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8R3W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.advancePtr1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_s8PVI_info" {
     lvl33_s8PVI_info:
         const lvl33_s8PVI_entry;
         const 1;
         const 4294967312;
         const S8PWD_srt+296;
 },
 sat_s8PVT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c8R45: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8R4p; else goto c8R4q;
       c8R4p: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8R4q: // global
           I64[Sp - 24] = block_c8R42_info;
           _s8PVI::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s8PVI::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8R4x; else goto c8R43;
       u8R4x: // global
           call _c8R42(R1) args: 0, res: 0, upd: 0;
       c8R43: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8PVT_info" {
     sat_s8PVT_info:
         const sat_s8PVT_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c8R42() //  [R1]
         { []
         }
     {offset
       c8R42: // global
           I64[Sp] = block_c8R48_info;
           _s8PVM::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8PVM::I64;
           if (R1 & 7 != 0) goto u8R4w; else goto c8R49;
       u8R4w: // global
           call _c8R48(R1) args: 0, res: 0, upd: 0;
       c8R49: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8R42_info" {
     block_c8R42_info:
         const _c8R42;
         const 2;
         const 30;
 },
 _c8R48() //  [R1]
         { []
         }
     {offset
       c8R48: // global
           I64[Sp] = block_c8R4d_info;
           _s8PVO::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8PVO::I64;
           if (R1 & 7 != 0) goto u8R4y; else goto c8R4e;
       u8R4y: // global
           call _c8R4d(R1) args: 0, res: 0, upd: 0;
       c8R4e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8R48_info" {
     block_c8R48_info:
         const _c8R48;
         const 130;
         const 30;
 },
 _c8R4d() //  [R1]
         { []
         }
     {offset
       c8R4d: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8R4v; else goto c8R4u;
       c8R4v: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8R4u: // global
           _s8PVS::I64 = I64[Sp + 16] + I64[Sp + 8] * I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8PVS::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8R4d_info" {
     block_c8R4d_info:
         const _c8R4d;
         const 194;
         const 30;
 },
 Foreign.Marshal.Array.advancePtr_entry() //  [R2]
         { []
         }
     {offset
       c8R4z: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8R4D; else goto c8R4C;
       c8R4D: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Array.advancePtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8R4C: // global
           I64[Hp - 32] = lvl33_s8PVI_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s8PVT_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.advancePtr_info" {
     Foreign.Marshal.Array.advancePtr_info:
         const Foreign.Marshal.Array.advancePtr_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8PWD_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.982792034 UTC

[section ""data" . Foreign.Marshal.Array.$trModule3_closure" {
     Foreign.Marshal.Array.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Array.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.984395722 UTC

[section ""data" . Foreign.Marshal.Array.$trModule1_closure" {
     Foreign.Marshal.Array.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Array.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.986369843 UTC

[section ""data" . Foreign.Marshal.Array.$trModule_closure" {
     Foreign.Marshal.Array.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.Marshal.Array.$trModule3_closure+1;
         const Foreign.Marshal.Array.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:59.988264841 UTC

[section ""relreadonly" . S8PWD_srt" {
     S8PWD_srt:
         const GHC.Err.undefined_closure;
         const lvl10_r8PPp_closure;
         const Foreign.Marshal.Array.mallocArray1_closure;
         const Foreign.Marshal.Alloc.malloc1_closure;
         const Foreign.Marshal.Array.mallocArray_closure;
         const Foreign.Marshal.Array.$wmallocArray0_closure;
         const Foreign.Marshal.Array.mallocArray2_closure;
         const lvl13_r8PPs_closure;
         const Foreign.Marshal.Array.callocArray1_closure;
         const Foreign.Marshal.Alloc.calloc1_closure;
         const Foreign.Marshal.Array.callocArray_closure;
         const Foreign.Marshal.Array.$wcallocArray0_closure;
         const Foreign.Marshal.Array.callocArray2_closure;
         const lvl16_r8PPv_closure;
         const Foreign.Marshal.Array.allocaArray1_closure;
         const Foreign.Marshal.Array.allocaArray_closure;
         const Foreign.Marshal.Array.allocaArray0_closure;
         const lvl21_r8PPA_closure;
         const Foreign.Marshal.Array.reallocArray1_closure;
         const Foreign.Marshal.Alloc.realloc2_closure;
         const Foreign.Marshal.Array.reallocArray_closure;
         const Foreign.Marshal.Array.$wreallocArray0_closure;
         const Foreign.Marshal.Array.reallocArray2_closure;
         const Foreign.Marshal.Array.withArrayLen_closure;
         const Foreign.Marshal.Array.withArray_closure;
         const Foreign.Marshal.Array.newArray1_closure;
         const Foreign.Marshal.Array.withArrayLen0_closure;
         const Foreign.Marshal.Array.withArray0_closure;
         const Foreign.Marshal.Array.newArray3_closure;
         const lvl26_r8PPF_closure;
         const Foreign.Marshal.Array.copyArray1_closure;
         const Foreign.Marshal.Array.copyArray_closure;
         const lvl29_r8PPI_closure;
         const GHC.Err.undefined_closure;
         const Foreign.Marshal.Array.moveArray1_closure;
         const Foreign.Marshal.Array.moveArray_closure;
         const lvl32_r8PPL_closure;
         const Foreign.Marshal.Array.advancePtr1_closure;
         const Foreign.Marshal.Array.advancePtr_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.38668313 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:04:01.387770993 UTC

[section ""cstring" . lvl_r8PPf_bytes" {
     lvl_r8PPf_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.390164434 UTC

[section ""data" . lvl1_r8PPg_closure" {
     lvl1_r8PPg_closure:
         const lvl1_r8PPg_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r8PPg_entry() //  [R1]
         { []
         }
     {offset
       c8Rbr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Rbs; else goto c8Rbt;
       c8Rbs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Rbt: // global
           (_c8Rbo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8Rbo::I64 == 0) goto c8Rbq; else goto c8Rbp;
       c8Rbq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8Rbp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8Rbo::I64;
           R2 = lvl_r8PPf_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r8PPg_info" {
     lvl1_r8PPg_info:
         const lvl1_r8PPg_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.393805251 UTC

[section ""cstring" . Foreign.Marshal.Array.$trModule4_bytes" {
     Foreign.Marshal.Array.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.395958266 UTC

[section ""data" . lvl2_r8PPh_closure" {
     lvl2_r8PPh_closure:
         const lvl2_r8PPh_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r8PPh_entry() //  [R1]
         { []
         }
     {offset
       c8RbJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8RbK; else goto c8RbL;
       c8RbK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8RbL: // global
           (_c8RbG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8RbG::I64 == 0) goto c8RbI; else goto c8RbH;
       c8RbI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8RbH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8RbG::I64;
           R2 = Foreign.Marshal.Array.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_r8PPh_info" {
     lvl2_r8PPh_info:
         const lvl2_r8PPh_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.399374577 UTC

[section ""cstring" . Foreign.Marshal.Array.$trModule2_bytes" {
     Foreign.Marshal.Array.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,77,97,114,115,104,97,108,46,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.40168453 UTC

[section ""data" . lvl3_r8PPi_closure" {
     lvl3_r8PPi_closure:
         const lvl3_r8PPi_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r8PPi_entry() //  [R1]
         { []
         }
     {offset
       c8Rc1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Rc2; else goto c8Rc3;
       c8Rc2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Rc3: // global
           (_c8RbY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8RbY::I64 == 0) goto c8Rc0; else goto c8RbZ;
       c8Rc0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8RbZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8RbY::I64;
           R2 = Foreign.Marshal.Array.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r8PPi_info" {
     lvl3_r8PPi_info:
         const lvl3_r8PPi_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.405107977 UTC

[section ""cstring" . lvl4_r8PPj_bytes" {
     lvl4_r8PPj_bytes:
         I8[] [46,47,70,111,114,101,105,103,110,47,77,97,114,115,104,97,108,47,65,114,114,97,121,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.407384119 UTC

[section ""data" . lvl5_r8PPk_closure" {
     lvl5_r8PPk_closure:
         const lvl5_r8PPk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r8PPk_entry() //  [R1]
         { []
         }
     {offset
       c8Rcj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Rck; else goto c8Rcl;
       c8Rck: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Rcl: // global
           (_c8Rcg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8Rcg::I64 == 0) goto c8Rci; else goto c8Rch;
       c8Rci: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8Rch: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8Rcg::I64;
           R2 = lvl4_r8PPj_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r8PPk_info" {
     lvl5_r8PPk_info:
         const lvl5_r8PPk_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.411043625 UTC

[section ""data" . lvl6_r8PPl_closure" {
     lvl6_r8PPl_closure:
         const GHC.Types.I#_con_info;
         const 86;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.412697666 UTC

[section ""data" . lvl7_r8PPm_closure" {
     lvl7_r8PPm_closure:
         const GHC.Types.I#_con_info;
         const 25;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.414785819 UTC

[section ""data" . lvl8_r8PPn_closure" {
     lvl8_r8PPn_closure:
         const GHC.Types.I#_con_info;
         const 34;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.41710764 UTC

[section ""data" . lvl9_r8PPo_closure" {
     lvl9_r8PPo_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8PPh_closure;
         const lvl3_r8PPi_closure;
         const lvl5_r8PPk_closure;
         const lvl6_r8PPl_closure+1;
         const lvl7_r8PPm_closure+1;
         const lvl6_r8PPl_closure+1;
         const lvl8_r8PPn_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.418930319 UTC

[section ""data" . lvl10_r8PPp_closure" {
     lvl10_r8PPp_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8PPg_closure;
         const lvl9_r8PPo_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.421322375 UTC

[section ""data" . Foreign.Marshal.Array.mallocArray1_closure" {
     Foreign.Marshal.Array.mallocArray1_closure:
         const Foreign.Marshal.Array.mallocArray1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Array.mallocArray1_entry() //  [R1]
         { []
         }
     {offset
       c8RcF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8RcG; else goto c8RcH;
       c8RcG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8RcH: // global
           (_c8RcC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8RcC::I64 == 0) goto c8RcE; else goto c8RcD;
       c8RcE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8RcD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8RcC::I64;
           R2 = lvl10_r8PPp_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.mallocArray1_info" {
     Foreign.Marshal.Array.mallocArray1_info:
         const Foreign.Marshal.Array.mallocArray1_entry;
         const 0;
         const 12884901909;
         const S8RcI_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.427417527 UTC

[section ""data" . Foreign.Marshal.Array.mallocArray_closure" {
     Foreign.Marshal.Array.mallocArray_closure:
         const Foreign.Marshal.Array.mallocArray_info;
         const 0;
 },
 lvl33_s8R5e_entry() //  [R1]
         { []
         }
     {offset
       c8RcZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8Rd0; else goto c8Rd1;
       c8Rd0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Rd1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.mallocArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_s8R5e_info" {
     lvl33_s8R5e_info:
         const lvl33_s8R5e_entry;
         const 1;
         const 4294967312;
         const S8RcI_srt+16;
 },
 sat_s8R5t_entry() //  [R1, R2]
         { []
         }
     {offset
       c8Rda: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Rde; else goto c8Rdf;
       c8Rde: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8Rdf: // global
           I64[Sp - 16] = block_c8Rd7_info;
           _s8R5e::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _s8R5e::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8RdE; else goto c8Rd8;
       u8RdE: // global
           call _c8Rd7(R1) args: 0, res: 0, upd: 0;
       c8Rd8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8R5t_info" {
     sat_s8R5t_info:
         const sat_s8R5t_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const S8RcI_srt+24;
 },
 _c8Rd7() //  [R1]
         { []
         }
     {offset
       c8Rd7: // global
           I64[Sp] = block_c8Rdd_info;
           _s8R5i::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8R5i::I64;
           if (R1 & 7 != 0) goto u8RdD; else goto c8Rdh;
       u8RdD: // global
           call _c8Rdd(R1) args: 0, res: 0, upd: 0;
       c8Rdh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Rd7_info" {
     block_c8Rd7_info:
         const _c8Rd7;
         const 1;
         const 4294967326;
         const S8RcI_srt+24;
 },
 _c8Rdd() //  [R1]
         { []
         }
     {offset
       c8Rdd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8Rdn; else goto c8Rdm;
       c8Rdn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Rdm: // global
           (_s8R5q::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[Sp + 8] * I64[R1 + 7]);
           if (_s8R5q::I64 == 0) goto c8RdC; else goto c8RdB;
       c8RdC: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8RdB: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8R5q::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Rdd_info" {
     block_c8Rdd_info:
         const _c8Rdd;
         const 65;
         const 4294967326;
         const S8RcI_srt+24;
 },
 Foreign.Marshal.Array.mallocArray_entry() //  [R2]
         { []
         }
     {offset
       c8RdF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8RdJ; else goto c8RdI;
       c8RdJ: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Array.mallocArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8RdI: // global
           I64[Hp - 32] = lvl33_s8R5e_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s8R5t_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.mallocArray_info" {
     Foreign.Marshal.Array.mallocArray_info:
         const Foreign.Marshal.Array.mallocArray_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S8RcI_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.439639348 UTC

[section ""data" . Foreign.Marshal.Array.$wmallocArray0_closure" {
     Foreign.Marshal.Array.$wmallocArray0_closure:
         const Foreign.Marshal.Array.$wmallocArray0_info;
         const 0;
 },
 Foreign.Marshal.Array.$wmallocArray0_entry() //  [R2, R3]
         { []
         }
     {offset
       c8Ren: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8Reo; else goto c8Rep;
       c8Reo: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.$wmallocArray0_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Rep: // global
           I64[Sp - 16] = block_c8Rel_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.mallocArray1_closure;
           I64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.$wmallocArray0_info" {
     Foreign.Marshal.Array.$wmallocArray0_info:
         const Foreign.Marshal.Array.$wmallocArray0_entry;
         const 0;
         const 47244640270;
         const 12884901902;
         const S8RcI_srt+16;
 },
 _c8Rel() //  [R1]
         { []
         }
     {offset
       c8Rel: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8Reu; else goto c8Ret;
       c8Reu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Ret: // global
           (_s8R5F::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc((I64[Sp + 8] + 1) * I64[R1 + 7]);
           if (_s8R5F::I64 == 0) goto c8ReM; else goto c8ReL;
       c8ReM: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8ReL: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8R5F::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Rel_info" {
     block_c8Rel_info:
         const _c8Rel;
         const 65;
         const 4294967326;
         const S8RcI_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.446005153 UTC

[section ""data" . Foreign.Marshal.Array.mallocArray2_closure" {
     Foreign.Marshal.Array.mallocArray2_closure:
         const Foreign.Marshal.Array.mallocArray2_info;
         const 0;
 },
 Foreign.Marshal.Array.mallocArray2_entry() //  [R2, R3]
         { []
         }
     {offset
       c8Rfa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Rfb; else goto c8Rfc;
       c8Rfb: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.mallocArray2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Rfc: // global
           I64[Sp - 16] = block_c8Rf7_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8Rfg; else goto c8Rf8;
       u8Rfg: // global
           call _c8Rf7(R1) args: 0, res: 0, upd: 0;
       c8Rf8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.mallocArray2_info" {
     Foreign.Marshal.Array.mallocArray2_info:
         const Foreign.Marshal.Array.mallocArray2_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S8RcI_srt+40;
 },
 _c8Rf7() //  [R1]
         { []
         }
     {offset
       c8Rf7: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Foreign.Marshal.Array.$wmallocArray0_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Rf7_info" {
     block_c8Rf7_info:
         const _c8Rf7;
         const 1;
         const 4294967326;
         const S8RcI_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.451448817 UTC

[section ""data" . Foreign.Marshal.Array.mallocArray0_closure" {
     Foreign.Marshal.Array.mallocArray0_closure:
         const Foreign.Marshal.Array.mallocArray0_info;
         const 0;
 },
 Foreign.Marshal.Array.mallocArray0_entry() //  [R2, R3]
         { []
         }
     {offset
       c8Rfv: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.mallocArray2_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.mallocArray0_info" {
     Foreign.Marshal.Array.mallocArray0_info:
         const Foreign.Marshal.Array.mallocArray0_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8RcI_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.455247038 UTC

[section ""data" . lvl11_r8PPq_closure" {
     lvl11_r8PPq_closure:
         const GHC.Types.I#_con_info;
         const 100;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.456914138 UTC

[section ""data" . lvl12_r8PPr_closure" {
     lvl12_r8PPr_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8PPh_closure;
         const lvl3_r8PPi_closure;
         const lvl5_r8PPk_closure;
         const lvl11_r8PPq_closure+1;
         const lvl7_r8PPm_closure+1;
         const lvl11_r8PPq_closure+1;
         const lvl8_r8PPn_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.458994634 UTC

[section ""data" . lvl13_r8PPs_closure" {
     lvl13_r8PPs_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8PPg_closure;
         const lvl12_r8PPr_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.461420461 UTC

[section ""data" . Foreign.Marshal.Array.callocArray1_closure" {
     Foreign.Marshal.Array.callocArray1_closure:
         const Foreign.Marshal.Array.callocArray1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Array.callocArray1_entry() //  [R1]
         { []
         }
     {offset
       c8RfL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8RfM; else goto c8RfN;
       c8RfM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8RfN: // global
           (_c8RfI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8RfI::I64 == 0) goto c8RfK; else goto c8RfJ;
       c8RfK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8RfJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8RfI::I64;
           R2 = lvl13_r8PPs_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.callocArray1_info" {
     Foreign.Marshal.Array.callocArray1_info:
         const Foreign.Marshal.Array.callocArray1_entry;
         const 0;
         const 554050781205;
         const S8RcI_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.467419968 UTC

[section ""data" . Foreign.Marshal.Array.callocArray_closure" {
     Foreign.Marshal.Array.callocArray_closure:
         const Foreign.Marshal.Array.callocArray_info;
         const 0;
 },
 lvl33_s8R5O_entry() //  [R1]
         { []
         }
     {offset
       c8Rg4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8Rg5; else goto c8Rg6;
       c8Rg5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Rg6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.callocArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_s8R5O_info" {
     lvl33_s8R5O_info:
         const lvl33_s8R5O_entry;
         const 1;
         const 4294967312;
         const S8RcI_srt+64;
 },
 sat_s8R63_entry() //  [R1, R2]
         { []
         }
     {offset
       c8Rgf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Rgj; else goto c8Rgk;
       c8Rgj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8Rgk: // global
           I64[Sp - 16] = block_c8Rgc_info;
           _s8R5O::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _s8R5O::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8RgK; else goto c8Rgd;
       u8RgK: // global
           call _c8Rgc(R1) args: 0, res: 0, upd: 0;
       c8Rgd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8R63_info" {
     sat_s8R63_info:
         const sat_s8R63_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const S8RcI_srt+72;
 },
 _c8Rgc() //  [R1]
         { []
         }
     {offset
       c8Rgc: // global
           I64[Sp] = block_c8Rgi_info;
           _s8R5S::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8R5S::I64;
           if (R1 & 7 != 0) goto u8RgJ; else goto c8Rgm;
       u8RgJ: // global
           call _c8Rgi(R1) args: 0, res: 0, upd: 0;
       c8Rgm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Rgc_info" {
     block_c8Rgc_info:
         const _c8Rgc;
         const 1;
         const 4294967326;
         const S8RcI_srt+72;
 },
 _c8Rgi() //  [R1]
         { []
         }
     {offset
       c8Rgi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8Rgs; else goto c8Rgr;
       c8Rgs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Rgr: // global
           (_s8R60::I64) = call "ccall" arg hints:  [,]  result hints:  [PtrHint] calloc(1, I64[Sp + 8] * I64[R1 + 7]);
           if (_s8R60::I64 == 0) goto c8RgI; else goto c8RgH;
       c8RgI: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.calloc1_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8RgH: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8R60::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Rgi_info" {
     block_c8Rgi_info:
         const _c8Rgi;
         const 65;
         const 4294967326;
         const S8RcI_srt+72;
 },
 Foreign.Marshal.Array.callocArray_entry() //  [R2]
         { []
         }
     {offset
       c8RgL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8RgP; else goto c8RgO;
       c8RgP: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Array.callocArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8RgO: // global
           I64[Hp - 32] = lvl33_s8R5O_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s8R63_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.callocArray_info" {
     Foreign.Marshal.Array.callocArray_info:
         const Foreign.Marshal.Array.callocArray_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S8RcI_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.479080138 UTC

[section ""data" . Foreign.Marshal.Array.$wcallocArray0_closure" {
     Foreign.Marshal.Array.$wcallocArray0_closure:
         const Foreign.Marshal.Array.$wcallocArray0_info;
         const 0;
 },
 Foreign.Marshal.Array.$wcallocArray0_entry() //  [R2, R3]
         { []
         }
     {offset
       c8Rht: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8Rhu; else goto c8Rhv;
       c8Rhu: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.$wcallocArray0_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Rhv: // global
           I64[Sp - 16] = block_c8Rhr_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.callocArray1_closure;
           I64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.$wcallocArray0_info" {
     Foreign.Marshal.Array.$wcallocArray0_info:
         const Foreign.Marshal.Array.$wcallocArray0_entry;
         const 0;
         const 47244640270;
         const 12884901902;
         const S8RcI_srt+64;
 },
 _c8Rhr() //  [R1]
         { []
         }
     {offset
       c8Rhr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8RhA; else goto c8Rhz;
       c8RhA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Rhz: // global
           (_s8R6f::I64) = call "ccall" arg hints:  [,]  result hints:  [PtrHint] calloc(1, (I64[Sp + 8] + 1) * I64[R1 + 7]);
           if (_s8R6f::I64 == 0) goto c8RhT; else goto c8RhS;
       c8RhT: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.calloc1_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8RhS: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8R6f::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Rhr_info" {
     block_c8Rhr_info:
         const _c8Rhr;
         const 65;
         const 4294967326;
         const S8RcI_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.485411409 UTC

[section ""data" . Foreign.Marshal.Array.callocArray2_closure" {
     Foreign.Marshal.Array.callocArray2_closure:
         const Foreign.Marshal.Array.callocArray2_info;
         const 0;
 },
 Foreign.Marshal.Array.callocArray2_entry() //  [R2, R3]
         { []
         }
     {offset
       c8Rih: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Rii; else goto c8Rij;
       c8Rii: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.callocArray2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Rij: // global
           I64[Sp - 16] = block_c8Rie_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8Rin; else goto c8Rif;
       u8Rin: // global
           call _c8Rie(R1) args: 0, res: 0, upd: 0;
       c8Rif: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.callocArray2_info" {
     Foreign.Marshal.Array.callocArray2_info:
         const Foreign.Marshal.Array.callocArray2_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S8RcI_srt+88;
 },
 _c8Rie() //  [R1]
         { []
         }
     {offset
       c8Rie: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Foreign.Marshal.Array.$wcallocArray0_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Rie_info" {
     block_c8Rie_info:
         const _c8Rie;
         const 1;
         const 4294967326;
         const S8RcI_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.491384391 UTC

[section ""data" . Foreign.Marshal.Array.callocArray0_closure" {
     Foreign.Marshal.Array.callocArray0_closure:
         const Foreign.Marshal.Array.callocArray0_info;
         const 0;
 },
 Foreign.Marshal.Array.callocArray0_entry() //  [R2, R3]
         { []
         }
     {offset
       c8RiC: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.callocArray2_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.callocArray0_info" {
     Foreign.Marshal.Array.callocArray0_info:
         const Foreign.Marshal.Array.callocArray0_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8RcI_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.494969497 UTC

[section ""data" . lvl14_r8PPt_closure" {
     lvl14_r8PPt_closure:
         const GHC.Types.I#_con_info;
         const 115;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.496544903 UTC

[section ""data" . lvl15_r8PPu_closure" {
     lvl15_r8PPu_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8PPh_closure;
         const lvl3_r8PPi_closure;
         const lvl5_r8PPk_closure;
         const lvl14_r8PPt_closure+1;
         const lvl7_r8PPm_closure+1;
         const lvl14_r8PPt_closure+1;
         const lvl8_r8PPn_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.498277956 UTC

[section ""data" . lvl16_r8PPv_closure" {
     lvl16_r8PPv_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8PPg_closure;
         const lvl15_r8PPu_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.500616933 UTC

[section ""data" . Foreign.Marshal.Array.allocaArray1_closure" {
     Foreign.Marshal.Array.allocaArray1_closure:
         const Foreign.Marshal.Array.allocaArray1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Array.allocaArray1_entry() //  [R1]
         { []
         }
     {offset
       c8RiS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8RiT; else goto c8RiU;
       c8RiT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8RiU: // global
           (_c8RiP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8RiP::I64 == 0) goto c8RiR; else goto c8RiQ;
       c8RiR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8RiQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8RiP::I64;
           R2 = lvl16_r8PPv_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.allocaArray1_info" {
     Foreign.Marshal.Array.allocaArray1_info:
         const Foreign.Marshal.Array.allocaArray1_entry;
         const 0;
         const 35188667056149;
         const S8RcI_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.508066453 UTC

[section ""data" . Foreign.Marshal.Array.allocaArray_closure" {
     Foreign.Marshal.Array.allocaArray_closure:
         const Foreign.Marshal.Array.allocaArray_info;
         const 0;
 },
 lvl33_s8R6o_entry() //  [R1]
         { []
         }
     {offset
       c8Rjb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8Rjc; else goto c8Rjd;
       c8Rjc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Rjd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.allocaArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_s8R6o_info" {
     lvl33_s8R6o_info:
         const lvl33_s8R6o_entry;
         const 1;
         const 4294967312;
         const S8RcI_srt+112;
 },
 ds1_s8R6p_entry() //  [R1]
         { []
         }
     {offset
       c8Rji: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8Rjj; else goto c8Rjk;
       c8Rjj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Rjk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.allocaArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.alignment_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s8R6p_info" {
     ds1_s8R6p_info:
         const ds1_s8R6p_entry;
         const 1;
         const 4294967312;
         const S8RcI_srt+112;
 },
 sat_s8R6M_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c8Rjt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8RjC; else goto c8RjD;
       c8RjC: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8RjD: // global
           I64[Sp - 32] = block_c8Rjq_info;
           _s8R6o::P64 = P64[R1 + 5];
           _s8R6p::P64 = P64[R1 + 13];
           R1 = R2;
           P64[Sp - 24] = _s8R6o::P64;
           P64[Sp - 16] = _s8R6p::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8Rk2; else goto c8Rjr;
       u8Rk2: // global
           call _c8Rjq(R1) args: 0, res: 0, upd: 0;
       c8Rjr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8R6M_info" {
     sat_s8R6M_info:
         const sat_s8R6M_entry;
         const 2;
         const 11;
         const 12884901903;
 },
 _c8Rjq() //  [R1]
         { []
         }
     {offset
       c8Rjq: // global
           I64[Sp] = block_c8Rjw_info;
           _s8R6u::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8R6u::I64;
           if (R1 & 7 != 0) goto u8Rk1; else goto c8Rjx;
       u8Rk1: // global
           call _c8Rjw(R1) args: 0, res: 0, upd: 0;
       c8Rjx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Rjq_info" {
     block_c8Rjq_info:
         const _c8Rjq;
         const 3;
         const 30;
 },
 _c8Rjw() //  [R1]
         { []
         }
     {offset
       c8Rjw: // global
           I64[Sp] = block_c8RjB_info;
           _s8R6w::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8R6w::I64;
           if (R1 & 7 != 0) goto u8Rk3; else goto c8RjG;
       u8Rk3: // global
           call _c8RjB(R1) args: 0, res: 0, upd: 0;
       c8RjG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Rjw_info" {
     block_c8Rjw_info:
         const _c8Rjw;
         const 67;
         const 30;
 },
 _c8RjB() //  [R1]
         { []
         }
     {offset
       c8RjB: // global
           _s8R6z::I64 = I64[Sp + 8] * I64[Sp + 16];
           I64[Sp + 16] = block_c8RjO_info;
           R2 = I64[R1 + 7];
           R1 = _s8R6z::I64;
           Sp = Sp + 16;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RjB_info" {
     block_c8RjB_info:
         const _c8RjB;
         const 195;
         const 30;
 },
 _c8RjO() //  [R1]
         { []
         }
     {offset
       c8RjO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8RjS; else goto c8RjR;
       c8RjS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8RjR: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           P64[Hp] = R1 + 16;
           I64[Sp] = block_c8RjX_info;
           R2 = Hp - 7;
           _s8R6F::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8R6F::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RjO_info" {
     block_c8RjO_info:
         const _c8RjO;
         const 1;
         const 30;
 },
 _c8RjX() //  [R1]
         { []
         }
     {offset
       c8RjX: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RjX_info" {
     block_c8RjX_info:
         const _c8RjX;
         const 1;
         const 30;
 },
 Foreign.Marshal.Array.allocaArray_entry() //  [R2]
         { []
         }
     {offset
       c8Rk4: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c8Rk8; else goto c8Rk7;
       c8Rk8: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Foreign.Marshal.Array.allocaArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8Rk7: // global
           I64[Hp - 64] = lvl33_s8R6o_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = ds1_s8R6p_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s8R6M_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 13;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.allocaArray_info" {
     Foreign.Marshal.Array.allocaArray_info:
         const Foreign.Marshal.Array.allocaArray_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8RcI_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.526681562 UTC

[section ""data" . Foreign.Marshal.Array.allocaArray0_closure" {
     Foreign.Marshal.Array.allocaArray0_closure:
         const Foreign.Marshal.Array.allocaArray0_info;
         const 0;
 },
 sat_s8R6S_entry() //  [R1]
         { []
         }
     {offset
       c8Rld: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8Rlk; else goto c8Rll;
       c8Rlk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Rll: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8Rla_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8Rlp; else goto c8Rlb;
       u8Rlp: // global
           call _c8Rla(R1) args: 0, res: 0, upd: 0;
       c8Rlb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8R6S_info" {
     sat_s8R6S_info:
         const sat_s8R6S_entry;
         const 1;
         const 16;
 },
 _c8Rla() //  [R1]
         { []
         }
     {offset
       c8Rla: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8Rlo; else goto c8Rln;
       c8Rlo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8Rln: // global
           _s8R6R::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8R6R::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8Rla_info" {
     block_c8Rla_info:
         const _c8Rla;
         const 0;
         const 30;
 },
 Foreign.Marshal.Array.allocaArray0_entry() //  [R2, R3]
         { []
         }
     {offset
       c8Rlq: // global
           _s8R6O::P64 = R3;
           _s8R6N::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c8Rlr; else goto c8Rls;
       c8Rls: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8Rlu; else goto c8Rlt;
       c8Rlu: // global
           HpAlloc = 24;
           goto c8Rlr;
       c8Rlr: // global
           R3 = _s8R6O::P64;
           R2 = _s8R6N::P64;
           R1 = Foreign.Marshal.Array.allocaArray0_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Rlt: // global
           I64[Hp - 16] = sat_s8R6S_info;
           P64[Hp] = _s8R6O::P64;
           R2 = _s8R6N::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Foreign.Marshal.Array.allocaArray_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.allocaArray0_info" {
     Foreign.Marshal.Array.allocaArray0_info:
         const Foreign.Marshal.Array.allocaArray0_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S8RcI_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.53461902 UTC

[section ""data" . lvl17_r8PPw_closure" {
     lvl17_r8PPw_closure:
         const GHC.Types.I#_con_info;
         const 133;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.536287376 UTC

[section ""data" . lvl18_r8PPx_closure" {
     lvl18_r8PPx_closure:
         const GHC.Types.I#_con_info;
         const 27;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.537929037 UTC

[section ""data" . lvl19_r8PPy_closure" {
     lvl19_r8PPy_closure:
         const GHC.Types.I#_con_info;
         const 36;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.539616542 UTC

[section ""data" . lvl20_r8PPz_closure" {
     lvl20_r8PPz_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8PPh_closure;
         const lvl3_r8PPi_closure;
         const lvl5_r8PPk_closure;
         const lvl17_r8PPw_closure+1;
         const lvl18_r8PPx_closure+1;
         const lvl17_r8PPw_closure+1;
         const lvl19_r8PPy_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.5414487 UTC

[section ""data" . lvl21_r8PPA_closure" {
     lvl21_r8PPA_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8PPg_closure;
         const lvl20_r8PPz_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.543824143 UTC

[section ""data" . Foreign.Marshal.Array.reallocArray1_closure" {
     Foreign.Marshal.Array.reallocArray1_closure:
         const Foreign.Marshal.Array.reallocArray1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Array.reallocArray1_entry() //  [R1]
         { []
         }
     {offset
       c8Rm1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Rm2; else goto c8Rm3;
       c8Rm2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Rm3: // global
           (_c8RlY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8RlY::I64 == 0) goto c8Rm0; else goto c8RlZ;
       c8Rm0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8RlZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8RlY::I64;
           R2 = lvl21_r8PPA_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.reallocArray1_info" {
     Foreign.Marshal.Array.reallocArray1_info:
         const Foreign.Marshal.Array.reallocArray1_entry;
         const 0;
         const 562954248388629;
         const S8RcI_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.550937224 UTC

[section ""data" . Foreign.Marshal.Array.reallocArray_closure" {
     Foreign.Marshal.Array.reallocArray_closure:
         const Foreign.Marshal.Array.reallocArray_info;
         const 0;
 },
 lvl33_s8R6U_entry() //  [R1]
         { []
         }
     {offset
       c8Rmk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8Rml; else goto c8Rmm;
       c8Rml: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Rmm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.reallocArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_s8R6U_info" {
     lvl33_s8R6U_info:
         const lvl33_s8R6U_entry;
         const 1;
         const 4294967312;
         const S8RcI_srt+144;
 },
 sat_s8R7f_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c8Rmv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8RmE; else goto c8RmF;
       c8RmE: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8RmF: // global
           I64[Sp - 24] = block_c8Rms_info;
           _s8R6U::P64 = P64[R1 + 5];
           R1 = R3;
           P64[Sp - 16] = _s8R6U::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8Rnm; else goto c8Rmt;
       u8Rnm: // global
           call _c8Rms(R1) args: 0, res: 0, upd: 0;
       c8Rmt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8R7f_info" {
     sat_s8R7f_info:
         const sat_s8R7f_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const S8RcI_srt+152;
 },
 _c8Rms() //  [R1]
         { []
         }
     {offset
       c8Rms: // global
           I64[Sp] = block_c8Rmy_info;
           _s8R6Z::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8R6Z::I64;
           if (R1 & 7 != 0) goto u8Rnl; else goto c8Rmz;
       u8Rnl: // global
           call _c8Rmy(R1) args: 0, res: 0, upd: 0;
       c8Rmz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Rms_info" {
     block_c8Rms_info:
         const _c8Rms;
         const 2;
         const 4294967326;
         const S8RcI_srt+152;
 },
 _c8Rmy() //  [R1]
         { []
         }
     {offset
       c8Rmy: // global
           I64[Sp] = block_c8RmD_info;
           _s8R71::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8R71::I64;
           if (R1 & 7 != 0) goto u8Rnn; else goto c8RmI;
       u8Rnn: // global
           call _c8RmD(R1) args: 0, res: 0, upd: 0;
       c8RmI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Rmy_info" {
     block_c8Rmy_info:
         const _c8Rmy;
         const 66;
         const 4294967326;
         const S8RcI_srt+152;
 },
 _c8RmD() //  [R1]
         { []
         }
     {offset
       c8RmD: // global
           _s8R73::I64 = I64[R1 + 7];
           _s8R74::I64 = I64[Sp + 8] * I64[Sp + 16];
           if (_s8R74::I64 != 0) goto u8Rnj; else goto c8Rnd;
       u8Rnj: // global
           I64[Sp + 8] = _s8R74::I64;
           I64[Sp + 16] = _s8R73::I64;
           Sp = Sp + 8;
           call _c8RmT() args: 0, res: 0, upd: 0;
       c8Rnd: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(_s8R73::I64);
           R1 = GHC.Ptr.nullPtr_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RmD_info" {
     block_c8RmD_info:
         const _c8RmD;
         const 194;
         const 4294967326;
         const S8RcI_srt+152;
 },
 _c8RmT() //  []
         { []
         }
     {offset
       c8RmT: // global
           Hp = Hp + 16;
           _s8R74::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c8RmX; else goto c8RmW;
       c8RmX: // global
           HpAlloc = 16;
           I64[Sp] = block_c8RmQ_info;
           R1 = _s8R74::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c8RmW: // global
           (_s8R79::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] realloc(I64[Sp + 8], _s8R74::I64);
           if (_s8R79::I64 == 0) goto c8Rna; else goto c8Rn9;
       c8Rna: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.realloc2_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8Rn9: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8R79::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8RmQ() //  [R1]
         { []
         }
     {offset
       c8RmQ: // global
           I64[Sp] = R1;
           call _c8RmT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8RmQ_info" {
     block_c8RmQ_info:
         const _c8RmQ;
         const 65;
         const 4294967326;
         const S8RcI_srt+152;
 },
 Foreign.Marshal.Array.reallocArray_entry() //  [R2]
         { []
         }
     {offset
       c8Rnq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8Rnu; else goto c8Rnt;
       c8Rnu: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Array.reallocArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8Rnt: // global
           I64[Hp - 32] = lvl33_s8R6U_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s8R7f_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.reallocArray_info" {
     Foreign.Marshal.Array.reallocArray_info:
         const Foreign.Marshal.Array.reallocArray_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S8RcI_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.568424749 UTC

[section ""data" . Foreign.Marshal.Array.$wreallocArray0_closure" {
     Foreign.Marshal.Array.$wreallocArray0_closure:
         const Foreign.Marshal.Array.$wreallocArray0_info;
         const 0;
 },
 Foreign.Marshal.Array.$wreallocArray0_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Roj: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c8Rok; else goto c8Rol;
       c8Rok: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.$wreallocArray0_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Rol: // global
           I64[Sp - 24] = block_c8Roh_info;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = Foreign.Marshal.Array.reallocArray1_closure;
           I64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 40;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.$wreallocArray0_info" {
     Foreign.Marshal.Array.$wreallocArray0_info:
         const Foreign.Marshal.Array.$wreallocArray0_entry;
         const 0;
         const 47244640270;
         const 17179869204;
         const S8RcI_srt+144;
 },
 _c8Roh() //  [R1]
         { []
         }
     {offset
       c8Roh: // global
           _s8R7n::I64 = (I64[Sp + 16] + 1) * I64[R1 + 7];
           if (_s8R7n::I64 != 0) goto u8RoY; else goto c8RoS;
       u8RoY: // global
           I64[Sp + 16] = _s8R7n::I64;
           Sp = Sp + 8;
           call _c8Roy() args: 0, res: 0, upd: 0;
       c8RoS: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(I64[Sp + 8]);
           R1 = GHC.Ptr.nullPtr_closure;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Roh_info" {
     block_c8Roh_info:
         const _c8Roh;
         const 194;
         const 4294967326;
         const S8RcI_srt+152;
 },
 _c8Roy() //  []
         { []
         }
     {offset
       c8Roy: // global
           Hp = Hp + 16;
           _s8R7n::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c8RoC; else goto c8RoB;
       c8RoC: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c8Rov_info;
           R1 = _s8R7n::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c8RoB: // global
           (_s8R7s::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] realloc(I64[Sp], _s8R7n::I64);
           if (_s8R7s::I64 == 0) goto c8RoP; else goto c8RoO;
       c8RoP: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.realloc2_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8RoO: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8R7s::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8Rov() //  [R1]
         { []
         }
     {offset
       c8Rov: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c8Roy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Rov_info" {
     block_c8Rov_info:
         const _c8Rov;
         const 194;
         const 4294967326;
         const S8RcI_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.577664005 UTC

[section ""data" . Foreign.Marshal.Array.reallocArray2_closure" {
     Foreign.Marshal.Array.reallocArray2_closure:
         const Foreign.Marshal.Array.reallocArray2_info;
         const 0;
 },
 Foreign.Marshal.Array.reallocArray2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Rpw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8RpA; else goto c8RpB;
       c8RpA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.reallocArray2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8RpB: // global
           I64[Sp - 24] = block_c8Rpt_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8RpJ; else goto c8Rpu;
       u8RpJ: // global
           call _c8Rpt(R1) args: 0, res: 0, upd: 0;
       c8Rpu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.reallocArray2_info" {
     Foreign.Marshal.Array.reallocArray2_info:
         const Foreign.Marshal.Array.reallocArray2_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S8RcI_srt+168;
 },
 _c8Rpt() //  [R1]
         { []
         }
     {offset
       c8Rpt: // global
           I64[Sp] = block_c8Rpz_info;
           _s8R7D::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8R7D::I64;
           if (R1 & 7 != 0) goto u8RpI; else goto c8RpD;
       u8RpI: // global
           call _c8Rpz(R1) args: 0, res: 0, upd: 0;
       c8RpD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Rpt_info" {
     block_c8Rpt_info:
         const _c8Rpt;
         const 2;
         const 4294967326;
         const S8RcI_srt+168;
 },
 _c8Rpz() //  [R1]
         { []
         }
     {offset
       c8Rpz: // global
           R4 = I64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Foreign.Marshal.Array.$wreallocArray0_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Rpz_info" {
     block_c8Rpz_info:
         const _c8Rpz;
         const 130;
         const 4294967326;
         const S8RcI_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.584653276 UTC

[section ""data" . Foreign.Marshal.Array.reallocArray0_closure" {
     Foreign.Marshal.Array.reallocArray0_closure:
         const Foreign.Marshal.Array.reallocArray0_info;
         const 0;
 },
 Foreign.Marshal.Array.reallocArray0_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Rq3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.reallocArray2_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.reallocArray0_info" {
     Foreign.Marshal.Array.reallocArray0_info:
         const Foreign.Marshal.Array.reallocArray0_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S8RcI_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.588082778 UTC

[section ""data" . Foreign.Marshal.Array.lengthArray2_closure" {
     Foreign.Marshal.Array.lengthArray2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.592121435 UTC

[section ""data" . Foreign.Marshal.Array.$wpeekArray_closure" {
     Foreign.Marshal.Array.$wpeekArray_closure:
         const Foreign.Marshal.Array.$wpeekArray_info;
 },
 Foreign.Marshal.Array.$wpeekArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8RqB: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8RqC; else goto c8RqD;
       c8RqC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.$wpeekArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8RqD: // global
           if (%MO_S_Gt_W64(R3, 0)) goto c8Rqz; else goto c8RqA;
       c8Rqz: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R3 - 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call _c8Rqp() args: 0, res: 0, upd: 0;
       c8RqA: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.$wpeekArray_info" {
     Foreign.Marshal.Array.$wpeekArray_info:
         const Foreign.Marshal.Array.$wpeekArray_entry;
         const 0;
         const 14;
         const 17179869205;
 },
 _c8Rqp() //  []
         { []
         }
     {offset
       c8Rqp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8RqQ; else goto c8RqP;
       c8RqQ: // global
           HpAlloc = 16;
           I64[Sp] = block_c8Rqp_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c8RqP: // global
           _s8R7G::P64 = P64[Sp + 8];
           _s8R7I::P64 = P64[Sp + 16];
           _s8R7W::I64 = I64[Sp + 24];
           if (_s8R7W::I64 != 0) goto c8RqS; else goto c8RqW;
       c8RqS: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8R7W::I64;
           I64[Sp] = block_c8Rqv_info;
           R2 = _s8R7G::P64;
           I64[Sp - 24] = stg_ap_ppv_info;
           P64[Sp - 16] = _s8R7I::P64;
           P64[Sp - 8] = Hp - 7;
           I64[Sp + 24] = _s8R7W::I64;
           Sp = Sp - 24;
           call Foreign.Storable.peekElemOff_entry(R2) args: 32, res: 8, upd: 8;
       c8RqW: // global
           Hp = Hp - 16;
           I64[Sp + 24] = block_c8RqH_info;
           R2 = _s8R7G::P64;
           I64[Sp] = stg_ap_ppv_info;
           P64[Sp + 8] = _s8R7I::P64;
           P64[Sp + 16] = Foreign.Marshal.Array.lengthArray2_closure+1;
           P64[Sp + 32] = P64[Sp + 32];
           call Foreign.Storable.peekElemOff_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Rqp_info" {
     block_c8Rqp_info:
         const _c8Rqp;
         const 260;
         const 30;
 },
 _c8Rqv() //  [R1]
         { []
         }
     {offset
       c8Rqv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8RqV; else goto c8RqU;
       c8RqV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8RqU: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 24] = I64[Sp + 24] - 1;
           P64[Sp + 32] = Hp - 14;
           call _c8Rqp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Rqv_info" {
     block_c8Rqv_info:
         const _c8Rqv;
         const 260;
         const 30;
 },
 _c8RqH() //  [R1]
         { []
         }
     {offset
       c8RqH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8RqN; else goto c8RqM;
       c8RqN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8RqM: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RqH_info" {
     block_c8RqH_info:
         const _c8RqH;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.602663117 UTC

[section ""data" . Foreign.Marshal.Array.peekArray1_closure" {
     Foreign.Marshal.Array.peekArray1_closure:
         const Foreign.Marshal.Array.peekArray1_info;
 },
 Foreign.Marshal.Array.peekArray1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8RrH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8RrI; else goto c8RrJ;
       c8RrI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.peekArray1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8RrJ: // global
           I64[Sp - 24] = block_c8RrE_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8RrN; else goto c8RrF;
       u8RrN: // global
           call _c8RrE(R1) args: 0, res: 0, upd: 0;
       c8RrF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.peekArray1_info" {
     Foreign.Marshal.Array.peekArray1_info:
         const Foreign.Marshal.Array.peekArray1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c8RrE() //  [R1]
         { []
         }
     {offset
       c8RrE: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Foreign.Marshal.Array.$wpeekArray_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RrE_info" {
     block_c8RrE_info:
         const _c8RrE;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.608485156 UTC

[section ""data" . Foreign.Marshal.Array.peekArray_closure" {
     Foreign.Marshal.Array.peekArray_closure:
         const Foreign.Marshal.Array.peekArray_info;
 },
 Foreign.Marshal.Array.peekArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Rs2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.peekArray1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.peekArray_info" {
     Foreign.Marshal.Array.peekArray_info:
         const Foreign.Marshal.Array.peekArray_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.613305823 UTC

[section ""data" . Foreign.Marshal.Array.newArray2_closure" {
     Foreign.Marshal.Array.newArray2_closure:
         const Foreign.Marshal.Array.newArray2_info;
 },
 Foreign.Marshal.Array.newArray2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Rsf: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c8Rsg; else goto c8Rsh;
       c8Rsg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.newArray2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Rsh: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           I64[Sp - 8] = 0;
           Sp = Sp - 32;
           call _c8Rsi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.newArray2_info" {
     Foreign.Marshal.Array.newArray2_info:
         const Foreign.Marshal.Array.newArray2_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c8Rsi() //  []
         { []
         }
     {offset
       c8Rsi: // global
           I64[Sp - 8] = block_c8Rsl_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8RsJ; else goto c8Rsn;
       u8RsJ: // global
           call _c8Rsl(R1) args: 0, res: 0, upd: 0;
       c8Rsn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8Rsl() //  [R1]
         { []
         }
     {offset
       c8Rsl: // global
           if (R1 & 7 == 1) goto c8Rst; else goto c8Rsy;
       c8Rst: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8Rsy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8RsB; else goto c8RsA;
       c8RsB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8RsA: // global
           _s8R8j::P64 = P64[R1 + 6];
           _s8R8k::P64 = P64[R1 + 14];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 32];
           I64[Sp] = block_c8Rsx_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_pppv_info;
           P64[Sp - 24] = P64[Sp + 16];
           P64[Sp - 16] = Hp - 7;
           P64[Sp - 8] = _s8R8j::P64;
           P64[Sp + 24] = _s8R8k::P64;
           Sp = Sp - 32;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Rsl_info" {
     block_c8Rsl_info:
         const _c8Rsl;
         const 772;
         const 30;
 },
 _c8Rsx() //  []
         { []
         }
     {offset
       c8Rsx: // global
           P64[Sp + 24] = P64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32] + 1;
           Sp = Sp + 8;
           call _c8Rsi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Rsx_info" {
     block_c8Rsx_info:
         const _c8Rsx;
         const 516;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.62166735 UTC

[section ""data" . Foreign.Marshal.Array.pokeArray_closure" {
     Foreign.Marshal.Array.pokeArray_closure:
         const Foreign.Marshal.Array.pokeArray_info;
 },
 Foreign.Marshal.Array.pokeArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Rtf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.newArray2_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.pokeArray_info" {
     Foreign.Marshal.Array.pokeArray_info:
         const Foreign.Marshal.Array.pokeArray_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.626769732 UTC

[section ""data" . Foreign.Marshal.Array.withArrayLen_closure" {
     Foreign.Marshal.Array.withArrayLen_closure:
         const Foreign.Marshal.Array.withArrayLen_info;
         const 0;
 },
 len_s8R8t_entry() //  [R1]
         { []
         }
     {offset
       c8Rtw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8RtA; else goto c8RtB;
       c8RtA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8RtB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8Rtu_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . len_s8R8t_info" {
     len_s8R8t_info:
         const len_s8R8t_entry;
         const 1;
         const 16;
 },
 _c8Rtu() //  [R1]
         { []
         }
     {offset
       c8Rtu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8RtE; else goto c8RtD;
       c8RtE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c8RtD: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8Rtu_info" {
     block_c8Rtu_info:
         const _c8Rtu;
         const 0;
         const 30;
 },
 sat_s8R8A_entry() //  [R1, R2]
         { []
         }
     {offset
       c8RtM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8RtN; else goto c8RtO;
       c8RtN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8RtO: // global
           I64[Sp - 32] = block_c8RtK_info;
           R4 = P64[R1 + 14];
           R3 = R2;
           _s8R8v::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 22];
           P64[Sp - 16] = P64[R1 + 30];
           P64[Sp - 8] = _s8R8v::P64;
           Sp = Sp - 32;
           call Foreign.Marshal.Array.newArray2_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8R8A_info" {
     sat_s8R8A_info:
         const sat_s8R8A_entry;
         const 4;
         const 8;
         const 8589934597;
 },
 _c8RtK() //  []
         { []
         }
     {offset
       c8RtK: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RtK_info" {
     block_c8RtK_info:
         const _c8RtK;
         const 3;
         const 30;
 },
 Foreign.Marshal.Array.withArrayLen_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8RtQ: // global
           _s8R8s::P64 = R4;
           _s8R8r::P64 = R3;
           _s8R8q::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c8RtR; else goto c8RtS;
       c8RtS: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c8RtU; else goto c8RtT;
       c8RtU: // global
           HpAlloc = 64;
           goto c8RtR;
       c8RtR: // global
           R4 = _s8R8s::P64;
           R3 = _s8R8r::P64;
           R2 = _s8R8q::P64;
           R1 = Foreign.Marshal.Array.withArrayLen_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8RtT: // global
           I64[Hp - 56] = len_s8R8t_info;
           P64[Hp - 40] = _s8R8r::P64;
           I64[Hp - 32] = sat_s8R8A_info;
           P64[Hp - 24] = _s8R8q::P64;
           P64[Hp - 16] = _s8R8r::P64;
           P64[Hp - 8] = _s8R8s::P64;
           _c8Rtq::P64 = Hp - 56;
           P64[Hp] = _c8Rtq::P64;
           R2 = _s8R8q::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _c8Rtq::P64;
           P64[Sp - 8] = Hp - 30;
           Sp = Sp - 24;
           call Foreign.Marshal.Array.allocaArray_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.withArrayLen_info" {
     Foreign.Marshal.Array.withArrayLen_info:
         const Foreign.Marshal.Array.withArrayLen_entry;
         const 0;
         const 1103806595086;
         const 12884901911;
         const S8RcI_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.639713885 UTC

[section ""data" . Foreign.Marshal.Array.withArray_closure" {
     Foreign.Marshal.Array.withArray_closure:
         const Foreign.Marshal.Array.withArray_info;
         const 0;
 },
 sat_s8R8L_entry() //  [R1, R2]
         { []
         }
     {offset
       c8RuA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8RuB; else goto c8RuC;
       c8RuB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8RuC: // global
           I64[Sp - 24] = block_c8Ruy_info;
           R4 = P64[R1 + 14];
           R3 = R2;
           _s8R8G::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = P64[R1 + 22];
           P64[Sp - 8] = _s8R8G::P64;
           Sp = Sp - 24;
           call Foreign.Marshal.Array.newArray2_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8R8L_info" {
     sat_s8R8L_info:
         const sat_s8R8L_entry;
         const 3;
         const 8;
         const 8589934597;
 },
 _c8Ruy() //  []
         { []
         }
     {offset
       c8Ruy: // global
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Ruy_info" {
     block_c8Ruy_info:
         const _c8Ruy;
         const 2;
         const 30;
 },
 sat_s8R8F_entry() //  [R1]
         { []
         }
     {offset
       c8RuK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8RuO; else goto c8RuP;
       c8RuO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8RuP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8RuI_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8R8F_info" {
     sat_s8R8F_info:
         const sat_s8R8F_entry;
         const 1;
         const 16;
 },
 _c8RuI() //  [R1]
         { []
         }
     {offset
       c8RuI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8RuS; else goto c8RuR;
       c8RuS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c8RuR: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8RuI_info" {
     block_c8RuI_info:
         const _c8RuI;
         const 0;
         const 30;
 },
 Foreign.Marshal.Array.withArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8RuT: // global
           _s8R8D::P64 = R4;
           _s8R8C::P64 = R3;
           _s8R8B::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c8RuU; else goto c8RuV;
       c8RuV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c8RuX; else goto c8RuW;
       c8RuX: // global
           HpAlloc = 56;
           goto c8RuU;
       c8RuU: // global
           R4 = _s8R8D::P64;
           R3 = _s8R8C::P64;
           R2 = _s8R8B::P64;
           R1 = Foreign.Marshal.Array.withArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8RuW: // global
           I64[Hp - 48] = sat_s8R8L_info;
           P64[Hp - 40] = _s8R8B::P64;
           P64[Hp - 32] = _s8R8C::P64;
           P64[Hp - 24] = _s8R8D::P64;
           I64[Hp - 16] = sat_s8R8F_info;
           P64[Hp] = _s8R8C::P64;
           R2 = _s8R8B::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 46;
           Sp = Sp - 24;
           call Foreign.Marshal.Array.allocaArray_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.withArray_info" {
     Foreign.Marshal.Array.withArray_info:
         const Foreign.Marshal.Array.withArray_entry;
         const 0;
         const 2203318222862;
         const 12884901911;
         const S8RcI_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.652400019 UTC

[section ""data" . Foreign.Marshal.Array.newArray1_closure" {
     Foreign.Marshal.Array.newArray1_closure:
         const Foreign.Marshal.Array.newArray1_info;
         const 0;
 },
 Foreign.Marshal.Array.newArray1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8Rvy: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c8RvC; else goto c8RvD;
       c8RvC: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.newArray1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8RvD: // global
           I64[Sp - 24] = block_c8Rvw_info;
           _s8R8N::P64 = R3;
           R3 = 0;
           _s8R8M::P64 = R2;
           R2 = _s8R8N::P64;
           P64[Sp - 16] = _s8R8M::P64;
           P64[Sp - 8] = _s8R8N::P64;
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.newArray1_info" {
     Foreign.Marshal.Array.newArray1_info:
         const Foreign.Marshal.Array.newArray1_entry;
         const 0;
         const 36028809903865870;
         const 12884901903;
         const S8RcI_srt+16;
 },
 _c8Rvw() //  [R1]
         { []
         }
     {offset
       c8Rvw: // global
           I64[Sp - 8] = block_c8RvB_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = Foreign.Marshal.Array.mallocArray1_closure;
           I64[Sp] = R1;
           Sp = Sp - 24;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Rvw_info" {
     block_c8Rvw_info:
         const _c8Rvw;
         const 2;
         const 12884901918;
         const S8RcI_srt+16;
 },
 _c8RvB() //  [R1]
         { []
         }
     {offset
       c8RvB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8RvK; else goto c8RvJ;
       c8RvK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8RvJ: // global
           _s8R8M::P64 = P64[Sp + 16];
           _s8R8N::P64 = P64[Sp + 24];
           (_s8R8X::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[Sp + 8] * I64[R1 + 7]);
           if (_s8R8X::I64 == 0) goto c8Rw2; else goto c8RvZ;
       c8Rw2: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8RvZ: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8R8X::I64;
           I64[Sp + 16] = block_c8RvX_info;
           R4 = _s8R8N::P64;
           _c8RvW::P64 = Hp - 7;
           R3 = _c8RvW::P64;
           R2 = _s8R8M::P64;
           P64[Sp + 24] = _c8RvW::P64;
           Sp = Sp + 16;
           call Foreign.Marshal.Array.newArray2_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RvB_info" {
     block_c8RvB_info:
         const _c8RvB;
         const 67;
         const 4294967326;
         const S8RcI_srt+24;
 },
 _c8RvX() //  []
         { []
         }
     {offset
       c8RvX: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RvX_info" {
     block_c8RvX_info:
         const _c8RvX;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.66147597 UTC

[section ""data" . Foreign.Marshal.Array.newArray_closure" {
     Foreign.Marshal.Array.newArray_closure:
         const Foreign.Marshal.Array.newArray_info;
         const 0;
 },
 Foreign.Marshal.Array.newArray_entry() //  [R2, R3]
         { []
         }
     {offset
       c8Rwu: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.newArray1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.newArray_info" {
     Foreign.Marshal.Array.newArray_info:
         const Foreign.Marshal.Array.newArray_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8RcI_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.666852433 UTC

[section ""data" . Foreign.Marshal.Array.newArray4_closure" {
     Foreign.Marshal.Array.newArray4_closure:
         const Foreign.Marshal.Array.newArray4_info;
 },
 Foreign.Marshal.Array.newArray4_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8RwJ: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c8RwK; else goto c8RwL;
       c8RwK: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.newArray4_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8RwL: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = 0;
           Sp = Sp - 40;
           call _c8RwS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.newArray4_info" {
     Foreign.Marshal.Array.newArray4_info:
         const Foreign.Marshal.Array.newArray4_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _c8RwS() //  []
         { []
         }
     {offset
       c8RwS: // global
           I64[Sp - 8] = block_c8RwV_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8Rxn; else goto c8RwX;
       u8Rxn: // global
           call _c8RwV(R1) args: 0, res: 0, upd: 0;
       c8RwX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8RwV() //  [R1]
         { []
         }
     {offset
       c8RwV: // global
           _s8R9e::I64 = I64[Sp + 40];
           if (R1 & 7 == 1) goto c8Rx3; else goto c8Rx8;
       c8Rx3: // global
           I64[Sp + 40] = _s8R9e::I64;
           Sp = Sp + 8;
           call _c8RwN() args: 0, res: 0, upd: 0;
       c8Rx8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8Rxb; else goto c8Rxa;
       c8Rxb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Rxa: // global
           _s8R9h::P64 = P64[R1 + 6];
           _s8R9i::P64 = P64[R1 + 14];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8R9e::I64;
           I64[Sp] = block_c8Rx7_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_pppv_info;
           P64[Sp - 24] = P64[Sp + 24];
           P64[Sp - 16] = Hp - 7;
           P64[Sp - 8] = _s8R9h::P64;
           P64[Sp + 32] = _s8R9i::P64;
           Sp = Sp - 32;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RwV_info" {
     block_c8RwV_info:
         const _c8RwV;
         const 1541;
         const 30;
 },
 _c8RwN() //  []
         { []
         }
     {offset
       c8RwN: // global
           Hp = Hp + 16;
           _s8R99::I64 = I64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto c8RwR; else goto c8RwQ;
       c8RwR: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c8RwM_info;
           R1 = _s8R99::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c8RwQ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8R99::I64;
           R2 = P64[Sp];
           _s8R94::P64 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pppv_info;
           P64[Sp + 24] = Hp - 7;
           P64[Sp + 32] = _s8R94::P64;
           Sp = Sp + 8;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 _c8RwM() //  [R1]
         { []
         }
     {offset
       c8RwM: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _c8RwN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8RwM_info" {
     block_c8RwM_info:
         const _c8RwM;
         const 1541;
         const 30;
 },
 _c8Rx7() //  []
         { []
         }
     {offset
       c8Rx7: // global
           P64[Sp + 32] = P64[Sp + 32];
           I64[Sp + 40] = I64[Sp + 40] + 1;
           Sp = Sp + 8;
           call _c8RwS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Rx7_info" {
     block_c8Rx7_info:
         const _c8Rx7;
         const 1029;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.677992465 UTC

[section ""data" . Foreign.Marshal.Array.pokeArray0_closure" {
     Foreign.Marshal.Array.pokeArray0_closure:
         const Foreign.Marshal.Array.pokeArray0_info;
 },
 Foreign.Marshal.Array.pokeArray0_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8Ry0: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.newArray4_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.pokeArray0_info" {
     Foreign.Marshal.Array.pokeArray0_info:
         const Foreign.Marshal.Array.pokeArray0_entry;
         const 0;
         const 14;
         const 21474836504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.684579002 UTC

[section ""data" . Foreign.Marshal.Array.withArrayLen0_closure" {
     Foreign.Marshal.Array.withArrayLen0_closure:
         const Foreign.Marshal.Array.withArrayLen0_info;
         const 0;
 },
 len_s8R9s_entry() //  [R1]
         { []
         }
     {offset
       c8Ryh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8Ryl; else goto c8Rym;
       c8Ryl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Rym: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8Ryf_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . len_s8R9s_info" {
     len_s8R9s_info:
         const len_s8R9s_entry;
         const 1;
         const 16;
 },
 _c8Ryf() //  [R1]
         { []
         }
     {offset
       c8Ryf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8Ryp; else goto c8Ryo;
       c8Ryp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c8Ryo: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8Ryf_info" {
     block_c8Ryf_info:
         const _c8Ryf;
         const 0;
         const 30;
 },
 sat_s8R9D_entry() //  [R1, R2]
         { []
         }
     {offset
       c8Ryx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8Ryy; else goto c8Ryz;
       c8Ryy: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8Ryz: // global
           I64[Sp - 32] = block_c8Ryv_info;
           R5 = P64[R1 + 22];
           R4 = R2;
           R3 = P64[R1 + 14];
           _s8R9y::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 30];
           P64[Sp - 16] = P64[R1 + 38];
           P64[Sp - 8] = _s8R9y::P64;
           Sp = Sp - 32;
           call Foreign.Marshal.Array.newArray4_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8R9D_info" {
     sat_s8R9D_info:
         const sat_s8R9D_entry;
         const 5;
         const 8;
         const 8589934597;
 },
 _c8Ryv() //  []
         { []
         }
     {offset
       c8Ryv: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Ryv_info" {
     block_c8Ryv_info:
         const _c8Ryv;
         const 3;
         const 30;
 },
 sat_s8R9x_entry() //  [R1]
         { []
         }
     {offset
       c8RyI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8RyP; else goto c8RyQ;
       c8RyP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8RyQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8RyF_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8RyU; else goto c8RyG;
       u8RyU: // global
           call _c8RyF(R1) args: 0, res: 0, upd: 0;
       c8RyG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8R9x_info" {
     sat_s8R9x_info:
         const sat_s8R9x_entry;
         const 1;
         const 16;
 },
 _c8RyF() //  [R1]
         { []
         }
     {offset
       c8RyF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8RyT; else goto c8RyS;
       c8RyT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8RyS: // global
           _s8R9w::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8R9w::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8RyF_info" {
     block_c8RyF_info:
         const _c8RyF;
         const 0;
         const 30;
 },
 Foreign.Marshal.Array.withArrayLen0_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8RyV: // global
           _s8R9r::P64 = R5;
           _s8R9q::P64 = R4;
           _s8R9p::P64 = R3;
           _s8R9o::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c8RyW; else goto c8RyX;
       c8RyX: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c8RyZ; else goto c8RyY;
       c8RyZ: // global
           HpAlloc = 96;
           goto c8RyW;
       c8RyW: // global
           R5 = _s8R9r::P64;
           R4 = _s8R9q::P64;
           R3 = _s8R9p::P64;
           R2 = _s8R9o::P64;
           R1 = Foreign.Marshal.Array.withArrayLen0_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8RyY: // global
           I64[Hp - 88] = len_s8R9s_info;
           P64[Hp - 72] = _s8R9q::P64;
           I64[Hp - 64] = sat_s8R9D_info;
           P64[Hp - 56] = _s8R9o::P64;
           P64[Hp - 48] = _s8R9p::P64;
           P64[Hp - 40] = _s8R9q::P64;
           P64[Hp - 32] = _s8R9r::P64;
           _c8Ryb::P64 = Hp - 88;
           P64[Hp - 24] = _c8Ryb::P64;
           I64[Hp - 16] = sat_s8R9x_info;
           P64[Hp] = _c8Ryb::P64;
           R2 = _s8R9o::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 62;
           Sp = Sp - 24;
           call Foreign.Marshal.Array.allocaArray_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.withArrayLen0_info" {
     Foreign.Marshal.Array.withArrayLen0_info:
         const Foreign.Marshal.Array.withArrayLen0_entry;
         const 0;
         const 8800387989518;
         const 17179869208;
         const S8RcI_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.699799389 UTC

[section ""data" . Foreign.Marshal.Array.withArray0_closure" {
     Foreign.Marshal.Array.withArray0_closure:
         const Foreign.Marshal.Array.withArray0_info;
         const 0;
 },
 sat_s8R9J_entry() //  [R1]
         { []
         }
     {offset
       c8RzS: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8R9J_info" {
     sat_s8R9J_info:
         const sat_s8R9J_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Foreign.Marshal.Array.withArray0_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8RzV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8RzZ; else goto c8RzY;
       c8RzZ: // global
           HpAlloc = 16;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.withArray0_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8RzY: // global
           I64[Hp - 8] = sat_s8R9J_info;
           P64[Hp] = R5;
           R5 = Hp - 7;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.withArrayLen0_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.withArray0_info" {
     Foreign.Marshal.Array.withArray0_info:
         const Foreign.Marshal.Array.withArray0_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S8RcI_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.706400838 UTC

[section ""data" . Foreign.Marshal.Array.newArray3_closure" {
     Foreign.Marshal.Array.newArray3_closure:
         const Foreign.Marshal.Array.newArray3_info;
         const 0;
 },
 Foreign.Marshal.Array.newArray3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8RAe: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c8RAi; else goto c8RAj;
       c8RAi: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.newArray3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8RAj: // global
           I64[Sp - 32] = block_c8RAc_info;
           _s8R9L::P64 = R3;
           R3 = 0;
           _s8R9K::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _s8R9K::P64;
           P64[Sp - 16] = _s8R9L::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.newArray3_info" {
     Foreign.Marshal.Array.newArray3_info:
         const Foreign.Marshal.Array.newArray3_entry;
         const 0;
         const 288230389036613646;
         const 17179869207;
         const S8RcI_srt+16;
 },
 _c8RAc() //  [R1]
         { []
         }
     {offset
       c8RAc: // global
           I64[Sp - 8] = block_c8RAh_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = Foreign.Marshal.Array.mallocArray1_closure;
           I64[Sp] = R1;
           Sp = Sp - 24;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RAc_info" {
     block_c8RAc_info:
         const _c8RAc;
         const 3;
         const 12884901918;
         const S8RcI_srt+16;
 },
 _c8RAh() //  [R1]
         { []
         }
     {offset
       c8RAh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8RAq; else goto c8RAp;
       c8RAq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8RAp: // global
           _s8R9K::P64 = P64[Sp + 16];
           _s8R9L::P64 = P64[Sp + 24];
           _s8R9M::P64 = P64[Sp + 32];
           (_s8R9X::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc((I64[Sp + 8] + 1) * I64[R1 + 7]);
           if (_s8R9X::I64 == 0) goto c8RAL; else goto c8RAI;
       c8RAL: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8RAI: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8R9X::I64;
           I64[Sp + 24] = block_c8RAG_info;
           R5 = _s8R9M::P64;
           _c8RAF::P64 = Hp - 7;
           R4 = _c8RAF::P64;
           R3 = _s8R9L::P64;
           R2 = _s8R9K::P64;
           P64[Sp + 32] = _c8RAF::P64;
           Sp = Sp + 24;
           call Foreign.Marshal.Array.newArray4_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RAh_info" {
     block_c8RAh_info:
         const _c8RAh;
         const 68;
         const 4294967326;
         const S8RcI_srt+24;
 },
 _c8RAG() //  []
         { []
         }
     {offset
       c8RAG: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RAG_info" {
     block_c8RAG_info:
         const _c8RAG;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.715770926 UTC

[section ""data" . Foreign.Marshal.Array.newArray0_closure" {
     Foreign.Marshal.Array.newArray0_closure:
         const Foreign.Marshal.Array.newArray0_info;
         const 0;
 },
 Foreign.Marshal.Array.newArray0_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8RBe: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.newArray3_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.newArray0_info" {
     Foreign.Marshal.Array.newArray0_info:
         const Foreign.Marshal.Array.newArray0_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S8RcI_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.719504278 UTC

[section ""data" . lvl22_r8PPB_closure" {
     lvl22_r8PPB_closure:
         const GHC.Types.I#_con_info;
         const 242;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.721235158 UTC

[section ""data" . lvl23_r8PPC_closure" {
     lvl23_r8PPC_closure:
         const GHC.Types.I#_con_info;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.723024344 UTC

[section ""data" . lvl24_r8PPD_closure" {
     lvl24_r8PPD_closure:
         const GHC.Types.I#_con_info;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.724864527 UTC

[section ""data" . lvl25_r8PPE_closure" {
     lvl25_r8PPE_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8PPh_closure;
         const lvl3_r8PPi_closure;
         const lvl5_r8PPk_closure;
         const lvl22_r8PPB_closure+1;
         const lvl23_r8PPC_closure+1;
         const lvl22_r8PPB_closure+1;
         const lvl24_r8PPD_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.72700164 UTC

[section ""data" . lvl26_r8PPF_closure" {
     lvl26_r8PPF_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8PPg_closure;
         const lvl25_r8PPE_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.72948792 UTC

[section ""data" . Foreign.Marshal.Array.copyArray1_closure" {
     Foreign.Marshal.Array.copyArray1_closure:
         const Foreign.Marshal.Array.copyArray1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Array.copyArray1_entry() //  [R1]
         { []
         }
     {offset
       c8RBw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8RBx; else goto c8RBy;
       c8RBx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8RBy: // global
           (_c8RBt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8RBt::I64 == 0) goto c8RBv; else goto c8RBu;
       c8RBv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8RBu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8RBt::I64;
           R2 = lvl26_r8PPF_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.copyArray1_info" {
     Foreign.Marshal.Array.copyArray1_info:
         const Foreign.Marshal.Array.copyArray1_entry;
         const 0;
         const 2305843013508661269;
         const S8RcI_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.736052644 UTC

[section ""data" . Foreign.Marshal.Array.copyArray_closure" {
     Foreign.Marshal.Array.copyArray_closure:
         const Foreign.Marshal.Array.copyArray_info;
         const 0;
 },
 lvl33_s8Ra4_entry() //  [R1]
         { []
         }
     {offset
       c8RBP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8RBQ; else goto c8RBR;
       c8RBQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8RBR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.copyArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_s8Ra4_info" {
     lvl33_s8Ra4_info:
         const lvl33_s8Ra4_entry;
         const 1;
         const 4294967312;
         const S8RcI_srt+240;
 },
 sat_s8Ran_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c8RC0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8RCe; else goto c8RCf;
       c8RCe: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8RCf: // global
           I64[Sp - 32] = block_c8RBX_info;
           _s8Ra4::P64 = P64[R1 + 4];
           R1 = R2;
           P64[Sp - 24] = _s8Ra4::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8RCz; else goto c8RBY;
       u8RCz: // global
           call _c8RBX(R1) args: 0, res: 0, upd: 0;
       c8RBY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8Ran_info" {
     sat_s8Ran_info:
         const sat_s8Ran_entry;
         const 1;
         const 9;
         const 17179869207;
 },
 _c8RBX() //  [R1]
         { []
         }
     {offset
       c8RBX: // global
           I64[Sp] = block_c8RC3_info;
           _s8Raa::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8Raa::I64;
           if (R1 & 7 != 0) goto u8RCy; else goto c8RC4;
       u8RCy: // global
           call _c8RC3(R1) args: 0, res: 0, upd: 0;
       c8RC4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RBX_info" {
     block_c8RBX_info:
         const _c8RBX;
         const 3;
         const 30;
 },
 _c8RC3() //  [R1]
         { []
         }
     {offset
       c8RC3: // global
           I64[Sp] = block_c8RC8_info;
           _s8Rac::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s8Rac::I64;
           if (R1 & 7 != 0) goto u8RCA; else goto c8RC9;
       u8RCA: // global
           call _c8RC8(R1) args: 0, res: 0, upd: 0;
       c8RC9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RC3_info" {
     block_c8RC3_info:
         const _c8RC3;
         const 131;
         const 30;
 },
 _c8RC8() //  [R1]
         { []
         }
     {offset
       c8RC8: // global
           I64[Sp] = block_c8RCd_info;
           _s8Rae::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8Rae::I64;
           if (R1 & 7 != 0) goto u8RCB; else goto c8RCj;
       u8RCB: // global
           call _c8RCd(R1) args: 0, res: 0, upd: 0;
       c8RCj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RC8_info" {
     block_c8RC8_info:
         const _c8RC8;
         const 387;
         const 30;
 },
 _c8RCd() //  [R1]
         { []
         }
     {offset
       c8RCd: // global
           (_s8Ram::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(I64[Sp + 16], I64[Sp + 24], I64[Sp + 8] * I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RCd_info" {
     block_c8RCd_info:
         const _c8RCd;
         const 451;
         const 30;
 },
 Foreign.Marshal.Array.copyArray_entry() //  [R2]
         { []
         }
     {offset
       c8RCC: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8RCG; else goto c8RCF;
       c8RCG: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Array.copyArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8RCF: // global
           I64[Hp - 32] = lvl33_s8Ra4_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s8Ran_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.copyArray_info" {
     Foreign.Marshal.Array.copyArray_info:
         const Foreign.Marshal.Array.copyArray_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8RcI_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.749409845 UTC

[section ""data" . lvl27_r8PPG_closure" {
     lvl27_r8PPG_closure:
         const GHC.Types.I#_con_info;
         const 251;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.751716902 UTC

[section ""data" . lvl28_r8PPH_closure" {
     lvl28_r8PPH_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8PPh_closure;
         const lvl3_r8PPi_closure;
         const lvl5_r8PPk_closure;
         const lvl27_r8PPG_closure+1;
         const lvl23_r8PPC_closure+1;
         const lvl27_r8PPG_closure+1;
         const lvl24_r8PPD_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.753480206 UTC

[section ""data" . lvl29_r8PPI_closure" {
     lvl29_r8PPI_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8PPg_closure;
         const lvl28_r8PPH_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.755914892 UTC

[section ""data" . Foreign.Marshal.Array.moveArray1_closure" {
     Foreign.Marshal.Array.moveArray1_closure:
         const Foreign.Marshal.Array.moveArray1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Array.moveArray1_entry() //  [R1]
         { []
         }
     {offset
       c8RDx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8RDy; else goto c8RDz;
       c8RDy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8RDz: // global
           (_c8RDu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8RDu::I64 == 0) goto c8RDw; else goto c8RDv;
       c8RDw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8RDv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8RDu::I64;
           R2 = lvl29_r8PPI_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.moveArray1_info" {
     Foreign.Marshal.Array.moveArray1_info:
         const Foreign.Marshal.Array.moveArray1_entry;
         const 0;
         const 12884901909;
         const S8RcI_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.762278561 UTC

[section ""data" . Foreign.Marshal.Array.moveArray_closure" {
     Foreign.Marshal.Array.moveArray_closure:
         const Foreign.Marshal.Array.moveArray_info;
         const 0;
 },
 lvl33_s8Rap_entry() //  [R1]
         { []
         }
     {offset
       c8RDQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8RDR; else goto c8RDS;
       c8RDR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8RDS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.moveArray1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_s8Rap_info" {
     lvl33_s8Rap_info:
         const lvl33_s8Rap_entry;
         const 1;
         const 4294967312;
         const S8RcI_srt+272;
 },
 sat_s8RaI_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c8RE1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8REf; else goto c8REg;
       c8REf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8REg: // global
           I64[Sp - 32] = block_c8RDY_info;
           _s8Rap::P64 = P64[R1 + 4];
           R1 = R2;
           P64[Sp - 24] = _s8Rap::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8REA; else goto c8RDZ;
       u8REA: // global
           call _c8RDY(R1) args: 0, res: 0, upd: 0;
       c8RDZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8RaI_info" {
     sat_s8RaI_info:
         const sat_s8RaI_entry;
         const 1;
         const 9;
         const 17179869207;
 },
 _c8RDY() //  [R1]
         { []
         }
     {offset
       c8RDY: // global
           I64[Sp] = block_c8RE4_info;
           _s8Rav::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8Rav::I64;
           if (R1 & 7 != 0) goto u8REz; else goto c8RE5;
       u8REz: // global
           call _c8RE4(R1) args: 0, res: 0, upd: 0;
       c8RE5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RDY_info" {
     block_c8RDY_info:
         const _c8RDY;
         const 3;
         const 30;
 },
 _c8RE4() //  [R1]
         { []
         }
     {offset
       c8RE4: // global
           I64[Sp] = block_c8RE9_info;
           _s8Rax::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s8Rax::I64;
           if (R1 & 7 != 0) goto u8REB; else goto c8REa;
       u8REB: // global
           call _c8RE9(R1) args: 0, res: 0, upd: 0;
       c8REa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RE4_info" {
     block_c8RE4_info:
         const _c8RE4;
         const 131;
         const 30;
 },
 _c8RE9() //  [R1]
         { []
         }
     {offset
       c8RE9: // global
           I64[Sp] = block_c8REe_info;
           _s8Raz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8Raz::I64;
           if (R1 & 7 != 0) goto u8REC; else goto c8REk;
       u8REC: // global
           call _c8REe(R1) args: 0, res: 0, upd: 0;
       c8REk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RE9_info" {
     block_c8RE9_info:
         const _c8RE9;
         const 387;
         const 30;
 },
 _c8REe() //  [R1]
         { []
         }
     {offset
       c8REe: // global
           (_s8RaH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memmove(I64[Sp + 16], I64[Sp + 24], I64[Sp + 8] * I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8REe_info" {
     block_c8REe_info:
         const _c8REe;
         const 451;
         const 30;
 },
 Foreign.Marshal.Array.moveArray_entry() //  [R2]
         { []
         }
     {offset
       c8RED: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8REH; else goto c8REG;
       c8REH: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Array.moveArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8REG: // global
           I64[Hp - 32] = lvl33_s8Rap_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s8RaI_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.moveArray_info" {
     Foreign.Marshal.Array.moveArray_info:
         const Foreign.Marshal.Array.moveArray_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8RcI_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.77811895 UTC

[section ""data" . Foreign.Marshal.Array.lengthArray1_closure" {
     Foreign.Marshal.Array.lengthArray1_closure:
         const Foreign.Marshal.Array.lengthArray1_info;
 },
 sat_s8RaY_entry() //  [R1]
         { []
         }
     {offset
       c8RFL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8RFS; else goto c8RFT;
       c8RFS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8RFT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c8RFI_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8RFX; else goto c8RFJ;
       u8RFX: // global
           call _c8RFI(R1) args: 0, res: 0, upd: 0;
       c8RFJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8RaY_info" {
     sat_s8RaY_info:
         const sat_s8RaY_entry;
         const 1;
         const 16;
 },
 _c8RFI() //  [R1]
         { []
         }
     {offset
       c8RFI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8RFW; else goto c8RFV;
       c8RFW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8RFV: // global
           _s8RaX::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8RaX::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8RFI_info" {
     block_c8RFI_info:
         const _c8RFI;
         const 0;
         const 30;
 },
 Foreign.Marshal.Array.lengthArray1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8RFY: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c8RFZ; else goto c8RG0;
       c8RFZ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.lengthArray1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8RG0: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = Foreign.Marshal.Array.lengthArray2_closure+1;
           Sp = Sp - 40;
           call _c8RFw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.lengthArray1_info" {
     Foreign.Marshal.Array.lengthArray1_info:
         const Foreign.Marshal.Array.lengthArray1_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _c8RFw() //  []
         { []
         }
     {offset
       c8RFw: // global
           I64[Sp - 8] = block_c8RFy_info;
           R2 = P64[Sp];
           I64[Sp - 32] = stg_ap_ppv_info;
           P64[Sp - 24] = P64[Sp + 24];
           P64[Sp - 16] = P64[Sp + 32];
           Sp = Sp - 32;
           call Foreign.Storable.peekElemOff_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c8RFy() //  [R1]
         { []
         }
     {offset
       c8RFy: // global
           I64[Sp] = block_c8RFA_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R1;
           P64[Sp - 8] = P64[Sp + 24];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RFy_info" {
     block_c8RFy_info:
         const _c8RFy;
         const 5;
         const 30;
 },
 _c8RFA() //  [R1]
         { []
         }
     {offset
       c8RFA: // global
           _s8RaP::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c8RG4; else goto c8RGb;
       c8RG4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8RG7; else goto c8RG6;
       c8RG7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8RG6: // global
           I64[Hp - 16] = sat_s8RaY_info;
           P64[Hp] = _s8RaP::P64;
           P64[Sp + 40] = Hp - 16;
           Sp = Sp + 8;
           call _c8RFw() args: 0, res: 0, upd: 0;
       c8RGb: // global
           R1 = _s8RaP::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RFA_info" {
     block_c8RFA_info:
         const _c8RFA;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.790776648 UTC

[section ""data" . Foreign.Marshal.Array.lengthArray0_closure" {
     Foreign.Marshal.Array.lengthArray0_closure:
         const Foreign.Marshal.Array.lengthArray0_info;
 },
 Foreign.Marshal.Array.lengthArray0_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8RGY: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.lengthArray1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.lengthArray0_info" {
     Foreign.Marshal.Array.lengthArray0_info:
         const Foreign.Marshal.Array.lengthArray0_entry;
         const 0;
         const 14;
         const 21474836504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.794538458 UTC

[section ""data" . Foreign.Marshal.Array.peekArray2_closure" {
     Foreign.Marshal.Array.peekArray2_closure:
         const Foreign.Marshal.Array.peekArray2_info;
 },
 Foreign.Marshal.Array.peekArray2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8RHb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8RHc; else goto c8RHd;
       c8RHc: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Array.peekArray2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8RHd: // global
           I64[Sp - 24] = block_c8RH9_info;
           _s8Rb2::P64 = R5;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           _s8RaZ::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s8RaZ::P64;
           P64[Sp - 8] = _s8Rb2::P64;
           Sp = Sp - 24;
           call Foreign.Marshal.Array.lengthArray1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.peekArray2_info" {
     Foreign.Marshal.Array.peekArray2_info:
         const Foreign.Marshal.Array.peekArray2_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _c8RH9() //  [R1]
         { []
         }
     {offset
       c8RH9: // global
           R4 = P64[Sp + 16];
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Foreign.Marshal.Array.peekArray1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RH9_info" {
     block_c8RH9_info:
         const _c8RH9;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.800047491 UTC

[section ""data" . Foreign.Marshal.Array.peekArray0_closure" {
     Foreign.Marshal.Array.peekArray0_closure:
         const Foreign.Marshal.Array.peekArray0_info;
 },
 Foreign.Marshal.Array.peekArray0_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8RHs: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Array.peekArray2_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.peekArray0_info" {
     Foreign.Marshal.Array.peekArray0_info:
         const Foreign.Marshal.Array.peekArray0_entry;
         const 0;
         const 14;
         const 21474836504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.803233263 UTC

[section ""data" . lvl30_r8PPJ_closure" {
     lvl30_r8PPJ_closure:
         const GHC.Types.I#_con_info;
         const 276;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.805014126 UTC

[section ""data" . lvl31_r8PPK_closure" {
     lvl31_r8PPK_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8PPh_closure;
         const lvl3_r8PPi_closure;
         const lvl5_r8PPk_closure;
         const lvl30_r8PPJ_closure+1;
         const lvl7_r8PPm_closure+1;
         const lvl30_r8PPJ_closure+1;
         const lvl8_r8PPn_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.806831659 UTC

[section ""data" . lvl32_r8PPL_closure" {
     lvl32_r8PPL_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8PPg_closure;
         const lvl31_r8PPK_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.809216513 UTC

[section ""data" . Foreign.Marshal.Array.advancePtr1_closure" {
     Foreign.Marshal.Array.advancePtr1_closure:
         const Foreign.Marshal.Array.advancePtr1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Array.advancePtr1_entry() //  [R1]
         { []
         }
     {offset
       c8RHI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8RHJ; else goto c8RHK;
       c8RHJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8RHK: // global
           (_c8RHF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8RHF::I64 == 0) goto c8RHH; else goto c8RHG;
       c8RHH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8RHG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8RHF::I64;
           R2 = lvl32_r8PPL_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.advancePtr1_info" {
     Foreign.Marshal.Array.advancePtr1_info:
         const Foreign.Marshal.Array.advancePtr1_entry;
         const 0;
         const 38654705685;
         const S8RcI_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.815647476 UTC

[section ""data" . Foreign.Marshal.Array.advancePtr_closure" {
     Foreign.Marshal.Array.advancePtr_closure:
         const Foreign.Marshal.Array.advancePtr_info;
         const 0;
 },
 lvl33_s8Rb8_entry() //  [R1]
         { []
         }
     {offset
       c8RI1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8RI2; else goto c8RI3;
       c8RI2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8RI3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Array.advancePtr1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_s8Rb8_info" {
     lvl33_s8Rb8_info:
         const lvl33_s8Rb8_entry;
         const 1;
         const 4294967312;
         const S8RcI_srt+296;
 },
 sat_s8Rbj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c8RIc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8RIw; else goto c8RIx;
       c8RIw: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8RIx: // global
           I64[Sp - 24] = block_c8RI9_info;
           _s8Rb8::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s8Rb8::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8RIE; else goto c8RIa;
       u8RIE: // global
           call _c8RI9(R1) args: 0, res: 0, upd: 0;
       c8RIa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8Rbj_info" {
     sat_s8Rbj_info:
         const sat_s8Rbj_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c8RI9() //  [R1]
         { []
         }
     {offset
       c8RI9: // global
           I64[Sp] = block_c8RIf_info;
           _s8Rbc::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s8Rbc::I64;
           if (R1 & 7 != 0) goto u8RID; else goto c8RIg;
       u8RID: // global
           call _c8RIf(R1) args: 0, res: 0, upd: 0;
       c8RIg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RI9_info" {
     block_c8RI9_info:
         const _c8RI9;
         const 2;
         const 30;
 },
 _c8RIf() //  [R1]
         { []
         }
     {offset
       c8RIf: // global
           I64[Sp] = block_c8RIk_info;
           _s8Rbe::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8Rbe::I64;
           if (R1 & 7 != 0) goto u8RIF; else goto c8RIl;
       u8RIF: // global
           call _c8RIk(R1) args: 0, res: 0, upd: 0;
       c8RIl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RIf_info" {
     block_c8RIf_info:
         const _c8RIf;
         const 130;
         const 30;
 },
 _c8RIk() //  [R1]
         { []
         }
     {offset
       c8RIk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8RIC; else goto c8RIB;
       c8RIC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8RIB: // global
           _s8Rbi::I64 = I64[Sp + 16] + I64[Sp + 8] * I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8Rbi::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8RIk_info" {
     block_c8RIk_info:
         const _c8RIk;
         const 194;
         const 30;
 },
 Foreign.Marshal.Array.advancePtr_entry() //  [R2]
         { []
         }
     {offset
       c8RIG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8RIK; else goto c8RIJ;
       c8RIK: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.Marshal.Array.advancePtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8RIJ: // global
           I64[Hp - 32] = lvl33_s8Rb8_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s8Rbj_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Array.advancePtr_info" {
     Foreign.Marshal.Array.advancePtr_info:
         const Foreign.Marshal.Array.advancePtr_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8RcI_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.828415154 UTC

[section ""data" . Foreign.Marshal.Array.$trModule3_closure" {
     Foreign.Marshal.Array.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Array.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.830207712 UTC

[section ""data" . Foreign.Marshal.Array.$trModule1_closure" {
     Foreign.Marshal.Array.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Array.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.831872571 UTC

[section ""data" . Foreign.Marshal.Array.$trModule_closure" {
     Foreign.Marshal.Array.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.Marshal.Array.$trModule3_closure+1;
         const Foreign.Marshal.Array.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:01.833886074 UTC

[section ""relreadonly" . S8RcI_srt" {
     S8RcI_srt:
         const GHC.Err.undefined_closure;
         const lvl10_r8PPp_closure;
         const Foreign.Marshal.Array.mallocArray1_closure;
         const Foreign.Marshal.Alloc.malloc1_closure;
         const Foreign.Marshal.Array.mallocArray_closure;
         const Foreign.Marshal.Array.$wmallocArray0_closure;
         const Foreign.Marshal.Array.mallocArray2_closure;
         const lvl13_r8PPs_closure;
         const Foreign.Marshal.Array.callocArray1_closure;
         const Foreign.Marshal.Alloc.calloc1_closure;
         const Foreign.Marshal.Array.callocArray_closure;
         const Foreign.Marshal.Array.$wcallocArray0_closure;
         const Foreign.Marshal.Array.callocArray2_closure;
         const lvl16_r8PPv_closure;
         const Foreign.Marshal.Array.allocaArray1_closure;
         const Foreign.Marshal.Array.allocaArray_closure;
         const Foreign.Marshal.Array.allocaArray0_closure;
         const lvl21_r8PPA_closure;
         const Foreign.Marshal.Array.reallocArray1_closure;
         const Foreign.Marshal.Alloc.realloc2_closure;
         const Foreign.Marshal.Array.reallocArray_closure;
         const Foreign.Marshal.Array.$wreallocArray0_closure;
         const Foreign.Marshal.Array.reallocArray2_closure;
         const Foreign.Marshal.Array.withArrayLen_closure;
         const Foreign.Marshal.Array.withArray_closure;
         const Foreign.Marshal.Array.newArray1_closure;
         const Foreign.Marshal.Array.withArrayLen0_closure;
         const Foreign.Marshal.Array.withArray0_closure;
         const Foreign.Marshal.Array.newArray3_closure;
         const lvl26_r8PPF_closure;
         const Foreign.Marshal.Array.copyArray1_closure;
         const Foreign.Marshal.Array.copyArray_closure;
         const lvl29_r8PPI_closure;
         const GHC.Err.undefined_closure;
         const Foreign.Marshal.Array.moveArray1_closure;
         const Foreign.Marshal.Array.moveArray_closure;
         const lvl32_r8PPL_closure;
         const Foreign.Marshal.Array.advancePtr1_closure;
         const Foreign.Marshal.Array.advancePtr_closure;
 }]

