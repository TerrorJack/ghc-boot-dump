
==================== Tidy Core ====================
2018-03-16 16:03:59.173957263 UTC

Result size of Tidy Core
  = {terms: 1,082, types: 1,575, coercions: 268, joins: 6/18}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_r8PPf :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_r8PPf = "undefined"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1_r8PPg :: [Char]
[GblId]
lvl1_r8PPg = unpackCString# lvl_r8PPf

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Foreign.Marshal.Array.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Foreign.Marshal.Array.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl2_r8PPh :: [Char]
[GblId]
lvl2_r8PPh = unpackCString# Foreign.Marshal.Array.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Foreign.Marshal.Array.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
Foreign.Marshal.Array.$trModule2 = "Foreign.Marshal.Array"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl3_r8PPi :: [Char]
[GblId]
lvl3_r8PPi = unpackCString# Foreign.Marshal.Array.$trModule2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl4_r8PPj :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl4_r8PPj = "./Foreign/Marshal/Array.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl5_r8PPk :: [Char]
[GblId]
lvl5_r8PPk = unpackCString# lvl4_r8PPj

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl6_r8PPl :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl6_r8PPl = GHC.Types.I# 86#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl7_r8PPm :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl7_r8PPm = GHC.Types.I# 25#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl8_r8PPn :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl8_r8PPn = GHC.Types.I# 34#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl9_r8PPo :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []]
lvl9_r8PPo
  = GHC.Stack.Types.SrcLoc
      lvl2_r8PPh
      lvl3_r8PPi
      lvl5_r8PPk
      lvl6_r8PPl
      lvl7_r8PPm
      lvl6_r8PPl
      lvl8_r8PPn

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl10_r8PPp :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []]
lvl10_r8PPp
  = GHC.Stack.Types.PushCallStack
      lvl1_r8PPg lvl9_r8PPo GHC.Stack.Types.EmptyCallStack

-- RHS size: {terms: 3, types: 4, coercions: 4, joins: 0/0}
Foreign.Marshal.Array.mallocArray1 :: forall a. a
[GblId, Str=x]
Foreign.Marshal.Array.mallocArray1
  = \ (@ a_a8Phr) ->
      undefined
        @ 'LiftedRep
        @ a_a8Phr
        (lvl10_r8PPp
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: (GHC.Stack.Types.CallStack :: *)
                    ~R# (?callStack::GHC.Stack.Types.CallStack :: Constraint)))

-- RHS size: {terms: 35, types: 38, coercions: 6, joins: 0/1}
mallocArray :: forall a. Storable a => Int -> IO (Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 125 60}]
mallocArray
  = \ (@ a_a8Phr) ($dStorable_a8Pht :: Storable a_a8Phr) ->
      let {
        lvl33_s8Pqd [Dmd=<L,U(U)>] :: Int
        [LclId]
        lvl33_s8Pqd
          = sizeOf
              @ a_a8Phr
              $dStorable_a8Pht
              (Foreign.Marshal.Array.mallocArray1 @ a_a8Phr) } in
      (\ (size_a8P0N :: Int) (s_i7IAv :: State# RealWorld) ->
         case size_a8P0N of { I# x_i7MWL ->
         case lvl33_s8Pqd of { I# y_i7MWP ->
         case {__pkg_ccall base-4.11.0.0 Word#
                           -> State# RealWorld -> (# State# RealWorld, Addr# #)}_d8MKH
                (int2Word# (*# x_i7MWL y_i7MWP)) s_i7IAv
         of
         { (# ds_d8MKF, ds1_d8MKE #) ->
         case eqAddr# ds1_d8MKE __NULL of {
           __DEFAULT -> (# ds_d8MKF, GHC.Ptr.Ptr @ a_a8Phr ds1_d8MKE #);
           1# ->
             raiseIO#
               @ GHC.Exception.SomeException
               @ (Ptr a_a8Phr)
               Foreign.Marshal.Alloc.malloc1
               ds_d8MKF
         }
         }
         }
         })
      `cast` (<Int>_R ->_R Sym (GHC.Types.N:IO[0] <Ptr a_a8Phr>_R)
              :: (Int
                  -> State# RealWorld -> (# State# RealWorld, Ptr a_a8Phr #) :: *)
                 ~R# (Int -> IO (Ptr a_a8Phr) :: *))

-- RHS size: {terms: 32, types: 35, coercions: 0, joins: 0/0}
Foreign.Marshal.Array.$wmallocArray0 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Storable a =>
     Int# -> State# RealWorld -> (# State# RealWorld, Ptr a #)
[GblId,
 Arity=3,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 96 30}]
Foreign.Marshal.Array.$wmallocArray0
  = \ (@ a_s8PCz)
      (w_s8PCA :: Storable a_s8PCz)
      (ww_s8PCF :: Int#)
      (w1_s8PCC :: State# RealWorld) ->
      case sizeOf
             @ a_s8PCz w_s8PCA (Foreign.Marshal.Array.mallocArray1 @ a_s8PCz)
      of
      { I# y_i7MWP ->
      case {__pkg_ccall base-4.11.0.0 Word#
                           -> State# RealWorld -> (# State# RealWorld, Addr# #)}_d8MKH
             (int2Word# (*# (+# ww_s8PCF 1#) y_i7MWP)) w1_s8PCC
      of
      { (# ds_d8MKF, ds1_d8MKE #) ->
      case eqAddr# ds1_d8MKE __NULL of {
        __DEFAULT -> (# ds_d8MKF, GHC.Ptr.Ptr @ a_s8PCz ds1_d8MKE #);
        1# ->
          raiseIO#
            @ GHC.Exception.SomeException
            @ (Ptr a_s8PCz)
            Foreign.Marshal.Alloc.malloc1
            ds_d8MKF
      }
      }
      }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
Foreign.Marshal.Array.mallocArray2 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Storable a =>
     Int -> State# RealWorld -> (# State# RealWorld, Ptr a #)
[GblId,
 Arity=3,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s8PCz)
                 (w_s8PCA [Occ=Once] :: Storable a_s8PCz)
                 (w1_s8PCB [Occ=Once!] :: Int)
                 (w2_s8PCC [Occ=Once] :: State# RealWorld) ->
                 case w1_s8PCB of { I# ww1_s8PCF [Occ=Once] ->
                 Foreign.Marshal.Array.$wmallocArray0
                   @ a_s8PCz w_s8PCA ww1_s8PCF w2_s8PCC
                 }}]
Foreign.Marshal.Array.mallocArray2
  = \ (@ a_s8PCz)
      (w_s8PCA :: Storable a_s8PCz)
      (w1_s8PCB :: Int)
      (w2_s8PCC :: State# RealWorld) ->
      case w1_s8PCB of { I# ww1_s8PCF ->
      Foreign.Marshal.Array.$wmallocArray0
        @ a_s8PCz w_s8PCA ww1_s8PCF w2_s8PCC
      }

-- RHS size: {terms: 1, types: 0, coercions: 12, joins: 0/0}
mallocArray0 :: forall a. Storable a => Int -> IO (Ptr a)
[GblId,
 Arity=3,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.Marshal.Array.mallocArray2
               `cast` (forall (a :: <*>_N).
                       <Storable a>_R ->_R <Int>_R ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
                       :: (forall a.
                           Storable a =>
                           Int -> State# RealWorld -> (# State# RealWorld, Ptr a #) :: *)
                          ~R# (forall a. Storable a => Int -> IO (Ptr a) :: *))}]
mallocArray0
  = Foreign.Marshal.Array.mallocArray2
    `cast` (forall (a :: <*>_N).
            <Storable a>_R ->_R <Int>_R ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
            :: (forall a.
                Storable a =>
                Int -> State# RealWorld -> (# State# RealWorld, Ptr a #) :: *)
               ~R# (forall a. Storable a => Int -> IO (Ptr a) :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl11_r8PPq :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl11_r8PPq = GHC.Types.I# 100#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl12_r8PPr :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []]
lvl12_r8PPr
  = GHC.Stack.Types.SrcLoc
      lvl2_r8PPh
      lvl3_r8PPi
      lvl5_r8PPk
      lvl11_r8PPq
      lvl7_r8PPm
      lvl11_r8PPq
      lvl8_r8PPn

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl13_r8PPs :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []]
lvl13_r8PPs
  = GHC.Stack.Types.PushCallStack
      lvl1_r8PPg lvl12_r8PPr GHC.Stack.Types.EmptyCallStack

-- RHS size: {terms: 3, types: 4, coercions: 4, joins: 0/0}
Foreign.Marshal.Array.callocArray1 :: forall a. a
[GblId, Str=x]
Foreign.Marshal.Array.callocArray1
  = \ (@ a_a8PgI) ->
      undefined
        @ 'LiftedRep
        @ a_a8PgI
        (lvl13_r8PPs
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: (GHC.Stack.Types.CallStack :: *)
                    ~R# (?callStack::GHC.Stack.Types.CallStack :: Constraint)))

-- RHS size: {terms: 36, types: 38, coercions: 6, joins: 0/1}
callocArray :: forall a. Storable a => Int -> IO (Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 135 60}]
callocArray
  = \ (@ a_a8PgI) ($dStorable_a8PgK :: Storable a_a8PgI) ->
      let {
        lvl33_s8Pqz [Dmd=<L,U(U)>] :: Int
        [LclId]
        lvl33_s8Pqz
          = sizeOf
              @ a_a8PgI
              $dStorable_a8PgK
              (Foreign.Marshal.Array.callocArray1 @ a_a8PgI) } in
      (\ (size_a8P0S :: Int) (s_i7IAv :: State# RealWorld) ->
         case size_a8P0S of { I# x_i7MWL ->
         case lvl33_s8Pqz of { I# y_i7MWP ->
         case {__pkg_ccall base-4.11.0.0 Word#
                           -> Word# -> State# RealWorld -> (# State# RealWorld, Addr# #)}_d8MKz
                1## (int2Word# (*# x_i7MWL y_i7MWP)) s_i7IAv
         of
         { (# ds_d8MKx, ds1_d8MKw #) ->
         case eqAddr# ds1_d8MKw __NULL of {
           __DEFAULT -> (# ds_d8MKx, GHC.Ptr.Ptr @ a_a8PgI ds1_d8MKw #);
           1# ->
             raiseIO#
               @ GHC.Exception.SomeException
               @ (Ptr a_a8PgI)
               Foreign.Marshal.Alloc.calloc1
               ds_d8MKx
         }
         }
         }
         })
      `cast` (<Int>_R ->_R Sym (GHC.Types.N:IO[0] <Ptr a_a8PgI>_R)
              :: (Int
                  -> State# RealWorld -> (# State# RealWorld, Ptr a_a8PgI #) :: *)
                 ~R# (Int -> IO (Ptr a_a8PgI) :: *))

-- RHS size: {terms: 33, types: 35, coercions: 0, joins: 0/0}
Foreign.Marshal.Array.$wcallocArray0 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Storable a =>
     Int# -> State# RealWorld -> (# State# RealWorld, Ptr a #)
[GblId,
 Arity=3,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 106 30}]
Foreign.Marshal.Array.$wcallocArray0
  = \ (@ a_s8PCK)
      (w_s8PCL :: Storable a_s8PCK)
      (ww_s8PCQ :: Int#)
      (w1_s8PCN :: State# RealWorld) ->
      case sizeOf
             @ a_s8PCK w_s8PCL (Foreign.Marshal.Array.callocArray1 @ a_s8PCK)
      of
      { I# y_i7MWP ->
      case {__pkg_ccall base-4.11.0.0 Word#
                           -> Word# -> State# RealWorld -> (# State# RealWorld, Addr# #)}_d8MKz
             1## (int2Word# (*# (+# ww_s8PCQ 1#) y_i7MWP)) w1_s8PCN
      of
      { (# ds_d8MKx, ds1_d8MKw #) ->
      case eqAddr# ds1_d8MKw __NULL of {
        __DEFAULT -> (# ds_d8MKx, GHC.Ptr.Ptr @ a_s8PCK ds1_d8MKw #);
        1# ->
          raiseIO#
            @ GHC.Exception.SomeException
            @ (Ptr a_s8PCK)
            Foreign.Marshal.Alloc.calloc1
            ds_d8MKx
      }
      }
      }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
Foreign.Marshal.Array.callocArray2 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Storable a =>
     Int -> State# RealWorld -> (# State# RealWorld, Ptr a #)
[GblId,
 Arity=3,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s8PCK)
                 (w_s8PCL [Occ=Once] :: Storable a_s8PCK)
                 (w1_s8PCM [Occ=Once!] :: Int)
                 (w2_s8PCN [Occ=Once] :: State# RealWorld) ->
                 case w1_s8PCM of { I# ww1_s8PCQ [Occ=Once] ->
                 Foreign.Marshal.Array.$wcallocArray0
                   @ a_s8PCK w_s8PCL ww1_s8PCQ w2_s8PCN
                 }}]
Foreign.Marshal.Array.callocArray2
  = \ (@ a_s8PCK)
      (w_s8PCL :: Storable a_s8PCK)
      (w1_s8PCM :: Int)
      (w2_s8PCN :: State# RealWorld) ->
      case w1_s8PCM of { I# ww1_s8PCQ ->
      Foreign.Marshal.Array.$wcallocArray0
        @ a_s8PCK w_s8PCL ww1_s8PCQ w2_s8PCN
      }

-- RHS size: {terms: 1, types: 0, coercions: 12, joins: 0/0}
callocArray0 :: forall a. Storable a => Int -> IO (Ptr a)
[GblId,
 Arity=3,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.Marshal.Array.callocArray2
               `cast` (forall (a :: <*>_N).
                       <Storable a>_R ->_R <Int>_R ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
                       :: (forall a.
                           Storable a =>
                           Int -> State# RealWorld -> (# State# RealWorld, Ptr a #) :: *)
                          ~R# (forall a. Storable a => Int -> IO (Ptr a) :: *))}]
callocArray0
  = Foreign.Marshal.Array.callocArray2
    `cast` (forall (a :: <*>_N).
            <Storable a>_R ->_R <Int>_R ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
            :: (forall a.
                Storable a =>
                Int -> State# RealWorld -> (# State# RealWorld, Ptr a #) :: *)
               ~R# (forall a. Storable a => Int -> IO (Ptr a) :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl14_r8PPt :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl14_r8PPt = GHC.Types.I# 115#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl15_r8PPu :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []]
lvl15_r8PPu
  = GHC.Stack.Types.SrcLoc
      lvl2_r8PPh
      lvl3_r8PPi
      lvl5_r8PPk
      lvl14_r8PPt
      lvl7_r8PPm
      lvl14_r8PPt
      lvl8_r8PPn

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl16_r8PPv :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []]
lvl16_r8PPv
  = GHC.Stack.Types.PushCallStack
      lvl1_r8PPg lvl15_r8PPu GHC.Stack.Types.EmptyCallStack

-- RHS size: {terms: 3, types: 4, coercions: 4, joins: 0/0}
Foreign.Marshal.Array.allocaArray1 :: forall a. a
[GblId, Str=x]
Foreign.Marshal.Array.allocaArray1
  = \ (@ a_a8Per) ->
      undefined
        @ 'LiftedRep
        @ a_a8Per
        (lvl16_r8PPv
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: (GHC.Stack.Types.CallStack :: *)
                    ~R# (?callStack::GHC.Stack.Types.CallStack :: Constraint)))

-- RHS size: {terms: 51, types: 74, coercions: 12, joins: 0/2}
allocaArray
  :: forall a b. Storable a => Int -> (Ptr a -> IO b) -> IO b
[GblId,
 Arity=1,
 Str=<L,U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60] 187 60}]
allocaArray
  = \ (@ a_a8Per)
      (@ b_a8Pes)
      ($dStorable_a8Peu :: Storable a_a8Per) ->
      let {
        lvl33_s8PqV [Dmd=<L,U(U)>] :: Int
        [LclId]
        lvl33_s8PqV
          = sizeOf
              @ a_a8Per
              $dStorable_a8Peu
              (Foreign.Marshal.Array.allocaArray1 @ a_a8Per) } in
      let {
        ds1_s8PqX [Dmd=<L,U(U)>] :: Int
        [LclId]
        ds1_s8PqX
          = alignment
              @ a_a8Per
              $dStorable_a8Peu
              (Foreign.Marshal.Array.allocaArray1 @ a_a8Per) } in
      (\ (size_a8P0Y :: Int)
         (eta_B2 :: Ptr a_a8Per -> IO b_a8Pes)
         (eta1_B1 :: State# RealWorld) ->
         case size_a8P0Y of { I# x_i7MWL ->
         case lvl33_s8PqV of { I# y_i7MWP ->
         case ds1_s8PqX of { I# align_a8MBr ->
         case newAlignedPinnedByteArray#
                @ RealWorld (*# x_i7MWL y_i7MWP) align_a8MBr eta1_B1
         of
         { (# ipv_s8ML2, ipv1_s8ML3 #) ->
         case unsafeFreezeByteArray# @ RealWorld ipv1_s8ML3 ipv_s8ML2 of
         { (# ipv2_s8ML6, ipv3_s8ML7 #) ->
         case ((eta_B2
                  (GHC.Ptr.Ptr @ a_a8Per (byteArrayContents# ipv3_s8ML7)))
               `cast` (GHC.Types.N:IO[0] <b_a8Pes>_R
                       :: (IO b_a8Pes :: *)
                          ~R# (State# RealWorld -> (# State# RealWorld, b_a8Pes #) :: *)))
                ipv2_s8ML6
         of
         { (# ipv4_s8MLa, ipv5_s8MLb #) ->
         case touch# @ 'UnliftedRep @ ByteArray# ipv3_s8ML7 ipv4_s8MLa
         of s4_a8MBC
         { __DEFAULT ->
         (# s4_a8MBC, ipv5_s8MLb #)
         }
         }
         }
         }
         }
         }
         })
      `cast` (<Int>_R
              ->_R <Ptr a_a8Per -> IO b_a8Pes>_R
              ->_R Sym (GHC.Types.N:IO[0] <b_a8Pes>_R)
              :: (Int
                  -> (Ptr a_a8Per -> IO b_a8Pes)
                  -> State# RealWorld
                  -> (# State# RealWorld, b_a8Pes #) :: *)
                 ~R# (Int -> (Ptr a_a8Per -> IO b_a8Pes) -> IO b_a8Pes :: *))

-- RHS size: {terms: 13, types: 11, coercions: 0, joins: 0/0}
allocaArray0 [InlPrag=INLINE (sat-args=1)]
  :: forall a b. Storable a => Int -> (Ptr a -> IO b) -> IO b
[GblId,
 Arity=2,
 Str=<L,U(C(U(U)),C(U(U)),A,A,A,A,A,A)><L,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (@ a_a8Pfd)
                 (@ b_a8Pfe)
                 ($dStorable_a8Pfg [Occ=Once] :: Storable a_a8Pfd)
                 (size_a8P0Z [Occ=Once!] :: Int) ->
                 allocaArray
                   @ a_a8Pfd
                   @ b_a8Pfe
                   $dStorable_a8Pfg
                   (case size_a8P0Z of { I# x_i7MX1 [Occ=Once] ->
                    GHC.Types.I# (+# x_i7MX1 1#)
                    })}]
allocaArray0
  = \ (@ a_a8Pfd)
      (@ b_a8Pfe)
      ($dStorable_a8Pfg :: Storable a_a8Pfd)
      (eta_B1 :: Int) ->
      allocaArray
        @ a_a8Pfd
        @ b_a8Pfe
        $dStorable_a8Pfg
        (case eta_B1 of { I# x_i7MX1 -> GHC.Types.I# (+# x_i7MX1 1#) })

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl17_r8PPw :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl17_r8PPw = GHC.Types.I# 133#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl18_r8PPx :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl18_r8PPx = GHC.Types.I# 27#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl19_r8PPy :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl19_r8PPy = GHC.Types.I# 36#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl20_r8PPz :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []]
lvl20_r8PPz
  = GHC.Stack.Types.SrcLoc
      lvl2_r8PPh
      lvl3_r8PPi
      lvl5_r8PPk
      lvl17_r8PPw
      lvl18_r8PPx
      lvl17_r8PPw
      lvl19_r8PPy

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl21_r8PPA :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []]
lvl21_r8PPA
  = GHC.Stack.Types.PushCallStack
      lvl1_r8PPg lvl20_r8PPz GHC.Stack.Types.EmptyCallStack

-- RHS size: {terms: 3, types: 4, coercions: 4, joins: 0/0}
Foreign.Marshal.Array.reallocArray1 :: forall a. a
[GblId, Str=x]
Foreign.Marshal.Array.reallocArray1
  = \ (@ a_a8PdG) ->
      undefined
        @ 'LiftedRep
        @ a_a8PdG
        (lvl21_r8PPA
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: (GHC.Stack.Types.CallStack :: *)
                    ~R# (?callStack::GHC.Stack.Types.CallStack :: Constraint)))

-- RHS size: {terms: 52, types: 61, coercions: 9, joins: 0/1}
reallocArray :: forall a. Storable a => Ptr a -> Int -> IO (Ptr a)
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 195 60}]
reallocArray
  = \ (@ a_a8PdG) ($dStorable_a8PdI :: Storable a_a8PdG) ->
      let {
        lvl33_s8Pri [Dmd=<L,U(U)>] :: Int
        [LclId]
        lvl33_s8Pri
          = sizeOf
              @ a_a8PdG
              $dStorable_a8PdI
              (Foreign.Marshal.Array.reallocArray1 @ a_a8PdG) } in
      (\ (ptr_a8P13 :: Ptr a_a8PdG)
         (size_a8P14 :: Int)
         (eta_B1 :: State# RealWorld) ->
         case size_a8P14 of { I# x_i7MWL ->
         case lvl33_s8Pri of { I# y_i7MWP ->
         case ptr_a8P13 of { GHC.Ptr.Ptr ww1_s8MYX ->
         case *# x_i7MWL y_i7MWP of ds_X8MJu {
           __DEFAULT ->
             case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Word# -> State# RealWorld -> (# State# RealWorld, Addr# #)}_d8MKo
                    ww1_s8MYX (int2Word# ds_X8MJu) eta_B1
             of
             { (# ds1_d8MKm, ds2_d8MKl #) ->
             case eqAddr# ds2_d8MKl __NULL of {
               __DEFAULT -> (# ds1_d8MKm, GHC.Ptr.Ptr @ a_a8PdG ds2_d8MKl #);
               1# ->
                 raiseIO#
                   @ GHC.Exception.SomeException
                   @ (Ptr a_a8PdG)
                   Foreign.Marshal.Alloc.realloc2
                   ds1_d8MKm
             }
             };
           0# ->
             case {__pkg_ccall base-4.11.0.0 Addr#
                           -> State# RealWorld -> (# State# RealWorld #)}_d8MKd
                    ww1_s8MYX eta_B1
             of
             { (# ds1_d8MKb #) ->
             (# ds1_d8MKb, GHC.Ptr.nullPtr @ a_a8PdG #)
             }
         }
         }
         }
         })
      `cast` (<Ptr a_a8PdG>_R
              ->_R <Int>_R
              ->_R Sym (GHC.Types.N:IO[0] <Ptr a_a8PdG>_R)
              :: (Ptr a_a8PdG
                  -> Int
                  -> State# RealWorld
                  -> (# State# RealWorld, Ptr a_a8PdG #) :: *)
                 ~R# (Ptr a_a8PdG -> Int -> IO (Ptr a_a8PdG) :: *))

-- RHS size: {terms: 46, types: 54, coercions: 0, joins: 0/0}
Foreign.Marshal.Array.$wreallocArray0 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Storable a =>
     Addr# -> Int# -> State# RealWorld -> (# State# RealWorld, Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 0 0 0] 146 60}]
Foreign.Marshal.Array.$wreallocArray0
  = \ (@ a_s8PCY)
      (w_s8PCZ :: Storable a_s8PCY)
      (ww_s8PD5 :: Addr#)
      (ww1_s8PD9 :: Int#)
      (w1_s8PD2 :: State# RealWorld) ->
      case sizeOf
             @ a_s8PCY w_s8PCZ (Foreign.Marshal.Array.reallocArray1 @ a_s8PCY)
      of
      { I# y_i7MWP ->
      case *# (+# ww1_s8PD9 1#) y_i7MWP of ds_X8MJu {
        __DEFAULT ->
          case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Word# -> State# RealWorld -> (# State# RealWorld, Addr# #)}_d8MKo
                 ww_s8PD5 (int2Word# ds_X8MJu) w1_s8PD2
          of
          { (# ds1_d8MKm, ds2_d8MKl #) ->
          case eqAddr# ds2_d8MKl __NULL of {
            __DEFAULT -> (# ds1_d8MKm, GHC.Ptr.Ptr @ a_s8PCY ds2_d8MKl #);
            1# ->
              raiseIO#
                @ GHC.Exception.SomeException
                @ (Ptr a_s8PCY)
                Foreign.Marshal.Alloc.realloc2
                ds1_d8MKm
          }
          };
        0# ->
          case {__pkg_ccall base-4.11.0.0 Addr#
                           -> State# RealWorld -> (# State# RealWorld #)}_d8MKd
                 ww_s8PD5 w1_s8PD2
          of
          { (# ds1_d8MKb #) ->
          (# ds1_d8MKb, GHC.Ptr.nullPtr @ a_s8PCY #)
          }
      }
      }

-- RHS size: {terms: 16, types: 15, coercions: 0, joins: 0/0}
Foreign.Marshal.Array.reallocArray2 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Storable a =>
     Ptr a -> Int -> State# RealWorld -> (# State# RealWorld, Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s8PCY)
                 (w_s8PCZ [Occ=Once] :: Storable a_s8PCY)
                 (w1_s8PD0 [Occ=Once!] :: Ptr a_s8PCY)
                 (w2_s8PD1 [Occ=Once!] :: Int)
                 (w3_s8PD2 [Occ=Once] :: State# RealWorld) ->
                 case w1_s8PD0 of { GHC.Ptr.Ptr ww1_s8PD5 [Occ=Once] ->
                 case w2_s8PD1 of { I# ww3_s8PD9 [Occ=Once] ->
                 Foreign.Marshal.Array.$wreallocArray0
                   @ a_s8PCY w_s8PCZ ww1_s8PD5 ww3_s8PD9 w3_s8PD2
                 }
                 }}]
Foreign.Marshal.Array.reallocArray2
  = \ (@ a_s8PCY)
      (w_s8PCZ :: Storable a_s8PCY)
      (w1_s8PD0 :: Ptr a_s8PCY)
      (w2_s8PD1 :: Int)
      (w3_s8PD2 :: State# RealWorld) ->
      case w1_s8PD0 of { GHC.Ptr.Ptr ww1_s8PD5 ->
      case w2_s8PD1 of { I# ww3_s8PD9 ->
      Foreign.Marshal.Array.$wreallocArray0
        @ a_s8PCY w_s8PCZ ww1_s8PD5 ww3_s8PD9 w3_s8PD2
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 15, joins: 0/0}
reallocArray0 :: forall a. Storable a => Ptr a -> Int -> IO (Ptr a)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.Marshal.Array.reallocArray2
               `cast` (forall (a :: <*>_N).
                       <Storable a>_R
                       ->_R <Ptr a>_R
                       ->_R <Int>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
                       :: (forall a.
                           Storable a =>
                           Ptr a
                           -> Int -> State# RealWorld -> (# State# RealWorld, Ptr a #) :: *)
                          ~R# (forall a. Storable a => Ptr a -> Int -> IO (Ptr a) :: *))}]
reallocArray0
  = Foreign.Marshal.Array.reallocArray2
    `cast` (forall (a :: <*>_N).
            <Storable a>_R
            ->_R <Ptr a>_R
            ->_R <Int>_R
            ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
            :: (forall a.
                Storable a =>
                Ptr a
                -> Int -> State# RealWorld -> (# State# RealWorld, Ptr a #) :: *)
               ~R# (forall a. Storable a => Ptr a -> Int -> IO (Ptr a) :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.Marshal.Array.lengthArray2 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.Marshal.Array.lengthArray2 = GHC.Types.I# 0#

-- RHS size: {terms: 62, types: 91, coercions: 4, joins: 2/2}
Foreign.Marshal.Array.$wpeekArray [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Storable a =>
     Int# -> Ptr a -> State# RealWorld -> (# State# RealWorld, [a] #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U(A,A,C(C1(C1(U(U,U)))),A,A,A,A,A)><S,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [60 0 0 0] 209 30}]
Foreign.Marshal.Array.$wpeekArray
  = \ (@ a_s8PDk)
      (w_s8PDl :: Storable a_s8PDk)
      (ww_s8PDr :: Int#)
      (w1_s8PDn :: Ptr a_s8PDk)
      (w2_s8PDo :: State# RealWorld) ->
      case <=# ww_s8PDr 0# of {
        __DEFAULT ->
          join {
            exit_X11 [Dmd=<L,C(C1(U(U,U)))>]
              :: [a_s8PDk]
                 -> State# RealWorld -> (# State# RealWorld, [a_s8PDk] #)
            [LclId[JoinId(2)], Arity=2, Str=<L,U><S,U>]
            exit_X11 (w3_s8PDd [OS=OneShot] :: [a_s8PDk])
                     (w4_s8PDe [OS=OneShot] :: State# RealWorld)
              = case ((peekElemOff
                         @ a_s8PDk w_s8PDl w1_s8PDn Foreign.Marshal.Array.lengthArray2)
                      `cast` (GHC.Types.N:IO[0] <a_s8PDk>_R
                              :: (IO a_s8PDk :: *)
                                 ~R# (State# RealWorld -> (# State# RealWorld, a_s8PDk #) :: *)))
                       w4_s8PDe
                of
                { (# ipv_i7IAy, ipv1_i7IAz #) ->
                (# ipv_i7IAy, GHC.Types.: @ a_s8PDk ipv1_i7IAz w3_s8PDd #)
                } } in
          joinrec {
            $wf_s8PDj [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
              :: Int#
                 -> [a_s8PDk]
                 -> State# RealWorld
                 -> (# State# RealWorld, [a_s8PDk] #)
            [LclId[JoinId(3)], Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []]
            $wf_s8PDj (ww1_s8PDh :: Int#)
                      (w3_s8PDd :: [a_s8PDk])
                      (w4_s8PDe :: State# RealWorld)
              = case ww1_s8PDh of ds_X8PjO {
                  __DEFAULT ->
                    case ((peekElemOff
                             @ a_s8PDk w_s8PDl w1_s8PDn (GHC.Types.I# ds_X8PjO))
                          `cast` (GHC.Types.N:IO[0] <a_s8PDk>_R
                                  :: (IO a_s8PDk :: *)
                                     ~R# (State# RealWorld
                                          -> (# State# RealWorld, a_s8PDk #) :: *)))
                           w4_s8PDe
                    of
                    { (# ipv_i7IAy, ipv1_i7IAz #) ->
                    jump $wf_s8PDj
                      (-# ds_X8PjO 1#)
                      (GHC.Types.: @ a_s8PDk ipv1_i7IAz w3_s8PDd)
                      ipv_i7IAy
                    };
                  0# -> jump exit_X11 w3_s8PDd w4_s8PDe
                }; } in
          jump $wf_s8PDj (-# ww_s8PDr 1#) (GHC.Types.[] @ a_s8PDk) w2_s8PDo;
        1# -> (# w2_s8PDo, GHC.Types.[] @ a_s8PDk #)
      }

-- RHS size: {terms: 13, types: 12, coercions: 0, joins: 0/0}
Foreign.Marshal.Array.peekArray1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Storable a =>
     Int -> Ptr a -> State# RealWorld -> (# State# RealWorld, [a] #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U(A,A,C(C1(C1(U(U,U)))),A,A,A,A,A)><S(S),1*U(U)><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s8PDk)
                 (w_s8PDl [Occ=Once] :: Storable a_s8PDk)
                 (w1_s8PDm [Occ=Once!] :: Int)
                 (w2_s8PDn [Occ=Once] :: Ptr a_s8PDk)
                 (w3_s8PDo [Occ=Once] :: State# RealWorld) ->
                 case w1_s8PDm of { I# ww1_s8PDr [Occ=Once] ->
                 Foreign.Marshal.Array.$wpeekArray
                   @ a_s8PDk w_s8PDl ww1_s8PDr w2_s8PDn w3_s8PDo
                 }}]
Foreign.Marshal.Array.peekArray1
  = \ (@ a_s8PDk)
      (w_s8PDl :: Storable a_s8PDk)
      (w1_s8PDm :: Int)
      (w2_s8PDn :: Ptr a_s8PDk)
      (w3_s8PDo :: State# RealWorld) ->
      case w1_s8PDm of { I# ww1_s8PDr ->
      Foreign.Marshal.Array.$wpeekArray
        @ a_s8PDk w_s8PDl ww1_s8PDr w2_s8PDn w3_s8PDo
      }

-- RHS size: {terms: 1, types: 0, coercions: 15, joins: 0/0}
peekArray :: forall a. Storable a => Int -> Ptr a -> IO [a]
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U(A,A,C(C1(C1(U(U,U)))),A,A,A,A,A)><S(S),1*U(U)><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.Marshal.Array.peekArray1
               `cast` (forall (a :: <*>_N).
                       <Storable a>_R
                       ->_R <Int>_R
                       ->_R <Ptr a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <[a]>_R)
                       :: (forall a.
                           Storable a =>
                           Int
                           -> Ptr a -> State# RealWorld -> (# State# RealWorld, [a] #) :: *)
                          ~R# (forall a. Storable a => Int -> Ptr a -> IO [a] :: *))}]
peekArray
  = Foreign.Marshal.Array.peekArray1
    `cast` (forall (a :: <*>_N).
            <Storable a>_R
            ->_R <Int>_R
            ->_R <Ptr a>_R
            ->_R Sym (GHC.Types.N:IO[0] <[a]>_R)
            :: (forall a.
                Storable a =>
                Int
                -> Ptr a -> State# RealWorld -> (# State# RealWorld, [a] #) :: *)
               ~R# (forall a. Storable a => Int -> Ptr a -> IO [a] :: *))

-- RHS size: {terms: 35, types: 52, coercions: 2, joins: 1/1}
Foreign.Marshal.Array.newArray2
  :: forall a.
     Storable a =>
     Ptr a -> [a] -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U(A,A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><L,U><S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0 0] 113 0}]
Foreign.Marshal.Array.newArray2
  = \ (@ a_a8PbP)
      ($dStorable_a8PbR :: Storable a_a8PbP)
      (ptr_a8P1i :: Ptr a_a8PbP)
      (vals0_a8P1j :: [a_a8PbP])
      (eta_B1 :: State# RealWorld) ->
      joinrec {
        go_s8PpD [Occ=LoopBreaker]
          :: [a_a8PbP]
             -> Int# -> State# RealWorld -> (# State# RealWorld, () #)
        [LclId[JoinId(3)], Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []]
        go_s8PpD (ds_d8Pjf :: [a_a8PbP])
                 (ds1_d8Pjg :: Int#)
                 (eta1_XS :: State# RealWorld)
          = case ds_d8Pjf of {
              [] -> (# eta1_XS, GHC.Tuple.() #);
              : val_a8P1l vals_a8P1m ->
                case ((pokeElemOff
                         @ a_a8PbP
                         $dStorable_a8PbR
                         ptr_a8P1i
                         (GHC.Types.I# ds1_d8Pjg)
                         val_a8P1l)
                      `cast` (GHC.Types.N:IO[0] <()>_R
                              :: (IO () :: *)
                                 ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                       eta1_XS
                of
                { (# ipv_i7JiK, ipv1_i7JiL #) ->
                jump go_s8PpD vals_a8P1m (+# ds1_d8Pjg 1#) ipv_i7JiK
                }
            }; } in
      jump go_s8PpD vals0_a8P1j 0# eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 15, joins: 0/0}
pokeArray :: forall a. Storable a => Ptr a -> [a] -> IO ()
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U(A,A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><L,U><S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.Marshal.Array.newArray2
               `cast` (forall (a :: <*>_N).
                       <Storable a>_R
                       ->_R <Ptr a>_R
                       ->_R <[a]>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           Storable a =>
                           Ptr a
                           -> [a] -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (forall a. Storable a => Ptr a -> [a] -> IO () :: *))}]
pokeArray
  = Foreign.Marshal.Array.newArray2
    `cast` (forall (a :: <*>_N).
            <Storable a>_R
            ->_R <Ptr a>_R
            ->_R <[a]>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                Storable a =>
                Ptr a
                -> [a] -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (forall a. Storable a => Ptr a -> [a] -> IO () :: *))

-- RHS size: {terms: 29, types: 34, coercions: 8, joins: 0/1}
withArrayLen
  :: forall a b. Storable a => [a] -> (Int -> Ptr a -> IO b) -> IO b
[GblId,
 Arity=3,
 Str=<L,U(C(U(U)),C(U(U)),A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><L,U><L,C(C1(C1(U)))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 60] 190 0}]
withArrayLen
  = \ (@ a_a8Pg7)
      (@ b_a8Pg8)
      ($dStorable_a8Pga :: Storable a_a8Pg7)
      (vals_a8P1C :: [a_a8Pg7])
      (f_a8P1D :: Int -> Ptr a_a8Pg7 -> IO b_a8Pg8) ->
      let {
        len_s8PpB :: Int
        [LclId]
        len_s8PpB
          = case GHC.List.$wlenAcc @ a_a8Pg7 vals_a8P1C 0# of ww2_i8PwI
            { __DEFAULT ->
            GHC.Types.I# ww2_i8PwI
            } } in
      allocaArray
        @ a_a8Pg7
        @ b_a8Pg8
        $dStorable_a8Pga
        len_s8PpB
        ((\ (ptr_a8P1F :: Ptr a_a8Pg7) (s_i7JiH :: State# RealWorld) ->
            case Foreign.Marshal.Array.newArray2
                   @ a_a8Pg7 $dStorable_a8Pga ptr_a8P1F vals_a8P1C s_i7JiH
            of
            { (# ipv_i7JiK, ipv1_i7JiL #) ->
            ((f_a8P1D len_s8PpB ptr_a8P1F)
             `cast` (GHC.Types.N:IO[0] <b_a8Pg8>_R
                     :: (IO b_a8Pg8 :: *)
                        ~R# (State# RealWorld -> (# State# RealWorld, b_a8Pg8 #) :: *)))
              ipv_i7JiK
            })
         `cast` (<Ptr a_a8Pg7>_R ->_R Sym (GHC.Types.N:IO[0] <b_a8Pg8>_R)
                 :: (Ptr a_a8Pg7
                     -> State# RealWorld -> (# State# RealWorld, b_a8Pg8 #) :: *)
                    ~R# (Ptr a_a8Pg7 -> IO b_a8Pg8 :: *)))

-- RHS size: {terms: 26, types: 32, coercions: 8, joins: 0/0}
withArray
  :: forall a b. Storable a => [a] -> (Ptr a -> IO b) -> IO b
[GblId,
 Arity=3,
 Str=<L,U(C(U(U)),C(U(U)),A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><L,U><L,C(C1(U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 60] 170 0}]
withArray
  = \ (@ a_a8Pgv)
      (@ b_a8Pgw)
      ($dStorable_a8Pgy :: Storable a_a8Pgv)
      (vals_a8P1B :: [a_a8Pgv])
      (x_i7Rxi :: Ptr a_a8Pgv -> IO b_a8Pgw) ->
      allocaArray
        @ a_a8Pgv
        @ b_a8Pgw
        $dStorable_a8Pgy
        (case GHC.List.$wlenAcc @ a_a8Pgv vals_a8P1B 0# of ww2_i8PwI
         { __DEFAULT ->
         GHC.Types.I# ww2_i8PwI
         })
        ((\ (ptr_a8P1F :: Ptr a_a8Pgv) (s_i7JiH :: State# RealWorld) ->
            case Foreign.Marshal.Array.newArray2
                   @ a_a8Pgv $dStorable_a8Pgy ptr_a8P1F vals_a8P1B s_i7JiH
            of
            { (# ipv_i7JiK, ipv1_i7JiL #) ->
            ((x_i7Rxi ptr_a8P1F)
             `cast` (GHC.Types.N:IO[0] <b_a8Pgw>_R
                     :: (IO b_a8Pgw :: *)
                        ~R# (State# RealWorld -> (# State# RealWorld, b_a8Pgw #) :: *)))
              ipv_i7JiK
            })
         `cast` (<Ptr a_a8Pgv>_R ->_R Sym (GHC.Types.N:IO[0] <b_a8Pgw>_R)
                 :: (Ptr a_a8Pgv
                     -> State# RealWorld -> (# State# RealWorld, b_a8Pgw #) :: *)
                    ~R# (Ptr a_a8Pgv -> IO b_a8Pgw :: *)))

-- RHS size: {terms: 44, types: 52, coercions: 0, joins: 0/1}
Foreign.Marshal.Array.newArray1
  :: forall a.
     Storable a =>
     [a] -> State# RealWorld -> (# State# RealWorld, Ptr a #)
[GblId,
 Arity=3,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 195 30}]
Foreign.Marshal.Array.newArray1
  = \ (@ a_a8Piu)
      ($dStorable_a8Piw :: Storable a_a8Piu)
      (vals_a8P1w :: [a_a8Piu])
      (s_i7IAv :: State# RealWorld) ->
      case GHC.List.$wlenAcc @ a_a8Piu vals_a8P1w 0# of ww2_i8PwI
      { __DEFAULT ->
      case sizeOf
             @ a_a8Piu
             $dStorable_a8Piw
             (Foreign.Marshal.Array.mallocArray1 @ a_a8Piu)
      of
      { I# y_i7MWP ->
      case {__pkg_ccall base-4.11.0.0 Word#
                           -> State# RealWorld -> (# State# RealWorld, Addr# #)}_d8MKH
             (int2Word# (*# ww2_i8PwI y_i7MWP)) s_i7IAv
      of
      { (# ds_d8MKF, ds1_d8MKE #) ->
      case eqAddr# ds1_d8MKE __NULL of {
        __DEFAULT ->
          let {
            ipv1_i7IAz :: Ptr a_a8Piu
            [LclId, Unf=OtherCon []]
            ipv1_i7IAz = GHC.Ptr.Ptr @ a_a8Piu ds1_d8MKE } in
          case Foreign.Marshal.Array.newArray2
                 @ a_a8Piu $dStorable_a8Piw ipv1_i7IAz vals_a8P1w ds_d8MKF
          of
          { (# ipv_i7JiK, ipv2_i7JiL #) ->
          (# ipv_i7JiK, ipv1_i7IAz #)
          };
        1# ->
          raiseIO#
            @ GHC.Exception.SomeException
            @ (Ptr a_a8Piu)
            Foreign.Marshal.Alloc.malloc1
            ds_d8MKF
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
newArray :: forall a. Storable a => [a] -> IO (Ptr a)
[GblId,
 Arity=3,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><S,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.Marshal.Array.newArray1
               `cast` (forall (a :: <*>_N).
                       <Storable a>_R ->_R <[a]>_R ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
                       :: (forall a.
                           Storable a =>
                           [a] -> State# RealWorld -> (# State# RealWorld, Ptr a #) :: *)
                          ~R# (forall a. Storable a => [a] -> IO (Ptr a) :: *))}]
newArray
  = Foreign.Marshal.Array.newArray1
    `cast` (forall (a :: <*>_N).
            <Storable a>_R ->_R <[a]>_R ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
            :: (forall a.
                Storable a =>
                [a] -> State# RealWorld -> (# State# RealWorld, Ptr a #) :: *)
               ~R# (forall a. Storable a => [a] -> IO (Ptr a) :: *))

-- RHS size: {terms: 46, types: 61, coercions: 4, joins: 2/2}
Foreign.Marshal.Array.newArray4
  :: forall a.
     Storable a =>
     a -> Ptr a -> [a] -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(C(S))))LLLL),U(A,A,A,C(C1(C1(C1(U(U,U))))),A,A,A,A)><L,U><L,U><S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [60 0 0 0 0] 187 0}]
Foreign.Marshal.Array.newArray4
  = \ (@ a_a8Pbf)
      ($dStorable_a8Pbh :: Storable a_a8Pbf)
      (marker_a8P1o :: a_a8Pbf)
      (ptr_a8P1p :: Ptr a_a8Pbf)
      (vals0_a8P1q :: [a_a8Pbf])
      (eta_B1 :: State# RealWorld) ->
      join {
        exit_X11 [Dmd=<L,C(C1(U(U,U)))>]
          :: Int# -> State# RealWorld -> (# State# RealWorld, () #)
        [LclId[JoinId(2)], Arity=2, Str=<L,U><S,U>]
        exit_X11 (n#_a8P1s [OS=OneShot] :: Int#)
                 (eta1_X13 [OS=OneShot] :: State# RealWorld)
          = ((pokeElemOff
                @ a_a8Pbf
                $dStorable_a8Pbh
                ptr_a8P1p
                (GHC.Types.I# n#_a8P1s)
                marker_a8P1o)
             `cast` (GHC.Types.N:IO[0] <()>_R
                     :: (IO () :: *)
                        ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
              eta1_X13 } in
      joinrec {
        go_s8Ppz [Occ=LoopBreaker]
          :: [a_a8Pbf]
             -> Int# -> State# RealWorld -> (# State# RealWorld, () #)
        [LclId[JoinId(3)], Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []]
        go_s8Ppz (ds_d8Pj8 :: [a_a8Pbf])
                 (n#_a8P1s :: Int#)
                 (eta1_X13 :: State# RealWorld)
          = case ds_d8Pj8 of {
              [] -> jump exit_X11 n#_a8P1s eta1_X13;
              : val_a8P1t vals_a8P1u ->
                case ((pokeElemOff
                         @ a_a8Pbf
                         $dStorable_a8Pbh
                         ptr_a8P1p
                         (GHC.Types.I# n#_a8P1s)
                         val_a8P1t)
                      `cast` (GHC.Types.N:IO[0] <()>_R
                              :: (IO () :: *)
                                 ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                       eta1_X13
                of
                { (# ipv_i7JiK, ipv1_i7JiL #) ->
                jump go_s8Ppz vals_a8P1u (+# n#_a8P1s 1#) ipv_i7JiK
                }
            }; } in
      jump go_s8Ppz vals0_a8P1q 0# eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 17, joins: 0/0}
pokeArray0 :: forall a. Storable a => a -> Ptr a -> [a] -> IO ()
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(C(S))))LLLL),U(A,A,A,C(C1(C1(C1(U(U,U))))),A,A,A,A)><L,U><L,U><S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.Marshal.Array.newArray4
               `cast` (forall (a :: <*>_N).
                       <Storable a>_R
                       ->_R <a>_R
                       ->_R <Ptr a>_R
                       ->_R <[a]>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           Storable a =>
                           a
                           -> Ptr a
                           -> [a]
                           -> State# RealWorld
                           -> (# State# RealWorld, () #) :: *)
                          ~R# (forall a. Storable a => a -> Ptr a -> [a] -> IO () :: *))}]
pokeArray0
  = Foreign.Marshal.Array.newArray4
    `cast` (forall (a :: <*>_N).
            <Storable a>_R
            ->_R <a>_R
            ->_R <Ptr a>_R
            ->_R <[a]>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                Storable a =>
                a
                -> Ptr a
                -> [a]
                -> State# RealWorld
                -> (# State# RealWorld, () #) :: *)
               ~R# (forall a. Storable a => a -> Ptr a -> [a] -> IO () :: *))

-- RHS size: {terms: 37, types: 37, coercions: 8, joins: 0/1}
withArrayLen0
  :: forall a b.
     Storable a =>
     a -> [a] -> (Int -> Ptr a -> IO b) -> IO b
[GblId,
 Arity=4,
 Str=<L,U(C(U(U)),C(U(U)),A,C(C1(C1(C1(U(U,U))))),A,A,A,A)><L,U><L,U><L,C(C1(C1(U)))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0 60] 221 0}]
withArrayLen0
  = \ (@ a_a8Pfp)
      (@ b_a8Pfq)
      ($dStorable_a8Pfs :: Storable a_a8Pfp)
      (marker_a8P1I :: a_a8Pfp)
      (vals_a8P1J :: [a_a8Pfp])
      (f_a8P1K :: Int -> Ptr a_a8Pfp -> IO b_a8Pfq) ->
      let {
        len_s8Ppx [Dmd=<L,U(U)>] :: Int
        [LclId]
        len_s8Ppx
          = case GHC.List.$wlenAcc @ a_a8Pfp vals_a8P1J 0# of ww2_i8PwI
            { __DEFAULT ->
            GHC.Types.I# ww2_i8PwI
            } } in
      allocaArray
        @ a_a8Pfp
        @ b_a8Pfq
        $dStorable_a8Pfs
        (case len_s8Ppx of { I# x_i7MX1 -> GHC.Types.I# (+# x_i7MX1 1#) })
        ((\ (ptr_a8P1M :: Ptr a_a8Pfp) (s_i7JiH :: State# RealWorld) ->
            case Foreign.Marshal.Array.newArray4
                   @ a_a8Pfp
                   $dStorable_a8Pfs
                   marker_a8P1I
                   ptr_a8P1M
                   vals_a8P1J
                   s_i7JiH
            of
            { (# ipv_i7JiK, ipv1_i7JiL #) ->
            ((f_a8P1K len_s8Ppx ptr_a8P1M)
             `cast` (GHC.Types.N:IO[0] <b_a8Pfq>_R
                     :: (IO b_a8Pfq :: *)
                        ~R# (State# RealWorld -> (# State# RealWorld, b_a8Pfq #) :: *)))
              ipv_i7JiK
            })
         `cast` (<Ptr a_a8Pfp>_R ->_R Sym (GHC.Types.N:IO[0] <b_a8Pfq>_R)
                 :: (Ptr a_a8Pfp
                     -> State# RealWorld -> (# State# RealWorld, b_a8Pfq #) :: *)
                    ~R# (Ptr a_a8Pfp -> IO b_a8Pfq :: *)))

-- RHS size: {terms: 12, types: 16, coercions: 0, joins: 0/0}
withArray0
  :: forall a b. Storable a => a -> [a] -> (Ptr a -> IO b) -> IO b
[GblId,
 Arity=4,
 Str=<L,U(C(U(U)),C(U(U)),A,C(C1(C1(C1(U(U,U))))),A,A,A,A)><L,U><L,U><L,C(C1(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a8PfU)
                 (@ b_a8PfV)
                 ($dStorable_a8PfX [Occ=Once] :: Storable a_a8PfU)
                 (marker_a8P1G [Occ=Once] :: a_a8PfU)
                 (vals_a8P1H [Occ=Once] :: [a_a8PfU])
                 (x_i7Rxi [Occ=OnceL] :: Ptr a_a8PfU -> IO b_a8PfV) ->
                 withArrayLen0
                   @ a_a8PfU
                   @ b_a8PfV
                   $dStorable_a8PfX
                   marker_a8P1G
                   vals_a8P1H
                   (\ _ [Occ=Dead] -> x_i7Rxi)}]
withArray0
  = \ (@ a_a8PfU)
      (@ b_a8PfV)
      ($dStorable_a8PfX :: Storable a_a8PfU)
      (marker_a8P1G :: a_a8PfU)
      (vals_a8P1H :: [a_a8PfU])
      (x_i7Rxi :: Ptr a_a8PfU -> IO b_a8PfV) ->
      withArrayLen0
        @ a_a8PfU
        @ b_a8PfV
        $dStorable_a8PfX
        marker_a8P1G
        vals_a8P1H
        (\ _ [Occ=Dead] -> x_i7Rxi)

-- RHS size: {terms: 48, types: 53, coercions: 0, joins: 0/1}
Foreign.Marshal.Array.newArray3
  :: forall a.
     Storable a =>
     a -> [a] -> State# RealWorld -> (# State# RealWorld, Ptr a #)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,U))))),A,A,A,A)><L,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 0 0 0] 206 30}]
Foreign.Marshal.Array.newArray3
  = \ (@ a_a8Pia)
      ($dStorable_a8Pic :: Storable a_a8Pia)
      (marker_a8P1y :: a_a8Pia)
      (vals_a8P1z :: [a_a8Pia])
      (s_i7IAv :: State# RealWorld) ->
      case GHC.List.$wlenAcc @ a_a8Pia vals_a8P1z 0# of ww2_i8PwI
      { __DEFAULT ->
      case sizeOf
             @ a_a8Pia
             $dStorable_a8Pic
             (Foreign.Marshal.Array.mallocArray1 @ a_a8Pia)
      of
      { I# y_i7MWP ->
      case {__pkg_ccall base-4.11.0.0 Word#
                           -> State# RealWorld -> (# State# RealWorld, Addr# #)}_d8MKH
             (int2Word# (*# (+# ww2_i8PwI 1#) y_i7MWP)) s_i7IAv
      of
      { (# ds_d8MKF, ds1_d8MKE #) ->
      case eqAddr# ds1_d8MKE __NULL of {
        __DEFAULT ->
          let {
            ipv1_i7IAz :: Ptr a_a8Pia
            [LclId, Unf=OtherCon []]
            ipv1_i7IAz = GHC.Ptr.Ptr @ a_a8Pia ds1_d8MKE } in
          case Foreign.Marshal.Array.newArray4
                 @ a_a8Pia
                 $dStorable_a8Pic
                 marker_a8P1y
                 ipv1_i7IAz
                 vals_a8P1z
                 ds_d8MKF
          of
          { (# ipv_i7JiK, ipv2_i7JiL #) ->
          (# ipv_i7JiK, ipv1_i7IAz #)
          };
        1# ->
          raiseIO#
            @ GHC.Exception.SomeException
            @ (Ptr a_a8Pia)
            Foreign.Marshal.Alloc.malloc1
            ds_d8MKF
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 15, joins: 0/0}
newArray0 :: forall a. Storable a => a -> [a] -> IO (Ptr a)
[GblId,
 Arity=4,
 Str=<S(C(S(S))LLLLLLL),U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,U))))),A,A,A,A)><L,U><S,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.Marshal.Array.newArray3
               `cast` (forall (a :: <*>_N).
                       <Storable a>_R
                       ->_R <a>_R
                       ->_R <[a]>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
                       :: (forall a.
                           Storable a =>
                           a -> [a] -> State# RealWorld -> (# State# RealWorld, Ptr a #) :: *)
                          ~R# (forall a. Storable a => a -> [a] -> IO (Ptr a) :: *))}]
newArray0
  = Foreign.Marshal.Array.newArray3
    `cast` (forall (a :: <*>_N).
            <Storable a>_R
            ->_R <a>_R
            ->_R <[a]>_R
            ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
            :: (forall a.
                Storable a =>
                a -> [a] -> State# RealWorld -> (# State# RealWorld, Ptr a #) :: *)
               ~R# (forall a. Storable a => a -> [a] -> IO (Ptr a) :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl22_r8PPB :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl22_r8PPB = GHC.Types.I# 242#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl23_r8PPC :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl23_r8PPC = GHC.Types.I# 21#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl24_r8PPD :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl24_r8PPD = GHC.Types.I# 30#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl25_r8PPE :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []]
lvl25_r8PPE
  = GHC.Stack.Types.SrcLoc
      lvl2_r8PPh
      lvl3_r8PPi
      lvl5_r8PPk
      lvl22_r8PPB
      lvl23_r8PPC
      lvl22_r8PPB
      lvl24_r8PPD

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl26_r8PPF :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []]
lvl26_r8PPF
  = GHC.Stack.Types.PushCallStack
      lvl1_r8PPg lvl25_r8PPE GHC.Stack.Types.EmptyCallStack

-- RHS size: {terms: 3, types: 4, coercions: 4, joins: 0/0}
Foreign.Marshal.Array.copyArray1 :: forall a. a
[GblId, Str=x]
Foreign.Marshal.Array.copyArray1
  = \ (@ a_a8PaC) ->
      undefined
        @ 'LiftedRep
        @ a_a8PaC
        (lvl26_r8PPF
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: (GHC.Stack.Types.CallStack :: *)
                    ~R# (?callStack::GHC.Stack.Types.CallStack :: Constraint)))

-- RHS size: {terms: 35, types: 42, coercions: 11, joins: 0/1}
copyArray :: forall a. Storable a => Ptr a -> Ptr a -> Int -> IO ()
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 151 60}]
copyArray
  = \ (@ a_a8PaC) ($dStorable_a8PaE :: Storable a_a8PaC) ->
      let {
        lvl33_s8PrJ [Dmd=<L,U(U)>] :: Int
        [LclId]
        lvl33_s8PrJ
          = sizeOf
              @ a_a8PaC
              $dStorable_a8PaE
              (Foreign.Marshal.Array.copyArray1 @ a_a8PaC) } in
      (\ (dest_a8P1R :: Ptr a_a8PaC)
         (src_a8P1S :: Ptr a_a8PaC)
         (size_a8P1T :: Int)
         (s_i7IAv :: State# RealWorld) ->
         case dest_a8P1R of { GHC.Ptr.Ptr ds1_d8O5G ->
         case src_a8P1S of { GHC.Ptr.Ptr ds3_d8O5I ->
         case size_a8P1T of { I# x_i7MWL ->
         case lvl33_s8PrJ of { I# y_i7MWP ->
         case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Addr#
                           -> Word#
                           -> State# RealWorld
                           -> (# State# RealWorld, Addr# #)}_d8O5O
                ds1_d8O5G ds3_d8O5I (int2Word# (*# x_i7MWL y_i7MWP)) s_i7IAv
         of
         { (# ds4_d8O5M, ds5_d8O5L #) ->
         (# ds4_d8O5M, GHC.Tuple.() #)
         }
         }
         }
         }
         })
      `cast` (<Ptr a_a8PaC>_R
              ->_R <Ptr a_a8PaC>_R
              ->_R <Int>_R
              ->_R Sym (GHC.Types.N:IO[0] <()>_R)
              :: (Ptr a_a8PaC
                  -> Ptr a_a8PaC
                  -> Int
                  -> State# RealWorld
                  -> (# State# RealWorld, () #) :: *)
                 ~R# (Ptr a_a8PaC -> Ptr a_a8PaC -> Int -> IO () :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl27_r8PPG :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl27_r8PPG = GHC.Types.I# 251#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl28_r8PPH :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []]
lvl28_r8PPH
  = GHC.Stack.Types.SrcLoc
      lvl2_r8PPh
      lvl3_r8PPi
      lvl5_r8PPk
      lvl27_r8PPG
      lvl23_r8PPC
      lvl27_r8PPG
      lvl24_r8PPD

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl29_r8PPI :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []]
lvl29_r8PPI
  = GHC.Stack.Types.PushCallStack
      lvl1_r8PPg lvl28_r8PPH GHC.Stack.Types.EmptyCallStack

-- RHS size: {terms: 3, types: 4, coercions: 4, joins: 0/0}
Foreign.Marshal.Array.moveArray1 :: forall a. a
[GblId, Str=x]
Foreign.Marshal.Array.moveArray1
  = \ (@ a_a8P9Z) ->
      undefined
        @ 'LiftedRep
        @ a_a8P9Z
        (lvl29_r8PPI
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: (GHC.Stack.Types.CallStack :: *)
                    ~R# (?callStack::GHC.Stack.Types.CallStack :: Constraint)))

-- RHS size: {terms: 35, types: 42, coercions: 11, joins: 0/1}
moveArray :: forall a. Storable a => Ptr a -> Ptr a -> Int -> IO ()
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 151 60}]
moveArray
  = \ (@ a_a8P9Z) ($dStorable_a8Pa1 :: Storable a_a8P9Z) ->
      let {
        lvl33_s8Ps4 [Dmd=<L,U(U)>] :: Int
        [LclId]
        lvl33_s8Ps4
          = sizeOf
              @ a_a8P9Z
              $dStorable_a8Pa1
              (Foreign.Marshal.Array.moveArray1 @ a_a8P9Z) } in
      (\ (dest_a8P1X :: Ptr a_a8P9Z)
         (src_a8P1Y :: Ptr a_a8P9Z)
         (size_a8P1Z :: Int)
         (s_i7IAv :: State# RealWorld) ->
         case dest_a8P1X of { GHC.Ptr.Ptr ds1_d8O5s ->
         case src_a8P1Y of { GHC.Ptr.Ptr ds3_d8O5u ->
         case size_a8P1Z of { I# x_i7MWL ->
         case lvl33_s8Ps4 of { I# y_i7MWP ->
         case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Addr#
                           -> Word#
                           -> State# RealWorld
                           -> (# State# RealWorld, Addr# #)}_d8O5A
                ds1_d8O5s ds3_d8O5u (int2Word# (*# x_i7MWL y_i7MWP)) s_i7IAv
         of
         { (# ds4_d8O5y, ds5_d8O5x #) ->
         (# ds4_d8O5y, GHC.Tuple.() #)
         }
         }
         }
         }
         })
      `cast` (<Ptr a_a8P9Z>_R
              ->_R <Ptr a_a8P9Z>_R
              ->_R <Int>_R
              ->_R Sym (GHC.Types.N:IO[0] <()>_R)
              :: (Ptr a_a8P9Z
                  -> Ptr a_a8P9Z
                  -> Int
                  -> State# RealWorld
                  -> (# State# RealWorld, () #) :: *)
                 ~R# (Ptr a_a8P9Z -> Ptr a_a8P9Z -> Int -> IO () :: *))

-- RHS size: {terms: 38, types: 48, coercions: 2, joins: 1/1}
Foreign.Marshal.Array.lengthArray1
  :: forall a.
     (Storable a, Eq a) =>
     a -> Ptr a -> State# RealWorld -> (# State# RealWorld, Int #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S(LLC(C(C(S(SL))))LLLLL),U(A,A,C(C1(C1(U(U,U)))),A,A,A,A,A)><L,U(C(C1(U)),A)><L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 0 0 0] 149 0}]
Foreign.Marshal.Array.lengthArray1
  = \ (@ a_a8P9q)
      ($dStorable_a8P9s :: Storable a_a8P9q)
      ($dEq_a8P9t :: Eq a_a8P9q)
      (marker_a8P20 :: a_a8P9q)
      (ptr_a8P21 :: Ptr a_a8P9q)
      (eta_B1 :: State# RealWorld) ->
      joinrec {
        loop_s8Ppr [Occ=LoopBreaker]
          :: Int -> State# RealWorld -> (# State# RealWorld, Int #)
        [LclId[JoinId(2)], Arity=2, Str=<L,U(U)><S,U>, Unf=OtherCon []]
        loop_s8Ppr (i_a8P23 :: Int) (s_i7IAv :: State# RealWorld)
          = case ((peekElemOff @ a_a8P9q $dStorable_a8P9s ptr_a8P21 i_a8P23)
                  `cast` (GHC.Types.N:IO[0] <a_a8P9q>_R
                          :: (IO a_a8P9q :: *)
                             ~R# (State# RealWorld -> (# State# RealWorld, a_a8P9q #) :: *)))
                   s_i7IAv
            of
            { (# ipv_i7IAy, ipv1_i7IAz #) ->
            case == @ a_a8P9q $dEq_a8P9t ipv1_i7IAz marker_a8P20 of {
              False ->
                jump loop_s8Ppr
                  (case i_a8P23 of { I# x_i7MX1 -> GHC.Types.I# (+# x_i7MX1 1#) })
                  ipv_i7IAy;
              True -> (# ipv_i7IAy, i_a8P23 #)
            }
            }; } in
      jump loop_s8Ppr Foreign.Marshal.Array.lengthArray2 eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 17, joins: 0/0}
lengthArray0
  :: forall a. (Storable a, Eq a) => a -> Ptr a -> IO Int
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S(LLC(C(C(S(SL))))LLLLL),U(A,A,C(C1(C1(U(U,U)))),A,A,A,A,A)><L,U(C(C1(U)),A)><L,U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.Marshal.Array.lengthArray1
               `cast` (forall (a :: <*>_N).
                       <Storable a>_R
                       ->_R <Eq a>_R
                       ->_R <a>_R
                       ->_R <Ptr a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Int>_R)
                       :: (forall a.
                           (Storable a, Eq a) =>
                           a -> Ptr a -> State# RealWorld -> (# State# RealWorld, Int #) :: *)
                          ~R# (forall a. (Storable a, Eq a) => a -> Ptr a -> IO Int :: *))}]
lengthArray0
  = Foreign.Marshal.Array.lengthArray1
    `cast` (forall (a :: <*>_N).
            <Storable a>_R
            ->_R <Eq a>_R
            ->_R <a>_R
            ->_R <Ptr a>_R
            ->_R Sym (GHC.Types.N:IO[0] <Int>_R)
            :: (forall a.
                (Storable a, Eq a) =>
                a -> Ptr a -> State# RealWorld -> (# State# RealWorld, Int #) :: *)
               ~R# (forall a. (Storable a, Eq a) => a -> Ptr a -> IO Int :: *))

-- RHS size: {terms: 19, types: 24, coercions: 0, joins: 0/0}
Foreign.Marshal.Array.peekArray2
  :: forall a.
     (Storable a, Eq a) =>
     a -> Ptr a -> State# RealWorld -> (# State# RealWorld, [a] #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S(LLC(C(C(S(SL))))LLLLL),U(A,A,C(C1(C1(U(U,U)))),A,A,A,A,A)><L,U(C(C1(U)),A)><L,U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a8Pds)
                 ($dStorable_a8Pdu :: Storable a_a8Pds)
                 ($dEq_a8Pdv [Occ=Once] :: Eq a_a8Pds)
                 (marker_a8P1f [Occ=Once] :: a_a8Pds)
                 (ptr_a8P1g :: Ptr a_a8Pds)
                 (s_i7IAv [Occ=Once] :: State# RealWorld) ->
                 case Foreign.Marshal.Array.lengthArray1
                        @ a_a8Pds
                        $dStorable_a8Pdu
                        $dEq_a8Pdv
                        marker_a8P1f
                        ptr_a8P1g
                        s_i7IAv
                 of
                 { (# ipv_i7IAy [Occ=Once], ipv1_i7IAz [Occ=Once] #) ->
                 Foreign.Marshal.Array.peekArray1
                   @ a_a8Pds $dStorable_a8Pdu ipv1_i7IAz ptr_a8P1g ipv_i7IAy
                 }}]
Foreign.Marshal.Array.peekArray2
  = \ (@ a_a8Pds)
      ($dStorable_a8Pdu :: Storable a_a8Pds)
      ($dEq_a8Pdv :: Eq a_a8Pds)
      (marker_a8P1f :: a_a8Pds)
      (ptr_a8P1g :: Ptr a_a8Pds)
      (s_i7IAv :: State# RealWorld) ->
      case Foreign.Marshal.Array.lengthArray1
             @ a_a8Pds
             $dStorable_a8Pdu
             $dEq_a8Pdv
             marker_a8P1f
             ptr_a8P1g
             s_i7IAv
      of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      Foreign.Marshal.Array.peekArray1
        @ a_a8Pds $dStorable_a8Pdu ipv1_i7IAz ptr_a8P1g ipv_i7IAy
      }

-- RHS size: {terms: 1, types: 0, coercions: 18, joins: 0/0}
peekArray0 :: forall a. (Storable a, Eq a) => a -> Ptr a -> IO [a]
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S(LLC(C(C(S(SL))))LLLLL),U(A,A,C(C1(C1(U(U,U)))),A,A,A,A,A)><L,U(C(C1(U)),A)><L,U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.Marshal.Array.peekArray2
               `cast` (forall (a :: <*>_N).
                       <Storable a>_R
                       ->_R <Eq a>_R
                       ->_R <a>_R
                       ->_R <Ptr a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <[a]>_R)
                       :: (forall a.
                           (Storable a, Eq a) =>
                           a -> Ptr a -> State# RealWorld -> (# State# RealWorld, [a] #) :: *)
                          ~R# (forall a. (Storable a, Eq a) => a -> Ptr a -> IO [a] :: *))}]
peekArray0
  = Foreign.Marshal.Array.peekArray2
    `cast` (forall (a :: <*>_N).
            <Storable a>_R
            ->_R <Eq a>_R
            ->_R <a>_R
            ->_R <Ptr a>_R
            ->_R Sym (GHC.Types.N:IO[0] <[a]>_R)
            :: (forall a.
                (Storable a, Eq a) =>
                a -> Ptr a -> State# RealWorld -> (# State# RealWorld, [a] #) :: *)
               ~R# (forall a. (Storable a, Eq a) => a -> Ptr a -> IO [a] :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl30_r8PPJ :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl30_r8PPJ = GHC.Types.I# 276#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl31_r8PPK :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []]
lvl31_r8PPK
  = GHC.Stack.Types.SrcLoc
      lvl2_r8PPh
      lvl3_r8PPi
      lvl5_r8PPk
      lvl30_r8PPJ
      lvl7_r8PPm
      lvl30_r8PPJ
      lvl8_r8PPn

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl32_r8PPL :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []]
lvl32_r8PPL
  = GHC.Stack.Types.PushCallStack
      lvl1_r8PPg lvl31_r8PPK GHC.Stack.Types.EmptyCallStack

-- RHS size: {terms: 3, types: 4, coercions: 4, joins: 0/0}
Foreign.Marshal.Array.advancePtr1 :: forall a. a
[GblId, Str=x]
Foreign.Marshal.Array.advancePtr1
  = \ (@ a_a8P8O) ->
      undefined
        @ 'LiftedRep
        @ a_a8P8O
        (lvl32_r8PPL
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: (GHC.Stack.Types.CallStack :: *)
                    ~R# (?callStack::GHC.Stack.Types.CallStack :: Constraint)))

-- RHS size: {terms: 23, types: 18, coercions: 0, joins: 0/1}
advancePtr :: forall a. Storable a => Ptr a -> Int -> Ptr a
[GblId,
 Arity=1,
 Str=<L,1*U(1*C1(U(U)),A,A,A,A,A,A,A)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 102 60}]
advancePtr
  = \ (@ a_a8P8O) ($dStorable_a8P8Q :: Storable a_a8P8O) ->
      let {
        lvl33_s8Psq [Dmd=<L,U(U)>] :: Int
        [LclId]
        lvl33_s8Psq
          = sizeOf
              @ a_a8P8O
              $dStorable_a8P8Q
              (Foreign.Marshal.Array.advancePtr1 @ a_a8P8O) } in
      \ (ptr_a8P28 :: Ptr a_a8P8O) (i_a8P29 :: Int) ->
        case ptr_a8P28 of { GHC.Ptr.Ptr addr_i7NQm ->
        case i_a8P29 of { I# x_i7MWL ->
        case lvl33_s8Psq of { I# y_i7MWP ->
        GHC.Ptr.Ptr @ a_a8P8O (plusAddr# addr_i7NQm (*# x_i7MWL y_i7MWP))
        }
        }
        }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.Marshal.Array.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.Marshal.Array.$trModule3
  = GHC.Types.TrNameS Foreign.Marshal.Array.$trModule4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.Marshal.Array.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.Marshal.Array.$trModule1
  = GHC.Types.TrNameS Foreign.Marshal.Array.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Foreign.Marshal.Array.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Foreign.Marshal.Array.$trModule
  = GHC.Types.Module
      Foreign.Marshal.Array.$trModule3 Foreign.Marshal.Array.$trModule1


