
==================== Raw Cmm ====================
2018-03-16 16:03:56.862429705 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:56.865008446 UTC

[section ""data" . Foreign.Marshal.Alloc.allocaBytes1_closure" {
     Foreign.Marshal.Alloc.allocaBytes1_closure:
         const Foreign.Marshal.Alloc.allocaBytes1_info;
 },
 Foreign.Marshal.Alloc.allocaBytes1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8NqJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NqK; else goto c8NqL;
       c8NqK: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.allocaBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8NqL: // global
           I64[Sp - 16] = block_c8NqG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8Nr2; else goto c8NqH;
       u8Nr2: // global
           call _c8NqG(R1) args: 0, res: 0, upd: 0;
       c8NqH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.allocaBytes1_info" {
     Foreign.Marshal.Alloc.allocaBytes1_info:
         const Foreign.Marshal.Alloc.allocaBytes1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c8NqG() //  [R1]
         { []
         }
     {offset
       c8NqG: // global
           I64[Sp] = block_c8NqO_info;
           R1 = I64[R1 + 7];
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NqG_info" {
     block_c8NqG_info:
         const _c8NqG;
         const 1;
         const 30;
 },
 _c8NqO() //  [R1]
         { []
         }
     {offset
       c8NqO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8NqT; else goto c8NqS;
       c8NqT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8NqS: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           P64[Hp] = R1 + 16;
           I64[Sp] = block_c8NqY_info;
           R2 = Hp - 7;
           _s8N6P::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8N6P::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NqO_info" {
     block_c8NqO_info:
         const _c8NqO;
         const 1;
         const 30;
 },
 _c8NqY() //  [R1]
         { []
         }
     {offset
       c8NqY: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NqY_info" {
     block_c8NqY_info:
         const _c8NqY;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.875877463 UTC

[section ""data" . Foreign.Marshal.Alloc.allocaBytes_closure" {
     Foreign.Marshal.Alloc.allocaBytes_closure:
         const Foreign.Marshal.Alloc.allocaBytes_info;
 },
 Foreign.Marshal.Alloc.allocaBytes_entry() //  [R2, R3]
         { []
         }
     {offset
       c8Nro: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Alloc.allocaBytes1_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.allocaBytes_info" {
     Foreign.Marshal.Alloc.allocaBytes_info:
         const Foreign.Marshal.Alloc.allocaBytes_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.880879775 UTC

[section ""data" . Foreign.Marshal.Alloc.allocaBytesAligned1_closure" {
     Foreign.Marshal.Alloc.allocaBytesAligned1_closure:
         const Foreign.Marshal.Alloc.allocaBytesAligned1_info;
 },
 Foreign.Marshal.Alloc.allocaBytesAligned1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8NrC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8NrG; else goto c8NrH;
       c8NrG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.allocaBytesAligned1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8NrH: // global
           I64[Sp - 24] = block_c8Nrz_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8Ns2; else goto c8NrA;
       u8Ns2: // global
           call _c8Nrz(R1) args: 0, res: 0, upd: 0;
       c8NrA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.allocaBytesAligned1_info" {
     Foreign.Marshal.Alloc.allocaBytesAligned1_info:
         const Foreign.Marshal.Alloc.allocaBytesAligned1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c8Nrz() //  [R1]
         { []
         }
     {offset
       c8Nrz: // global
           I64[Sp] = block_c8NrF_info;
           _s8N71::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8N71::I64;
           if (R1 & 7 != 0) goto u8Ns1; else goto c8NrJ;
       u8Ns1: // global
           call _c8NrF(R1) args: 0, res: 0, upd: 0;
       c8NrJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Nrz_info" {
     block_c8Nrz_info:
         const _c8Nrz;
         const 2;
         const 30;
 },
 _c8NrF() //  [R1]
         { []
         }
     {offset
       c8NrF: // global
           _s8N71::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c8NrN_info;
           R2 = I64[R1 + 7];
           R1 = _s8N71::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NrF_info" {
     block_c8NrF_info:
         const _c8NrF;
         const 66;
         const 30;
 },
 _c8NrN() //  [R1]
         { []
         }
     {offset
       c8NrN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8NrS; else goto c8NrR;
       c8NrS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8NrR: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           P64[Hp] = R1 + 16;
           I64[Sp] = block_c8NrX_info;
           R2 = Hp - 7;
           _s8N79::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8N79::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NrN_info" {
     block_c8NrN_info:
         const _c8NrN;
         const 1;
         const 30;
 },
 _c8NrX() //  [R1]
         { []
         }
     {offset
       c8NrX: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NrX_info" {
     block_c8NrX_info:
         const _c8NrX;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.891551968 UTC

[section ""data" . Foreign.Marshal.Alloc.allocaBytesAligned_closure" {
     Foreign.Marshal.Alloc.allocaBytesAligned_closure:
         const Foreign.Marshal.Alloc.allocaBytesAligned_info;
 },
 Foreign.Marshal.Alloc.allocaBytesAligned_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Nss: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Alloc.allocaBytesAligned1_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.allocaBytesAligned_info" {
     Foreign.Marshal.Alloc.allocaBytesAligned_info:
         const Foreign.Marshal.Alloc.allocaBytesAligned_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.895071589 UTC

[section ""cstring" . lvl_r8N65_bytes" {
     lvl_r8N65_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.897545198 UTC

[section ""data" . lvl1_r8N66_closure" {
     lvl1_r8N66_closure:
         const lvl1_r8N66_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r8N66_entry() //  [R1]
         { []
         }
     {offset
       c8NsG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NsH; else goto c8NsI;
       c8NsH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NsI: // global
           (_c8NsD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NsD::I64 == 0) goto c8NsF; else goto c8NsE;
       c8NsF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NsE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NsD::I64;
           R2 = lvl_r8N65_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r8N66_info" {
     lvl1_r8N66_info:
         const lvl1_r8N66_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.901328171 UTC

[section ""cstring" . Foreign.Marshal.Alloc.$trModule4_bytes" {
     Foreign.Marshal.Alloc.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.903742409 UTC

[section ""data" . lvl2_r8N67_closure" {
     lvl2_r8N67_closure:
         const lvl2_r8N67_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r8N67_entry() //  [R1]
         { []
         }
     {offset
       c8NsX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NsY; else goto c8NsZ;
       c8NsY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NsZ: // global
           (_c8NsU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NsU::I64 == 0) goto c8NsW; else goto c8NsV;
       c8NsW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NsV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NsU::I64;
           R2 = Foreign.Marshal.Alloc.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_r8N67_info" {
     lvl2_r8N67_info:
         const lvl2_r8N67_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.908714557 UTC

[section ""cstring" . Foreign.Marshal.Alloc.$trModule2_bytes" {
     Foreign.Marshal.Alloc.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,77,97,114,115,104,97,108,46,65,108,108,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.911013574 UTC

[section ""data" . lvl3_r8N68_closure" {
     lvl3_r8N68_closure:
         const lvl3_r8N68_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r8N68_entry() //  [R1]
         { []
         }
     {offset
       c8Nte: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Ntf; else goto c8Ntg;
       c8Ntf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Ntg: // global
           (_c8Ntb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8Ntb::I64 == 0) goto c8Ntd; else goto c8Ntc;
       c8Ntd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8Ntc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8Ntb::I64;
           R2 = Foreign.Marshal.Alloc.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r8N68_info" {
     lvl3_r8N68_info:
         const lvl3_r8N68_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.914840363 UTC

[section ""cstring" . lvl4_r8N69_bytes" {
     lvl4_r8N69_bytes:
         I8[] [46,47,70,111,114,101,105,103,110,47,77,97,114,115,104,97,108,47,65,108,108,111,99,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.917152389 UTC

[section ""data" . lvl5_r8N6a_closure" {
     lvl5_r8N6a_closure:
         const lvl5_r8N6a_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r8N6a_entry() //  [R1]
         { []
         }
     {offset
       c8Ntv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Ntw; else goto c8Ntx;
       c8Ntw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Ntx: // global
           (_c8Nts::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8Nts::I64 == 0) goto c8Ntu; else goto c8Ntt;
       c8Ntu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8Ntt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8Nts::I64;
           R2 = lvl4_r8N69_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r8N6a_info" {
     lvl5_r8N6a_info:
         const lvl5_r8N6a_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.921170257 UTC

[section ""data" . lvl6_r8N6b_closure" {
     lvl6_r8N6b_closure:
         const GHC.Types.I#_con_info;
         const 117;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.923006016 UTC

[section ""data" . lvl7_r8N6c_closure" {
     lvl7_r8N6c_closure:
         const GHC.Types.I#_con_info;
         const 31;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.924735708 UTC

[section ""data" . lvl8_r8N6d_closure" {
     lvl8_r8N6d_closure:
         const GHC.Types.I#_con_info;
         const 40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.926602422 UTC

[section ""data" . lvl9_r8N6e_closure" {
     lvl9_r8N6e_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8N67_closure;
         const lvl3_r8N68_closure;
         const lvl5_r8N6a_closure;
         const lvl6_r8N6b_closure+1;
         const lvl7_r8N6c_closure+1;
         const lvl6_r8N6b_closure+1;
         const lvl8_r8N6d_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.928830281 UTC

[section ""data" . lvl10_r8N6f_closure" {
     lvl10_r8N6f_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8N66_closure;
         const lvl9_r8N6e_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.931328915 UTC

[section ""data" . lvl11_r8N6g_closure" {
     lvl11_r8N6g_closure:
         const lvl11_r8N6g_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_r8N6g_entry() //  [R1]
         { []
         }
     {offset
       c8NtQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NtR; else goto c8NtS;
       c8NtR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NtS: // global
           (_c8NtN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NtN::I64 == 0) goto c8NtP; else goto c8NtO;
       c8NtP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NtO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NtN::I64;
           R2 = lvl10_r8N6f_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_r8N6g_info" {
     lvl11_r8N6g_info:
         const lvl11_r8N6g_entry;
         const 0;
         const 12884901909;
         const S8NaZ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.935013905 UTC

[section ""data" . lvl12_r8N6h_closure" {
     lvl12_r8N6h_closure:
         const GHC.Types.I#_con_info;
         const 60;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.937305028 UTC

[section ""data" . lvl13_r8N6i_closure" {
     lvl13_r8N6i_closure:
         const GHC.Types.I#_con_info;
         const 69;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.939164737 UTC

[section ""data" . lvl14_r8N6j_closure" {
     lvl14_r8N6j_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8N67_closure;
         const lvl3_r8N68_closure;
         const lvl5_r8N6a_closure;
         const lvl6_r8N6b_closure+1;
         const lvl12_r8N6h_closure+1;
         const lvl6_r8N6b_closure+1;
         const lvl13_r8N6i_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.940962301 UTC

[section ""data" . lvl15_r8N6k_closure" {
     lvl15_r8N6k_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8N66_closure;
         const lvl14_r8N6j_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.943360325 UTC

[section ""data" . lvl16_r8N6l_closure" {
     lvl16_r8N6l_closure:
         const lvl16_r8N6l_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_r8N6l_entry() //  [R1]
         { []
         }
     {offset
       c8Nua: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Nub; else goto c8Nuc;
       c8Nub: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Nuc: // global
           (_c8Nu7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8Nu7::I64 == 0) goto c8Nu9; else goto c8Nu8;
       c8Nu9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8Nu8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8Nu7::I64;
           R2 = lvl15_r8N6k_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl16_r8N6l_info" {
     lvl16_r8N6l_info:
         const lvl16_r8N6l_entry;
         const 0;
         const 21474836501;
         const S8NaZ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.950077491 UTC

[section ""data" . Foreign.Marshal.Alloc.alloca_closure" {
     Foreign.Marshal.Alloc.alloca_closure:
         const Foreign.Marshal.Alloc.alloca_info;
         const 0;
 },
 ds_s8N7h_entry() //  [R1]
         { []
         }
     {offset
       c8Nus: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8Nut; else goto c8Nuu;
       c8Nut: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Nuu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = lvl11_r8N6g_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s8N7h_info" {
     ds_s8N7h_info:
         const ds_s8N7h_entry;
         const 1;
         const 4294967312;
         const S8NaZ_srt+24;
 },
 ds1_s8N7i_entry() //  [R1]
         { []
         }
     {offset
       c8Nuz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8NuA; else goto c8NuB;
       c8NuA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NuB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = lvl16_r8N6l_closure;
           Sp = Sp - 32;
           call Foreign.Storable.alignment_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s8N7i_info" {
     ds1_s8N7i_info:
         const ds1_s8N7i_entry;
         const 1;
         const 4294967312;
         const S8NaZ_srt+32;
 },
 sat_s8N7B_entry() //  [R1, R2]
         { []
         }
     {offset
       c8NuK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8NuO; else goto c8NuP;
       c8NuO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8NuP: // global
           I64[Sp - 24] = block_c8NuH_info;
           _s8N7i::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 16] = _s8N7i::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8Nva; else goto c8NuI;
       u8Nva: // global
           call _c8NuH(R1) args: 0, res: 0, upd: 0;
       c8NuI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8N7B_info" {
     sat_s8N7B_info:
         const sat_s8N7B_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c8NuH() //  [R1]
         { []
         }
     {offset
       c8NuH: // global
           I64[Sp] = block_c8NuN_info;
           _s8N7m::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8N7m::I64;
           if (R1 & 7 != 0) goto u8Nv9; else goto c8NuR;
       u8Nv9: // global
           call _c8NuN(R1) args: 0, res: 0, upd: 0;
       c8NuR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NuH_info" {
     block_c8NuH_info:
         const _c8NuH;
         const 2;
         const 30;
 },
 _c8NuN() //  [R1]
         { []
         }
     {offset
       c8NuN: // global
           _s8N7m::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c8NuV_info;
           R2 = I64[R1 + 7];
           R1 = _s8N7m::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NuN_info" {
     block_c8NuN_info:
         const _c8NuN;
         const 66;
         const 30;
 },
 _c8NuV() //  [R1]
         { []
         }
     {offset
       c8NuV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8Nv0; else goto c8NuZ;
       c8Nv0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8NuZ: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           P64[Hp] = R1 + 16;
           I64[Sp] = block_c8Nv5_info;
           R2 = Hp - 7;
           _s8N7u::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8N7u::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NuV_info" {
     block_c8NuV_info:
         const _c8NuV;
         const 1;
         const 30;
 },
 _c8Nv5() //  [R1]
         { []
         }
     {offset
       c8Nv5: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Nv5_info" {
     block_c8Nv5_info:
         const _c8Nv5;
         const 1;
         const 30;
 },
 Foreign.Marshal.Alloc.alloca_entry() //  [R2]
         { []
         }
     {offset
       c8Nvb: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c8Nvf; else goto c8Nve;
       c8Nvf: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.alloca_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8Nve: // global
           I64[Hp - 64] = ds_s8N7h_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = ds1_s8N7i_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s8N7B_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.alloca_info" {
     Foreign.Marshal.Alloc.alloca_info:
         const Foreign.Marshal.Alloc.alloca_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S8NaZ_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.96440998 UTC

[section ""data" . Foreign.Marshal.Alloc.$trModule3_closure" {
     Foreign.Marshal.Alloc.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Alloc.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.966174392 UTC

[section ""data" . Foreign.Marshal.Alloc.$trModule1_closure" {
     Foreign.Marshal.Alloc.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Alloc.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.96787729 UTC

[section ""data" . Foreign.Marshal.Alloc.$trModule_closure" {
     Foreign.Marshal.Alloc.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.Marshal.Alloc.$trModule3_closure+1;
         const Foreign.Marshal.Alloc.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.969871835 UTC

[section ""cstring" . Foreign.Marshal.Alloc.malloc4_bytes" {
     Foreign.Marshal.Alloc.malloc4_bytes:
         I8[] [109,97,108,108,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.973212284 UTC

[section ""data" . Foreign.Marshal.Alloc.malloc3_closure" {
     Foreign.Marshal.Alloc.malloc3_closure:
         const Foreign.Marshal.Alloc.malloc3_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Alloc.malloc3_entry() //  [R1]
         { []
         }
     {offset
       c8NvZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Nw0; else goto c8Nw1;
       c8Nw0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Nw1: // global
           (_c8NvW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NvW::I64 == 0) goto c8NvY; else goto c8NvX;
       c8NvY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NvX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NvW::I64;
           R2 = Foreign.Marshal.Alloc.malloc4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.malloc3_info" {
     Foreign.Marshal.Alloc.malloc3_info:
         const Foreign.Marshal.Alloc.malloc3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.977118368 UTC

[section ""cstring" . Foreign.Marshal.Alloc.calloc4_bytes" {
     Foreign.Marshal.Alloc.calloc4_bytes:
         I8[] [111,117,116,32,111,102,32,109,101,109,111,114,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.979651998 UTC

[section ""data" . Foreign.Marshal.Alloc.calloc3_closure" {
     Foreign.Marshal.Alloc.calloc3_closure:
         const Foreign.Marshal.Alloc.calloc3_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Alloc.calloc3_entry() //  [R1]
         { []
         }
     {offset
       c8Nwg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Nwh; else goto c8Nwi;
       c8Nwh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Nwi: // global
           (_c8Nwd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8Nwd::I64 == 0) goto c8Nwf; else goto c8Nwe;
       c8Nwf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8Nwe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8Nwd::I64;
           R2 = Foreign.Marshal.Alloc.calloc4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.calloc3_info" {
     Foreign.Marshal.Alloc.calloc3_info:
         const Foreign.Marshal.Alloc.calloc3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.983549889 UTC

[section ""data" . Foreign.Marshal.Alloc.malloc2_closure" {
     Foreign.Marshal.Alloc.malloc2_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.ResourceExhausted_closure+1;
         const Foreign.Marshal.Alloc.malloc3_closure;
         const Foreign.Marshal.Alloc.calloc3_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.986095075 UTC

[section ""data" . Foreign.Marshal.Alloc.malloc1_closure" {
     Foreign.Marshal.Alloc.malloc1_closure:
         const Foreign.Marshal.Alloc.malloc1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Alloc.malloc1_entry() //  [R1]
         { []
         }
     {offset
       c8Nwx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Nwy; else goto c8Nwz;
       c8Nwy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Nwz: // global
           (_c8Nwu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8Nwu::I64 == 0) goto c8Nww; else goto c8Nwv;
       c8Nww: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8Nwv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8Nwu::I64;
           R2 = Foreign.Marshal.Alloc.malloc2_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.malloc1_info" {
     Foreign.Marshal.Alloc.malloc1_info:
         const Foreign.Marshal.Alloc.malloc1_entry;
         const 0;
         const 12884901909;
         const S8NaZ_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.990874159 UTC

[section ""data" . Foreign.Marshal.Alloc.mallocBytes1_closure" {
     Foreign.Marshal.Alloc.mallocBytes1_closure:
         const Foreign.Marshal.Alloc.mallocBytes1_info;
         const 0;
 },
 Foreign.Marshal.Alloc.mallocBytes1_entry() //  [R2]
         { []
         }
     {offset
       c8NwO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8NwP; else goto c8NwQ;
       c8NwP: // global
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.mallocBytes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8NwQ: // global
           I64[Sp - 8] = block_c8NwL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8Nx8; else goto c8NwM;
       u8Nx8: // global
           call _c8NwL(R1) args: 0, res: 0, upd: 0;
       c8NwM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.mallocBytes1_info" {
     Foreign.Marshal.Alloc.mallocBytes1_info:
         const Foreign.Marshal.Alloc.mallocBytes1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S8NaZ_srt+64;
 },
 _c8NwL() //  [R1]
         { []
         }
     {offset
       c8NwL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8NwV; else goto c8NwU;
       c8NwV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8NwU: // global
           (_s8N7K::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[R1 + 7]);
           if (_s8N7K::I64 == 0) goto c8Nx7; else goto c8Nx6;
       c8Nx7: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8Nx6: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8N7K::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NwL_info" {
     block_c8NwL_info:
         const _c8NwL;
         const 0;
         const 4294967326;
         const S8NaZ_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.996311998 UTC

[section ""data" . Foreign.Marshal.Alloc.mallocBytes_closure" {
     Foreign.Marshal.Alloc.mallocBytes_closure:
         const Foreign.Marshal.Alloc.mallocBytes_info;
         const 0;
 },
 Foreign.Marshal.Alloc.mallocBytes_entry() //  [R2]
         { []
         }
     {offset
       c8Nxn: // global
           R2 = R2;
           call Foreign.Marshal.Alloc.mallocBytes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.mallocBytes_info" {
     Foreign.Marshal.Alloc.mallocBytes_info:
         const Foreign.Marshal.Alloc.mallocBytes_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8NaZ_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.999284585 UTC

[section ""data" . lvl17_r8N6m_closure" {
     lvl17_r8N6m_closure:
         const GHC.Types.I#_con_info;
         const 84;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.000867079 UTC

[section ""data" . lvl18_r8N6n_closure" {
     lvl18_r8N6n_closure:
         const GHC.Types.I#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.002526255 UTC

[section ""data" . lvl19_r8N6o_closure" {
     lvl19_r8N6o_closure:
         const GHC.Types.I#_con_info;
         const 41;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.004933497 UTC

[section ""data" . lvl20_r8N6p_closure" {
     lvl20_r8N6p_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8N67_closure;
         const lvl3_r8N68_closure;
         const lvl5_r8N6a_closure;
         const lvl17_r8N6m_closure+1;
         const lvl18_r8N6n_closure+1;
         const lvl17_r8N6m_closure+1;
         const lvl19_r8N6o_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.007127719 UTC

[section ""data" . lvl21_r8N6q_closure" {
     lvl21_r8N6q_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8N66_closure;
         const lvl20_r8N6p_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.009673688 UTC

[section ""data" . lvl22_r8N6r_closure" {
     lvl22_r8N6r_closure:
         const lvl22_r8N6r_info;
         const 0;
         const 0;
         const 0;
 },
 lvl22_r8N6r_entry() //  [R1]
         { []
         }
     {offset
       c8NxF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NxG; else goto c8NxH;
       c8NxG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NxH: // global
           (_c8NxC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NxC::I64 == 0) goto c8NxE; else goto c8NxD;
       c8NxE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NxD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NxC::I64;
           R2 = lvl21_r8N6q_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl22_r8N6r_info" {
     lvl22_r8N6r_info:
         const lvl22_r8N6r_entry;
         const 0;
         const 4402341478421;
         const S8NaZ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.014686289 UTC

[section ""data" . malloc5_r8N6s_closure" {
     malloc5_r8N6s_closure:
         const malloc5_r8N6s_info;
         const 0;
 },
 malloc5_r8N6s_entry() //  [R2]
         { []
         }
     {offset
       c8NxV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8NxW; else goto c8NxX;
       c8NxW: // global
           R2 = R2;
           R1 = malloc5_r8N6s_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8NxX: // global
           I64[Sp - 8] = block_c8NxT_info;
           R2 = R2;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = lvl22_r8N6r_closure;
           Sp = Sp - 24;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . malloc5_r8N6s_info" {
     malloc5_r8N6s_info:
         const malloc5_r8N6s_entry;
         const 0;
         const 107374182414;
         const 8589934597;
         const S8NaZ_srt+64;
 },
 _c8NxT() //  [R1]
         { []
         }
     {offset
       c8NxT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8Ny2; else goto c8Ny1;
       c8Ny2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Ny1: // global
           (_s8N7V::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[R1 + 7]);
           if (_s8N7V::I64 == 0) goto c8Nye; else goto c8Nyd;
       c8Nye: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8Nyd: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8N7V::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NxT_info" {
     block_c8NxT_info:
         const _c8NxT;
         const 0;
         const 4294967326;
         const S8NaZ_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.020517761 UTC

[section ""data" . Foreign.Marshal.Alloc.malloc_closure" {
     Foreign.Marshal.Alloc.malloc_closure:
         const Foreign.Marshal.Alloc.malloc_info;
         const 0;
 },
 Foreign.Marshal.Alloc.malloc_entry() //  [R2]
         { []
         }
     {offset
       c8Nys: // global
           R2 = R2;
           call malloc5_r8N6s_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.malloc_info" {
     Foreign.Marshal.Alloc.malloc_info:
         const Foreign.Marshal.Alloc.malloc_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8NaZ_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.023752103 UTC

[section ""cstring" . Foreign.Marshal.Alloc.calloc6_bytes" {
     Foreign.Marshal.Alloc.calloc6_bytes:
         I8[] [99,97,108,108,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.026323816 UTC

[section ""data" . Foreign.Marshal.Alloc.calloc5_closure" {
     Foreign.Marshal.Alloc.calloc5_closure:
         const Foreign.Marshal.Alloc.calloc5_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Alloc.calloc5_entry() //  [R1]
         { []
         }
     {offset
       c8NyG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NyH; else goto c8NyI;
       c8NyH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NyI: // global
           (_c8NyD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NyD::I64 == 0) goto c8NyF; else goto c8NyE;
       c8NyF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NyE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NyD::I64;
           R2 = Foreign.Marshal.Alloc.calloc6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.calloc5_info" {
     Foreign.Marshal.Alloc.calloc5_info:
         const Foreign.Marshal.Alloc.calloc5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.030191282 UTC

[section ""data" . Foreign.Marshal.Alloc.calloc2_closure" {
     Foreign.Marshal.Alloc.calloc2_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.ResourceExhausted_closure+1;
         const Foreign.Marshal.Alloc.calloc5_closure;
         const Foreign.Marshal.Alloc.calloc3_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.032713743 UTC

[section ""data" . Foreign.Marshal.Alloc.calloc1_closure" {
     Foreign.Marshal.Alloc.calloc1_closure:
         const Foreign.Marshal.Alloc.calloc1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Alloc.calloc1_entry() //  [R1]
         { []
         }
     {offset
       c8NyX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NyY; else goto c8NyZ;
       c8NyY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NyZ: // global
           (_c8NyU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NyU::I64 == 0) goto c8NyW; else goto c8NyV;
       c8NyW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NyV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NyU::I64;
           R2 = Foreign.Marshal.Alloc.calloc2_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.calloc1_info" {
     Foreign.Marshal.Alloc.calloc1_info:
         const Foreign.Marshal.Alloc.calloc1_entry;
         const 0;
         const 554050781205;
         const S8NaZ_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.037125297 UTC

[section ""data" . Foreign.Marshal.Alloc.callocBytes1_closure" {
     Foreign.Marshal.Alloc.callocBytes1_closure:
         const Foreign.Marshal.Alloc.callocBytes1_info;
         const 0;
 },
 Foreign.Marshal.Alloc.callocBytes1_entry() //  [R2]
         { []
         }
     {offset
       c8Nze: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8Nzf; else goto c8Nzg;
       c8Nzf: // global
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.callocBytes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8Nzg: // global
           I64[Sp - 8] = block_c8Nzb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8Nzz; else goto c8Nzc;
       u8Nzz: // global
           call _c8Nzb(R1) args: 0, res: 0, upd: 0;
       c8Nzc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.callocBytes1_info" {
     Foreign.Marshal.Alloc.callocBytes1_info:
         const Foreign.Marshal.Alloc.callocBytes1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S8NaZ_srt+112;
 },
 _c8Nzb() //  [R1]
         { []
         }
     {offset
       c8Nzb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8Nzl; else goto c8Nzk;
       c8Nzl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Nzk: // global
           (_s8N86::I64) = call "ccall" arg hints:  [,]  result hints:  [PtrHint] calloc(1, I64[R1 + 7]);
           if (_s8N86::I64 == 0) goto c8Nzy; else goto c8Nzx;
       c8Nzy: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.calloc1_closure;
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8Nzx: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8N86::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Nzb_info" {
     block_c8Nzb_info:
         const _c8Nzb;
         const 0;
         const 4294967326;
         const S8NaZ_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.043518701 UTC

[section ""data" . Foreign.Marshal.Alloc.callocBytes_closure" {
     Foreign.Marshal.Alloc.callocBytes_closure:
         const Foreign.Marshal.Alloc.callocBytes_info;
         const 0;
 },
 Foreign.Marshal.Alloc.callocBytes_entry() //  [R2]
         { []
         }
     {offset
       c8NzO: // global
           R2 = R2;
           call Foreign.Marshal.Alloc.callocBytes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.callocBytes_info" {
     Foreign.Marshal.Alloc.callocBytes_info:
         const Foreign.Marshal.Alloc.callocBytes_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8NaZ_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.047410858 UTC

[section ""data" . lvl23_r8N6t_closure" {
     lvl23_r8N6t_closure:
         const GHC.Types.I#_con_info;
         const 90;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.049268907 UTC

[section ""data" . lvl24_r8N6u_closure" {
     lvl24_r8N6u_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8N67_closure;
         const lvl3_r8N68_closure;
         const lvl5_r8N6a_closure;
         const lvl23_r8N6t_closure+1;
         const lvl7_r8N6c_closure+1;
         const lvl23_r8N6t_closure+1;
         const lvl8_r8N6d_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.051181688 UTC

[section ""data" . lvl25_r8N6v_closure" {
     lvl25_r8N6v_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8N66_closure;
         const lvl24_r8N6u_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.053732585 UTC

[section ""data" . lvl26_r8N6w_closure" {
     lvl26_r8N6w_closure:
         const lvl26_r8N6w_info;
         const 0;
         const 0;
         const 0;
 },
 lvl26_r8N6w_entry() //  [R1]
         { []
         }
     {offset
       c8NA4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NA5; else goto c8NA6;
       c8NA5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NA6: // global
           (_c8NA1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NA1::I64 == 0) goto c8NA3; else goto c8NA2;
       c8NA3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NA2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NA1::I64;
           R2 = lvl25_r8N6v_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl26_r8N6w_info" {
     lvl26_r8N6w_info:
         const lvl26_r8N6w_entry;
         const 0;
         const 281479271677973;
         const S8NaZ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.058654055 UTC

[section ""data" . calloc7_r8N6x_closure" {
     calloc7_r8N6x_closure:
         const calloc7_r8N6x_info;
         const 0;
 },
 calloc7_r8N6x_entry() //  [R2]
         { []
         }
     {offset
       c8NAk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8NAl; else goto c8NAm;
       c8NAl: // global
           R2 = R2;
           R1 = calloc7_r8N6x_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8NAm: // global
           I64[Sp - 8] = block_c8NAi_info;
           R2 = R2;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = lvl26_r8N6w_closure;
           Sp = Sp - 24;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . calloc7_r8N6x_info" {
     calloc7_r8N6x_info:
         const calloc7_r8N6x_entry;
         const 0;
         const 107374182414;
         const 8589934597;
         const S8NaZ_srt+112;
 },
 _c8NAi() //  [R1]
         { []
         }
     {offset
       c8NAi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8NAr; else goto c8NAq;
       c8NAr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8NAq: // global
           (_s8N8h::I64) = call "ccall" arg hints:  [,]  result hints:  [PtrHint] calloc(1, I64[R1 + 7]);
           if (_s8N8h::I64 == 0) goto c8NAE; else goto c8NAD;
       c8NAE: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.calloc1_closure;
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8NAD: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8N8h::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NAi_info" {
     block_c8NAi_info:
         const _c8NAi;
         const 0;
         const 4294967326;
         const S8NaZ_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.064641316 UTC

[section ""data" . Foreign.Marshal.Alloc.calloc_closure" {
     Foreign.Marshal.Alloc.calloc_closure:
         const Foreign.Marshal.Alloc.calloc_info;
         const 0;
 },
 Foreign.Marshal.Alloc.calloc_entry() //  [R2]
         { []
         }
     {offset
       c8NAS: // global
           R2 = R2;
           call calloc7_r8N6x_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.calloc_info" {
     Foreign.Marshal.Alloc.calloc_info:
         const Foreign.Marshal.Alloc.calloc_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8NaZ_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.067956923 UTC

[section ""cstring" . Foreign.Marshal.Alloc.realloc5_bytes" {
     Foreign.Marshal.Alloc.realloc5_bytes:
         I8[] [114,101,97,108,108,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.070318526 UTC

[section ""data" . Foreign.Marshal.Alloc.realloc4_closure" {
     Foreign.Marshal.Alloc.realloc4_closure:
         const Foreign.Marshal.Alloc.realloc4_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Alloc.realloc4_entry() //  [R1]
         { []
         }
     {offset
       c8NB6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NB7; else goto c8NB8;
       c8NB7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NB8: // global
           (_c8NB3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NB3::I64 == 0) goto c8NB5; else goto c8NB4;
       c8NB5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NB4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NB3::I64;
           R2 = Foreign.Marshal.Alloc.realloc5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.realloc4_info" {
     Foreign.Marshal.Alloc.realloc4_info:
         const Foreign.Marshal.Alloc.realloc4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.074318646 UTC

[section ""data" . Foreign.Marshal.Alloc.realloc3_closure" {
     Foreign.Marshal.Alloc.realloc3_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.ResourceExhausted_closure+1;
         const Foreign.Marshal.Alloc.realloc4_closure;
         const Foreign.Marshal.Alloc.calloc3_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.076748968 UTC

[section ""data" . Foreign.Marshal.Alloc.realloc2_closure" {
     Foreign.Marshal.Alloc.realloc2_closure:
         const Foreign.Marshal.Alloc.realloc2_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Alloc.realloc2_entry() //  [R1]
         { []
         }
     {offset
       c8NBn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NBo; else goto c8NBp;
       c8NBo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NBp: // global
           (_c8NBk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NBk::I64 == 0) goto c8NBm; else goto c8NBl;
       c8NBm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NBl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NBk::I64;
           R2 = Foreign.Marshal.Alloc.realloc3_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.realloc2_info" {
     Foreign.Marshal.Alloc.realloc2_info:
         const Foreign.Marshal.Alloc.realloc2_entry;
         const 0;
         const 35188667056149;
         const S8NaZ_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.080585039 UTC

[section ""data" . lvl27_r8N6y_closure" {
     lvl27_r8N6y_closure:
         const GHC.Types.I#_con_info;
         const 162;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.082401306 UTC

[section ""data" . lvl28_r8N6z_closure" {
     lvl28_r8N6z_closure:
         const GHC.Types.I#_con_info;
         const 34;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.08420102 UTC

[section ""data" . lvl29_r8N6A_closure" {
     lvl29_r8N6A_closure:
         const GHC.Types.I#_con_info;
         const 43;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.086171238 UTC

[section ""data" . lvl30_r8N6B_closure" {
     lvl30_r8N6B_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8N67_closure;
         const lvl3_r8N68_closure;
         const lvl5_r8N6a_closure;
         const lvl27_r8N6y_closure+1;
         const lvl28_r8N6z_closure+1;
         const lvl27_r8N6y_closure+1;
         const lvl29_r8N6A_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.08802974 UTC

[section ""data" . lvl31_r8N6C_closure" {
     lvl31_r8N6C_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8N66_closure;
         const lvl30_r8N6B_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.090669087 UTC

[section ""data" . Foreign.Marshal.Alloc.realloc6_closure" {
     Foreign.Marshal.Alloc.realloc6_closure:
         const Foreign.Marshal.Alloc.realloc6_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Alloc.realloc6_entry() //  [R1]
         { []
         }
     {offset
       c8NBI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NBJ; else goto c8NBK;
       c8NBJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NBK: // global
           (_c8NBF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NBF::I64 == 0) goto c8NBH; else goto c8NBG;
       c8NBH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NBG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NBF::I64;
           R2 = lvl31_r8N6C_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.realloc6_info" {
     Foreign.Marshal.Alloc.realloc6_info:
         const Foreign.Marshal.Alloc.realloc6_entry;
         const 0;
         const 4503603922337813;
         const S8NaZ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.095746906 UTC

[section ""data" . Foreign.Marshal.Alloc.$wrealloc_closure" {
     Foreign.Marshal.Alloc.$wrealloc_closure:
         const Foreign.Marshal.Alloc.$wrealloc_info;
         const 0;
 },
 Foreign.Marshal.Alloc.$wrealloc_entry() //  [R2, R3]
         { []
         }
     {offset
       c8NBY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8NBZ; else goto c8NC0;
       c8NBZ: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.$wrealloc_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8NC0: // global
           I64[Sp - 16] = block_c8NBW_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Alloc.realloc6_closure;
           I64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.$wrealloc_info" {
     Foreign.Marshal.Alloc.$wrealloc_info:
         const Foreign.Marshal.Alloc.$wrealloc_entry;
         const 0;
         const 30064771086;
         const 12884901902;
         const S8NaZ_srt+168;
 },
 _c8NBW() //  [R1]
         { []
         }
     {offset
       c8NBW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8NC5; else goto c8NC4;
       c8NC5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8NC4: // global
           (_s8N8t::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] realloc(I64[Sp + 8], I64[R1 + 7]);
           if (_s8N8t::I64 == 0) goto c8NCi; else goto c8NCh;
       c8NCi: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.realloc2_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8NCh: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8N8t::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NBW_info" {
     block_c8NBW_info:
         const _c8NBW;
         const 65;
         const 4294967326;
         const S8NaZ_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.101652764 UTC

[section ""data" . Foreign.Marshal.Alloc.realloc1_closure" {
     Foreign.Marshal.Alloc.realloc1_closure:
         const Foreign.Marshal.Alloc.realloc1_info;
         const 0;
 },
 Foreign.Marshal.Alloc.realloc1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8NCz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NCA; else goto c8NCB;
       c8NCA: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.realloc1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8NCB: // global
           I64[Sp - 16] = block_c8NCw_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8NCF; else goto c8NCx;
       u8NCF: // global
           call _c8NCw(R1) args: 0, res: 0, upd: 0;
       c8NCx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.realloc1_info" {
     Foreign.Marshal.Alloc.realloc1_info:
         const Foreign.Marshal.Alloc.realloc1_entry;
         const 0;
         const 38654705678;
         const 12884901903;
         const S8NaZ_srt+168;
 },
 _c8NCw() //  [R1]
         { []
         }
     {offset
       c8NCw: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Foreign.Marshal.Alloc.$wrealloc_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NCw_info" {
     block_c8NCw_info:
         const _c8NCw;
         const 1;
         const 4294967326;
         const S8NaZ_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.107071452 UTC

[section ""data" . Foreign.Marshal.Alloc.realloc_closure" {
     Foreign.Marshal.Alloc.realloc_closure:
         const Foreign.Marshal.Alloc.realloc_info;
         const 0;
 },
 Foreign.Marshal.Alloc.realloc_entry() //  [R2, R3]
         { []
         }
     {offset
       c8NCT: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Alloc.realloc1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.realloc_info" {
     Foreign.Marshal.Alloc.realloc_info:
         const Foreign.Marshal.Alloc.realloc_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8NaZ_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.110778734 UTC

[section ""data" . free1_r8N6D_closure" {
     free1_r8N6D_closure:
         const free1_r8N6D_info;
 },
 free1_r8N6D_entry() //  [R2]
         { []
         }
     {offset
       c8ND7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8ND8; else goto c8ND9;
       c8ND8: // global
           R2 = R2;
           R1 = free1_r8N6D_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ND9: // global
           I64[Sp - 8] = block_c8ND4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8NDf; else goto c8ND5;
       u8NDf: // global
           call _c8ND4(R1) args: 0, res: 0, upd: 0;
       c8ND5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . free1_r8N6D_info" {
     free1_r8N6D_info:
         const free1_r8N6D_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c8ND4() //  [R1]
         { []
         }
     {offset
       c8ND4: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ND4_info" {
     block_c8ND4_info:
         const _c8ND4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.115796505 UTC

[section ""data" . Foreign.Marshal.Alloc.free_closure" {
     Foreign.Marshal.Alloc.free_closure:
         const Foreign.Marshal.Alloc.free_info;
 },
 Foreign.Marshal.Alloc.free_entry() //  [R2]
         { []
         }
     {offset
       c8NDu: // global
           R2 = R2;
           call free1_r8N6D_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.free_info" {
     Foreign.Marshal.Alloc.free_info:
         const Foreign.Marshal.Alloc.free_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.119608041 UTC

[section ""data" . Foreign.Marshal.Alloc.$wreallocBytes_closure" {
     Foreign.Marshal.Alloc.$wreallocBytes_closure:
         const Foreign.Marshal.Alloc.$wreallocBytes_info;
         const 0;
 },
 Foreign.Marshal.Alloc.$wreallocBytes_entry() //  [R2, R3]
         { []
         }
     {offset
       c8NDJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8NDN; else goto c8NDM;
       c8NDN: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.$wreallocBytes_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8NDM: // global
           if (R3 == 0) goto c8NDI; else goto c8NDH;
       c8NDI: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(R2);
           Hp = Hp - 16;
           R1 = GHC.Ptr.nullPtr_closure;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8NDH: // global
           _c8NDU::I64 = R3;
           (_s8N8Q::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] realloc(R2, _c8NDU::I64);
           if (_s8N8Q::I64 == 0) goto c8NE1; else goto c8NE0;
       c8NE1: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.realloc2_closure;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8NE0: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8N8Q::I64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.$wreallocBytes_info" {
     Foreign.Marshal.Alloc.$wreallocBytes_info:
         const Foreign.Marshal.Alloc.$wreallocBytes_entry;
         const 0;
         const 38654705678;
         const 12884901900;
         const S8NaZ_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.124710277 UTC

[section ""data" . Foreign.Marshal.Alloc.reallocBytes1_closure" {
     Foreign.Marshal.Alloc.reallocBytes1_closure:
         const Foreign.Marshal.Alloc.reallocBytes1_info;
         const 0;
 },
 Foreign.Marshal.Alloc.reallocBytes1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8NEj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NEn; else goto c8NEo;
       c8NEn: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.reallocBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8NEo: // global
           I64[Sp - 16] = block_c8NEg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8NEw; else goto c8NEh;
       u8NEw: // global
           call _c8NEg(R1) args: 0, res: 0, upd: 0;
       c8NEh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.reallocBytes1_info" {
     Foreign.Marshal.Alloc.reallocBytes1_info:
         const Foreign.Marshal.Alloc.reallocBytes1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S8NaZ_srt+200;
 },
 _c8NEg() //  [R1]
         { []
         }
     {offset
       c8NEg: // global
           I64[Sp] = block_c8NEm_info;
           _s8N90::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8N90::I64;
           if (R1 & 7 != 0) goto u8NEv; else goto c8NEq;
       u8NEv: // global
           call _c8NEm(R1) args: 0, res: 0, upd: 0;
       c8NEq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NEg_info" {
     block_c8NEg_info:
         const _c8NEg;
         const 1;
         const 4294967326;
         const S8NaZ_srt+200;
 },
 _c8NEm() //  [R1]
         { []
         }
     {offset
       c8NEm: // global
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call Foreign.Marshal.Alloc.$wreallocBytes_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NEm_info" {
     block_c8NEm_info:
         const _c8NEm;
         const 65;
         const 4294967326;
         const S8NaZ_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.131215267 UTC

[section ""data" . Foreign.Marshal.Alloc.reallocBytes_closure" {
     Foreign.Marshal.Alloc.reallocBytes_closure:
         const Foreign.Marshal.Alloc.reallocBytes_info;
         const 0;
 },
 Foreign.Marshal.Alloc.reallocBytes_entry() //  [R2, R3]
         { []
         }
     {offset
       c8NEO: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Alloc.reallocBytes1_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.reallocBytes_info" {
     Foreign.Marshal.Alloc.reallocBytes_info:
         const Foreign.Marshal.Alloc.reallocBytes_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8NaZ_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.134859669 UTC

[section ""data" . Foreign.Marshal.Alloc.finalizerFree_closure" {
     Foreign.Marshal.Alloc.finalizerFree_closure:
         const GHC.Ptr.FunPtr_con_info;
         const free;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.136744643 UTC

[section ""relreadonly" . S8NaZ_srt" {
     S8NaZ_srt:
         const GHC.Err.undefined_closure;
         const lvl10_r8N6f_closure;
         const lvl15_r8N6k_closure;
         const lvl11_r8N6g_closure;
         const lvl16_r8N6l_closure;
         const Foreign.Marshal.Alloc.alloca_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const Foreign.Marshal.Alloc.malloc2_closure;
         const Foreign.Marshal.Alloc.malloc1_closure;
         const Foreign.Marshal.Alloc.mallocBytes1_closure;
         const lvl21_r8N6q_closure;
         const lvl22_r8N6r_closure;
         const malloc5_r8N6s_closure;
         const Foreign.Marshal.Alloc.calloc2_closure;
         const Foreign.Marshal.Alloc.calloc1_closure;
         const Foreign.Marshal.Alloc.callocBytes1_closure;
         const lvl25_r8N6v_closure;
         const lvl26_r8N6w_closure;
         const calloc7_r8N6x_closure;
         const Foreign.Marshal.Alloc.realloc3_closure;
         const lvl31_r8N6C_closure;
         const Foreign.Marshal.Alloc.$wrealloc_closure;
         const Foreign.Marshal.Alloc.realloc2_closure;
         const Foreign.Marshal.Alloc.realloc6_closure;
         const Foreign.Marshal.Alloc.realloc1_closure;
         const Foreign.Marshal.Alloc.$wreallocBytes_closure;
         const Foreign.Marshal.Alloc.reallocBytes1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.57611517 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:57.579125718 UTC

[section ""data" . Foreign.Marshal.Alloc.allocaBytes1_closure" {
     Foreign.Marshal.Alloc.allocaBytes1_closure:
         const Foreign.Marshal.Alloc.allocaBytes1_info;
 },
 Foreign.Marshal.Alloc.allocaBytes1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8NHs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NHt; else goto c8NHu;
       c8NHt: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.allocaBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8NHu: // global
           I64[Sp - 16] = block_c8NHp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8NHL; else goto c8NHq;
       u8NHL: // global
           call _c8NHp(R1) args: 0, res: 0, upd: 0;
       c8NHq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.allocaBytes1_info" {
     Foreign.Marshal.Alloc.allocaBytes1_info:
         const Foreign.Marshal.Alloc.allocaBytes1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c8NHp() //  [R1]
         { []
         }
     {offset
       c8NHp: // global
           I64[Sp] = block_c8NHx_info;
           R1 = I64[R1 + 7];
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NHp_info" {
     block_c8NHp_info:
         const _c8NHp;
         const 1;
         const 30;
 },
 _c8NHx() //  [R1]
         { []
         }
     {offset
       c8NHx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8NHC; else goto c8NHB;
       c8NHC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8NHB: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           P64[Hp] = R1 + 16;
           I64[Sp] = block_c8NHH_info;
           R2 = Hp - 7;
           _s8NF7::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8NF7::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NHx_info" {
     block_c8NHx_info:
         const _c8NHx;
         const 1;
         const 30;
 },
 _c8NHH() //  [R1]
         { []
         }
     {offset
       c8NHH: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NHH_info" {
     block_c8NHH_info:
         const _c8NHH;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.588293722 UTC

[section ""data" . Foreign.Marshal.Alloc.allocaBytes_closure" {
     Foreign.Marshal.Alloc.allocaBytes_closure:
         const Foreign.Marshal.Alloc.allocaBytes_info;
 },
 Foreign.Marshal.Alloc.allocaBytes_entry() //  [R2, R3]
         { []
         }
     {offset
       c8NIb: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Alloc.allocaBytes1_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.allocaBytes_info" {
     Foreign.Marshal.Alloc.allocaBytes_info:
         const Foreign.Marshal.Alloc.allocaBytes_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.593618814 UTC

[section ""data" . Foreign.Marshal.Alloc.allocaBytesAligned1_closure" {
     Foreign.Marshal.Alloc.allocaBytesAligned1_closure:
         const Foreign.Marshal.Alloc.allocaBytesAligned1_info;
 },
 Foreign.Marshal.Alloc.allocaBytesAligned1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8NIp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8NIt; else goto c8NIu;
       c8NIt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.allocaBytesAligned1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8NIu: // global
           I64[Sp - 24] = block_c8NIm_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8NIP; else goto c8NIn;
       u8NIP: // global
           call _c8NIm(R1) args: 0, res: 0, upd: 0;
       c8NIn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.allocaBytesAligned1_info" {
     Foreign.Marshal.Alloc.allocaBytesAligned1_info:
         const Foreign.Marshal.Alloc.allocaBytesAligned1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c8NIm() //  [R1]
         { []
         }
     {offset
       c8NIm: // global
           I64[Sp] = block_c8NIs_info;
           _s8NFj::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8NFj::I64;
           if (R1 & 7 != 0) goto u8NIO; else goto c8NIw;
       u8NIO: // global
           call _c8NIs(R1) args: 0, res: 0, upd: 0;
       c8NIw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NIm_info" {
     block_c8NIm_info:
         const _c8NIm;
         const 2;
         const 30;
 },
 _c8NIs() //  [R1]
         { []
         }
     {offset
       c8NIs: // global
           _s8NFj::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c8NIA_info;
           R2 = I64[R1 + 7];
           R1 = _s8NFj::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NIs_info" {
     block_c8NIs_info:
         const _c8NIs;
         const 66;
         const 30;
 },
 _c8NIA() //  [R1]
         { []
         }
     {offset
       c8NIA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8NIF; else goto c8NIE;
       c8NIF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8NIE: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           P64[Hp] = R1 + 16;
           I64[Sp] = block_c8NIK_info;
           R2 = Hp - 7;
           _s8NFr::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8NFr::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NIA_info" {
     block_c8NIA_info:
         const _c8NIA;
         const 1;
         const 30;
 },
 _c8NIK() //  [R1]
         { []
         }
     {offset
       c8NIK: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NIK_info" {
     block_c8NIK_info:
         const _c8NIK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.606346897 UTC

[section ""data" . Foreign.Marshal.Alloc.allocaBytesAligned_closure" {
     Foreign.Marshal.Alloc.allocaBytesAligned_closure:
         const Foreign.Marshal.Alloc.allocaBytesAligned_info;
 },
 Foreign.Marshal.Alloc.allocaBytesAligned_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8NJk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Alloc.allocaBytesAligned1_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.allocaBytesAligned_info" {
     Foreign.Marshal.Alloc.allocaBytesAligned_info:
         const Foreign.Marshal.Alloc.allocaBytesAligned_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.609694935 UTC

[section ""cstring" . lvl_r8N65_bytes" {
     lvl_r8N65_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.612209194 UTC

[section ""data" . lvl1_r8N66_closure" {
     lvl1_r8N66_closure:
         const lvl1_r8N66_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r8N66_entry() //  [R1]
         { []
         }
     {offset
       c8NJy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NJz; else goto c8NJA;
       c8NJz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NJA: // global
           (_c8NJv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NJv::I64 == 0) goto c8NJx; else goto c8NJw;
       c8NJx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NJw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NJv::I64;
           R2 = lvl_r8N65_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r8N66_info" {
     lvl1_r8N66_info:
         const lvl1_r8N66_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.616172526 UTC

[section ""cstring" . Foreign.Marshal.Alloc.$trModule4_bytes" {
     Foreign.Marshal.Alloc.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.618847297 UTC

[section ""data" . lvl2_r8N67_closure" {
     lvl2_r8N67_closure:
         const lvl2_r8N67_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r8N67_entry() //  [R1]
         { []
         }
     {offset
       c8NJQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NJR; else goto c8NJS;
       c8NJR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NJS: // global
           (_c8NJN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NJN::I64 == 0) goto c8NJP; else goto c8NJO;
       c8NJP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NJO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NJN::I64;
           R2 = Foreign.Marshal.Alloc.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_r8N67_info" {
     lvl2_r8N67_info:
         const lvl2_r8N67_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.622897765 UTC

[section ""cstring" . Foreign.Marshal.Alloc.$trModule2_bytes" {
     Foreign.Marshal.Alloc.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,77,97,114,115,104,97,108,46,65,108,108,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.625453184 UTC

[section ""data" . lvl3_r8N68_closure" {
     lvl3_r8N68_closure:
         const lvl3_r8N68_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r8N68_entry() //  [R1]
         { []
         }
     {offset
       c8NK8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NK9; else goto c8NKa;
       c8NK9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NKa: // global
           (_c8NK5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NK5::I64 == 0) goto c8NK7; else goto c8NK6;
       c8NK7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NK6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NK5::I64;
           R2 = Foreign.Marshal.Alloc.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r8N68_info" {
     lvl3_r8N68_info:
         const lvl3_r8N68_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.630218741 UTC

[section ""cstring" . lvl4_r8N69_bytes" {
     lvl4_r8N69_bytes:
         I8[] [46,47,70,111,114,101,105,103,110,47,77,97,114,115,104,97,108,47,65,108,108,111,99,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.632912945 UTC

[section ""data" . lvl5_r8N6a_closure" {
     lvl5_r8N6a_closure:
         const lvl5_r8N6a_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r8N6a_entry() //  [R1]
         { []
         }
     {offset
       c8NKq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NKr; else goto c8NKs;
       c8NKr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NKs: // global
           (_c8NKn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NKn::I64 == 0) goto c8NKp; else goto c8NKo;
       c8NKp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NKo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NKn::I64;
           R2 = lvl4_r8N69_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r8N6a_info" {
     lvl5_r8N6a_info:
         const lvl5_r8N6a_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.637153208 UTC

[section ""data" . lvl6_r8N6b_closure" {
     lvl6_r8N6b_closure:
         const GHC.Types.I#_con_info;
         const 117;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.639753843 UTC

[section ""data" . lvl7_r8N6c_closure" {
     lvl7_r8N6c_closure:
         const GHC.Types.I#_con_info;
         const 31;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.641812374 UTC

[section ""data" . lvl8_r8N6d_closure" {
     lvl8_r8N6d_closure:
         const GHC.Types.I#_con_info;
         const 40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.64360415 UTC

[section ""data" . lvl9_r8N6e_closure" {
     lvl9_r8N6e_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8N67_closure;
         const lvl3_r8N68_closure;
         const lvl5_r8N6a_closure;
         const lvl6_r8N6b_closure+1;
         const lvl7_r8N6c_closure+1;
         const lvl6_r8N6b_closure+1;
         const lvl8_r8N6d_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.645418085 UTC

[section ""data" . lvl10_r8N6f_closure" {
     lvl10_r8N6f_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8N66_closure;
         const lvl9_r8N6e_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.647835544 UTC

[section ""data" . lvl11_r8N6g_closure" {
     lvl11_r8N6g_closure:
         const lvl11_r8N6g_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_r8N6g_entry() //  [R1]
         { []
         }
     {offset
       c8NKM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NKN; else goto c8NKO;
       c8NKN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NKO: // global
           (_c8NKJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NKJ::I64 == 0) goto c8NKL; else goto c8NKK;
       c8NKL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NKK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NKJ::I64;
           R2 = lvl10_r8N6f_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_r8N6g_info" {
     lvl11_r8N6g_info:
         const lvl11_r8N6g_entry;
         const 0;
         const 12884901909;
         const S8NKP_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.651591429 UTC

[section ""data" . lvl12_r8N6h_closure" {
     lvl12_r8N6h_closure:
         const GHC.Types.I#_con_info;
         const 60;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.65336308 UTC

[section ""data" . lvl13_r8N6i_closure" {
     lvl13_r8N6i_closure:
         const GHC.Types.I#_con_info;
         const 69;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.655140103 UTC

[section ""data" . lvl14_r8N6j_closure" {
     lvl14_r8N6j_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8N67_closure;
         const lvl3_r8N68_closure;
         const lvl5_r8N6a_closure;
         const lvl6_r8N6b_closure+1;
         const lvl12_r8N6h_closure+1;
         const lvl6_r8N6b_closure+1;
         const lvl13_r8N6i_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.656973171 UTC

[section ""data" . lvl15_r8N6k_closure" {
     lvl15_r8N6k_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8N66_closure;
         const lvl14_r8N6j_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.65942604 UTC

[section ""data" . lvl16_r8N6l_closure" {
     lvl16_r8N6l_closure:
         const lvl16_r8N6l_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_r8N6l_entry() //  [R1]
         { []
         }
     {offset
       c8NL8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NL9; else goto c8NLa;
       c8NL9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NLa: // global
           (_c8NL5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NL5::I64 == 0) goto c8NL7; else goto c8NL6;
       c8NL7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NL6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NL5::I64;
           R2 = lvl15_r8N6k_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl16_r8N6l_info" {
     lvl16_r8N6l_info:
         const lvl16_r8N6l_entry;
         const 0;
         const 21474836501;
         const S8NKP_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.666355505 UTC

[section ""data" . Foreign.Marshal.Alloc.alloca_closure" {
     Foreign.Marshal.Alloc.alloca_closure:
         const Foreign.Marshal.Alloc.alloca_info;
         const 0;
 },
 ds_s8NFz_entry() //  [R1]
         { []
         }
     {offset
       c8NLr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8NLs; else goto c8NLt;
       c8NLs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NLt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = lvl11_r8N6g_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s8NFz_info" {
     ds_s8NFz_info:
         const ds_s8NFz_entry;
         const 1;
         const 4294967312;
         const S8NKP_srt+24;
 },
 ds1_s8NFA_entry() //  [R1]
         { []
         }
     {offset
       c8NLy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8NLz; else goto c8NLA;
       c8NLz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NLA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = lvl16_r8N6l_closure;
           Sp = Sp - 32;
           call Foreign.Storable.alignment_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s8NFA_info" {
     ds1_s8NFA_info:
         const ds1_s8NFA_entry;
         const 1;
         const 4294967312;
         const S8NKP_srt+32;
 },
 sat_s8NFT_entry() //  [R1, R2]
         { []
         }
     {offset
       c8NLJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8NLN; else goto c8NLO;
       c8NLN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8NLO: // global
           I64[Sp - 24] = block_c8NLG_info;
           _s8NFA::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 16] = _s8NFA::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8NM9; else goto c8NLH;
       u8NM9: // global
           call _c8NLG(R1) args: 0, res: 0, upd: 0;
       c8NLH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8NFT_info" {
     sat_s8NFT_info:
         const sat_s8NFT_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c8NLG() //  [R1]
         { []
         }
     {offset
       c8NLG: // global
           I64[Sp] = block_c8NLM_info;
           _s8NFE::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8NFE::I64;
           if (R1 & 7 != 0) goto u8NM8; else goto c8NLQ;
       u8NM8: // global
           call _c8NLM(R1) args: 0, res: 0, upd: 0;
       c8NLQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NLG_info" {
     block_c8NLG_info:
         const _c8NLG;
         const 2;
         const 30;
 },
 _c8NLM() //  [R1]
         { []
         }
     {offset
       c8NLM: // global
           _s8NFE::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c8NLU_info;
           R2 = I64[R1 + 7];
           R1 = _s8NFE::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NLM_info" {
     block_c8NLM_info:
         const _c8NLM;
         const 66;
         const 30;
 },
 _c8NLU() //  [R1]
         { []
         }
     {offset
       c8NLU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8NLZ; else goto c8NLY;
       c8NLZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8NLY: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           P64[Hp] = R1 + 16;
           I64[Sp] = block_c8NM4_info;
           R2 = Hp - 7;
           _s8NFM::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8NFM::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NLU_info" {
     block_c8NLU_info:
         const _c8NLU;
         const 1;
         const 30;
 },
 _c8NM4() //  [R1]
         { []
         }
     {offset
       c8NM4: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NM4_info" {
     block_c8NM4_info:
         const _c8NM4;
         const 1;
         const 30;
 },
 Foreign.Marshal.Alloc.alloca_entry() //  [R2]
         { []
         }
     {offset
       c8NMa: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c8NMe; else goto c8NMd;
       c8NMe: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.alloca_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8NMd: // global
           I64[Hp - 64] = ds_s8NFz_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = ds1_s8NFA_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s8NFT_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.alloca_info" {
     Foreign.Marshal.Alloc.alloca_info:
         const Foreign.Marshal.Alloc.alloca_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S8NKP_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.682339412 UTC

[section ""data" . Foreign.Marshal.Alloc.$trModule3_closure" {
     Foreign.Marshal.Alloc.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Alloc.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.684105198 UTC

[section ""data" . Foreign.Marshal.Alloc.$trModule1_closure" {
     Foreign.Marshal.Alloc.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Alloc.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.686029554 UTC

[section ""data" . Foreign.Marshal.Alloc.$trModule_closure" {
     Foreign.Marshal.Alloc.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.Marshal.Alloc.$trModule3_closure+1;
         const Foreign.Marshal.Alloc.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.68792496 UTC

[section ""cstring" . Foreign.Marshal.Alloc.malloc4_bytes" {
     Foreign.Marshal.Alloc.malloc4_bytes:
         I8[] [109,97,108,108,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.690605045 UTC

[section ""data" . Foreign.Marshal.Alloc.malloc3_closure" {
     Foreign.Marshal.Alloc.malloc3_closure:
         const Foreign.Marshal.Alloc.malloc3_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Alloc.malloc3_entry() //  [R1]
         { []
         }
     {offset
       c8NNc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NNd; else goto c8NNe;
       c8NNd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NNe: // global
           (_c8NN9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NN9::I64 == 0) goto c8NNb; else goto c8NNa;
       c8NNb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NNa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NN9::I64;
           R2 = Foreign.Marshal.Alloc.malloc4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.malloc3_info" {
     Foreign.Marshal.Alloc.malloc3_info:
         const Foreign.Marshal.Alloc.malloc3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.694534888 UTC

[section ""cstring" . Foreign.Marshal.Alloc.calloc4_bytes" {
     Foreign.Marshal.Alloc.calloc4_bytes:
         I8[] [111,117,116,32,111,102,32,109,101,109,111,114,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.697055205 UTC

[section ""data" . Foreign.Marshal.Alloc.calloc3_closure" {
     Foreign.Marshal.Alloc.calloc3_closure:
         const Foreign.Marshal.Alloc.calloc3_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Alloc.calloc3_entry() //  [R1]
         { []
         }
     {offset
       c8NNu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NNv; else goto c8NNw;
       c8NNv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NNw: // global
           (_c8NNr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NNr::I64 == 0) goto c8NNt; else goto c8NNs;
       c8NNt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NNs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NNr::I64;
           R2 = Foreign.Marshal.Alloc.calloc4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.calloc3_info" {
     Foreign.Marshal.Alloc.calloc3_info:
         const Foreign.Marshal.Alloc.calloc3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.700987709 UTC

[section ""data" . Foreign.Marshal.Alloc.malloc2_closure" {
     Foreign.Marshal.Alloc.malloc2_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.ResourceExhausted_closure+1;
         const Foreign.Marshal.Alloc.malloc3_closure;
         const Foreign.Marshal.Alloc.calloc3_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.704091832 UTC

[section ""data" . Foreign.Marshal.Alloc.malloc1_closure" {
     Foreign.Marshal.Alloc.malloc1_closure:
         const Foreign.Marshal.Alloc.malloc1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Alloc.malloc1_entry() //  [R1]
         { []
         }
     {offset
       c8NNM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NNN; else goto c8NNO;
       c8NNN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NNO: // global
           (_c8NNJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NNJ::I64 == 0) goto c8NNL; else goto c8NNK;
       c8NNL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NNK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NNJ::I64;
           R2 = Foreign.Marshal.Alloc.malloc2_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.malloc1_info" {
     Foreign.Marshal.Alloc.malloc1_info:
         const Foreign.Marshal.Alloc.malloc1_entry;
         const 0;
         const 12884901909;
         const S8NKP_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.709694838 UTC

[section ""data" . Foreign.Marshal.Alloc.mallocBytes1_closure" {
     Foreign.Marshal.Alloc.mallocBytes1_closure:
         const Foreign.Marshal.Alloc.mallocBytes1_info;
         const 0;
 },
 Foreign.Marshal.Alloc.mallocBytes1_entry() //  [R2]
         { []
         }
     {offset
       c8NO4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8NO5; else goto c8NO6;
       c8NO5: // global
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.mallocBytes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8NO6: // global
           I64[Sp - 8] = block_c8NO1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8NOo; else goto c8NO2;
       u8NOo: // global
           call _c8NO1(R1) args: 0, res: 0, upd: 0;
       c8NO2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.mallocBytes1_info" {
     Foreign.Marshal.Alloc.mallocBytes1_info:
         const Foreign.Marshal.Alloc.mallocBytes1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S8NKP_srt+64;
 },
 _c8NO1() //  [R1]
         { []
         }
     {offset
       c8NO1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8NOb; else goto c8NOa;
       c8NOb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8NOa: // global
           (_s8NG2::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[R1 + 7]);
           if (_s8NG2::I64 == 0) goto c8NOn; else goto c8NOm;
       c8NOn: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8NOm: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8NG2::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NO1_info" {
     block_c8NO1_info:
         const _c8NO1;
         const 0;
         const 4294967326;
         const S8NKP_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.716161443 UTC

[section ""data" . Foreign.Marshal.Alloc.mallocBytes_closure" {
     Foreign.Marshal.Alloc.mallocBytes_closure:
         const Foreign.Marshal.Alloc.mallocBytes_info;
         const 0;
 },
 Foreign.Marshal.Alloc.mallocBytes_entry() //  [R2]
         { []
         }
     {offset
       c8NOF: // global
           R2 = R2;
           call Foreign.Marshal.Alloc.mallocBytes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.mallocBytes_info" {
     Foreign.Marshal.Alloc.mallocBytes_info:
         const Foreign.Marshal.Alloc.mallocBytes_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8NKP_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.719544257 UTC

[section ""data" . lvl17_r8N6m_closure" {
     lvl17_r8N6m_closure:
         const GHC.Types.I#_con_info;
         const 84;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.721405437 UTC

[section ""data" . lvl18_r8N6n_closure" {
     lvl18_r8N6n_closure:
         const GHC.Types.I#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.723240652 UTC

[section ""data" . lvl19_r8N6o_closure" {
     lvl19_r8N6o_closure:
         const GHC.Types.I#_con_info;
         const 41;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.725198733 UTC

[section ""data" . lvl20_r8N6p_closure" {
     lvl20_r8N6p_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8N67_closure;
         const lvl3_r8N68_closure;
         const lvl5_r8N6a_closure;
         const lvl17_r8N6m_closure+1;
         const lvl18_r8N6n_closure+1;
         const lvl17_r8N6m_closure+1;
         const lvl19_r8N6o_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.727261105 UTC

[section ""data" . lvl21_r8N6q_closure" {
     lvl21_r8N6q_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8N66_closure;
         const lvl20_r8N6p_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.73021208 UTC

[section ""data" . lvl22_r8N6r_closure" {
     lvl22_r8N6r_closure:
         const lvl22_r8N6r_info;
         const 0;
         const 0;
         const 0;
 },
 lvl22_r8N6r_entry() //  [R1]
         { []
         }
     {offset
       c8NOX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NOY; else goto c8NOZ;
       c8NOY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NOZ: // global
           (_c8NOU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NOU::I64 == 0) goto c8NOW; else goto c8NOV;
       c8NOW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NOV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NOU::I64;
           R2 = lvl21_r8N6q_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl22_r8N6r_info" {
     lvl22_r8N6r_info:
         const lvl22_r8N6r_entry;
         const 0;
         const 4402341478421;
         const S8NKP_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.735505161 UTC

[section ""data" . malloc5_r8N6s_closure" {
     malloc5_r8N6s_closure:
         const malloc5_r8N6s_info;
         const 0;
 },
 malloc5_r8N6s_entry() //  [R2]
         { []
         }
     {offset
       c8NPe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8NPf; else goto c8NPg;
       c8NPf: // global
           R2 = R2;
           R1 = malloc5_r8N6s_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8NPg: // global
           I64[Sp - 8] = block_c8NPc_info;
           R2 = R2;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = lvl22_r8N6r_closure;
           Sp = Sp - 24;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . malloc5_r8N6s_info" {
     malloc5_r8N6s_info:
         const malloc5_r8N6s_entry;
         const 0;
         const 107374182414;
         const 8589934597;
         const S8NKP_srt+64;
 },
 _c8NPc() //  [R1]
         { []
         }
     {offset
       c8NPc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8NPl; else goto c8NPk;
       c8NPl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8NPk: // global
           (_s8NGd::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(I64[R1 + 7]);
           if (_s8NGd::I64 == 0) goto c8NPx; else goto c8NPw;
       c8NPx: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8NPw: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8NGd::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NPc_info" {
     block_c8NPc_info:
         const _c8NPc;
         const 0;
         const 4294967326;
         const S8NKP_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.741931081 UTC

[section ""data" . Foreign.Marshal.Alloc.malloc_closure" {
     Foreign.Marshal.Alloc.malloc_closure:
         const Foreign.Marshal.Alloc.malloc_info;
         const 0;
 },
 Foreign.Marshal.Alloc.malloc_entry() //  [R2]
         { []
         }
     {offset
       c8NPP: // global
           R2 = R2;
           call malloc5_r8N6s_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.malloc_info" {
     Foreign.Marshal.Alloc.malloc_info:
         const Foreign.Marshal.Alloc.malloc_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8NKP_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.745827156 UTC

[section ""cstring" . Foreign.Marshal.Alloc.calloc6_bytes" {
     Foreign.Marshal.Alloc.calloc6_bytes:
         I8[] [99,97,108,108,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.748387304 UTC

[section ""data" . Foreign.Marshal.Alloc.calloc5_closure" {
     Foreign.Marshal.Alloc.calloc5_closure:
         const Foreign.Marshal.Alloc.calloc5_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Alloc.calloc5_entry() //  [R1]
         { []
         }
     {offset
       c8NQ3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NQ4; else goto c8NQ5;
       c8NQ4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NQ5: // global
           (_c8NQ0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NQ0::I64 == 0) goto c8NQ2; else goto c8NQ1;
       c8NQ2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NQ1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NQ0::I64;
           R2 = Foreign.Marshal.Alloc.calloc6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.calloc5_info" {
     Foreign.Marshal.Alloc.calloc5_info:
         const Foreign.Marshal.Alloc.calloc5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.752146263 UTC

[section ""data" . Foreign.Marshal.Alloc.calloc2_closure" {
     Foreign.Marshal.Alloc.calloc2_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.ResourceExhausted_closure+1;
         const Foreign.Marshal.Alloc.calloc5_closure;
         const Foreign.Marshal.Alloc.calloc3_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.754562635 UTC

[section ""data" . Foreign.Marshal.Alloc.calloc1_closure" {
     Foreign.Marshal.Alloc.calloc1_closure:
         const Foreign.Marshal.Alloc.calloc1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Alloc.calloc1_entry() //  [R1]
         { []
         }
     {offset
       c8NQl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NQm; else goto c8NQn;
       c8NQm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NQn: // global
           (_c8NQi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NQi::I64 == 0) goto c8NQk; else goto c8NQj;
       c8NQk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NQj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NQi::I64;
           R2 = Foreign.Marshal.Alloc.calloc2_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.calloc1_info" {
     Foreign.Marshal.Alloc.calloc1_info:
         const Foreign.Marshal.Alloc.calloc1_entry;
         const 0;
         const 554050781205;
         const S8NKP_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.759295021 UTC

[section ""data" . Foreign.Marshal.Alloc.callocBytes1_closure" {
     Foreign.Marshal.Alloc.callocBytes1_closure:
         const Foreign.Marshal.Alloc.callocBytes1_info;
         const 0;
 },
 Foreign.Marshal.Alloc.callocBytes1_entry() //  [R2]
         { []
         }
     {offset
       c8NQD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8NQE; else goto c8NQF;
       c8NQE: // global
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.callocBytes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8NQF: // global
           I64[Sp - 8] = block_c8NQA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8NQY; else goto c8NQB;
       u8NQY: // global
           call _c8NQA(R1) args: 0, res: 0, upd: 0;
       c8NQB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.callocBytes1_info" {
     Foreign.Marshal.Alloc.callocBytes1_info:
         const Foreign.Marshal.Alloc.callocBytes1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S8NKP_srt+112;
 },
 _c8NQA() //  [R1]
         { []
         }
     {offset
       c8NQA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8NQK; else goto c8NQJ;
       c8NQK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8NQJ: // global
           (_s8NGo::I64) = call "ccall" arg hints:  [,]  result hints:  [PtrHint] calloc(1, I64[R1 + 7]);
           if (_s8NGo::I64 == 0) goto c8NQX; else goto c8NQW;
       c8NQX: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.calloc1_closure;
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8NQW: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8NGo::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NQA_info" {
     block_c8NQA_info:
         const _c8NQA;
         const 0;
         const 4294967326;
         const S8NKP_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.764849924 UTC

[section ""data" . Foreign.Marshal.Alloc.callocBytes_closure" {
     Foreign.Marshal.Alloc.callocBytes_closure:
         const Foreign.Marshal.Alloc.callocBytes_info;
         const 0;
 },
 Foreign.Marshal.Alloc.callocBytes_entry() //  [R2]
         { []
         }
     {offset
       c8NRf: // global
           R2 = R2;
           call Foreign.Marshal.Alloc.callocBytes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.callocBytes_info" {
     Foreign.Marshal.Alloc.callocBytes_info:
         const Foreign.Marshal.Alloc.callocBytes_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8NKP_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.768017218 UTC

[section ""data" . lvl23_r8N6t_closure" {
     lvl23_r8N6t_closure:
         const GHC.Types.I#_con_info;
         const 90;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.769768149 UTC

[section ""data" . lvl24_r8N6u_closure" {
     lvl24_r8N6u_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8N67_closure;
         const lvl3_r8N68_closure;
         const lvl5_r8N6a_closure;
         const lvl23_r8N6t_closure+1;
         const lvl7_r8N6c_closure+1;
         const lvl23_r8N6t_closure+1;
         const lvl8_r8N6d_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.771580625 UTC

[section ""data" . lvl25_r8N6v_closure" {
     lvl25_r8N6v_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8N66_closure;
         const lvl24_r8N6u_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.774230765 UTC

[section ""data" . lvl26_r8N6w_closure" {
     lvl26_r8N6w_closure:
         const lvl26_r8N6w_info;
         const 0;
         const 0;
         const 0;
 },
 lvl26_r8N6w_entry() //  [R1]
         { []
         }
     {offset
       c8NRv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NRw; else goto c8NRx;
       c8NRw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NRx: // global
           (_c8NRs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NRs::I64 == 0) goto c8NRu; else goto c8NRt;
       c8NRu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NRt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NRs::I64;
           R2 = lvl25_r8N6v_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl26_r8N6w_info" {
     lvl26_r8N6w_info:
         const lvl26_r8N6w_entry;
         const 0;
         const 281479271677973;
         const S8NKP_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.779421574 UTC

[section ""data" . calloc7_r8N6x_closure" {
     calloc7_r8N6x_closure:
         const calloc7_r8N6x_info;
         const 0;
 },
 calloc7_r8N6x_entry() //  [R2]
         { []
         }
     {offset
       c8NRM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8NRN; else goto c8NRO;
       c8NRN: // global
           R2 = R2;
           R1 = calloc7_r8N6x_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8NRO: // global
           I64[Sp - 8] = block_c8NRK_info;
           R2 = R2;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = lvl26_r8N6w_closure;
           Sp = Sp - 24;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . calloc7_r8N6x_info" {
     calloc7_r8N6x_info:
         const calloc7_r8N6x_entry;
         const 0;
         const 107374182414;
         const 8589934597;
         const S8NKP_srt+112;
 },
 _c8NRK() //  [R1]
         { []
         }
     {offset
       c8NRK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8NRT; else goto c8NRS;
       c8NRT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8NRS: // global
           (_s8NGz::I64) = call "ccall" arg hints:  [,]  result hints:  [PtrHint] calloc(1, I64[R1 + 7]);
           if (_s8NGz::I64 == 0) goto c8NS6; else goto c8NS5;
       c8NS6: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.calloc1_closure;
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8NS5: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8NGz::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NRK_info" {
     block_c8NRK_info:
         const _c8NRK;
         const 0;
         const 4294967326;
         const S8NKP_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.784888186 UTC

[section ""data" . Foreign.Marshal.Alloc.calloc_closure" {
     Foreign.Marshal.Alloc.calloc_closure:
         const Foreign.Marshal.Alloc.calloc_info;
         const 0;
 },
 Foreign.Marshal.Alloc.calloc_entry() //  [R2]
         { []
         }
     {offset
       c8NSo: // global
           R2 = R2;
           call calloc7_r8N6x_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.calloc_info" {
     Foreign.Marshal.Alloc.calloc_info:
         const Foreign.Marshal.Alloc.calloc_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8NKP_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.788219894 UTC

[section ""cstring" . Foreign.Marshal.Alloc.realloc5_bytes" {
     Foreign.Marshal.Alloc.realloc5_bytes:
         I8[] [114,101,97,108,108,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.790496455 UTC

[section ""data" . Foreign.Marshal.Alloc.realloc4_closure" {
     Foreign.Marshal.Alloc.realloc4_closure:
         const Foreign.Marshal.Alloc.realloc4_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Alloc.realloc4_entry() //  [R1]
         { []
         }
     {offset
       c8NSC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NSD; else goto c8NSE;
       c8NSD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NSE: // global
           (_c8NSz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NSz::I64 == 0) goto c8NSB; else goto c8NSA;
       c8NSB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NSA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NSz::I64;
           R2 = Foreign.Marshal.Alloc.realloc5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.realloc4_info" {
     Foreign.Marshal.Alloc.realloc4_info:
         const Foreign.Marshal.Alloc.realloc4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.794108563 UTC

[section ""data" . Foreign.Marshal.Alloc.realloc3_closure" {
     Foreign.Marshal.Alloc.realloc3_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.ResourceExhausted_closure+1;
         const Foreign.Marshal.Alloc.realloc4_closure;
         const Foreign.Marshal.Alloc.calloc3_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.796365922 UTC

[section ""data" . Foreign.Marshal.Alloc.realloc2_closure" {
     Foreign.Marshal.Alloc.realloc2_closure:
         const Foreign.Marshal.Alloc.realloc2_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Alloc.realloc2_entry() //  [R1]
         { []
         }
     {offset
       c8NSU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NSV; else goto c8NSW;
       c8NSV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NSW: // global
           (_c8NSR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NSR::I64 == 0) goto c8NST; else goto c8NSS;
       c8NST: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NSS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NSR::I64;
           R2 = Foreign.Marshal.Alloc.realloc3_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.realloc2_info" {
     Foreign.Marshal.Alloc.realloc2_info:
         const Foreign.Marshal.Alloc.realloc2_entry;
         const 0;
         const 35188667056149;
         const S8NKP_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.800178813 UTC

[section ""data" . lvl27_r8N6y_closure" {
     lvl27_r8N6y_closure:
         const GHC.Types.I#_con_info;
         const 162;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.801838246 UTC

[section ""data" . lvl28_r8N6z_closure" {
     lvl28_r8N6z_closure:
         const GHC.Types.I#_con_info;
         const 34;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.803565742 UTC

[section ""data" . lvl29_r8N6A_closure" {
     lvl29_r8N6A_closure:
         const GHC.Types.I#_con_info;
         const 43;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.805223282 UTC

[section ""data" . lvl30_r8N6B_closure" {
     lvl30_r8N6B_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r8N67_closure;
         const lvl3_r8N68_closure;
         const lvl5_r8N6a_closure;
         const lvl27_r8N6y_closure+1;
         const lvl28_r8N6z_closure+1;
         const lvl27_r8N6y_closure+1;
         const lvl29_r8N6A_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.807024615 UTC

[section ""data" . lvl31_r8N6C_closure" {
     lvl31_r8N6C_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r8N66_closure;
         const lvl30_r8N6B_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.810331985 UTC

[section ""data" . Foreign.Marshal.Alloc.realloc6_closure" {
     Foreign.Marshal.Alloc.realloc6_closure:
         const Foreign.Marshal.Alloc.realloc6_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Alloc.realloc6_entry() //  [R1]
         { []
         }
     {offset
       c8NTg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NTh; else goto c8NTi;
       c8NTh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8NTi: // global
           (_c8NTd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8NTd::I64 == 0) goto c8NTf; else goto c8NTe;
       c8NTf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8NTe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8NTd::I64;
           R2 = lvl31_r8N6C_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.realloc6_info" {
     Foreign.Marshal.Alloc.realloc6_info:
         const Foreign.Marshal.Alloc.realloc6_entry;
         const 0;
         const 4503603922337813;
         const S8NKP_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.815024062 UTC

[section ""data" . Foreign.Marshal.Alloc.$wrealloc_closure" {
     Foreign.Marshal.Alloc.$wrealloc_closure:
         const Foreign.Marshal.Alloc.$wrealloc_info;
         const 0;
 },
 Foreign.Marshal.Alloc.$wrealloc_entry() //  [R2, R3]
         { []
         }
     {offset
       c8NTx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8NTy; else goto c8NTz;
       c8NTy: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.$wrealloc_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8NTz: // global
           I64[Sp - 16] = block_c8NTv_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Alloc.realloc6_closure;
           I64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.$wrealloc_info" {
     Foreign.Marshal.Alloc.$wrealloc_info:
         const Foreign.Marshal.Alloc.$wrealloc_entry;
         const 0;
         const 30064771086;
         const 12884901902;
         const S8NKP_srt+168;
 },
 _c8NTv() //  [R1]
         { []
         }
     {offset
       c8NTv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8NTE; else goto c8NTD;
       c8NTE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8NTD: // global
           (_s8NGL::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] realloc(I64[Sp + 8], I64[R1 + 7]);
           if (_s8NGL::I64 == 0) goto c8NTR; else goto c8NTQ;
       c8NTR: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.realloc2_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8NTQ: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8NGL::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NTv_info" {
     block_c8NTv_info:
         const _c8NTv;
         const 65;
         const 4294967326;
         const S8NKP_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.82100431 UTC

[section ""data" . Foreign.Marshal.Alloc.realloc1_closure" {
     Foreign.Marshal.Alloc.realloc1_closure:
         const Foreign.Marshal.Alloc.realloc1_info;
         const 0;
 },
 Foreign.Marshal.Alloc.realloc1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8NUc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NUd; else goto c8NUe;
       c8NUd: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.realloc1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8NUe: // global
           I64[Sp - 16] = block_c8NU9_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8NUi; else goto c8NUa;
       u8NUi: // global
           call _c8NU9(R1) args: 0, res: 0, upd: 0;
       c8NUa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.realloc1_info" {
     Foreign.Marshal.Alloc.realloc1_info:
         const Foreign.Marshal.Alloc.realloc1_entry;
         const 0;
         const 38654705678;
         const 12884901903;
         const S8NKP_srt+168;
 },
 _c8NU9() //  [R1]
         { []
         }
     {offset
       c8NU9: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Foreign.Marshal.Alloc.$wrealloc_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NU9_info" {
     block_c8NU9_info:
         const _c8NU9;
         const 1;
         const 4294967326;
         const S8NKP_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.826705221 UTC

[section ""data" . Foreign.Marshal.Alloc.realloc_closure" {
     Foreign.Marshal.Alloc.realloc_closure:
         const Foreign.Marshal.Alloc.realloc_info;
         const 0;
 },
 Foreign.Marshal.Alloc.realloc_entry() //  [R2, R3]
         { []
         }
     {offset
       c8NUx: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Alloc.realloc1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.realloc_info" {
     Foreign.Marshal.Alloc.realloc_info:
         const Foreign.Marshal.Alloc.realloc_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8NKP_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.830518635 UTC

[section ""data" . free1_r8N6D_closure" {
     free1_r8N6D_closure:
         const free1_r8N6D_info;
 },
 free1_r8N6D_entry() //  [R2]
         { []
         }
     {offset
       c8NUL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8NUM; else goto c8NUN;
       c8NUM: // global
           R2 = R2;
           R1 = free1_r8N6D_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8NUN: // global
           I64[Sp - 8] = block_c8NUI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8NUT; else goto c8NUJ;
       u8NUT: // global
           call _c8NUI(R1) args: 0, res: 0, upd: 0;
       c8NUJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . free1_r8N6D_info" {
     free1_r8N6D_info:
         const free1_r8N6D_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c8NUI() //  [R1]
         { []
         }
     {offset
       c8NUI: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NUI_info" {
     block_c8NUI_info:
         const _c8NUI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.835791952 UTC

[section ""data" . Foreign.Marshal.Alloc.free_closure" {
     Foreign.Marshal.Alloc.free_closure:
         const Foreign.Marshal.Alloc.free_info;
 },
 Foreign.Marshal.Alloc.free_entry() //  [R2]
         { []
         }
     {offset
       c8NVa: // global
           R2 = R2;
           call free1_r8N6D_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.free_info" {
     Foreign.Marshal.Alloc.free_info:
         const Foreign.Marshal.Alloc.free_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.839724921 UTC

[section ""data" . Foreign.Marshal.Alloc.$wreallocBytes_closure" {
     Foreign.Marshal.Alloc.$wreallocBytes_closure:
         const Foreign.Marshal.Alloc.$wreallocBytes_info;
         const 0;
 },
 Foreign.Marshal.Alloc.$wreallocBytes_entry() //  [R2, R3]
         { []
         }
     {offset
       c8NVp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8NVt; else goto c8NVs;
       c8NVt: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.$wreallocBytes_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8NVs: // global
           if (R3 == 0) goto c8NVo; else goto c8NVn;
       c8NVo: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(R2);
           Hp = Hp - 16;
           R1 = GHC.Ptr.nullPtr_closure;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8NVn: // global
           _c8NVA::I64 = R3;
           (_s8NH8::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] realloc(R2, _c8NVA::I64);
           if (_s8NH8::I64 == 0) goto c8NVH; else goto c8NVG;
       c8NVH: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.realloc2_closure;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8NVG: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8NH8::I64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.$wreallocBytes_info" {
     Foreign.Marshal.Alloc.$wreallocBytes_info:
         const Foreign.Marshal.Alloc.$wreallocBytes_entry;
         const 0;
         const 38654705678;
         const 12884901900;
         const S8NKP_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.845637683 UTC

[section ""data" . Foreign.Marshal.Alloc.reallocBytes1_closure" {
     Foreign.Marshal.Alloc.reallocBytes1_closure:
         const Foreign.Marshal.Alloc.reallocBytes1_info;
         const 0;
 },
 Foreign.Marshal.Alloc.reallocBytes1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8NW0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8NW4; else goto c8NW5;
       c8NW4: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Alloc.reallocBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8NW5: // global
           I64[Sp - 16] = block_c8NVX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8NWd; else goto c8NVY;
       u8NWd: // global
           call _c8NVX(R1) args: 0, res: 0, upd: 0;
       c8NVY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.reallocBytes1_info" {
     Foreign.Marshal.Alloc.reallocBytes1_info:
         const Foreign.Marshal.Alloc.reallocBytes1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S8NKP_srt+200;
 },
 _c8NVX() //  [R1]
         { []
         }
     {offset
       c8NVX: // global
           I64[Sp] = block_c8NW3_info;
           _s8NHi::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8NHi::I64;
           if (R1 & 7 != 0) goto u8NWc; else goto c8NW7;
       u8NWc: // global
           call _c8NW3(R1) args: 0, res: 0, upd: 0;
       c8NW7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NVX_info" {
     block_c8NVX_info:
         const _c8NVX;
         const 1;
         const 4294967326;
         const S8NKP_srt+200;
 },
 _c8NW3() //  [R1]
         { []
         }
     {offset
       c8NW3: // global
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call Foreign.Marshal.Alloc.$wreallocBytes_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8NW3_info" {
     block_c8NW3_info:
         const _c8NW3;
         const 65;
         const 4294967326;
         const S8NKP_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.852120992 UTC

[section ""data" . Foreign.Marshal.Alloc.reallocBytes_closure" {
     Foreign.Marshal.Alloc.reallocBytes_closure:
         const Foreign.Marshal.Alloc.reallocBytes_info;
         const 0;
 },
 Foreign.Marshal.Alloc.reallocBytes_entry() //  [R2, R3]
         { []
         }
     {offset
       c8NWx: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Alloc.reallocBytes1_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Alloc.reallocBytes_info" {
     Foreign.Marshal.Alloc.reallocBytes_info:
         const Foreign.Marshal.Alloc.reallocBytes_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8NKP_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.855369482 UTC

[section ""data" . Foreign.Marshal.Alloc.finalizerFree_closure" {
     Foreign.Marshal.Alloc.finalizerFree_closure:
         const GHC.Ptr.FunPtr_con_info;
         const free;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:57.85832604 UTC

[section ""relreadonly" . S8NKP_srt" {
     S8NKP_srt:
         const GHC.Err.undefined_closure;
         const lvl10_r8N6f_closure;
         const lvl15_r8N6k_closure;
         const lvl11_r8N6g_closure;
         const lvl16_r8N6l_closure;
         const Foreign.Marshal.Alloc.alloca_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const Foreign.Marshal.Alloc.malloc2_closure;
         const Foreign.Marshal.Alloc.malloc1_closure;
         const Foreign.Marshal.Alloc.mallocBytes1_closure;
         const lvl21_r8N6q_closure;
         const lvl22_r8N6r_closure;
         const malloc5_r8N6s_closure;
         const Foreign.Marshal.Alloc.calloc2_closure;
         const Foreign.Marshal.Alloc.calloc1_closure;
         const Foreign.Marshal.Alloc.callocBytes1_closure;
         const lvl25_r8N6v_closure;
         const lvl26_r8N6w_closure;
         const calloc7_r8N6x_closure;
         const Foreign.Marshal.Alloc.realloc3_closure;
         const lvl31_r8N6C_closure;
         const Foreign.Marshal.Alloc.$wrealloc_closure;
         const Foreign.Marshal.Alloc.realloc2_closure;
         const Foreign.Marshal.Alloc.realloc6_closure;
         const Foreign.Marshal.Alloc.realloc1_closure;
         const Foreign.Marshal.Alloc.$wreallocBytes_closure;
         const Foreign.Marshal.Alloc.reallocBytes1_closure;
 }]

