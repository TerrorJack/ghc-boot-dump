
==================== Raw Cmm ====================
2018-03-16 16:03:56.152768918 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:56.155430524 UTC

[section ""data" . Foreign.Marshal.Error.throwIf2_closure" {
     Foreign.Marshal.Error.throwIf2_closure:
         const Foreign.Marshal.Error.throwIf2_info;
         const 0;
 },
 sat_s8Mei_entry() //  [R1]
         { []
         }
     {offset
       c8MmQ: // global
           _s8Mei::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8MmR; else goto c8MmS;
       c8MmS: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c8MmU; else goto c8MmT;
       c8MmU: // global
           HpAlloc = 88;
           goto c8MmR;
       c8MmR: // global
           R1 = _s8Mei::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8MmT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8Mei::P64;
           _s8Med::P64 = P64[_s8Mei::P64 + 16];
           _s8Mee::P64 = P64[_s8Mei::P64 + 24];
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = _s8Mee::P64;
           P64[Hp - 56] = _s8Med::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = GHC.IO.Exception.UserError_closure+1;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8Mei_info" {
     sat_s8Mei_info:
         const sat_s8Mei_entry;
         const 2;
         const 4294967314;
         const S8Mfz_srt;
 },
 Foreign.Marshal.Error.throwIf2_entry() //  [R2, R3]
         { []
         }
     {offset
       c8MmV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8MmZ; else goto c8MmY;
       c8MmZ: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Error.throwIf2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8MmY: // global
           I64[Hp - 24] = sat_s8Mei_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIf2_info" {
     Foreign.Marshal.Error.throwIf2_info:
         const Foreign.Marshal.Error.throwIf2_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S8Mfz_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.162510849 UTC

[section ""data" . Foreign.Marshal.Error.throwIf1_closure" {
     Foreign.Marshal.Error.throwIf1_closure:
         const Foreign.Marshal.Error.throwIf1_info;
         const 0;
 },
 Foreign.Marshal.Error.throwIf1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Mnl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8Mnm; else goto c8Mnn;
       c8Mnm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Error.throwIf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Mnn: // global
           I64[Sp - 24] = block_c8Mnd_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIf1_info" {
     Foreign.Marshal.Error.throwIf1_info:
         const Foreign.Marshal.Error.throwIf1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S8Mfz_srt+8;
 },
 _c8Mnd() //  [R1]
         { []
         }
     {offset
       c8Mnd: // global
           I64[Sp] = block_c8Mnf_info;
           R2 = R1;
           _s8Mep::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8Mep::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Mnd_info" {
     block_c8Mnd_info:
         const _c8Mnd;
         const 2;
         const 4294967326;
         const S8Mfz_srt+8;
 },
 _c8Mnf() //  [R1]
         { []
         }
     {offset
       c8Mnf: // global
           _s8Mep::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8Mni; else goto c8Mnj;
       c8Mni: // global
           R1 = _s8Mep::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8Mnj: // global
           R3 = P64[Sp + 16];
           R2 = _s8Mep::P64;
           Sp = Sp + 24;
           call Foreign.Marshal.Error.throwIf2_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Mnf_info" {
     block_c8Mnf_info:
         const _c8Mnf;
         const 2;
         const 4294967326;
         const S8Mfz_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.169141496 UTC

[section ""data" . Foreign.Marshal.Error.throwIf_closure" {
     Foreign.Marshal.Error.throwIf_closure:
         const Foreign.Marshal.Error.throwIf_info;
         const 0;
 },
 Foreign.Marshal.Error.throwIf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8MnN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Error.throwIf1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIf_info" {
     Foreign.Marshal.Error.throwIf_info:
         const Foreign.Marshal.Error.throwIf_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S8Mfz_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.172779044 UTC

[section ""data" . Foreign.Marshal.Error.throwIfNeg1_closure" {
     Foreign.Marshal.Error.throwIfNeg1_closure:
         const Foreign.Marshal.Error.throwIfNeg1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Error.throwIfNeg1_entry() //  [R1]
         { []
         }
     {offset
       c8Mo0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Mo1; else goto c8Mo2;
       c8Mo1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Mo2: // global
           (_c8MnX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8MnX::I64 == 0) goto c8MnZ; else goto c8MnY;
       c8MnZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8MnY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8MnX::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIfNeg1_info" {
     Foreign.Marshal.Error.throwIfNeg1_info:
         const Foreign.Marshal.Error.throwIfNeg1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.178579365 UTC

[section ""data" . Foreign.Marshal.Error.throwIfNeg_closure" {
     Foreign.Marshal.Error.throwIfNeg_closure:
         const Foreign.Marshal.Error.throwIfNeg_info;
         const 0;
 },
 ds_s8Met_entry() //  [R1]
         { []
         }
     {offset
       c8Moi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8Moj; else goto c8Mok;
       c8Moj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Mok: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Error.throwIfNeg1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s8Met_info" {
     ds_s8Met_info:
         const ds_s8Met_entry;
         const 1;
         const 4294967312;
         const S8Mfz_srt+24;
 },
 sat_s8MeB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c8Moy: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c8Moz; else goto c8MoA;
       c8Moz: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8MoA: // global
           I64[Sp - 32] = block_c8Moq_info;
           _s8Mer::P64 = P64[R1 + 5];
           _s8Met::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 24] = _s8Mer::P64;
           P64[Sp - 16] = _s8Met::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8MeB_info" {
     sat_s8MeB_info:
         const sat_s8MeB_entry;
         const 2;
         const 4294967307;
         const 12884901903;
         const S8Mfz_srt+8;
 },
 _c8Moq() //  [R1]
         { []
         }
     {offset
       c8Moq: // global
           _s8Mer::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8Mos_info;
           R2 = _s8Mer::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = R1;
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Moq_info" {
     block_c8Moq_info:
         const _c8Moq;
         const 3;
         const 4294967326;
         const S8Mfz_srt+8;
 },
 _c8Mos() //  [R1]
         { []
         }
     {offset
       c8Mos: // global
           _s8Mez::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8Mov; else goto c8Mow;
       c8Mov: // global
           R1 = _s8Mez::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8Mow: // global
           R3 = P64[Sp + 16];
           R2 = _s8Mez::P64;
           Sp = Sp + 24;
           call Foreign.Marshal.Error.throwIf2_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Mos_info" {
     block_c8Mos_info:
         const _c8Mos;
         const 2;
         const 4294967326;
         const S8Mfz_srt+8;
 },
 Foreign.Marshal.Error.throwIfNeg_entry() //  [R2, R3]
         { []
         }
     {offset
       c8MoI: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8MoM; else goto c8MoL;
       c8MoM: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Error.throwIfNeg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8MoL: // global
           I64[Hp - 40] = ds_s8Met_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s8MeB_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 13;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIfNeg_info" {
     Foreign.Marshal.Error.throwIfNeg_info:
         const Foreign.Marshal.Error.throwIfNeg_entry;
         const 0;
         const 55834574862;
         const 8589934607;
         const S8Mfz_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.191217548 UTC

[section ""data" . Foreign.Marshal.Error.throwIfNull2_closure" {
     Foreign.Marshal.Error.throwIfNull2_closure:
         const Foreign.Marshal.Error.throwIfNull2_info;
         const 0;
 },
 sat_s8MeF_entry() //  [R1]
         { []
         }
     {offset
       c8Mpk: // global
           _s8MeF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8Mpl; else goto c8Mpm;
       c8Mpm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c8Mpo; else goto c8Mpn;
       c8Mpo: // global
           HpAlloc = 56;
           goto c8Mpl;
       c8Mpl: // global
           R1 = _s8MeF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Mpn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8MeF::P64;
           _s8MeC::P64 = P64[_s8MeF::P64 + 16];
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = GHC.IO.Exception.UserError_closure+1;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           P64[Hp - 16] = _s8MeC::P64;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8MeF_info" {
     sat_s8MeF_info:
         const sat_s8MeF_entry;
         const 1;
         const 4294967312;
         const S8Mfz_srt;
 },
 Foreign.Marshal.Error.throwIfNull2_entry() //  [R2]
         { []
         }
     {offset
       c8Mpp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8Mpt; else goto c8Mps;
       c8Mpt: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Foreign.Marshal.Error.throwIfNull2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8Mps: // global
           I64[Hp - 16] = sat_s8MeF_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIfNull2_info" {
     Foreign.Marshal.Error.throwIfNull2_info:
         const Foreign.Marshal.Error.throwIfNull2_entry;
         const 0;
         const 141733920782;
         const 8589934597;
         const S8Mfz_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.198315644 UTC

[section ""data" . Foreign.Marshal.Error.throwIfNull1_closure" {
     Foreign.Marshal.Error.throwIfNull1_closure:
         const Foreign.Marshal.Error.throwIfNull1_info;
         const 0;
 },
 Foreign.Marshal.Error.throwIfNull1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8MpL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8MpM; else goto c8MpN;
       c8MpM: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Error.throwIfNull1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8MpN: // global
           I64[Sp - 16] = block_c8MpG_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIfNull1_info" {
     Foreign.Marshal.Error.throwIfNull1_info:
         const Foreign.Marshal.Error.throwIfNull1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S8Mfz_srt+40;
 },
 _c8MpG() //  [R1]
         { []
         }
     {offset
       c8MpG: // global
           I64[Sp - 8] = block_c8MpI_info;
           _s8MeL::P64 = R1;
           R1 = R1;
           P64[Sp] = _s8MeL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8MpX; else goto c8MpJ;
       u8MpX: // global
           call _c8MpI(R1) args: 0, res: 0, upd: 0;
       c8MpJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8MpG_info" {
     block_c8MpG_info:
         const _c8MpG;
         const 1;
         const 4294967326;
         const S8Mfz_srt+40;
 },
 _c8MpI() //  [R1]
         { []
         }
     {offset
       c8MpI: // global
           if (I64[R1 + 7] == 0) goto c8MpW; else goto c8MpV;
       c8MpW: // global
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Foreign.Marshal.Error.throwIfNull2_entry(R2) args: 8, res: 0, upd: 8;
       c8MpV: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8MpI_info" {
     block_c8MpI_info:
         const _c8MpI;
         const 2;
         const 4294967326;
         const S8Mfz_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.205544214 UTC

[section ""data" . Foreign.Marshal.Error.throwIfNull_closure" {
     Foreign.Marshal.Error.throwIfNull_closure:
         const Foreign.Marshal.Error.throwIfNull_info;
         const 0;
 },
 Foreign.Marshal.Error.throwIfNull_entry() //  [R2, R3]
         { []
         }
     {offset
       c8Mqf: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Error.throwIfNull1_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIfNull_info" {
     Foreign.Marshal.Error.throwIfNull_info:
         const Foreign.Marshal.Error.throwIfNull_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8Mfz_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.209558122 UTC

[section ""data" . Foreign.Marshal.Error.void1_closure" {
     Foreign.Marshal.Error.void1_closure:
         const Foreign.Marshal.Error.void1_info;
 },
 Foreign.Marshal.Error.void1_entry() //  [R2]
         { []
         }
     {offset
       c8Mqs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8Mqt; else goto c8Mqu;
       c8Mqt: // global
           R2 = R2;
           R1 = Foreign.Marshal.Error.void1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8Mqu: // global
           I64[Sp - 8] = block_c8Mqq_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.void1_info" {
     Foreign.Marshal.Error.void1_info:
         const Foreign.Marshal.Error.void1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c8Mqq() //  []
         { []
         }
     {offset
       c8Mqq: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Mqq_info" {
     block_c8Mqq_info:
         const _c8Mqq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.21496227 UTC

[section ""data" . Foreign.Marshal.Error.void_closure" {
     Foreign.Marshal.Error.void_closure:
         const Foreign.Marshal.Error.void_info;
 },
 Foreign.Marshal.Error.void_entry() //  [R2]
         { []
         }
     {offset
       c8MqJ: // global
           R2 = R2;
           call Foreign.Marshal.Error.void1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.void_info" {
     Foreign.Marshal.Error.void_info:
         const Foreign.Marshal.Error.void_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.21916127 UTC

[section ""data" . Foreign.Marshal.Error.throwIf_1_closure" {
     Foreign.Marshal.Error.throwIf_1_closure:
         const Foreign.Marshal.Error.throwIf_1_info;
         const 0;
 },
 Foreign.Marshal.Error.throwIf_1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Mr2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8Mr3; else goto c8Mr4;
       c8Mr3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Error.throwIf_1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Mr4: // global
           I64[Sp - 24] = block_c8MqU_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIf_1_info" {
     Foreign.Marshal.Error.throwIf_1_info:
         const Foreign.Marshal.Error.throwIf_1_entry;
         const 0;
         const 279172874254;
         const 17179869207;
         const S8Mfz_srt+8;
 },
 _c8MqU() //  [R1]
         { []
         }
     {offset
       c8MqU: // global
           I64[Sp] = block_c8MqW_info;
           R2 = R1;
           _s8Mf0::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8Mf0::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8MqU_info" {
     block_c8MqU_info:
         const _c8MqU;
         const 2;
         const 4294967326;
         const S8Mfz_srt+8;
 },
 _c8MqW() //  [R1]
         { []
         }
     {offset
       c8MqW: // global
           if (R1 & 7 == 1) goto c8MqZ; else goto c8Mr0;
       c8MqZ: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8Mr0: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Foreign.Marshal.Error.throwIf2_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8MqW_info" {
     block_c8MqW_info:
         const _c8MqW;
         const 2;
         const 4294967326;
         const S8Mfz_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.226646296 UTC

[section ""data" . Foreign.Marshal.Error.throwIf__closure" {
     Foreign.Marshal.Error.throwIf__closure:
         const Foreign.Marshal.Error.throwIf__info;
         const 0;
 },
 Foreign.Marshal.Error.throwIf__entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Mru: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Error.throwIf_1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIf__info" {
     Foreign.Marshal.Error.throwIf__info:
         const Foreign.Marshal.Error.throwIf__entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S8Mfz_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.232031299 UTC

[section ""data" . Foreign.Marshal.Error.throwIfNeg__closure" {
     Foreign.Marshal.Error.throwIfNeg__closure:
         const Foreign.Marshal.Error.throwIfNeg__info;
         const 0;
 },
 ds_s8Mf5_entry() //  [R1]
         { []
         }
     {offset
       c8MrJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8MrK; else goto c8MrL;
       c8MrK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8MrL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Error.throwIfNeg1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s8Mf5_info" {
     ds_s8Mf5_info:
         const ds_s8Mf5_entry;
         const 1;
         const 4294967312;
         const S8Mfz_srt+24;
 },
 sat_s8Mfe_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c8MrZ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c8Ms0; else goto c8Ms1;
       c8Ms0: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Ms1: // global
           I64[Sp - 32] = block_c8MrR_info;
           _s8Mf3::P64 = P64[R1 + 5];
           _s8Mf5::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 24] = _s8Mf3::P64;
           P64[Sp - 16] = _s8Mf5::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8Mfe_info" {
     sat_s8Mfe_info:
         const sat_s8Mfe_entry;
         const 2;
         const 4294967307;
         const 12884901903;
         const S8Mfz_srt+8;
 },
 _c8MrR() //  [R1]
         { []
         }
     {offset
       c8MrR: // global
           _s8Mf3::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8MrT_info;
           R2 = _s8Mf3::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = R1;
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8MrR_info" {
     block_c8MrR_info:
         const _c8MrR;
         const 3;
         const 4294967326;
         const S8Mfz_srt+8;
 },
 _c8MrT() //  [R1]
         { []
         }
     {offset
       c8MrT: // global
           if (R1 & 7 == 1) goto c8MrW; else goto c8MrX;
       c8MrW: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8MrX: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Foreign.Marshal.Error.throwIf2_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8MrT_info" {
     block_c8MrT_info:
         const _c8MrT;
         const 2;
         const 4294967326;
         const S8Mfz_srt+8;
 },
 Foreign.Marshal.Error.throwIfNeg__entry() //  [R2, R3]
         { []
         }
     {offset
       c8Ms9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8Msd; else goto c8Msc;
       c8Msd: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Error.throwIfNeg__closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Msc: // global
           I64[Hp - 40] = ds_s8Mf5_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s8Mfe_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 13;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIfNeg__info" {
     Foreign.Marshal.Error.throwIfNeg__info:
         const Foreign.Marshal.Error.throwIfNeg__entry;
         const 0;
         const 571230650382;
         const 8589934607;
         const S8Mfz_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.242538337 UTC

[section ""cstring" . Foreign.Marshal.Error.$trModule4_bytes" {
     Foreign.Marshal.Error.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.244374326 UTC

[section ""data" . Foreign.Marshal.Error.$trModule3_closure" {
     Foreign.Marshal.Error.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Error.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.246206202 UTC

[section ""cstring" . Foreign.Marshal.Error.$trModule2_bytes" {
     Foreign.Marshal.Error.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,77,97,114,115,104,97,108,46,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.247969475 UTC

[section ""data" . Foreign.Marshal.Error.$trModule1_closure" {
     Foreign.Marshal.Error.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Error.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.249746913 UTC

[section ""data" . Foreign.Marshal.Error.$trModule_closure" {
     Foreign.Marshal.Error.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.Marshal.Error.$trModule3_closure+1;
         const Foreign.Marshal.Error.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.251546556 UTC

[section ""relreadonly" . S8Mfz_srt" {
     S8Mfz_srt:
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const Foreign.Marshal.Error.throwIf2_closure;
         const Foreign.Marshal.Error.throwIf1_closure;
         const Foreign.Marshal.Error.throwIfNeg1_closure;
         const Foreign.Marshal.Error.throwIfNeg_closure;
         const Foreign.Marshal.Error.throwIfNull2_closure;
         const Foreign.Marshal.Error.throwIfNull1_closure;
         const Foreign.Marshal.Error.throwIf_1_closure;
         const Foreign.Marshal.Error.throwIfNeg__closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.452745233 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:56.456212434 UTC

[section ""data" . Foreign.Marshal.Error.throwIf2_closure" {
     Foreign.Marshal.Error.throwIf2_closure:
         const Foreign.Marshal.Error.throwIf2_info;
         const 0;
 },
 sat_s8MsN_entry() //  [R1]
         { []
         }
     {offset
       c8MtU: // global
           _s8MsN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8MtV; else goto c8MtW;
       c8MtW: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c8MtY; else goto c8MtX;
       c8MtY: // global
           HpAlloc = 88;
           goto c8MtV;
       c8MtV: // global
           R1 = _s8MsN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8MtX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8MsN::P64;
           _s8MsI::P64 = P64[_s8MsN::P64 + 16];
           _s8MsJ::P64 = P64[_s8MsN::P64 + 24];
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = _s8MsJ::P64;
           P64[Hp - 56] = _s8MsI::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = GHC.IO.Exception.UserError_closure+1;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8MsN_info" {
     sat_s8MsN_info:
         const sat_s8MsN_entry;
         const 2;
         const 4294967314;
         const S8Mu4_srt;
 },
 Foreign.Marshal.Error.throwIf2_entry() //  [R2, R3]
         { []
         }
     {offset
       c8MtZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8Mu3; else goto c8Mu2;
       c8Mu3: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Error.throwIf2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Mu2: // global
           I64[Hp - 24] = sat_s8MsN_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIf2_info" {
     Foreign.Marshal.Error.throwIf2_info:
         const Foreign.Marshal.Error.throwIf2_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S8Mu4_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.463651781 UTC

[section ""data" . Foreign.Marshal.Error.throwIf1_closure" {
     Foreign.Marshal.Error.throwIf1_closure:
         const Foreign.Marshal.Error.throwIf1_info;
         const 0;
 },
 Foreign.Marshal.Error.throwIf1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8MuE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8MuF; else goto c8MuG;
       c8MuF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Error.throwIf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8MuG: // global
           I64[Sp - 24] = block_c8Muw_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIf1_info" {
     Foreign.Marshal.Error.throwIf1_info:
         const Foreign.Marshal.Error.throwIf1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S8Mu4_srt+8;
 },
 _c8Muw() //  [R1]
         { []
         }
     {offset
       c8Muw: // global
           I64[Sp] = block_c8Muy_info;
           R2 = R1;
           _s8MsU::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8MsU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Muw_info" {
     block_c8Muw_info:
         const _c8Muw;
         const 2;
         const 4294967326;
         const S8Mu4_srt+8;
 },
 _c8Muy() //  [R1]
         { []
         }
     {offset
       c8Muy: // global
           _s8MsU::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8MuB; else goto c8MuC;
       c8MuB: // global
           R1 = _s8MsU::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8MuC: // global
           R3 = P64[Sp + 16];
           R2 = _s8MsU::P64;
           Sp = Sp + 24;
           call Foreign.Marshal.Error.throwIf2_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Muy_info" {
     block_c8Muy_info:
         const _c8Muy;
         const 2;
         const 4294967326;
         const S8Mu4_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.471018836 UTC

[section ""data" . Foreign.Marshal.Error.throwIf_closure" {
     Foreign.Marshal.Error.throwIf_closure:
         const Foreign.Marshal.Error.throwIf_info;
         const 0;
 },
 Foreign.Marshal.Error.throwIf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Mv8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Error.throwIf1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIf_info" {
     Foreign.Marshal.Error.throwIf_info:
         const Foreign.Marshal.Error.throwIf_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S8Mu4_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.474960323 UTC

[section ""data" . Foreign.Marshal.Error.throwIfNeg1_closure" {
     Foreign.Marshal.Error.throwIfNeg1_closure:
         const Foreign.Marshal.Error.throwIfNeg1_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.Marshal.Error.throwIfNeg1_entry() //  [R1]
         { []
         }
     {offset
       c8Mvl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Mvm; else goto c8Mvn;
       c8Mvm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Mvn: // global
           (_c8Mvi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8Mvi::I64 == 0) goto c8Mvk; else goto c8Mvj;
       c8Mvk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8Mvj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8Mvi::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIfNeg1_info" {
     Foreign.Marshal.Error.throwIfNeg1_info:
         const Foreign.Marshal.Error.throwIfNeg1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.481399977 UTC

[section ""data" . Foreign.Marshal.Error.throwIfNeg_closure" {
     Foreign.Marshal.Error.throwIfNeg_closure:
         const Foreign.Marshal.Error.throwIfNeg_info;
         const 0;
 },
 ds_s8MsY_entry() //  [R1]
         { []
         }
     {offset
       c8MvG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8MvH; else goto c8MvI;
       c8MvH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8MvI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Error.throwIfNeg1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s8MsY_info" {
     ds_s8MsY_info:
         const ds_s8MsY_entry;
         const 1;
         const 4294967312;
         const S8Mu4_srt+24;
 },
 sat_s8Mt6_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c8MvW: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c8MvX; else goto c8MvY;
       c8MvX: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8MvY: // global
           I64[Sp - 32] = block_c8MvO_info;
           _s8MsW::P64 = P64[R1 + 5];
           _s8MsY::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 24] = _s8MsW::P64;
           P64[Sp - 16] = _s8MsY::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8Mt6_info" {
     sat_s8Mt6_info:
         const sat_s8Mt6_entry;
         const 2;
         const 4294967307;
         const 12884901903;
         const S8Mu4_srt+8;
 },
 _c8MvO() //  [R1]
         { []
         }
     {offset
       c8MvO: // global
           _s8MsW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8MvQ_info;
           R2 = _s8MsW::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = R1;
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8MvO_info" {
     block_c8MvO_info:
         const _c8MvO;
         const 3;
         const 4294967326;
         const S8Mu4_srt+8;
 },
 _c8MvQ() //  [R1]
         { []
         }
     {offset
       c8MvQ: // global
           _s8Mt4::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8MvT; else goto c8MvU;
       c8MvT: // global
           R1 = _s8Mt4::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8MvU: // global
           R3 = P64[Sp + 16];
           R2 = _s8Mt4::P64;
           Sp = Sp + 24;
           call Foreign.Marshal.Error.throwIf2_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8MvQ_info" {
     block_c8MvQ_info:
         const _c8MvQ;
         const 2;
         const 4294967326;
         const S8Mu4_srt+8;
 },
 Foreign.Marshal.Error.throwIfNeg_entry() //  [R2, R3]
         { []
         }
     {offset
       c8Mw6: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8Mwa; else goto c8Mw9;
       c8Mwa: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Error.throwIfNeg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Mw9: // global
           I64[Hp - 40] = ds_s8MsY_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s8Mt6_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 13;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIfNeg_info" {
     Foreign.Marshal.Error.throwIfNeg_info:
         const Foreign.Marshal.Error.throwIfNeg_entry;
         const 0;
         const 55834574862;
         const 8589934607;
         const S8Mu4_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.493340723 UTC

[section ""data" . Foreign.Marshal.Error.throwIfNull2_closure" {
     Foreign.Marshal.Error.throwIfNull2_closure:
         const Foreign.Marshal.Error.throwIfNull2_info;
         const 0;
 },
 sat_s8Mta_entry() //  [R1]
         { []
         }
     {offset
       c8MwQ: // global
           _s8Mta::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8MwR; else goto c8MwS;
       c8MwS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c8MwU; else goto c8MwT;
       c8MwU: // global
           HpAlloc = 56;
           goto c8MwR;
       c8MwR: // global
           R1 = _s8Mta::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8MwT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8Mta::P64;
           _s8Mt7::P64 = P64[_s8Mta::P64 + 16];
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = GHC.IO.Exception.UserError_closure+1;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           P64[Hp - 16] = _s8Mt7::P64;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8Mta_info" {
     sat_s8Mta_info:
         const sat_s8Mta_entry;
         const 1;
         const 4294967312;
         const S8Mu4_srt;
 },
 Foreign.Marshal.Error.throwIfNull2_entry() //  [R2]
         { []
         }
     {offset
       c8MwV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8MwZ; else goto c8MwY;
       c8MwZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Foreign.Marshal.Error.throwIfNull2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8MwY: // global
           I64[Hp - 16] = sat_s8Mta_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIfNull2_info" {
     Foreign.Marshal.Error.throwIfNull2_info:
         const Foreign.Marshal.Error.throwIfNull2_entry;
         const 0;
         const 141733920782;
         const 8589934597;
         const S8Mu4_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.500942003 UTC

[section ""data" . Foreign.Marshal.Error.throwIfNull1_closure" {
     Foreign.Marshal.Error.throwIfNull1_closure:
         const Foreign.Marshal.Error.throwIfNull1_info;
         const 0;
 },
 Foreign.Marshal.Error.throwIfNull1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8Mxu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8Mxv; else goto c8Mxw;
       c8Mxv: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Error.throwIfNull1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Mxw: // global
           I64[Sp - 16] = block_c8Mxp_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIfNull1_info" {
     Foreign.Marshal.Error.throwIfNull1_info:
         const Foreign.Marshal.Error.throwIfNull1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S8Mu4_srt+40;
 },
 _c8Mxp() //  [R1]
         { []
         }
     {offset
       c8Mxp: // global
           I64[Sp - 8] = block_c8Mxr_info;
           _s8Mtg::P64 = R1;
           R1 = R1;
           P64[Sp] = _s8Mtg::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8MxG; else goto c8Mxs;
       u8MxG: // global
           call _c8Mxr(R1) args: 0, res: 0, upd: 0;
       c8Mxs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Mxp_info" {
     block_c8Mxp_info:
         const _c8Mxp;
         const 1;
         const 4294967326;
         const S8Mu4_srt+40;
 },
 _c8Mxr() //  [R1]
         { []
         }
     {offset
       c8Mxr: // global
           if (I64[R1 + 7] == 0) goto c8MxF; else goto c8MxE;
       c8MxF: // global
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Foreign.Marshal.Error.throwIfNull2_entry(R2) args: 8, res: 0, upd: 8;
       c8MxE: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Mxr_info" {
     block_c8Mxr_info:
         const _c8Mxr;
         const 2;
         const 4294967326;
         const S8Mu4_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.508238296 UTC

[section ""data" . Foreign.Marshal.Error.throwIfNull_closure" {
     Foreign.Marshal.Error.throwIfNull_closure:
         const Foreign.Marshal.Error.throwIfNull_info;
         const 0;
 },
 Foreign.Marshal.Error.throwIfNull_entry() //  [R2, R3]
         { []
         }
     {offset
       c8My0: // global
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Error.throwIfNull1_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIfNull_info" {
     Foreign.Marshal.Error.throwIfNull_info:
         const Foreign.Marshal.Error.throwIfNull_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8Mu4_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.512045192 UTC

[section ""data" . Foreign.Marshal.Error.void1_closure" {
     Foreign.Marshal.Error.void1_closure:
         const Foreign.Marshal.Error.void1_info;
 },
 Foreign.Marshal.Error.void1_entry() //  [R2]
         { []
         }
     {offset
       c8Myd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8Mye; else goto c8Myf;
       c8Mye: // global
           R2 = R2;
           R1 = Foreign.Marshal.Error.void1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8Myf: // global
           I64[Sp - 8] = block_c8Myb_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.void1_info" {
     Foreign.Marshal.Error.void1_info:
         const Foreign.Marshal.Error.void1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c8Myb() //  []
         { []
         }
     {offset
       c8Myb: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Myb_info" {
     block_c8Myb_info:
         const _c8Myb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.517996829 UTC

[section ""data" . Foreign.Marshal.Error.void_closure" {
     Foreign.Marshal.Error.void_closure:
         const Foreign.Marshal.Error.void_info;
 },
 Foreign.Marshal.Error.void_entry() //  [R2]
         { []
         }
     {offset
       c8Myw: // global
           R2 = R2;
           call Foreign.Marshal.Error.void1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.void_info" {
     Foreign.Marshal.Error.void_info:
         const Foreign.Marshal.Error.void_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.522320755 UTC

[section ""data" . Foreign.Marshal.Error.throwIf_1_closure" {
     Foreign.Marshal.Error.throwIf_1_closure:
         const Foreign.Marshal.Error.throwIf_1_info;
         const 0;
 },
 Foreign.Marshal.Error.throwIf_1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8MyP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8MyQ; else goto c8MyR;
       c8MyQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Error.throwIf_1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8MyR: // global
           I64[Sp - 24] = block_c8MyH_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIf_1_info" {
     Foreign.Marshal.Error.throwIf_1_info:
         const Foreign.Marshal.Error.throwIf_1_entry;
         const 0;
         const 279172874254;
         const 17179869207;
         const S8Mu4_srt+8;
 },
 _c8MyH() //  [R1]
         { []
         }
     {offset
       c8MyH: // global
           I64[Sp] = block_c8MyJ_info;
           R2 = R1;
           _s8Mtv::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8Mtv::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8MyH_info" {
     block_c8MyH_info:
         const _c8MyH;
         const 2;
         const 4294967326;
         const S8Mu4_srt+8;
 },
 _c8MyJ() //  [R1]
         { []
         }
     {offset
       c8MyJ: // global
           if (R1 & 7 == 1) goto c8MyM; else goto c8MyN;
       c8MyM: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8MyN: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Foreign.Marshal.Error.throwIf2_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8MyJ_info" {
     block_c8MyJ_info:
         const _c8MyJ;
         const 2;
         const 4294967326;
         const S8Mu4_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.530627104 UTC

[section ""data" . Foreign.Marshal.Error.throwIf__closure" {
     Foreign.Marshal.Error.throwIf__closure:
         const Foreign.Marshal.Error.throwIf__info;
         const 0;
 },
 Foreign.Marshal.Error.throwIf__entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Mzk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Foreign.Marshal.Error.throwIf_1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIf__info" {
     Foreign.Marshal.Error.throwIf__info:
         const Foreign.Marshal.Error.throwIf__entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S8Mu4_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.53670146 UTC

[section ""data" . Foreign.Marshal.Error.throwIfNeg__closure" {
     Foreign.Marshal.Error.throwIfNeg__closure:
         const Foreign.Marshal.Error.throwIfNeg__info;
         const 0;
 },
 ds_s8MtA_entry() //  [R1]
         { []
         }
     {offset
       c8Mzz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8MzA; else goto c8MzB;
       c8MzA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8MzB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Foreign.Marshal.Error.throwIfNeg1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s8MtA_info" {
     ds_s8MtA_info:
         const ds_s8MtA_entry;
         const 1;
         const 4294967312;
         const S8Mu4_srt+24;
 },
 sat_s8MtJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c8MzP: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c8MzQ; else goto c8MzR;
       c8MzQ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8MzR: // global
           I64[Sp - 32] = block_c8MzH_info;
           _s8Mty::P64 = P64[R1 + 5];
           _s8MtA::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 24] = _s8Mty::P64;
           P64[Sp - 16] = _s8MtA::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8MtJ_info" {
     sat_s8MtJ_info:
         const sat_s8MtJ_entry;
         const 2;
         const 4294967307;
         const 12884901903;
         const S8Mu4_srt+8;
 },
 _c8MzH() //  [R1]
         { []
         }
     {offset
       c8MzH: // global
           _s8Mty::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8MzJ_info;
           R2 = _s8Mty::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = R1;
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8MzH_info" {
     block_c8MzH_info:
         const _c8MzH;
         const 3;
         const 4294967326;
         const S8Mu4_srt+8;
 },
 _c8MzJ() //  [R1]
         { []
         }
     {offset
       c8MzJ: // global
           if (R1 & 7 == 1) goto c8MzM; else goto c8MzN;
       c8MzM: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8MzN: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Foreign.Marshal.Error.throwIf2_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8MzJ_info" {
     block_c8MzJ_info:
         const _c8MzJ;
         const 2;
         const 4294967326;
         const S8Mu4_srt+8;
 },
 Foreign.Marshal.Error.throwIfNeg__entry() //  [R2, R3]
         { []
         }
     {offset
       c8MzZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8MA3; else goto c8MA2;
       c8MA3: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Foreign.Marshal.Error.throwIfNeg__closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8MA2: // global
           I64[Hp - 40] = ds_s8MtA_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s8MtJ_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 13;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.Marshal.Error.throwIfNeg__info" {
     Foreign.Marshal.Error.throwIfNeg__info:
         const Foreign.Marshal.Error.throwIfNeg__entry;
         const 0;
         const 571230650382;
         const 8589934607;
         const S8Mu4_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.547792205 UTC

[section ""cstring" . Foreign.Marshal.Error.$trModule4_bytes" {
     Foreign.Marshal.Error.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.550008936 UTC

[section ""data" . Foreign.Marshal.Error.$trModule3_closure" {
     Foreign.Marshal.Error.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Error.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.55177979 UTC

[section ""cstring" . Foreign.Marshal.Error.$trModule2_bytes" {
     Foreign.Marshal.Error.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,77,97,114,115,104,97,108,46,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.55356339 UTC

[section ""data" . Foreign.Marshal.Error.$trModule1_closure" {
     Foreign.Marshal.Error.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Marshal.Error.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.555452211 UTC

[section ""data" . Foreign.Marshal.Error.$trModule_closure" {
     Foreign.Marshal.Error.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.Marshal.Error.$trModule3_closure+1;
         const Foreign.Marshal.Error.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:56.557751282 UTC

[section ""relreadonly" . S8Mu4_srt" {
     S8Mu4_srt:
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const Foreign.Marshal.Error.throwIf2_closure;
         const Foreign.Marshal.Error.throwIf1_closure;
         const Foreign.Marshal.Error.throwIfNeg1_closure;
         const Foreign.Marshal.Error.throwIfNeg_closure;
         const Foreign.Marshal.Error.throwIfNull2_closure;
         const Foreign.Marshal.Error.throwIfNull1_closure;
         const Foreign.Marshal.Error.throwIf_1_closure;
         const Foreign.Marshal.Error.throwIfNeg__closure;
 }]

