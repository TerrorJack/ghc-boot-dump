
==================== Pre unarise: ====================
2018-03-16 15:59:45.805306933 UTC

Foreign.Ptr.$fShowIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.showSignedInt
                                    GHC.Show.$fShowInt_$cshow
                                    GHC.Show.$fShowInt_$cshowList];

Foreign.Ptr.$fReadIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read Foreign.Ptr.IntPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadInt_$creadsPrec
                                    GHC.Read.$fReadInt_$creadList
                                    GHC.Read.$fReadInt1
                                    GHC.Read.$fReadInt_$creadListPrec];

Foreign.Ptr.$fBoundedIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Base.minInt
                                       GHC.Base.maxInt];

Foreign.Ptr.$fStorableIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Foreign.Storable.Storable Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Foreign.Storable.C:Storable! [Foreign.Storable.$fStorableInt_$calignment
                                                Foreign.Storable.$fStorableInt_$calignment
                                                GHC.Storable.readIntOffPtr1
                                                GHC.Storable.writeIntOffPtr1
                                                Foreign.Storable.$fStorableInt4
                                                Foreign.Storable.$fStorableInt3
                                                Foreign.Storable.$fStorableInt2
                                                Foreign.Storable.$fStorableInt1];

Foreign.Ptr.$fEnumIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum Foreign.Ptr.IntPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Enum.$fEnumInt_$csucc
                                    GHC.Enum.$fEnumInt_$cpred
                                    GHC.Enum.$fEnumInt_$cfromEnum
                                    GHC.Enum.$fEnumInt_$cfromEnum
                                    GHC.Enum.$fEnumInt_$cenumFrom
                                    GHC.Enum.$fEnumInt_$cenumFromThen
                                    GHC.Enum.$fEnumInt_$cenumFromTo
                                    GHC.Enum.$fEnumInt_$cenumFromThenTo];

Foreign.Ptr.$fNumIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Num.$fNumInt_$c+
                                  GHC.Num.$fNumInt_$c-
                                  GHC.Num.$fNumInt_$c*
                                  GHC.Num.$fNumInt_$cnegate
                                  GHC.Num.$fNumInt_$cabs
                                  GHC.Num.$fNumInt_$csignum
                                  GHC.Num.$fNumInt_$cfromInteger];

Foreign.Ptr.$fEqIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Classes.eqInt
                                     GHC.Classes.neInt];

Foreign.Ptr.$fOrdIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Foreign.Ptr.$fEqIntPtr
                                      GHC.Classes.compareInt
                                      GHC.Classes.ltInt
                                      GHC.Classes.leInt
                                      GHC.Classes.gtInt
                                      GHC.Classes.geInt
                                      GHC.Classes.$fOrdInt_$cmax
                                      GHC.Classes.$fOrdInt_$cmin];

Foreign.Ptr.$fRealIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real Foreign.Ptr.IntPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [Foreign.Ptr.$fNumIntPtr
                                    Foreign.Ptr.$fOrdIntPtr
                                    GHC.Real.$fEnumRatio_$ctoRational];

Foreign.Ptr.$fIntegralIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral Foreign.Ptr.IntPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [Foreign.Ptr.$fRealIntPtr
                                        Foreign.Ptr.$fEnumIntPtr
                                        GHC.Real.$fIntegralInt_$cquot
                                        GHC.Real.$fIntegralInt_$crem
                                        GHC.Real.$fIntegralInt_$cdiv
                                        GHC.Real.$fIntegralInt_$cmod
                                        GHC.Real.$fIntegralInt_$cquotRem
                                        GHC.Real.$fIntegralInt_$cdivMod
                                        GHC.Real.$fIntegralInt_$ctoInteger];

Foreign.Ptr.$fBitsIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [Foreign.Ptr.$fEqIntPtr
                                     Data.Bits.$fBitsInt_$c.&.
                                     Data.Bits.$fBitsInt_$c.|.
                                     Data.Bits.$fBitsInt_$cxor
                                     Data.Bits.$fBitsInt_$ccomplement
                                     Data.Bits.$fBitsInt_$cshift
                                     Data.Bits.$fBitsInt_$crotate
                                     Data.Bits.$fBitsBool2
                                     Data.Bits.$fBitsInt_$cbit
                                     Data.Bits.$fBitsInt_$csetBit
                                     Data.Bits.$fBitsInt_$cclearBit
                                     Data.Bits.$fBitsInt_$ccomplementBit
                                     Data.Bits.$fBitsInt_$ctestBit
                                     Data.Bits.$fBitsInt_$cbitSizeMaybe
                                     Data.Bits.$fBitsInt_$cfiniteBitSize
                                     Data.Bits.$fBitsInt_$cisSigned
                                     Data.Bits.$fBitsInt_$cshiftL
                                     Data.Bits.$fBitsInt_$cunsafeShiftL
                                     Data.Bits.$fBitsInt_$cshiftR
                                     Data.Bits.$fBitsInt_$cunsafeShiftR
                                     Data.Bits.$fBitsInt_$crotateL
                                     Data.Bits.$fBitsInt_$crotateR
                                     Data.Bits.$fBitsInt_$cpopCount];

Foreign.Ptr.$fFiniteBitsIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [Foreign.Ptr.$fBitsIntPtr
                                           Data.Bits.$fBitsInt_$cfiniteBitSize
                                           Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros
                                           Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros];

Foreign.Ptr.$fShowWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowWord_$cshowsPrec
                                    GHC.Show.$fShowWord_$cshow
                                    GHC.Show.$fShowWord_$cshowList];

Foreign.Ptr.$fReadWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read Foreign.Ptr.WordPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord_$creadsPrec
                                    GHC.Read.$fReadWord_$creadList
                                    GHC.Read.$fReadWord3
                                    GHC.Read.$fReadWord1];

Foreign.Ptr.$fBoundedWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Enum.$fBoundedWord_$cminBound
                                       GHC.Enum.$fBoundedWord_$cmaxBound];

Foreign.Ptr.$fStorableWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Foreign.Storable.Storable Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Foreign.Storable.C:Storable! [Foreign.Storable.$fStorableWord_$calignment
                                                Foreign.Storable.$fStorableWord_$calignment
                                                GHC.Storable.readWordOffPtr1
                                                GHC.Storable.writeWordOffPtr1
                                                Foreign.Storable.$fStorableWord4
                                                Foreign.Storable.$fStorableWord3
                                                Foreign.Storable.$fStorableWord2
                                                Foreign.Storable.$fStorableWord1];

Foreign.Ptr.$fEnumWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum Foreign.Ptr.WordPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Enum.$fEnumWord_$csucc
                                    GHC.Enum.$fEnumWord_$cpred
                                    GHC.Enum.$fEnumWord_$ctoEnum
                                    GHC.Enum.$fEnumWord_$cfromEnum
                                    GHC.Enum.$fEnumWord_$cenumFrom
                                    GHC.Enum.$fEnumWord_$cenumFromThen
                                    GHC.Enum.$fEnumWord_$cenumFromTo
                                    GHC.Enum.$fEnumWord_$cenumFromThenTo];

Foreign.Ptr.$fNumWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Num.$fNumWord_$c+
                                  GHC.Num.$fNumWord_$c-
                                  GHC.Num.$fNumWord_$c*
                                  GHC.Num.$fNumWord_$cnegate
                                  GHC.Num.$fNumWord_$cabs
                                  GHC.Num.$fNumWord_$csignum
                                  GHC.Num.$fNumWord_$cfromInteger];

Foreign.Ptr.$fEqWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Classes.eqWord
                                     GHC.Classes.neWord];

Foreign.Ptr.$fOrdWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Foreign.Ptr.$fEqWordPtr
                                      GHC.Classes.compareWord
                                      GHC.Classes.ltWord
                                      GHC.Classes.leWord
                                      GHC.Classes.gtWord
                                      GHC.Classes.geWord
                                      GHC.Classes.$fOrdWord_$cmax
                                      GHC.Classes.$fOrdWord_$cmin];

Foreign.Ptr.$fRealWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real Foreign.Ptr.WordPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [Foreign.Ptr.$fNumWordPtr
                                    Foreign.Ptr.$fOrdWordPtr
                                    GHC.Real.$fRealWord_$ctoRational];

Foreign.Ptr.$fIntegralWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral Foreign.Ptr.WordPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [Foreign.Ptr.$fRealWordPtr
                                        Foreign.Ptr.$fEnumWordPtr
                                        GHC.Real.$fIntegralWord_$cquot
                                        GHC.Real.$fIntegralWord_$crem
                                        GHC.Real.$fIntegralWord_$cquot
                                        GHC.Real.$fIntegralWord_$crem
                                        GHC.Real.$fIntegralWord_$cquotRem
                                        GHC.Real.$fIntegralWord_$cdivMod
                                        GHC.Real.$fIntegralWord_$ctoInteger];

Foreign.Ptr.$fBitsWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [Foreign.Ptr.$fEqWordPtr
                                     Data.Bits.$fBitsWord_$c.&.
                                     Data.Bits.$fBitsWord_$c.|.
                                     Data.Bits.$fBitsWord_$cxor
                                     Data.Bits.$fBitsWord_$ccomplement
                                     Data.Bits.$fBitsWord_$cshift
                                     Data.Bits.$fBitsWord_$crotate
                                     Data.Bits.$fBitsWord1
                                     Data.Bits.$fBitsWord_$cbit
                                     Data.Bits.$fBitsWord_$csetBit
                                     Data.Bits.$fBitsWord_$cclearBit
                                     Data.Bits.$fBitsWord_$ccomplementBit
                                     Data.Bits.$fBitsWord_$ctestBit
                                     Data.Bits.$fBitsWord_$cbitSizeMaybe
                                     Data.Bits.$fBitsWord_$cfiniteBitSize
                                     Data.Bits.$fBitsWord_$cisSigned
                                     Data.Bits.$fBitsWord_$cshiftL
                                     Data.Bits.$fBitsWord_$cunsafeShiftL
                                     Data.Bits.$fBitsWord_$cshiftR
                                     Data.Bits.$fBitsWord_$cunsafeShiftR
                                     Data.Bits.$fBitsWord_$crotateL
                                     Data.Bits.$fBitsWord_$crotateR
                                     Data.Bits.$fBitsWord_$cpopCount];

Foreign.Ptr.$fFiniteBitsWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [Foreign.Ptr.$fBitsWordPtr
                                           Data.Bits.$fBitsWord_$cfiniteBitSize
                                           Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros
                                           Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros];

Foreign.Ptr.ptrToWordPtr
  :: forall a. GHC.Ptr.Ptr a -> Foreign.Ptr.WordPtr
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4RLz]
        case ds_s4RLz of {
          GHC.Ptr.Ptr a#_s4RLB [Occ=Once] ->
              case addr2Int# [a#_s4RLB] of sat_s4RLC {
                __DEFAULT ->
                    case int2Word# [sat_s4RLC] of sat_s4RLD {
                      __DEFAULT -> GHC.Types.W# [sat_s4RLD];
                    };
              };
        };

Foreign.Ptr.wordPtrToPtr
  :: forall a. Foreign.Ptr.WordPtr -> GHC.Ptr.Ptr a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4RLE]
        case ds_s4RLE of {
          GHC.Types.W# w#_s4RLG [Occ=Once] ->
              case word2Int# [w#_s4RLG] of sat_s4RLH {
                __DEFAULT ->
                    case int2Addr# [sat_s4RLH] of sat_s4RLI {
                      __DEFAULT -> GHC.Ptr.Ptr [sat_s4RLI];
                    };
              };
        };

Foreign.Ptr.ptrToIntPtr
  :: forall a. GHC.Ptr.Ptr a -> Foreign.Ptr.IntPtr
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4RLJ]
        case ds_s4RLJ of {
          GHC.Ptr.Ptr a#_s4RLL [Occ=Once] ->
              case addr2Int# [a#_s4RLL] of sat_s4RLM {
                __DEFAULT -> GHC.Types.I# [sat_s4RLM];
              };
        };

Foreign.Ptr.intPtrToPtr
  :: forall a. Foreign.Ptr.IntPtr -> GHC.Ptr.Ptr a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4RLN]
        case ds_s4RLN of {
          GHC.Types.I# i#_s4RLP [Occ=Once] ->
              case int2Addr# [i#_s4RLP] of sat_s4RLQ {
                __DEFAULT -> GHC.Ptr.Ptr [sat_s4RLQ];
              };
        };

Foreign.Ptr.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Foreign.Ptr.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$trModule4];

Foreign.Ptr.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Foreign.Ptr"#;

Foreign.Ptr.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$trModule2];

Foreign.Ptr.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Foreign.Ptr.$trModule3
                                     Foreign.Ptr.$trModule1];

$krep_r4RLt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord
                                              GHC.Types.[]];

$krep1_r4RLu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

Foreign.Ptr.$tcWordPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WordPtr"#;

Foreign.Ptr.$tcWordPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$tcWordPtr2];

Foreign.Ptr.$tcWordPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10827112719629138107##
                                    3588783739676187441##
                                    Foreign.Ptr.$trModule
                                    Foreign.Ptr.$tcWordPtr1
                                    0#
                                    GHC.Types.krep$*];

$krep2_r4RLv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.Ptr.$tcWordPtr
                                              GHC.Types.[]];

Foreign.Ptr.$tc'WordPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4RLt $krep2_r4RLv];

Foreign.Ptr.$tc'WordPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'WordPtr"#;

Foreign.Ptr.$tc'WordPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$tc'WordPtr3];

Foreign.Ptr.$tc'WordPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15588862172907192371##
                                    13878995573910308719##
                                    Foreign.Ptr.$trModule
                                    Foreign.Ptr.$tc'WordPtr2
                                    0#
                                    Foreign.Ptr.$tc'WordPtr1];

Foreign.Ptr.$tcIntPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IntPtr"#;

Foreign.Ptr.$tcIntPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$tcIntPtr2];

Foreign.Ptr.$tcIntPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12538429555661790394##
                                    9943980142794044772##
                                    Foreign.Ptr.$trModule
                                    Foreign.Ptr.$tcIntPtr1
                                    0#
                                    GHC.Types.krep$*];

$krep3_r4RLw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.Ptr.$tcIntPtr
                                              GHC.Types.[]];

Foreign.Ptr.$tc'IntPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r4RLu $krep3_r4RLw];

Foreign.Ptr.$tc'IntPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'IntPtr"#;

Foreign.Ptr.$tc'IntPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$tc'IntPtr3];

Foreign.Ptr.$tc'IntPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17038100807295602145##
                                    4458611784149765752##
                                    Foreign.Ptr.$trModule
                                    Foreign.Ptr.$tc'IntPtr2
                                    0#
                                    Foreign.Ptr.$tc'IntPtr1];

freeHaskellFunPtr1_r4RLx
  :: forall a.
     GHC.Ptr.FunPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_s4RLR eta_s4RLS]
        case ds_s4RLR of {
          GHC.Ptr.FunPtr ds2_s4RLU [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ds2_s4RLU eta_s4RLS] of {
                Unit# ds3_s4RLX [Occ=Once] -> (#,#) [ds3_s4RLX GHC.Tuple.()];
              };
        };

Foreign.Ptr.freeHaskellFunPtr
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] freeHaskellFunPtr1_r4RLx eta_B2 eta_B1;


==================== STG syntax: ====================
2018-03-16 15:59:45.810821271 UTC

Foreign.Ptr.$fShowIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.showSignedInt
                                    GHC.Show.$fShowInt_$cshow
                                    GHC.Show.$fShowInt_$cshowList];

Foreign.Ptr.$fReadIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read Foreign.Ptr.IntPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadInt_$creadsPrec
                                    GHC.Read.$fReadInt_$creadList
                                    GHC.Read.$fReadInt1
                                    GHC.Read.$fReadInt_$creadListPrec];

Foreign.Ptr.$fBoundedIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Base.minInt
                                       GHC.Base.maxInt];

Foreign.Ptr.$fStorableIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Foreign.Storable.Storable Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Foreign.Storable.C:Storable! [Foreign.Storable.$fStorableInt_$calignment
                                                Foreign.Storable.$fStorableInt_$calignment
                                                GHC.Storable.readIntOffPtr1
                                                GHC.Storable.writeIntOffPtr1
                                                Foreign.Storable.$fStorableInt4
                                                Foreign.Storable.$fStorableInt3
                                                Foreign.Storable.$fStorableInt2
                                                Foreign.Storable.$fStorableInt1];

Foreign.Ptr.$fEnumIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum Foreign.Ptr.IntPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Enum.$fEnumInt_$csucc
                                    GHC.Enum.$fEnumInt_$cpred
                                    GHC.Enum.$fEnumInt_$cfromEnum
                                    GHC.Enum.$fEnumInt_$cfromEnum
                                    GHC.Enum.$fEnumInt_$cenumFrom
                                    GHC.Enum.$fEnumInt_$cenumFromThen
                                    GHC.Enum.$fEnumInt_$cenumFromTo
                                    GHC.Enum.$fEnumInt_$cenumFromThenTo];

Foreign.Ptr.$fNumIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Num.$fNumInt_$c+
                                  GHC.Num.$fNumInt_$c-
                                  GHC.Num.$fNumInt_$c*
                                  GHC.Num.$fNumInt_$cnegate
                                  GHC.Num.$fNumInt_$cabs
                                  GHC.Num.$fNumInt_$csignum
                                  GHC.Num.$fNumInt_$cfromInteger];

Foreign.Ptr.$fEqIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Classes.eqInt
                                     GHC.Classes.neInt];

Foreign.Ptr.$fOrdIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Foreign.Ptr.$fEqIntPtr
                                      GHC.Classes.compareInt
                                      GHC.Classes.ltInt
                                      GHC.Classes.leInt
                                      GHC.Classes.gtInt
                                      GHC.Classes.geInt
                                      GHC.Classes.$fOrdInt_$cmax
                                      GHC.Classes.$fOrdInt_$cmin];

Foreign.Ptr.$fRealIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real Foreign.Ptr.IntPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [Foreign.Ptr.$fNumIntPtr
                                    Foreign.Ptr.$fOrdIntPtr
                                    GHC.Real.$fEnumRatio_$ctoRational];

Foreign.Ptr.$fIntegralIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral Foreign.Ptr.IntPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [Foreign.Ptr.$fRealIntPtr
                                        Foreign.Ptr.$fEnumIntPtr
                                        GHC.Real.$fIntegralInt_$cquot
                                        GHC.Real.$fIntegralInt_$crem
                                        GHC.Real.$fIntegralInt_$cdiv
                                        GHC.Real.$fIntegralInt_$cmod
                                        GHC.Real.$fIntegralInt_$cquotRem
                                        GHC.Real.$fIntegralInt_$cdivMod
                                        GHC.Real.$fIntegralInt_$ctoInteger];

Foreign.Ptr.$fBitsIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [Foreign.Ptr.$fEqIntPtr
                                     Data.Bits.$fBitsInt_$c.&.
                                     Data.Bits.$fBitsInt_$c.|.
                                     Data.Bits.$fBitsInt_$cxor
                                     Data.Bits.$fBitsInt_$ccomplement
                                     Data.Bits.$fBitsInt_$cshift
                                     Data.Bits.$fBitsInt_$crotate
                                     Data.Bits.$fBitsBool2
                                     Data.Bits.$fBitsInt_$cbit
                                     Data.Bits.$fBitsInt_$csetBit
                                     Data.Bits.$fBitsInt_$cclearBit
                                     Data.Bits.$fBitsInt_$ccomplementBit
                                     Data.Bits.$fBitsInt_$ctestBit
                                     Data.Bits.$fBitsInt_$cbitSizeMaybe
                                     Data.Bits.$fBitsInt_$cfiniteBitSize
                                     Data.Bits.$fBitsInt_$cisSigned
                                     Data.Bits.$fBitsInt_$cshiftL
                                     Data.Bits.$fBitsInt_$cunsafeShiftL
                                     Data.Bits.$fBitsInt_$cshiftR
                                     Data.Bits.$fBitsInt_$cunsafeShiftR
                                     Data.Bits.$fBitsInt_$crotateL
                                     Data.Bits.$fBitsInt_$crotateR
                                     Data.Bits.$fBitsInt_$cpopCount];

Foreign.Ptr.$fFiniteBitsIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [Foreign.Ptr.$fBitsIntPtr
                                           Data.Bits.$fBitsInt_$cfiniteBitSize
                                           Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros
                                           Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros];

Foreign.Ptr.$fShowWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowWord_$cshowsPrec
                                    GHC.Show.$fShowWord_$cshow
                                    GHC.Show.$fShowWord_$cshowList];

Foreign.Ptr.$fReadWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read Foreign.Ptr.WordPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord_$creadsPrec
                                    GHC.Read.$fReadWord_$creadList
                                    GHC.Read.$fReadWord3
                                    GHC.Read.$fReadWord1];

Foreign.Ptr.$fBoundedWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Enum.$fBoundedWord_$cminBound
                                       GHC.Enum.$fBoundedWord_$cmaxBound];

Foreign.Ptr.$fStorableWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Foreign.Storable.Storable Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Foreign.Storable.C:Storable! [Foreign.Storable.$fStorableWord_$calignment
                                                Foreign.Storable.$fStorableWord_$calignment
                                                GHC.Storable.readWordOffPtr1
                                                GHC.Storable.writeWordOffPtr1
                                                Foreign.Storable.$fStorableWord4
                                                Foreign.Storable.$fStorableWord3
                                                Foreign.Storable.$fStorableWord2
                                                Foreign.Storable.$fStorableWord1];

Foreign.Ptr.$fEnumWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum Foreign.Ptr.WordPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Enum.$fEnumWord_$csucc
                                    GHC.Enum.$fEnumWord_$cpred
                                    GHC.Enum.$fEnumWord_$ctoEnum
                                    GHC.Enum.$fEnumWord_$cfromEnum
                                    GHC.Enum.$fEnumWord_$cenumFrom
                                    GHC.Enum.$fEnumWord_$cenumFromThen
                                    GHC.Enum.$fEnumWord_$cenumFromTo
                                    GHC.Enum.$fEnumWord_$cenumFromThenTo];

Foreign.Ptr.$fNumWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Num.$fNumWord_$c+
                                  GHC.Num.$fNumWord_$c-
                                  GHC.Num.$fNumWord_$c*
                                  GHC.Num.$fNumWord_$cnegate
                                  GHC.Num.$fNumWord_$cabs
                                  GHC.Num.$fNumWord_$csignum
                                  GHC.Num.$fNumWord_$cfromInteger];

Foreign.Ptr.$fEqWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Classes.eqWord
                                     GHC.Classes.neWord];

Foreign.Ptr.$fOrdWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Foreign.Ptr.$fEqWordPtr
                                      GHC.Classes.compareWord
                                      GHC.Classes.ltWord
                                      GHC.Classes.leWord
                                      GHC.Classes.gtWord
                                      GHC.Classes.geWord
                                      GHC.Classes.$fOrdWord_$cmax
                                      GHC.Classes.$fOrdWord_$cmin];

Foreign.Ptr.$fRealWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real Foreign.Ptr.WordPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [Foreign.Ptr.$fNumWordPtr
                                    Foreign.Ptr.$fOrdWordPtr
                                    GHC.Real.$fRealWord_$ctoRational];

Foreign.Ptr.$fIntegralWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral Foreign.Ptr.WordPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [Foreign.Ptr.$fRealWordPtr
                                        Foreign.Ptr.$fEnumWordPtr
                                        GHC.Real.$fIntegralWord_$cquot
                                        GHC.Real.$fIntegralWord_$crem
                                        GHC.Real.$fIntegralWord_$cquot
                                        GHC.Real.$fIntegralWord_$crem
                                        GHC.Real.$fIntegralWord_$cquotRem
                                        GHC.Real.$fIntegralWord_$cdivMod
                                        GHC.Real.$fIntegralWord_$ctoInteger];

Foreign.Ptr.$fBitsWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [Foreign.Ptr.$fEqWordPtr
                                     Data.Bits.$fBitsWord_$c.&.
                                     Data.Bits.$fBitsWord_$c.|.
                                     Data.Bits.$fBitsWord_$cxor
                                     Data.Bits.$fBitsWord_$ccomplement
                                     Data.Bits.$fBitsWord_$cshift
                                     Data.Bits.$fBitsWord_$crotate
                                     Data.Bits.$fBitsWord1
                                     Data.Bits.$fBitsWord_$cbit
                                     Data.Bits.$fBitsWord_$csetBit
                                     Data.Bits.$fBitsWord_$cclearBit
                                     Data.Bits.$fBitsWord_$ccomplementBit
                                     Data.Bits.$fBitsWord_$ctestBit
                                     Data.Bits.$fBitsWord_$cbitSizeMaybe
                                     Data.Bits.$fBitsWord_$cfiniteBitSize
                                     Data.Bits.$fBitsWord_$cisSigned
                                     Data.Bits.$fBitsWord_$cshiftL
                                     Data.Bits.$fBitsWord_$cunsafeShiftL
                                     Data.Bits.$fBitsWord_$cshiftR
                                     Data.Bits.$fBitsWord_$cunsafeShiftR
                                     Data.Bits.$fBitsWord_$crotateL
                                     Data.Bits.$fBitsWord_$crotateR
                                     Data.Bits.$fBitsWord_$cpopCount];

Foreign.Ptr.$fFiniteBitsWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [Foreign.Ptr.$fBitsWordPtr
                                           Data.Bits.$fBitsWord_$cfiniteBitSize
                                           Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros
                                           Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros];

Foreign.Ptr.ptrToWordPtr
  :: forall a. GHC.Ptr.Ptr a -> Foreign.Ptr.WordPtr
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4RLz]
        case ds_s4RLz of {
          GHC.Ptr.Ptr a#_s4RLB [Occ=Once] ->
              case addr2Int# [a#_s4RLB] of sat_s4RLC {
                __DEFAULT ->
                    case int2Word# [sat_s4RLC] of sat_s4RLD {
                      __DEFAULT -> GHC.Types.W# [sat_s4RLD];
                    };
              };
        };

Foreign.Ptr.wordPtrToPtr
  :: forall a. Foreign.Ptr.WordPtr -> GHC.Ptr.Ptr a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4RLE]
        case ds_s4RLE of {
          GHC.Types.W# w#_s4RLG [Occ=Once] ->
              case word2Int# [w#_s4RLG] of sat_s4RLH {
                __DEFAULT ->
                    case int2Addr# [sat_s4RLH] of sat_s4RLI {
                      __DEFAULT -> GHC.Ptr.Ptr [sat_s4RLI];
                    };
              };
        };

Foreign.Ptr.ptrToIntPtr
  :: forall a. GHC.Ptr.Ptr a -> Foreign.Ptr.IntPtr
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4RLJ]
        case ds_s4RLJ of {
          GHC.Ptr.Ptr a#_s4RLL [Occ=Once] ->
              case addr2Int# [a#_s4RLL] of sat_s4RLM {
                __DEFAULT -> GHC.Types.I# [sat_s4RLM];
              };
        };

Foreign.Ptr.intPtrToPtr
  :: forall a. Foreign.Ptr.IntPtr -> GHC.Ptr.Ptr a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4RLN]
        case ds_s4RLN of {
          GHC.Types.I# i#_s4RLP [Occ=Once] ->
              case int2Addr# [i#_s4RLP] of sat_s4RLQ {
                __DEFAULT -> GHC.Ptr.Ptr [sat_s4RLQ];
              };
        };

Foreign.Ptr.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Foreign.Ptr.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$trModule4];

Foreign.Ptr.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Foreign.Ptr"#;

Foreign.Ptr.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$trModule2];

Foreign.Ptr.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Foreign.Ptr.$trModule3
                                     Foreign.Ptr.$trModule1];

$krep_r4RLt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord
                                              GHC.Types.[]];

$krep1_r4RLu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

Foreign.Ptr.$tcWordPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WordPtr"#;

Foreign.Ptr.$tcWordPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$tcWordPtr2];

Foreign.Ptr.$tcWordPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10827112719629138107##
                                    3588783739676187441##
                                    Foreign.Ptr.$trModule
                                    Foreign.Ptr.$tcWordPtr1
                                    0#
                                    GHC.Types.krep$*];

$krep2_r4RLv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.Ptr.$tcWordPtr
                                              GHC.Types.[]];

Foreign.Ptr.$tc'WordPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4RLt $krep2_r4RLv];

Foreign.Ptr.$tc'WordPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'WordPtr"#;

Foreign.Ptr.$tc'WordPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$tc'WordPtr3];

Foreign.Ptr.$tc'WordPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15588862172907192371##
                                    13878995573910308719##
                                    Foreign.Ptr.$trModule
                                    Foreign.Ptr.$tc'WordPtr2
                                    0#
                                    Foreign.Ptr.$tc'WordPtr1];

Foreign.Ptr.$tcIntPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IntPtr"#;

Foreign.Ptr.$tcIntPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$tcIntPtr2];

Foreign.Ptr.$tcIntPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12538429555661790394##
                                    9943980142794044772##
                                    Foreign.Ptr.$trModule
                                    Foreign.Ptr.$tcIntPtr1
                                    0#
                                    GHC.Types.krep$*];

$krep3_r4RLw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.Ptr.$tcIntPtr
                                              GHC.Types.[]];

Foreign.Ptr.$tc'IntPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r4RLu $krep3_r4RLw];

Foreign.Ptr.$tc'IntPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'IntPtr"#;

Foreign.Ptr.$tc'IntPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$tc'IntPtr3];

Foreign.Ptr.$tc'IntPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17038100807295602145##
                                    4458611784149765752##
                                    Foreign.Ptr.$trModule
                                    Foreign.Ptr.$tc'IntPtr2
                                    0#
                                    Foreign.Ptr.$tc'IntPtr1];

freeHaskellFunPtr1_r4RLx
  :: forall a.
     GHC.Ptr.FunPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_s4RLR void_0E]
        case ds_s4RLR of {
          GHC.Ptr.FunPtr ds2_s4RLU [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ds2_s4RLU GHC.Prim.void#] of {
                (##) -> Unit# [GHC.Tuple.()];
              };
        };

Foreign.Ptr.freeHaskellFunPtr
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        freeHaskellFunPtr1_r4RLx eta_B2 GHC.Prim.void#;


==================== Pre unarise: ====================
2018-03-16 15:59:46.461155835 UTC

Foreign.Ptr.$fShowIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.showSignedInt
                                    GHC.Show.$fShowInt_$cshow
                                    GHC.Show.$fShowInt_$cshowList];

Foreign.Ptr.$fReadIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read Foreign.Ptr.IntPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadInt_$creadsPrec
                                    GHC.Read.$fReadInt_$creadList
                                    GHC.Read.$fReadInt1
                                    GHC.Read.$fReadInt_$creadListPrec];

Foreign.Ptr.$fBoundedIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Base.minInt
                                       GHC.Base.maxInt];

Foreign.Ptr.$fStorableIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Foreign.Storable.Storable Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Foreign.Storable.C:Storable! [Foreign.Storable.$fStorableInt_$calignment
                                                Foreign.Storable.$fStorableInt_$calignment
                                                GHC.Storable.readIntOffPtr1
                                                GHC.Storable.writeIntOffPtr1
                                                Foreign.Storable.$fStorableInt4
                                                Foreign.Storable.$fStorableInt3
                                                Foreign.Storable.$fStorableInt2
                                                Foreign.Storable.$fStorableInt1];

Foreign.Ptr.$fEnumIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum Foreign.Ptr.IntPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Enum.$fEnumInt_$csucc
                                    GHC.Enum.$fEnumInt_$cpred
                                    GHC.Enum.$fEnumInt_$cfromEnum
                                    GHC.Enum.$fEnumInt_$cfromEnum
                                    GHC.Enum.$fEnumInt_$cenumFrom
                                    GHC.Enum.$fEnumInt_$cenumFromThen
                                    GHC.Enum.$fEnumInt_$cenumFromTo
                                    GHC.Enum.$fEnumInt_$cenumFromThenTo];

Foreign.Ptr.$fNumIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Num.$fNumInt_$c+
                                  GHC.Num.$fNumInt_$c-
                                  GHC.Num.$fNumInt_$c*
                                  GHC.Num.$fNumInt_$cnegate
                                  GHC.Num.$fNumInt_$cabs
                                  GHC.Num.$fNumInt_$csignum
                                  GHC.Num.$fNumInt_$cfromInteger];

Foreign.Ptr.$fEqIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Classes.eqInt
                                     GHC.Classes.neInt];

Foreign.Ptr.$fOrdIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Foreign.Ptr.$fEqIntPtr
                                      GHC.Classes.compareInt
                                      GHC.Classes.ltInt
                                      GHC.Classes.leInt
                                      GHC.Classes.gtInt
                                      GHC.Classes.geInt
                                      GHC.Classes.$fOrdInt_$cmax
                                      GHC.Classes.$fOrdInt_$cmin];

Foreign.Ptr.$fRealIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real Foreign.Ptr.IntPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [Foreign.Ptr.$fNumIntPtr
                                    Foreign.Ptr.$fOrdIntPtr
                                    GHC.Real.$fEnumRatio_$ctoRational];

Foreign.Ptr.$fIntegralIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral Foreign.Ptr.IntPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [Foreign.Ptr.$fRealIntPtr
                                        Foreign.Ptr.$fEnumIntPtr
                                        GHC.Real.$fIntegralInt_$cquot
                                        GHC.Real.$fIntegralInt_$crem
                                        GHC.Real.$fIntegralInt_$cdiv
                                        GHC.Real.$fIntegralInt_$cmod
                                        GHC.Real.$fIntegralInt_$cquotRem
                                        GHC.Real.$fIntegralInt_$cdivMod
                                        GHC.Real.$fIntegralInt_$ctoInteger];

Foreign.Ptr.$fBitsIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [Foreign.Ptr.$fEqIntPtr
                                     Data.Bits.$fBitsInt_$c.&.
                                     Data.Bits.$fBitsInt_$c.|.
                                     Data.Bits.$fBitsInt_$cxor
                                     Data.Bits.$fBitsInt_$ccomplement
                                     Data.Bits.$fBitsInt_$cshift
                                     Data.Bits.$fBitsInt_$crotate
                                     Data.Bits.$fBitsBool2
                                     Data.Bits.$fBitsInt_$cbit
                                     Data.Bits.$fBitsInt_$csetBit
                                     Data.Bits.$fBitsInt_$cclearBit
                                     Data.Bits.$fBitsInt_$ccomplementBit
                                     Data.Bits.$fBitsInt_$ctestBit
                                     Data.Bits.$fBitsInt_$cbitSizeMaybe
                                     Data.Bits.$fBitsInt_$cfiniteBitSize
                                     Data.Bits.$fBitsInt_$cisSigned
                                     Data.Bits.$fBitsInt_$cshiftL
                                     Data.Bits.$fBitsInt_$cunsafeShiftL
                                     Data.Bits.$fBitsInt_$cshiftR
                                     Data.Bits.$fBitsInt_$cunsafeShiftR
                                     Data.Bits.$fBitsInt_$crotateL
                                     Data.Bits.$fBitsInt_$crotateR
                                     Data.Bits.$fBitsInt_$cpopCount];

Foreign.Ptr.$fFiniteBitsIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [Foreign.Ptr.$fBitsIntPtr
                                           Data.Bits.$fBitsInt_$cfiniteBitSize
                                           Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros
                                           Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros];

Foreign.Ptr.$fShowWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowWord_$cshowsPrec
                                    GHC.Show.$fShowWord_$cshow
                                    GHC.Show.$fShowWord_$cshowList];

Foreign.Ptr.$fReadWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read Foreign.Ptr.WordPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord_$creadsPrec
                                    GHC.Read.$fReadWord_$creadList
                                    GHC.Read.$fReadWord3
                                    GHC.Read.$fReadWord1];

Foreign.Ptr.$fBoundedWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Enum.$fBoundedWord_$cminBound
                                       GHC.Enum.$fBoundedWord_$cmaxBound];

Foreign.Ptr.$fStorableWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Foreign.Storable.Storable Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Foreign.Storable.C:Storable! [Foreign.Storable.$fStorableWord_$calignment
                                                Foreign.Storable.$fStorableWord_$calignment
                                                GHC.Storable.readWordOffPtr1
                                                GHC.Storable.writeWordOffPtr1
                                                Foreign.Storable.$fStorableWord4
                                                Foreign.Storable.$fStorableWord3
                                                Foreign.Storable.$fStorableWord2
                                                Foreign.Storable.$fStorableWord1];

Foreign.Ptr.$fEnumWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum Foreign.Ptr.WordPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Enum.$fEnumWord_$csucc
                                    GHC.Enum.$fEnumWord_$cpred
                                    GHC.Enum.$fEnumWord_$ctoEnum
                                    GHC.Enum.$fEnumWord_$cfromEnum
                                    GHC.Enum.$fEnumWord_$cenumFrom
                                    GHC.Enum.$fEnumWord_$cenumFromThen
                                    GHC.Enum.$fEnumWord_$cenumFromTo
                                    GHC.Enum.$fEnumWord_$cenumFromThenTo];

Foreign.Ptr.$fNumWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Num.$fNumWord_$c+
                                  GHC.Num.$fNumWord_$c-
                                  GHC.Num.$fNumWord_$c*
                                  GHC.Num.$fNumWord_$cnegate
                                  GHC.Num.$fNumWord_$cabs
                                  GHC.Num.$fNumWord_$csignum
                                  GHC.Num.$fNumWord_$cfromInteger];

Foreign.Ptr.$fEqWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Classes.eqWord
                                     GHC.Classes.neWord];

Foreign.Ptr.$fOrdWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Foreign.Ptr.$fEqWordPtr
                                      GHC.Classes.compareWord
                                      GHC.Classes.ltWord
                                      GHC.Classes.leWord
                                      GHC.Classes.gtWord
                                      GHC.Classes.geWord
                                      GHC.Classes.$fOrdWord_$cmax
                                      GHC.Classes.$fOrdWord_$cmin];

Foreign.Ptr.$fRealWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real Foreign.Ptr.WordPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [Foreign.Ptr.$fNumWordPtr
                                    Foreign.Ptr.$fOrdWordPtr
                                    GHC.Real.$fRealWord_$ctoRational];

Foreign.Ptr.$fIntegralWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral Foreign.Ptr.WordPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [Foreign.Ptr.$fRealWordPtr
                                        Foreign.Ptr.$fEnumWordPtr
                                        GHC.Real.$fIntegralWord_$cquot
                                        GHC.Real.$fIntegralWord_$crem
                                        GHC.Real.$fIntegralWord_$cquot
                                        GHC.Real.$fIntegralWord_$crem
                                        GHC.Real.$fIntegralWord_$cquotRem
                                        GHC.Real.$fIntegralWord_$cdivMod
                                        GHC.Real.$fIntegralWord_$ctoInteger];

Foreign.Ptr.$fBitsWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [Foreign.Ptr.$fEqWordPtr
                                     Data.Bits.$fBitsWord_$c.&.
                                     Data.Bits.$fBitsWord_$c.|.
                                     Data.Bits.$fBitsWord_$cxor
                                     Data.Bits.$fBitsWord_$ccomplement
                                     Data.Bits.$fBitsWord_$cshift
                                     Data.Bits.$fBitsWord_$crotate
                                     Data.Bits.$fBitsWord1
                                     Data.Bits.$fBitsWord_$cbit
                                     Data.Bits.$fBitsWord_$csetBit
                                     Data.Bits.$fBitsWord_$cclearBit
                                     Data.Bits.$fBitsWord_$ccomplementBit
                                     Data.Bits.$fBitsWord_$ctestBit
                                     Data.Bits.$fBitsWord_$cbitSizeMaybe
                                     Data.Bits.$fBitsWord_$cfiniteBitSize
                                     Data.Bits.$fBitsWord_$cisSigned
                                     Data.Bits.$fBitsWord_$cshiftL
                                     Data.Bits.$fBitsWord_$cunsafeShiftL
                                     Data.Bits.$fBitsWord_$cshiftR
                                     Data.Bits.$fBitsWord_$cunsafeShiftR
                                     Data.Bits.$fBitsWord_$crotateL
                                     Data.Bits.$fBitsWord_$crotateR
                                     Data.Bits.$fBitsWord_$cpopCount];

Foreign.Ptr.$fFiniteBitsWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [Foreign.Ptr.$fBitsWordPtr
                                           Data.Bits.$fBitsWord_$cfiniteBitSize
                                           Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros
                                           Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros];

Foreign.Ptr.ptrToWordPtr
  :: forall a. GHC.Ptr.Ptr a -> Foreign.Ptr.WordPtr
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4RSU]
        case ds_s4RSU of {
          GHC.Ptr.Ptr a#_s4RSW [Occ=Once] ->
              case addr2Int# [a#_s4RSW] of sat_s4RSX {
                __DEFAULT ->
                    case int2Word# [sat_s4RSX] of sat_s4RSY {
                      __DEFAULT -> GHC.Types.W# [sat_s4RSY];
                    };
              };
        };

Foreign.Ptr.wordPtrToPtr
  :: forall a. Foreign.Ptr.WordPtr -> GHC.Ptr.Ptr a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4RSZ]
        case ds_s4RSZ of {
          GHC.Types.W# w#_s4RT1 [Occ=Once] ->
              case word2Int# [w#_s4RT1] of sat_s4RT2 {
                __DEFAULT ->
                    case int2Addr# [sat_s4RT2] of sat_s4RT3 {
                      __DEFAULT -> GHC.Ptr.Ptr [sat_s4RT3];
                    };
              };
        };

Foreign.Ptr.ptrToIntPtr
  :: forall a. GHC.Ptr.Ptr a -> Foreign.Ptr.IntPtr
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4RT4]
        case ds_s4RT4 of {
          GHC.Ptr.Ptr a#_s4RT6 [Occ=Once] ->
              case addr2Int# [a#_s4RT6] of sat_s4RT7 {
                __DEFAULT -> GHC.Types.I# [sat_s4RT7];
              };
        };

Foreign.Ptr.intPtrToPtr
  :: forall a. Foreign.Ptr.IntPtr -> GHC.Ptr.Ptr a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4RT8]
        case ds_s4RT8 of {
          GHC.Types.I# i#_s4RTa [Occ=Once] ->
              case int2Addr# [i#_s4RTa] of sat_s4RTb {
                __DEFAULT -> GHC.Ptr.Ptr [sat_s4RTb];
              };
        };

Foreign.Ptr.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Foreign.Ptr.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$trModule4];

Foreign.Ptr.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Foreign.Ptr"#;

Foreign.Ptr.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$trModule2];

Foreign.Ptr.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Foreign.Ptr.$trModule3
                                     Foreign.Ptr.$trModule1];

$krep_r4RLt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord
                                              GHC.Types.[]];

$krep1_r4RLu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

Foreign.Ptr.$tcWordPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WordPtr"#;

Foreign.Ptr.$tcWordPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$tcWordPtr2];

Foreign.Ptr.$tcWordPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10827112719629138107##
                                    3588783739676187441##
                                    Foreign.Ptr.$trModule
                                    Foreign.Ptr.$tcWordPtr1
                                    0#
                                    GHC.Types.krep$*];

$krep2_r4RLv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.Ptr.$tcWordPtr
                                              GHC.Types.[]];

Foreign.Ptr.$tc'WordPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4RLt $krep2_r4RLv];

Foreign.Ptr.$tc'WordPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'WordPtr"#;

Foreign.Ptr.$tc'WordPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$tc'WordPtr3];

Foreign.Ptr.$tc'WordPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15588862172907192371##
                                    13878995573910308719##
                                    Foreign.Ptr.$trModule
                                    Foreign.Ptr.$tc'WordPtr2
                                    0#
                                    Foreign.Ptr.$tc'WordPtr1];

Foreign.Ptr.$tcIntPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IntPtr"#;

Foreign.Ptr.$tcIntPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$tcIntPtr2];

Foreign.Ptr.$tcIntPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12538429555661790394##
                                    9943980142794044772##
                                    Foreign.Ptr.$trModule
                                    Foreign.Ptr.$tcIntPtr1
                                    0#
                                    GHC.Types.krep$*];

$krep3_r4RLw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.Ptr.$tcIntPtr
                                              GHC.Types.[]];

Foreign.Ptr.$tc'IntPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r4RLu $krep3_r4RLw];

Foreign.Ptr.$tc'IntPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'IntPtr"#;

Foreign.Ptr.$tc'IntPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$tc'IntPtr3];

Foreign.Ptr.$tc'IntPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17038100807295602145##
                                    4458611784149765752##
                                    Foreign.Ptr.$trModule
                                    Foreign.Ptr.$tc'IntPtr2
                                    0#
                                    Foreign.Ptr.$tc'IntPtr1];

freeHaskellFunPtr1_r4RLx
  :: forall a.
     GHC.Ptr.FunPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_s4RTc eta_s4RTd]
        case ds_s4RTc of {
          GHC.Ptr.FunPtr ds2_s4RTf [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ds2_s4RTf eta_s4RTd] of {
                Unit# ds3_s4RTi [Occ=Once] -> (#,#) [ds3_s4RTi GHC.Tuple.()];
              };
        };

Foreign.Ptr.freeHaskellFunPtr
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] freeHaskellFunPtr1_r4RLx eta_B2 eta_B1;


==================== STG syntax: ====================
2018-03-16 15:59:46.467941347 UTC

Foreign.Ptr.$fShowIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.showSignedInt
                                    GHC.Show.$fShowInt_$cshow
                                    GHC.Show.$fShowInt_$cshowList];

Foreign.Ptr.$fReadIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read Foreign.Ptr.IntPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadInt_$creadsPrec
                                    GHC.Read.$fReadInt_$creadList
                                    GHC.Read.$fReadInt1
                                    GHC.Read.$fReadInt_$creadListPrec];

Foreign.Ptr.$fBoundedIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Base.minInt
                                       GHC.Base.maxInt];

Foreign.Ptr.$fStorableIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Foreign.Storable.Storable Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Foreign.Storable.C:Storable! [Foreign.Storable.$fStorableInt_$calignment
                                                Foreign.Storable.$fStorableInt_$calignment
                                                GHC.Storable.readIntOffPtr1
                                                GHC.Storable.writeIntOffPtr1
                                                Foreign.Storable.$fStorableInt4
                                                Foreign.Storable.$fStorableInt3
                                                Foreign.Storable.$fStorableInt2
                                                Foreign.Storable.$fStorableInt1];

Foreign.Ptr.$fEnumIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum Foreign.Ptr.IntPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Enum.$fEnumInt_$csucc
                                    GHC.Enum.$fEnumInt_$cpred
                                    GHC.Enum.$fEnumInt_$cfromEnum
                                    GHC.Enum.$fEnumInt_$cfromEnum
                                    GHC.Enum.$fEnumInt_$cenumFrom
                                    GHC.Enum.$fEnumInt_$cenumFromThen
                                    GHC.Enum.$fEnumInt_$cenumFromTo
                                    GHC.Enum.$fEnumInt_$cenumFromThenTo];

Foreign.Ptr.$fNumIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Num.$fNumInt_$c+
                                  GHC.Num.$fNumInt_$c-
                                  GHC.Num.$fNumInt_$c*
                                  GHC.Num.$fNumInt_$cnegate
                                  GHC.Num.$fNumInt_$cabs
                                  GHC.Num.$fNumInt_$csignum
                                  GHC.Num.$fNumInt_$cfromInteger];

Foreign.Ptr.$fEqIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Classes.eqInt
                                     GHC.Classes.neInt];

Foreign.Ptr.$fOrdIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Foreign.Ptr.$fEqIntPtr
                                      GHC.Classes.compareInt
                                      GHC.Classes.ltInt
                                      GHC.Classes.leInt
                                      GHC.Classes.gtInt
                                      GHC.Classes.geInt
                                      GHC.Classes.$fOrdInt_$cmax
                                      GHC.Classes.$fOrdInt_$cmin];

Foreign.Ptr.$fRealIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real Foreign.Ptr.IntPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [Foreign.Ptr.$fNumIntPtr
                                    Foreign.Ptr.$fOrdIntPtr
                                    GHC.Real.$fEnumRatio_$ctoRational];

Foreign.Ptr.$fIntegralIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral Foreign.Ptr.IntPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [Foreign.Ptr.$fRealIntPtr
                                        Foreign.Ptr.$fEnumIntPtr
                                        GHC.Real.$fIntegralInt_$cquot
                                        GHC.Real.$fIntegralInt_$crem
                                        GHC.Real.$fIntegralInt_$cdiv
                                        GHC.Real.$fIntegralInt_$cmod
                                        GHC.Real.$fIntegralInt_$cquotRem
                                        GHC.Real.$fIntegralInt_$cdivMod
                                        GHC.Real.$fIntegralInt_$ctoInteger];

Foreign.Ptr.$fBitsIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [Foreign.Ptr.$fEqIntPtr
                                     Data.Bits.$fBitsInt_$c.&.
                                     Data.Bits.$fBitsInt_$c.|.
                                     Data.Bits.$fBitsInt_$cxor
                                     Data.Bits.$fBitsInt_$ccomplement
                                     Data.Bits.$fBitsInt_$cshift
                                     Data.Bits.$fBitsInt_$crotate
                                     Data.Bits.$fBitsBool2
                                     Data.Bits.$fBitsInt_$cbit
                                     Data.Bits.$fBitsInt_$csetBit
                                     Data.Bits.$fBitsInt_$cclearBit
                                     Data.Bits.$fBitsInt_$ccomplementBit
                                     Data.Bits.$fBitsInt_$ctestBit
                                     Data.Bits.$fBitsInt_$cbitSizeMaybe
                                     Data.Bits.$fBitsInt_$cfiniteBitSize
                                     Data.Bits.$fBitsInt_$cisSigned
                                     Data.Bits.$fBitsInt_$cshiftL
                                     Data.Bits.$fBitsInt_$cunsafeShiftL
                                     Data.Bits.$fBitsInt_$cshiftR
                                     Data.Bits.$fBitsInt_$cunsafeShiftR
                                     Data.Bits.$fBitsInt_$crotateL
                                     Data.Bits.$fBitsInt_$crotateR
                                     Data.Bits.$fBitsInt_$cpopCount];

Foreign.Ptr.$fFiniteBitsIntPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits Foreign.Ptr.IntPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [Foreign.Ptr.$fBitsIntPtr
                                           Data.Bits.$fBitsInt_$cfiniteBitSize
                                           Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros
                                           Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros];

Foreign.Ptr.$fShowWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowWord_$cshowsPrec
                                    GHC.Show.$fShowWord_$cshow
                                    GHC.Show.$fShowWord_$cshowList];

Foreign.Ptr.$fReadWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read Foreign.Ptr.WordPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord_$creadsPrec
                                    GHC.Read.$fReadWord_$creadList
                                    GHC.Read.$fReadWord3
                                    GHC.Read.$fReadWord1];

Foreign.Ptr.$fBoundedWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Enum.$fBoundedWord_$cminBound
                                       GHC.Enum.$fBoundedWord_$cmaxBound];

Foreign.Ptr.$fStorableWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Foreign.Storable.Storable Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Foreign.Storable.C:Storable! [Foreign.Storable.$fStorableWord_$calignment
                                                Foreign.Storable.$fStorableWord_$calignment
                                                GHC.Storable.readWordOffPtr1
                                                GHC.Storable.writeWordOffPtr1
                                                Foreign.Storable.$fStorableWord4
                                                Foreign.Storable.$fStorableWord3
                                                Foreign.Storable.$fStorableWord2
                                                Foreign.Storable.$fStorableWord1];

Foreign.Ptr.$fEnumWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum Foreign.Ptr.WordPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Enum.$fEnumWord_$csucc
                                    GHC.Enum.$fEnumWord_$cpred
                                    GHC.Enum.$fEnumWord_$ctoEnum
                                    GHC.Enum.$fEnumWord_$cfromEnum
                                    GHC.Enum.$fEnumWord_$cenumFrom
                                    GHC.Enum.$fEnumWord_$cenumFromThen
                                    GHC.Enum.$fEnumWord_$cenumFromTo
                                    GHC.Enum.$fEnumWord_$cenumFromThenTo];

Foreign.Ptr.$fNumWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Num.$fNumWord_$c+
                                  GHC.Num.$fNumWord_$c-
                                  GHC.Num.$fNumWord_$c*
                                  GHC.Num.$fNumWord_$cnegate
                                  GHC.Num.$fNumWord_$cabs
                                  GHC.Num.$fNumWord_$csignum
                                  GHC.Num.$fNumWord_$cfromInteger];

Foreign.Ptr.$fEqWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Classes.eqWord
                                     GHC.Classes.neWord];

Foreign.Ptr.$fOrdWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Foreign.Ptr.$fEqWordPtr
                                      GHC.Classes.compareWord
                                      GHC.Classes.ltWord
                                      GHC.Classes.leWord
                                      GHC.Classes.gtWord
                                      GHC.Classes.geWord
                                      GHC.Classes.$fOrdWord_$cmax
                                      GHC.Classes.$fOrdWord_$cmin];

Foreign.Ptr.$fRealWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real Foreign.Ptr.WordPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [Foreign.Ptr.$fNumWordPtr
                                    Foreign.Ptr.$fOrdWordPtr
                                    GHC.Real.$fRealWord_$ctoRational];

Foreign.Ptr.$fIntegralWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral Foreign.Ptr.WordPtr
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [Foreign.Ptr.$fRealWordPtr
                                        Foreign.Ptr.$fEnumWordPtr
                                        GHC.Real.$fIntegralWord_$cquot
                                        GHC.Real.$fIntegralWord_$crem
                                        GHC.Real.$fIntegralWord_$cquot
                                        GHC.Real.$fIntegralWord_$crem
                                        GHC.Real.$fIntegralWord_$cquotRem
                                        GHC.Real.$fIntegralWord_$cdivMod
                                        GHC.Real.$fIntegralWord_$ctoInteger];

Foreign.Ptr.$fBitsWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [Foreign.Ptr.$fEqWordPtr
                                     Data.Bits.$fBitsWord_$c.&.
                                     Data.Bits.$fBitsWord_$c.|.
                                     Data.Bits.$fBitsWord_$cxor
                                     Data.Bits.$fBitsWord_$ccomplement
                                     Data.Bits.$fBitsWord_$cshift
                                     Data.Bits.$fBitsWord_$crotate
                                     Data.Bits.$fBitsWord1
                                     Data.Bits.$fBitsWord_$cbit
                                     Data.Bits.$fBitsWord_$csetBit
                                     Data.Bits.$fBitsWord_$cclearBit
                                     Data.Bits.$fBitsWord_$ccomplementBit
                                     Data.Bits.$fBitsWord_$ctestBit
                                     Data.Bits.$fBitsWord_$cbitSizeMaybe
                                     Data.Bits.$fBitsWord_$cfiniteBitSize
                                     Data.Bits.$fBitsWord_$cisSigned
                                     Data.Bits.$fBitsWord_$cshiftL
                                     Data.Bits.$fBitsWord_$cunsafeShiftL
                                     Data.Bits.$fBitsWord_$cshiftR
                                     Data.Bits.$fBitsWord_$cunsafeShiftR
                                     Data.Bits.$fBitsWord_$crotateL
                                     Data.Bits.$fBitsWord_$crotateR
                                     Data.Bits.$fBitsWord_$cpopCount];

Foreign.Ptr.$fFiniteBitsWordPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits Foreign.Ptr.WordPtr
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [Foreign.Ptr.$fBitsWordPtr
                                           Data.Bits.$fBitsWord_$cfiniteBitSize
                                           Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros
                                           Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros];

Foreign.Ptr.ptrToWordPtr
  :: forall a. GHC.Ptr.Ptr a -> Foreign.Ptr.WordPtr
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4RSU]
        case ds_s4RSU of {
          GHC.Ptr.Ptr a#_s4RSW [Occ=Once] ->
              case addr2Int# [a#_s4RSW] of sat_s4RSX {
                __DEFAULT ->
                    case int2Word# [sat_s4RSX] of sat_s4RSY {
                      __DEFAULT -> GHC.Types.W# [sat_s4RSY];
                    };
              };
        };

Foreign.Ptr.wordPtrToPtr
  :: forall a. Foreign.Ptr.WordPtr -> GHC.Ptr.Ptr a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4RSZ]
        case ds_s4RSZ of {
          GHC.Types.W# w#_s4RT1 [Occ=Once] ->
              case word2Int# [w#_s4RT1] of sat_s4RT2 {
                __DEFAULT ->
                    case int2Addr# [sat_s4RT2] of sat_s4RT3 {
                      __DEFAULT -> GHC.Ptr.Ptr [sat_s4RT3];
                    };
              };
        };

Foreign.Ptr.ptrToIntPtr
  :: forall a. GHC.Ptr.Ptr a -> Foreign.Ptr.IntPtr
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4RT4]
        case ds_s4RT4 of {
          GHC.Ptr.Ptr a#_s4RT6 [Occ=Once] ->
              case addr2Int# [a#_s4RT6] of sat_s4RT7 {
                __DEFAULT -> GHC.Types.I# [sat_s4RT7];
              };
        };

Foreign.Ptr.intPtrToPtr
  :: forall a. Foreign.Ptr.IntPtr -> GHC.Ptr.Ptr a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4RT8]
        case ds_s4RT8 of {
          GHC.Types.I# i#_s4RTa [Occ=Once] ->
              case int2Addr# [i#_s4RTa] of sat_s4RTb {
                __DEFAULT -> GHC.Ptr.Ptr [sat_s4RTb];
              };
        };

Foreign.Ptr.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Foreign.Ptr.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$trModule4];

Foreign.Ptr.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Foreign.Ptr"#;

Foreign.Ptr.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$trModule2];

Foreign.Ptr.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Foreign.Ptr.$trModule3
                                     Foreign.Ptr.$trModule1];

$krep_r4RLt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord
                                              GHC.Types.[]];

$krep1_r4RLu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

Foreign.Ptr.$tcWordPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WordPtr"#;

Foreign.Ptr.$tcWordPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$tcWordPtr2];

Foreign.Ptr.$tcWordPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10827112719629138107##
                                    3588783739676187441##
                                    Foreign.Ptr.$trModule
                                    Foreign.Ptr.$tcWordPtr1
                                    0#
                                    GHC.Types.krep$*];

$krep2_r4RLv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.Ptr.$tcWordPtr
                                              GHC.Types.[]];

Foreign.Ptr.$tc'WordPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4RLt $krep2_r4RLv];

Foreign.Ptr.$tc'WordPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'WordPtr"#;

Foreign.Ptr.$tc'WordPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$tc'WordPtr3];

Foreign.Ptr.$tc'WordPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15588862172907192371##
                                    13878995573910308719##
                                    Foreign.Ptr.$trModule
                                    Foreign.Ptr.$tc'WordPtr2
                                    0#
                                    Foreign.Ptr.$tc'WordPtr1];

Foreign.Ptr.$tcIntPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IntPtr"#;

Foreign.Ptr.$tcIntPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$tcIntPtr2];

Foreign.Ptr.$tcIntPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12538429555661790394##
                                    9943980142794044772##
                                    Foreign.Ptr.$trModule
                                    Foreign.Ptr.$tcIntPtr1
                                    0#
                                    GHC.Types.krep$*];

$krep3_r4RLw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.Ptr.$tcIntPtr
                                              GHC.Types.[]];

Foreign.Ptr.$tc'IntPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r4RLu $krep3_r4RLw];

Foreign.Ptr.$tc'IntPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'IntPtr"#;

Foreign.Ptr.$tc'IntPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Foreign.Ptr.$tc'IntPtr3];

Foreign.Ptr.$tc'IntPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17038100807295602145##
                                    4458611784149765752##
                                    Foreign.Ptr.$trModule
                                    Foreign.Ptr.$tc'IntPtr2
                                    0#
                                    Foreign.Ptr.$tc'IntPtr1];

freeHaskellFunPtr1_r4RLx
  :: forall a.
     GHC.Ptr.FunPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_s4RTc void_0E]
        case ds_s4RTc of {
          GHC.Ptr.FunPtr ds2_s4RTf [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ds2_s4RTf GHC.Prim.void#] of {
                (##) -> Unit# [GHC.Tuple.()];
              };
        };

Foreign.Ptr.freeHaskellFunPtr
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        freeHaskellFunPtr1_r4RLx eta_B2 GHC.Prim.void#;

