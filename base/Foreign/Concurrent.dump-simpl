
==================== Tidy Core ====================
2018-03-16 16:04:10.755349254 UTC

Result size of Tidy Core
  = {terms: 18, types: 22, coercions: 25, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
newForeignPtr :: forall a. Ptr a -> IO () -> IO (ForeignPtr a)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.ForeignPtr.newConcForeignPtr1
               `cast` (forall (a :: <*>_N).
                       <Ptr a>_R
                       ->_R <IO ()>_R
                       ->_R Sym (GHC.Types.N:IO[0] <ForeignPtr a>_R)
                       :: (forall a.
                           Ptr a
                           -> IO ()
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, ForeignPtr a #) :: *)
                          ~R# (forall a. Ptr a -> IO () -> IO (ForeignPtr a) :: *))}]
newForeignPtr
  = GHC.ForeignPtr.newConcForeignPtr1
    `cast` (forall (a :: <*>_N).
            <Ptr a>_R
            ->_R <IO ()>_R
            ->_R Sym (GHC.Types.N:IO[0] <ForeignPtr a>_R)
            :: (forall a.
                Ptr a
                -> IO ()
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, ForeignPtr a #) :: *)
               ~R# (forall a. Ptr a -> IO () -> IO (ForeignPtr a) :: *))

-- RHS size: {terms: 1, types: 0, coercions: 12, joins: 0/0}
addForeignPtrFinalizer :: forall a. ForeignPtr a -> IO () -> IO ()
[GblId,
 Arity=3,
 Str=<S(LS),1*U(A,1*U)><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.ForeignPtr.addForeignPtrConcFinalizer1
               `cast` (forall (a :: <*>_N).
                       <ForeignPtr a>_R ->_R <IO ()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           ForeignPtr a
                           -> IO ()
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #) :: *)
                          ~R# (forall a. ForeignPtr a -> IO () -> IO () :: *))}]
addForeignPtrFinalizer
  = GHC.ForeignPtr.addForeignPtrConcFinalizer1
    `cast` (forall (a :: <*>_N).
            <ForeignPtr a>_R ->_R <IO ()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                ForeignPtr a
                -> IO ()
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #) :: *)
               ~R# (forall a. ForeignPtr a -> IO () -> IO () :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Foreign.Concurrent.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Foreign.Concurrent.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.Concurrent.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.Concurrent.$trModule3
  = GHC.Types.TrNameS Foreign.Concurrent.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Foreign.Concurrent.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
Foreign.Concurrent.$trModule2 = "Foreign.Concurrent"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.Concurrent.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.Concurrent.$trModule1
  = GHC.Types.TrNameS Foreign.Concurrent.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Foreign.Concurrent.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Foreign.Concurrent.$trModule
  = GHC.Types.Module
      Foreign.Concurrent.$trModule3 Foreign.Concurrent.$trModule1


