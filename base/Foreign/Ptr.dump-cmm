
==================== Output Cmm ====================
2018-03-16 15:59:45.815713581 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:59:45.816369519 UTC

[section ""data" . Foreign.Ptr.$fShowIntPtr_closure" {
     Foreign.Ptr.$fShowIntPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.showSignedInt_closure+3;
         const GHC.Show.$fShowInt_$cshow_closure+1;
         const GHC.Show.$fShowInt_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.817005769 UTC

[section ""data" . Foreign.Ptr.$fReadIntPtr_closure" {
     Foreign.Ptr.$fReadIntPtr_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadInt_$creadsPrec_closure+1;
         const GHC.Read.$fReadInt_$creadList_closure+1;
         const GHC.Read.$fReadInt1_closure+2;
         const GHC.Read.$fReadInt_$creadListPrec_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.817696607 UTC

[section ""data" . Foreign.Ptr.$fBoundedIntPtr_closure" {
     Foreign.Ptr.$fBoundedIntPtr_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Base.minInt_closure;
         const GHC.Base.maxInt_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.818316705 UTC

[section ""data" . Foreign.Ptr.$fStorableIntPtr_closure" {
     Foreign.Ptr.$fStorableIntPtr_closure:
         const Foreign.Storable.C:Storable_con_info;
         const Foreign.Storable.$fStorableInt_$calignment_closure+1;
         const Foreign.Storable.$fStorableInt_$calignment_closure+1;
         const GHC.Storable.readIntOffPtr1_closure+3;
         const GHC.Storable.writeIntOffPtr1_closure+4;
         const Foreign.Storable.$fStorableInt4_closure+3;
         const Foreign.Storable.$fStorableInt3_closure+4;
         const Foreign.Storable.$fStorableInt2_closure+2;
         const Foreign.Storable.$fStorableInt1_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.818951047 UTC

[section ""data" . Foreign.Ptr.$fEnumIntPtr_closure" {
     Foreign.Ptr.$fEnumIntPtr_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumInt_$csucc_closure+1;
         const GHC.Enum.$fEnumInt_$cpred_closure+1;
         const GHC.Enum.$fEnumInt_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInt_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInt_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumInt_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumInt_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumInt_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.819573172 UTC

[section ""data" . Foreign.Ptr.$fNumIntPtr_closure" {
     Foreign.Ptr.$fNumIntPtr_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumInt_$c+_closure+2;
         const GHC.Num.$fNumInt_$c-_closure+2;
         const GHC.Num.$fNumInt_$c*_closure+2;
         const GHC.Num.$fNumInt_$cnegate_closure+1;
         const GHC.Num.$fNumInt_$cabs_closure+1;
         const GHC.Num.$fNumInt_$csignum_closure+1;
         const GHC.Num.$fNumInt_$cfromInteger_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.820390781 UTC

[section ""data" . Foreign.Ptr.$fEqIntPtr_closure" {
     Foreign.Ptr.$fEqIntPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqInt_closure+2;
         const GHC.Classes.neInt_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.821183017 UTC

[section ""data" . Foreign.Ptr.$fOrdIntPtr_closure" {
     Foreign.Ptr.$fOrdIntPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const Foreign.Ptr.$fEqIntPtr_closure+1;
         const GHC.Classes.compareInt_closure+2;
         const GHC.Classes.ltInt_closure+2;
         const GHC.Classes.leInt_closure+2;
         const GHC.Classes.gtInt_closure+2;
         const GHC.Classes.geInt_closure+2;
         const GHC.Classes.$fOrdInt_$cmax_closure+2;
         const GHC.Classes.$fOrdInt_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.822094462 UTC

[section ""data" . Foreign.Ptr.$fRealIntPtr_closure" {
     Foreign.Ptr.$fRealIntPtr_closure:
         const GHC.Real.C:Real_con_info;
         const Foreign.Ptr.$fNumIntPtr_closure+1;
         const Foreign.Ptr.$fOrdIntPtr_closure+1;
         const GHC.Real.$fEnumRatio_$ctoRational_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.822980539 UTC

[section ""data" . Foreign.Ptr.$fIntegralIntPtr_closure" {
     Foreign.Ptr.$fIntegralIntPtr_closure:
         const GHC.Real.C:Integral_con_info;
         const Foreign.Ptr.$fRealIntPtr_closure+1;
         const Foreign.Ptr.$fEnumIntPtr_closure+1;
         const GHC.Real.$fIntegralInt_$cquot_closure+2;
         const GHC.Real.$fIntegralInt_$crem_closure+2;
         const GHC.Real.$fIntegralInt_$cdiv_closure+2;
         const GHC.Real.$fIntegralInt_$cmod_closure+2;
         const GHC.Real.$fIntegralInt_$cquotRem_closure+2;
         const GHC.Real.$fIntegralInt_$cdivMod_closure+2;
         const GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.823930835 UTC

[section ""data" . Foreign.Ptr.$fBitsIntPtr_closure" {
     Foreign.Ptr.$fBitsIntPtr_closure:
         const Data.Bits.C:Bits_con_info;
         const Foreign.Ptr.$fEqIntPtr_closure+1;
         const Data.Bits.$fBitsInt_$c.&._closure+2;
         const Data.Bits.$fBitsInt_$c.|._closure+2;
         const Data.Bits.$fBitsInt_$cxor_closure+2;
         const Data.Bits.$fBitsInt_$ccomplement_closure+1;
         const Data.Bits.$fBitsInt_$cshift_closure+2;
         const Data.Bits.$fBitsInt_$crotate_closure+2;
         const Data.Bits.$fBitsBool2_closure;
         const Data.Bits.$fBitsInt_$cbit_closure+1;
         const Data.Bits.$fBitsInt_$csetBit_closure+2;
         const Data.Bits.$fBitsInt_$cclearBit_closure+2;
         const Data.Bits.$fBitsInt_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsInt_$ctestBit_closure+2;
         const Data.Bits.$fBitsInt_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsInt_$cfiniteBitSize_closure+1;
         const Data.Bits.$fBitsInt_$cisSigned_closure+1;
         const Data.Bits.$fBitsInt_$cshiftL_closure+2;
         const Data.Bits.$fBitsInt_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsInt_$cshiftR_closure+2;
         const Data.Bits.$fBitsInt_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsInt_$crotateL_closure+2;
         const Data.Bits.$fBitsInt_$crotateR_closure+2;
         const Data.Bits.$fBitsInt_$cpopCount_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.824966755 UTC

[section ""data" . Foreign.Ptr.$fFiniteBitsIntPtr_closure" {
     Foreign.Ptr.$fFiniteBitsIntPtr_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Foreign.Ptr.$fBitsIntPtr_closure+1;
         const Data.Bits.$fBitsInt_$cfiniteBitSize_closure+1;
         const Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_closure+1;
         const Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.825840759 UTC

[section ""data" . Foreign.Ptr.$fShowWordPtr_closure" {
     Foreign.Ptr.$fShowWordPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowWord_$cshowsPrec_closure+3;
         const GHC.Show.$fShowWord_$cshow_closure+1;
         const GHC.Show.$fShowWord_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.826748412 UTC

[section ""data" . Foreign.Ptr.$fReadWordPtr_closure" {
     Foreign.Ptr.$fReadWordPtr_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadWord_$creadsPrec_closure+2;
         const GHC.Read.$fReadWord_$creadList_closure+1;
         const GHC.Read.$fReadWord3_closure+2;
         const GHC.Read.$fReadWord1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.827556986 UTC

[section ""data" . Foreign.Ptr.$fBoundedWordPtr_closure" {
     Foreign.Ptr.$fBoundedWordPtr_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Enum.$fBoundedWord_$cminBound_closure;
         const GHC.Enum.$fBoundedWord_$cmaxBound_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.828394451 UTC

[section ""data" . Foreign.Ptr.$fStorableWordPtr_closure" {
     Foreign.Ptr.$fStorableWordPtr_closure:
         const Foreign.Storable.C:Storable_con_info;
         const Foreign.Storable.$fStorableWord_$calignment_closure+1;
         const Foreign.Storable.$fStorableWord_$calignment_closure+1;
         const GHC.Storable.readWordOffPtr1_closure+3;
         const GHC.Storable.writeWordOffPtr1_closure+4;
         const Foreign.Storable.$fStorableWord4_closure+3;
         const Foreign.Storable.$fStorableWord3_closure+4;
         const Foreign.Storable.$fStorableWord2_closure+2;
         const Foreign.Storable.$fStorableWord1_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.829455909 UTC

[section ""data" . Foreign.Ptr.$fEnumWordPtr_closure" {
     Foreign.Ptr.$fEnumWordPtr_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumWord_$csucc_closure+1;
         const GHC.Enum.$fEnumWord_$cpred_closure+1;
         const GHC.Enum.$fEnumWord_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumWord_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumWord_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumWord_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumWord_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumWord_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.830299284 UTC

[section ""data" . Foreign.Ptr.$fNumWordPtr_closure" {
     Foreign.Ptr.$fNumWordPtr_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumWord_$c+_closure+2;
         const GHC.Num.$fNumWord_$c-_closure+2;
         const GHC.Num.$fNumWord_$c*_closure+2;
         const GHC.Num.$fNumWord_$cnegate_closure+1;
         const GHC.Num.$fNumWord_$cabs_closure+1;
         const GHC.Num.$fNumWord_$csignum_closure+1;
         const GHC.Num.$fNumWord_$cfromInteger_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.831137419 UTC

[section ""data" . Foreign.Ptr.$fEqWordPtr_closure" {
     Foreign.Ptr.$fEqWordPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqWord_closure+2;
         const GHC.Classes.neWord_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.831950061 UTC

[section ""data" . Foreign.Ptr.$fOrdWordPtr_closure" {
     Foreign.Ptr.$fOrdWordPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const Foreign.Ptr.$fEqWordPtr_closure+1;
         const GHC.Classes.compareWord_closure+2;
         const GHC.Classes.ltWord_closure+2;
         const GHC.Classes.leWord_closure+2;
         const GHC.Classes.gtWord_closure+2;
         const GHC.Classes.geWord_closure+2;
         const GHC.Classes.$fOrdWord_$cmax_closure+2;
         const GHC.Classes.$fOrdWord_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.832814844 UTC

[section ""data" . Foreign.Ptr.$fRealWordPtr_closure" {
     Foreign.Ptr.$fRealWordPtr_closure:
         const GHC.Real.C:Real_con_info;
         const Foreign.Ptr.$fNumWordPtr_closure+1;
         const Foreign.Ptr.$fOrdWordPtr_closure+1;
         const GHC.Real.$fRealWord_$ctoRational_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.83369938 UTC

[section ""data" . Foreign.Ptr.$fIntegralWordPtr_closure" {
     Foreign.Ptr.$fIntegralWordPtr_closure:
         const GHC.Real.C:Integral_con_info;
         const Foreign.Ptr.$fRealWordPtr_closure+1;
         const Foreign.Ptr.$fEnumWordPtr_closure+1;
         const GHC.Real.$fIntegralWord_$cquot_closure+2;
         const GHC.Real.$fIntegralWord_$crem_closure+2;
         const GHC.Real.$fIntegralWord_$cquot_closure+2;
         const GHC.Real.$fIntegralWord_$crem_closure+2;
         const GHC.Real.$fIntegralWord_$cquotRem_closure+2;
         const GHC.Real.$fIntegralWord_$cdivMod_closure+2;
         const GHC.Real.$fIntegralWord_$ctoInteger_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.834648269 UTC

[section ""data" . Foreign.Ptr.$fBitsWordPtr_closure" {
     Foreign.Ptr.$fBitsWordPtr_closure:
         const Data.Bits.C:Bits_con_info;
         const Foreign.Ptr.$fEqWordPtr_closure+1;
         const Data.Bits.$fBitsWord_$c.&._closure+2;
         const Data.Bits.$fBitsWord_$c.|._closure+2;
         const Data.Bits.$fBitsWord_$cxor_closure+2;
         const Data.Bits.$fBitsWord_$ccomplement_closure+1;
         const Data.Bits.$fBitsWord_$cshift_closure+2;
         const Data.Bits.$fBitsWord_$crotate_closure+2;
         const Data.Bits.$fBitsWord1_closure;
         const Data.Bits.$fBitsWord_$cbit_closure+1;
         const Data.Bits.$fBitsWord_$csetBit_closure+2;
         const Data.Bits.$fBitsWord_$cclearBit_closure+2;
         const Data.Bits.$fBitsWord_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsWord_$ctestBit_closure+2;
         const Data.Bits.$fBitsWord_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsWord_$cfiniteBitSize_closure+1;
         const Data.Bits.$fBitsWord_$cisSigned_closure+1;
         const Data.Bits.$fBitsWord_$cshiftL_closure+2;
         const Data.Bits.$fBitsWord_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsWord_$cshiftR_closure+2;
         const Data.Bits.$fBitsWord_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsWord_$crotateL_closure+2;
         const Data.Bits.$fBitsWord_$crotateR_closure+2;
         const Data.Bits.$fBitsWord_$cpopCount_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.835639256 UTC

[section ""data" . Foreign.Ptr.$fFiniteBitsWordPtr_closure" {
     Foreign.Ptr.$fFiniteBitsWordPtr_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Foreign.Ptr.$fBitsWordPtr_closure+1;
         const Data.Bits.$fBitsWord_$cfiniteBitSize_closure+1;
         const Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_closure+1;
         const Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.836976672 UTC

[section ""data" . Foreign.Ptr.ptrToWordPtr_closure" {
     Foreign.Ptr.ptrToWordPtr_closure:
         const Foreign.Ptr.ptrToWordPtr_info;
 },
 Foreign.Ptr.ptrToWordPtr_entry() //  [R2]
         { info_tbl: [(c4RM5,
                       label: Foreign.Ptr.ptrToWordPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RM5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RMf; else goto c4RMg;
       c4RMf: // global
           R2 = R2;
           R1 = Foreign.Ptr.ptrToWordPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RMg: // global
           I64[Sp - 8] = block_c4RM2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RMk; else goto c4RM3;
       u4RMk: // global
           call _c4RM2(R1) args: 0, res: 0, upd: 0;
       c4RM3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4RM2() //  [R1]
         { info_tbl: [(c4RM2,
                       label: block_c4RM2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RM2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RMj; else goto c4RMi;
       c4RMj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RMi: // global
           _s4RLD::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s4RLD::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.838956543 UTC

[section ""data" . Foreign.Ptr.wordPtrToPtr_closure" {
     Foreign.Ptr.wordPtrToPtr_closure:
         const Foreign.Ptr.wordPtrToPtr_info;
 },
 Foreign.Ptr.wordPtrToPtr_entry() //  [R2]
         { info_tbl: [(c4RMs,
                       label: Foreign.Ptr.wordPtrToPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RMs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RMC; else goto c4RMD;
       c4RMC: // global
           R2 = R2;
           R1 = Foreign.Ptr.wordPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RMD: // global
           I64[Sp - 8] = block_c4RMp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RMH; else goto c4RMq;
       u4RMH: // global
           call _c4RMp(R1) args: 0, res: 0, upd: 0;
       c4RMq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4RMp() //  [R1]
         { info_tbl: [(c4RMp,
                       label: block_c4RMp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RMp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RMG; else goto c4RMF;
       c4RMG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RMF: // global
           _s4RLI::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s4RLI::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.840869317 UTC

[section ""data" . Foreign.Ptr.ptrToIntPtr_closure" {
     Foreign.Ptr.ptrToIntPtr_closure:
         const Foreign.Ptr.ptrToIntPtr_info;
 },
 Foreign.Ptr.ptrToIntPtr_entry() //  [R2]
         { info_tbl: [(c4RMP,
                       label: Foreign.Ptr.ptrToIntPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RMP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RMW; else goto c4RMX;
       c4RMW: // global
           R2 = R2;
           R1 = Foreign.Ptr.ptrToIntPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RMX: // global
           I64[Sp - 8] = block_c4RMM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RN1; else goto c4RMN;
       u4RN1: // global
           call _c4RMM(R1) args: 0, res: 0, upd: 0;
       c4RMN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4RMM() //  [R1]
         { info_tbl: [(c4RMM,
                       label: block_c4RMM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RMM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RN0; else goto c4RMZ;
       c4RN0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RMZ: // global
           _s4RLM::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s4RLM::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.842852833 UTC

[section ""data" . Foreign.Ptr.intPtrToPtr_closure" {
     Foreign.Ptr.intPtrToPtr_closure:
         const Foreign.Ptr.intPtrToPtr_info;
 },
 Foreign.Ptr.intPtrToPtr_entry() //  [R2]
         { info_tbl: [(c4RN9,
                       label: Foreign.Ptr.intPtrToPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RN9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RNg; else goto c4RNh;
       c4RNg: // global
           R2 = R2;
           R1 = Foreign.Ptr.intPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RNh: // global
           I64[Sp - 8] = block_c4RN6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RNl; else goto c4RN7;
       u4RNl: // global
           call _c4RN6(R1) args: 0, res: 0, upd: 0;
       c4RN7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4RN6() //  [R1]
         { info_tbl: [(c4RN6,
                       label: block_c4RN6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RN6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RNk; else goto c4RNj;
       c4RNk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RNj: // global
           _s4RLQ::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s4RLQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.844308434 UTC

[section ""cstring" . Foreign.Ptr.$trModule4_bytes" {
     Foreign.Ptr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.845122767 UTC

[section ""data" . Foreign.Ptr.$trModule3_closure" {
     Foreign.Ptr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.845898622 UTC

[section ""cstring" . Foreign.Ptr.$trModule2_bytes" {
     Foreign.Ptr.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.846713647 UTC

[section ""data" . Foreign.Ptr.$trModule1_closure" {
     Foreign.Ptr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.847539416 UTC

[section ""data" . Foreign.Ptr.$trModule_closure" {
     Foreign.Ptr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.Ptr.$trModule3_closure+1;
         const Foreign.Ptr.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.848367003 UTC

[section ""data" . $krep_r4RLt_closure" {
     $krep_r4RLt_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.849178708 UTC

[section ""data" . $krep1_r4RLu_closure" {
     $krep1_r4RLu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.850811978 UTC

[section ""cstring" . Foreign.Ptr.$tcWordPtr2_bytes" {
     Foreign.Ptr.$tcWordPtr2_bytes:
         I8[] [87,111,114,100,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.851607363 UTC

[section ""data" . Foreign.Ptr.$tcWordPtr1_closure" {
     Foreign.Ptr.$tcWordPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tcWordPtr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.85236166 UTC

[section ""data" . Foreign.Ptr.$tcWordPtr_closure" {
     Foreign.Ptr.$tcWordPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tcWordPtr1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10827112719629138107;
         const 3588783739676187441;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.853198477 UTC

[section ""data" . $krep2_r4RLv_closure" {
     $krep2_r4RLv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.Ptr.$tcWordPtr_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.855143822 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr1_closure" {
     Foreign.Ptr.$tc'WordPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r4RLt_closure+1;
         const $krep2_r4RLv_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.855876803 UTC

[section ""cstring" . Foreign.Ptr.$tc'WordPtr3_bytes" {
     Foreign.Ptr.$tc'WordPtr3_bytes:
         I8[] [39,87,111,114,100,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.856672983 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr2_closure" {
     Foreign.Ptr.$tc'WordPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tc'WordPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.85755166 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr_closure" {
     Foreign.Ptr.$tc'WordPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tc'WordPtr2_closure+1;
         const Foreign.Ptr.$tc'WordPtr1_closure+4;
         const 15588862172907192371;
         const 13878995573910308719;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.858386526 UTC

[section ""cstring" . Foreign.Ptr.$tcIntPtr2_bytes" {
     Foreign.Ptr.$tcIntPtr2_bytes:
         I8[] [73,110,116,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.859103802 UTC

[section ""data" . Foreign.Ptr.$tcIntPtr1_closure" {
     Foreign.Ptr.$tcIntPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tcIntPtr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.859887405 UTC

[section ""data" . Foreign.Ptr.$tcIntPtr_closure" {
     Foreign.Ptr.$tcIntPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tcIntPtr1_closure+1;
         const GHC.Types.krep$*_closure;
         const 12538429555661790394;
         const 9943980142794044772;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.860678518 UTC

[section ""data" . $krep3_r4RLw_closure" {
     $krep3_r4RLw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.Ptr.$tcIntPtr_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.861611154 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr1_closure" {
     Foreign.Ptr.$tc'IntPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r4RLu_closure+1;
         const $krep3_r4RLw_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.862409283 UTC

[section ""cstring" . Foreign.Ptr.$tc'IntPtr3_bytes" {
     Foreign.Ptr.$tc'IntPtr3_bytes:
         I8[] [39,73,110,116,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.863209497 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr2_closure" {
     Foreign.Ptr.$tc'IntPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tc'IntPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.863990215 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr_closure" {
     Foreign.Ptr.$tc'IntPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tc'IntPtr2_closure+1;
         const Foreign.Ptr.$tc'IntPtr1_closure+4;
         const 17038100807295602145;
         const 4458611784149765752;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.865312354 UTC

[section ""data" . freeHaskellFunPtr1_r4RLx_closure" {
     freeHaskellFunPtr1_r4RLx_closure:
         const freeHaskellFunPtr1_r4RLx_info;
 },
 freeHaskellFunPtr1_r4RLx_entry() //  [R2]
         { info_tbl: [(c4RNt,
                       label: freeHaskellFunPtr1_r4RLx_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RNt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RNu; else goto c4RNv;
       c4RNu: // global
           R2 = R2;
           R1 = freeHaskellFunPtr1_r4RLx_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RNv: // global
           I64[Sp - 8] = block_c4RNq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RNB; else goto c4RNr;
       u4RNB: // global
           call _c4RNq(R1) args: 0, res: 0, upd: 0;
       c4RNr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4RNq() //  [R1]
         { info_tbl: [(c4RNq,
                       label: block_c4RNq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RNq: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] freeHaskellFunctionPtr(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.866893996 UTC

[section ""data" . Foreign.Ptr.freeHaskellFunPtr_closure" {
     Foreign.Ptr.freeHaskellFunPtr_closure:
         const Foreign.Ptr.freeHaskellFunPtr_info;
 },
 Foreign.Ptr.freeHaskellFunPtr_entry() //  [R2]
         { info_tbl: [(c4RNG,
                       label: Foreign.Ptr.freeHaskellFunPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RNG: // global
           R2 = R2;
           call freeHaskellFunPtr1_r4RLx_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.86781172 UTC

[section ""relreadonly" . S4RNJ_srt" { S4RNJ_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.86849746 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:59:45.869185226 UTC

[section ""data" . Foreign.Ptr.$fShowIntPtr_closure" {
     Foreign.Ptr.$fShowIntPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.showSignedInt_closure+3;
         const GHC.Show.$fShowInt_$cshow_closure+1;
         const GHC.Show.$fShowInt_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.870073596 UTC

[section ""data" . Foreign.Ptr.$fReadIntPtr_closure" {
     Foreign.Ptr.$fReadIntPtr_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadInt_$creadsPrec_closure+1;
         const GHC.Read.$fReadInt_$creadList_closure+1;
         const GHC.Read.$fReadInt1_closure+2;
         const GHC.Read.$fReadInt_$creadListPrec_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.870912622 UTC

[section ""data" . Foreign.Ptr.$fBoundedIntPtr_closure" {
     Foreign.Ptr.$fBoundedIntPtr_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Base.minInt_closure;
         const GHC.Base.maxInt_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.871765919 UTC

[section ""data" . Foreign.Ptr.$fStorableIntPtr_closure" {
     Foreign.Ptr.$fStorableIntPtr_closure:
         const Foreign.Storable.C:Storable_con_info;
         const Foreign.Storable.$fStorableInt_$calignment_closure+1;
         const Foreign.Storable.$fStorableInt_$calignment_closure+1;
         const GHC.Storable.readIntOffPtr1_closure+3;
         const GHC.Storable.writeIntOffPtr1_closure+4;
         const Foreign.Storable.$fStorableInt4_closure+3;
         const Foreign.Storable.$fStorableInt3_closure+4;
         const Foreign.Storable.$fStorableInt2_closure+2;
         const Foreign.Storable.$fStorableInt1_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.872632911 UTC

[section ""data" . Foreign.Ptr.$fEnumIntPtr_closure" {
     Foreign.Ptr.$fEnumIntPtr_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumInt_$csucc_closure+1;
         const GHC.Enum.$fEnumInt_$cpred_closure+1;
         const GHC.Enum.$fEnumInt_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInt_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInt_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumInt_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumInt_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumInt_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.873999437 UTC

[section ""data" . Foreign.Ptr.$fNumIntPtr_closure" {
     Foreign.Ptr.$fNumIntPtr_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumInt_$c+_closure+2;
         const GHC.Num.$fNumInt_$c-_closure+2;
         const GHC.Num.$fNumInt_$c*_closure+2;
         const GHC.Num.$fNumInt_$cnegate_closure+1;
         const GHC.Num.$fNumInt_$cabs_closure+1;
         const GHC.Num.$fNumInt_$csignum_closure+1;
         const GHC.Num.$fNumInt_$cfromInteger_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.874912225 UTC

[section ""data" . Foreign.Ptr.$fEqIntPtr_closure" {
     Foreign.Ptr.$fEqIntPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqInt_closure+2;
         const GHC.Classes.neInt_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.875617588 UTC

[section ""data" . Foreign.Ptr.$fOrdIntPtr_closure" {
     Foreign.Ptr.$fOrdIntPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const Foreign.Ptr.$fEqIntPtr_closure+1;
         const GHC.Classes.compareInt_closure+2;
         const GHC.Classes.ltInt_closure+2;
         const GHC.Classes.leInt_closure+2;
         const GHC.Classes.gtInt_closure+2;
         const GHC.Classes.geInt_closure+2;
         const GHC.Classes.$fOrdInt_$cmax_closure+2;
         const GHC.Classes.$fOrdInt_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.876465224 UTC

[section ""data" . Foreign.Ptr.$fRealIntPtr_closure" {
     Foreign.Ptr.$fRealIntPtr_closure:
         const GHC.Real.C:Real_con_info;
         const Foreign.Ptr.$fNumIntPtr_closure+1;
         const Foreign.Ptr.$fOrdIntPtr_closure+1;
         const GHC.Real.$fEnumRatio_$ctoRational_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.877496423 UTC

[section ""data" . Foreign.Ptr.$fIntegralIntPtr_closure" {
     Foreign.Ptr.$fIntegralIntPtr_closure:
         const GHC.Real.C:Integral_con_info;
         const Foreign.Ptr.$fRealIntPtr_closure+1;
         const Foreign.Ptr.$fEnumIntPtr_closure+1;
         const GHC.Real.$fIntegralInt_$cquot_closure+2;
         const GHC.Real.$fIntegralInt_$crem_closure+2;
         const GHC.Real.$fIntegralInt_$cdiv_closure+2;
         const GHC.Real.$fIntegralInt_$cmod_closure+2;
         const GHC.Real.$fIntegralInt_$cquotRem_closure+2;
         const GHC.Real.$fIntegralInt_$cdivMod_closure+2;
         const GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.878425096 UTC

[section ""data" . Foreign.Ptr.$fBitsIntPtr_closure" {
     Foreign.Ptr.$fBitsIntPtr_closure:
         const Data.Bits.C:Bits_con_info;
         const Foreign.Ptr.$fEqIntPtr_closure+1;
         const Data.Bits.$fBitsInt_$c.&._closure+2;
         const Data.Bits.$fBitsInt_$c.|._closure+2;
         const Data.Bits.$fBitsInt_$cxor_closure+2;
         const Data.Bits.$fBitsInt_$ccomplement_closure+1;
         const Data.Bits.$fBitsInt_$cshift_closure+2;
         const Data.Bits.$fBitsInt_$crotate_closure+2;
         const Data.Bits.$fBitsBool2_closure;
         const Data.Bits.$fBitsInt_$cbit_closure+1;
         const Data.Bits.$fBitsInt_$csetBit_closure+2;
         const Data.Bits.$fBitsInt_$cclearBit_closure+2;
         const Data.Bits.$fBitsInt_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsInt_$ctestBit_closure+2;
         const Data.Bits.$fBitsInt_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsInt_$cfiniteBitSize_closure+1;
         const Data.Bits.$fBitsInt_$cisSigned_closure+1;
         const Data.Bits.$fBitsInt_$cshiftL_closure+2;
         const Data.Bits.$fBitsInt_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsInt_$cshiftR_closure+2;
         const Data.Bits.$fBitsInt_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsInt_$crotateL_closure+2;
         const Data.Bits.$fBitsInt_$crotateR_closure+2;
         const Data.Bits.$fBitsInt_$cpopCount_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.879487061 UTC

[section ""data" . Foreign.Ptr.$fFiniteBitsIntPtr_closure" {
     Foreign.Ptr.$fFiniteBitsIntPtr_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Foreign.Ptr.$fBitsIntPtr_closure+1;
         const Data.Bits.$fBitsInt_$cfiniteBitSize_closure+1;
         const Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_closure+1;
         const Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.880341524 UTC

[section ""data" . Foreign.Ptr.$fShowWordPtr_closure" {
     Foreign.Ptr.$fShowWordPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowWord_$cshowsPrec_closure+3;
         const GHC.Show.$fShowWord_$cshow_closure+1;
         const GHC.Show.$fShowWord_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.881119092 UTC

[section ""data" . Foreign.Ptr.$fReadWordPtr_closure" {
     Foreign.Ptr.$fReadWordPtr_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadWord_$creadsPrec_closure+2;
         const GHC.Read.$fReadWord_$creadList_closure+1;
         const GHC.Read.$fReadWord3_closure+2;
         const GHC.Read.$fReadWord1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.881927147 UTC

[section ""data" . Foreign.Ptr.$fBoundedWordPtr_closure" {
     Foreign.Ptr.$fBoundedWordPtr_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Enum.$fBoundedWord_$cminBound_closure;
         const GHC.Enum.$fBoundedWord_$cmaxBound_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.882740934 UTC

[section ""data" . Foreign.Ptr.$fStorableWordPtr_closure" {
     Foreign.Ptr.$fStorableWordPtr_closure:
         const Foreign.Storable.C:Storable_con_info;
         const Foreign.Storable.$fStorableWord_$calignment_closure+1;
         const Foreign.Storable.$fStorableWord_$calignment_closure+1;
         const GHC.Storable.readWordOffPtr1_closure+3;
         const GHC.Storable.writeWordOffPtr1_closure+4;
         const Foreign.Storable.$fStorableWord4_closure+3;
         const Foreign.Storable.$fStorableWord3_closure+4;
         const Foreign.Storable.$fStorableWord2_closure+2;
         const Foreign.Storable.$fStorableWord1_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.8836214 UTC

[section ""data" . Foreign.Ptr.$fEnumWordPtr_closure" {
     Foreign.Ptr.$fEnumWordPtr_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumWord_$csucc_closure+1;
         const GHC.Enum.$fEnumWord_$cpred_closure+1;
         const GHC.Enum.$fEnumWord_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumWord_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumWord_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumWord_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumWord_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumWord_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.884428581 UTC

[section ""data" . Foreign.Ptr.$fNumWordPtr_closure" {
     Foreign.Ptr.$fNumWordPtr_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumWord_$c+_closure+2;
         const GHC.Num.$fNumWord_$c-_closure+2;
         const GHC.Num.$fNumWord_$c*_closure+2;
         const GHC.Num.$fNumWord_$cnegate_closure+1;
         const GHC.Num.$fNumWord_$cabs_closure+1;
         const GHC.Num.$fNumWord_$csignum_closure+1;
         const GHC.Num.$fNumWord_$cfromInteger_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.885360404 UTC

[section ""data" . Foreign.Ptr.$fEqWordPtr_closure" {
     Foreign.Ptr.$fEqWordPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqWord_closure+2;
         const GHC.Classes.neWord_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.886195762 UTC

[section ""data" . Foreign.Ptr.$fOrdWordPtr_closure" {
     Foreign.Ptr.$fOrdWordPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const Foreign.Ptr.$fEqWordPtr_closure+1;
         const GHC.Classes.compareWord_closure+2;
         const GHC.Classes.ltWord_closure+2;
         const GHC.Classes.leWord_closure+2;
         const GHC.Classes.gtWord_closure+2;
         const GHC.Classes.geWord_closure+2;
         const GHC.Classes.$fOrdWord_$cmax_closure+2;
         const GHC.Classes.$fOrdWord_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.887041167 UTC

[section ""data" . Foreign.Ptr.$fRealWordPtr_closure" {
     Foreign.Ptr.$fRealWordPtr_closure:
         const GHC.Real.C:Real_con_info;
         const Foreign.Ptr.$fNumWordPtr_closure+1;
         const Foreign.Ptr.$fOrdWordPtr_closure+1;
         const GHC.Real.$fRealWord_$ctoRational_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.887876923 UTC

[section ""data" . Foreign.Ptr.$fIntegralWordPtr_closure" {
     Foreign.Ptr.$fIntegralWordPtr_closure:
         const GHC.Real.C:Integral_con_info;
         const Foreign.Ptr.$fRealWordPtr_closure+1;
         const Foreign.Ptr.$fEnumWordPtr_closure+1;
         const GHC.Real.$fIntegralWord_$cquot_closure+2;
         const GHC.Real.$fIntegralWord_$crem_closure+2;
         const GHC.Real.$fIntegralWord_$cquot_closure+2;
         const GHC.Real.$fIntegralWord_$crem_closure+2;
         const GHC.Real.$fIntegralWord_$cquotRem_closure+2;
         const GHC.Real.$fIntegralWord_$cdivMod_closure+2;
         const GHC.Real.$fIntegralWord_$ctoInteger_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.888821677 UTC

[section ""data" . Foreign.Ptr.$fBitsWordPtr_closure" {
     Foreign.Ptr.$fBitsWordPtr_closure:
         const Data.Bits.C:Bits_con_info;
         const Foreign.Ptr.$fEqWordPtr_closure+1;
         const Data.Bits.$fBitsWord_$c.&._closure+2;
         const Data.Bits.$fBitsWord_$c.|._closure+2;
         const Data.Bits.$fBitsWord_$cxor_closure+2;
         const Data.Bits.$fBitsWord_$ccomplement_closure+1;
         const Data.Bits.$fBitsWord_$cshift_closure+2;
         const Data.Bits.$fBitsWord_$crotate_closure+2;
         const Data.Bits.$fBitsWord1_closure;
         const Data.Bits.$fBitsWord_$cbit_closure+1;
         const Data.Bits.$fBitsWord_$csetBit_closure+2;
         const Data.Bits.$fBitsWord_$cclearBit_closure+2;
         const Data.Bits.$fBitsWord_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsWord_$ctestBit_closure+2;
         const Data.Bits.$fBitsWord_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsWord_$cfiniteBitSize_closure+1;
         const Data.Bits.$fBitsWord_$cisSigned_closure+1;
         const Data.Bits.$fBitsWord_$cshiftL_closure+2;
         const Data.Bits.$fBitsWord_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsWord_$cshiftR_closure+2;
         const Data.Bits.$fBitsWord_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsWord_$crotateL_closure+2;
         const Data.Bits.$fBitsWord_$crotateR_closure+2;
         const Data.Bits.$fBitsWord_$cpopCount_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.8899142 UTC

[section ""data" . Foreign.Ptr.$fFiniteBitsWordPtr_closure" {
     Foreign.Ptr.$fFiniteBitsWordPtr_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Foreign.Ptr.$fBitsWordPtr_closure+1;
         const Data.Bits.$fBitsWord_$cfiniteBitSize_closure+1;
         const Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_closure+1;
         const Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.891220392 UTC

[section ""data" . Foreign.Ptr.ptrToWordPtr_closure" {
     Foreign.Ptr.ptrToWordPtr_closure:
         const Foreign.Ptr.ptrToWordPtr_info;
 },
 Foreign.Ptr.ptrToWordPtr_entry() //  [R2]
         { info_tbl: [(c4RNR,
                       label: Foreign.Ptr.ptrToWordPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RNR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RO1; else goto c4RO2;
       c4RO1: // global
           R2 = R2;
           R1 = Foreign.Ptr.ptrToWordPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RO2: // global
           I64[Sp - 8] = block_c4RNO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RO6; else goto c4RNP;
       u4RO6: // global
           call _c4RNO(R1) args: 0, res: 0, upd: 0;
       c4RNP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4RNO() //  [R1]
         { info_tbl: [(c4RNO,
                       label: block_c4RNO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RNO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RO5; else goto c4RO4;
       c4RO5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RO4: // global
           _s4RLD::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s4RLD::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.893131956 UTC

[section ""data" . Foreign.Ptr.wordPtrToPtr_closure" {
     Foreign.Ptr.wordPtrToPtr_closure:
         const Foreign.Ptr.wordPtrToPtr_info;
 },
 Foreign.Ptr.wordPtrToPtr_entry() //  [R2]
         { info_tbl: [(c4ROe,
                       label: Foreign.Ptr.wordPtrToPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4ROe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4ROo; else goto c4ROp;
       c4ROo: // global
           R2 = R2;
           R1 = Foreign.Ptr.wordPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4ROp: // global
           I64[Sp - 8] = block_c4ROb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4ROt; else goto c4ROc;
       u4ROt: // global
           call _c4ROb(R1) args: 0, res: 0, upd: 0;
       c4ROc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4ROb() //  [R1]
         { info_tbl: [(c4ROb,
                       label: block_c4ROb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4ROb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4ROs; else goto c4ROr;
       c4ROs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4ROr: // global
           _s4RLI::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s4RLI::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.896091991 UTC

[section ""data" . Foreign.Ptr.ptrToIntPtr_closure" {
     Foreign.Ptr.ptrToIntPtr_closure:
         const Foreign.Ptr.ptrToIntPtr_info;
 },
 Foreign.Ptr.ptrToIntPtr_entry() //  [R2]
         { info_tbl: [(c4ROB,
                       label: Foreign.Ptr.ptrToIntPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4ROB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4ROI; else goto c4ROJ;
       c4ROI: // global
           R2 = R2;
           R1 = Foreign.Ptr.ptrToIntPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4ROJ: // global
           I64[Sp - 8] = block_c4ROy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RON; else goto c4ROz;
       u4RON: // global
           call _c4ROy(R1) args: 0, res: 0, upd: 0;
       c4ROz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4ROy() //  [R1]
         { info_tbl: [(c4ROy,
                       label: block_c4ROy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4ROy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4ROM; else goto c4ROL;
       c4ROM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4ROL: // global
           _s4RLM::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s4RLM::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.89805935 UTC

[section ""data" . Foreign.Ptr.intPtrToPtr_closure" {
     Foreign.Ptr.intPtrToPtr_closure:
         const Foreign.Ptr.intPtrToPtr_info;
 },
 Foreign.Ptr.intPtrToPtr_entry() //  [R2]
         { info_tbl: [(c4ROV,
                       label: Foreign.Ptr.intPtrToPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4ROV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RP2; else goto c4RP3;
       c4RP2: // global
           R2 = R2;
           R1 = Foreign.Ptr.intPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RP3: // global
           I64[Sp - 8] = block_c4ROS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RP7; else goto c4ROT;
       u4RP7: // global
           call _c4ROS(R1) args: 0, res: 0, upd: 0;
       c4ROT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4ROS() //  [R1]
         { info_tbl: [(c4ROS,
                       label: block_c4ROS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4ROS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RP6; else goto c4RP5;
       c4RP6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RP5: // global
           _s4RLQ::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s4RLQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.899506658 UTC

[section ""cstring" . Foreign.Ptr.$trModule4_bytes" {
     Foreign.Ptr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.9002888 UTC

[section ""data" . Foreign.Ptr.$trModule3_closure" {
     Foreign.Ptr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.901011639 UTC

[section ""cstring" . Foreign.Ptr.$trModule2_bytes" {
     Foreign.Ptr.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.90180543 UTC

[section ""data" . Foreign.Ptr.$trModule1_closure" {
     Foreign.Ptr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.902555944 UTC

[section ""data" . Foreign.Ptr.$trModule_closure" {
     Foreign.Ptr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.Ptr.$trModule3_closure+1;
         const Foreign.Ptr.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.903311857 UTC

[section ""data" . $krep_r4RLt_closure" {
     $krep_r4RLt_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.904123637 UTC

[section ""data" . $krep1_r4RLu_closure" {
     $krep1_r4RLu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.904931552 UTC

[section ""cstring" . Foreign.Ptr.$tcWordPtr2_bytes" {
     Foreign.Ptr.$tcWordPtr2_bytes:
         I8[] [87,111,114,100,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.905715933 UTC

[section ""data" . Foreign.Ptr.$tcWordPtr1_closure" {
     Foreign.Ptr.$tcWordPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tcWordPtr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.906501845 UTC

[section ""data" . Foreign.Ptr.$tcWordPtr_closure" {
     Foreign.Ptr.$tcWordPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tcWordPtr1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10827112719629138107;
         const 3588783739676187441;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.90731761 UTC

[section ""data" . $krep2_r4RLv_closure" {
     $krep2_r4RLv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.Ptr.$tcWordPtr_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.908051336 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr1_closure" {
     Foreign.Ptr.$tc'WordPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r4RLt_closure+1;
         const $krep2_r4RLv_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.908613346 UTC

[section ""cstring" . Foreign.Ptr.$tc'WordPtr3_bytes" {
     Foreign.Ptr.$tc'WordPtr3_bytes:
         I8[] [39,87,111,114,100,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.909146337 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr2_closure" {
     Foreign.Ptr.$tc'WordPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tc'WordPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.910207831 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr_closure" {
     Foreign.Ptr.$tc'WordPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tc'WordPtr2_closure+1;
         const Foreign.Ptr.$tc'WordPtr1_closure+4;
         const 15588862172907192371;
         const 13878995573910308719;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.910777168 UTC

[section ""cstring" . Foreign.Ptr.$tcIntPtr2_bytes" {
     Foreign.Ptr.$tcIntPtr2_bytes:
         I8[] [73,110,116,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.911332071 UTC

[section ""data" . Foreign.Ptr.$tcIntPtr1_closure" {
     Foreign.Ptr.$tcIntPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tcIntPtr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.911992853 UTC

[section ""data" . Foreign.Ptr.$tcIntPtr_closure" {
     Foreign.Ptr.$tcIntPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tcIntPtr1_closure+1;
         const GHC.Types.krep$*_closure;
         const 12538429555661790394;
         const 9943980142794044772;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.912971738 UTC

[section ""data" . $krep3_r4RLw_closure" {
     $krep3_r4RLw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.Ptr.$tcIntPtr_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.913856256 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr1_closure" {
     Foreign.Ptr.$tc'IntPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r4RLu_closure+1;
         const $krep3_r4RLw_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.914433988 UTC

[section ""cstring" . Foreign.Ptr.$tc'IntPtr3_bytes" {
     Foreign.Ptr.$tc'IntPtr3_bytes:
         I8[] [39,73,110,116,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.914990303 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr2_closure" {
     Foreign.Ptr.$tc'IntPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tc'IntPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.915572044 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr_closure" {
     Foreign.Ptr.$tc'IntPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tc'IntPtr2_closure+1;
         const Foreign.Ptr.$tc'IntPtr1_closure+4;
         const 17038100807295602145;
         const 4458611784149765752;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.916605388 UTC

[section ""data" . freeHaskellFunPtr1_r4RLx_closure" {
     freeHaskellFunPtr1_r4RLx_closure:
         const freeHaskellFunPtr1_r4RLx_info;
 },
 freeHaskellFunPtr1_r4RLx_entry() //  [R2]
         { info_tbl: [(c4RPf,
                       label: freeHaskellFunPtr1_r4RLx_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RPf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RPg; else goto c4RPh;
       c4RPg: // global
           R2 = R2;
           R1 = freeHaskellFunPtr1_r4RLx_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RPh: // global
           I64[Sp - 8] = block_c4RPc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RPn; else goto c4RPd;
       u4RPn: // global
           call _c4RPc(R1) args: 0, res: 0, upd: 0;
       c4RPd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4RPc() //  [R1]
         { info_tbl: [(c4RPc,
                       label: block_c4RPc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RPc: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] freeHaskellFunctionPtr(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.91783803 UTC

[section ""data" . Foreign.Ptr.freeHaskellFunPtr_closure" {
     Foreign.Ptr.freeHaskellFunPtr_closure:
         const Foreign.Ptr.freeHaskellFunPtr_info;
 },
 Foreign.Ptr.freeHaskellFunPtr_entry() //  [R2]
         { info_tbl: [(c4RPs,
                       label: Foreign.Ptr.freeHaskellFunPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RPs: // global
           R2 = R2;
           call freeHaskellFunPtr1_r4RLx_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.91854114 UTC

[section ""relreadonly" . S4RNJ_srt" { S4RNJ_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.919310656 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:59:45.920463366 UTC

[section ""data" . Foreign.Ptr.$fShowIntPtr_closure" {
     Foreign.Ptr.$fShowIntPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.showSignedInt_closure+3;
         const GHC.Show.$fShowInt_$cshow_closure+1;
         const GHC.Show.$fShowInt_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.922454722 UTC

[section ""data" . Foreign.Ptr.$fReadIntPtr_closure" {
     Foreign.Ptr.$fReadIntPtr_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadInt_$creadsPrec_closure+1;
         const GHC.Read.$fReadInt_$creadList_closure+1;
         const GHC.Read.$fReadInt1_closure+2;
         const GHC.Read.$fReadInt_$creadListPrec_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.924231957 UTC

[section ""data" . Foreign.Ptr.$fBoundedIntPtr_closure" {
     Foreign.Ptr.$fBoundedIntPtr_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Base.minInt_closure;
         const GHC.Base.maxInt_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.926690621 UTC

[section ""data" . Foreign.Ptr.$fStorableIntPtr_closure" {
     Foreign.Ptr.$fStorableIntPtr_closure:
         const Foreign.Storable.C:Storable_con_info;
         const Foreign.Storable.$fStorableInt_$calignment_closure+1;
         const Foreign.Storable.$fStorableInt_$calignment_closure+1;
         const GHC.Storable.readIntOffPtr1_closure+3;
         const GHC.Storable.writeIntOffPtr1_closure+4;
         const Foreign.Storable.$fStorableInt4_closure+3;
         const Foreign.Storable.$fStorableInt3_closure+4;
         const Foreign.Storable.$fStorableInt2_closure+2;
         const Foreign.Storable.$fStorableInt1_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.929360469 UTC

[section ""data" . Foreign.Ptr.$fEnumIntPtr_closure" {
     Foreign.Ptr.$fEnumIntPtr_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumInt_$csucc_closure+1;
         const GHC.Enum.$fEnumInt_$cpred_closure+1;
         const GHC.Enum.$fEnumInt_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInt_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInt_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumInt_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumInt_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumInt_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.931972638 UTC

[section ""data" . Foreign.Ptr.$fNumIntPtr_closure" {
     Foreign.Ptr.$fNumIntPtr_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumInt_$c+_closure+2;
         const GHC.Num.$fNumInt_$c-_closure+2;
         const GHC.Num.$fNumInt_$c*_closure+2;
         const GHC.Num.$fNumInt_$cnegate_closure+1;
         const GHC.Num.$fNumInt_$cabs_closure+1;
         const GHC.Num.$fNumInt_$csignum_closure+1;
         const GHC.Num.$fNumInt_$cfromInteger_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.934456694 UTC

[section ""data" . Foreign.Ptr.$fEqIntPtr_closure" {
     Foreign.Ptr.$fEqIntPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqInt_closure+2;
         const GHC.Classes.neInt_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.936841559 UTC

[section ""data" . Foreign.Ptr.$fOrdIntPtr_closure" {
     Foreign.Ptr.$fOrdIntPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const Foreign.Ptr.$fEqIntPtr_closure+1;
         const GHC.Classes.compareInt_closure+2;
         const GHC.Classes.ltInt_closure+2;
         const GHC.Classes.leInt_closure+2;
         const GHC.Classes.gtInt_closure+2;
         const GHC.Classes.geInt_closure+2;
         const GHC.Classes.$fOrdInt_$cmax_closure+2;
         const GHC.Classes.$fOrdInt_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.939435072 UTC

[section ""data" . Foreign.Ptr.$fRealIntPtr_closure" {
     Foreign.Ptr.$fRealIntPtr_closure:
         const GHC.Real.C:Real_con_info;
         const Foreign.Ptr.$fNumIntPtr_closure+1;
         const Foreign.Ptr.$fOrdIntPtr_closure+1;
         const GHC.Real.$fEnumRatio_$ctoRational_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.941222332 UTC

[section ""data" . Foreign.Ptr.$fIntegralIntPtr_closure" {
     Foreign.Ptr.$fIntegralIntPtr_closure:
         const GHC.Real.C:Integral_con_info;
         const Foreign.Ptr.$fRealIntPtr_closure+1;
         const Foreign.Ptr.$fEnumIntPtr_closure+1;
         const GHC.Real.$fIntegralInt_$cquot_closure+2;
         const GHC.Real.$fIntegralInt_$crem_closure+2;
         const GHC.Real.$fIntegralInt_$cdiv_closure+2;
         const GHC.Real.$fIntegralInt_$cmod_closure+2;
         const GHC.Real.$fIntegralInt_$cquotRem_closure+2;
         const GHC.Real.$fIntegralInt_$cdivMod_closure+2;
         const GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.943755916 UTC

[section ""data" . Foreign.Ptr.$fBitsIntPtr_closure" {
     Foreign.Ptr.$fBitsIntPtr_closure:
         const Data.Bits.C:Bits_con_info;
         const Foreign.Ptr.$fEqIntPtr_closure+1;
         const Data.Bits.$fBitsInt_$c.&._closure+2;
         const Data.Bits.$fBitsInt_$c.|._closure+2;
         const Data.Bits.$fBitsInt_$cxor_closure+2;
         const Data.Bits.$fBitsInt_$ccomplement_closure+1;
         const Data.Bits.$fBitsInt_$cshift_closure+2;
         const Data.Bits.$fBitsInt_$crotate_closure+2;
         const Data.Bits.$fBitsBool2_closure;
         const Data.Bits.$fBitsInt_$cbit_closure+1;
         const Data.Bits.$fBitsInt_$csetBit_closure+2;
         const Data.Bits.$fBitsInt_$cclearBit_closure+2;
         const Data.Bits.$fBitsInt_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsInt_$ctestBit_closure+2;
         const Data.Bits.$fBitsInt_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsInt_$cfiniteBitSize_closure+1;
         const Data.Bits.$fBitsInt_$cisSigned_closure+1;
         const Data.Bits.$fBitsInt_$cshiftL_closure+2;
         const Data.Bits.$fBitsInt_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsInt_$cshiftR_closure+2;
         const Data.Bits.$fBitsInt_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsInt_$crotateL_closure+2;
         const Data.Bits.$fBitsInt_$crotateR_closure+2;
         const Data.Bits.$fBitsInt_$cpopCount_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.94596486 UTC

[section ""data" . Foreign.Ptr.$fFiniteBitsIntPtr_closure" {
     Foreign.Ptr.$fFiniteBitsIntPtr_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Foreign.Ptr.$fBitsIntPtr_closure+1;
         const Data.Bits.$fBitsInt_$cfiniteBitSize_closure+1;
         const Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_closure+1;
         const Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.947751244 UTC

[section ""data" . Foreign.Ptr.$fShowWordPtr_closure" {
     Foreign.Ptr.$fShowWordPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowWord_$cshowsPrec_closure+3;
         const GHC.Show.$fShowWord_$cshow_closure+1;
         const GHC.Show.$fShowWord_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.949646107 UTC

[section ""data" . Foreign.Ptr.$fReadWordPtr_closure" {
     Foreign.Ptr.$fReadWordPtr_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadWord_$creadsPrec_closure+2;
         const GHC.Read.$fReadWord_$creadList_closure+1;
         const GHC.Read.$fReadWord3_closure+2;
         const GHC.Read.$fReadWord1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.95146177 UTC

[section ""data" . Foreign.Ptr.$fBoundedWordPtr_closure" {
     Foreign.Ptr.$fBoundedWordPtr_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Enum.$fBoundedWord_$cminBound_closure;
         const GHC.Enum.$fBoundedWord_$cmaxBound_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.953323665 UTC

[section ""data" . Foreign.Ptr.$fStorableWordPtr_closure" {
     Foreign.Ptr.$fStorableWordPtr_closure:
         const Foreign.Storable.C:Storable_con_info;
         const Foreign.Storable.$fStorableWord_$calignment_closure+1;
         const Foreign.Storable.$fStorableWord_$calignment_closure+1;
         const GHC.Storable.readWordOffPtr1_closure+3;
         const GHC.Storable.writeWordOffPtr1_closure+4;
         const Foreign.Storable.$fStorableWord4_closure+3;
         const Foreign.Storable.$fStorableWord3_closure+4;
         const Foreign.Storable.$fStorableWord2_closure+2;
         const Foreign.Storable.$fStorableWord1_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.955188717 UTC

[section ""data" . Foreign.Ptr.$fEnumWordPtr_closure" {
     Foreign.Ptr.$fEnumWordPtr_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumWord_$csucc_closure+1;
         const GHC.Enum.$fEnumWord_$cpred_closure+1;
         const GHC.Enum.$fEnumWord_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumWord_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumWord_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumWord_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumWord_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumWord_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.957062598 UTC

[section ""data" . Foreign.Ptr.$fNumWordPtr_closure" {
     Foreign.Ptr.$fNumWordPtr_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumWord_$c+_closure+2;
         const GHC.Num.$fNumWord_$c-_closure+2;
         const GHC.Num.$fNumWord_$c*_closure+2;
         const GHC.Num.$fNumWord_$cnegate_closure+1;
         const GHC.Num.$fNumWord_$cabs_closure+1;
         const GHC.Num.$fNumWord_$csignum_closure+1;
         const GHC.Num.$fNumWord_$cfromInteger_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.958916191 UTC

[section ""data" . Foreign.Ptr.$fEqWordPtr_closure" {
     Foreign.Ptr.$fEqWordPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqWord_closure+2;
         const GHC.Classes.neWord_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.961282808 UTC

[section ""data" . Foreign.Ptr.$fOrdWordPtr_closure" {
     Foreign.Ptr.$fOrdWordPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const Foreign.Ptr.$fEqWordPtr_closure+1;
         const GHC.Classes.compareWord_closure+2;
         const GHC.Classes.ltWord_closure+2;
         const GHC.Classes.leWord_closure+2;
         const GHC.Classes.gtWord_closure+2;
         const GHC.Classes.geWord_closure+2;
         const GHC.Classes.$fOrdWord_$cmax_closure+2;
         const GHC.Classes.$fOrdWord_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.963256433 UTC

[section ""data" . Foreign.Ptr.$fRealWordPtr_closure" {
     Foreign.Ptr.$fRealWordPtr_closure:
         const GHC.Real.C:Real_con_info;
         const Foreign.Ptr.$fNumWordPtr_closure+1;
         const Foreign.Ptr.$fOrdWordPtr_closure+1;
         const GHC.Real.$fRealWord_$ctoRational_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.965006719 UTC

[section ""data" . Foreign.Ptr.$fIntegralWordPtr_closure" {
     Foreign.Ptr.$fIntegralWordPtr_closure:
         const GHC.Real.C:Integral_con_info;
         const Foreign.Ptr.$fRealWordPtr_closure+1;
         const Foreign.Ptr.$fEnumWordPtr_closure+1;
         const GHC.Real.$fIntegralWord_$cquot_closure+2;
         const GHC.Real.$fIntegralWord_$crem_closure+2;
         const GHC.Real.$fIntegralWord_$cquot_closure+2;
         const GHC.Real.$fIntegralWord_$crem_closure+2;
         const GHC.Real.$fIntegralWord_$cquotRem_closure+2;
         const GHC.Real.$fIntegralWord_$cdivMod_closure+2;
         const GHC.Real.$fIntegralWord_$ctoInteger_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.967146515 UTC

[section ""data" . Foreign.Ptr.$fBitsWordPtr_closure" {
     Foreign.Ptr.$fBitsWordPtr_closure:
         const Data.Bits.C:Bits_con_info;
         const Foreign.Ptr.$fEqWordPtr_closure+1;
         const Data.Bits.$fBitsWord_$c.&._closure+2;
         const Data.Bits.$fBitsWord_$c.|._closure+2;
         const Data.Bits.$fBitsWord_$cxor_closure+2;
         const Data.Bits.$fBitsWord_$ccomplement_closure+1;
         const Data.Bits.$fBitsWord_$cshift_closure+2;
         const Data.Bits.$fBitsWord_$crotate_closure+2;
         const Data.Bits.$fBitsWord1_closure;
         const Data.Bits.$fBitsWord_$cbit_closure+1;
         const Data.Bits.$fBitsWord_$csetBit_closure+2;
         const Data.Bits.$fBitsWord_$cclearBit_closure+2;
         const Data.Bits.$fBitsWord_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsWord_$ctestBit_closure+2;
         const Data.Bits.$fBitsWord_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsWord_$cfiniteBitSize_closure+1;
         const Data.Bits.$fBitsWord_$cisSigned_closure+1;
         const Data.Bits.$fBitsWord_$cshiftL_closure+2;
         const Data.Bits.$fBitsWord_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsWord_$cshiftR_closure+2;
         const Data.Bits.$fBitsWord_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsWord_$crotateL_closure+2;
         const Data.Bits.$fBitsWord_$crotateR_closure+2;
         const Data.Bits.$fBitsWord_$cpopCount_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.969423135 UTC

[section ""data" . Foreign.Ptr.$fFiniteBitsWordPtr_closure" {
     Foreign.Ptr.$fFiniteBitsWordPtr_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Foreign.Ptr.$fBitsWordPtr_closure+1;
         const Data.Bits.$fBitsWord_$cfiniteBitSize_closure+1;
         const Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_closure+1;
         const Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.971784213 UTC

[section ""data" . Foreign.Ptr.ptrToWordPtr_closure" {
     Foreign.Ptr.ptrToWordPtr_closure:
         const Foreign.Ptr.ptrToWordPtr_info;
 },
 Foreign.Ptr.ptrToWordPtr_entry() //  [R2]
         { info_tbl: [(c4RQ0,
                       label: Foreign.Ptr.ptrToWordPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RQ0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RQa; else goto c4RQb;
       c4RQa: // global
           R2 = R2;
           R1 = Foreign.Ptr.ptrToWordPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RQb: // global
           I64[Sp - 8] = block_c4RPX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RQf; else goto c4RPY;
       u4RQf: // global
           call _c4RPX(R1) args: 0, res: 0, upd: 0;
       c4RPY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4RPX() //  [R1]
         { info_tbl: [(c4RPX,
                       label: block_c4RPX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RPX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RQe; else goto c4RQd;
       c4RQe: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RQd: // global
           _s4RLD::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s4RLD::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.978464101 UTC

[section ""data" . Foreign.Ptr.wordPtrToPtr_closure" {
     Foreign.Ptr.wordPtrToPtr_closure:
         const Foreign.Ptr.wordPtrToPtr_info;
 },
 Foreign.Ptr.wordPtrToPtr_entry() //  [R2]
         { info_tbl: [(c4RQx,
                       label: Foreign.Ptr.wordPtrToPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RQx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RQH; else goto c4RQI;
       c4RQH: // global
           R2 = R2;
           R1 = Foreign.Ptr.wordPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RQI: // global
           I64[Sp - 8] = block_c4RQu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RQM; else goto c4RQv;
       u4RQM: // global
           call _c4RQu(R1) args: 0, res: 0, upd: 0;
       c4RQv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4RQu() //  [R1]
         { info_tbl: [(c4RQu,
                       label: block_c4RQu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RQu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RQL; else goto c4RQK;
       c4RQL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RQK: // global
           _s4RLI::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s4RLI::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.984592546 UTC

[section ""data" . Foreign.Ptr.ptrToIntPtr_closure" {
     Foreign.Ptr.ptrToIntPtr_closure:
         const Foreign.Ptr.ptrToIntPtr_info;
 },
 Foreign.Ptr.ptrToIntPtr_entry() //  [R2]
         { info_tbl: [(c4RR4,
                       label: Foreign.Ptr.ptrToIntPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RR4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RRb; else goto c4RRc;
       c4RRb: // global
           R2 = R2;
           R1 = Foreign.Ptr.ptrToIntPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RRc: // global
           I64[Sp - 8] = block_c4RR1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RRg; else goto c4RR2;
       u4RRg: // global
           call _c4RR1(R1) args: 0, res: 0, upd: 0;
       c4RR2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4RR1() //  [R1]
         { info_tbl: [(c4RR1,
                       label: block_c4RR1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RR1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RRf; else goto c4RRe;
       c4RRf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RRe: // global
           _s4RLM::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s4RLM::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.990923478 UTC

[section ""data" . Foreign.Ptr.intPtrToPtr_closure" {
     Foreign.Ptr.intPtrToPtr_closure:
         const Foreign.Ptr.intPtrToPtr_info;
 },
 Foreign.Ptr.intPtrToPtr_entry() //  [R2]
         { info_tbl: [(c4RRy,
                       label: Foreign.Ptr.intPtrToPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RRy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RRF; else goto c4RRG;
       c4RRF: // global
           R2 = R2;
           R1 = Foreign.Ptr.intPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RRG: // global
           I64[Sp - 8] = block_c4RRv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RRK; else goto c4RRw;
       u4RRK: // global
           call _c4RRv(R1) args: 0, res: 0, upd: 0;
       c4RRw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4RRv() //  [R1]
         { info_tbl: [(c4RRv,
                       label: block_c4RRv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RRv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RRJ; else goto c4RRI;
       c4RRJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RRI: // global
           _s4RLQ::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s4RLQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.997959752 UTC

[section ""cstring" . Foreign.Ptr.$trModule4_bytes" {
     Foreign.Ptr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:45.999597257 UTC

[section ""data" . Foreign.Ptr.$trModule3_closure" {
     Foreign.Ptr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.001301576 UTC

[section ""cstring" . Foreign.Ptr.$trModule2_bytes" {
     Foreign.Ptr.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.00296384 UTC

[section ""data" . Foreign.Ptr.$trModule1_closure" {
     Foreign.Ptr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.004507228 UTC

[section ""data" . Foreign.Ptr.$trModule_closure" {
     Foreign.Ptr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.Ptr.$trModule3_closure+1;
         const Foreign.Ptr.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.006265805 UTC

[section ""data" . $krep_r4RLt_closure" {
     $krep_r4RLt_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.007859035 UTC

[section ""data" . $krep1_r4RLu_closure" {
     $krep1_r4RLu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.009516234 UTC

[section ""cstring" . Foreign.Ptr.$tcWordPtr2_bytes" {
     Foreign.Ptr.$tcWordPtr2_bytes:
         I8[] [87,111,114,100,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.011119121 UTC

[section ""data" . Foreign.Ptr.$tcWordPtr1_closure" {
     Foreign.Ptr.$tcWordPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tcWordPtr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.012841854 UTC

[section ""data" . Foreign.Ptr.$tcWordPtr_closure" {
     Foreign.Ptr.$tcWordPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tcWordPtr1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10827112719629138107;
         const 3588783739676187441;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.015109004 UTC

[section ""data" . $krep2_r4RLv_closure" {
     $krep2_r4RLv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.Ptr.$tcWordPtr_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.016806891 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr1_closure" {
     Foreign.Ptr.$tc'WordPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r4RLt_closure+1;
         const $krep2_r4RLv_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.018631243 UTC

[section ""cstring" . Foreign.Ptr.$tc'WordPtr3_bytes" {
     Foreign.Ptr.$tc'WordPtr3_bytes:
         I8[] [39,87,111,114,100,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.020244126 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr2_closure" {
     Foreign.Ptr.$tc'WordPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tc'WordPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.022574898 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr_closure" {
     Foreign.Ptr.$tc'WordPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tc'WordPtr2_closure+1;
         const Foreign.Ptr.$tc'WordPtr1_closure+4;
         const 15588862172907192371;
         const 13878995573910308719;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.024421157 UTC

[section ""cstring" . Foreign.Ptr.$tcIntPtr2_bytes" {
     Foreign.Ptr.$tcIntPtr2_bytes:
         I8[] [73,110,116,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.026083902 UTC

[section ""data" . Foreign.Ptr.$tcIntPtr1_closure" {
     Foreign.Ptr.$tcIntPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tcIntPtr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.027769231 UTC

[section ""data" . Foreign.Ptr.$tcIntPtr_closure" {
     Foreign.Ptr.$tcIntPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tcIntPtr1_closure+1;
         const GHC.Types.krep$*_closure;
         const 12538429555661790394;
         const 9943980142794044772;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.03031874 UTC

[section ""data" . $krep3_r4RLw_closure" {
     $krep3_r4RLw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.Ptr.$tcIntPtr_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.032083451 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr1_closure" {
     Foreign.Ptr.$tc'IntPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r4RLu_closure+1;
         const $krep3_r4RLw_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.033840095 UTC

[section ""cstring" . Foreign.Ptr.$tc'IntPtr3_bytes" {
     Foreign.Ptr.$tc'IntPtr3_bytes:
         I8[] [39,73,110,116,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.035517706 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr2_closure" {
     Foreign.Ptr.$tc'IntPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tc'IntPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.037232498 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr_closure" {
     Foreign.Ptr.$tc'IntPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tc'IntPtr2_closure+1;
         const Foreign.Ptr.$tc'IntPtr1_closure+4;
         const 17038100807295602145;
         const 4458611784149765752;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.039483223 UTC

[section ""data" . freeHaskellFunPtr1_r4RLx_closure" {
     freeHaskellFunPtr1_r4RLx_closure:
         const freeHaskellFunPtr1_r4RLx_info;
 },
 freeHaskellFunPtr1_r4RLx_entry() //  [R2]
         { info_tbl: [(c4RSp,
                       label: freeHaskellFunPtr1_r4RLx_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RSp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RSq; else goto c4RSr;
       c4RSq: // global
           R2 = R2;
           R1 = freeHaskellFunPtr1_r4RLx_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RSr: // global
           I64[Sp - 8] = block_c4RSm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RSx; else goto c4RSn;
       u4RSx: // global
           call _c4RSm(R1) args: 0, res: 0, upd: 0;
       c4RSn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4RSm() //  [R1]
         { info_tbl: [(c4RSm,
                       label: block_c4RSm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RSm: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] freeHaskellFunctionPtr(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.045131906 UTC

[section ""data" . Foreign.Ptr.freeHaskellFunPtr_closure" {
     Foreign.Ptr.freeHaskellFunPtr_closure:
         const Foreign.Ptr.freeHaskellFunPtr_info;
 },
 Foreign.Ptr.freeHaskellFunPtr_entry() //  [R2]
         { info_tbl: [(c4RSM,
                       label: Foreign.Ptr.freeHaskellFunPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RSM: // global
           R2 = R2;
           call freeHaskellFunPtr1_r4RLx_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.048836053 UTC

[section ""relreadonly" . S4RNJ_srt" { S4RNJ_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.476241496 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:59:46.477943773 UTC

[section ""data" . Foreign.Ptr.$fShowIntPtr_closure" {
     Foreign.Ptr.$fShowIntPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.showSignedInt_closure+3;
         const GHC.Show.$fShowInt_$cshow_closure+1;
         const GHC.Show.$fShowInt_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.480778277 UTC

[section ""data" . Foreign.Ptr.$fReadIntPtr_closure" {
     Foreign.Ptr.$fReadIntPtr_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadInt_$creadsPrec_closure+1;
         const GHC.Read.$fReadInt_$creadList_closure+1;
         const GHC.Read.$fReadInt1_closure+2;
         const GHC.Read.$fReadInt_$creadListPrec_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.483445819 UTC

[section ""data" . Foreign.Ptr.$fBoundedIntPtr_closure" {
     Foreign.Ptr.$fBoundedIntPtr_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Base.minInt_closure;
         const GHC.Base.maxInt_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.486159984 UTC

[section ""data" . Foreign.Ptr.$fStorableIntPtr_closure" {
     Foreign.Ptr.$fStorableIntPtr_closure:
         const Foreign.Storable.C:Storable_con_info;
         const Foreign.Storable.$fStorableInt_$calignment_closure+1;
         const Foreign.Storable.$fStorableInt_$calignment_closure+1;
         const GHC.Storable.readIntOffPtr1_closure+3;
         const GHC.Storable.writeIntOffPtr1_closure+4;
         const Foreign.Storable.$fStorableInt4_closure+3;
         const Foreign.Storable.$fStorableInt3_closure+4;
         const Foreign.Storable.$fStorableInt2_closure+2;
         const Foreign.Storable.$fStorableInt1_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.488995079 UTC

[section ""data" . Foreign.Ptr.$fEnumIntPtr_closure" {
     Foreign.Ptr.$fEnumIntPtr_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumInt_$csucc_closure+1;
         const GHC.Enum.$fEnumInt_$cpred_closure+1;
         const GHC.Enum.$fEnumInt_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInt_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInt_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumInt_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumInt_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumInt_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.49191416 UTC

[section ""data" . Foreign.Ptr.$fNumIntPtr_closure" {
     Foreign.Ptr.$fNumIntPtr_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumInt_$c+_closure+2;
         const GHC.Num.$fNumInt_$c-_closure+2;
         const GHC.Num.$fNumInt_$c*_closure+2;
         const GHC.Num.$fNumInt_$cnegate_closure+1;
         const GHC.Num.$fNumInt_$cabs_closure+1;
         const GHC.Num.$fNumInt_$csignum_closure+1;
         const GHC.Num.$fNumInt_$cfromInteger_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.494886758 UTC

[section ""data" . Foreign.Ptr.$fEqIntPtr_closure" {
     Foreign.Ptr.$fEqIntPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqInt_closure+2;
         const GHC.Classes.neInt_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.497531194 UTC

[section ""data" . Foreign.Ptr.$fOrdIntPtr_closure" {
     Foreign.Ptr.$fOrdIntPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const Foreign.Ptr.$fEqIntPtr_closure+1;
         const GHC.Classes.compareInt_closure+2;
         const GHC.Classes.ltInt_closure+2;
         const GHC.Classes.leInt_closure+2;
         const GHC.Classes.gtInt_closure+2;
         const GHC.Classes.geInt_closure+2;
         const GHC.Classes.$fOrdInt_$cmax_closure+2;
         const GHC.Classes.$fOrdInt_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.500218218 UTC

[section ""data" . Foreign.Ptr.$fRealIntPtr_closure" {
     Foreign.Ptr.$fRealIntPtr_closure:
         const GHC.Real.C:Real_con_info;
         const Foreign.Ptr.$fNumIntPtr_closure+1;
         const Foreign.Ptr.$fOrdIntPtr_closure+1;
         const GHC.Real.$fEnumRatio_$ctoRational_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.502865662 UTC

[section ""data" . Foreign.Ptr.$fIntegralIntPtr_closure" {
     Foreign.Ptr.$fIntegralIntPtr_closure:
         const GHC.Real.C:Integral_con_info;
         const Foreign.Ptr.$fRealIntPtr_closure+1;
         const Foreign.Ptr.$fEnumIntPtr_closure+1;
         const GHC.Real.$fIntegralInt_$cquot_closure+2;
         const GHC.Real.$fIntegralInt_$crem_closure+2;
         const GHC.Real.$fIntegralInt_$cdiv_closure+2;
         const GHC.Real.$fIntegralInt_$cmod_closure+2;
         const GHC.Real.$fIntegralInt_$cquotRem_closure+2;
         const GHC.Real.$fIntegralInt_$cdivMod_closure+2;
         const GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.505880323 UTC

[section ""data" . Foreign.Ptr.$fBitsIntPtr_closure" {
     Foreign.Ptr.$fBitsIntPtr_closure:
         const Data.Bits.C:Bits_con_info;
         const Foreign.Ptr.$fEqIntPtr_closure+1;
         const Data.Bits.$fBitsInt_$c.&._closure+2;
         const Data.Bits.$fBitsInt_$c.|._closure+2;
         const Data.Bits.$fBitsInt_$cxor_closure+2;
         const Data.Bits.$fBitsInt_$ccomplement_closure+1;
         const Data.Bits.$fBitsInt_$cshift_closure+2;
         const Data.Bits.$fBitsInt_$crotate_closure+2;
         const Data.Bits.$fBitsBool2_closure;
         const Data.Bits.$fBitsInt_$cbit_closure+1;
         const Data.Bits.$fBitsInt_$csetBit_closure+2;
         const Data.Bits.$fBitsInt_$cclearBit_closure+2;
         const Data.Bits.$fBitsInt_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsInt_$ctestBit_closure+2;
         const Data.Bits.$fBitsInt_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsInt_$cfiniteBitSize_closure+1;
         const Data.Bits.$fBitsInt_$cisSigned_closure+1;
         const Data.Bits.$fBitsInt_$cshiftL_closure+2;
         const Data.Bits.$fBitsInt_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsInt_$cshiftR_closure+2;
         const Data.Bits.$fBitsInt_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsInt_$crotateL_closure+2;
         const Data.Bits.$fBitsInt_$crotateR_closure+2;
         const Data.Bits.$fBitsInt_$cpopCount_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.510502403 UTC

[section ""data" . Foreign.Ptr.$fFiniteBitsIntPtr_closure" {
     Foreign.Ptr.$fFiniteBitsIntPtr_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Foreign.Ptr.$fBitsIntPtr_closure+1;
         const Data.Bits.$fBitsInt_$cfiniteBitSize_closure+1;
         const Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_closure+1;
         const Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.513378992 UTC

[section ""data" . Foreign.Ptr.$fShowWordPtr_closure" {
     Foreign.Ptr.$fShowWordPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowWord_$cshowsPrec_closure+3;
         const GHC.Show.$fShowWord_$cshow_closure+1;
         const GHC.Show.$fShowWord_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.516129517 UTC

[section ""data" . Foreign.Ptr.$fReadWordPtr_closure" {
     Foreign.Ptr.$fReadWordPtr_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadWord_$creadsPrec_closure+2;
         const GHC.Read.$fReadWord_$creadList_closure+1;
         const GHC.Read.$fReadWord3_closure+2;
         const GHC.Read.$fReadWord1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.519126805 UTC

[section ""data" . Foreign.Ptr.$fBoundedWordPtr_closure" {
     Foreign.Ptr.$fBoundedWordPtr_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Enum.$fBoundedWord_$cminBound_closure;
         const GHC.Enum.$fBoundedWord_$cmaxBound_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.522143622 UTC

[section ""data" . Foreign.Ptr.$fStorableWordPtr_closure" {
     Foreign.Ptr.$fStorableWordPtr_closure:
         const Foreign.Storable.C:Storable_con_info;
         const Foreign.Storable.$fStorableWord_$calignment_closure+1;
         const Foreign.Storable.$fStorableWord_$calignment_closure+1;
         const GHC.Storable.readWordOffPtr1_closure+3;
         const GHC.Storable.writeWordOffPtr1_closure+4;
         const Foreign.Storable.$fStorableWord4_closure+3;
         const Foreign.Storable.$fStorableWord3_closure+4;
         const Foreign.Storable.$fStorableWord2_closure+2;
         const Foreign.Storable.$fStorableWord1_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.525504554 UTC

[section ""data" . Foreign.Ptr.$fEnumWordPtr_closure" {
     Foreign.Ptr.$fEnumWordPtr_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumWord_$csucc_closure+1;
         const GHC.Enum.$fEnumWord_$cpred_closure+1;
         const GHC.Enum.$fEnumWord_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumWord_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumWord_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumWord_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumWord_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumWord_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.528640096 UTC

[section ""data" . Foreign.Ptr.$fNumWordPtr_closure" {
     Foreign.Ptr.$fNumWordPtr_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumWord_$c+_closure+2;
         const GHC.Num.$fNumWord_$c-_closure+2;
         const GHC.Num.$fNumWord_$c*_closure+2;
         const GHC.Num.$fNumWord_$cnegate_closure+1;
         const GHC.Num.$fNumWord_$cabs_closure+1;
         const GHC.Num.$fNumWord_$csignum_closure+1;
         const GHC.Num.$fNumWord_$cfromInteger_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.531804321 UTC

[section ""data" . Foreign.Ptr.$fEqWordPtr_closure" {
     Foreign.Ptr.$fEqWordPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqWord_closure+2;
         const GHC.Classes.neWord_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.53488805 UTC

[section ""data" . Foreign.Ptr.$fOrdWordPtr_closure" {
     Foreign.Ptr.$fOrdWordPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const Foreign.Ptr.$fEqWordPtr_closure+1;
         const GHC.Classes.compareWord_closure+2;
         const GHC.Classes.ltWord_closure+2;
         const GHC.Classes.leWord_closure+2;
         const GHC.Classes.gtWord_closure+2;
         const GHC.Classes.geWord_closure+2;
         const GHC.Classes.$fOrdWord_$cmax_closure+2;
         const GHC.Classes.$fOrdWord_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.538130423 UTC

[section ""data" . Foreign.Ptr.$fRealWordPtr_closure" {
     Foreign.Ptr.$fRealWordPtr_closure:
         const GHC.Real.C:Real_con_info;
         const Foreign.Ptr.$fNumWordPtr_closure+1;
         const Foreign.Ptr.$fOrdWordPtr_closure+1;
         const GHC.Real.$fRealWord_$ctoRational_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.540972487 UTC

[section ""data" . Foreign.Ptr.$fIntegralWordPtr_closure" {
     Foreign.Ptr.$fIntegralWordPtr_closure:
         const GHC.Real.C:Integral_con_info;
         const Foreign.Ptr.$fRealWordPtr_closure+1;
         const Foreign.Ptr.$fEnumWordPtr_closure+1;
         const GHC.Real.$fIntegralWord_$cquot_closure+2;
         const GHC.Real.$fIntegralWord_$crem_closure+2;
         const GHC.Real.$fIntegralWord_$cquot_closure+2;
         const GHC.Real.$fIntegralWord_$crem_closure+2;
         const GHC.Real.$fIntegralWord_$cquotRem_closure+2;
         const GHC.Real.$fIntegralWord_$cdivMod_closure+2;
         const GHC.Real.$fIntegralWord_$ctoInteger_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.544277976 UTC

[section ""data" . Foreign.Ptr.$fBitsWordPtr_closure" {
     Foreign.Ptr.$fBitsWordPtr_closure:
         const Data.Bits.C:Bits_con_info;
         const Foreign.Ptr.$fEqWordPtr_closure+1;
         const Data.Bits.$fBitsWord_$c.&._closure+2;
         const Data.Bits.$fBitsWord_$c.|._closure+2;
         const Data.Bits.$fBitsWord_$cxor_closure+2;
         const Data.Bits.$fBitsWord_$ccomplement_closure+1;
         const Data.Bits.$fBitsWord_$cshift_closure+2;
         const Data.Bits.$fBitsWord_$crotate_closure+2;
         const Data.Bits.$fBitsWord1_closure;
         const Data.Bits.$fBitsWord_$cbit_closure+1;
         const Data.Bits.$fBitsWord_$csetBit_closure+2;
         const Data.Bits.$fBitsWord_$cclearBit_closure+2;
         const Data.Bits.$fBitsWord_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsWord_$ctestBit_closure+2;
         const Data.Bits.$fBitsWord_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsWord_$cfiniteBitSize_closure+1;
         const Data.Bits.$fBitsWord_$cisSigned_closure+1;
         const Data.Bits.$fBitsWord_$cshiftL_closure+2;
         const Data.Bits.$fBitsWord_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsWord_$cshiftR_closure+2;
         const Data.Bits.$fBitsWord_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsWord_$crotateL_closure+2;
         const Data.Bits.$fBitsWord_$crotateR_closure+2;
         const Data.Bits.$fBitsWord_$cpopCount_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.548116936 UTC

[section ""data" . Foreign.Ptr.$fFiniteBitsWordPtr_closure" {
     Foreign.Ptr.$fFiniteBitsWordPtr_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Foreign.Ptr.$fBitsWordPtr_closure+1;
         const Data.Bits.$fBitsWord_$cfiniteBitSize_closure+1;
         const Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_closure+1;
         const Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.552202328 UTC

[section ""data" . Foreign.Ptr.ptrToWordPtr_closure" {
     Foreign.Ptr.ptrToWordPtr_closure:
         const Foreign.Ptr.ptrToWordPtr_info;
 },
 Foreign.Ptr.ptrToWordPtr_entry() //  [R2]
         { info_tbl: [(c4RTO,
                       label: Foreign.Ptr.ptrToWordPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RTO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RTY; else goto c4RTZ;
       c4RTY: // global
           R2 = R2;
           R1 = Foreign.Ptr.ptrToWordPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RTZ: // global
           I64[Sp - 8] = block_c4RTL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RU3; else goto c4RTM;
       u4RU3: // global
           call _c4RTL(R1) args: 0, res: 0, upd: 0;
       c4RTM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4RTL() //  [R1]
         { info_tbl: [(c4RTL,
                       label: block_c4RTL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RTL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RU2; else goto c4RU1;
       c4RU2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RU1: // global
           _s4RSY::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s4RSY::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.564368753 UTC

[section ""data" . Foreign.Ptr.wordPtrToPtr_closure" {
     Foreign.Ptr.wordPtrToPtr_closure:
         const Foreign.Ptr.wordPtrToPtr_info;
 },
 Foreign.Ptr.wordPtrToPtr_entry() //  [R2]
         { info_tbl: [(c4RUn,
                       label: Foreign.Ptr.wordPtrToPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RUn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RUx; else goto c4RUy;
       c4RUx: // global
           R2 = R2;
           R1 = Foreign.Ptr.wordPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RUy: // global
           I64[Sp - 8] = block_c4RUk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RUC; else goto c4RUl;
       u4RUC: // global
           call _c4RUk(R1) args: 0, res: 0, upd: 0;
       c4RUl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4RUk() //  [R1]
         { info_tbl: [(c4RUk,
                       label: block_c4RUk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RUk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RUB; else goto c4RUA;
       c4RUB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RUA: // global
           _s4RT3::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s4RT3::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.574225192 UTC

[section ""data" . Foreign.Ptr.ptrToIntPtr_closure" {
     Foreign.Ptr.ptrToIntPtr_closure:
         const Foreign.Ptr.ptrToIntPtr_info;
 },
 Foreign.Ptr.ptrToIntPtr_entry() //  [R2]
         { info_tbl: [(c4RUW,
                       label: Foreign.Ptr.ptrToIntPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RUW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RV3; else goto c4RV4;
       c4RV3: // global
           R2 = R2;
           R1 = Foreign.Ptr.ptrToIntPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RV4: // global
           I64[Sp - 8] = block_c4RUT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RV8; else goto c4RUU;
       u4RV8: // global
           call _c4RUT(R1) args: 0, res: 0, upd: 0;
       c4RUU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4RUT() //  [R1]
         { info_tbl: [(c4RUT,
                       label: block_c4RUT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RUT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RV7; else goto c4RV6;
       c4RV7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RV6: // global
           _s4RT7::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s4RT7::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.585705848 UTC

[section ""data" . Foreign.Ptr.intPtrToPtr_closure" {
     Foreign.Ptr.intPtrToPtr_closure:
         const Foreign.Ptr.intPtrToPtr_info;
 },
 Foreign.Ptr.intPtrToPtr_entry() //  [R2]
         { info_tbl: [(c4RVs,
                       label: Foreign.Ptr.intPtrToPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RVs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RVz; else goto c4RVA;
       c4RVz: // global
           R2 = R2;
           R1 = Foreign.Ptr.intPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RVA: // global
           I64[Sp - 8] = block_c4RVp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RVE; else goto c4RVq;
       u4RVE: // global
           call _c4RVp(R1) args: 0, res: 0, upd: 0;
       c4RVq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4RVp() //  [R1]
         { info_tbl: [(c4RVp,
                       label: block_c4RVp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RVp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4RVD; else goto c4RVC;
       c4RVD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4RVC: // global
           _s4RTb::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s4RTb::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.594561281 UTC

[section ""cstring" . Foreign.Ptr.$trModule4_bytes" {
     Foreign.Ptr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.597154993 UTC

[section ""data" . Foreign.Ptr.$trModule3_closure" {
     Foreign.Ptr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.599329746 UTC

[section ""cstring" . Foreign.Ptr.$trModule2_bytes" {
     Foreign.Ptr.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.601023706 UTC

[section ""data" . Foreign.Ptr.$trModule1_closure" {
     Foreign.Ptr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.602932108 UTC

[section ""data" . Foreign.Ptr.$trModule_closure" {
     Foreign.Ptr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.Ptr.$trModule3_closure+1;
         const Foreign.Ptr.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.604738646 UTC

[section ""data" . $krep_r4RLt_closure" {
     $krep_r4RLt_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.607144953 UTC

[section ""data" . $krep1_r4RLu_closure" {
     $krep1_r4RLu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.608958818 UTC

[section ""cstring" . Foreign.Ptr.$tcWordPtr2_bytes" {
     Foreign.Ptr.$tcWordPtr2_bytes:
         I8[] [87,111,114,100,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.61073857 UTC

[section ""data" . Foreign.Ptr.$tcWordPtr1_closure" {
     Foreign.Ptr.$tcWordPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tcWordPtr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.612471922 UTC

[section ""data" . Foreign.Ptr.$tcWordPtr_closure" {
     Foreign.Ptr.$tcWordPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tcWordPtr1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10827112719629138107;
         const 3588783739676187441;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.614490631 UTC

[section ""data" . $krep2_r4RLv_closure" {
     $krep2_r4RLv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.Ptr.$tcWordPtr_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.6162999 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr1_closure" {
     Foreign.Ptr.$tc'WordPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r4RLt_closure+1;
         const $krep2_r4RLv_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.618159395 UTC

[section ""cstring" . Foreign.Ptr.$tc'WordPtr3_bytes" {
     Foreign.Ptr.$tc'WordPtr3_bytes:
         I8[] [39,87,111,114,100,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.619927698 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr2_closure" {
     Foreign.Ptr.$tc'WordPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tc'WordPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.62250897 UTC

[section ""data" . Foreign.Ptr.$tc'WordPtr_closure" {
     Foreign.Ptr.$tc'WordPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tc'WordPtr2_closure+1;
         const Foreign.Ptr.$tc'WordPtr1_closure+4;
         const 15588862172907192371;
         const 13878995573910308719;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.624460364 UTC

[section ""cstring" . Foreign.Ptr.$tcIntPtr2_bytes" {
     Foreign.Ptr.$tcIntPtr2_bytes:
         I8[] [73,110,116,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.626220643 UTC

[section ""data" . Foreign.Ptr.$tcIntPtr1_closure" {
     Foreign.Ptr.$tcIntPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tcIntPtr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.628058902 UTC

[section ""data" . Foreign.Ptr.$tcIntPtr_closure" {
     Foreign.Ptr.$tcIntPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tcIntPtr1_closure+1;
         const GHC.Types.krep$*_closure;
         const 12538429555661790394;
         const 9943980142794044772;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.630107703 UTC

[section ""data" . $krep3_r4RLw_closure" {
     $krep3_r4RLw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.Ptr.$tcIntPtr_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.631840711 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr1_closure" {
     Foreign.Ptr.$tc'IntPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r4RLu_closure+1;
         const $krep3_r4RLw_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.633731142 UTC

[section ""cstring" . Foreign.Ptr.$tc'IntPtr3_bytes" {
     Foreign.Ptr.$tc'IntPtr3_bytes:
         I8[] [39,73,110,116,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.636080614 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr2_closure" {
     Foreign.Ptr.$tc'IntPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.Ptr.$tc'IntPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.637960811 UTC

[section ""data" . Foreign.Ptr.$tc'IntPtr_closure" {
     Foreign.Ptr.$tc'IntPtr_closure:
         const GHC.Types.TyCon_con_info;
         const Foreign.Ptr.$trModule_closure+1;
         const Foreign.Ptr.$tc'IntPtr2_closure+1;
         const Foreign.Ptr.$tc'IntPtr1_closure+4;
         const 17038100807295602145;
         const 4458611784149765752;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.640332914 UTC

[section ""data" . freeHaskellFunPtr1_r4RLx_closure" {
     freeHaskellFunPtr1_r4RLx_closure:
         const freeHaskellFunPtr1_r4RLx_info;
 },
 freeHaskellFunPtr1_r4RLx_entry() //  [R2]
         { info_tbl: [(c4RWl,
                       label: freeHaskellFunPtr1_r4RLx_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RWl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4RWm; else goto c4RWn;
       c4RWm: // global
           R2 = R2;
           R1 = freeHaskellFunPtr1_r4RLx_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4RWn: // global
           I64[Sp - 8] = block_c4RWi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4RWt; else goto c4RWj;
       u4RWt: // global
           call _c4RWi(R1) args: 0, res: 0, upd: 0;
       c4RWj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c4RWi() //  [R1]
         { info_tbl: [(c4RWi,
                       label: block_c4RWi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RWi: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] freeHaskellFunctionPtr(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.647138209 UTC

[section ""data" . Foreign.Ptr.freeHaskellFunPtr_closure" {
     Foreign.Ptr.freeHaskellFunPtr_closure:
         const Foreign.Ptr.freeHaskellFunPtr_info;
 },
 Foreign.Ptr.freeHaskellFunPtr_entry() //  [R2]
         { info_tbl: [(c4RWK,
                       label: Foreign.Ptr.freeHaskellFunPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c4RWK: // global
           R2 = R2;
           call freeHaskellFunPtr1_r4RLx_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:46.650563264 UTC

[section ""relreadonly" . S4RWR_srt" { S4RWR_srt:
 }]

