
==================== Raw Cmm ====================
2018-03-16 16:04:07.672342308 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:04:07.673416589 UTC

[section ""cstring" . Foreign.C.String.$trModule4_bytes" {
     Foreign.C.String.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.675210506 UTC

[section ""data" . Foreign.C.String.$trModule3_closure" {
     Foreign.C.String.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.C.String.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.676906927 UTC

[section ""cstring" . Foreign.C.String.$trModule2_bytes" {
     Foreign.C.String.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,67,46,83,116,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.678790966 UTC

[section ""data" . Foreign.C.String.$trModule1_closure" {
     Foreign.C.String.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.C.String.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.680532233 UTC

[section ""data" . Foreign.C.String.$trModule_closure" {
     Foreign.C.String.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.C.String.$trModule3_closure+1;
         const Foreign.C.String.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.688400724 UTC

[section ""data" . Foreign.C.String.withCStringLen1_closure" {
     Foreign.C.String.withCStringLen1_closure:
         const Foreign.C.String.withCStringLen1_info;
         const 0;
 },
 $wgo_s8YpD_entry() //  [R1, R2]
         { []
         }
     {offset
       c8ZD0: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c8ZD1; else goto c8ZD2;
       c8ZD1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ZD2: // global
           I64[Sp - 48] = block_c8ZCV_info;
           _s8YpD::P64 = R1;
           _s8Ypc::P64 = P64[R1 + 6];
           _s8Ypl::P64 = P64[R1 + 14];
           _s8YpC::P64 = P64[R1 + 22];
           R1 = R2;
           P64[Sp - 40] = _s8Ypc::P64;
           P64[Sp - 32] = _s8Ypl::P64;
           P64[Sp - 24] = _s8YpC::P64;
           P64[Sp - 16] = _s8YpD::P64;
           I64[Sp - 8] = R2;
           Sp = Sp - 48;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s8YpD_info" {
     $wgo_s8YpD_info:
         const $wgo_s8YpD_entry;
         const 3;
         const 8;
         const 8589934596;
 },
 _c8ZCV() //  [R1]
         { []
         }
     {offset
       c8ZCV: // global
           I64[Sp] = block_c8ZCX_info;
           _s8YpL::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s8YpL::P64;
           if (R1 & 7 != 0) goto u8ZDB; else goto c8ZCY;
       u8ZDB: // global
           call _c8ZCX(R1) args: 0, res: 0, upd: 0;
       c8ZCY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZCV_info" {
     block_c8ZCV_info:
         const _c8ZCV;
         const 1029;
         const 30;
 },
 _c8ZCX() //  [R1]
         { []
         }
     {offset
       c8ZCX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8ZD8; else goto c8ZD7;
       c8ZD8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ZD7: // global
           _s8YpN::P64 = P64[R1 + 7];
           _s8YpO::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 40];
           _s8Ypc::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8ZDd_info;
           R6 = P64[Sp + 16] + 16;
           R5 = P64[Sp + 24];
           R4 = GHC.Types.False_closure+1;
           R3 = _s8YpO::P64;
           R2 = _s8YpN::P64;
           P64[Sp - 8] = Hp - 7;
           P64[Sp] = _s8Ypc::P64;
           Sp = Sp - 8;
           call GHC.Foreign.$wtryFillBufferAndCall_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZCX_info" {
     block_c8ZCX_info:
         const _c8ZCX;
         const 1029;
         const 30;
 },
 _c8ZDd() //  [R1]
         { []
         }
     {offset
       c8ZDd: // global
           I64[Sp] = block_c8ZDf_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8ZDC; else goto c8ZDh;
       u8ZDC: // global
           call _c8ZDf(R1) args: 0, res: 0, upd: 0;
       c8ZDh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZDd_info" {
     block_c8ZDd_info:
         const _c8ZDd;
         const 644;
         const 30;
 },
 _c8ZDf() //  [R1]
         { []
         }
     {offset
       c8ZDf: // global
           if (R1 & 7 == 1) goto c8ZDr; else goto c8ZDx;
       c8ZDr: // global
           I64[Sp] = block_c8ZDp_info;
           R2 = I64[Sp + 32] << 1;
           R1 = P64[Sp + 24];
           call $wgo_s8YpD_entry(R2, R1) args: 8, res: 8, upd: 8;
       c8ZDx: // global
           _s8Yq3::P64 = P64[R1 + 6];
           call MO_Touch(P64[Sp + 8]);
           R1 = _s8Yq3::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZDf_info" {
     block_c8ZDf_info:
         const _c8ZDf;
         const 644;
         const 30;
 },
 _c8ZDp() //  [R1]
         { []
         }
     {offset
       c8ZDp: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZDp_info" {
     block_c8ZDp_info:
         const _c8ZDp;
         const 900;
         const 30;
 },
 sat_s8Yql_entry() //  [R1, R2]
         { []
         }
     {offset
       c8ZDD: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8ZDE; else goto c8ZDF;
       c8ZDE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ZDF: // global
           I64[Sp - 32] = block_c8ZCv_info;
           R3 = 0;
           _s8Ypl::P64 = R2;
           _s8Ypb::P64 = P64[R1 + 6];
           R2 = _s8Ypb::P64;
           P64[Sp - 24] = _s8Ypb::P64;
           P64[Sp - 16] = P64[R1 + 14];
           P64[Sp - 8] = _s8Ypl::P64;
           Sp = Sp - 32;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8Yql_info" {
     sat_s8Yql_info:
         const sat_s8Yql_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c8ZCv() //  [R1]
         { []
         }
     {offset
       c8ZCv: // global
           I64[Sp - 8] = block_c8ZCC_info;
           R2 = 4;
           _s8Ypn::I64 = R1;
           R1 = R1 << 2;
           I64[Sp] = _s8Ypn::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZCv_info" {
     block_c8ZCv_info:
         const _c8ZCv;
         const 3;
         const 30;
 },
 _c8ZCC() //  [R1]
         { []
         }
     {offset
       c8ZCC: // global
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _c8ZDU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ZCC_info" {
     block_c8ZCC_info:
         const _c8ZCC;
         const 68;
         const 30;
 },
 _c8ZDU() //  []
         { []
         }
     {offset
       c8ZDU: // global
           _s8Yqb::P64 = P64[Sp];
           I64[Sp] = block_c8ZDX_info;
           R1 = _s8Yqb::P64;
           if (R1 & 7 != 0) goto u8ZEm; else goto c8ZDZ;
       u8ZEm: // global
           call _c8ZDX(R1) args: 0, res: 0, upd: 0;
       c8ZDZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8ZDX() //  [R1]
         { []
         }
     {offset
       c8ZDX: // global
           if (R1 & 7 == 1) goto c8ZE5; else goto c8ZEa;
       c8ZE5: // global
           I64[Sp + 8] = block_c8ZCM_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c8ZEa: // global
           I64[Sp - 8] = block_c8ZE8_info;
           _s8Yqg::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s8Yqg::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8ZEn; else goto c8ZEb;
       u8ZEn: // global
           call _c8ZE8(R1) args: 0, res: 0, upd: 0;
       c8ZEb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZDX_info" {
     block_c8ZDX_info:
         const _c8ZDX;
         const 454;
         const 30;
 },
 _c8ZCM() //  [R1]
         { []
         }
     {offset
       c8ZCM: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c8ZDL; else goto c8ZDK;
       c8ZDL: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ZDK: // global
           I64[Hp - 96] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 88] = R1;
           I64[Hp - 80] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 72] = Hp - 95;
           P64[Hp - 64] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 56] = I64[Sp + 8];
           _s8Ypn::I64 = I64[Sp + 16];
           I64[Hp - 48] = _s8Ypn::I64;
           I64[Hp - 40] = 0;
           I64[Hp - 32] = _s8Ypn::I64;
           I64[Hp - 24] = $wgo_s8YpD_info;
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = Hp - 79;
           I64[Sp + 16] = block_c8ZDP_info;
           R2 = _s8Ypn::I64 + 1;
           R1 = Hp - 22;
           Sp = Sp + 16;
           call $wgo_s8YpD_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZCM_info" {
     block_c8ZCM_info:
         const _c8ZCM;
         const 197;
         const 30;
 },
 _c8ZDP() //  [R1]
         { []
         }
     {offset
       c8ZDP: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZDP_info" {
     block_c8ZDP_info:
         const _c8ZDP;
         const 387;
         const 30;
 },
 _c8ZE8() //  [R1]
         { []
         }
     {offset
       c8ZE8: // global
           _s8Yqc::I64 = I64[Sp + 16];
           _s8Yqg::P64 = P64[Sp + 8];
           I32[I64[Sp + 24] + (_s8Yqc::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           P64[Sp + 8] = _s8Yqg::P64;
           I64[Sp + 16] = _s8Yqc::I64 + 1;
           Sp = Sp + 8;
           call _c8ZDU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ZE8_info" {
     block_c8ZE8_info:
         const _c8ZE8;
         const 903;
         const 30;
 },
 Foreign.C.String.withCStringLen1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8ZEp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8ZEq; else goto c8ZEr;
       c8ZEq: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.C.String.withCStringLen1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8ZEr: // global
           I64[Sp - 24] = block_c8ZCj_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCStringLen1_info" {
     Foreign.C.String.withCStringLen1_info:
         const Foreign.C.String.withCStringLen1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S8YDv_srt;
 },
 _c8ZCj() //  [R1]
         { []
         }
     {offset
       c8ZCj: // global
           I64[Sp] = block_c8ZCl_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8ZEw; else goto c8ZCm;
       u8ZEw: // global
           call _c8ZCl(R1) args: 0, res: 0, upd: 0;
       c8ZCm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZCj_info" {
     block_c8ZCj_info:
         const _c8ZCj;
         const 2;
         const 30;
 },
 _c8ZCl() //  [R1]
         { []
         }
     {offset
       c8ZCl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8ZEv; else goto c8ZEu;
       c8ZEv: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ZEu: // global
           _s8Ypk::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_s8Yql_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 14;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = _s8Ypk::P64;
           Sp = Sp + 24;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZCl_info" {
     block_c8ZCl_info:
         const _c8ZCl;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.718605271 UTC

[section ""data" . Foreign.C.String.withCStringLen_closure" {
     Foreign.C.String.withCStringLen_closure:
         const Foreign.C.String.withCStringLen_info;
         const 0;
 },
 Foreign.C.String.withCStringLen_entry() //  [R2, R3]
         { []
         }
     {offset
       c8ZFV: // global
           R3 = R3;
           R2 = R2;
           call Foreign.C.String.withCStringLen1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCStringLen_info" {
     Foreign.C.String.withCStringLen_info:
         const Foreign.C.String.withCStringLen_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8YDv_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.722413519 UTC

[section ""data" . Foreign.C.String.withCString1_closure" {
     Foreign.C.String.withCString1_closure:
         const Foreign.C.String.withCString1_info;
         const 0;
 },
 Foreign.C.String.withCString1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8ZG8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8ZG9; else goto c8ZGa;
       c8ZG9: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.C.String.withCString1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8ZGa: // global
           I64[Sp - 24] = block_c8ZG6_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCString1_info" {
     Foreign.C.String.withCString1_info:
         const Foreign.C.String.withCString1_entry;
         const 0;
         const 21474836494;
         const 12884901903;
         const S8YDv_srt;
 },
 _c8ZG6() //  [R1]
         { []
         }
     {offset
       c8ZG6: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZG6_info" {
     block_c8ZG6_info:
         const _c8ZG6;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.728185681 UTC

[section ""data" . Foreign.C.String.withCString_closure" {
     Foreign.C.String.withCString_closure:
         const Foreign.C.String.withCString_info;
         const 0;
 },
 Foreign.C.String.withCString_entry() //  [R2, R3]
         { []
         }
     {offset
       c8ZGo: // global
           R3 = R3;
           R2 = R2;
           call Foreign.C.String.withCString1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCString_info" {
     Foreign.C.String.withCString_info:
         const Foreign.C.String.withCString_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8YDv_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.731859444 UTC

[section ""data" . Foreign.C.String.charIsRepresentable1_closure" {
     Foreign.C.String.charIsRepresentable1_closure:
         const Foreign.C.String.charIsRepresentable1_info;
         const 0;
 },
 Foreign.C.String.charIsRepresentable1_entry() //  [R2]
         { []
         }
     {offset
       c8ZGB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ZGC; else goto c8ZGD;
       c8ZGC: // global
           R2 = R2;
           R1 = Foreign.C.String.charIsRepresentable1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ZGD: // global
           I64[Sp - 16] = block_c8ZGz_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.charIsRepresentable1_info" {
     Foreign.C.String.charIsRepresentable1_info:
         const Foreign.C.String.charIsRepresentable1_entry;
         const 0;
         const 107374182414;
         const 8589934597;
         const S8YDv_srt;
 },
 _c8ZGz() //  [R1]
         { []
         }
     {offset
       c8ZGz: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.charIsRepresentable1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZGz_info" {
     block_c8ZGz_info:
         const _c8ZGz;
         const 1;
         const 4294967326;
         const S8YDv_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.736774305 UTC

[section ""data" . Foreign.C.String.charIsRepresentable_closure" {
     Foreign.C.String.charIsRepresentable_closure:
         const Foreign.C.String.charIsRepresentable_info;
         const 0;
 },
 Foreign.C.String.charIsRepresentable_entry() //  [R2]
         { []
         }
     {offset
       c8ZGR: // global
           R2 = R2;
           call Foreign.C.String.charIsRepresentable1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.charIsRepresentable_info" {
     Foreign.C.String.charIsRepresentable_info:
         const Foreign.C.String.charIsRepresentable_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8YDv_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.740451934 UTC

[section ""data" . Foreign.C.String.newCStringLen2_closure" {
     Foreign.C.String.newCStringLen2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.753039293 UTC

[section ""data" . Foreign.C.String.newCStringLen1_closure" {
     Foreign.C.String.newCStringLen1_closure:
         const Foreign.C.String.newCStringLen1_info;
         const 0;
 },
 sat_s8Ysq_entry() //  [R1]
         { []
         }
     {offset
       c8ZIC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c8ZIH; else goto c8ZII;
       c8ZIH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8ZII: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c8ZIz_info;
           _s8Yrl::P64 = P64[R1 + 24];
           _s8Yra::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _s8Yra::I64;
           P64[Sp - 24] = _s8Yrl::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u8ZIM; else goto c8ZIA;
       u8ZIM: // global
           call _c8ZIz(R1) args: 0, res: 0, upd: 0;
       c8ZIA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8Ysq_info" {
     sat_s8Ysq_info:
         const sat_s8Ysq_entry;
         const 4294967298;
         const 15;
 },
 _c8ZIz() //  [R1]
         { []
         }
     {offset
       c8ZIz: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c8ZIL; else goto c8ZIK;
       c8ZIL: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8ZIK: // global
           _s8Yso::I64 = I64[R1 + 7];
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = P64[Sp + 16];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 63;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = _s8Yso::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8ZIz_info" {
     block_c8ZIz_info:
         const _c8ZIz;
         const 66;
         const 30;
 },
 sat_s8YsE_entry() //  [R1, R2]
         { []
         }
     {offset
       c8ZIN: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c8ZIO; else goto c8ZIP;
       c8ZIO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ZIP: // global
           I64[Sp - 24] = block_c8ZHf_info;
           R3 = 0;
           _s8YqG::P64 = R2;
           _s8Yqx::P64 = P64[R1 + 6];
           R2 = _s8Yqx::P64;
           P64[Sp - 16] = _s8Yqx::P64;
           P64[Sp - 8] = _s8YqG::P64;
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8YsE_info" {
     sat_s8YsE_info:
         const sat_s8YsE_entry;
         const 1;
         const 12884901897;
         const 8589934597;
         const S8YDv_srt+40;
 },
 _c8ZHf() //  [R1]
         { []
         }
     {offset
       c8ZHf: // global
           I64[Sp - 8] = block_c8ZHm_info;
           R2 = 4;
           _s8YqI::I64 = R1;
           R1 = R1 << 2;
           I64[Sp] = _s8YqI::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZHf_info" {
     block_c8ZHf_info:
         const _c8ZHf;
         const 2;
         const 12884901918;
         const S8YDv_srt+40;
 },
 _c8ZHm() //  [R1]
         { []
         }
     {offset
       c8ZHm: // global
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _c8ZKD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ZHm_info" {
     block_c8ZHm_info:
         const _c8ZHm;
         const 67;
         const 12884901918;
         const S8YDv_srt+40;
 },
 _c8ZKD() //  []
         { []
         }
     {offset
       c8ZKD: // global
           _s8Ysu::P64 = P64[Sp];
           I64[Sp] = block_c8ZKG_info;
           R1 = _s8Ysu::P64;
           if (R1 & 7 != 0) goto u8ZLG; else goto c8ZKI;
       u8ZLG: // global
           call _c8ZKG(R1) args: 0, res: 0, upd: 0;
       c8ZKI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8ZKG() //  [R1]
         { []
         }
     {offset
       c8ZKG: // global
           if (R1 & 7 == 1) goto c8ZKO; else goto c8ZKT;
       c8ZKO: // global
           I64[Sp + 8] = block_c8ZHw_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c8ZKT: // global
           I64[Sp - 8] = block_c8ZKR_info;
           _s8Ysz::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s8Ysz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8ZLH; else goto c8ZKU;
       u8ZLH: // global
           call _c8ZKR(R1) args: 0, res: 0, upd: 0;
       c8ZKU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZKG_info" {
     block_c8ZKG_info:
         const _c8ZKG;
         const 453;
         const 12884901918;
         const S8YDv_srt+40;
 },
 _c8ZHw() //  [R1]
         { []
         }
     {offset
       c8ZHw: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c8ZIV; else goto c8ZIU;
       c8ZIV: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ZIU: // global
           _s8YqI::I64 = I64[Sp + 16];
           _s8YqQ::I64 = I64[Sp + 8];
           _s8YqW::I64 = _s8YqI::I64 + 1;
           (_s8Yr1::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(_s8YqW::I64);
           if (_s8Yr1::I64 == 0) goto c8ZKA; else goto c8ZKz;
       c8ZKA: // global
           Hp = Hp - 88;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8ZKz: // global
           I64[Hp - 80] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 40] = _s8YqQ::I64;
           I64[Hp - 32] = _s8YqI::I64;
           I64[Hp - 24] = 0;
           I64[Hp - 16] = _s8YqI::I64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8YqW::I64;
           P64[Sp] = Hp - 7;
           I64[Sp + 8] = _s8Yr1::I64;
           P64[Sp + 16] = Hp - 63;
           call _c8ZHQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ZHw_info" {
     block_c8ZHw_info:
         const _c8ZHw;
         const 196;
         const 12884901918;
         const S8YDv_srt+40;
 },
 _c8ZHQ() //  []
         { []
         }
     {offset
       c8ZHQ: // global
           I64[Sp - 8] = block_c8ZHT_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8ZLr; else goto c8ZHU;
       u8ZLr: // global
           call _c8ZHT(R1) args: 0, res: 0, upd: 0;
       c8ZHU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8ZHT() //  [R1]
         { []
         }
     {offset
       c8ZHT: // global
           I64[Sp - 16] = block_c8ZHY_info;
           _s8Yre::P64 = P64[R1 + 7];
           _s8Yrf::P64 = P64[R1 + 15];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp - 8] = _s8Yrf::P64;
           P64[Sp] = _s8Yre::P64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZHT_info" {
     block_c8ZHT_info:
         const _c8ZHT;
         const 133;
         const 4294967326;
         const S8YDv_srt+48;
 },
 _c8ZHY() //  [R1]
         { []
         }
     {offset
       c8ZHY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8ZJ4; else goto c8ZJ3;
       c8ZJ4: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ZJ3: // global
           I64[Hp - 32] = sat_s8Ysq_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 32];
           P64[Sp - 8] = Hp - 32;
           P64[Sp] = P64[Sp + 40];
           Sp = Sp - 8;
           call _c8ZJP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ZHY_info" {
     block_c8ZHY_info:
         const _c8ZHY;
         const 519;
         const 4294967326;
         const S8YDv_srt+48;
 },
 _c8ZJP() //  []
         { []
         }
     {offset
       c8ZJP: // global
           _s8YrY::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8ZJR_info;
           R3 = P64[Sp];
           R2 = _s8YrY::P64;
           R1 = P64[Sp + 24];
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8ZJR() //  [R1]
         { []
         }
     {offset
       c8ZJR: // global
           I64[Sp] = block_c8ZJT_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8ZLz; else goto c8ZJU;
       u8ZLz: // global
           call _c8ZJT(R1) args: 0, res: 0, upd: 0;
       c8ZJU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZJR_info" {
     block_c8ZJR_info:
         const _c8ZJR;
         const 519;
         const 4294967326;
         const S8YDv_srt+48;
 },
 _c8ZJT() //  [R1]
         { []
         }
     {offset
       c8ZJT: // global
           I64[Sp - 16] = block_c8ZJY_info;
           _s8Ys5::P64 = P64[R1 + 7];
           _s8Ys7::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s8Ys7::P64;
           P64[Sp] = _s8Ys5::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8ZLA; else goto c8ZK2;
       u8ZLA: // global
           call _c8ZJY(R1) args: 0, res: 0, upd: 0;
       c8ZK2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZJT_info" {
     block_c8ZJT_info:
         const _c8ZJT;
         const 519;
         const 4294967326;
         const S8YDv_srt+48;
 },
 _c8ZJY() //  [R1]
         { []
         }
     {offset
       c8ZJY: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto c8ZKx; else goto c8ZKc;
       c8ZKx: // global
           I64[Sp + 32] = block_c8ZJD_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u8ZLC; else goto c8ZJF;
       u8ZLC: // global
           call _c8ZJD(R1) args: 0, res: 0, upd: 0;
       c8ZJF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8ZKc: // global
           I64[Sp] = block_c8ZKa_info;
           _s8Ys8::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s8Ys8::P64;
           if (R1 & 7 != 0) goto u8ZLB; else goto c8ZKd;
       u8ZLB: // global
           call _c8ZKa(R1) args: 0, res: 0, upd: 0;
       c8ZKd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZJY_info" {
     block_c8ZJY_info:
         const _c8ZJY;
         const 2057;
         const 4294967326;
         const S8YDv_srt+48;
 },
 _c8ZJD() //  [R1]
         { []
         }
     {offset
       c8ZJD: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c8ZJL; else goto c8ZJK;
       c8ZJL: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ZJK: // global
           _s8YrL::I64 = I64[R1 + 23];
           _s8YrP::I64 = I64[R1 + 39];
           _s8YrQ::I64 = I64[R1 + 47];
           call MO_Touch(P64[R1 + 7]);
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s8YrQ::I64 - _s8YrP::I64;
           I64[Hp - 48] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 40] = _s8YrL::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           P64[Sp] = Hp - 6;
           call _s8Yrm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ZJD_info" {
     block_c8ZJD_info:
         const _c8ZJD;
         const 133;
         const 4294967326;
         const S8YDv_srt+48;
 },
 _c8ZKa() //  [R1]
         { []
         }
     {offset
       c8ZKa: // global
           if (R1 & 7 == 2) goto c8ZKw; else goto c8ZKm;
       c8ZKw: // global
           P64[Sp + 32] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 32;
           call _s8Yrm() args: 0, res: 0, upd: 0;
       c8ZKm: // global
           _s8Ys8::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c8ZKh_info;
           R3 = P64[Sp + 8];
           R2 = _s8Ys8::P64;
           R1 = P64[Sp + 24];
           Sp = Sp + 16;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZKa_info" {
     block_c8ZKa_info:
         const _c8ZKa;
         const 2057;
         const 4294967326;
         const S8YDv_srt+48;
 },
 _s8Yrm() //  []
         { []
         }
     {offset
       s8Yrm: // global
           _s8Yro::P64 = P64[Sp];
           I64[Sp] = block_c8ZI7_info;
           R1 = _s8Yro::P64;
           if (R1 & 7 != 0) goto u8ZLJ; else goto c8ZI8;
       u8ZLJ: // global
           call _c8ZI7(R1) args: 0, res: 0, upd: 0;
       c8ZI8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8ZI7() //  [R1]
         { []
         }
     {offset
       c8ZI7: // global
           if (R1 & 7 == 1) goto c8ZJ8; else goto c8ZJr;
       c8ZJ8: // global
           _s8Yrb::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8ZIc_info;
           R1 = _s8Yrb::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8ZLt; else goto c8ZId;
       u8ZLt: // global
           call _c8ZIc(R1) args: 0, res: 0, upd: 0;
       c8ZId: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8ZJr: // global
           _s8Yr7::P64 = P64[R1 + 6];
           call MO_Touch(P64[Sp + 32]);
           R1 = _s8Yr7::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZI7_info" {
     block_c8ZI7_info:
         const _c8ZI7;
         const 133;
         const 4294967326;
         const S8YDv_srt+48;
 },
 _c8ZIc() //  [R1]
         { []
         }
     {offset
       c8ZIc: // global
           _s8Yrs::I64 = I64[R1 + 7] << 1;
           if (_s8Yrs::I64 != 0) goto u8ZLl; else goto c8ZJk;
       u8ZLl: // global
           I64[Sp] = _s8Yrs::I64;
           call _c8ZIl() args: 0, res: 0, upd: 0;
       c8ZJk: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(I64[Sp + 8]);
           I64[Sp + 8] = 0;
           P64[Sp] = Foreign.C.String.newCStringLen2_closure+1;
           call _c8ZHQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ZIc_info" {
     block_c8ZIc_info:
         const _c8ZIc;
         const 68;
         const 4294967326;
         const S8YDv_srt+48;
 },
 _c8ZIl() //  []
         { []
         }
     {offset
       c8ZIl: // global
           Hp = Hp + 16;
           _s8Yrs::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c8ZJe; else goto c8ZJd;
       c8ZJe: // global
           HpAlloc = 16;
           I64[Sp] = block_c8ZIk_info;
           R1 = _s8Yrs::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c8ZJd: // global
           (_s8Yrx::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] realloc(I64[Sp + 8], _s8Yrs::I64);
           if (_s8Yrx::I64 == 0) goto c8ZJh; else goto c8ZJg;
       c8ZJh: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.realloc2_closure;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8ZJg: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8Yrs::I64;
           I64[Sp + 8] = _s8Yrx::I64;
           P64[Sp] = Hp - 7;
           call _c8ZHQ() args: 0, res: 0, upd: 0;
     }
 },
 _c8ZIk() //  [R1]
         { []
         }
     {offset
       c8ZIk: // global
           I64[Sp] = R1;
           call _c8ZIl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ZIk_info" {
     block_c8ZIk_info:
         const _c8ZIk;
         const 68;
         const 4294967326;
         const S8YDv_srt+48;
 },
 _c8ZKh() //  [R1]
         { []
         }
     {offset
       c8ZKh: // global
           I64[Sp] = block_c8ZKj_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8ZLE; else goto c8ZKo;
       u8ZLE: // global
           call _c8ZKj(R1) args: 0, res: 0, upd: 0;
       c8ZKo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZKh_info" {
     block_c8ZKh_info:
         const _c8ZKh;
         const 519;
         const 4294967326;
         const S8YDv_srt+48;
 },
 _c8ZKj() //  [R1]
         { []
         }
     {offset
       c8ZKj: // global
           P64[Sp] = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 8;
           call _c8ZJP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ZKj_info" {
     block_c8ZKj_info:
         const _c8ZKj;
         const 519;
         const 4294967326;
         const S8YDv_srt+48;
 },
 _c8ZKR() //  [R1]
         { []
         }
     {offset
       c8ZKR: // global
           _s8Ysv::I64 = I64[Sp + 16];
           _s8Ysz::P64 = P64[Sp + 8];
           I32[I64[Sp + 24] + (_s8Ysv::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           P64[Sp + 8] = _s8Ysz::P64;
           I64[Sp + 16] = _s8Ysv::I64 + 1;
           Sp = Sp + 8;
           call _c8ZKD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ZKR_info" {
     block_c8ZKR_info:
         const _c8ZKR;
         const 902;
         const 12884901918;
         const S8YDv_srt+40;
 },
 Foreign.C.String.newCStringLen1_entry() //  [R2]
         { []
         }
     {offset
       c8ZLK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ZLL; else goto c8ZLM;
       c8ZLL: // global
           R2 = R2;
           R1 = Foreign.C.String.newCStringLen1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ZLM: // global
           I64[Sp - 16] = block_c8ZH3_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCStringLen1_info" {
     Foreign.C.String.newCStringLen1_info:
         const Foreign.C.String.newCStringLen1_entry;
         const 0;
         const 966367641614;
         const 8589934597;
         const S8YDv_srt;
 },
 _c8ZH3() //  [R1]
         { []
         }
     {offset
       c8ZH3: // global
           I64[Sp] = block_c8ZH5_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8ZLR; else goto c8ZH6;
       u8ZLR: // global
           call _c8ZH5(R1) args: 0, res: 0, upd: 0;
       c8ZH6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZH3_info" {
     block_c8ZH3_info:
         const _c8ZH3;
         const 1;
         const 12884901918;
         const S8YDv_srt+40;
 },
 _c8ZH5() //  [R1]
         { []
         }
     {offset
       c8ZH5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8ZLQ; else goto c8ZLP;
       c8ZLQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ZLP: // global
           _s8YqF::P64 = P64[R1 + 23];
           I64[Hp - 8] = sat_s8YsE_info;
           P64[Hp] = P64[Sp + 8];
           R4 = Hp - 6;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = _s8YqF::P64;
           Sp = Sp + 16;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZH5_info" {
     block_c8ZH5_info:
         const _c8ZH5;
         const 1;
         const 12884901918;
         const S8YDv_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.797601144 UTC

[section ""data" . Foreign.C.String.newCStringLen_closure" {
     Foreign.C.String.newCStringLen_closure:
         const Foreign.C.String.newCStringLen_info;
         const 0;
 },
 Foreign.C.String.newCStringLen_entry() //  [R2]
         { []
         }
     {offset
       c8ZO1: // global
           R2 = R2;
           call Foreign.C.String.newCStringLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCStringLen_info" {
     Foreign.C.String.newCStringLen_info:
         const Foreign.C.String.newCStringLen_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8YDv_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.801275224 UTC

[section ""data" . Foreign.C.String.newCString1_closure" {
     Foreign.C.String.newCString1_closure:
         const Foreign.C.String.newCString1_info;
         const 0;
 },
 Foreign.C.String.newCString1_entry() //  [R2]
         { []
         }
     {offset
       c8ZOe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ZOf; else goto c8ZOg;
       c8ZOf: // global
           R2 = R2;
           R1 = Foreign.C.String.newCString1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ZOg: // global
           I64[Sp - 16] = block_c8ZOc_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCString1_info" {
     Foreign.C.String.newCString1_info:
         const Foreign.C.String.newCString1_entry;
         const 0;
         const 3302829850638;
         const 8589934597;
         const S8YDv_srt;
 },
 _c8ZOc() //  [R1]
         { []
         }
     {offset
       c8ZOc: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.newCString1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZOc_info" {
     block_c8ZOc_info:
         const _c8ZOc;
         const 1;
         const 4294967326;
         const S8YDv_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.80661964 UTC

[section ""data" . Foreign.C.String.newCString_closure" {
     Foreign.C.String.newCString_closure:
         const Foreign.C.String.newCString_info;
         const 0;
 },
 Foreign.C.String.newCString_entry() //  [R2]
         { []
         }
     {offset
       c8ZOu: // global
           R2 = R2;
           call Foreign.C.String.newCString1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCString_info" {
     Foreign.C.String.newCString_info:
         const Foreign.C.String.newCString_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8YDv_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.821589967 UTC

[section ""data" . Foreign.C.String.peekCStringLen1_closure" {
     Foreign.C.String.peekCStringLen1_closure:
         const Foreign.C.String.peekCStringLen1_info;
         const 0;
 },
 sat_s8Yu1_entry() //  [R1]
         { []
         }
     {offset
       c8ZQS: // global
           _s8Yu1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8ZQT; else goto c8ZQU;
       c8ZQU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8ZQW; else goto c8ZQV;
       c8ZQW: // global
           HpAlloc = 40;
           goto c8ZQT;
       c8ZQT: // global
           R1 = _s8Yu1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8ZQV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8Yu1::P64;
           _s8YtQ::P64 = P64[_s8Yu1::P64 + 16];
           _s8YtY::P64 = P64[_s8Yu1::P64 + 24];
           _s8YtU::I64 = I64[_s8Yu1::P64 + 32];
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s8YtU::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8YtQ::P64;
           R3 = _s8YtY::P64;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8Yu1_info" {
     sat_s8Yu1_info:
         const sat_s8Yu1_entry;
         const 4294967298;
         const 15;
 },
 sat_s8Yui_entry() //  [R1]
         { []
         }
     {offset
       c8ZR5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ZR6; else goto c8ZR7;
       c8ZR6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8ZR7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8Yui_info" {
     sat_s8Yui_info:
         const sat_s8Yui_entry;
         const 1;
         const 16;
 },
 $wgo_s8Yti_entry() //  [R1, R2]
         { []
         }
     {offset
       c8ZR8: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c8ZR9; else goto c8ZRa;
       c8ZR9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ZRa: // global
           I64[Sp - 32] = block_c8ZPx_info;
           _s8Yti::P64 = R1;
           _s8Yth::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 24] = _s8Yth::P64;
           P64[Sp - 16] = _s8Yti::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8ZSK; else goto c8ZPy;
       u8ZSK: // global
           call _c8ZPx(R1) args: 0, res: 0, upd: 0;
       c8ZPy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s8Yti_info" {
     $wgo_s8Yti_info:
         const $wgo_s8Yti_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c8ZPx() //  [R1]
         { []
         }
     {offset
       c8ZPx: // global
           _s8Yth::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8ZPC_info;
           R3 = _s8Yth::P64;
           R2 = P64[Sp + 24];
           _s8Ytn::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp + 24] = _s8Ytn::P64;
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZPx_info" {
     block_c8ZPx_info:
         const _c8ZPx;
         const 3;
         const 30;
 },
 _c8ZPC() //  [R1]
         { []
         }
     {offset
       c8ZPC: // global
           I64[Sp] = block_c8ZPE_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8ZSC; else goto c8ZPF;
       u8ZSC: // global
           call _c8ZPE(R1) args: 0, res: 0, upd: 0;
       c8ZPF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZPC_info" {
     block_c8ZPC_info:
         const _c8ZPC;
         const 2;
         const 30;
 },
 _c8ZPE() //  [R1]
         { []
         }
     {offset
       c8ZPE: // global
           I64[Sp - 16] = block_c8ZPJ_info;
           _s8Ytv::P64 = P64[R1 + 7];
           _s8Ytx::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s8Ytx::P64;
           P64[Sp] = _s8Ytv::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8ZSD; else goto c8ZPK;
       u8ZSD: // global
           call _c8ZPJ(R1) args: 0, res: 0, upd: 0;
       c8ZPK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZPE_info" {
     block_c8ZPE_info:
         const _c8ZPE;
         const 2;
         const 30;
 },
 _c8ZPJ() //  [R1]
         { []
         }
     {offset
       c8ZPJ: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto c8ZS5; else goto c8ZRy;
       c8ZS5: // global
           I64[Sp + 32] = block_c8ZQh_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u8ZSF; else goto c8ZQi;
       u8ZSF: // global
           call _c8ZQh(R1) args: 0, res: 0, upd: 0;
       c8ZQi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8ZRy: // global
           I64[Sp] = block_c8ZRf_info;
           _s8Yty::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s8Yty::P64;
           if (R1 & 7 != 0) goto u8ZSE; else goto c8ZRz;
       u8ZSE: // global
           call _c8ZRf(R1) args: 0, res: 0, upd: 0;
       c8ZRz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZPJ_info" {
     block_c8ZPJ_info:
         const _c8ZPJ;
         const 4;
         const 30;
 },
 _c8ZQh() //  [R1]
         { []
         }
     {offset
       c8ZQh: // global
           _s8YuG::P64 = P64[R1 + 7];
           _s8YuL::I64 = I64[R1 + 47] - I64[R1 + 39];
           if (%MO_S_Gt_W64(_s8YuL::I64, 0)) goto c8ZSn; else goto c8ZSo;
       c8ZSn: // global
           P64[Sp - 24] = _s8YuG::P64;
           I64[Sp - 16] = _s8YuL::I64 - 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           I64[Sp] = I64[R1 + 23];
           Sp = Sp - 32;
           call _c8ZQz() args: 0, res: 0, upd: 0;
       c8ZSo: // global
           call MO_Touch(_s8YuG::P64);
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZQh_info" {
     block_c8ZQh_info:
         const _c8ZQh;
         const 0;
         const 30;
 },
 _c8ZQz() //  []
         { []
         }
     {offset
       c8ZQz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8ZSi; else goto c8ZSh;
       c8ZSi: // global
           HpAlloc = 40;
           I64[Sp] = block_c8ZQz_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c8ZSh: // global
           _s8YuY::P64 = P64[Sp + 24];
           _s8Yv0::I64 = I64[Sp + 16];
           if (_s8Yv0::I64 != 0) goto c8ZSk; else goto c8ZSl;
       c8ZSk: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W32_W64(I32[I64[Sp + 32] + (_s8Yv0::I64 << 2)]);
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8YuY::P64;
           I64[Sp + 16] = _s8Yv0::I64 - 1;
           P64[Sp + 24] = Hp - 14;
           call _c8ZQz() args: 0, res: 0, upd: 0;
       c8ZSl: // global
           Hp = Hp - 40;
           P64[Sp + 24] = _s8YuY::P64;
           Sp = Sp + 8;
           call _c8ZS8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ZQz_info" {
     block_c8ZQz_info:
         const _c8ZQz;
         const 644;
         const 30;
 },
 _c8ZS8() //  []
         { []
         }
     {offset
       c8ZS8: // global
           Hp = Hp + 40;
           _s8YuO::P64 = P64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto c8ZSf; else goto c8ZSe;
       c8ZSf: // global
           HpAlloc = 40;
           I64[Sp - 8] = block_c8ZS7_info;
           R1 = _s8YuO::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ZSe: // global
           _s8YuS::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 24]]);
           call MO_Touch(P64[Sp]);
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s8YuS::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8YuO::P64;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8ZS7() //  [R1]
         { []
         }
     {offset
       c8ZS7: // global
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c8ZS8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ZS7_info" {
     block_c8ZS7_info:
         const _c8ZS7;
         const 900;
         const 30;
 },
 _c8ZRf() //  [R1]
         { []
         }
     {offset
       c8ZRf: // global
           _s8Ytx::P64 = P64[Sp + 8];
           if (R1 & 7 == 2) goto c8ZRZ; else goto c8ZRN;
       c8ZRZ: // global
           I64[Sp + 8] = block_c8ZRX_info;
           R1 = _s8Ytx::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8ZSL; else goto c8ZS0;
       u8ZSL: // global
           call _c8ZRX(R1) args: 0, res: 0, upd: 0;
       c8ZS0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8ZRN: // global
           _s8Yty::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c8ZRD_info;
           R3 = _s8Ytx::P64;
           R2 = _s8Yty::P64;
           R1 = P64[Sp + 32];
           Sp = Sp + 16;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZRf_info" {
     block_c8ZRf_info:
         const _c8ZRf;
         const 4;
         const 30;
 },
 _c8ZRX() //  [R1]
         { []
         }
     {offset
       c8ZRX: // global
           P64[Sp + 24] = P64[Sp + 8];
           I64[Sp + 8] = I64[R1 + 23];
           P64[Sp - 16] = P64[R1 + 7];
           I64[Sp - 8] = I64[R1 + 39];
           I64[Sp] = I64[R1 + 47];
           Sp = Sp - 16;
           call _s8YtG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ZRX_info" {
     block_c8ZRX_info:
         const _c8ZRX;
         const 259;
         const 30;
 },
 _c8ZRD() //  [R1]
         { []
         }
     {offset
       c8ZRD: // global
           I64[Sp] = block_c8ZRF_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8ZSM; else goto c8ZRG;
       u8ZSM: // global
           call _c8ZRF(R1) args: 0, res: 0, upd: 0;
       c8ZRG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZRD_info" {
     block_c8ZRD_info:
         const _c8ZRD;
         const 130;
         const 30;
 },
 _c8ZRF() //  [R1]
         { []
         }
     {offset
       c8ZRF: // global
           I64[Sp] = block_c8ZRK_info;
           _s8Yuo::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 16] = _s8Yuo::P64;
           if (R1 & 7 != 0) goto u8ZSN; else goto c8ZRQ;
       u8ZSN: // global
           call _c8ZRK(R1) args: 0, res: 0, upd: 0;
       c8ZRQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZRF_info" {
     block_c8ZRF_info:
         const _c8ZRF;
         const 130;
         const 30;
 },
 _c8ZRK() //  [R1]
         { []
         }
     {offset
       c8ZRK: // global
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 39];
           I64[Sp - 8] = I64[R1 + 47];
           I64[Sp] = I64[R1 + 23];
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp - 24;
           call _s8YtG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ZRK_info" {
     block_c8ZRK_info:
         const _c8ZRK;
         const 2;
         const 30;
 },
 _s8YtG() //  []
         { []
         }
     {offset
       s8YtG: // global
           _s8YtN::I64 = I64[Sp + 16] - I64[Sp + 8];
           if (%MO_S_Gt_W64(_s8YtN::I64, 0)) goto c8ZRs; else goto c8ZRt;
       c8ZRs: // global
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           I64[Sp + 16] = _s8YtN::I64 - 1;
           Sp = Sp - 8;
           call _c8ZQ9() args: 0, res: 0, upd: 0;
       c8ZRt: // global
           _s8Yti::P64 = P64[Sp + 32];
           _s8YtI::P64 = P64[Sp + 40];
           call MO_Touch(P64[Sp]);
           I64[Sp + 40] = block_c8ZQZ_info;
           R2 = _s8YtI::P64;
           R1 = _s8Yti::P64;
           Sp = Sp + 40;
           call $wgo_s8Yti_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8ZQ9() //  []
         { []
         }
     {offset
       c8ZQ9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8ZRn; else goto c8ZRm;
       c8ZRn: // global
           HpAlloc = 40;
           I64[Sp] = block_c8ZQ9_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c8ZRm: // global
           _s8YtJ::I64 = I64[Sp + 32];
           _s8Yu4::P64 = P64[Sp + 16];
           _s8Yu6::I64 = I64[Sp + 24];
           if (_s8Yu6::I64 != 0) goto c8ZRp; else goto c8ZRq;
       c8ZRp: // global
           _s8Yu9::I64 = %MO_UU_Conv_W32_W64(I32[_s8YtJ::I64 + (_s8Yu6::I64 << 2)]);
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s8Yu9::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8Yu4::P64;
           I64[Sp + 24] = _s8Yu6::I64 - 1;
           P64[Sp + 16] = Hp - 14;
           call _c8ZQ9() args: 0, res: 0, upd: 0;
       c8ZRq: // global
           Hp = Hp - 40;
           _s8Yti::P64 = P64[Sp + 40];
           _s8YtI::P64 = P64[Sp + 48];
           _s8YtU::I64 = %MO_UU_Conv_W32_W64(I32[_s8YtJ::I64]);
           call MO_Touch(P64[Sp + 8]);
           I64[Sp + 32] = block_c8ZQK_info;
           R2 = _s8YtI::P64;
           R1 = _s8Yti::P64;
           I64[Sp + 40] = _s8YtU::I64;
           P64[Sp + 48] = _s8Yu4::P64;
           Sp = Sp + 32;
           call $wgo_s8Yti_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZQ9_info" {
     block_c8ZQ9_info:
         const _c8ZQ9;
         const 774;
         const 30;
 },
 _c8ZQK() //  [R1]
         { []
         }
     {offset
       c8ZQK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8ZRk; else goto c8ZRj;
       c8ZRk: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ZRj: // global
           I64[Hp - 32] = sat_s8Yu1_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZQK_info" {
     block_c8ZQK_info:
         const _c8ZQK;
         const 66;
         const 30;
 },
 _c8ZQZ() //  [R1]
         { []
         }
     {offset
       c8ZQZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8ZRw; else goto c8ZRv;
       c8ZRw: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ZRv: // global
           I64[Hp - 16] = sat_s8Yui_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZQZ_info" {
     block_c8ZQZ_info:
         const _c8ZQZ;
         const 0;
         const 30;
 },
 sat_s8Yvd_entry() //  [R1, R2]
         { []
         }
     {offset
       c8ZSS: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c8ZST; else goto c8ZSU;
       c8ZST: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ZSU: // global
           I64[Sp - 24] = block_c8ZOW_info;
           _s8YsV::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 16] = _s8YsV::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8ZTe; else goto c8ZOX;
       u8ZTe: // global
           call _c8ZOW(R1) args: 0, res: 0, upd: 0;
       c8ZOX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8Yvd_info" {
     sat_s8Yvd_info:
         const sat_s8Yvd_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const S8YDv_srt+80;
 },
 _c8ZOW() //  [R1]
         { []
         }
     {offset
       c8ZOW: // global
           I64[Sp - 8] = block_c8ZP1_info;
           _s8YsZ::I64 = I64[R1 + 7];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s8YsZ::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZOW_info" {
     block_c8ZOW_info:
         const _c8ZOW;
         const 2;
         const 4294967326;
         const S8YDv_srt+80;
 },
 _c8ZP1() //  [R1]
         { []
         }
     {offset
       c8ZP1: // global
           I64[Sp] = block_c8ZP3_info;
           _s8Yt2::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s8Yt2::P64;
           if (R1 & 7 != 0) goto u8ZTd; else goto c8ZP4;
       u8ZTd: // global
           call _c8ZP3(R1) args: 0, res: 0, upd: 0;
       c8ZP4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZP1_info" {
     block_c8ZP1_info:
         const _c8ZP1;
         const 67;
         const 4294967326;
         const S8YDv_srt+80;
 },
 _c8ZP3() //  [R1]
         { []
         }
     {offset
       c8ZP3: // global
           _s8Yt4::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s8Yt4::I64, 1)) goto c8ZTb; else goto c8ZTc;
       c8ZTb: // global
           _s8Yt6::I64 = _s8Yt4::I64;
           goto s8Yt5;
       c8ZTc: // global
           _s8Yt6::I64 = 1;
           goto s8Yt5;
       s8Yt5: // global
           _s8Yt7::I64 = _s8Yt6::I64 << 2;
           if (%MO_S_Ge_W64(_s8Yt7::I64, 0)) goto c8ZT2; else goto c8ZT7;
       c8ZT2: // global
           I64[Sp - 24] = block_c8ZPj_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 16] = _s8Yt6::I64;
           I64[Sp - 8] = _s8Yt7::I64;
           I64[Sp] = _s8Yt4::I64;
           Sp = Sp - 24;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c8ZT7: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZP3_info" {
     block_c8ZP3_info:
         const _c8ZP3;
         const 67;
         const 4294967326;
         const S8YDv_srt+80;
 },
 _c8ZPj() //  [R1]
         { []
         }
     {offset
       c8ZPj: // global
           I64[Sp] = block_c8ZPl_info;
           _s8Ytb::P64 = R1;
           R1 = I64[Sp + 16];
           P64[Sp + 16] = _s8Ytb::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZPj_info" {
     block_c8ZPj_info:
         const _c8ZPj;
         const 966;
         const 30;
 },
 _c8ZPl() //  [R1]
         { []
         }
     {offset
       c8ZPl: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c8ZT6; else goto c8ZT5;
       c8ZT6: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ZT5: // global
           I64[Hp - 168] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 160] = R1;
           P64[Hp - 152] = P64[Sp + 16];
           I64[Hp - 144] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 136] = Hp - 166;
           P64[Hp - 128] = GHC.IO.Buffer.WriteBuffer_closure+2;
           P64[Hp - 120] = R1 + 16;
           I64[Hp - 112] = I64[Sp + 8];
           I64[Hp - 104] = 0;
           I64[Hp - 96] = 0;
           I64[Hp - 88] = $wgo_s8Yti_info;
           P64[Hp - 80] = P64[Sp + 48];
           P64[Hp - 72] = Hp - 143;
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = P64[Sp + 40];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 63;
           P64[Hp - 32] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 24] = I64[Sp + 32];
           _s8Yt4::I64 = I64[Sp + 24];
           I64[Hp - 16] = _s8Yt4::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = _s8Yt4::I64;
           R2 = Hp - 47;
           R1 = Hp - 86;
           Sp = Sp + 56;
           call $wgo_s8Yti_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZPl_info" {
     block_c8ZPl_info:
         const _c8ZPl;
         const 838;
         const 30;
 },
 Foreign.C.String.peekCStringLen1_entry() //  [R2]
         { []
         }
     {offset
       c8ZTf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ZTg; else goto c8ZTh;
       c8ZTg: // global
           R2 = R2;
           R1 = Foreign.C.String.peekCStringLen1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ZTh: // global
           I64[Sp - 16] = block_c8ZOF_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCStringLen1_info" {
     Foreign.C.String.peekCStringLen1_info:
         const Foreign.C.String.peekCStringLen1_entry;
         const 0;
         const 13198434500622;
         const 8589934597;
         const S8YDv_srt;
 },
 _c8ZOF() //  [R1]
         { []
         }
     {offset
       c8ZOF: // global
           I64[Sp] = block_c8ZOH_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8ZTn; else goto c8ZOI;
       u8ZTn: // global
           call _c8ZOH(R1) args: 0, res: 0, upd: 0;
       c8ZOI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZOF_info" {
     block_c8ZOF_info:
         const _c8ZOF;
         const 1;
         const 4294967326;
         const S8YDv_srt+80;
 },
 _c8ZOH() //  [R1]
         { []
         }
     {offset
       c8ZOH: // global
           I64[Sp] = block_c8ZOM_info;
           _s8YsR::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8YsR::P64;
           if (R1 & 7 != 0) goto u8ZTo; else goto c8ZON;
       u8ZTo: // global
           call _c8ZOM(R1) args: 0, res: 0, upd: 0;
       c8ZON: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZOH_info" {
     block_c8ZOH_info:
         const _c8ZOH;
         const 1;
         const 4294967326;
         const S8YDv_srt+80;
 },
 _c8ZOM() //  [R1]
         { []
         }
     {offset
       c8ZOM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8ZTm; else goto c8ZTl;
       c8ZTm: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ZTl: // global
           _s8YsU::P64 = P64[R1 + 7];
           _s8YsV::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s8Yvd_info;
           P64[Hp - 8] = _s8YsU::P64;
           P64[Hp] = _s8YsV::P64;
           R4 = Hp - 14;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZOM_info" {
     block_c8ZOM_info:
         const _c8ZOM;
         const 1;
         const 4294967326;
         const S8YDv_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.872222155 UTC

[section ""data" . Foreign.C.String.peekCStringLen_closure" {
     Foreign.C.String.peekCStringLen_closure:
         const Foreign.C.String.peekCStringLen_info;
         const 0;
 },
 Foreign.C.String.peekCStringLen_entry() //  [R2]
         { []
         }
     {offset
       c8ZVU: // global
           R2 = R2;
           call Foreign.C.String.peekCStringLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCStringLen_info" {
     Foreign.C.String.peekCStringLen_info:
         const Foreign.C.String.peekCStringLen_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8YDv_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.875838791 UTC

[section ""data" . Foreign.C.String.peekCString1_closure" {
     Foreign.C.String.peekCString1_closure:
         const Foreign.C.String.peekCString1_info;
         const 0;
 },
 Foreign.C.String.peekCString1_entry() //  [R2]
         { []
         }
     {offset
       c8ZW7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ZW8; else goto c8ZW9;
       c8ZW8: // global
           R2 = R2;
           R1 = Foreign.C.String.peekCString1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ZW9: // global
           I64[Sp - 16] = block_c8ZW5_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCString1_info" {
     Foreign.C.String.peekCString1_info:
         const Foreign.C.String.peekCString1_entry;
         const 0;
         const 52780853100558;
         const 8589934597;
         const S8YDv_srt;
 },
 _c8ZW5() //  [R1]
         { []
         }
     {offset
       c8ZW5: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.peekCString1_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZW5_info" {
     block_c8ZW5_info:
         const _c8ZW5;
         const 1;
         const 4294967326;
         const S8YDv_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.880768789 UTC

[section ""data" . Foreign.C.String.peekCString_closure" {
     Foreign.C.String.peekCString_closure:
         const Foreign.C.String.peekCString_info;
         const 0;
 },
 Foreign.C.String.peekCString_entry() //  [R2]
         { []
         }
     {offset
       c8ZWn: // global
           R2 = R2;
           call Foreign.C.String.peekCString1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCString_info" {
     Foreign.C.String.peekCString_info:
         const Foreign.C.String.peekCString_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8YDv_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.884732818 UTC

[section ""data" . Foreign.C.String.castCSCharToChar_closure" {
     Foreign.C.String.castCSCharToChar_closure:
         const Foreign.C.String.castCSCharToChar_info;
 },
 Foreign.C.String.castCSCharToChar_entry() //  [R2]
         { []
         }
     {offset
       c8ZWB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8ZWR; else goto c8ZWS;
       c8ZWR: // global
           R2 = R2;
           R1 = Foreign.C.String.castCSCharToChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ZWS: // global
           I64[Sp - 8] = block_c8ZWy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8ZWW; else goto c8ZWz;
       u8ZWW: // global
           call _c8ZWy(R1) args: 0, res: 0, upd: 0;
       c8ZWz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCSCharToChar_info" {
     Foreign.C.String.castCSCharToChar_info:
         const Foreign.C.String.castCSCharToChar_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8ZWy() //  [R1]
         { []
         }
     {offset
       c8ZWy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8ZWV; else goto c8ZWU;
       c8ZWV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ZWU: // global
           _s8Yvp::I64 = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s8Yvp::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZWy_info" {
     block_c8ZWy_info:
         const _c8ZWy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.891459816 UTC

[section ""data" . Foreign.C.String.castCUCharToChar_closure" {
     Foreign.C.String.castCUCharToChar_closure:
         const Foreign.C.String.castCUCharToChar_info;
 },
 Foreign.C.String.castCUCharToChar_entry() //  [R2]
         { []
         }
     {offset
       c8ZXf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8ZXp; else goto c8ZXq;
       c8ZXp: // global
           R2 = R2;
           R1 = Foreign.C.String.castCUCharToChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ZXq: // global
           I64[Sp - 8] = block_c8ZXc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8ZXu; else goto c8ZXd;
       u8ZXu: // global
           call _c8ZXc(R1) args: 0, res: 0, upd: 0;
       c8ZXd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCUCharToChar_info" {
     Foreign.C.String.castCUCharToChar_info:
         const Foreign.C.String.castCUCharToChar_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8ZXc() //  [R1]
         { []
         }
     {offset
       c8ZXc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8ZXt; else goto c8ZXs;
       c8ZXt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ZXs: // global
           _s8Yvu::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s8Yvu::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZXc_info" {
     block_c8ZXc_info:
         const _c8ZXc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.896970243 UTC

[section ""data" . Foreign.C.String.castCCharToChar_closure" {
     Foreign.C.String.castCCharToChar_closure:
         const Foreign.C.String.castCCharToChar_info;
 },
 Foreign.C.String.castCCharToChar_entry() //  [R2]
         { []
         }
     {offset
       c8ZXM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8ZY2; else goto c8ZY3;
       c8ZY2: // global
           R2 = R2;
           R1 = Foreign.C.String.castCCharToChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ZY3: // global
           I64[Sp - 8] = block_c8ZXJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8ZY7; else goto c8ZXK;
       u8ZY7: // global
           call _c8ZXJ(R1) args: 0, res: 0, upd: 0;
       c8ZXK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCCharToChar_info" {
     Foreign.C.String.castCCharToChar_info:
         const Foreign.C.String.castCCharToChar_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8ZXJ() //  [R1]
         { []
         }
     {offset
       c8ZXJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8ZY6; else goto c8ZY5;
       c8ZY6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ZY5: // global
           _s8YvB::I64 = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s8YvB::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZXJ_info" {
     block_c8ZXJ_info:
         const _c8ZXJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.904212318 UTC

[section ""data" . Foreign.C.String.$wpeekCAString_closure" {
     Foreign.C.String.$wpeekCAString_closure:
         const Foreign.C.String.$wpeekCAString_info;
 },
 Foreign.C.String.$wpeekCAString_entry() //  [R2]
         { []
         }
     {offset
       c8ZYZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8ZZ0; else goto c8ZZ1;
       c8ZZ0: // global
           R2 = R2;
           R1 = Foreign.C.String.$wpeekCAString_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ZZ1: // global
           _s8YvC::I64 = R2;
           _s8Yw5::I64 = 0;
           goto c8ZZs;
       c8ZZs: // global
           if (I8[_s8YvC::I64 + _s8Yw5::I64] == 0 :: W8) goto c8ZZy; else goto c8ZZx;
       c8ZZy: // global
           if (%MO_S_Gt_W64(_s8Yw5::I64, 0)) goto c8ZZp; else goto c8ZZq;
       c8ZZp: // global
           I64[Sp - 24] = _s8YvC::I64;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           I64[Sp - 8] = _s8Yw5::I64 - 1;
           Sp = Sp - 32;
           call _c8ZYA() args: 0, res: 0, upd: 0;
       c8ZZq: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8ZZx: // global
           _s8Yw5::I64 = _s8Yw5::I64 + 1;
           goto c8ZZs;
     }
 },
 section ""relreadonly" . Foreign.C.String.$wpeekCAString_info" {
     Foreign.C.String.$wpeekCAString_info:
         const Foreign.C.String.$wpeekCAString_entry;
         const 0;
         const 14;
         const 8589934596;
 },
 _c8ZYA() //  []
         { []
         }
     {offset
       c8ZYA: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8ZZ5; else goto c8ZZ4;
       c8ZZ5: // global
           HpAlloc = 40;
           I64[Sp] = block_c8ZYA_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c8ZZ4: // global
           _s8YvJ::P64 = P64[Sp + 16];
           _s8YvK::I64 = I64[Sp + 24];
           _s8YvO::I64 = %MO_SS_Conv_W8_W64(I8[I64[Sp + 8] + _s8YvK::I64]);
           if (%MO_S_Gt_W64(_s8YvK::I64, 0)) goto c8ZZ7; else goto c8ZZn;
       c8ZZ7: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(_s8YvO::I64));
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8YvJ::P64;
           P64[Sp + 16] = Hp - 14;
           I64[Sp + 24] = _s8YvK::I64 - 1;
           call _c8ZYA() args: 0, res: 0, upd: 0;
       c8ZZn: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(_s8YvO::I64));
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8YvJ::P64;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ZYA_info" {
     block_c8ZYA_info:
         const _c8ZYA;
         const 323;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.910479737 UTC

[section ""data" . Foreign.C.String.peekCAString1_closure" {
     Foreign.C.String.peekCAString1_closure:
         const Foreign.C.String.peekCAString1_info;
 },
 Foreign.C.String.peekCAString1_entry() //  [R2]
         { []
         }
     {offset
       c9006: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9007; else goto c9008;
       c9007: // global
           R2 = R2;
           R1 = Foreign.C.String.peekCAString1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9008: // global
           I64[Sp - 8] = block_c9003_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u900c; else goto c9004;
       u900c: // global
           call _c9003(R1) args: 0, res: 0, upd: 0;
       c9004: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCAString1_info" {
     Foreign.C.String.peekCAString1_info:
         const Foreign.C.String.peekCAString1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9003() //  [R1]
         { []
         }
     {offset
       c9003: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call Foreign.C.String.$wpeekCAString_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9003_info" {
     block_c9003_info:
         const _c9003;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.915373505 UTC

[section ""data" . Foreign.C.String.peekCAString_closure" {
     Foreign.C.String.peekCAString_closure:
         const Foreign.C.String.peekCAString_info;
 },
 Foreign.C.String.peekCAString_entry() //  [R2]
         { []
         }
     {offset
       c900q: // global
           R2 = R2;
           call Foreign.C.String.peekCAString1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCAString_info" {
     Foreign.C.String.peekCAString_info:
         const Foreign.C.String.peekCAString_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.92052033 UTC

[section ""data" . Foreign.C.String.$wpeekCAStringLen_closure" {
     Foreign.C.String.$wpeekCAStringLen_closure:
         const Foreign.C.String.$wpeekCAStringLen_info;
 },
 Foreign.C.String.$wpeekCAStringLen_entry() //  [R2, R3]
         { []
         }
     {offset
       c901d: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c901e; else goto c901f;
       c901e: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.C.String.$wpeekCAStringLen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c901f: // global
           if (%MO_S_Gt_W64(R3, 0)) goto c901b; else goto c901c;
       c901b: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           I64[Sp - 8] = R3 - 1;
           Sp = Sp - 24;
           call _c900J() args: 0, res: 0, upd: 0;
       c901c: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.$wpeekCAStringLen_info" {
     Foreign.C.String.$wpeekCAStringLen_info:
         const Foreign.C.String.$wpeekCAStringLen_entry;
         const 0;
         const 14;
         const 12884901902;
 },
 _c900J() //  []
         { []
         }
     {offset
       c900J: // global
           I64[Sp - 8] = block_c900M_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u901E; else goto c900N;
       u901E: // global
           call _c900M(R1) args: 0, res: 0, upd: 0;
       c900N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c900M() //  [R1]
         { []
         }
     {offset
       c900M: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c901j; else goto c901i;
       c901j: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c901i: // global
           _s8Ywl::P64 = P64[Sp + 16];
           _s8Ywm::I64 = I64[Sp + 24];
           _s8Yws::I64 = %MO_SS_Conv_W8_W64(I8[I64[R1 + 7] + _s8Ywm::I64]);
           if (_s8Ywm::I64 == 0) goto c901B; else goto c901l;
       c901B: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(_s8Yws::I64));
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8Ywl::P64;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c901l: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(_s8Yws::I64));
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8Ywl::P64;
           P64[Sp + 16] = Hp - 14;
           I64[Sp + 24] = _s8Ywm::I64 - 1;
           Sp = Sp + 8;
           call _c900J() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c900M_info" {
     block_c900M_info:
         const _c900M;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.928292319 UTC

[section ""data" . Foreign.C.String.peekCAStringLen1_closure" {
     Foreign.C.String.peekCAStringLen1_closure:
         const Foreign.C.String.peekCAStringLen1_info;
 },
 Foreign.C.String.peekCAStringLen1_entry() //  [R2]
         { []
         }
     {offset
       c902b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c902f; else goto c902g;
       c902f: // global
           R2 = R2;
           R1 = Foreign.C.String.peekCAStringLen1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c902g: // global
           I64[Sp - 8] = block_c9028_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u902o; else goto c9029;
       u902o: // global
           call _c9028(R1) args: 0, res: 0, upd: 0;
       c9029: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCAStringLen1_info" {
     Foreign.C.String.peekCAStringLen1_info:
         const Foreign.C.String.peekCAStringLen1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9028() //  [R1]
         { []
         }
     {offset
       c9028: // global
           I64[Sp - 8] = block_c902e_info;
           _s8YwL::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s8YwL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u902n; else goto c902i;
       u902n: // global
           call _c902e(R1) args: 0, res: 0, upd: 0;
       c902i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9028_info" {
     block_c9028_info:
         const _c9028;
         const 0;
         const 30;
 },
 _c902e() //  [R1]
         { []
         }
     {offset
       c902e: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Foreign.C.String.$wpeekCAStringLen_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c902e_info" {
     block_c902e_info:
         const _c902e;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.93576664 UTC

[section ""data" . Foreign.C.String.peekCAStringLen_closure" {
     Foreign.C.String.peekCAStringLen_closure:
         const Foreign.C.String.peekCAStringLen_info;
 },
 Foreign.C.String.peekCAStringLen_entry() //  [R2]
         { []
         }
     {offset
       c902G: // global
           R2 = R2;
           call Foreign.C.String.peekCAStringLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCAStringLen_info" {
     Foreign.C.String.peekCAStringLen_info:
         const Foreign.C.String.peekCAStringLen_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.939773174 UTC

[section ""data" . Foreign.C.String.castCWcharToChar_closure" {
     Foreign.C.String.castCWcharToChar_closure:
         const Foreign.C.String.castCWcharToChar_info;
         const 0;
 },
 Foreign.C.String.castCWcharToChar_entry() //  [R2]
         { []
         }
     {offset
       c902U: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c902V; else goto c902W;
       c902V: // global
           R2 = R2;
           R1 = Foreign.C.String.castCWcharToChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c902W: // global
           I64[Sp - 8] = block_c902R_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u903g; else goto c902S;
       u903g: // global
           call _c902R(R1) args: 0, res: 0, upd: 0;
       c902S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCWcharToChar_info" {
     Foreign.C.String.castCWcharToChar_info:
         const Foreign.C.String.castCWcharToChar_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8YDv_srt+112;
 },
 _c902R() //  [R1]
         { []
         }
     {offset
       c902R: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9031; else goto c9030;
       c9031: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9030: // global
           _s8YwR::I64 = I64[R1 + 7];
           if (_s8YwR::I64 > 1114111) goto c9038; else goto c903f;
       c9038: // global
           Hp = Hp - 16;
           R2 = _s8YwR::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c903f: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s8YwR::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c902R_info" {
     block_c902R_info:
         const _c902R;
         const 0;
         const 4294967326;
         const S8YDv_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.945661737 UTC

[section ""data" . Foreign.C.String.peekCWString2_closure" {
     Foreign.C.String.peekCWString2_closure:
         const Foreign.C.String.peekCWString2_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.C.String.peekCWString2_entry() //  [R1]
         { []
         }
     {offset
       c903x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c903y; else goto c903z;
       c903y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c903z: // global
           (_c903u::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c903u::I64 == 0) goto c903w; else goto c903v;
       c903w: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c903v: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c903u::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = Foreign.C.String.castCWcharToChar_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCWString2_info" {
     Foreign.C.String.peekCWString2_info:
         const Foreign.C.String.peekCWString2_entry;
         const 0;
         const 4294967317;
         const S8YDv_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.951918927 UTC

[section ""data" . Foreign.C.String.$wpeekCWStringLen_closure" {
     Foreign.C.String.$wpeekCWStringLen_closure:
         const Foreign.C.String.$wpeekCWStringLen_info;
         const 0;
 },
 sat_s8Yx9_entry() //  [R1]
         { []
         }
     {offset
       c904l: // global
           _s8Yx9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c904m; else goto c904n;
       c904n: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c904p; else goto c904o;
       c904p: // global
           HpAlloc = 40;
           goto c904m;
       c904m: // global
           R1 = _s8Yx9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c904o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8Yx9::P64;
           _s8Yx0::P64 = P64[_s8Yx9::P64 + 16];
           _s8Yx6::I64 = I64[_s8Yx9::P64 + 24];
           I64[Hp - 32] = GHC.Int.I32#_con_info;
           I64[Hp - 24] = _s8Yx6::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8Yx0::P64;
           R3 = Hp - 14;
           R2 = Foreign.C.String.castCWcharToChar_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8Yx9_info" {
     sat_s8Yx9_info:
         const sat_s8Yx9_entry;
         const 4294967297;
         const 4294967315;
         const S8YDv_srt+120;
 },
 Foreign.C.String.$wpeekCWStringLen_entry() //  [R2, R3]
         { []
         }
     {offset
       c904t: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c904u; else goto c904v;
       c904u: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.C.String.$wpeekCWStringLen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c904v: // global
           if (%MO_S_Gt_W64(R3, 0)) goto c904r; else goto c904s;
       c904r: // global
           P64[Sp - 24] = R2;
           I64[Sp - 16] = R3 - 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 24;
           call _c903V() args: 0, res: 0, upd: 0;
       c904s: // global
           R1 = Foreign.C.String.peekCWString2_closure;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.$wpeekCWStringLen_info" {
     Foreign.C.String.$wpeekCWStringLen_info:
         const Foreign.C.String.$wpeekCWStringLen_entry;
         const 0;
         const 30064771086;
         const 12884901902;
         const S8YDv_srt+120;
 },
 _c903V() //  []
         { []
         }
     {offset
       c903V: // global
           _s8YwV::P64 = P64[Sp];
           _s8Yxe::I64 = I64[Sp + 8];
           if (_s8Yxe::I64 != 0) goto c904C; else goto c904G;
       c904C: // global
           I64[Sp - 8] = block_c9040_info;
           R1 = _s8YwV::P64;
           I64[Sp + 8] = _s8Yxe::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u904K; else goto c9041;
       u904K: // global
           call _c9040(R1) args: 0, res: 0, upd: 0;
       c9041: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c904G: // global
           I64[Sp + 8] = block_c904a_info;
           R1 = _s8YwV::P64;
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u904L; else goto c904b;
       u904L: // global
           call _c904a(R1) args: 0, res: 0, upd: 0;
       c904b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9040() //  [R1]
         { []
         }
     {offset
       c9040: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c904F; else goto c904E;
       c904F: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c904E: // global
           _s8Yxe::I64 = I64[Sp + 16];
           _s8Yxj::I64 = %MO_SS_Conv_W32_W64(I32[I64[R1 + 7] + (_s8Yxe::I64 << 2)]);
           I64[Hp - 32] = GHC.Int.I32#_con_info;
           I64[Hp - 24] = _s8Yxj::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 16] = _s8Yxe::I64 - 1;
           P64[Sp + 24] = Hp - 14;
           Sp = Sp + 8;
           call _c903V() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9040_info" {
     block_c9040_info:
         const _c9040;
         const 131;
         const 4294967326;
         const S8YDv_srt+120;
 },
 _c904a() //  [R1]
         { []
         }
     {offset
       c904a: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c904z; else goto c904y;
       c904z: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c904y: // global
           _s8Yx6::I64 = %MO_SS_Conv_W32_W64(I32[I64[R1 + 7]]);
           I64[Hp - 24] = sat_s8Yx9_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _s8Yx6::I64;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c904a_info" {
     block_c904a_info:
         const _c904a;
         const 1;
         const 4294967326;
         const S8YDv_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.963507628 UTC

[section ""data" . Foreign.C.String.peekCWStringLen1_closure" {
     Foreign.C.String.peekCWStringLen1_closure:
         const Foreign.C.String.peekCWStringLen1_info;
         const 0;
 },
 Foreign.C.String.peekCWStringLen1_entry() //  [R2]
         { []
         }
     {offset
       c905q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c905u; else goto c905v;
       c905u: // global
           R2 = R2;
           R1 = Foreign.C.String.peekCWStringLen1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c905v: // global
           I64[Sp - 8] = block_c905n_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u905D; else goto c905o;
       u905D: // global
           call _c905n(R1) args: 0, res: 0, upd: 0;
       c905o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCWStringLen1_info" {
     Foreign.C.String.peekCWStringLen1_info:
         const Foreign.C.String.peekCWStringLen1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S8YDv_srt+136;
 },
 _c905n() //  [R1]
         { []
         }
     {offset
       c905n: // global
           I64[Sp - 8] = block_c905t_info;
           _s8Yxr::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s8Yxr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u905C; else goto c905x;
       u905C: // global
           call _c905t(R1) args: 0, res: 0, upd: 0;
       c905x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c905n_info" {
     block_c905n_info:
         const _c905n;
         const 0;
         const 4294967326;
         const S8YDv_srt+136;
 },
 _c905t() //  [R1]
         { []
         }
     {offset
       c905t: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Foreign.C.String.$wpeekCWStringLen_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c905t_info" {
     block_c905t_info:
         const _c905t;
         const 1;
         const 4294967326;
         const S8YDv_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.969759986 UTC

[section ""data" . Foreign.C.String.peekCWStringLen_closure" {
     Foreign.C.String.peekCWStringLen_closure:
         const Foreign.C.String.peekCWStringLen_info;
         const 0;
 },
 Foreign.C.String.peekCWStringLen_entry() //  [R2]
         { []
         }
     {offset
       c905V: // global
           R2 = R2;
           call Foreign.C.String.peekCWStringLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCWStringLen_info" {
     Foreign.C.String.peekCWStringLen_info:
         const Foreign.C.String.peekCWStringLen_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8YDv_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.972650716 UTC

[section ""data" . Foreign.C.String.newCWString3_closure" {
     Foreign.C.String.newCWString3_closure:
         const GHC.Int.I32#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.977357407 UTC

[section ""data" . Foreign.C.String.$wpeekCWString_closure" {
     Foreign.C.String.$wpeekCWString_closure:
         const Foreign.C.String.$wpeekCWString_info;
         const 0;
 },
 sat_s8YxJ_entry() //  [R1]
         { []
         }
     {offset
       c906C: // global
           _s8YxJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c906D; else goto c906E;
       c906E: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c906G; else goto c906F;
       c906G: // global
           HpAlloc = 40;
           goto c906D;
       c906D: // global
           R1 = _s8YxJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c906F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8YxJ::P64;
           _s8YxC::P64 = P64[_s8YxJ::P64 + 16];
           _s8YxG::I64 = I64[_s8YxJ::P64 + 24];
           I64[Hp - 32] = GHC.Int.I32#_con_info;
           I64[Hp - 24] = _s8YxG::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8YxC::P64;
           R3 = Hp - 14;
           R2 = Foreign.C.String.castCWcharToChar_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8YxJ_info" {
     sat_s8YxJ_info:
         const sat_s8YxJ_entry;
         const 4294967297;
         const 4294967315;
         const S8YDv_srt+120;
 },
 Foreign.C.String.$wpeekCWString_entry() //  [R2]
         { []
         }
     {offset
       c906J: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c906K; else goto c906L;
       c906K: // global
           R2 = R2;
           R1 = Foreign.C.String.$wpeekCWString_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c906L: // global
           _s8Yxv::I64 = R2;
           _s8YxX::I64 = 0;
           goto c9070;
       c9070: // global
           if (I32[_s8Yxv::I64 + (_s8YxX::I64 << 2)] == 0 :: W32) goto c9076; else goto c9075;
       c9076: // global
           if (%MO_S_Gt_W64(_s8YxX::I64, 0)) goto c906X; else goto c906Y;
       c906X: // global
           I64[Sp - 24] = _s8Yxv::I64;
           I64[Sp - 16] = _s8YxX::I64 - 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call _c906m() args: 0, res: 0, upd: 0;
       c906Y: // global
           R1 = Foreign.C.String.peekCWString2_closure;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9075: // global
           _s8YxX::I64 = _s8YxX::I64 + 1;
           goto c9070;
     }
 },
 section ""relreadonly" . Foreign.C.String.$wpeekCWString_info" {
     Foreign.C.String.$wpeekCWString_info:
         const Foreign.C.String.$wpeekCWString_entry;
         const 0;
         const 81604378638;
         const 8589934596;
         const S8YDv_srt+120;
 },
 _c906m() //  []
         { []
         }
     {offset
       c906m: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c906S; else goto c906R;
       c906S: // global
           HpAlloc = 40;
           I64[Sp] = block_c906m_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c906R: // global
           _s8YxM::P64 = P64[Sp + 24];
           _s8YxO::I64 = I64[Sp + 16];
           if (_s8YxO::I64 != 0) goto c906U; else goto c906V;
       c906U: // global
           I64[Hp - 32] = GHC.Int.I32#_con_info;
           I64[Hp - 24] = %MO_SS_Conv_W32_W64(I32[I64[Sp + 8] + (_s8YxO::I64 << 2)]);
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8YxM::P64;
           I64[Sp + 16] = _s8YxO::I64 - 1;
           P64[Sp + 24] = Hp - 14;
           call _c906m() args: 0, res: 0, upd: 0;
       c906V: // global
           Hp = Hp - 40;
           P64[Sp + 24] = _s8YxM::P64;
           Sp = Sp + 8;
           call _c906u() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c906m_info" {
     block_c906m_info:
         const _c906m;
         const 195;
         const 4294967326;
         const S8YDv_srt+120;
 },
 _c906u() //  []
         { []
         }
     {offset
       c906u: // global
           Hp = Hp + 32;
           _s8YxC::P64 = P64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto c906P; else goto c906O;
       c906P: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_c906t_info;
           R1 = _s8YxC::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c906O: // global
           I64[Hp - 24] = sat_s8YxJ_info;
           P64[Hp - 8] = _s8YxC::P64;
           I64[Hp] = %MO_SS_Conv_W32_W64(I32[I64[Sp]]);
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c906t() //  [R1]
         { []
         }
     {offset
       c906t: // global
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c906u() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c906t_info" {
     block_c906t_info:
         const _c906t;
         const 451;
         const 4294967326;
         const S8YDv_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.987488815 UTC

[section ""data" . Foreign.C.String.peekCWString1_closure" {
     Foreign.C.String.peekCWString1_closure:
         const Foreign.C.String.peekCWString1_info;
         const 0;
 },
 Foreign.C.String.peekCWString1_entry() //  [R2]
         { []
         }
     {offset
       c907R: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c907S; else goto c907T;
       c907S: // global
           R2 = R2;
           R1 = Foreign.C.String.peekCWString1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c907T: // global
           I64[Sp - 8] = block_c907O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u907X; else goto c907P;
       u907X: // global
           call _c907O(R1) args: 0, res: 0, upd: 0;
       c907P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCWString1_info" {
     Foreign.C.String.peekCWString1_info:
         const Foreign.C.String.peekCWString1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S8YDv_srt+152;
 },
 _c907O() //  [R1]
         { []
         }
     {offset
       c907O: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call Foreign.C.String.$wpeekCWString_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c907O_info" {
     block_c907O_info:
         const _c907O;
         const 0;
         const 4294967326;
         const S8YDv_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.992631598 UTC

[section ""data" . Foreign.C.String.peekCWString_closure" {
     Foreign.C.String.peekCWString_closure:
         const Foreign.C.String.peekCWString_info;
         const 0;
 },
 Foreign.C.String.peekCWString_entry() //  [R2]
         { []
         }
     {offset
       c908b: // global
           R2 = R2;
           call Foreign.C.String.peekCWString1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCWString_info" {
     Foreign.C.String.peekCWString_info:
         const Foreign.C.String.peekCWString_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8YDv_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:07.996453665 UTC

[section ""data" . Foreign.C.String.newCWString2_closure" {
     Foreign.C.String.newCWString2_closure:
         const Foreign.C.String.newCWString2_info;
 },
 Foreign.C.String.newCWString2_entry() //  [R2]
         { []
         }
     {offset
       c908p: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c908z; else goto c908A;
       c908z: // global
           R2 = R2;
           R1 = Foreign.C.String.newCWString2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c908A: // global
           I64[Sp - 8] = block_c908m_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u908E; else goto c908n;
       u908E: // global
           call _c908m(R1) args: 0, res: 0, upd: 0;
       c908n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCWString2_info" {
     Foreign.C.String.newCWString2_info:
         const Foreign.C.String.newCWString2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c908m() //  [R1]
         { []
         }
     {offset
       c908m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c908D; else goto c908C;
       c908D: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c908C: // global
           _s8Yyc::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _s8Yyc::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c908m_info" {
     block_c908m_info:
         const _c908m;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.004297993 UTC

[section ""data" . Foreign.C.String.withCWStringLen1_closure" {
     Foreign.C.String.withCWStringLen1_closure:
         const Foreign.C.String.withCWStringLen1_info;
 },
 Foreign.C.String.withCWStringLen1_entry() //  [R2, R3]
         { []
         }
     {offset
       c908W: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c9090; else goto c9091;
       c9090: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.C.String.withCWStringLen1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9091: // global
           I64[Sp - 16] = block_c908U_info;
           _s8Yye::P64 = R3;
           R3 = R2;
           R2 = Foreign.C.String.newCWString2_closure+1;
           P64[Sp - 8] = _s8Yye::P64;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCWStringLen1_info" {
     Foreign.C.String.withCWStringLen1_info:
         const Foreign.C.String.withCWStringLen1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c908U() //  [R1]
         { []
         }
     {offset
       c908U: // global
           I64[Sp - 8] = block_c908Z_info;
           R3 = 0;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c908U_info" {
     block_c908U_info:
         const _c908U;
         const 1;
         const 30;
 },
 _c908Z() //  [R1]
         { []
         }
     {offset
       c908Z: // global
           I64[Sp - 8] = block_c909a_info;
           R2 = 4;
           _s8Yyh::I64 = R1;
           R1 = R1 << 2;
           I64[Sp] = _s8Yyh::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c908Z_info" {
     block_c908Z_info:
         const _c908Z;
         const 2;
         const 30;
 },
 _c909a() //  [R1]
         { []
         }
     {offset
       c909a: // global
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _c909w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c909a_info" {
     block_c909a_info:
         const _c909a;
         const 67;
         const 30;
 },
 _c909w() //  []
         { []
         }
     {offset
       c909w: // global
           _s8YyA::P64 = P64[Sp];
           I64[Sp] = block_c909z_info;
           R1 = _s8YyA::P64;
           if (R1 & 7 != 0) goto u909Z; else goto c909B;
       u909Z: // global
           call _c909z(R1) args: 0, res: 0, upd: 0;
       c909B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c909z() //  [R1]
         { []
         }
     {offset
       c909z: // global
           if (R1 & 7 == 1) goto u909W; else goto c909M;
       u909W: // global
           Sp = Sp + 8;
           call _c909j() args: 0, res: 0, upd: 0;
       c909M: // global
           I64[Sp - 8] = block_c909K_info;
           _s8YyF::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s8YyF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u90a0; else goto c909N;
       u90a0: // global
           call _c909K(R1) args: 0, res: 0, upd: 0;
       c909N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c909z_info" {
     block_c909z_info:
         const _c909z;
         const 453;
         const 30;
 },
 _c909j() //  []
         { []
         }
     {offset
       c909j: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c909r; else goto c909q;
       c909r: // global
           HpAlloc = 56;
           I64[Sp] = block_c909j_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c909q: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           I64[Sp + 16] = block_c909o_info;
           R2 = Hp - 15;
           R1 = P64[Sp + 32];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c909j_info" {
     block_c909j_info:
         const _c909j;
         const 196;
         const 30;
 },
 _c909o() //  [R1]
         { []
         }
     {offset
       c909o: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c909o_info" {
     block_c909o_info:
         const _c909o;
         const 130;
         const 30;
 },
 _c909K() //  [R1]
         { []
         }
     {offset
       c909K: // global
           _s8YyB::I64 = I64[Sp + 16];
           _s8YyF::P64 = P64[Sp + 8];
           I32[I64[Sp + 24] + (_s8YyB::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           P64[Sp + 8] = _s8YyF::P64;
           I64[Sp + 16] = _s8YyB::I64 + 1;
           Sp = Sp + 8;
           call _c909w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c909K_info" {
     block_c909K_info:
         const _c909K;
         const 902;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.018879176 UTC

[section ""data" . Foreign.C.String.withCWStringLen_closure" {
     Foreign.C.String.withCWStringLen_closure:
         const Foreign.C.String.withCWStringLen_info;
 },
 Foreign.C.String.withCWStringLen_entry() //  [R2, R3]
         { []
         }
     {offset
       c90aN: // global
           R3 = R3;
           R2 = R2;
           call Foreign.C.String.withCWStringLen1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCWStringLen_info" {
     Foreign.C.String.withCWStringLen_info:
         const Foreign.C.String.withCWStringLen_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.023729074 UTC

[section ""data" . Foreign.C.String.withCWString_closure" {
     Foreign.C.String.withCWString_closure:
         const Foreign.C.String.withCWString_info;
         const 0;
 },
 vals_s8YyL_entry() //  [R1]
         { []
         }
     {offset
       c90b2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c90b3; else goto c90b4;
       c90b3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c90b4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Foreign.C.String.newCWString2_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . vals_s8YyL_info" {
     vals_s8YyL_info:
         const vals_s8YyL_entry;
         const 1;
         const 16;
 },
 sat_s8YyO_entry() //  [R1]
         { []
         }
     {offset
       c90bf: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8YyO_info" {
     sat_s8YyO_info:
         const sat_s8YyO_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s8YyP_entry() //  [R1, R2]
         { []
         }
     {offset
       c90bi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c90bm; else goto c90bl;
       c90bm: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90bl: // global
           _s8YyL::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s8YyO_info;
           P64[Hp] = R2;
           R5 = Hp - 7;
           R4 = _s8YyL::P64;
           R3 = Foreign.C.String.newCWString3_closure+1;
           R2 = Foreign.C.Types.$fStorableCWchar_closure;
           call Foreign.Marshal.Array.withArrayLen0_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8YyP_info" {
     sat_s8YyP_info:
         const sat_s8YyP_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S8YDv_srt+168;
 },
 Foreign.C.String.withCWString_entry() //  [R2]
         { []
         }
     {offset
       c90bn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c90br; else goto c90bq;
       c90br: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.C.String.withCWString_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90bq: // global
           I64[Hp - 32] = vals_s8YyL_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s8YyP_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCWString_info" {
     Foreign.C.String.withCWString_info:
         const Foreign.C.String.withCWString_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8YDv_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.032019723 UTC

[section ""data" . Foreign.C.String.newCWString1_closure" {
     Foreign.C.String.newCWString1_closure:
         const Foreign.C.String.newCWString1_info;
         const 0;
 },
 Foreign.C.String.newCWString1_entry() //  [R2]
         { []
         }
     {offset
       c90bO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c90bP; else goto c90bQ;
       c90bP: // global
           R2 = R2;
           R1 = Foreign.C.String.newCWString1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90bQ: // global
           I64[Sp - 8] = block_c90bM_info;
           R3 = R2;
           R2 = Foreign.C.String.newCWString2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCWString1_info" {
     Foreign.C.String.newCWString1_info:
         const Foreign.C.String.newCWString1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S8YDv_srt+184;
 },
 _c90bM() //  [R1]
         { []
         }
     {offset
       c90bM: // global
           R4 = R1;
           R3 = Foreign.C.String.newCWString3_closure+1;
           R2 = Foreign.C.Types.$fStorableCWchar_closure;
           Sp = Sp + 8;
           call Foreign.Marshal.Array.newArray3_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90bM_info" {
     block_c90bM_info:
         const _c90bM;
         const 0;
         const 4294967326;
         const S8YDv_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.037809983 UTC

[section ""data" . Foreign.C.String.newCWString_closure" {
     Foreign.C.String.newCWString_closure:
         const Foreign.C.String.newCWString_info;
         const 0;
 },
 Foreign.C.String.newCWString_entry() //  [R2]
         { []
         }
     {offset
       c90c6: // global
           R2 = R2;
           call Foreign.C.String.newCWString1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCWString_info" {
     Foreign.C.String.newCWString_info:
         const Foreign.C.String.newCWString_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8YDv_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.04245684 UTC

[section ""data" . Foreign.C.String.newCWStringLen1_closure" {
     Foreign.C.String.newCWStringLen1_closure:
         const Foreign.C.String.newCWStringLen1_info;
         const 0;
 },
 sat_s8Yz0_entry() //  [R1]
         { []
         }
     {offset
       c90ct: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c90cx; else goto c90cy;
       c90cx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c90cy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c90cr_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8Yz0_info" {
     sat_s8Yz0_info:
         const sat_s8Yz0_entry;
         const 1;
         const 16;
 },
 _c90cr() //  [R1]
         { []
         }
     {offset
       c90cr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c90cB; else goto c90cA;
       c90cB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c90cA: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c90cr_info" {
     block_c90cr_info:
         const _c90cr;
         const 0;
         const 30;
 },
 Foreign.C.String.newCWStringLen1_entry() //  [R2]
         { []
         }
     {offset
       c90cC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c90cE; else goto c90cF;
       c90cE: // global
           R2 = R2;
           R1 = Foreign.C.String.newCWStringLen1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90cF: // global
           I64[Sp - 8] = block_c90ch_info;
           R3 = R2;
           R2 = Foreign.C.String.newCWString2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCWStringLen1_info" {
     Foreign.C.String.newCWStringLen1_info:
         const Foreign.C.String.newCWStringLen1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S8YDv_srt+200;
 },
 _c90ch() //  [R1]
         { []
         }
     {offset
       c90ch: // global
           I64[Sp - 8] = block_c90cl_info;
           R3 = R1;
           R2 = Foreign.C.Types.$fStorableCWchar_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call Foreign.Marshal.Array.newArray1_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90ch_info" {
     block_c90ch_info:
         const _c90ch;
         const 0;
         const 4294967326;
         const S8YDv_srt+200;
 },
 _c90cl() //  [R1]
         { []
         }
     {offset
       c90cl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c90cJ; else goto c90cI;
       c90cJ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90cI: // global
           I64[Hp - 40] = sat_s8Yz0_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90cl_info" {
     block_c90cl_info:
         const _c90cl;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.051808091 UTC

[section ""data" . Foreign.C.String.newCWStringLen_closure" {
     Foreign.C.String.newCWStringLen_closure:
         const Foreign.C.String.newCWStringLen_info;
         const 0;
 },
 Foreign.C.String.newCWStringLen_entry() //  [R2]
         { []
         }
     {offset
       c90da: // global
           R2 = R2;
           call Foreign.C.String.newCWStringLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCWStringLen_info" {
     Foreign.C.String.newCWStringLen_info:
         const Foreign.C.String.newCWStringLen_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8YDv_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.056051565 UTC

[section ""data" . Foreign.C.String.castCharToCChar1_closure" {
     Foreign.C.String.castCharToCChar1_closure:
         const Foreign.C.String.castCharToCChar1_info;
 },
 Foreign.C.String.castCharToCChar1_entry() //  [R2]
         { []
         }
     {offset
       c90do: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c90dy; else goto c90dz;
       c90dy: // global
           R2 = R2;
           R1 = Foreign.C.String.castCharToCChar1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90dz: // global
           I64[Sp - 8] = block_c90dl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u90dD; else goto c90dm;
       u90dD: // global
           call _c90dl(R1) args: 0, res: 0, upd: 0;
       c90dm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCharToCChar1_info" {
     Foreign.C.String.castCharToCChar1_info:
         const Foreign.C.String.castCharToCChar1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c90dl() //  [R1]
         { []
         }
     {offset
       c90dl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c90dC; else goto c90dB;
       c90dC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90dB: // global
           _s8Yz6::I64 = %MO_SS_Conv_W8_W64(%MO_SS_Conv_W64_W8(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Int.I8#_con_info;
           I64[Hp] = _s8Yz6::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90dl_info" {
     block_c90dl_info:
         const _c90dl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.061138669 UTC

[section ""data" . Foreign.C.String.castCharToCSChar_closure" {
     Foreign.C.String.castCharToCSChar_closure:
         const Foreign.C.String.castCharToCSChar_info;
 },
 Foreign.C.String.castCharToCSChar_entry() //  [R2]
         { []
         }
     {offset
       c90dT: // global
           R2 = R2;
           call Foreign.C.String.castCharToCChar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCharToCSChar_info" {
     Foreign.C.String.castCharToCSChar_info:
         const Foreign.C.String.castCharToCSChar_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.064807478 UTC

[section ""data" . Foreign.C.String.castCharToCUChar1_closure" {
     Foreign.C.String.castCharToCUChar1_closure:
         const Foreign.C.String.castCharToCUChar1_info;
 },
 Foreign.C.String.castCharToCUChar1_entry() //  [R2]
         { []
         }
     {offset
       c90e7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c90ek; else goto c90el;
       c90ek: // global
           R2 = R2;
           R1 = Foreign.C.String.castCharToCUChar1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90el: // global
           I64[Sp - 8] = block_c90e4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u90ep; else goto c90e5;
       u90ep: // global
           call _c90e4(R1) args: 0, res: 0, upd: 0;
       c90e5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCharToCUChar1_info" {
     Foreign.C.String.castCharToCUChar1_info:
         const Foreign.C.String.castCharToCUChar1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c90e4() //  [R1]
         { []
         }
     {offset
       c90e4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c90eo; else goto c90en;
       c90eo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90en: // global
           _s8Yzc::I64 = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Word.W8#_con_info;
           I64[Hp] = _s8Yzc::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90e4_info" {
     block_c90e4_info:
         const _c90e4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.070781501 UTC

[section ""data" . Foreign.C.String.castCharToCUChar_closure" {
     Foreign.C.String.castCharToCUChar_closure:
         const Foreign.C.String.castCharToCUChar_info;
 },
 Foreign.C.String.castCharToCUChar_entry() //  [R2]
         { []
         }
     {offset
       c90eF: // global
           R2 = R2;
           call Foreign.C.String.castCharToCUChar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCharToCUChar_info" {
     Foreign.C.String.castCharToCUChar_info:
         const Foreign.C.String.castCharToCUChar_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.074025554 UTC

[section ""data" . Foreign.C.String.castCharToCChar_closure" {
     Foreign.C.String.castCharToCChar_closure:
         const Foreign.C.String.castCharToCChar_info;
 },
 Foreign.C.String.castCharToCChar_entry() //  [R2]
         { []
         }
     {offset
       c90eQ: // global
           R2 = R2;
           call Foreign.C.String.castCharToCChar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCharToCChar_info" {
     Foreign.C.String.castCharToCChar_info:
         const Foreign.C.String.castCharToCChar_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.079384691 UTC

[section ""data" . Foreign.C.String.newCAString1_closure" {
     Foreign.C.String.newCAString1_closure:
         const Foreign.C.String.newCAString1_info;
         const 0;
 },
 Foreign.C.String.newCAString1_entry() //  [R2]
         { []
         }
     {offset
       c90f3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c90f4; else goto c90f5;
       c90f4: // global
           R2 = R2;
           R1 = Foreign.C.String.newCAString1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90f5: // global
           I64[Sp - 16] = block_c90f1_info;
           R3 = 0;
           _s8Yzd::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s8Yzd::P64;
           Sp = Sp - 16;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCAString1_info" {
     Foreign.C.String.newCAString1_info:
         const Foreign.C.String.newCAString1_entry;
         const 0;
         const 18014402804449294;
         const 8589934597;
         const S8YDv_srt+40;
 },
 _c90f1() //  [R1]
         { []
         }
     {offset
       c90f1: // global
           _s8Yzd::P64 = P64[Sp + 8];
           (_s8Yzl::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(R1 + 1);
           if (_s8Yzl::I64 == 0) goto c90fT; else goto c90fS;
       c90fT: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c90fS: // global
           I64[Sp - 8] = 0;
           P64[Sp] = _s8Yzd::P64;
           I64[Sp + 8] = _s8Yzl::I64;
           Sp = Sp - 8;
           call _c90fv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90f1_info" {
     block_c90f1_info:
         const _c90f1;
         const 1;
         const 4294967326;
         const S8YDv_srt+40;
 },
 _c90fv() //  []
         { []
         }
     {offset
       c90fv: // global
           I64[Sp - 8] = block_c90fy_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u90g8; else goto c90fA;
       u90g8: // global
           call _c90fy(R1) args: 0, res: 0, upd: 0;
       c90fA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c90fy() //  [R1]
         { []
         }
     {offset
       c90fy: // global
           if (R1 & 7 == 1) goto c90fG; else goto c90fL;
       c90fG: // global
           I64[Sp + 16] = I64[Sp + 8];
           Sp = Sp + 16;
           call _c90fn() args: 0, res: 0, upd: 0;
       c90fL: // global
           I64[Sp] = block_c90fJ_info;
           _s8Yzy::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _s8Yzy::P64;
           if (R1 & 7 != 0) goto u90g9; else goto c90fM;
       u90g9: // global
           call _c90fJ(R1) args: 0, res: 0, upd: 0;
       c90fM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90fy_info" {
     block_c90fy_info:
         const _c90fy;
         const 451;
         const 30;
 },
 _c90fn() //  []
         { []
         }
     {offset
       c90fn: // global
           Hp = Hp + 16;
           _s8Yzo::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c90fs; else goto c90fr;
       c90fs: // global
           HpAlloc = 16;
           I64[Sp] = block_c90fm_info;
           R1 = _s8Yzo::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c90fr: // global
           _s8Yzl::I64 = I64[Sp + 8];
           I8[_s8Yzl::I64 + _s8Yzo::I64] = 0 :: W8;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8Yzl::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c90fm() //  [R1]
         { []
         }
     {offset
       c90fm: // global
           I64[Sp] = R1;
           call _c90fn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90fm_info" {
     block_c90fm_info:
         const _c90fm;
         const 65;
         const 30;
 },
 _c90fJ() //  [R1]
         { []
         }
     {offset
       c90fJ: // global
           _s8Yzu::I64 = I64[Sp + 8];
           _s8Yzy::P64 = P64[Sp + 16];
           I8[I64[Sp + 24] + _s8Yzu::I64] = %MO_SS_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 16] = _s8Yzy::P64;
           I64[Sp + 8] = _s8Yzu::I64 + 1;
           Sp = Sp + 8;
           call _c90fv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90fJ_info" {
     block_c90fJ_info:
         const _c90fJ;
         const 323;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.091124999 UTC

[section ""data" . Foreign.C.String.newCAString_closure" {
     Foreign.C.String.newCAString_closure:
         const Foreign.C.String.newCAString_info;
         const 0;
 },
 Foreign.C.String.newCAString_entry() //  [R2]
         { []
         }
     {offset
       c90gK: // global
           R2 = R2;
           call Foreign.C.String.newCAString1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCAString_info" {
     Foreign.C.String.newCAString_info:
         const Foreign.C.String.newCAString_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8YDv_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.096409393 UTC

[section ""data" . Foreign.C.String.newCAStringLen1_closure" {
     Foreign.C.String.newCAStringLen1_closure:
         const Foreign.C.String.newCAStringLen1_info;
         const 0;
 },
 Foreign.C.String.newCAStringLen1_entry() //  [R2]
         { []
         }
     {offset
       c90gX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c90gY; else goto c90gZ;
       c90gY: // global
           R2 = R2;
           R1 = Foreign.C.String.newCAStringLen1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90gZ: // global
           I64[Sp - 16] = block_c90gV_info;
           R3 = 0;
           _s8YzF::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s8YzF::P64;
           Sp = Sp - 16;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCAStringLen1_info" {
     Foreign.C.String.newCAStringLen1_info:
         const Foreign.C.String.newCAStringLen1_entry;
         const 0;
         const 36028801313931278;
         const 8589934597;
         const S8YDv_srt+40;
 },
 _c90gV() //  [R1]
         { []
         }
     {offset
       c90gV: // global
           _s8YzF::P64 = P64[Sp + 8];
           (_s8YzN::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(R1 + 1);
           if (_s8YzN::I64 == 0) goto c90hP; else goto c90hO;
       c90hP: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c90hO: // global
           P64[Sp - 16] = _s8YzF::P64;
           I64[Sp - 8] = 0;
           I64[Sp] = _s8YzN::I64;
           I64[Sp + 8] = R1;
           Sp = Sp - 16;
           call _c90hr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90gV_info" {
     block_c90gV_info:
         const _c90gV;
         const 1;
         const 4294967326;
         const S8YDv_srt+40;
 },
 _c90hr() //  []
         { []
         }
     {offset
       c90hr: // global
           _s8YzV::P64 = P64[Sp];
           I64[Sp] = block_c90hu_info;
           R1 = _s8YzV::P64;
           if (R1 & 7 != 0) goto u90i2; else goto c90hw;
       u90i2: // global
           call _c90hu(R1) args: 0, res: 0, upd: 0;
       c90hw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c90hu() //  [R1]
         { []
         }
     {offset
       c90hu: // global
           if (R1 & 7 == 1) goto u90hZ; else goto c90hH;
       u90hZ: // global
           Sp = Sp + 8;
           call _c90hh() args: 0, res: 0, upd: 0;
       c90hH: // global
           I64[Sp - 8] = block_c90hF_info;
           _s8YA0::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s8YA0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u90i3; else goto c90hI;
       u90i3: // global
           call _c90hF(R1) args: 0, res: 0, upd: 0;
       c90hI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90hu_info" {
     block_c90hu_info:
         const _c90hu;
         const 451;
         const 30;
 },
 _c90hh() //  []
         { []
         }
     {offset
       c90hh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c90ho; else goto c90hn;
       c90ho: // global
           HpAlloc = 56;
           I64[Sp] = block_c90hh_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c90hn: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90hh_info" {
     block_c90hh_info:
         const _c90hh;
         const 194;
         const 30;
 },
 _c90hF() //  [R1]
         { []
         }
     {offset
       c90hF: // global
           _s8YzW::I64 = I64[Sp + 16];
           _s8YA0::P64 = P64[Sp + 8];
           I8[I64[Sp + 24] + _s8YzW::I64] = %MO_SS_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 8] = _s8YA0::P64;
           I64[Sp + 16] = _s8YzW::I64 + 1;
           Sp = Sp + 8;
           call _c90hr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90hF_info" {
     block_c90hF_info:
         const _c90hF;
         const 900;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.108134393 UTC

[section ""data" . Foreign.C.String.newCAStringLen_closure" {
     Foreign.C.String.newCAStringLen_closure:
         const Foreign.C.String.newCAStringLen_info;
         const 0;
 },
 Foreign.C.String.newCAStringLen_entry() //  [R2]
         { []
         }
     {offset
       c90iF: // global
           R2 = R2;
           call Foreign.C.String.newCAStringLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCAStringLen_info" {
     Foreign.C.String.newCAStringLen_info:
         const Foreign.C.String.newCAStringLen_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S8YDv_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.113977697 UTC

[section ""data" . Foreign.C.String.withCAString1_closure" {
     Foreign.C.String.withCAString1_closure:
         const Foreign.C.String.withCAString1_info;
 },
 Foreign.C.String.withCAString1_entry() //  [R2, R3]
         { []
         }
     {offset
       c90iS: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c90iT; else goto c90iU;
       c90iT: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.C.String.withCAString1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c90iU: // global
           I64[Sp - 24] = block_c90iQ_info;
           _s8YA9::P64 = R3;
           R3 = 0;
           _s8YA8::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s8YA8::P64;
           P64[Sp - 8] = _s8YA9::P64;
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCAString1_info" {
     Foreign.C.String.withCAString1_info:
         const Foreign.C.String.withCAString1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c90iQ() //  [R1]
         { []
         }
     {offset
       c90iQ: // global
           I64[Sp] = block_c90j1_info;
           R2 = 1;
           R1 = R1 + 1;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90iQ_info" {
     block_c90iQ_info:
         const _c90iQ;
         const 2;
         const 30;
 },
 _c90j1() //  [R1]
         { []
         }
     {offset
       c90j1: // global
           P64[Sp - 16] = P64[Sp + 8];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call _c90jl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90j1_info" {
     block_c90j1_info:
         const _c90j1;
         const 2;
         const 30;
 },
 _c90jl() //  []
         { []
         }
     {offset
       c90jl: // global
           _s8YAu::P64 = P64[Sp];
           I64[Sp] = block_c90jo_info;
           R1 = _s8YAu::P64;
           if (R1 & 7 != 0) goto u90jW; else goto c90jq;
       u90jW: // global
           call _c90jo(R1) args: 0, res: 0, upd: 0;
       c90jq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c90jo() //  [R1]
         { []
         }
     {offset
       c90jo: // global
           if (R1 & 7 == 1) goto c90jw; else goto c90jB;
       c90jw: // global
           I64[Sp + 8] = I64[Sp + 8];
           Sp = Sp + 8;
           call _c90ja() args: 0, res: 0, upd: 0;
       c90jB: // global
           I64[Sp - 8] = block_c90jz_info;
           _s8YAz::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s8YAz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u90jX; else goto c90jC;
       u90jX: // global
           call _c90jz(R1) args: 0, res: 0, upd: 0;
       c90jC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90jo_info" {
     block_c90jo_info:
         const _c90jo;
         const 196;
         const 30;
 },
 _c90ja() //  []
         { []
         }
     {offset
       c90ja: // global
           Hp = Hp + 16;
           _s8YAl::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c90jg; else goto c90jf;
       c90jg: // global
           HpAlloc = 16;
           I64[Sp] = block_c90j9_info;
           R1 = _s8YAl::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c90jf: // global
           _s8YA9::P64 = P64[Sp + 24];
           _s8YAj::I64 = I64[Sp + 8];
           I8[_s8YAj::I64 + _s8YAl::I64] = 0 :: W8;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8YAj::I64;
           I64[Sp + 8] = block_c90jd_info;
           R2 = Hp - 7;
           R1 = _s8YA9::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c90j9() //  [R1]
         { []
         }
     {offset
       c90j9: // global
           I64[Sp] = R1;
           call _c90ja() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90j9_info" {
     block_c90j9_info:
         const _c90j9;
         const 67;
         const 30;
 },
 _c90jd() //  [R1]
         { []
         }
     {offset
       c90jd: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90jd_info" {
     block_c90jd_info:
         const _c90jd;
         const 130;
         const 30;
 },
 _c90jz() //  [R1]
         { []
         }
     {offset
       c90jz: // global
           _s8YAv::I64 = I64[Sp + 16];
           _s8YAz::P64 = P64[Sp + 8];
           I8[I64[Sp + 24] + _s8YAv::I64] = %MO_SS_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 8] = _s8YAz::P64;
           I64[Sp + 16] = _s8YAv::I64 + 1;
           Sp = Sp + 8;
           call _c90jl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90jz_info" {
     block_c90jz_info:
         const _c90jz;
         const 389;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.128186672 UTC

[section ""data" . Foreign.C.String.withCAString_closure" {
     Foreign.C.String.withCAString_closure:
         const Foreign.C.String.withCAString_info;
 },
 Foreign.C.String.withCAString_entry() //  [R2, R3]
         { []
         }
     {offset
       c90kG: // global
           R3 = R3;
           R2 = R2;
           call Foreign.C.String.withCAString1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCAString_info" {
     Foreign.C.String.withCAString_info:
         const Foreign.C.String.withCAString_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.134216103 UTC

[section ""data" . Foreign.C.String.withCAStringLen1_closure" {
     Foreign.C.String.withCAStringLen1_closure:
         const Foreign.C.String.withCAStringLen1_info;
 },
 Foreign.C.String.withCAStringLen1_entry() //  [R2, R3]
         { []
         }
     {offset
       c90kT: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c90kU; else goto c90kV;
       c90kU: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.C.String.withCAStringLen1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c90kV: // global
           I64[Sp - 24] = block_c90kR_info;
           _s8YAH::P64 = R3;
           R3 = 0;
           _s8YAG::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s8YAG::P64;
           P64[Sp - 8] = _s8YAH::P64;
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCAStringLen1_info" {
     Foreign.C.String.withCAStringLen1_info:
         const Foreign.C.String.withCAStringLen1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c90kR() //  [R1]
         { []
         }
     {offset
       c90kR: // global
           I64[Sp - 8] = block_c90kY_info;
           R2 = 1;
           _s8YAJ::I64 = R1;
           R1 = R1;
           I64[Sp] = _s8YAJ::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90kR_info" {
     block_c90kR_info:
         const _c90kR;
         const 2;
         const 30;
 },
 _c90kY() //  [R1]
         { []
         }
     {offset
       c90kY: // global
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _c90ll() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90kY_info" {
     block_c90kY_info:
         const _c90kY;
         const 67;
         const 30;
 },
 _c90ll() //  []
         { []
         }
     {offset
       c90ll: // global
           _s8YB1::P64 = P64[Sp];
           I64[Sp] = block_c90lo_info;
           R1 = _s8YB1::P64;
           if (R1 & 7 != 0) goto u90lU; else goto c90lq;
       u90lU: // global
           call _c90lo(R1) args: 0, res: 0, upd: 0;
       c90lq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c90lo() //  [R1]
         { []
         }
     {offset
       c90lo: // global
           if (R1 & 7 == 1) goto u90lR; else goto c90lB;
       u90lR: // global
           Sp = Sp + 8;
           call _c90l8() args: 0, res: 0, upd: 0;
       c90lB: // global
           I64[Sp - 8] = block_c90lz_info;
           _s8YB6::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s8YB6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u90lV; else goto c90lC;
       u90lV: // global
           call _c90lz(R1) args: 0, res: 0, upd: 0;
       c90lC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90lo_info" {
     block_c90lo_info:
         const _c90lo;
         const 453;
         const 30;
 },
 _c90l8() //  []
         { []
         }
     {offset
       c90l8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c90lg; else goto c90lf;
       c90lg: // global
           HpAlloc = 56;
           I64[Sp] = block_c90l8_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c90lf: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           I64[Sp + 16] = block_c90ld_info;
           R2 = Hp - 15;
           R1 = P64[Sp + 32];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90l8_info" {
     block_c90l8_info:
         const _c90l8;
         const 196;
         const 30;
 },
 _c90ld() //  [R1]
         { []
         }
     {offset
       c90ld: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90ld_info" {
     block_c90ld_info:
         const _c90ld;
         const 130;
         const 30;
 },
 _c90lz() //  [R1]
         { []
         }
     {offset
       c90lz: // global
           _s8YB2::I64 = I64[Sp + 16];
           _s8YB6::P64 = P64[Sp + 8];
           I8[I64[Sp + 24] + _s8YB2::I64] = %MO_SS_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 8] = _s8YB6::P64;
           I64[Sp + 16] = _s8YB2::I64 + 1;
           Sp = Sp + 8;
           call _c90ll() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90lz_info" {
     block_c90lz_info:
         const _c90lz;
         const 902;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.148201781 UTC

[section ""data" . Foreign.C.String.withCAStringLen_closure" {
     Foreign.C.String.withCAStringLen_closure:
         const Foreign.C.String.withCAStringLen_info;
 },
 Foreign.C.String.withCAStringLen_entry() //  [R2, R3]
         { []
         }
     {offset
       c90mF: // global
           R3 = R3;
           R2 = R2;
           call Foreign.C.String.withCAStringLen1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCAStringLen_info" {
     Foreign.C.String.withCAStringLen_info:
         const Foreign.C.String.withCAStringLen_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:08.151796042 UTC

[section ""relreadonly" . S8YDv_srt" {
     S8YDv_srt:
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const Foreign.C.String.withCStringLen1_closure;
         const Foreign.C.String.withCString1_closure;
         const GHC.Foreign.charIsRepresentable1_closure;
         const Foreign.C.String.charIsRepresentable1_closure;
         const Foreign.Marshal.Alloc.malloc1_closure;
         const Foreign.Marshal.Alloc.realloc2_closure;
         const Foreign.C.String.newCStringLen1_closure;
         const GHC.Foreign.newCString1_closure;
         const Foreign.C.String.newCString1_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const Foreign.C.String.peekCStringLen1_closure;
         const GHC.Foreign.peekCString1_closure;
         const Foreign.C.String.peekCString1_closure;
         const GHC.Char.$wlvl_closure;
         const Foreign.C.String.castCWcharToChar_closure;
         const Foreign.C.String.peekCWString2_closure;
         const Foreign.C.String.$wpeekCWStringLen_closure;
         const Foreign.C.String.peekCWStringLen1_closure;
         const Foreign.C.String.$wpeekCWString_closure;
         const Foreign.C.String.peekCWString1_closure;
         const Foreign.Marshal.Array.withArrayLen0_closure;
         const Foreign.C.String.withCWString_closure;
         const Foreign.Marshal.Array.newArray3_closure;
         const Foreign.C.String.newCWString1_closure;
         const Foreign.Marshal.Array.newArray1_closure;
         const Foreign.C.String.newCWStringLen1_closure;
         const Foreign.C.String.newCAString1_closure;
         const Foreign.C.String.newCAStringLen1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.200932611 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:04:10.201965962 UTC

[section ""cstring" . Foreign.C.String.$trModule4_bytes" {
     Foreign.C.String.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.204864005 UTC

[section ""data" . Foreign.C.String.$trModule3_closure" {
     Foreign.C.String.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.C.String.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.206443285 UTC

[section ""cstring" . Foreign.C.String.$trModule2_bytes" {
     Foreign.C.String.$trModule2_bytes:
         I8[] [70,111,114,101,105,103,110,46,67,46,83,116,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.208165843 UTC

[section ""data" . Foreign.C.String.$trModule1_closure" {
     Foreign.C.String.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Foreign.C.String.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.209708463 UTC

[section ""data" . Foreign.C.String.$trModule_closure" {
     Foreign.C.String.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Foreign.C.String.$trModule3_closure+1;
         const Foreign.C.String.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.217344558 UTC

[section ""data" . Foreign.C.String.withCStringLen1_closure" {
     Foreign.C.String.withCStringLen1_closure:
         const Foreign.C.String.withCStringLen1_info;
         const 0;
 },
 $wgo_s90nf_entry() //  [R1, R2]
         { []
         }
     {offset
       c90zF: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c90zG; else goto c90zH;
       c90zG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90zH: // global
           I64[Sp - 48] = block_c90zA_info;
           _s90nf::P64 = R1;
           _s90mO::P64 = P64[R1 + 6];
           _s90mX::P64 = P64[R1 + 14];
           _s90ne::P64 = P64[R1 + 22];
           R1 = R2;
           P64[Sp - 40] = _s90mO::P64;
           P64[Sp - 32] = _s90mX::P64;
           P64[Sp - 24] = _s90ne::P64;
           P64[Sp - 16] = _s90nf::P64;
           I64[Sp - 8] = R2;
           Sp = Sp - 48;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s90nf_info" {
     $wgo_s90nf_info:
         const $wgo_s90nf_entry;
         const 3;
         const 8;
         const 8589934596;
 },
 _c90zA() //  [R1]
         { []
         }
     {offset
       c90zA: // global
           I64[Sp] = block_c90zC_info;
           _s90nn::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s90nn::P64;
           if (R1 & 7 != 0) goto u90Ag; else goto c90zD;
       u90Ag: // global
           call _c90zC(R1) args: 0, res: 0, upd: 0;
       c90zD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90zA_info" {
     block_c90zA_info:
         const _c90zA;
         const 1029;
         const 30;
 },
 _c90zC() //  [R1]
         { []
         }
     {offset
       c90zC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c90zN; else goto c90zM;
       c90zN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90zM: // global
           _s90np::P64 = P64[R1 + 7];
           _s90nq::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 40];
           _s90mO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c90zS_info;
           R6 = P64[Sp + 16] + 16;
           R5 = P64[Sp + 24];
           R4 = GHC.Types.False_closure+1;
           R3 = _s90nq::P64;
           R2 = _s90np::P64;
           P64[Sp - 8] = Hp - 7;
           P64[Sp] = _s90mO::P64;
           Sp = Sp - 8;
           call GHC.Foreign.$wtryFillBufferAndCall_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90zC_info" {
     block_c90zC_info:
         const _c90zC;
         const 1029;
         const 30;
 },
 _c90zS() //  [R1]
         { []
         }
     {offset
       c90zS: // global
           I64[Sp] = block_c90zU_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u90Ah; else goto c90zW;
       u90Ah: // global
           call _c90zU(R1) args: 0, res: 0, upd: 0;
       c90zW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90zS_info" {
     block_c90zS_info:
         const _c90zS;
         const 644;
         const 30;
 },
 _c90zU() //  [R1]
         { []
         }
     {offset
       c90zU: // global
           if (R1 & 7 == 1) goto c90A6; else goto c90Ac;
       c90A6: // global
           I64[Sp] = block_c90A4_info;
           R2 = I64[Sp + 32] << 1;
           R1 = P64[Sp + 24];
           call $wgo_s90nf_entry(R2, R1) args: 8, res: 8, upd: 8;
       c90Ac: // global
           _s90nF::P64 = P64[R1 + 6];
           call MO_Touch(P64[Sp + 8]);
           R1 = _s90nF::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90zU_info" {
     block_c90zU_info:
         const _c90zU;
         const 644;
         const 30;
 },
 _c90A4() //  [R1]
         { []
         }
     {offset
       c90A4: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90A4_info" {
     block_c90A4_info:
         const _c90A4;
         const 900;
         const 30;
 },
 sat_s90nX_entry() //  [R1, R2]
         { []
         }
     {offset
       c90Ai: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c90Aj; else goto c90Ak;
       c90Aj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90Ak: // global
           I64[Sp - 32] = block_c90za_info;
           R3 = 0;
           _s90mX::P64 = R2;
           _s90mN::P64 = P64[R1 + 6];
           R2 = _s90mN::P64;
           P64[Sp - 24] = _s90mN::P64;
           P64[Sp - 16] = P64[R1 + 14];
           P64[Sp - 8] = _s90mX::P64;
           Sp = Sp - 32;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s90nX_info" {
     sat_s90nX_info:
         const sat_s90nX_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c90za() //  [R1]
         { []
         }
     {offset
       c90za: // global
           I64[Sp - 8] = block_c90zh_info;
           R2 = 4;
           _s90mZ::I64 = R1;
           R1 = R1 << 2;
           I64[Sp] = _s90mZ::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90za_info" {
     block_c90za_info:
         const _c90za;
         const 3;
         const 30;
 },
 _c90zh() //  [R1]
         { []
         }
     {offset
       c90zh: // global
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _c90Az() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90zh_info" {
     block_c90zh_info:
         const _c90zh;
         const 68;
         const 30;
 },
 _c90Az() //  []
         { []
         }
     {offset
       c90Az: // global
           _s90nN::P64 = P64[Sp];
           I64[Sp] = block_c90AC_info;
           R1 = _s90nN::P64;
           if (R1 & 7 != 0) goto u90B1; else goto c90AE;
       u90B1: // global
           call _c90AC(R1) args: 0, res: 0, upd: 0;
       c90AE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c90AC() //  [R1]
         { []
         }
     {offset
       c90AC: // global
           if (R1 & 7 == 1) goto c90AK; else goto c90AP;
       c90AK: // global
           I64[Sp + 8] = block_c90zr_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c90AP: // global
           I64[Sp - 8] = block_c90AN_info;
           _s90nS::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s90nS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u90B2; else goto c90AQ;
       u90B2: // global
           call _c90AN(R1) args: 0, res: 0, upd: 0;
       c90AQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90AC_info" {
     block_c90AC_info:
         const _c90AC;
         const 454;
         const 30;
 },
 _c90zr() //  [R1]
         { []
         }
     {offset
       c90zr: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c90Aq; else goto c90Ap;
       c90Aq: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90Ap: // global
           I64[Hp - 96] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 88] = R1;
           I64[Hp - 80] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 72] = Hp - 95;
           P64[Hp - 64] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 56] = I64[Sp + 8];
           _s90mZ::I64 = I64[Sp + 16];
           I64[Hp - 48] = _s90mZ::I64;
           I64[Hp - 40] = 0;
           I64[Hp - 32] = _s90mZ::I64;
           I64[Hp - 24] = $wgo_s90nf_info;
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = Hp - 79;
           I64[Sp + 16] = block_c90Au_info;
           R2 = _s90mZ::I64 + 1;
           R1 = Hp - 22;
           Sp = Sp + 16;
           call $wgo_s90nf_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90zr_info" {
     block_c90zr_info:
         const _c90zr;
         const 197;
         const 30;
 },
 _c90Au() //  [R1]
         { []
         }
     {offset
       c90Au: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Au_info" {
     block_c90Au_info:
         const _c90Au;
         const 387;
         const 30;
 },
 _c90AN() //  [R1]
         { []
         }
     {offset
       c90AN: // global
           _s90nO::I64 = I64[Sp + 16];
           _s90nS::P64 = P64[Sp + 8];
           I32[I64[Sp + 24] + (_s90nO::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           P64[Sp + 8] = _s90nS::P64;
           I64[Sp + 16] = _s90nO::I64 + 1;
           Sp = Sp + 8;
           call _c90Az() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90AN_info" {
     block_c90AN_info:
         const _c90AN;
         const 903;
         const 30;
 },
 Foreign.C.String.withCStringLen1_entry() //  [R2, R3]
         { []
         }
     {offset
       c90B4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c90B5; else goto c90B6;
       c90B5: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.C.String.withCStringLen1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c90B6: // global
           I64[Sp - 24] = block_c90yY_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCStringLen1_info" {
     Foreign.C.String.withCStringLen1_info:
         const Foreign.C.String.withCStringLen1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S90Bc_srt;
 },
 _c90yY() //  [R1]
         { []
         }
     {offset
       c90yY: // global
           I64[Sp] = block_c90z0_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u90Bb; else goto c90z1;
       u90Bb: // global
           call _c90z0(R1) args: 0, res: 0, upd: 0;
       c90z1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90yY_info" {
     block_c90yY_info:
         const _c90yY;
         const 2;
         const 30;
 },
 _c90z0() //  [R1]
         { []
         }
     {offset
       c90z0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c90Ba; else goto c90B9;
       c90Ba: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90B9: // global
           _s90mW::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_s90nX_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 14;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = _s90mW::P64;
           Sp = Sp + 24;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90z0_info" {
     block_c90z0_info:
         const _c90z0;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.244279805 UTC

[section ""data" . Foreign.C.String.withCStringLen_closure" {
     Foreign.C.String.withCStringLen_closure:
         const Foreign.C.String.withCStringLen_info;
         const 0;
 },
 Foreign.C.String.withCStringLen_entry() //  [R2, R3]
         { []
         }
     {offset
       c90CY: // global
           R3 = R3;
           R2 = R2;
           call Foreign.C.String.withCStringLen1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCStringLen_info" {
     Foreign.C.String.withCStringLen_info:
         const Foreign.C.String.withCStringLen_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S90Bc_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.248110052 UTC

[section ""data" . Foreign.C.String.withCString1_closure" {
     Foreign.C.String.withCString1_closure:
         const Foreign.C.String.withCString1_info;
         const 0;
 },
 Foreign.C.String.withCString1_entry() //  [R2, R3]
         { []
         }
     {offset
       c90Db: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c90Dc; else goto c90Dd;
       c90Dc: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.C.String.withCString1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c90Dd: // global
           I64[Sp - 24] = block_c90D9_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCString1_info" {
     Foreign.C.String.withCString1_info:
         const Foreign.C.String.withCString1_entry;
         const 0;
         const 21474836494;
         const 12884901903;
         const S90Bc_srt;
 },
 _c90D9() //  [R1]
         { []
         }
     {offset
       c90D9: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90D9_info" {
     block_c90D9_info:
         const _c90D9;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.252816807 UTC

[section ""data" . Foreign.C.String.withCString_closure" {
     Foreign.C.String.withCString_closure:
         const Foreign.C.String.withCString_info;
         const 0;
 },
 Foreign.C.String.withCString_entry() //  [R2, R3]
         { []
         }
     {offset
       c90Ds: // global
           R3 = R3;
           R2 = R2;
           call Foreign.C.String.withCString1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCString_info" {
     Foreign.C.String.withCString_info:
         const Foreign.C.String.withCString_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S90Bc_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.256352988 UTC

[section ""data" . Foreign.C.String.charIsRepresentable1_closure" {
     Foreign.C.String.charIsRepresentable1_closure:
         const Foreign.C.String.charIsRepresentable1_info;
         const 0;
 },
 Foreign.C.String.charIsRepresentable1_entry() //  [R2]
         { []
         }
     {offset
       c90DF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c90DG; else goto c90DH;
       c90DG: // global
           R2 = R2;
           R1 = Foreign.C.String.charIsRepresentable1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90DH: // global
           I64[Sp - 16] = block_c90DD_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.charIsRepresentable1_info" {
     Foreign.C.String.charIsRepresentable1_info:
         const Foreign.C.String.charIsRepresentable1_entry;
         const 0;
         const 107374182414;
         const 8589934597;
         const S90Bc_srt;
 },
 _c90DD() //  [R1]
         { []
         }
     {offset
       c90DD: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.charIsRepresentable1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90DD_info" {
     block_c90DD_info:
         const _c90DD;
         const 1;
         const 4294967326;
         const S90Bc_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.261034575 UTC

[section ""data" . Foreign.C.String.charIsRepresentable_closure" {
     Foreign.C.String.charIsRepresentable_closure:
         const Foreign.C.String.charIsRepresentable_info;
         const 0;
 },
 Foreign.C.String.charIsRepresentable_entry() //  [R2]
         { []
         }
     {offset
       c90DW: // global
           R2 = R2;
           call Foreign.C.String.charIsRepresentable1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.charIsRepresentable_info" {
     Foreign.C.String.charIsRepresentable_info:
         const Foreign.C.String.charIsRepresentable_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S90Bc_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.264229385 UTC

[section ""data" . Foreign.C.String.newCStringLen2_closure" {
     Foreign.C.String.newCStringLen2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.276719341 UTC

[section ""data" . Foreign.C.String.newCStringLen1_closure" {
     Foreign.C.String.newCStringLen1_closure:
         const Foreign.C.String.newCStringLen1_info;
         const 0;
 },
 sat_s90q2_entry() //  [R1]
         { []
         }
     {offset
       c90FH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c90FM; else goto c90FN;
       c90FM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c90FN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c90FE_info;
           _s90oX::P64 = P64[R1 + 24];
           _s90oM::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _s90oM::I64;
           P64[Sp - 24] = _s90oX::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u90FR; else goto c90FF;
       u90FR: // global
           call _c90FE(R1) args: 0, res: 0, upd: 0;
       c90FF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s90q2_info" {
     sat_s90q2_info:
         const sat_s90q2_entry;
         const 4294967298;
         const 15;
 },
 _c90FE() //  [R1]
         { []
         }
     {offset
       c90FE: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c90FQ; else goto c90FP;
       c90FQ: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c90FP: // global
           _s90q0::I64 = I64[R1 + 7];
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = P64[Sp + 16];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 63;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = _s90q0::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c90FE_info" {
     block_c90FE_info:
         const _c90FE;
         const 66;
         const 30;
 },
 sat_s90qg_entry() //  [R1, R2]
         { []
         }
     {offset
       c90FS: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c90FT; else goto c90FU;
       c90FT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90FU: // global
           I64[Sp - 24] = block_c90Ek_info;
           R3 = 0;
           _s90oi::P64 = R2;
           _s90o9::P64 = P64[R1 + 6];
           R2 = _s90o9::P64;
           P64[Sp - 16] = _s90o9::P64;
           P64[Sp - 8] = _s90oi::P64;
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s90qg_info" {
     sat_s90qg_info:
         const sat_s90qg_entry;
         const 1;
         const 12884901897;
         const 8589934597;
         const S90Bc_srt+40;
 },
 _c90Ek() //  [R1]
         { []
         }
     {offset
       c90Ek: // global
           I64[Sp - 8] = block_c90Er_info;
           R2 = 4;
           _s90ok::I64 = R1;
           R1 = R1 << 2;
           I64[Sp] = _s90ok::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Ek_info" {
     block_c90Ek_info:
         const _c90Ek;
         const 2;
         const 12884901918;
         const S90Bc_srt+40;
 },
 _c90Er() //  [R1]
         { []
         }
     {offset
       c90Er: // global
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _c90HI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90Er_info" {
     block_c90Er_info:
         const _c90Er;
         const 67;
         const 12884901918;
         const S90Bc_srt+40;
 },
 _c90HI() //  []
         { []
         }
     {offset
       c90HI: // global
           _s90q6::P64 = P64[Sp];
           I64[Sp] = block_c90HL_info;
           R1 = _s90q6::P64;
           if (R1 & 7 != 0) goto u90IL; else goto c90HN;
       u90IL: // global
           call _c90HL(R1) args: 0, res: 0, upd: 0;
       c90HN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c90HL() //  [R1]
         { []
         }
     {offset
       c90HL: // global
           if (R1 & 7 == 1) goto c90HT; else goto c90HY;
       c90HT: // global
           I64[Sp + 8] = block_c90EB_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c90HY: // global
           I64[Sp - 8] = block_c90HW_info;
           _s90qb::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s90qb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u90IM; else goto c90HZ;
       u90IM: // global
           call _c90HW(R1) args: 0, res: 0, upd: 0;
       c90HZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90HL_info" {
     block_c90HL_info:
         const _c90HL;
         const 453;
         const 12884901918;
         const S90Bc_srt+40;
 },
 _c90EB() //  [R1]
         { []
         }
     {offset
       c90EB: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c90G0; else goto c90FZ;
       c90G0: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90FZ: // global
           _s90ok::I64 = I64[Sp + 16];
           _s90os::I64 = I64[Sp + 8];
           _s90oy::I64 = _s90ok::I64 + 1;
           (_s90oD::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(_s90oy::I64);
           if (_s90oD::I64 == 0) goto c90HF; else goto c90HE;
       c90HF: // global
           Hp = Hp - 88;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c90HE: // global
           I64[Hp - 80] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 40] = _s90os::I64;
           I64[Hp - 32] = _s90ok::I64;
           I64[Hp - 24] = 0;
           I64[Hp - 16] = _s90ok::I64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s90oy::I64;
           P64[Sp] = Hp - 7;
           I64[Sp + 8] = _s90oD::I64;
           P64[Sp + 16] = Hp - 63;
           call _c90EV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90EB_info" {
     block_c90EB_info:
         const _c90EB;
         const 196;
         const 12884901918;
         const S90Bc_srt+40;
 },
 _c90EV() //  []
         { []
         }
     {offset
       c90EV: // global
           I64[Sp - 8] = block_c90EY_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u90Iw; else goto c90EZ;
       u90Iw: // global
           call _c90EY(R1) args: 0, res: 0, upd: 0;
       c90EZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c90EY() //  [R1]
         { []
         }
     {offset
       c90EY: // global
           I64[Sp - 16] = block_c90F3_info;
           _s90oQ::P64 = P64[R1 + 7];
           _s90oR::P64 = P64[R1 + 15];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp - 8] = _s90oR::P64;
           P64[Sp] = _s90oQ::P64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90EY_info" {
     block_c90EY_info:
         const _c90EY;
         const 133;
         const 4294967326;
         const S90Bc_srt+48;
 },
 _c90F3() //  [R1]
         { []
         }
     {offset
       c90F3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c90G9; else goto c90G8;
       c90G9: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90G8: // global
           I64[Hp - 32] = sat_s90q2_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 32];
           P64[Sp - 8] = Hp - 32;
           P64[Sp] = P64[Sp + 40];
           Sp = Sp - 8;
           call _c90GU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90F3_info" {
     block_c90F3_info:
         const _c90F3;
         const 519;
         const 4294967326;
         const S90Bc_srt+48;
 },
 _c90GU() //  []
         { []
         }
     {offset
       c90GU: // global
           _s90pA::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c90GW_info;
           R3 = P64[Sp];
           R2 = _s90pA::P64;
           R1 = P64[Sp + 24];
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c90GW() //  [R1]
         { []
         }
     {offset
       c90GW: // global
           I64[Sp] = block_c90GY_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u90IE; else goto c90GZ;
       u90IE: // global
           call _c90GY(R1) args: 0, res: 0, upd: 0;
       c90GZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90GW_info" {
     block_c90GW_info:
         const _c90GW;
         const 519;
         const 4294967326;
         const S90Bc_srt+48;
 },
 _c90GY() //  [R1]
         { []
         }
     {offset
       c90GY: // global
           I64[Sp - 16] = block_c90H3_info;
           _s90pH::P64 = P64[R1 + 7];
           _s90pJ::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s90pJ::P64;
           P64[Sp] = _s90pH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u90IF; else goto c90H7;
       u90IF: // global
           call _c90H3(R1) args: 0, res: 0, upd: 0;
       c90H7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90GY_info" {
     block_c90GY_info:
         const _c90GY;
         const 519;
         const 4294967326;
         const S90Bc_srt+48;
 },
 _c90H3() //  [R1]
         { []
         }
     {offset
       c90H3: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto c90HC; else goto c90Hh;
       c90HC: // global
           I64[Sp + 32] = block_c90GI_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u90IH; else goto c90GK;
       u90IH: // global
           call _c90GI(R1) args: 0, res: 0, upd: 0;
       c90GK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c90Hh: // global
           I64[Sp] = block_c90Hf_info;
           _s90pK::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s90pK::P64;
           if (R1 & 7 != 0) goto u90IG; else goto c90Hi;
       u90IG: // global
           call _c90Hf(R1) args: 0, res: 0, upd: 0;
       c90Hi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90H3_info" {
     block_c90H3_info:
         const _c90H3;
         const 2057;
         const 4294967326;
         const S90Bc_srt+48;
 },
 _c90GI() //  [R1]
         { []
         }
     {offset
       c90GI: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c90GQ; else goto c90GP;
       c90GQ: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90GP: // global
           _s90pn::I64 = I64[R1 + 23];
           _s90pr::I64 = I64[R1 + 39];
           _s90ps::I64 = I64[R1 + 47];
           call MO_Touch(P64[R1 + 7]);
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s90ps::I64 - _s90pr::I64;
           I64[Hp - 48] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 40] = _s90pn::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           P64[Sp] = Hp - 6;
           call _s90oY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90GI_info" {
     block_c90GI_info:
         const _c90GI;
         const 133;
         const 4294967326;
         const S90Bc_srt+48;
 },
 _c90Hf() //  [R1]
         { []
         }
     {offset
       c90Hf: // global
           if (R1 & 7 == 2) goto c90HB; else goto c90Hr;
       c90HB: // global
           P64[Sp + 32] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 32;
           call _s90oY() args: 0, res: 0, upd: 0;
       c90Hr: // global
           _s90pK::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c90Hm_info;
           R3 = P64[Sp + 8];
           R2 = _s90pK::P64;
           R1 = P64[Sp + 24];
           Sp = Sp + 16;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Hf_info" {
     block_c90Hf_info:
         const _c90Hf;
         const 2057;
         const 4294967326;
         const S90Bc_srt+48;
 },
 _s90oY() //  []
         { []
         }
     {offset
       s90oY: // global
           _s90p0::P64 = P64[Sp];
           I64[Sp] = block_c90Fc_info;
           R1 = _s90p0::P64;
           if (R1 & 7 != 0) goto u90IO; else goto c90Fd;
       u90IO: // global
           call _c90Fc(R1) args: 0, res: 0, upd: 0;
       c90Fd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c90Fc() //  [R1]
         { []
         }
     {offset
       c90Fc: // global
           if (R1 & 7 == 1) goto c90Gd; else goto c90Gw;
       c90Gd: // global
           _s90oN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c90Fh_info;
           R1 = _s90oN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u90Iy; else goto c90Fi;
       u90Iy: // global
           call _c90Fh(R1) args: 0, res: 0, upd: 0;
       c90Fi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c90Gw: // global
           _s90oJ::P64 = P64[R1 + 6];
           call MO_Touch(P64[Sp + 32]);
           R1 = _s90oJ::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Fc_info" {
     block_c90Fc_info:
         const _c90Fc;
         const 133;
         const 4294967326;
         const S90Bc_srt+48;
 },
 _c90Fh() //  [R1]
         { []
         }
     {offset
       c90Fh: // global
           _s90p4::I64 = I64[R1 + 7] << 1;
           if (_s90p4::I64 != 0) goto u90Iq; else goto c90Gp;
       u90Iq: // global
           I64[Sp] = _s90p4::I64;
           call _c90Fq() args: 0, res: 0, upd: 0;
       c90Gp: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(I64[Sp + 8]);
           I64[Sp + 8] = 0;
           P64[Sp] = Foreign.C.String.newCStringLen2_closure+1;
           call _c90EV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90Fh_info" {
     block_c90Fh_info:
         const _c90Fh;
         const 68;
         const 4294967326;
         const S90Bc_srt+48;
 },
 _c90Fq() //  []
         { []
         }
     {offset
       c90Fq: // global
           Hp = Hp + 16;
           _s90p4::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c90Gj; else goto c90Gi;
       c90Gj: // global
           HpAlloc = 16;
           I64[Sp] = block_c90Fp_info;
           R1 = _s90p4::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c90Gi: // global
           (_s90p9::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] realloc(I64[Sp + 8], _s90p4::I64);
           if (_s90p9::I64 == 0) goto c90Gm; else goto c90Gl;
       c90Gm: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.realloc2_closure;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c90Gl: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s90p4::I64;
           I64[Sp + 8] = _s90p9::I64;
           P64[Sp] = Hp - 7;
           call _c90EV() args: 0, res: 0, upd: 0;
     }
 },
 _c90Fp() //  [R1]
         { []
         }
     {offset
       c90Fp: // global
           I64[Sp] = R1;
           call _c90Fq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90Fp_info" {
     block_c90Fp_info:
         const _c90Fp;
         const 68;
         const 4294967326;
         const S90Bc_srt+48;
 },
 _c90Hm() //  [R1]
         { []
         }
     {offset
       c90Hm: // global
           I64[Sp] = block_c90Ho_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u90IJ; else goto c90Ht;
       u90IJ: // global
           call _c90Ho(R1) args: 0, res: 0, upd: 0;
       c90Ht: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Hm_info" {
     block_c90Hm_info:
         const _c90Hm;
         const 519;
         const 4294967326;
         const S90Bc_srt+48;
 },
 _c90Ho() //  [R1]
         { []
         }
     {offset
       c90Ho: // global
           P64[Sp] = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 8;
           call _c90GU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90Ho_info" {
     block_c90Ho_info:
         const _c90Ho;
         const 519;
         const 4294967326;
         const S90Bc_srt+48;
 },
 _c90HW() //  [R1]
         { []
         }
     {offset
       c90HW: // global
           _s90q7::I64 = I64[Sp + 16];
           _s90qb::P64 = P64[Sp + 8];
           I32[I64[Sp + 24] + (_s90q7::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           P64[Sp + 8] = _s90qb::P64;
           I64[Sp + 16] = _s90q7::I64 + 1;
           Sp = Sp + 8;
           call _c90HI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90HW_info" {
     block_c90HW_info:
         const _c90HW;
         const 902;
         const 12884901918;
         const S90Bc_srt+40;
 },
 Foreign.C.String.newCStringLen1_entry() //  [R2]
         { []
         }
     {offset
       c90IP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c90IQ; else goto c90IR;
       c90IQ: // global
           R2 = R2;
           R1 = Foreign.C.String.newCStringLen1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90IR: // global
           I64[Sp - 16] = block_c90E8_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCStringLen1_info" {
     Foreign.C.String.newCStringLen1_info:
         const Foreign.C.String.newCStringLen1_entry;
         const 0;
         const 966367641614;
         const 8589934597;
         const S90Bc_srt;
 },
 _c90E8() //  [R1]
         { []
         }
     {offset
       c90E8: // global
           I64[Sp] = block_c90Ea_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u90IW; else goto c90Eb;
       u90IW: // global
           call _c90Ea(R1) args: 0, res: 0, upd: 0;
       c90Eb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90E8_info" {
     block_c90E8_info:
         const _c90E8;
         const 1;
         const 12884901918;
         const S90Bc_srt+40;
 },
 _c90Ea() //  [R1]
         { []
         }
     {offset
       c90Ea: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c90IV; else goto c90IU;
       c90IV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90IU: // global
           _s90oh::P64 = P64[R1 + 23];
           I64[Hp - 8] = sat_s90qg_info;
           P64[Hp] = P64[Sp + 8];
           R4 = Hp - 6;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = _s90oh::P64;
           Sp = Sp + 16;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Ea_info" {
     block_c90Ea_info:
         const _c90Ea;
         const 1;
         const 12884901918;
         const S90Bc_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.319071596 UTC

[section ""data" . Foreign.C.String.newCStringLen_closure" {
     Foreign.C.String.newCStringLen_closure:
         const Foreign.C.String.newCStringLen_info;
         const 0;
 },
 Foreign.C.String.newCStringLen_entry() //  [R2]
         { []
         }
     {offset
       c90LN: // global
           R2 = R2;
           call Foreign.C.String.newCStringLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCStringLen_info" {
     Foreign.C.String.newCStringLen_info:
         const Foreign.C.String.newCStringLen_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S90Bc_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.322524256 UTC

[section ""data" . Foreign.C.String.newCString1_closure" {
     Foreign.C.String.newCString1_closure:
         const Foreign.C.String.newCString1_info;
         const 0;
 },
 Foreign.C.String.newCString1_entry() //  [R2]
         { []
         }
     {offset
       c90M0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c90M1; else goto c90M2;
       c90M1: // global
           R2 = R2;
           R1 = Foreign.C.String.newCString1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90M2: // global
           I64[Sp - 16] = block_c90LY_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCString1_info" {
     Foreign.C.String.newCString1_info:
         const Foreign.C.String.newCString1_entry;
         const 0;
         const 3302829850638;
         const 8589934597;
         const S90Bc_srt;
 },
 _c90LY() //  [R1]
         { []
         }
     {offset
       c90LY: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.newCString1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90LY_info" {
     block_c90LY_info:
         const _c90LY;
         const 1;
         const 4294967326;
         const S90Bc_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.327430613 UTC

[section ""data" . Foreign.C.String.newCString_closure" {
     Foreign.C.String.newCString_closure:
         const Foreign.C.String.newCString_info;
         const 0;
 },
 Foreign.C.String.newCString_entry() //  [R2]
         { []
         }
     {offset
       c90Mh: // global
           R2 = R2;
           call Foreign.C.String.newCString1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCString_info" {
     Foreign.C.String.newCString_info:
         const Foreign.C.String.newCString_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S90Bc_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.34246981 UTC

[section ""data" . Foreign.C.String.peekCStringLen1_closure" {
     Foreign.C.String.peekCStringLen1_closure:
         const Foreign.C.String.peekCStringLen1_info;
         const 0;
 },
 sat_s90rD_entry() //  [R1]
         { []
         }
     {offset
       c90OF: // global
           _s90rD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c90OG; else goto c90OH;
       c90OH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c90OJ; else goto c90OI;
       c90OJ: // global
           HpAlloc = 40;
           goto c90OG;
       c90OG: // global
           R1 = _s90rD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c90OI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s90rD::P64;
           _s90rs::P64 = P64[_s90rD::P64 + 16];
           _s90rA::P64 = P64[_s90rD::P64 + 24];
           _s90rw::I64 = I64[_s90rD::P64 + 32];
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s90rw::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s90rs::P64;
           R3 = _s90rA::P64;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s90rD_info" {
     sat_s90rD_info:
         const sat_s90rD_entry;
         const 4294967298;
         const 15;
 },
 sat_s90rU_entry() //  [R1]
         { []
         }
     {offset
       c90OS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c90OT; else goto c90OU;
       c90OT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c90OU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s90rU_info" {
     sat_s90rU_info:
         const sat_s90rU_entry;
         const 1;
         const 16;
 },
 $wgo_s90qU_entry() //  [R1, R2]
         { []
         }
     {offset
       c90OV: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c90OW; else goto c90OX;
       c90OW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90OX: // global
           I64[Sp - 32] = block_c90Nk_info;
           _s90qU::P64 = R1;
           _s90qT::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 24] = _s90qT::P64;
           P64[Sp - 16] = _s90qU::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u90Qx; else goto c90Nl;
       u90Qx: // global
           call _c90Nk(R1) args: 0, res: 0, upd: 0;
       c90Nl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s90qU_info" {
     $wgo_s90qU_info:
         const $wgo_s90qU_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c90Nk() //  [R1]
         { []
         }
     {offset
       c90Nk: // global
           _s90qT::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c90Np_info;
           R3 = _s90qT::P64;
           R2 = P64[Sp + 24];
           _s90qZ::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp + 24] = _s90qZ::P64;
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Nk_info" {
     block_c90Nk_info:
         const _c90Nk;
         const 3;
         const 30;
 },
 _c90Np() //  [R1]
         { []
         }
     {offset
       c90Np: // global
           I64[Sp] = block_c90Nr_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u90Qp; else goto c90Ns;
       u90Qp: // global
           call _c90Nr(R1) args: 0, res: 0, upd: 0;
       c90Ns: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Np_info" {
     block_c90Np_info:
         const _c90Np;
         const 2;
         const 30;
 },
 _c90Nr() //  [R1]
         { []
         }
     {offset
       c90Nr: // global
           I64[Sp - 16] = block_c90Nw_info;
           _s90r7::P64 = P64[R1 + 7];
           _s90r9::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s90r9::P64;
           P64[Sp] = _s90r7::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u90Qq; else goto c90Nx;
       u90Qq: // global
           call _c90Nw(R1) args: 0, res: 0, upd: 0;
       c90Nx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Nr_info" {
     block_c90Nr_info:
         const _c90Nr;
         const 2;
         const 30;
 },
 _c90Nw() //  [R1]
         { []
         }
     {offset
       c90Nw: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto c90PS; else goto c90Pl;
       c90PS: // global
           I64[Sp + 32] = block_c90O4_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u90Qs; else goto c90O5;
       u90Qs: // global
           call _c90O4(R1) args: 0, res: 0, upd: 0;
       c90O5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c90Pl: // global
           I64[Sp] = block_c90P2_info;
           _s90ra::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s90ra::P64;
           if (R1 & 7 != 0) goto u90Qr; else goto c90Pm;
       u90Qr: // global
           call _c90P2(R1) args: 0, res: 0, upd: 0;
       c90Pm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Nw_info" {
     block_c90Nw_info:
         const _c90Nw;
         const 4;
         const 30;
 },
 _c90O4() //  [R1]
         { []
         }
     {offset
       c90O4: // global
           _s90si::P64 = P64[R1 + 7];
           _s90sn::I64 = I64[R1 + 47] - I64[R1 + 39];
           if (%MO_S_Gt_W64(_s90sn::I64, 0)) goto c90Qa; else goto c90Qb;
       c90Qa: // global
           P64[Sp - 24] = _s90si::P64;
           I64[Sp - 16] = _s90sn::I64 - 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           I64[Sp] = I64[R1 + 23];
           Sp = Sp - 32;
           call _c90Om() args: 0, res: 0, upd: 0;
       c90Qb: // global
           call MO_Touch(_s90si::P64);
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90O4_info" {
     block_c90O4_info:
         const _c90O4;
         const 0;
         const 30;
 },
 _c90Om() //  []
         { []
         }
     {offset
       c90Om: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c90Q5; else goto c90Q4;
       c90Q5: // global
           HpAlloc = 40;
           I64[Sp] = block_c90Om_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c90Q4: // global
           _s90sA::P64 = P64[Sp + 24];
           _s90sC::I64 = I64[Sp + 16];
           if (_s90sC::I64 != 0) goto c90Q7; else goto c90Q8;
       c90Q7: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W32_W64(I32[I64[Sp + 32] + (_s90sC::I64 << 2)]);
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s90sA::P64;
           I64[Sp + 16] = _s90sC::I64 - 1;
           P64[Sp + 24] = Hp - 14;
           call _c90Om() args: 0, res: 0, upd: 0;
       c90Q8: // global
           Hp = Hp - 40;
           P64[Sp + 24] = _s90sA::P64;
           Sp = Sp + 8;
           call _c90PV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90Om_info" {
     block_c90Om_info:
         const _c90Om;
         const 644;
         const 30;
 },
 _c90PV() //  []
         { []
         }
     {offset
       c90PV: // global
           Hp = Hp + 40;
           _s90sq::P64 = P64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto c90Q2; else goto c90Q1;
       c90Q2: // global
           HpAlloc = 40;
           I64[Sp - 8] = block_c90PU_info;
           R1 = _s90sq::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90Q1: // global
           _s90su::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 24]]);
           call MO_Touch(P64[Sp]);
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s90su::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s90sq::P64;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c90PU() //  [R1]
         { []
         }
     {offset
       c90PU: // global
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c90PV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90PU_info" {
     block_c90PU_info:
         const _c90PU;
         const 900;
         const 30;
 },
 _c90P2() //  [R1]
         { []
         }
     {offset
       c90P2: // global
           _s90r9::P64 = P64[Sp + 8];
           if (R1 & 7 == 2) goto c90PM; else goto c90PA;
       c90PM: // global
           I64[Sp + 8] = block_c90PK_info;
           R1 = _s90r9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u90Qy; else goto c90PN;
       u90Qy: // global
           call _c90PK(R1) args: 0, res: 0, upd: 0;
       c90PN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c90PA: // global
           _s90ra::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c90Pq_info;
           R3 = _s90r9::P64;
           R2 = _s90ra::P64;
           R1 = P64[Sp + 32];
           Sp = Sp + 16;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90P2_info" {
     block_c90P2_info:
         const _c90P2;
         const 4;
         const 30;
 },
 _c90PK() //  [R1]
         { []
         }
     {offset
       c90PK: // global
           P64[Sp + 24] = P64[Sp + 8];
           I64[Sp + 8] = I64[R1 + 23];
           P64[Sp - 16] = P64[R1 + 7];
           I64[Sp - 8] = I64[R1 + 39];
           I64[Sp] = I64[R1 + 47];
           Sp = Sp - 16;
           call _s90ri() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90PK_info" {
     block_c90PK_info:
         const _c90PK;
         const 259;
         const 30;
 },
 _c90Pq() //  [R1]
         { []
         }
     {offset
       c90Pq: // global
           I64[Sp] = block_c90Ps_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u90Qz; else goto c90Pt;
       u90Qz: // global
           call _c90Ps(R1) args: 0, res: 0, upd: 0;
       c90Pt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Pq_info" {
     block_c90Pq_info:
         const _c90Pq;
         const 130;
         const 30;
 },
 _c90Ps() //  [R1]
         { []
         }
     {offset
       c90Ps: // global
           I64[Sp] = block_c90Px_info;
           _s90s0::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 16] = _s90s0::P64;
           if (R1 & 7 != 0) goto u90QA; else goto c90PD;
       u90QA: // global
           call _c90Px(R1) args: 0, res: 0, upd: 0;
       c90PD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Ps_info" {
     block_c90Ps_info:
         const _c90Ps;
         const 130;
         const 30;
 },
 _c90Px() //  [R1]
         { []
         }
     {offset
       c90Px: // global
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 39];
           I64[Sp - 8] = I64[R1 + 47];
           I64[Sp] = I64[R1 + 23];
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp - 24;
           call _s90ri() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90Px_info" {
     block_c90Px_info:
         const _c90Px;
         const 2;
         const 30;
 },
 _s90ri() //  []
         { []
         }
     {offset
       s90ri: // global
           _s90rp::I64 = I64[Sp + 16] - I64[Sp + 8];
           if (%MO_S_Gt_W64(_s90rp::I64, 0)) goto c90Pf; else goto c90Pg;
       c90Pf: // global
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           I64[Sp + 16] = _s90rp::I64 - 1;
           Sp = Sp - 8;
           call _c90NW() args: 0, res: 0, upd: 0;
       c90Pg: // global
           _s90qU::P64 = P64[Sp + 32];
           _s90rk::P64 = P64[Sp + 40];
           call MO_Touch(P64[Sp]);
           I64[Sp + 40] = block_c90OM_info;
           R2 = _s90rk::P64;
           R1 = _s90qU::P64;
           Sp = Sp + 40;
           call $wgo_s90qU_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c90NW() //  []
         { []
         }
     {offset
       c90NW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c90Pa; else goto c90P9;
       c90Pa: // global
           HpAlloc = 40;
           I64[Sp] = block_c90NW_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c90P9: // global
           _s90rl::I64 = I64[Sp + 32];
           _s90rG::P64 = P64[Sp + 16];
           _s90rI::I64 = I64[Sp + 24];
           if (_s90rI::I64 != 0) goto c90Pc; else goto c90Pd;
       c90Pc: // global
           _s90rL::I64 = %MO_UU_Conv_W32_W64(I32[_s90rl::I64 + (_s90rI::I64 << 2)]);
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s90rL::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s90rG::P64;
           I64[Sp + 24] = _s90rI::I64 - 1;
           P64[Sp + 16] = Hp - 14;
           call _c90NW() args: 0, res: 0, upd: 0;
       c90Pd: // global
           Hp = Hp - 40;
           _s90qU::P64 = P64[Sp + 40];
           _s90rk::P64 = P64[Sp + 48];
           _s90rw::I64 = %MO_UU_Conv_W32_W64(I32[_s90rl::I64]);
           call MO_Touch(P64[Sp + 8]);
           I64[Sp + 32] = block_c90Ox_info;
           R2 = _s90rk::P64;
           R1 = _s90qU::P64;
           I64[Sp + 40] = _s90rw::I64;
           P64[Sp + 48] = _s90rG::P64;
           Sp = Sp + 32;
           call $wgo_s90qU_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90NW_info" {
     block_c90NW_info:
         const _c90NW;
         const 774;
         const 30;
 },
 _c90Ox() //  [R1]
         { []
         }
     {offset
       c90Ox: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c90P7; else goto c90P6;
       c90P7: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90P6: // global
           I64[Hp - 32] = sat_s90rD_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Ox_info" {
     block_c90Ox_info:
         const _c90Ox;
         const 66;
         const 30;
 },
 _c90OM() //  [R1]
         { []
         }
     {offset
       c90OM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c90Pj; else goto c90Pi;
       c90Pj: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90Pi: // global
           I64[Hp - 16] = sat_s90rU_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90OM_info" {
     block_c90OM_info:
         const _c90OM;
         const 0;
         const 30;
 },
 sat_s90sP_entry() //  [R1, R2]
         { []
         }
     {offset
       c90QF: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c90QG; else goto c90QH;
       c90QG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90QH: // global
           I64[Sp - 24] = block_c90MJ_info;
           _s90qx::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 16] = _s90qx::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u90R1; else goto c90MK;
       u90R1: // global
           call _c90MJ(R1) args: 0, res: 0, upd: 0;
       c90MK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s90sP_info" {
     sat_s90sP_info:
         const sat_s90sP_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const S90Bc_srt+80;
 },
 _c90MJ() //  [R1]
         { []
         }
     {offset
       c90MJ: // global
           I64[Sp - 8] = block_c90MO_info;
           _s90qB::I64 = I64[R1 + 7];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s90qB::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90MJ_info" {
     block_c90MJ_info:
         const _c90MJ;
         const 2;
         const 4294967326;
         const S90Bc_srt+80;
 },
 _c90MO() //  [R1]
         { []
         }
     {offset
       c90MO: // global
           I64[Sp] = block_c90MQ_info;
           _s90qE::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s90qE::P64;
           if (R1 & 7 != 0) goto u90R0; else goto c90MR;
       u90R0: // global
           call _c90MQ(R1) args: 0, res: 0, upd: 0;
       c90MR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90MO_info" {
     block_c90MO_info:
         const _c90MO;
         const 67;
         const 4294967326;
         const S90Bc_srt+80;
 },
 _c90MQ() //  [R1]
         { []
         }
     {offset
       c90MQ: // global
           _s90qG::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s90qG::I64, 1)) goto c90QY; else goto c90QZ;
       c90QY: // global
           _s90qI::I64 = _s90qG::I64;
           goto s90qH;
       c90QZ: // global
           _s90qI::I64 = 1;
           goto s90qH;
       s90qH: // global
           _s90qJ::I64 = _s90qI::I64 << 2;
           if (%MO_S_Ge_W64(_s90qJ::I64, 0)) goto c90QP; else goto c90QU;
       c90QP: // global
           I64[Sp - 24] = block_c90N6_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 16] = _s90qI::I64;
           I64[Sp - 8] = _s90qJ::I64;
           I64[Sp] = _s90qG::I64;
           Sp = Sp - 24;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c90QU: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90MQ_info" {
     block_c90MQ_info:
         const _c90MQ;
         const 67;
         const 4294967326;
         const S90Bc_srt+80;
 },
 _c90N6() //  [R1]
         { []
         }
     {offset
       c90N6: // global
           I64[Sp] = block_c90N8_info;
           _s90qN::P64 = R1;
           R1 = I64[Sp + 16];
           P64[Sp + 16] = _s90qN::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90N6_info" {
     block_c90N6_info:
         const _c90N6;
         const 966;
         const 30;
 },
 _c90N8() //  [R1]
         { []
         }
     {offset
       c90N8: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c90QT; else goto c90QS;
       c90QT: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90QS: // global
           I64[Hp - 168] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 160] = R1;
           P64[Hp - 152] = P64[Sp + 16];
           I64[Hp - 144] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 136] = Hp - 166;
           P64[Hp - 128] = GHC.IO.Buffer.WriteBuffer_closure+2;
           P64[Hp - 120] = R1 + 16;
           I64[Hp - 112] = I64[Sp + 8];
           I64[Hp - 104] = 0;
           I64[Hp - 96] = 0;
           I64[Hp - 88] = $wgo_s90qU_info;
           P64[Hp - 80] = P64[Sp + 48];
           P64[Hp - 72] = Hp - 143;
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = P64[Sp + 40];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 63;
           P64[Hp - 32] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 24] = I64[Sp + 32];
           _s90qG::I64 = I64[Sp + 24];
           I64[Hp - 16] = _s90qG::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = _s90qG::I64;
           R2 = Hp - 47;
           R1 = Hp - 86;
           Sp = Sp + 56;
           call $wgo_s90qU_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90N8_info" {
     block_c90N8_info:
         const _c90N8;
         const 838;
         const 30;
 },
 Foreign.C.String.peekCStringLen1_entry() //  [R2]
         { []
         }
     {offset
       c90R2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c90R3; else goto c90R4;
       c90R3: // global
           R2 = R2;
           R1 = Foreign.C.String.peekCStringLen1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90R4: // global
           I64[Sp - 16] = block_c90Ms_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCStringLen1_info" {
     Foreign.C.String.peekCStringLen1_info:
         const Foreign.C.String.peekCStringLen1_entry;
         const 0;
         const 13198434500622;
         const 8589934597;
         const S90Bc_srt;
 },
 _c90Ms() //  [R1]
         { []
         }
     {offset
       c90Ms: // global
           I64[Sp] = block_c90Mu_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u90Ra; else goto c90Mv;
       u90Ra: // global
           call _c90Mu(R1) args: 0, res: 0, upd: 0;
       c90Mv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Ms_info" {
     block_c90Ms_info:
         const _c90Ms;
         const 1;
         const 4294967326;
         const S90Bc_srt+80;
 },
 _c90Mu() //  [R1]
         { []
         }
     {offset
       c90Mu: // global
           I64[Sp] = block_c90Mz_info;
           _s90qt::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s90qt::P64;
           if (R1 & 7 != 0) goto u90Rb; else goto c90MA;
       u90Rb: // global
           call _c90Mz(R1) args: 0, res: 0, upd: 0;
       c90MA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Mu_info" {
     block_c90Mu_info:
         const _c90Mu;
         const 1;
         const 4294967326;
         const S90Bc_srt+80;
 },
 _c90Mz() //  [R1]
         { []
         }
     {offset
       c90Mz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c90R9; else goto c90R8;
       c90R9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90R8: // global
           _s90qw::P64 = P64[R1 + 7];
           _s90qx::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s90sP_info;
           P64[Hp - 8] = _s90qw::P64;
           P64[Hp] = _s90qx::P64;
           R4 = Hp - 14;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Mz_info" {
     block_c90Mz_info:
         const _c90Mz;
         const 1;
         const 4294967326;
         const S90Bc_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.390759973 UTC

[section ""data" . Foreign.C.String.peekCStringLen_closure" {
     Foreign.C.String.peekCStringLen_closure:
         const Foreign.C.String.peekCStringLen_info;
         const 0;
 },
 Foreign.C.String.peekCStringLen_entry() //  [R2]
         { []
         }
     {offset
       c90Uz: // global
           R2 = R2;
           call Foreign.C.String.peekCStringLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCStringLen_info" {
     Foreign.C.String.peekCStringLen_info:
         const Foreign.C.String.peekCStringLen_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S90Bc_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.394506759 UTC

[section ""data" . Foreign.C.String.peekCString1_closure" {
     Foreign.C.String.peekCString1_closure:
         const Foreign.C.String.peekCString1_info;
         const 0;
 },
 Foreign.C.String.peekCString1_entry() //  [R2]
         { []
         }
     {offset
       c90UM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c90UN; else goto c90UO;
       c90UN: // global
           R2 = R2;
           R1 = Foreign.C.String.peekCString1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90UO: // global
           I64[Sp - 16] = block_c90UK_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCString1_info" {
     Foreign.C.String.peekCString1_info:
         const Foreign.C.String.peekCString1_entry;
         const 0;
         const 52780853100558;
         const 8589934597;
         const S90Bc_srt;
 },
 _c90UK() //  [R1]
         { []
         }
     {offset
       c90UK: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.peekCString1_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90UK_info" {
     block_c90UK_info:
         const _c90UK;
         const 1;
         const 4294967326;
         const S90Bc_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.399411033 UTC

[section ""data" . Foreign.C.String.peekCString_closure" {
     Foreign.C.String.peekCString_closure:
         const Foreign.C.String.peekCString_info;
         const 0;
 },
 Foreign.C.String.peekCString_entry() //  [R2]
         { []
         }
     {offset
       c90V3: // global
           R2 = R2;
           call Foreign.C.String.peekCString1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCString_info" {
     Foreign.C.String.peekCString_info:
         const Foreign.C.String.peekCString_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S90Bc_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.403047557 UTC

[section ""data" . Foreign.C.String.castCSCharToChar_closure" {
     Foreign.C.String.castCSCharToChar_closure:
         const Foreign.C.String.castCSCharToChar_info;
 },
 Foreign.C.String.castCSCharToChar_entry() //  [R2]
         { []
         }
     {offset
       c90Vh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c90Vx; else goto c90Vy;
       c90Vx: // global
           R2 = R2;
           R1 = Foreign.C.String.castCSCharToChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90Vy: // global
           I64[Sp - 8] = block_c90Ve_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u90VC; else goto c90Vf;
       u90VC: // global
           call _c90Ve(R1) args: 0, res: 0, upd: 0;
       c90Vf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCSCharToChar_info" {
     Foreign.C.String.castCSCharToChar_info:
         const Foreign.C.String.castCSCharToChar_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c90Ve() //  [R1]
         { []
         }
     {offset
       c90Ve: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c90VB; else goto c90VA;
       c90VB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90VA: // global
           _s90t1::I64 = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s90t1::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Ve_info" {
     block_c90Ve_info:
         const _c90Ve;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.408522654 UTC

[section ""data" . Foreign.C.String.castCUCharToChar_closure" {
     Foreign.C.String.castCUCharToChar_closure:
         const Foreign.C.String.castCUCharToChar_info;
 },
 Foreign.C.String.castCUCharToChar_entry() //  [R2]
         { []
         }
     {offset
       c90VX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c90W7; else goto c90W8;
       c90W7: // global
           R2 = R2;
           R1 = Foreign.C.String.castCUCharToChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90W8: // global
           I64[Sp - 8] = block_c90VU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u90Wc; else goto c90VV;
       u90Wc: // global
           call _c90VU(R1) args: 0, res: 0, upd: 0;
       c90VV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCUCharToChar_info" {
     Foreign.C.String.castCUCharToChar_info:
         const Foreign.C.String.castCUCharToChar_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c90VU() //  [R1]
         { []
         }
     {offset
       c90VU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c90Wb; else goto c90Wa;
       c90Wb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90Wa: // global
           _s90t6::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s90t6::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90VU_info" {
     block_c90VU_info:
         const _c90VU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.414302065 UTC

[section ""data" . Foreign.C.String.castCCharToChar_closure" {
     Foreign.C.String.castCCharToChar_closure:
         const Foreign.C.String.castCCharToChar_info;
 },
 Foreign.C.String.castCCharToChar_entry() //  [R2]
         { []
         }
     {offset
       c90Ww: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c90WM; else goto c90WN;
       c90WM: // global
           R2 = R2;
           R1 = Foreign.C.String.castCCharToChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90WN: // global
           I64[Sp - 8] = block_c90Wt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u90WR; else goto c90Wu;
       u90WR: // global
           call _c90Wt(R1) args: 0, res: 0, upd: 0;
       c90Wu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCCharToChar_info" {
     Foreign.C.String.castCCharToChar_info:
         const Foreign.C.String.castCCharToChar_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c90Wt() //  [R1]
         { []
         }
     {offset
       c90Wt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c90WQ; else goto c90WP;
       c90WQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c90WP: // global
           _s90td::I64 = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s90td::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Wt_info" {
     block_c90Wt_info:
         const _c90Wt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.420700722 UTC

[section ""data" . Foreign.C.String.$wpeekCAString_closure" {
     Foreign.C.String.$wpeekCAString_closure:
         const Foreign.C.String.$wpeekCAString_info;
 },
 Foreign.C.String.$wpeekCAString_entry() //  [R2]
         { []
         }
     {offset
       c90XL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c90XM; else goto c90XN;
       c90XM: // global
           R2 = R2;
           R1 = Foreign.C.String.$wpeekCAString_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90XN: // global
           _s90te::I64 = R2;
           _s90tH::I64 = 0;
           goto c90Ye;
       c90Ye: // global
           if (I8[_s90te::I64 + _s90tH::I64] == 0 :: W8) goto c90Yk; else goto c90Yj;
       c90Yk: // global
           if (%MO_S_Gt_W64(_s90tH::I64, 0)) goto c90Yb; else goto c90Yc;
       c90Yb: // global
           I64[Sp - 24] = _s90te::I64;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           I64[Sp - 8] = _s90tH::I64 - 1;
           Sp = Sp - 32;
           call _c90Xm() args: 0, res: 0, upd: 0;
       c90Yc: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c90Yj: // global
           _s90tH::I64 = _s90tH::I64 + 1;
           goto c90Ye;
     }
 },
 section ""relreadonly" . Foreign.C.String.$wpeekCAString_info" {
     Foreign.C.String.$wpeekCAString_info:
         const Foreign.C.String.$wpeekCAString_entry;
         const 0;
         const 14;
         const 8589934596;
 },
 _c90Xm() //  []
         { []
         }
     {offset
       c90Xm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c90XR; else goto c90XQ;
       c90XR: // global
           HpAlloc = 40;
           I64[Sp] = block_c90Xm_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c90XQ: // global
           _s90tl::P64 = P64[Sp + 16];
           _s90tm::I64 = I64[Sp + 24];
           _s90tq::I64 = %MO_SS_Conv_W8_W64(I8[I64[Sp + 8] + _s90tm::I64]);
           if (%MO_S_Gt_W64(_s90tm::I64, 0)) goto c90XT; else goto c90Y9;
       c90XT: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(_s90tq::I64));
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s90tl::P64;
           P64[Sp + 16] = Hp - 14;
           I64[Sp + 24] = _s90tm::I64 - 1;
           call _c90Xm() args: 0, res: 0, upd: 0;
       c90Y9: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(_s90tq::I64));
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s90tl::P64;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90Xm_info" {
     block_c90Xm_info:
         const _c90Xm;
         const 323;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.427249181 UTC

[section ""data" . Foreign.C.String.peekCAString1_closure" {
     Foreign.C.String.peekCAString1_closure:
         const Foreign.C.String.peekCAString1_info;
 },
 Foreign.C.String.peekCAString1_entry() //  [R2]
         { []
         }
     {offset
       c90Z0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c90Z1; else goto c90Z2;
       c90Z1: // global
           R2 = R2;
           R1 = Foreign.C.String.peekCAString1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c90Z2: // global
           I64[Sp - 8] = block_c90YX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u90Z6; else goto c90YY;
       u90Z6: // global
           call _c90YX(R1) args: 0, res: 0, upd: 0;
       c90YY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCAString1_info" {
     Foreign.C.String.peekCAString1_info:
         const Foreign.C.String.peekCAString1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c90YX() //  [R1]
         { []
         }
     {offset
       c90YX: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call Foreign.C.String.$wpeekCAString_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c90YX_info" {
     block_c90YX_info:
         const _c90YX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.431825974 UTC

[section ""data" . Foreign.C.String.peekCAString_closure" {
     Foreign.C.String.peekCAString_closure:
         const Foreign.C.String.peekCAString_info;
 },
 Foreign.C.String.peekCAString_entry() //  [R2]
         { []
         }
     {offset
       c90Zl: // global
           R2 = R2;
           call Foreign.C.String.peekCAString1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCAString_info" {
     Foreign.C.String.peekCAString_info:
         const Foreign.C.String.peekCAString_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.436457519 UTC

[section ""data" . Foreign.C.String.$wpeekCAStringLen_closure" {
     Foreign.C.String.$wpeekCAStringLen_closure:
         const Foreign.C.String.$wpeekCAStringLen_info;
 },
 Foreign.C.String.$wpeekCAStringLen_entry() //  [R2, R3]
         { []
         }
     {offset
       c9108: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9109; else goto c910a;
       c9109: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.C.String.$wpeekCAStringLen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c910a: // global
           if (%MO_S_Gt_W64(R3, 0)) goto c9106; else goto c9107;
       c9106: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           I64[Sp - 8] = R3 - 1;
           Sp = Sp - 24;
           call _c90ZE() args: 0, res: 0, upd: 0;
       c9107: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.$wpeekCAStringLen_info" {
     Foreign.C.String.$wpeekCAStringLen_info:
         const Foreign.C.String.$wpeekCAStringLen_entry;
         const 0;
         const 14;
         const 12884901902;
 },
 _c90ZE() //  []
         { []
         }
     {offset
       c90ZE: // global
           I64[Sp - 8] = block_c90ZH_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u910z; else goto c90ZI;
       u910z: // global
           call _c90ZH(R1) args: 0, res: 0, upd: 0;
       c90ZI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c90ZH() //  [R1]
         { []
         }
     {offset
       c90ZH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c910e; else goto c910d;
       c910e: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c910d: // global
           _s90tX::P64 = P64[Sp + 16];
           _s90tY::I64 = I64[Sp + 24];
           _s90u4::I64 = %MO_SS_Conv_W8_W64(I8[I64[R1 + 7] + _s90tY::I64]);
           if (_s90tY::I64 == 0) goto c910w; else goto c910g;
       c910w: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(_s90u4::I64));
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s90tX::P64;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c910g: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(_s90u4::I64));
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s90tX::P64;
           P64[Sp + 16] = Hp - 14;
           I64[Sp + 24] = _s90tY::I64 - 1;
           Sp = Sp + 8;
           call _c90ZE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c90ZH_info" {
     block_c90ZH_info:
         const _c90ZH;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.443606659 UTC

[section ""data" . Foreign.C.String.peekCAStringLen1_closure" {
     Foreign.C.String.peekCAStringLen1_closure:
         const Foreign.C.String.peekCAStringLen1_info;
 },
 Foreign.C.String.peekCAStringLen1_entry() //  [R2]
         { []
         }
     {offset
       c911e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c911i; else goto c911j;
       c911i: // global
           R2 = R2;
           R1 = Foreign.C.String.peekCAStringLen1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c911j: // global
           I64[Sp - 8] = block_c911b_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u911r; else goto c911c;
       u911r: // global
           call _c911b(R1) args: 0, res: 0, upd: 0;
       c911c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCAStringLen1_info" {
     Foreign.C.String.peekCAStringLen1_info:
         const Foreign.C.String.peekCAStringLen1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c911b() //  [R1]
         { []
         }
     {offset
       c911b: // global
           I64[Sp - 8] = block_c911h_info;
           _s90un::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s90un::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u911q; else goto c911l;
       u911q: // global
           call _c911h(R1) args: 0, res: 0, upd: 0;
       c911l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c911b_info" {
     block_c911b_info:
         const _c911b;
         const 0;
         const 30;
 },
 _c911h() //  [R1]
         { []
         }
     {offset
       c911h: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Foreign.C.String.$wpeekCAStringLen_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c911h_info" {
     block_c911h_info:
         const _c911h;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.45160654 UTC

[section ""data" . Foreign.C.String.peekCAStringLen_closure" {
     Foreign.C.String.peekCAStringLen_closure:
         const Foreign.C.String.peekCAStringLen_info;
 },
 Foreign.C.String.peekCAStringLen_entry() //  [R2]
         { []
         }
     {offset
       c911L: // global
           R2 = R2;
           call Foreign.C.String.peekCAStringLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCAStringLen_info" {
     Foreign.C.String.peekCAStringLen_info:
         const Foreign.C.String.peekCAStringLen_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.455437131 UTC

[section ""data" . Foreign.C.String.castCWcharToChar_closure" {
     Foreign.C.String.castCWcharToChar_closure:
         const Foreign.C.String.castCWcharToChar_info;
         const 0;
 },
 Foreign.C.String.castCWcharToChar_entry() //  [R2]
         { []
         }
     {offset
       c911Z: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9120; else goto c9121;
       c9120: // global
           R2 = R2;
           R1 = Foreign.C.String.castCWcharToChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9121: // global
           I64[Sp - 8] = block_c911W_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u912l; else goto c911X;
       u912l: // global
           call _c911W(R1) args: 0, res: 0, upd: 0;
       c911X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCWcharToChar_info" {
     Foreign.C.String.castCWcharToChar_info:
         const Foreign.C.String.castCWcharToChar_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S90Bc_srt+112;
 },
 _c911W() //  [R1]
         { []
         }
     {offset
       c911W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9126; else goto c9125;
       c9126: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9125: // global
           _s90ut::I64 = I64[R1 + 7];
           if (_s90ut::I64 > 1114111) goto c912d; else goto c912k;
       c912d: // global
           Hp = Hp - 16;
           R2 = _s90ut::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c912k: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s90ut::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c911W_info" {
     block_c911W_info:
         const _c911W;
         const 0;
         const 4294967326;
         const S90Bc_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.46096245 UTC

[section ""data" . Foreign.C.String.peekCWString2_closure" {
     Foreign.C.String.peekCWString2_closure:
         const Foreign.C.String.peekCWString2_info;
         const 0;
         const 0;
         const 0;
 },
 Foreign.C.String.peekCWString2_entry() //  [R1]
         { []
         }
     {offset
       c912E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c912F; else goto c912G;
       c912F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c912G: // global
           (_c912B::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c912B::I64 == 0) goto c912D; else goto c912C;
       c912D: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c912C: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c912B::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = Foreign.C.String.castCWcharToChar_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCWString2_info" {
     Foreign.C.String.peekCWString2_info:
         const Foreign.C.String.peekCWString2_entry;
         const 0;
         const 4294967317;
         const S90Bc_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.467140489 UTC

[section ""data" . Foreign.C.String.$wpeekCWStringLen_closure" {
     Foreign.C.String.$wpeekCWStringLen_closure:
         const Foreign.C.String.$wpeekCWStringLen_info;
         const 0;
 },
 sat_s90uL_entry() //  [R1]
         { []
         }
     {offset
       c913u: // global
           _s90uL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c913v; else goto c913w;
       c913w: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c913y; else goto c913x;
       c913y: // global
           HpAlloc = 40;
           goto c913v;
       c913v: // global
           R1 = _s90uL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c913x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s90uL::P64;
           _s90uC::P64 = P64[_s90uL::P64 + 16];
           _s90uI::I64 = I64[_s90uL::P64 + 24];
           I64[Hp - 32] = GHC.Int.I32#_con_info;
           I64[Hp - 24] = _s90uI::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s90uC::P64;
           R3 = Hp - 14;
           R2 = Foreign.C.String.castCWcharToChar_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s90uL_info" {
     sat_s90uL_info:
         const sat_s90uL_entry;
         const 4294967297;
         const 4294967315;
         const S90Bc_srt+120;
 },
 Foreign.C.String.$wpeekCWStringLen_entry() //  [R2, R3]
         { []
         }
     {offset
       c913C: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c913D; else goto c913E;
       c913D: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.C.String.$wpeekCWStringLen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c913E: // global
           if (%MO_S_Gt_W64(R3, 0)) goto c913A; else goto c913B;
       c913A: // global
           P64[Sp - 24] = R2;
           I64[Sp - 16] = R3 - 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 24;
           call _c9134() args: 0, res: 0, upd: 0;
       c913B: // global
           R1 = Foreign.C.String.peekCWString2_closure;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.$wpeekCWStringLen_info" {
     Foreign.C.String.$wpeekCWStringLen_info:
         const Foreign.C.String.$wpeekCWStringLen_entry;
         const 0;
         const 30064771086;
         const 12884901902;
         const S90Bc_srt+120;
 },
 _c9134() //  []
         { []
         }
     {offset
       c9134: // global
           _s90ux::P64 = P64[Sp];
           _s90uQ::I64 = I64[Sp + 8];
           if (_s90uQ::I64 != 0) goto c913L; else goto c913P;
       c913L: // global
           I64[Sp - 8] = block_c9139_info;
           R1 = _s90ux::P64;
           I64[Sp + 8] = _s90uQ::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u913T; else goto c913a;
       u913T: // global
           call _c9139(R1) args: 0, res: 0, upd: 0;
       c913a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c913P: // global
           I64[Sp + 8] = block_c913j_info;
           R1 = _s90ux::P64;
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u913U; else goto c913k;
       u913U: // global
           call _c913j(R1) args: 0, res: 0, upd: 0;
       c913k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9139() //  [R1]
         { []
         }
     {offset
       c9139: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c913O; else goto c913N;
       c913O: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c913N: // global
           _s90uQ::I64 = I64[Sp + 16];
           _s90uV::I64 = %MO_SS_Conv_W32_W64(I32[I64[R1 + 7] + (_s90uQ::I64 << 2)]);
           I64[Hp - 32] = GHC.Int.I32#_con_info;
           I64[Hp - 24] = _s90uV::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 16] = _s90uQ::I64 - 1;
           P64[Sp + 24] = Hp - 14;
           Sp = Sp + 8;
           call _c9134() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9139_info" {
     block_c9139_info:
         const _c9139;
         const 131;
         const 4294967326;
         const S90Bc_srt+120;
 },
 _c913j() //  [R1]
         { []
         }
     {offset
       c913j: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c913I; else goto c913H;
       c913I: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c913H: // global
           _s90uI::I64 = %MO_SS_Conv_W32_W64(I32[I64[R1 + 7]]);
           I64[Hp - 24] = sat_s90uL_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _s90uI::I64;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c913j_info" {
     block_c913j_info:
         const _c913j;
         const 1;
         const 4294967326;
         const S90Bc_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.477916096 UTC

[section ""data" . Foreign.C.String.peekCWStringLen1_closure" {
     Foreign.C.String.peekCWStringLen1_closure:
         const Foreign.C.String.peekCWStringLen1_info;
         const 0;
 },
 Foreign.C.String.peekCWStringLen1_entry() //  [R2]
         { []
         }
     {offset
       c914J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c914N; else goto c914O;
       c914N: // global
           R2 = R2;
           R1 = Foreign.C.String.peekCWStringLen1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c914O: // global
           I64[Sp - 8] = block_c914G_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u914W; else goto c914H;
       u914W: // global
           call _c914G(R1) args: 0, res: 0, upd: 0;
       c914H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCWStringLen1_info" {
     Foreign.C.String.peekCWStringLen1_info:
         const Foreign.C.String.peekCWStringLen1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S90Bc_srt+136;
 },
 _c914G() //  [R1]
         { []
         }
     {offset
       c914G: // global
           I64[Sp - 8] = block_c914M_info;
           _s90v3::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s90v3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u914V; else goto c914Q;
       u914V: // global
           call _c914M(R1) args: 0, res: 0, upd: 0;
       c914Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c914G_info" {
     block_c914G_info:
         const _c914G;
         const 0;
         const 4294967326;
         const S90Bc_srt+136;
 },
 _c914M() //  [R1]
         { []
         }
     {offset
       c914M: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Foreign.C.String.$wpeekCWStringLen_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c914M_info" {
     block_c914M_info:
         const _c914M;
         const 1;
         const 4294967326;
         const S90Bc_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.484354754 UTC

[section ""data" . Foreign.C.String.peekCWStringLen_closure" {
     Foreign.C.String.peekCWStringLen_closure:
         const Foreign.C.String.peekCWStringLen_info;
         const 0;
 },
 Foreign.C.String.peekCWStringLen_entry() //  [R2]
         { []
         }
     {offset
       c915g: // global
           R2 = R2;
           call Foreign.C.String.peekCWStringLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCWStringLen_info" {
     Foreign.C.String.peekCWStringLen_info:
         const Foreign.C.String.peekCWStringLen_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S90Bc_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.487765095 UTC

[section ""data" . Foreign.C.String.newCWString3_closure" {
     Foreign.C.String.newCWString3_closure:
         const GHC.Int.I32#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.491962111 UTC

[section ""data" . Foreign.C.String.$wpeekCWString_closure" {
     Foreign.C.String.$wpeekCWString_closure:
         const Foreign.C.String.$wpeekCWString_info;
         const 0;
 },
 sat_s90vl_entry() //  [R1]
         { []
         }
     {offset
       c915X: // global
           _s90vl::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c915Y; else goto c915Z;
       c915Z: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9161; else goto c9160;
       c9161: // global
           HpAlloc = 40;
           goto c915Y;
       c915Y: // global
           R1 = _s90vl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9160: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s90vl::P64;
           _s90ve::P64 = P64[_s90vl::P64 + 16];
           _s90vi::I64 = I64[_s90vl::P64 + 24];
           I64[Hp - 32] = GHC.Int.I32#_con_info;
           I64[Hp - 24] = _s90vi::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s90ve::P64;
           R3 = Hp - 14;
           R2 = Foreign.C.String.castCWcharToChar_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s90vl_info" {
     sat_s90vl_info:
         const sat_s90vl_entry;
         const 4294967297;
         const 4294967315;
         const S90Bc_srt+120;
 },
 Foreign.C.String.$wpeekCWString_entry() //  [R2]
         { []
         }
     {offset
       c9164: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9165; else goto c9166;
       c9165: // global
           R2 = R2;
           R1 = Foreign.C.String.$wpeekCWString_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9166: // global
           _s90v7::I64 = R2;
           _s90vz::I64 = 0;
           goto c916l;
       c916l: // global
           if (I32[_s90v7::I64 + (_s90vz::I64 << 2)] == 0 :: W32) goto c916r; else goto c916q;
       c916r: // global
           if (%MO_S_Gt_W64(_s90vz::I64, 0)) goto c916i; else goto c916j;
       c916i: // global
           I64[Sp - 24] = _s90v7::I64;
           I64[Sp - 16] = _s90vz::I64 - 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call _c915H() args: 0, res: 0, upd: 0;
       c916j: // global
           R1 = Foreign.C.String.peekCWString2_closure;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c916q: // global
           _s90vz::I64 = _s90vz::I64 + 1;
           goto c916l;
     }
 },
 section ""relreadonly" . Foreign.C.String.$wpeekCWString_info" {
     Foreign.C.String.$wpeekCWString_info:
         const Foreign.C.String.$wpeekCWString_entry;
         const 0;
         const 81604378638;
         const 8589934596;
         const S90Bc_srt+120;
 },
 _c915H() //  []
         { []
         }
     {offset
       c915H: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c916d; else goto c916c;
       c916d: // global
           HpAlloc = 40;
           I64[Sp] = block_c915H_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c916c: // global
           _s90vo::P64 = P64[Sp + 24];
           _s90vq::I64 = I64[Sp + 16];
           if (_s90vq::I64 != 0) goto c916f; else goto c916g;
       c916f: // global
           I64[Hp - 32] = GHC.Int.I32#_con_info;
           I64[Hp - 24] = %MO_SS_Conv_W32_W64(I32[I64[Sp + 8] + (_s90vq::I64 << 2)]);
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s90vo::P64;
           I64[Sp + 16] = _s90vq::I64 - 1;
           P64[Sp + 24] = Hp - 14;
           call _c915H() args: 0, res: 0, upd: 0;
       c916g: // global
           Hp = Hp - 40;
           P64[Sp + 24] = _s90vo::P64;
           Sp = Sp + 8;
           call _c915P() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c915H_info" {
     block_c915H_info:
         const _c915H;
         const 195;
         const 4294967326;
         const S90Bc_srt+120;
 },
 _c915P() //  []
         { []
         }
     {offset
       c915P: // global
           Hp = Hp + 32;
           _s90ve::P64 = P64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto c916a; else goto c9169;
       c916a: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_c915O_info;
           R1 = _s90ve::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9169: // global
           I64[Hp - 24] = sat_s90vl_info;
           P64[Hp - 8] = _s90ve::P64;
           I64[Hp] = %MO_SS_Conv_W32_W64(I32[I64[Sp]]);
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c915O() //  [R1]
         { []
         }
     {offset
       c915O: // global
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c915P() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c915O_info" {
     block_c915O_info:
         const _c915O;
         const 451;
         const 4294967326;
         const S90Bc_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.502154367 UTC

[section ""data" . Foreign.C.String.peekCWString1_closure" {
     Foreign.C.String.peekCWString1_closure:
         const Foreign.C.String.peekCWString1_info;
         const 0;
 },
 Foreign.C.String.peekCWString1_entry() //  [R2]
         { []
         }
     {offset
       c917m: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c917n; else goto c917o;
       c917n: // global
           R2 = R2;
           R1 = Foreign.C.String.peekCWString1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c917o: // global
           I64[Sp - 8] = block_c917j_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u917s; else goto c917k;
       u917s: // global
           call _c917j(R1) args: 0, res: 0, upd: 0;
       c917k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCWString1_info" {
     Foreign.C.String.peekCWString1_info:
         const Foreign.C.String.peekCWString1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S90Bc_srt+152;
 },
 _c917j() //  [R1]
         { []
         }
     {offset
       c917j: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call Foreign.C.String.$wpeekCWString_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c917j_info" {
     block_c917j_info:
         const _c917j;
         const 0;
         const 4294967326;
         const S90Bc_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.506764462 UTC

[section ""data" . Foreign.C.String.peekCWString_closure" {
     Foreign.C.String.peekCWString_closure:
         const Foreign.C.String.peekCWString_info;
         const 0;
 },
 Foreign.C.String.peekCWString_entry() //  [R2]
         { []
         }
     {offset
       c917H: // global
           R2 = R2;
           call Foreign.C.String.peekCWString1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.peekCWString_info" {
     Foreign.C.String.peekCWString_info:
         const Foreign.C.String.peekCWString_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S90Bc_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.510566215 UTC

[section ""data" . Foreign.C.String.newCWString2_closure" {
     Foreign.C.String.newCWString2_closure:
         const Foreign.C.String.newCWString2_info;
 },
 Foreign.C.String.newCWString2_entry() //  [R2]
         { []
         }
     {offset
       c917V: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9185; else goto c9186;
       c9185: // global
           R2 = R2;
           R1 = Foreign.C.String.newCWString2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9186: // global
           I64[Sp - 8] = block_c917S_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u918a; else goto c917T;
       u918a: // global
           call _c917S(R1) args: 0, res: 0, upd: 0;
       c917T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCWString2_info" {
     Foreign.C.String.newCWString2_info:
         const Foreign.C.String.newCWString2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c917S() //  [R1]
         { []
         }
     {offset
       c917S: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9189; else goto c9188;
       c9189: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9188: // global
           _s90vO::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _s90vO::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c917S_info" {
     block_c917S_info:
         const _c917S;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.51792503 UTC

[section ""data" . Foreign.C.String.withCWStringLen1_closure" {
     Foreign.C.String.withCWStringLen1_closure:
         const Foreign.C.String.withCWStringLen1_info;
 },
 Foreign.C.String.withCWStringLen1_entry() //  [R2, R3]
         { []
         }
     {offset
       c918u: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c918y; else goto c918z;
       c918y: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.C.String.withCWStringLen1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c918z: // global
           I64[Sp - 16] = block_c918s_info;
           _s90vQ::P64 = R3;
           R3 = R2;
           R2 = Foreign.C.String.newCWString2_closure+1;
           P64[Sp - 8] = _s90vQ::P64;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCWStringLen1_info" {
     Foreign.C.String.withCWStringLen1_info:
         const Foreign.C.String.withCWStringLen1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c918s() //  [R1]
         { []
         }
     {offset
       c918s: // global
           I64[Sp - 8] = block_c918x_info;
           R3 = 0;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c918s_info" {
     block_c918s_info:
         const _c918s;
         const 1;
         const 30;
 },
 _c918x() //  [R1]
         { []
         }
     {offset
       c918x: // global
           I64[Sp - 8] = block_c918I_info;
           R2 = 4;
           _s90vT::I64 = R1;
           R1 = R1 << 2;
           I64[Sp] = _s90vT::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c918x_info" {
     block_c918x_info:
         const _c918x;
         const 2;
         const 30;
 },
 _c918I() //  [R1]
         { []
         }
     {offset
       c918I: // global
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _c9194() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c918I_info" {
     block_c918I_info:
         const _c918I;
         const 67;
         const 30;
 },
 _c9194() //  []
         { []
         }
     {offset
       c9194: // global
           _s90wc::P64 = P64[Sp];
           I64[Sp] = block_c9197_info;
           R1 = _s90wc::P64;
           if (R1 & 7 != 0) goto u919x; else goto c9199;
       u919x: // global
           call _c9197(R1) args: 0, res: 0, upd: 0;
       c9199: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9197() //  [R1]
         { []
         }
     {offset
       c9197: // global
           if (R1 & 7 == 1) goto u919u; else goto c919k;
       u919u: // global
           Sp = Sp + 8;
           call _c918R() args: 0, res: 0, upd: 0;
       c919k: // global
           I64[Sp - 8] = block_c919i_info;
           _s90wh::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s90wh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u919y; else goto c919l;
       u919y: // global
           call _c919i(R1) args: 0, res: 0, upd: 0;
       c919l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9197_info" {
     block_c9197_info:
         const _c9197;
         const 453;
         const 30;
 },
 _c918R() //  []
         { []
         }
     {offset
       c918R: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c918Z; else goto c918Y;
       c918Z: // global
           HpAlloc = 56;
           I64[Sp] = block_c918R_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c918Y: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           I64[Sp + 16] = block_c918W_info;
           R2 = Hp - 15;
           R1 = P64[Sp + 32];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c918R_info" {
     block_c918R_info:
         const _c918R;
         const 196;
         const 30;
 },
 _c918W() //  [R1]
         { []
         }
     {offset
       c918W: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c918W_info" {
     block_c918W_info:
         const _c918W;
         const 130;
         const 30;
 },
 _c919i() //  [R1]
         { []
         }
     {offset
       c919i: // global
           _s90wd::I64 = I64[Sp + 16];
           _s90wh::P64 = P64[Sp + 8];
           I32[I64[Sp + 24] + (_s90wd::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           P64[Sp + 8] = _s90wh::P64;
           I64[Sp + 16] = _s90wd::I64 + 1;
           Sp = Sp + 8;
           call _c9194() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c919i_info" {
     block_c919i_info:
         const _c919i;
         const 902;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.532574048 UTC

[section ""data" . Foreign.C.String.withCWStringLen_closure" {
     Foreign.C.String.withCWStringLen_closure:
         const Foreign.C.String.withCWStringLen_info;
 },
 Foreign.C.String.withCWStringLen_entry() //  [R2, R3]
         { []
         }
     {offset
       c91av: // global
           R3 = R3;
           R2 = R2;
           call Foreign.C.String.withCWStringLen1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCWStringLen_info" {
     Foreign.C.String.withCWStringLen_info:
         const Foreign.C.String.withCWStringLen_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.537045979 UTC

[section ""data" . Foreign.C.String.withCWString_closure" {
     Foreign.C.String.withCWString_closure:
         const Foreign.C.String.withCWString_info;
         const 0;
 },
 vals_s90wn_entry() //  [R1]
         { []
         }
     {offset
       c91aK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c91aL; else goto c91aM;
       c91aL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c91aM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Foreign.C.String.newCWString2_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . vals_s90wn_info" {
     vals_s90wn_info:
         const vals_s90wn_entry;
         const 1;
         const 16;
 },
 sat_s90wq_entry() //  [R1]
         { []
         }
     {offset
       c91aX: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s90wq_info" {
     sat_s90wq_info:
         const sat_s90wq_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s90wr_entry() //  [R1, R2]
         { []
         }
     {offset
       c91b0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c91b4; else goto c91b3;
       c91b4: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c91b3: // global
           _s90wn::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s90wq_info;
           P64[Hp] = R2;
           R5 = Hp - 7;
           R4 = _s90wn::P64;
           R3 = Foreign.C.String.newCWString3_closure+1;
           R2 = Foreign.C.Types.$fStorableCWchar_closure;
           call Foreign.Marshal.Array.withArrayLen0_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s90wr_info" {
     sat_s90wr_info:
         const sat_s90wr_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S90Bc_srt+168;
 },
 Foreign.C.String.withCWString_entry() //  [R2]
         { []
         }
     {offset
       c91b5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c91b9; else goto c91b8;
       c91b9: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Foreign.C.String.withCWString_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c91b8: // global
           I64[Hp - 32] = vals_s90wn_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s90wr_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCWString_info" {
     Foreign.C.String.withCWString_info:
         const Foreign.C.String.withCWString_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S90Bc_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.545609801 UTC

[section ""data" . Foreign.C.String.newCWString1_closure" {
     Foreign.C.String.newCWString1_closure:
         const Foreign.C.String.newCWString1_info;
         const 0;
 },
 Foreign.C.String.newCWString1_entry() //  [R2]
         { []
         }
     {offset
       c91bA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c91bB; else goto c91bC;
       c91bB: // global
           R2 = R2;
           R1 = Foreign.C.String.newCWString1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c91bC: // global
           I64[Sp - 8] = block_c91by_info;
           R3 = R2;
           R2 = Foreign.C.String.newCWString2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCWString1_info" {
     Foreign.C.String.newCWString1_info:
         const Foreign.C.String.newCWString1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S90Bc_srt+184;
 },
 _c91by() //  [R1]
         { []
         }
     {offset
       c91by: // global
           R4 = R1;
           R3 = Foreign.C.String.newCWString3_closure+1;
           R2 = Foreign.C.Types.$fStorableCWchar_closure;
           Sp = Sp + 8;
           call Foreign.Marshal.Array.newArray3_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c91by_info" {
     block_c91by_info:
         const _c91by;
         const 0;
         const 4294967326;
         const S90Bc_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.550535678 UTC

[section ""data" . Foreign.C.String.newCWString_closure" {
     Foreign.C.String.newCWString_closure:
         const Foreign.C.String.newCWString_info;
         const 0;
 },
 Foreign.C.String.newCWString_entry() //  [R2]
         { []
         }
     {offset
       c91bT: // global
           R2 = R2;
           call Foreign.C.String.newCWString1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCWString_info" {
     Foreign.C.String.newCWString_info:
         const Foreign.C.String.newCWString_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S90Bc_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.554915306 UTC

[section ""data" . Foreign.C.String.newCWStringLen1_closure" {
     Foreign.C.String.newCWStringLen1_closure:
         const Foreign.C.String.newCWStringLen1_info;
         const 0;
 },
 sat_s90wC_entry() //  [R1]
         { []
         }
     {offset
       c91cg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c91ck; else goto c91cl;
       c91ck: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c91cl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c91ce_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s90wC_info" {
     sat_s90wC_info:
         const sat_s90wC_entry;
         const 1;
         const 16;
 },
 _c91ce() //  [R1]
         { []
         }
     {offset
       c91ce: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c91co; else goto c91cn;
       c91co: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c91cn: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c91ce_info" {
     block_c91ce_info:
         const _c91ce;
         const 0;
         const 30;
 },
 Foreign.C.String.newCWStringLen1_entry() //  [R2]
         { []
         }
     {offset
       c91cp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c91cr; else goto c91cs;
       c91cr: // global
           R2 = R2;
           R1 = Foreign.C.String.newCWStringLen1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c91cs: // global
           I64[Sp - 8] = block_c91c4_info;
           R3 = R2;
           R2 = Foreign.C.String.newCWString2_closure+1;
           Sp = Sp - 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCWStringLen1_info" {
     Foreign.C.String.newCWStringLen1_info:
         const Foreign.C.String.newCWStringLen1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S90Bc_srt+200;
 },
 _c91c4() //  [R1]
         { []
         }
     {offset
       c91c4: // global
           I64[Sp - 8] = block_c91c8_info;
           R3 = R1;
           R2 = Foreign.C.Types.$fStorableCWchar_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call Foreign.Marshal.Array.newArray1_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c91c4_info" {
     block_c91c4_info:
         const _c91c4;
         const 0;
         const 4294967326;
         const S90Bc_srt+200;
 },
 _c91c8() //  [R1]
         { []
         }
     {offset
       c91c8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c91cw; else goto c91cv;
       c91cw: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c91cv: // global
           I64[Hp - 40] = sat_s90wC_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c91c8_info" {
     block_c91c8_info:
         const _c91c8;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.564490477 UTC

[section ""data" . Foreign.C.String.newCWStringLen_closure" {
     Foreign.C.String.newCWStringLen_closure:
         const Foreign.C.String.newCWStringLen_info;
         const 0;
 },
 Foreign.C.String.newCWStringLen_entry() //  [R2]
         { []
         }
     {offset
       c91d4: // global
           R2 = R2;
           call Foreign.C.String.newCWStringLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCWStringLen_info" {
     Foreign.C.String.newCWStringLen_info:
         const Foreign.C.String.newCWStringLen_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S90Bc_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.568230674 UTC

[section ""data" . Foreign.C.String.castCharToCChar1_closure" {
     Foreign.C.String.castCharToCChar1_closure:
         const Foreign.C.String.castCharToCChar1_info;
 },
 Foreign.C.String.castCharToCChar1_entry() //  [R2]
         { []
         }
     {offset
       c91di: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c91ds; else goto c91dt;
       c91ds: // global
           R2 = R2;
           R1 = Foreign.C.String.castCharToCChar1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c91dt: // global
           I64[Sp - 8] = block_c91df_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u91dx; else goto c91dg;
       u91dx: // global
           call _c91df(R1) args: 0, res: 0, upd: 0;
       c91dg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCharToCChar1_info" {
     Foreign.C.String.castCharToCChar1_info:
         const Foreign.C.String.castCharToCChar1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c91df() //  [R1]
         { []
         }
     {offset
       c91df: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c91dw; else goto c91dv;
       c91dw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c91dv: // global
           _s90wI::I64 = %MO_SS_Conv_W8_W64(%MO_SS_Conv_W64_W8(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Int.I8#_con_info;
           I64[Hp] = _s90wI::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c91df_info" {
     block_c91df_info:
         const _c91df;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.573616792 UTC

[section ""data" . Foreign.C.String.castCharToCSChar_closure" {
     Foreign.C.String.castCharToCSChar_closure:
         const Foreign.C.String.castCharToCSChar_info;
 },
 Foreign.C.String.castCharToCSChar_entry() //  [R2]
         { []
         }
     {offset
       c91dP: // global
           R2 = R2;
           call Foreign.C.String.castCharToCChar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCharToCSChar_info" {
     Foreign.C.String.castCharToCSChar_info:
         const Foreign.C.String.castCharToCSChar_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.577323656 UTC

[section ""data" . Foreign.C.String.castCharToCUChar1_closure" {
     Foreign.C.String.castCharToCUChar1_closure:
         const Foreign.C.String.castCharToCUChar1_info;
 },
 Foreign.C.String.castCharToCUChar1_entry() //  [R2]
         { []
         }
     {offset
       c91e3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c91eg; else goto c91eh;
       c91eg: // global
           R2 = R2;
           R1 = Foreign.C.String.castCharToCUChar1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c91eh: // global
           I64[Sp - 8] = block_c91e0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u91el; else goto c91e1;
       u91el: // global
           call _c91e0(R1) args: 0, res: 0, upd: 0;
       c91e1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCharToCUChar1_info" {
     Foreign.C.String.castCharToCUChar1_info:
         const Foreign.C.String.castCharToCUChar1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c91e0() //  [R1]
         { []
         }
     {offset
       c91e0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c91ek; else goto c91ej;
       c91ek: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c91ej: // global
           _s90wO::I64 = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Word.W8#_con_info;
           I64[Hp] = _s90wO::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c91e0_info" {
     block_c91e0_info:
         const _c91e0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.582191028 UTC

[section ""data" . Foreign.C.String.castCharToCUChar_closure" {
     Foreign.C.String.castCharToCUChar_closure:
         const Foreign.C.String.castCharToCUChar_info;
 },
 Foreign.C.String.castCharToCUChar_entry() //  [R2]
         { []
         }
     {offset
       c91eD: // global
           R2 = R2;
           call Foreign.C.String.castCharToCUChar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCharToCUChar_info" {
     Foreign.C.String.castCharToCUChar_info:
         const Foreign.C.String.castCharToCUChar_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.585273545 UTC

[section ""data" . Foreign.C.String.castCharToCChar_closure" {
     Foreign.C.String.castCharToCChar_closure:
         const Foreign.C.String.castCharToCChar_info;
 },
 Foreign.C.String.castCharToCChar_entry() //  [R2]
         { []
         }
     {offset
       c91eO: // global
           R2 = R2;
           call Foreign.C.String.castCharToCChar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.castCharToCChar_info" {
     Foreign.C.String.castCharToCChar_info:
         const Foreign.C.String.castCharToCChar_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.590556404 UTC

[section ""data" . Foreign.C.String.newCAString1_closure" {
     Foreign.C.String.newCAString1_closure:
         const Foreign.C.String.newCAString1_info;
         const 0;
 },
 Foreign.C.String.newCAString1_entry() //  [R2]
         { []
         }
     {offset
       c91f1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c91f2; else goto c91f3;
       c91f2: // global
           R2 = R2;
           R1 = Foreign.C.String.newCAString1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c91f3: // global
           I64[Sp - 16] = block_c91eZ_info;
           R3 = 0;
           _s90wP::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s90wP::P64;
           Sp = Sp - 16;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCAString1_info" {
     Foreign.C.String.newCAString1_info:
         const Foreign.C.String.newCAString1_entry;
         const 0;
         const 18014402804449294;
         const 8589934597;
         const S90Bc_srt+40;
 },
 _c91eZ() //  [R1]
         { []
         }
     {offset
       c91eZ: // global
           _s90wP::P64 = P64[Sp + 8];
           (_s90wX::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(R1 + 1);
           if (_s90wX::I64 == 0) goto c91fR; else goto c91fQ;
       c91fR: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c91fQ: // global
           I64[Sp - 8] = 0;
           P64[Sp] = _s90wP::P64;
           I64[Sp + 8] = _s90wX::I64;
           Sp = Sp - 8;
           call _c91ft() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c91eZ_info" {
     block_c91eZ_info:
         const _c91eZ;
         const 1;
         const 4294967326;
         const S90Bc_srt+40;
 },
 _c91ft() //  []
         { []
         }
     {offset
       c91ft: // global
           I64[Sp - 8] = block_c91fw_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u91g6; else goto c91fy;
       u91g6: // global
           call _c91fw(R1) args: 0, res: 0, upd: 0;
       c91fy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c91fw() //  [R1]
         { []
         }
     {offset
       c91fw: // global
           if (R1 & 7 == 1) goto c91fE; else goto c91fJ;
       c91fE: // global
           I64[Sp + 16] = I64[Sp + 8];
           Sp = Sp + 16;
           call _c91fl() args: 0, res: 0, upd: 0;
       c91fJ: // global
           I64[Sp] = block_c91fH_info;
           _s90xa::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _s90xa::P64;
           if (R1 & 7 != 0) goto u91g7; else goto c91fK;
       u91g7: // global
           call _c91fH(R1) args: 0, res: 0, upd: 0;
       c91fK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c91fw_info" {
     block_c91fw_info:
         const _c91fw;
         const 451;
         const 30;
 },
 _c91fl() //  []
         { []
         }
     {offset
       c91fl: // global
           Hp = Hp + 16;
           _s90x0::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c91fq; else goto c91fp;
       c91fq: // global
           HpAlloc = 16;
           I64[Sp] = block_c91fk_info;
           R1 = _s90x0::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c91fp: // global
           _s90wX::I64 = I64[Sp + 8];
           I8[_s90wX::I64 + _s90x0::I64] = 0 :: W8;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s90wX::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c91fk() //  [R1]
         { []
         }
     {offset
       c91fk: // global
           I64[Sp] = R1;
           call _c91fl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c91fk_info" {
     block_c91fk_info:
         const _c91fk;
         const 65;
         const 30;
 },
 _c91fH() //  [R1]
         { []
         }
     {offset
       c91fH: // global
           _s90x6::I64 = I64[Sp + 8];
           _s90xa::P64 = P64[Sp + 16];
           I8[I64[Sp + 24] + _s90x6::I64] = %MO_SS_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 16] = _s90xa::P64;
           I64[Sp + 8] = _s90x6::I64 + 1;
           Sp = Sp + 8;
           call _c91ft() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c91fH_info" {
     block_c91fH_info:
         const _c91fH;
         const 323;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.601980834 UTC

[section ""data" . Foreign.C.String.newCAString_closure" {
     Foreign.C.String.newCAString_closure:
         const Foreign.C.String.newCAString_info;
         const 0;
 },
 Foreign.C.String.newCAString_entry() //  [R2]
         { []
         }
     {offset
       c91gN: // global
           R2 = R2;
           call Foreign.C.String.newCAString1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCAString_info" {
     Foreign.C.String.newCAString_info:
         const Foreign.C.String.newCAString_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S90Bc_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.607249475 UTC

[section ""data" . Foreign.C.String.newCAStringLen1_closure" {
     Foreign.C.String.newCAStringLen1_closure:
         const Foreign.C.String.newCAStringLen1_info;
         const 0;
 },
 Foreign.C.String.newCAStringLen1_entry() //  [R2]
         { []
         }
     {offset
       c91h0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c91h1; else goto c91h2;
       c91h1: // global
           R2 = R2;
           R1 = Foreign.C.String.newCAStringLen1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c91h2: // global
           I64[Sp - 16] = block_c91gY_info;
           R3 = 0;
           _s90xh::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s90xh::P64;
           Sp = Sp - 16;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCAStringLen1_info" {
     Foreign.C.String.newCAStringLen1_info:
         const Foreign.C.String.newCAStringLen1_entry;
         const 0;
         const 36028801313931278;
         const 8589934597;
         const S90Bc_srt+40;
 },
 _c91gY() //  [R1]
         { []
         }
     {offset
       c91gY: // global
           _s90xh::P64 = P64[Sp + 8];
           (_s90xp::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(R1 + 1);
           if (_s90xp::I64 == 0) goto c91hS; else goto c91hR;
       c91hS: // global
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c91hR: // global
           P64[Sp - 16] = _s90xh::P64;
           I64[Sp - 8] = 0;
           I64[Sp] = _s90xp::I64;
           I64[Sp + 8] = R1;
           Sp = Sp - 16;
           call _c91hu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c91gY_info" {
     block_c91gY_info:
         const _c91gY;
         const 1;
         const 4294967326;
         const S90Bc_srt+40;
 },
 _c91hu() //  []
         { []
         }
     {offset
       c91hu: // global
           _s90xx::P64 = P64[Sp];
           I64[Sp] = block_c91hx_info;
           R1 = _s90xx::P64;
           if (R1 & 7 != 0) goto u91i5; else goto c91hz;
       u91i5: // global
           call _c91hx(R1) args: 0, res: 0, upd: 0;
       c91hz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c91hx() //  [R1]
         { []
         }
     {offset
       c91hx: // global
           if (R1 & 7 == 1) goto u91i2; else goto c91hK;
       u91i2: // global
           Sp = Sp + 8;
           call _c91hk() args: 0, res: 0, upd: 0;
       c91hK: // global
           I64[Sp - 8] = block_c91hI_info;
           _s90xC::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s90xC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u91i6; else goto c91hL;
       u91i6: // global
           call _c91hI(R1) args: 0, res: 0, upd: 0;
       c91hL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c91hx_info" {
     block_c91hx_info:
         const _c91hx;
         const 451;
         const 30;
 },
 _c91hk() //  []
         { []
         }
     {offset
       c91hk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c91hr; else goto c91hq;
       c91hr: // global
           HpAlloc = 56;
           I64[Sp] = block_c91hk_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c91hq: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c91hk_info" {
     block_c91hk_info:
         const _c91hk;
         const 194;
         const 30;
 },
 _c91hI() //  [R1]
         { []
         }
     {offset
       c91hI: // global
           _s90xy::I64 = I64[Sp + 16];
           _s90xC::P64 = P64[Sp + 8];
           I8[I64[Sp + 24] + _s90xy::I64] = %MO_SS_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 8] = _s90xC::P64;
           I64[Sp + 16] = _s90xy::I64 + 1;
           Sp = Sp + 8;
           call _c91hu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c91hI_info" {
     block_c91hI_info:
         const _c91hI;
         const 900;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.61799789 UTC

[section ""data" . Foreign.C.String.newCAStringLen_closure" {
     Foreign.C.String.newCAStringLen_closure:
         const Foreign.C.String.newCAStringLen_info;
         const 0;
 },
 Foreign.C.String.newCAStringLen_entry() //  [R2]
         { []
         }
     {offset
       c91iP: // global
           R2 = R2;
           call Foreign.C.String.newCAStringLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.newCAStringLen_info" {
     Foreign.C.String.newCAStringLen_info:
         const Foreign.C.String.newCAStringLen_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S90Bc_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.623700011 UTC

[section ""data" . Foreign.C.String.withCAString1_closure" {
     Foreign.C.String.withCAString1_closure:
         const Foreign.C.String.withCAString1_info;
 },
 Foreign.C.String.withCAString1_entry() //  [R2, R3]
         { []
         }
     {offset
       c91j2: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c91j3; else goto c91j4;
       c91j3: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.C.String.withCAString1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c91j4: // global
           I64[Sp - 24] = block_c91j0_info;
           _s90xL::P64 = R3;
           R3 = 0;
           _s90xK::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s90xK::P64;
           P64[Sp - 8] = _s90xL::P64;
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCAString1_info" {
     Foreign.C.String.withCAString1_info:
         const Foreign.C.String.withCAString1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c91j0() //  [R1]
         { []
         }
     {offset
       c91j0: // global
           I64[Sp] = block_c91jb_info;
           R2 = 1;
           R1 = R1 + 1;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c91j0_info" {
     block_c91j0_info:
         const _c91j0;
         const 2;
         const 30;
 },
 _c91jb() //  [R1]
         { []
         }
     {offset
       c91jb: // global
           P64[Sp - 16] = P64[Sp + 8];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call _c91jv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c91jb_info" {
     block_c91jb_info:
         const _c91jb;
         const 2;
         const 30;
 },
 _c91jv() //  []
         { []
         }
     {offset
       c91jv: // global
           _s90y6::P64 = P64[Sp];
           I64[Sp] = block_c91jy_info;
           R1 = _s90y6::P64;
           if (R1 & 7 != 0) goto u91k6; else goto c91jA;
       u91k6: // global
           call _c91jy(R1) args: 0, res: 0, upd: 0;
       c91jA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c91jy() //  [R1]
         { []
         }
     {offset
       c91jy: // global
           if (R1 & 7 == 1) goto c91jG; else goto c91jL;
       c91jG: // global
           I64[Sp + 8] = I64[Sp + 8];
           Sp = Sp + 8;
           call _c91jk() args: 0, res: 0, upd: 0;
       c91jL: // global
           I64[Sp - 8] = block_c91jJ_info;
           _s90yb::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s90yb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u91k7; else goto c91jM;
       u91k7: // global
           call _c91jJ(R1) args: 0, res: 0, upd: 0;
       c91jM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c91jy_info" {
     block_c91jy_info:
         const _c91jy;
         const 196;
         const 30;
 },
 _c91jk() //  []
         { []
         }
     {offset
       c91jk: // global
           Hp = Hp + 16;
           _s90xX::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c91jq; else goto c91jp;
       c91jq: // global
           HpAlloc = 16;
           I64[Sp] = block_c91jj_info;
           R1 = _s90xX::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c91jp: // global
           _s90xL::P64 = P64[Sp + 24];
           _s90xV::I64 = I64[Sp + 8];
           I8[_s90xV::I64 + _s90xX::I64] = 0 :: W8;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s90xV::I64;
           I64[Sp + 8] = block_c91jn_info;
           R2 = Hp - 7;
           R1 = _s90xL::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c91jj() //  [R1]
         { []
         }
     {offset
       c91jj: // global
           I64[Sp] = R1;
           call _c91jk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c91jj_info" {
     block_c91jj_info:
         const _c91jj;
         const 67;
         const 30;
 },
 _c91jn() //  [R1]
         { []
         }
     {offset
       c91jn: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c91jn_info" {
     block_c91jn_info:
         const _c91jn;
         const 130;
         const 30;
 },
 _c91jJ() //  [R1]
         { []
         }
     {offset
       c91jJ: // global
           _s90y7::I64 = I64[Sp + 16];
           _s90yb::P64 = P64[Sp + 8];
           I8[I64[Sp + 24] + _s90y7::I64] = %MO_SS_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 8] = _s90yb::P64;
           I64[Sp + 16] = _s90y7::I64 + 1;
           Sp = Sp + 8;
           call _c91jv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c91jJ_info" {
     block_c91jJ_info:
         const _c91jJ;
         const 389;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.637836754 UTC

[section ""data" . Foreign.C.String.withCAString_closure" {
     Foreign.C.String.withCAString_closure:
         const Foreign.C.String.withCAString_info;
 },
 Foreign.C.String.withCAString_entry() //  [R2, R3]
         { []
         }
     {offset
       c91kX: // global
           R3 = R3;
           R2 = R2;
           call Foreign.C.String.withCAString1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCAString_info" {
     Foreign.C.String.withCAString_info:
         const Foreign.C.String.withCAString_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.643407949 UTC

[section ""data" . Foreign.C.String.withCAStringLen1_closure" {
     Foreign.C.String.withCAStringLen1_closure:
         const Foreign.C.String.withCAStringLen1_info;
 },
 Foreign.C.String.withCAStringLen1_entry() //  [R2, R3]
         { []
         }
     {offset
       c91la: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c91lb; else goto c91lc;
       c91lb: // global
           R3 = R3;
           R2 = R2;
           R1 = Foreign.C.String.withCAStringLen1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c91lc: // global
           I64[Sp - 24] = block_c91l8_info;
           _s90yj::P64 = R3;
           R3 = 0;
           _s90yi::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s90yi::P64;
           P64[Sp - 8] = _s90yj::P64;
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCAStringLen1_info" {
     Foreign.C.String.withCAStringLen1_info:
         const Foreign.C.String.withCAStringLen1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c91l8() //  [R1]
         { []
         }
     {offset
       c91l8: // global
           I64[Sp - 8] = block_c91lf_info;
           R2 = 1;
           _s90yl::I64 = R1;
           R1 = R1;
           I64[Sp] = _s90yl::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c91l8_info" {
     block_c91l8_info:
         const _c91l8;
         const 2;
         const 30;
 },
 _c91lf() //  [R1]
         { []
         }
     {offset
       c91lf: // global
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _c91lC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c91lf_info" {
     block_c91lf_info:
         const _c91lf;
         const 67;
         const 30;
 },
 _c91lC() //  []
         { []
         }
     {offset
       c91lC: // global
           _s90yD::P64 = P64[Sp];
           I64[Sp] = block_c91lF_info;
           R1 = _s90yD::P64;
           if (R1 & 7 != 0) goto u91mb; else goto c91lH;
       u91mb: // global
           call _c91lF(R1) args: 0, res: 0, upd: 0;
       c91lH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c91lF() //  [R1]
         { []
         }
     {offset
       c91lF: // global
           if (R1 & 7 == 1) goto u91m8; else goto c91lS;
       u91m8: // global
           Sp = Sp + 8;
           call _c91lp() args: 0, res: 0, upd: 0;
       c91lS: // global
           I64[Sp - 8] = block_c91lQ_info;
           _s90yI::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s90yI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u91mc; else goto c91lT;
       u91mc: // global
           call _c91lQ(R1) args: 0, res: 0, upd: 0;
       c91lT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c91lF_info" {
     block_c91lF_info:
         const _c91lF;
         const 453;
         const 30;
 },
 _c91lp() //  []
         { []
         }
     {offset
       c91lp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c91lx; else goto c91lw;
       c91lx: // global
           HpAlloc = 56;
           I64[Sp] = block_c91lp_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c91lw: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           I64[Sp + 16] = block_c91lu_info;
           R2 = Hp - 15;
           R1 = P64[Sp + 32];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c91lp_info" {
     block_c91lp_info:
         const _c91lp;
         const 196;
         const 30;
 },
 _c91lu() //  [R1]
         { []
         }
     {offset
       c91lu: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c91lu_info" {
     block_c91lu_info:
         const _c91lu;
         const 130;
         const 30;
 },
 _c91lQ() //  [R1]
         { []
         }
     {offset
       c91lQ: // global
           _s90yE::I64 = I64[Sp + 16];
           _s90yI::P64 = P64[Sp + 8];
           I8[I64[Sp + 24] + _s90yE::I64] = %MO_SS_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 8] = _s90yI::P64;
           I64[Sp + 16] = _s90yE::I64 + 1;
           Sp = Sp + 8;
           call _c91lC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c91lQ_info" {
     block_c91lQ_info:
         const _c91lQ;
         const 902;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.657004266 UTC

[section ""data" . Foreign.C.String.withCAStringLen_closure" {
     Foreign.C.String.withCAStringLen_closure:
         const Foreign.C.String.withCAStringLen_info;
 },
 Foreign.C.String.withCAStringLen_entry() //  [R2, R3]
         { []
         }
     {offset
       c91n5: // global
           R3 = R3;
           R2 = R2;
           call Foreign.C.String.withCAStringLen1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Foreign.C.String.withCAStringLen_info" {
     Foreign.C.String.withCAStringLen_info:
         const Foreign.C.String.withCAStringLen_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:10.660071727 UTC

[section ""relreadonly" . S90Bc_srt" {
     S90Bc_srt:
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const Foreign.C.String.withCStringLen1_closure;
         const Foreign.C.String.withCString1_closure;
         const GHC.Foreign.charIsRepresentable1_closure;
         const Foreign.C.String.charIsRepresentable1_closure;
         const Foreign.Marshal.Alloc.malloc1_closure;
         const Foreign.Marshal.Alloc.realloc2_closure;
         const Foreign.C.String.newCStringLen1_closure;
         const GHC.Foreign.newCString1_closure;
         const Foreign.C.String.newCString1_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const Foreign.C.String.peekCStringLen1_closure;
         const GHC.Foreign.peekCString1_closure;
         const Foreign.C.String.peekCString1_closure;
         const GHC.Char.$wlvl_closure;
         const Foreign.C.String.castCWcharToChar_closure;
         const Foreign.C.String.peekCWString2_closure;
         const Foreign.C.String.$wpeekCWStringLen_closure;
         const Foreign.C.String.peekCWStringLen1_closure;
         const Foreign.C.String.$wpeekCWString_closure;
         const Foreign.C.String.peekCWString1_closure;
         const Foreign.Marshal.Array.withArrayLen0_closure;
         const Foreign.C.String.withCWString_closure;
         const Foreign.Marshal.Array.newArray3_closure;
         const Foreign.C.String.newCWString1_closure;
         const Foreign.Marshal.Array.newArray1_closure;
         const Foreign.C.String.newCWStringLen1_closure;
         const Foreign.C.String.newCAString1_closure;
         const Foreign.C.String.newCAStringLen1_closure;
 }]

