
==================== Tidy Core ====================
2018-03-16 16:04:11.378567492 UTC

Result size of Tidy Core
  = {terms: 1,434, types: 1,655, coercions: 862, joins: 0/10}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Foreign.C.Error.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.$trModule3
  = GHC.Types.TrNameS Foreign.C.Error.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
Foreign.C.Error.$trModule2 = "Foreign.C.Error"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.$trModule1
  = GHC.Types.TrNameS Foreign.C.Error.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Foreign.C.Error.$trModule
  = GHC.Types.Module
      Foreign.C.Error.$trModule3 Foreign.C.Error.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r92Th :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_r92Th
  = GHC.Types.KindRepTyConApp
      Foreign.C.Types.$tcCInt (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.$tcErrno2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Foreign.C.Error.$tcErrno2 = "Errno"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.$tcErrno1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.$tcErrno1
  = GHC.Types.TrNameS Foreign.C.Error.$tcErrno2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.$tcErrno :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Foreign.C.Error.$tcErrno
  = GHC.Types.TyCon
      9614618910057470603##
      5790003468206630810##
      Foreign.C.Error.$trModule
      Foreign.C.Error.$tcErrno1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r92Ti :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_r92Ti
  = GHC.Types.KindRepTyConApp
      Foreign.C.Error.$tcErrno (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.$tc'Errno1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Foreign.C.Error.$tc'Errno1
  = GHC.Types.KindRepFun $krep_r92Th $krep1_r92Ti

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.$tc'Errno3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Foreign.C.Error.$tc'Errno3 = "'Errno"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.$tc'Errno2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.$tc'Errno2
  = GHC.Types.TrNameS Foreign.C.Error.$tc'Errno3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.$tc'Errno :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Foreign.C.Error.$tc'Errno
  = GHC.Types.TyCon
      18175500743799072511##
      6332857689812514354##
      Foreign.C.Error.$trModule
      Foreign.C.Error.$tc'Errno2
      0#
      Foreign.C.Error.$tc'Errno1

-- RHS size: {terms: 10, types: 20, coercions: 5, joins: 0/0}
Foreign.C.Error.getErrno1
  :: State# RealWorld -> (# State# RealWorld, Errno #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_i7IAv [Occ=Once] :: State# RealWorld) ->
                 case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
                        s_i7IAv
                 of
                 { (# ds_d924s [Occ=Once], ds1_d924r [Occ=Once] #) ->
                 (# ds_d924s,
                    (GHC.Int.I32# (narrow32Int# ds1_d924r))
                    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *)) #)
                 }}]
Foreign.C.Error.getErrno1
  = \ (s_i7IAv :: State# RealWorld) ->
      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
             s_i7IAv
      of
      { (# ds_d924s, ds1_d924r #) ->
      (# ds_d924s,
         (GHC.Int.I32# (narrow32Int# ds1_d924r))
         `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                 :: (GHC.Int.Int32 :: *) ~R# (Errno :: *)) #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getErrno :: IO Errno
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.getErrno1
               `cast` (Sym (GHC.Types.N:IO[0] <Errno>_R)
                       :: (State# RealWorld -> (# State# RealWorld, Errno #) :: *)
                          ~R# (IO Errno :: *))}]
getErrno
  = Foreign.C.Error.getErrno1
    `cast` (Sym (GHC.Types.N:IO[0] <Errno>_R)
            :: (State# RealWorld -> (# State# RealWorld, Errno #) :: *)
               ~R# (IO Errno :: *))

-- RHS size: {terms: 9, types: 17, coercions: 0, joins: 0/0}
Foreign.C.Error.resetErrno1
  :: State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d924o [Occ=Once] :: State# RealWorld) ->
                 case {__pkg_ccall base-4.11.0.0 Int#
                           -> State# RealWorld -> (# State# RealWorld #)}_d924p
                        0# ds_d924o
                 of
                 { (# ds1_d924n [Occ=Once] #) ->
                 (# ds1_d924n, GHC.Tuple.() #)
                 }}]
Foreign.C.Error.resetErrno1
  = \ (ds_d924o :: State# RealWorld) ->
      case {__pkg_ccall base-4.11.0.0 Int#
                           -> State# RealWorld -> (# State# RealWorld #)}_d924p
             0# ds_d924o
      of
      { (# ds1_d924n #) ->
      (# ds1_d924n, GHC.Tuple.() #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
resetErrno :: IO ()
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.resetErrno1
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (IO () :: *))}]
resetErrno
  = Foreign.C.Error.resetErrno1
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (IO () :: *))

-- RHS size: {terms: 10, types: 4, coercions: 3, joins: 0/0}
isValidErrno :: Errno -> Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d91XV [Occ=Once] :: Errno) ->
                 case ds_d91XV
                      `cast` (Foreign.C.Error.N:Errno[0] ; Foreign.C.Types.N:CInt[0]
                              :: (Errno :: *) ~R# (GHC.Int.Int32 :: *))
                 of
                 { GHC.Int.I32# x_i9259 [Occ=Once!] ->
                 case x_i9259 of {
                   __DEFAULT -> GHC.Types.True;
                   -1# -> GHC.Types.False
                 }
                 }}]
isValidErrno
  = \ (ds_d91XV :: Errno) ->
      case ds_d91XV
           `cast` (Foreign.C.Error.N:Errno[0] ; Foreign.C.Types.N:CInt[0]
                   :: (Errno :: *) ~R# (GHC.Int.Int32 :: *))
      of
      { GHC.Int.I32# x_i9259 ->
      case x_i9259 of {
        __DEFAULT -> GHC.Types.True;
        -1# -> GHC.Types.False
      }
      }

-- RHS size: {terms: 22, types: 9, coercions: 6, joins: 0/0}
Foreign.C.Error.$fEqErrno_$c== :: Errno -> Errno -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)><L,1*U(1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (errno1_a91tk [Occ=Once] :: Errno)
                 (errno2_a91tm [Occ=Once] :: Errno) ->
                 case errno1_a91tk
                      `cast` (Foreign.C.Error.N:Errno[0] ; Foreign.C.Types.N:CInt[0]
                              :: (Errno :: *) ~R# (GHC.Int.Int32 :: *))
                 of
                 { GHC.Int.I32# x_i9259 [Occ=Once!] ->
                 case x_i9259 of wild1_X4U {
                   __DEFAULT ->
                     case errno2_a91tm
                          `cast` (Foreign.C.Error.N:Errno[0] ; Foreign.C.Types.N:CInt[0]
                                  :: (Errno :: *) ~R# (GHC.Int.Int32 :: *))
                     of
                     { GHC.Int.I32# x1_X92a6 [Occ=Once!] ->
                     case x1_X92a6 of wild3_X51 {
                       __DEFAULT -> tagToEnum# @ Bool (==# wild1_X4U wild3_X51);
                       -1# -> GHC.Types.False
                     }
                     };
                   -1# -> GHC.Types.False
                 }
                 }}]
Foreign.C.Error.$fEqErrno_$c==
  = \ (errno1_a91tk :: Errno) (errno2_a91tm :: Errno) ->
      case errno1_a91tk
           `cast` (Foreign.C.Error.N:Errno[0] ; Foreign.C.Types.N:CInt[0]
                   :: (Errno :: *) ~R# (GHC.Int.Int32 :: *))
      of
      { GHC.Int.I32# x_i9259 ->
      case x_i9259 of wild1_X4U {
        __DEFAULT ->
          case errno2_a91tm
               `cast` (Foreign.C.Error.N:Errno[0] ; Foreign.C.Types.N:CInt[0]
                       :: (Errno :: *) ~R# (GHC.Int.Int32 :: *))
          of
          { GHC.Int.I32# x1_X92a6 ->
          case x1_X92a6 of wild3_X51 {
            __DEFAULT -> tagToEnum# @ Bool (==# wild1_X4U wild3_X51);
            -1# -> GHC.Types.False
          }
          };
        -1# -> GHC.Types.False
      }
      }

-- RHS size: {terms: 26, types: 9, coercions: 6, joins: 0/0}
Foreign.C.Error.$fEqErrno_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Errno -> Errno -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)><L,1*U(1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x_a22b [Occ=Once] :: Errno)
                 (y_a22c [Occ=Once] :: Errno) ->
                 case x_a22b
                      `cast` (Foreign.C.Error.N:Errno[0] ; Foreign.C.Types.N:CInt[0]
                              :: (Errno :: *) ~R# (GHC.Int.Int32 :: *))
                 of
                 { GHC.Int.I32# x1_i9259 [Occ=Once!] ->
                 case x1_i9259 of wild1_X4U {
                   __DEFAULT ->
                     case y_a22c
                          `cast` (Foreign.C.Error.N:Errno[0] ; Foreign.C.Types.N:CInt[0]
                                  :: (Errno :: *) ~R# (GHC.Int.Int32 :: *))
                     of
                     { GHC.Int.I32# x2_X92a6 [Occ=Once!] ->
                     case x2_X92a6 of wild3_X51 {
                       __DEFAULT ->
                         case ==# wild1_X4U wild3_X51 of {
                           __DEFAULT -> GHC.Types.True;
                           1# -> GHC.Types.False
                         };
                       -1# -> GHC.Types.True
                     }
                     };
                   -1# -> GHC.Types.True
                 }
                 }}]
Foreign.C.Error.$fEqErrno_$c/=
  = \ (eta_B2 :: Errno) (eta1_B1 :: Errno) ->
      case eta_B2
           `cast` (Foreign.C.Error.N:Errno[0] ; Foreign.C.Types.N:CInt[0]
                   :: (Errno :: *) ~R# (GHC.Int.Int32 :: *))
      of
      { GHC.Int.I32# x_i9259 ->
      case x_i9259 of wild1_X4U {
        __DEFAULT ->
          case eta1_B1
               `cast` (Foreign.C.Error.N:Errno[0] ; Foreign.C.Types.N:CInt[0]
                       :: (Errno :: *) ~R# (GHC.Int.Int32 :: *))
          of
          { GHC.Int.I32# x1_X92a6 ->
          case x1_X92a6 of wild3_X51 {
            __DEFAULT ->
              case ==# wild1_X4U wild3_X51 of {
                __DEFAULT -> GHC.Types.True;
                1# -> GHC.Types.False
              };
            -1# -> GHC.Types.True
          }
          };
        -1# -> GHC.Types.True
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Foreign.C.Error.$fEqErrno [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq Errno
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: Errno
                        Foreign.C.Error.$fEqErrno_$c==
                        Foreign.C.Error.$fEqErrno_$c/=]
Foreign.C.Error.$fEqErrno
  = GHC.Classes.C:Eq
      @ Errno
      Foreign.C.Error.$fEqErrno_$c==
      Foreign.C.Error.$fEqErrno_$c/=

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eXDEV1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eXDEV1 = GHC.Int.I32# 18#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eXDEV :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eXDEV1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eXDEV
  = Foreign.C.Error.eXDEV1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eAGAIN1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eAGAIN1 = GHC.Int.I32# 11#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eWOULDBLOCK :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eAGAIN1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eWOULDBLOCK
  = Foreign.C.Error.eAGAIN1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eUSERS1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eUSERS1 = GHC.Int.I32# 87#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eUSERS :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eUSERS1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eUSERS
  = Foreign.C.Error.eUSERS1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eTXTBSY1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eTXTBSY1 = GHC.Int.I32# 26#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eTXTBSY :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eTXTBSY1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eTXTBSY
  = Foreign.C.Error.eTXTBSY1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eTOOMANYREFS1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eTOOMANYREFS1 = GHC.Int.I32# 109#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eTOOMANYREFS :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eTOOMANYREFS1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eTOOMANYREFS
  = Foreign.C.Error.eTOOMANYREFS1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eTIMEDOUT1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eTIMEDOUT1 = GHC.Int.I32# 110#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eTIMEDOUT :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eTIMEDOUT1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eTIMEDOUT
  = Foreign.C.Error.eTIMEDOUT1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eTIME1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eTIME1 = GHC.Int.I32# 62#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eTIME :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eTIME1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eTIME
  = Foreign.C.Error.eTIME1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eSTALE1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eSTALE1 = GHC.Int.I32# 116#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eSTALE :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eSTALE1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eSTALE
  = Foreign.C.Error.eSTALE1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eSRMNT1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eSRMNT1 = GHC.Int.I32# 69#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eSRMNT :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eSRMNT1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eSRMNT
  = Foreign.C.Error.eSRMNT1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eSRCH1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eSRCH1 = GHC.Int.I32# 3#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eSRCH :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eSRCH1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eSRCH
  = Foreign.C.Error.eSRCH1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eSPIPE1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eSPIPE1 = GHC.Int.I32# 29#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eSPIPE :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eSPIPE1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eSPIPE
  = Foreign.C.Error.eSPIPE1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eSOCKTNOSUPPORT1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eSOCKTNOSUPPORT1 = GHC.Int.I32# 94#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eSOCKTNOSUPPORT :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eSOCKTNOSUPPORT1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eSOCKTNOSUPPORT
  = Foreign.C.Error.eSOCKTNOSUPPORT1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eSHUTDOWN1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eSHUTDOWN1 = GHC.Int.I32# 108#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eSHUTDOWN :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eSHUTDOWN1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eSHUTDOWN
  = Foreign.C.Error.eSHUTDOWN1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eBADRPC1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eBADRPC1 = GHC.Int.I32# -1#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eRREMOTE :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eBADRPC1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eRREMOTE
  = Foreign.C.Error.eBADRPC1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eRPCMISMATCH :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eBADRPC1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eRPCMISMATCH
  = Foreign.C.Error.eBADRPC1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eROFS1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eROFS1 = GHC.Int.I32# 30#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eROFS :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eROFS1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eROFS
  = Foreign.C.Error.eROFS1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eREMOTE1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eREMOTE1 = GHC.Int.I32# 66#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eREMOTE :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eREMOTE1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eREMOTE
  = Foreign.C.Error.eREMOTE1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eREMCHG1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eREMCHG1 = GHC.Int.I32# 78#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eREMCHG :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eREMCHG1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eREMCHG
  = Foreign.C.Error.eREMCHG1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eRANGE1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eRANGE1 = GHC.Int.I32# 34#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eRANGE :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eRANGE1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eRANGE
  = Foreign.C.Error.eRANGE1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.ePROTOTYPE1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.ePROTOTYPE1 = GHC.Int.I32# 91#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
ePROTOTYPE :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.ePROTOTYPE1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
ePROTOTYPE
  = Foreign.C.Error.ePROTOTYPE1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.ePROTONOSUPPORT1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.ePROTONOSUPPORT1 = GHC.Int.I32# 93#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
ePROTONOSUPPORT :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.ePROTONOSUPPORT1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
ePROTONOSUPPORT
  = Foreign.C.Error.ePROTONOSUPPORT1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.ePROTO1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.ePROTO1 = GHC.Int.I32# 71#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
ePROTO :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.ePROTO1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
ePROTO
  = Foreign.C.Error.ePROTO1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
ePROGUNAVAIL :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eBADRPC1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
ePROGUNAVAIL
  = Foreign.C.Error.eBADRPC1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
ePROGMISMATCH :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eBADRPC1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
ePROGMISMATCH
  = Foreign.C.Error.eBADRPC1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
ePROCUNAVAIL :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eBADRPC1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
ePROCUNAVAIL
  = Foreign.C.Error.eBADRPC1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
ePROCLIM :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eBADRPC1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
ePROCLIM
  = Foreign.C.Error.eBADRPC1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.ePIPE1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.ePIPE1 = GHC.Int.I32# 32#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
ePIPE :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.ePIPE1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
ePIPE
  = Foreign.C.Error.ePIPE1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.ePFNOSUPPORT1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.ePFNOSUPPORT1 = GHC.Int.I32# 96#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
ePFNOSUPPORT :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.ePFNOSUPPORT1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
ePFNOSUPPORT
  = Foreign.C.Error.ePFNOSUPPORT1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.ePERM1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.ePERM1 = GHC.Int.I32# 1#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
ePERM :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.ePERM1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
ePERM
  = Foreign.C.Error.ePERM1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOTSUP1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOTSUP1 = GHC.Int.I32# 95#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eOPNOTSUPP :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOTSUP1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eOPNOTSUPP
  = Foreign.C.Error.eNOTSUP1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNXIO1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNXIO1 = GHC.Int.I32# 6#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNXIO :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNXIO1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNXIO
  = Foreign.C.Error.eNXIO1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOTTY1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOTTY1 = GHC.Int.I32# 25#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOTTY :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOTTY1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOTTY
  = Foreign.C.Error.eNOTTY1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOTSUP :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOTSUP1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOTSUP
  = Foreign.C.Error.eNOTSUP1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOTSOCK1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOTSOCK1 = GHC.Int.I32# 88#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOTSOCK :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOTSOCK1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOTSOCK
  = Foreign.C.Error.eNOTSOCK1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOTEMPTY1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOTEMPTY1 = GHC.Int.I32# 39#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOTEMPTY :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOTEMPTY1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOTEMPTY
  = Foreign.C.Error.eNOTEMPTY1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOTDIR1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOTDIR1 = GHC.Int.I32# 20#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOTDIR :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOTDIR1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOTDIR
  = Foreign.C.Error.eNOTDIR1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOTCONN1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOTCONN1 = GHC.Int.I32# 107#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOTCONN :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOTCONN1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOTCONN
  = Foreign.C.Error.eNOTCONN1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOTBLK1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOTBLK1 = GHC.Int.I32# 15#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOTBLK :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOTBLK1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOTBLK
  = Foreign.C.Error.eNOTBLK1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOSYS1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOSYS1 = GHC.Int.I32# 38#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOSYS :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOSYS1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOSYS
  = Foreign.C.Error.eNOSYS1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOSTR1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOSTR1 = GHC.Int.I32# 60#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOSTR :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOSTR1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOSTR
  = Foreign.C.Error.eNOSTR1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOSR1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOSR1 = GHC.Int.I32# 63#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOSR :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOSR1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOSR
  = Foreign.C.Error.eNOSR1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOSPC1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOSPC1 = GHC.Int.I32# 28#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOSPC :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOSPC1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOSPC
  = Foreign.C.Error.eNOSPC1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOPROTOOPT1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOPROTOOPT1 = GHC.Int.I32# 92#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOPROTOOPT :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOPROTOOPT1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOPROTOOPT
  = Foreign.C.Error.eNOPROTOOPT1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNONET1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNONET1 = GHC.Int.I32# 64#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNONET :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNONET1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNONET
  = Foreign.C.Error.eNONET1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOMSG1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOMSG1 = GHC.Int.I32# 42#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOMSG :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOMSG1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOMSG
  = Foreign.C.Error.eNOMSG1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOMEM1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOMEM1 = GHC.Int.I32# 12#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOMEM :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOMEM1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOMEM
  = Foreign.C.Error.eNOMEM1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOLINK1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOLINK1 = GHC.Int.I32# 67#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOLINK :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOLINK1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOLINK
  = Foreign.C.Error.eNOLINK1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOLCK1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOLCK1 = GHC.Int.I32# 37#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOLCK :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOLCK1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOLCK
  = Foreign.C.Error.eNOLCK1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOEXEC1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOEXEC1 = GHC.Int.I32# 8#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOEXEC :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOEXEC1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOEXEC
  = Foreign.C.Error.eNOEXEC1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOENT1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOENT1 = GHC.Int.I32# 2#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOENT :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOENT1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOENT
  = Foreign.C.Error.eNOENT1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNODEV1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNODEV1 = GHC.Int.I32# 19#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNODEV :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNODEV1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNODEV
  = Foreign.C.Error.eNODEV1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNODATA1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNODATA1 = GHC.Int.I32# 61#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNODATA :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNODATA1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNODATA
  = Foreign.C.Error.eNODATA1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNOBUFS1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNOBUFS1 = GHC.Int.I32# 105#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNOBUFS :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNOBUFS1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNOBUFS
  = Foreign.C.Error.eNOBUFS1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNFILE1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNFILE1 = GHC.Int.I32# 23#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNFILE :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNFILE1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNFILE
  = Foreign.C.Error.eNFILE1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNETUNREACH1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNETUNREACH1 = GHC.Int.I32# 101#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNETUNREACH :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNETUNREACH1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNETUNREACH
  = Foreign.C.Error.eNETUNREACH1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNETRESET1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNETRESET1 = GHC.Int.I32# 102#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNETRESET :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNETRESET1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNETRESET
  = Foreign.C.Error.eNETRESET1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNETDOWN1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNETDOWN1 = GHC.Int.I32# 100#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNETDOWN :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNETDOWN1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNETDOWN
  = Foreign.C.Error.eNETDOWN1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eNAMETOOLONG1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eNAMETOOLONG1 = GHC.Int.I32# 36#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eNAMETOOLONG :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eNAMETOOLONG1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eNAMETOOLONG
  = Foreign.C.Error.eNAMETOOLONG1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eMULTIHOP1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eMULTIHOP1 = GHC.Int.I32# 72#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eMULTIHOP :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eMULTIHOP1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eMULTIHOP
  = Foreign.C.Error.eMULTIHOP1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eMSGSIZE1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eMSGSIZE1 = GHC.Int.I32# 90#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eMSGSIZE :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eMSGSIZE1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eMSGSIZE
  = Foreign.C.Error.eMSGSIZE1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eMLINK1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eMLINK1 = GHC.Int.I32# 31#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eMLINK :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eMLINK1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eMLINK
  = Foreign.C.Error.eMLINK1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eMFILE1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eMFILE1 = GHC.Int.I32# 24#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eMFILE :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eMFILE1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eMFILE
  = Foreign.C.Error.eMFILE1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eLOOP1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eLOOP1 = GHC.Int.I32# 40#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eLOOP :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eLOOP1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eLOOP
  = Foreign.C.Error.eLOOP1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eISDIR1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eISDIR1 = GHC.Int.I32# 21#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eISDIR :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eISDIR1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eISDIR
  = Foreign.C.Error.eISDIR1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eISCONN1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eISCONN1 = GHC.Int.I32# 106#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eISCONN :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eISCONN1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eISCONN
  = Foreign.C.Error.eISCONN1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eIO1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eIO1 = GHC.Int.I32# 5#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eIO :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eIO1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eIO
  = Foreign.C.Error.eIO1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eINVAL1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eINVAL1 = GHC.Int.I32# 22#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eINVAL :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eINVAL1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eINVAL
  = Foreign.C.Error.eINVAL1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eINTR1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eINTR1 = GHC.Int.I32# 4#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eINTR :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eINTR1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eINTR
  = Foreign.C.Error.eINTR1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eINPROGRESS1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eINPROGRESS1 = GHC.Int.I32# 115#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eINPROGRESS :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eINPROGRESS1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eINPROGRESS
  = Foreign.C.Error.eINPROGRESS1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eILSEQ1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eILSEQ1 = GHC.Int.I32# 84#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eILSEQ :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eILSEQ1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eILSEQ
  = Foreign.C.Error.eILSEQ1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eIDRM1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eIDRM1 = GHC.Int.I32# 43#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eIDRM :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eIDRM1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eIDRM
  = Foreign.C.Error.eIDRM1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eHOSTUNREACH1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eHOSTUNREACH1 = GHC.Int.I32# 113#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eHOSTUNREACH :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eHOSTUNREACH1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eHOSTUNREACH
  = Foreign.C.Error.eHOSTUNREACH1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eHOSTDOWN1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eHOSTDOWN1 = GHC.Int.I32# 112#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eHOSTDOWN :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eHOSTDOWN1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eHOSTDOWN
  = Foreign.C.Error.eHOSTDOWN1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eFTYPE :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eBADRPC1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eFTYPE
  = Foreign.C.Error.eBADRPC1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eFBIG1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eFBIG1 = GHC.Int.I32# 27#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eFBIG :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eFBIG1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eFBIG
  = Foreign.C.Error.eFBIG1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eFAULT1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eFAULT1 = GHC.Int.I32# 14#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eFAULT :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eFAULT1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eFAULT
  = Foreign.C.Error.eFAULT1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eEXIST1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eEXIST1 = GHC.Int.I32# 17#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eEXIST :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eEXIST1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eEXIST
  = Foreign.C.Error.eEXIST1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eDQUOT1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eDQUOT1 = GHC.Int.I32# 122#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eDQUOT :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eDQUOT1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eDQUOT
  = Foreign.C.Error.eDQUOT1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eDOM1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eDOM1 = GHC.Int.I32# 33#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eDOM :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eDOM1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eDOM
  = Foreign.C.Error.eDOM1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eDIRTY :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eBADRPC1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eDIRTY
  = Foreign.C.Error.eBADRPC1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eDESTADDRREQ1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eDESTADDRREQ1 = GHC.Int.I32# 89#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eDESTADDRREQ :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eDESTADDRREQ1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eDESTADDRREQ
  = Foreign.C.Error.eDESTADDRREQ1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eDEADLK1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eDEADLK1 = GHC.Int.I32# 35#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eDEADLK :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eDEADLK1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eDEADLK
  = Foreign.C.Error.eDEADLK1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eCONNRESET1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eCONNRESET1 = GHC.Int.I32# 104#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eCONNRESET :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eCONNRESET1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eCONNRESET
  = Foreign.C.Error.eCONNRESET1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eCONNREFUSED1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eCONNREFUSED1 = GHC.Int.I32# 111#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eCONNREFUSED :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eCONNREFUSED1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eCONNREFUSED
  = Foreign.C.Error.eCONNREFUSED1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eCONNABORTED1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eCONNABORTED1 = GHC.Int.I32# 103#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eCONNABORTED :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eCONNABORTED1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eCONNABORTED
  = Foreign.C.Error.eCONNABORTED1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eCOMM1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eCOMM1 = GHC.Int.I32# 70#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eCOMM :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eCOMM1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eCOMM
  = Foreign.C.Error.eCOMM1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eCHILD1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eCHILD1 = GHC.Int.I32# 10#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eCHILD :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eCHILD1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eCHILD
  = Foreign.C.Error.eCHILD1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eBUSY1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eBUSY1 = GHC.Int.I32# 16#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eBUSY :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eBUSY1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eBUSY
  = Foreign.C.Error.eBUSY1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eBADRPC :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eBADRPC1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eBADRPC
  = Foreign.C.Error.eBADRPC1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eBADMSG1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eBADMSG1 = GHC.Int.I32# 74#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eBADMSG :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eBADMSG1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eBADMSG
  = Foreign.C.Error.eBADMSG1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eBADF1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eBADF1 = GHC.Int.I32# 9#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eBADF :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eBADF1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eBADF
  = Foreign.C.Error.eBADF1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eALREADY1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eALREADY1 = GHC.Int.I32# 114#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eALREADY :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eALREADY1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eALREADY
  = Foreign.C.Error.eALREADY1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eAGAIN :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eAGAIN1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eAGAIN
  = Foreign.C.Error.eAGAIN1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eAFNOSUPPORT1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eAFNOSUPPORT1 = GHC.Int.I32# 97#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eAFNOSUPPORT :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eAFNOSUPPORT1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eAFNOSUPPORT
  = Foreign.C.Error.eAFNOSUPPORT1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eADV1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eADV1 = GHC.Int.I32# 68#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eADV :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eADV1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eADV
  = Foreign.C.Error.eADV1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eADDRNOTAVAIL1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eADDRNOTAVAIL1 = GHC.Int.I32# 99#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eADDRNOTAVAIL :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eADDRNOTAVAIL1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eADDRNOTAVAIL
  = Foreign.C.Error.eADDRNOTAVAIL1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eADDRINUSE1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eADDRINUSE1 = GHC.Int.I32# 98#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eADDRINUSE :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eADDRINUSE1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eADDRINUSE
  = Foreign.C.Error.eADDRINUSE1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eACCES1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eACCES1 = GHC.Int.I32# 13#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eACCES :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eACCES1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eACCES
  = Foreign.C.Error.eACCES1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.e2BIG1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.e2BIG1 = GHC.Int.I32# 7#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
e2BIG :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.e2BIG1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
e2BIG
  = Foreign.C.Error.e2BIG1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.eOK1 :: GHC.Int.Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Foreign.C.Error.eOK1 = GHC.Int.I32# 0#

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
eOK :: Errno
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.eOK1
               `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
                       :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))}]
eOK
  = Foreign.C.Error.eOK1
    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (Foreign.C.Error.N:Errno[0])
            :: (GHC.Int.Int32 :: *) ~R# (Errno :: *))

-- RHS size: {terms: 212, types: 83, coercions: 4, joins: 0/0}
Foreign.C.Error.$werrnoToIOError [InlPrag=NOUSERINLINE[0]]
  :: String -> Int# -> Maybe Handle -> Maybe String -> IOError
[GblId, Arity=4, Str=<L,U><S,U><L,U><L,U>, Unf=OtherCon []]
Foreign.C.Error.$werrnoToIOError
  = \ (w_s92HU :: String)
      (ww_s92I0 :: Int#)
      (w1_s92HW :: Maybe Handle)
      (w2_s92HX :: Maybe String) ->
      case runRW#
             @ ('TupleRep '['TupleRep '[], 'LiftedRep])
             @ (# State# RealWorld, IOException #)
             (\ (s_i91ZD [OS=OneShot] :: State# RealWorld) ->
                case noDuplicate# @ RealWorld s_i91ZD of s'_i91ZE { __DEFAULT ->
                case {__pkg_ccall base-4.11.0.0 Int#
                           -> State# RealWorld -> (# State# RealWorld, Addr# #)}_d924i
                       ww_s92I0 s'_i91ZE
                of
                { (# ds_d924g, ds1_d924f #) ->
                case (GHC.IO.Encoding.getForeignEncoding
                      `cast` (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R
                              :: (IO GHC.IO.Encoding.Types.TextEncoding :: *)
                                 ~R# (State# RealWorld
                                      -> (# State# RealWorld,
                                            GHC.IO.Encoding.Types.TextEncoding #) :: *)))
                       ds_d924g
                of
                { (# ipv_X7IIW, ipv1_X7IIY #) ->
                case GHC.Foreign.$wpeekCString ipv1_X7IIY ds1_d924f ipv_X7IIW of
                { (# ipv2_X7IJ1, ipv3_X7IJ3 #) ->
                (# ipv2_X7IJ1,
                   GHC.IO.Exception.IOError
                     w1_s92HW
                     (case ww_s92I0 of {
                        __DEFAULT -> GHC.IO.Exception.OtherError;
                        1# -> GHC.IO.Exception.PermissionDenied;
                        2# -> GHC.IO.Exception.NoSuchThing;
                        3# -> GHC.IO.Exception.NoSuchThing;
                        4# -> GHC.IO.Exception.Interrupted;
                        5# -> GHC.IO.Exception.HardwareFault;
                        6# -> GHC.IO.Exception.NoSuchThing;
                        7# -> GHC.IO.Exception.ResourceExhausted;
                        8# -> GHC.IO.Exception.InvalidArgument;
                        9# -> GHC.IO.Exception.InvalidArgument;
                        10# -> GHC.IO.Exception.NoSuchThing;
                        11# -> GHC.IO.Exception.ResourceExhausted;
                        12# -> GHC.IO.Exception.ResourceExhausted;
                        13# -> GHC.IO.Exception.PermissionDenied;
                        15# -> GHC.IO.Exception.InvalidArgument;
                        16# -> GHC.IO.Exception.ResourceBusy;
                        17# -> GHC.IO.Exception.AlreadyExists;
                        18# -> GHC.IO.Exception.UnsupportedOperation;
                        19# -> GHC.IO.Exception.UnsupportedOperation;
                        20# -> GHC.IO.Exception.InappropriateType;
                        21# -> GHC.IO.Exception.InappropriateType;
                        22# -> GHC.IO.Exception.InvalidArgument;
                        23# -> GHC.IO.Exception.ResourceExhausted;
                        24# -> GHC.IO.Exception.ResourceExhausted;
                        25# -> GHC.IO.Exception.IllegalOperation;
                        26# -> GHC.IO.Exception.ResourceBusy;
                        27# -> GHC.IO.Exception.PermissionDenied;
                        28# -> GHC.IO.Exception.ResourceExhausted;
                        29# -> GHC.IO.Exception.UnsupportedOperation;
                        30# -> GHC.IO.Exception.PermissionDenied;
                        31# -> GHC.IO.Exception.ResourceExhausted;
                        32# -> GHC.IO.Exception.ResourceVanished;
                        33# -> GHC.IO.Exception.InvalidArgument;
                        34# -> GHC.IO.Exception.UnsupportedOperation;
                        35# -> GHC.IO.Exception.ResourceBusy;
                        36# -> GHC.IO.Exception.InvalidArgument;
                        37# -> GHC.IO.Exception.ResourceExhausted;
                        38# -> GHC.IO.Exception.UnsupportedOperation;
                        39# -> GHC.IO.Exception.UnsatisfiedConstraints;
                        40# -> GHC.IO.Exception.InvalidArgument;
                        42# -> GHC.IO.Exception.NoSuchThing;
                        43# -> GHC.IO.Exception.ResourceVanished;
                        60# -> GHC.IO.Exception.InvalidArgument;
                        61# -> GHC.IO.Exception.NoSuchThing;
                        62# -> GHC.IO.Exception.TimeExpired;
                        63# -> GHC.IO.Exception.ResourceExhausted;
                        64# -> GHC.IO.Exception.NoSuchThing;
                        66# -> GHC.IO.Exception.IllegalOperation;
                        67# -> GHC.IO.Exception.ResourceVanished;
                        69# -> GHC.IO.Exception.UnsatisfiedConstraints;
                        70# -> GHC.IO.Exception.ResourceVanished;
                        71# -> GHC.IO.Exception.ProtocolError;
                        72# -> GHC.IO.Exception.UnsupportedOperation;
                        74# -> GHC.IO.Exception.InappropriateType;
                        78# -> GHC.IO.Exception.ResourceVanished;
                        84# -> GHC.IO.Exception.InvalidArgument;
                        87# -> GHC.IO.Exception.ResourceExhausted;
                        88# -> GHC.IO.Exception.InvalidArgument;
                        89# -> GHC.IO.Exception.InvalidArgument;
                        90# -> GHC.IO.Exception.ResourceExhausted;
                        91# -> GHC.IO.Exception.ProtocolError;
                        92# -> GHC.IO.Exception.UnsupportedOperation;
                        93# -> GHC.IO.Exception.ProtocolError;
                        94# -> GHC.IO.Exception.UnsupportedOperation;
                        95# -> GHC.IO.Exception.UnsupportedOperation;
                        96# -> GHC.IO.Exception.UnsupportedOperation;
                        97# -> GHC.IO.Exception.UnsupportedOperation;
                        98# -> GHC.IO.Exception.ResourceBusy;
                        99# -> GHC.IO.Exception.UnsupportedOperation;
                        100# -> GHC.IO.Exception.ResourceVanished;
                        101# -> GHC.IO.Exception.NoSuchThing;
                        102# -> GHC.IO.Exception.ResourceVanished;
                        104# -> GHC.IO.Exception.ResourceVanished;
                        105# -> GHC.IO.Exception.ResourceExhausted;
                        106# -> GHC.IO.Exception.AlreadyExists;
                        107# -> GHC.IO.Exception.InvalidArgument;
                        108# -> GHC.IO.Exception.IllegalOperation;
                        109# -> GHC.IO.Exception.ResourceExhausted;
                        110# -> GHC.IO.Exception.TimeExpired;
                        111# -> GHC.IO.Exception.NoSuchThing;
                        112# -> GHC.IO.Exception.NoSuchThing;
                        113# -> GHC.IO.Exception.NoSuchThing;
                        114# -> GHC.IO.Exception.AlreadyExists;
                        115# -> GHC.IO.Exception.AlreadyExists;
                        116# -> GHC.IO.Exception.ResourceVanished;
                        122# -> GHC.IO.Exception.PermissionDenied
                      })
                     w_s92HU
                     ipv3_X7IJ3
                     (GHC.Base.Just
                        @ CInt
                        ((GHC.Int.I32# ww_s92I0)
                         `cast` (Sym (Foreign.C.Types.N:CInt[0])
                                 :: (GHC.Int.Int32 :: *) ~R# (CInt :: *))))
                     w2_s92HX #)
                }
                }
                }
                })
      of
      { (# ipv_i91ZH, ipv1_i91ZI #) ->
      ipv1_i91ZI
      }

-- RHS size: {terms: 12, types: 8, coercions: 3, joins: 0/0}
errnoToIOError [InlPrag=NOUSERINLINE[0]]
  :: String -> Errno -> Maybe Handle -> Maybe String -> IOError
[GblId,
 Arity=4,
 Str=<L,U><S(S),1*U(U)><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s92HU [Occ=Once] :: String)
                 (w1_s92HV [Occ=Once] :: Errno)
                 (w2_s92HW [Occ=Once] :: Maybe Handle)
                 (w3_s92HX [Occ=Once] :: Maybe String) ->
                 case w1_s92HV
                      `cast` (Foreign.C.Error.N:Errno[0] ; Foreign.C.Types.N:CInt[0]
                              :: (Errno :: *) ~R# (GHC.Int.Int32 :: *))
                 of
                 { GHC.Int.I32# ww1_s92I0 [Occ=Once] ->
                 Foreign.C.Error.$werrnoToIOError
                   w_s92HU ww1_s92I0 w2_s92HW w3_s92HX
                 }}]
errnoToIOError
  = \ (w_s92HU :: String)
      (w1_s92HV :: Errno)
      (w2_s92HW :: Maybe Handle)
      (w3_s92HX :: Maybe String) ->
      case w1_s92HV
           `cast` (Foreign.C.Error.N:Errno[0] ; Foreign.C.Types.N:CInt[0]
                   :: (Errno :: *) ~R# (GHC.Int.Int32 :: *))
      of
      { GHC.Int.I32# ww1_s92I0 ->
      Foreign.C.Error.$werrnoToIOError
        w_s92HU ww1_s92I0 w2_s92HW w3_s92HX
      }

-- RHS size: {terms: 12, types: 10, coercions: 0, joins: 0/0}
Foreign.C.Error.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     String -> Int# -> State# RealWorld -> (# State# RealWorld, a #)
[GblId, Arity=3, Str=<B,U><B,U><B,U>x, Unf=OtherCon []]
Foreign.C.Error.$wlvl
  = \ (@ a_s92I3)
      (w_s92I4 :: String)
      (ww_s92I9 :: Int#)
      (w1_s92I6 :: State# RealWorld) ->
      raiseIO#
        @ GHC.Exception.SomeException
        @ a_s92I3
        (GHC.IO.Exception.$fExceptionIOException_$ctoException
           (Foreign.C.Error.$werrnoToIOError
              w_s92I4
              ww_s92I9
              (GHC.Base.Nothing @ Handle)
              (GHC.Base.Nothing @ String)))
        w1_s92I6

-- RHS size: {terms: 12, types: 17, coercions: 0, joins: 0/0}
Foreign.C.Error.throwErrno1
  :: forall a.
     String -> State# RealWorld -> (# State# RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []]
Foreign.C.Error.throwErrno1
  = \ (@ a_a91Tm)
      (loc_a91tR :: String)
      (s_X7IIv :: State# RealWorld) ->
      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
             s_X7IIv
      of
      { (# ds_d924s, ds1_d924r #) ->
      Foreign.C.Error.$wlvl
        @ a_a91Tm loc_a91tR (narrow32Int# ds1_d924r) ds_d924s
      }

-- RHS size: {terms: 1, types: 0, coercions: 8, joins: 0/0}
throwErrno :: forall a. String -> IO a
[GblId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.throwErrno1
               `cast` (forall (a :: <*>_N).
                       <String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           String -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. String -> IO a :: *))}]
throwErrno
  = Foreign.C.Error.throwErrno1
    `cast` (forall (a :: <*>_N).
            <String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                String -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. String -> IO a :: *))

-- RHS size: {terms: 18, types: 22, coercions: 2, joins: 0/0}
Foreign.C.Error.throwErrnoIf1
  :: forall a.
     (a -> Bool)
     -> String -> IO a -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,1*C1(U)><L,U><C(S),1*C1(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a91Tw)
                 (pred_a91tT [Occ=Once!] :: a_a91Tw -> Bool)
                 (loc_a91tU [Occ=Once] :: String)
                 (f_a91tV [Occ=Once] :: IO a_a91Tw)
                 (s_X7IIB [Occ=Once] :: State# RealWorld) ->
                 case (f_a91tV
                       `cast` (GHC.Types.N:IO[0] <a_a91Tw>_R
                               :: (IO a_a91Tw :: *)
                                  ~R# (State# RealWorld -> (# State# RealWorld, a_a91Tw #) :: *)))
                        s_X7IIB
                 of
                 { (# ipv_i7IAy [Occ=Once*], ipv1_i7IAz #) ->
                 case pred_a91tT ipv1_i7IAz of {
                   False -> (# ipv_i7IAy, ipv1_i7IAz #);
                   True -> Foreign.C.Error.throwErrno1 @ a_a91Tw loc_a91tU ipv_i7IAy
                 }
                 }}]
Foreign.C.Error.throwErrnoIf1
  = \ (@ a_a91Tw)
      (pred_a91tT :: a_a91Tw -> Bool)
      (loc_a91tU :: String)
      (f_a91tV :: IO a_a91Tw)
      (s_X7IIB :: State# RealWorld) ->
      case (f_a91tV
            `cast` (GHC.Types.N:IO[0] <a_a91Tw>_R
                    :: (IO a_a91Tw :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, a_a91Tw #) :: *)))
             s_X7IIB
      of ds1_i7IAw
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case pred_a91tT ipv1_i7IAz of {
        False -> ds1_i7IAw;
        True -> Foreign.C.Error.throwErrno1 @ a_a91Tw loc_a91tU ipv_i7IAy
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
throwErrnoIf :: forall a. (a -> Bool) -> String -> IO a -> IO a
[GblId,
 Arity=4,
 Str=<L,1*C1(U)><L,U><C(S),1*C1(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.throwErrnoIf1
               `cast` (forall (a :: <*>_N).
                       <a -> Bool>_R
                       ->_R <String>_R
                       ->_R <IO a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           (a -> Bool)
                           -> String
                           -> IO a
                           -> State# RealWorld
                           -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. (a -> Bool) -> String -> IO a -> IO a :: *))}]
throwErrnoIf
  = Foreign.C.Error.throwErrnoIf1
    `cast` (forall (a :: <*>_N).
            <a -> Bool>_R
            ->_R <String>_R
            ->_R <IO a>_R
            ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                (a -> Bool)
                -> String
                -> IO a
                -> State# RealWorld
                -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. (a -> Bool) -> String -> IO a -> IO a :: *))

-- RHS size: {terms: 27, types: 48, coercions: 2, joins: 0/0}
Foreign.C.Error.throwErrnoIf_1
  :: forall a.
     (a -> Bool)
     -> String -> IO a -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=4,
 Str=<L,1*C1(U)><L,U><C(S(SL)),1*C1(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a91TH)
                 (pred_a91tX [Occ=Once!] :: a_a91TH -> Bool)
                 (loc_a91tY [Occ=Once] :: String)
                 (f_a91tZ [Occ=Once] :: IO a_a91TH)
                 (eta1_i928W [Occ=Once] :: State# RealWorld) ->
                 case (f_a91tZ
                       `cast` (GHC.Types.N:IO[0] <a_a91TH>_R
                               :: (IO a_a91TH :: *)
                                  ~R# (State# RealWorld -> (# State# RealWorld, a_a91TH #) :: *)))
                        eta1_i928W
                 of
                 { (# ipv_i7IAy [Occ=Once*], ipv1_i7IAz [Occ=Once] #) ->
                 case pred_a91tX ipv1_i7IAz of {
                   False -> (# ipv_i7IAy, GHC.Tuple.() #);
                   True ->
                     case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
                            ipv_i7IAy
                     of
                     { (# ds_d924s [Occ=Once], ds2_d924r [Occ=Once] #) ->
                     case Foreign.C.Error.$wlvl
                            @ a_a91TH loc_a91tY (narrow32Int# ds2_d924r) ds_d924s
                     of {
                     }
                     }
                 }
                 }}]
Foreign.C.Error.throwErrnoIf_1
  = \ (@ a_a91TH)
      (pred_a91tX :: a_a91TH -> Bool)
      (loc_a91tY :: String)
      (f_a91tZ :: IO a_a91TH)
      (eta1_i928W :: State# RealWorld) ->
      case (f_a91tZ
            `cast` (GHC.Types.N:IO[0] <a_a91TH>_R
                    :: (IO a_a91TH :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, a_a91TH #) :: *)))
             eta1_i928W
      of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case pred_a91tX ipv1_i7IAz of {
        False -> (# ipv_i7IAy, GHC.Tuple.() #);
        True ->
          case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
                 ipv_i7IAy
          of
          { (# ds_d924s, ds2_d924r #) ->
          case Foreign.C.Error.$wlvl
                 @ a_a91TH loc_a91tY (narrow32Int# ds2_d924r) ds_d924s
          of wild2_00 {
          }
          }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
throwErrnoIf_ :: forall a. (a -> Bool) -> String -> IO a -> IO ()
[GblId,
 Arity=4,
 Str=<L,1*C1(U)><L,U><C(S(SL)),1*C1(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.throwErrnoIf_1
               `cast` (forall (a :: <*>_N).
                       <a -> Bool>_R
                       ->_R <String>_R
                       ->_R <IO a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           (a -> Bool)
                           -> String
                           -> IO a
                           -> State# RealWorld
                           -> (# State# RealWorld, () #) :: *)
                          ~R# (forall a. (a -> Bool) -> String -> IO a -> IO () :: *))}]
throwErrnoIf_
  = Foreign.C.Error.throwErrnoIf_1
    `cast` (forall (a :: <*>_N).
            <a -> Bool>_R
            ->_R <String>_R
            ->_R <IO a>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                (a -> Bool)
                -> String
                -> IO a
                -> State# RealWorld
                -> (# State# RealWorld, () #) :: *)
               ~R# (forall a. (a -> Bool) -> String -> IO a -> IO () :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Foreign.C.Error.throwErrnoIfMinus2 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Foreign.C.Error.throwErrnoIfMinus2 = 1

-- RHS size: {terms: 36, types: 54, coercions: 10, joins: 0/1}
throwErrnoIfMinus1_
  :: forall a. (Eq a, Num a) => String -> IO a -> IO ()
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(A,A,A,1*C1(U),A,A,1*C1(U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 60] 211 60}]
throwErrnoIfMinus1_
  = \ (@ a_a91TT)
      ($dEq_a91TV :: Eq a_a91TT)
      ($dNum_a91TW :: Num a_a91TT) ->
      let {
        ds_s92fi :: a_a91TT
        [LclId]
        ds_s92fi
          = negate
              @ a_a91TT
              $dNum_a91TW
              (fromInteger
                 @ a_a91TT $dNum_a91TW Foreign.C.Error.throwErrnoIfMinus2) } in
      (\ (loc_X91Ck :: String)
         (f_X91Cm :: IO a_a91TT)
         (eta1_i928W :: State# RealWorld) ->
         case (f_X91Cm
               `cast` (GHC.Types.N:IO[0] <a_a91TT>_R
                       :: (IO a_a91TT :: *)
                          ~R# (State# RealWorld -> (# State# RealWorld, a_a91TT #) :: *)))
                eta1_i928W
         of
         { (# ipv_i7IAy, ipv1_i7IAz #) ->
         case == @ a_a91TT $dEq_a91TV ipv1_i7IAz ds_s92fi of {
           False -> (# ipv_i7IAy, GHC.Tuple.() #);
           True ->
             case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
                    ipv_i7IAy
             of
             { (# ds2_d924s, ds3_d924r #) ->
             case Foreign.C.Error.$wlvl
                    @ a_a91TT loc_X91Ck (narrow32Int# ds3_d924r) ds2_d924s
             of wild2_00 {
             }
             }
         }
         })
      `cast` (<String>_R
              ->_R <IO a_a91TT>_R
              ->_R Sym (GHC.Types.N:IO[0] <()>_R)
              :: (String
                  -> IO a_a91TT
                  -> State# RealWorld
                  -> (# State# RealWorld, () #) :: *)
                 ~R# (String -> IO a_a91TT -> IO () :: *))

-- RHS size: {terms: 27, types: 28, coercions: 10, joins: 0/1}
throwErrnoIfMinus1
  :: forall a. (Eq a, Num a) => String -> IO a -> IO a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(A,A,A,1*C1(U),A,A,1*C1(U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 60] 190 60}]
throwErrnoIfMinus1
  = \ (@ a_a91U5)
      ($dEq_a91U7 :: Eq a_a91U5)
      ($dNum_a91U8 :: Num a_a91U5) ->
      let {
        ds_s92fg :: a_a91U5
        [LclId]
        ds_s92fg
          = negate
              @ a_a91U5
              $dNum_a91U8
              (fromInteger
                 @ a_a91U5 $dNum_a91U8 Foreign.C.Error.throwErrnoIfMinus2) } in
      (\ (loc_X91Cg :: String)
         (f_X91Ci :: IO a_a91U5)
         (s_X7IIB :: State# RealWorld) ->
         case (f_X91Ci
               `cast` (GHC.Types.N:IO[0] <a_a91U5>_R
                       :: (IO a_a91U5 :: *)
                          ~R# (State# RealWorld -> (# State# RealWorld, a_a91U5 #) :: *)))
                s_X7IIB
         of ds1_i7IAw
         { (# ipv_i7IAy, ipv1_i7IAz #) ->
         case == @ a_a91U5 $dEq_a91U7 ipv1_i7IAz ds_s92fg of {
           False -> ds1_i7IAw;
           True -> Foreign.C.Error.throwErrno1 @ a_a91U5 loc_X91Cg ipv_i7IAy
         }
         })
      `cast` (<String>_R
              ->_R <IO a_a91U5>_R
              ->_R Sym (GHC.Types.N:IO[0] <a_a91U5>_R)
              :: (String
                  -> IO a_a91U5
                  -> State# RealWorld
                  -> (# State# RealWorld, a_a91U5 #) :: *)
                 ~R# (String -> IO a_a91U5 -> IO a_a91U5 :: *))

-- RHS size: {terms: 21, types: 27, coercions: 3, joins: 0/0}
Foreign.C.Error.throwErrnoIfNull1
  :: forall a.
     String
     -> IO (Ptr a) -> State# RealWorld -> (# State# RealWorld, Ptr a #)
[GblId,
 Arity=3,
 Str=<L,U><C(S(LS(S))),1*C1(U(U,U(U)))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a91Uh)
                 (loc_X91Kw [Occ=Once] :: String)
                 (f_X91Kz [Occ=Once] :: IO (Ptr a_a91Uh))
                 (s_X7IQY [Occ=Once] :: State# RealWorld) ->
                 case (f_X91Kz
                       `cast` (GHC.Types.N:IO[0] <Ptr a_a91Uh>_R
                               :: (IO (Ptr a_a91Uh) :: *)
                                  ~R# (State# RealWorld
                                       -> (# State# RealWorld, Ptr a_a91Uh #) :: *)))
                        s_X7IQY
                 of
                 { (# ipv_i7IAy [Occ=Once*], ipv1_i7IAz [Occ=Once!] #) ->
                 case ipv1_i7IAz of wild_i7JfF { GHC.Ptr.Ptr a1_i7JfH [Occ=Once] ->
                 case eqAddr# a1_i7JfH __NULL of {
                   __DEFAULT -> (# ipv_i7IAy, wild_i7JfF #);
                   1# ->
                     Foreign.C.Error.throwErrno1 @ (Ptr a_a91Uh) loc_X91Kw ipv_i7IAy
                 }
                 }
                 }}]
Foreign.C.Error.throwErrnoIfNull1
  = \ (@ a_a91Uh)
      (loc_X91Kw :: String)
      (f_X91Kz :: IO (Ptr a_a91Uh))
      (s_X7IQY :: State# RealWorld) ->
      case (f_X91Kz
            `cast` (GHC.Types.N:IO[0] <Ptr a_a91Uh>_R
                    :: (IO (Ptr a_a91Uh) :: *)
                       ~R# (State# RealWorld
                            -> (# State# RealWorld, Ptr a_a91Uh #) :: *)))
             s_X7IQY
      of ds1_i7IAw
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case ipv1_i7IAz of { GHC.Ptr.Ptr a1_i7JfH ->
      case eqAddr# a1_i7JfH __NULL of {
        __DEFAULT -> ds1_i7IAw;
        1# ->
          Foreign.C.Error.throwErrno1 @ (Ptr a_a91Uh) loc_X91Kw ipv_i7IAy
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
throwErrnoIfNull :: forall a. String -> IO (Ptr a) -> IO (Ptr a)
[GblId,
 Arity=3,
 Str=<L,U><C(S(LS(S))),1*C1(U(U,U(U)))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.throwErrnoIfNull1
               `cast` (forall (a :: <*>_N).
                       <String>_R
                       ->_R <IO (Ptr a)>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
                       :: (forall a.
                           String
                           -> IO (Ptr a)
                           -> State# RealWorld
                           -> (# State# RealWorld, Ptr a #) :: *)
                          ~R# (forall a. String -> IO (Ptr a) -> IO (Ptr a) :: *))}]
throwErrnoIfNull
  = Foreign.C.Error.throwErrnoIfNull1
    `cast` (forall (a :: <*>_N).
            <String>_R
            ->_R <IO (Ptr a)>_R
            ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
            :: (forall a.
                String
                -> IO (Ptr a)
                -> State# RealWorld
                -> (# State# RealWorld, Ptr a #) :: *)
               ~R# (forall a. String -> IO (Ptr a) -> IO (Ptr a) :: *))

Rec {
-- RHS size: {terms: 32, types: 35, coercions: 2, joins: 0/0}
Foreign.C.Error.throwErrnoIfMinus1Retry2 [Occ=LoopBreaker]
  :: forall a.
     (a -> Bool)
     -> String -> IO a -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=4,
 Str=<L,C(U)><L,U><C(S),C(U(U,U))><S,U>,
 Unf=OtherCon []]
Foreign.C.Error.throwErrnoIfMinus1Retry2
  = \ (@ a_a91Uo)
      (pred_a91u0 :: a_a91Uo -> Bool)
      (loc_a91u1 :: String)
      (f_a91u2 :: IO a_a91Uo)
      (s_X7IIR :: State# RealWorld) ->
      case (f_a91u2
            `cast` (GHC.Types.N:IO[0] <a_a91Uo>_R
                    :: (IO a_a91Uo :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, a_a91Uo #) :: *)))
             s_X7IIR
      of ds1_i7IAw
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case pred_a91u0 ipv1_i7IAz of {
        False -> ds1_i7IAw;
        True ->
          case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
                 ipv_i7IAy
          of
          { (# ds_d924s, ds2_d924r #) ->
          case narrow32Int# ds2_d924r of {
            __DEFAULT ->
              Foreign.C.Error.throwErrno1 @ a_a91Uo loc_a91u1 ds_d924s;
            4# ->
              Foreign.C.Error.throwErrnoIfMinus1Retry2
                @ a_a91Uo pred_a91u0 loc_a91u1 f_a91u2 ds_d924s
          }
          }
      }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
throwErrnoIfRetry
  :: forall a. (a -> Bool) -> String -> IO a -> IO a
[GblId,
 Arity=4,
 Str=<L,C(U)><L,U><C(S),C(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.throwErrnoIfMinus1Retry2
               `cast` (forall (a :: <*>_N).
                       <a -> Bool>_R
                       ->_R <String>_R
                       ->_R <IO a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           (a -> Bool)
                           -> String
                           -> IO a
                           -> State# RealWorld
                           -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. (a -> Bool) -> String -> IO a -> IO a :: *))}]
throwErrnoIfRetry
  = Foreign.C.Error.throwErrnoIfMinus1Retry2
    `cast` (forall (a :: <*>_N).
            <a -> Bool>_R
            ->_R <String>_R
            ->_R <IO a>_R
            ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                (a -> Bool)
                -> String
                -> IO a
                -> State# RealWorld
                -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. (a -> Bool) -> String -> IO a -> IO a :: *))

-- RHS size: {terms: 15, types: 28, coercions: 0, joins: 0/0}
Foreign.C.Error.throwErrnoIfRetry_1
  :: forall a.
     (a -> Bool)
     -> String -> IO a -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=4,
 Str=<L,C(U)><L,U><C(S),C(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a91UG)
                 (pred_a91ub [Occ=Once] :: a_a91UG -> Bool)
                 (loc_a91uc [Occ=Once] :: String)
                 (f_a91ud [Occ=Once] :: IO a_a91UG)
                 (eta1_i928W [Occ=Once] :: State# RealWorld) ->
                 case Foreign.C.Error.throwErrnoIfMinus1Retry2
                        @ a_a91UG pred_a91ub loc_a91uc f_a91ud eta1_i928W
                 of
                 { (# ipv_i928Z [Occ=Once], _ [Occ=Dead] #) ->
                 (# ipv_i928Z, GHC.Tuple.() #)
                 }}]
Foreign.C.Error.throwErrnoIfRetry_1
  = \ (@ a_a91UG)
      (pred_a91ub :: a_a91UG -> Bool)
      (loc_a91uc :: String)
      (f_a91ud :: IO a_a91UG)
      (eta1_i928W :: State# RealWorld) ->
      case Foreign.C.Error.throwErrnoIfMinus1Retry2
             @ a_a91UG pred_a91ub loc_a91uc f_a91ud eta1_i928W
      of
      { (# ipv_i928Z, ipv1_i9290 #) ->
      (# ipv_i928Z, GHC.Tuple.() #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
throwErrnoIfRetry_
  :: forall a. (a -> Bool) -> String -> IO a -> IO ()
[GblId,
 Arity=4,
 Str=<L,C(U)><L,U><C(S),C(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.throwErrnoIfRetry_1
               `cast` (forall (a :: <*>_N).
                       <a -> Bool>_R
                       ->_R <String>_R
                       ->_R <IO a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           (a -> Bool)
                           -> String
                           -> IO a
                           -> State# RealWorld
                           -> (# State# RealWorld, () #) :: *)
                          ~R# (forall a. (a -> Bool) -> String -> IO a -> IO () :: *))}]
throwErrnoIfRetry_
  = Foreign.C.Error.throwErrnoIfRetry_1
    `cast` (forall (a :: <*>_N).
            <a -> Bool>_R
            ->_R <String>_R
            ->_R <IO a>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                (a -> Bool)
                -> String
                -> IO a
                -> State# RealWorld
                -> (# State# RealWorld, () #) :: *)
               ~R# (forall a. (a -> Bool) -> String -> IO a -> IO () :: *))

-- RHS size: {terms: 28, types: 37, coercions: 8, joins: 0/2}
throwErrnoIfMinus1Retry_
  :: forall a. (Eq a, Num a) => String -> IO a -> IO ()
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(A,A,A,1*C1(U),A,A,1*C1(U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 60] 200 60}]
throwErrnoIfMinus1Retry_
  = \ (@ a_a91UP)
      ($dEq_a91UR :: Eq a_a91UP)
      ($dNum_a91US :: Num a_a91UP) ->
      let {
        ds_s92fe :: a_a91UP
        [LclId]
        ds_s92fe
          = negate
              @ a_a91UP
              $dNum_a91US
              (fromInteger
                 @ a_a91UP $dNum_a91US Foreign.C.Error.throwErrnoIfMinus2) } in
      let {
        pred_s92fd [Dmd=<L,C(U)>] :: a_a91UP -> Bool
        [LclId,
         Arity=1,
         Str=<L,U>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
                 Tmpl= \ (ds1_d923q [Occ=Once] :: a_a91UP) ->
                         == @ a_a91UP $dEq_a91UR ds1_d923q ds_s92fe}]
        pred_s92fd
          = \ (ds1_d923q :: a_a91UP) ->
              == @ a_a91UP $dEq_a91UR ds1_d923q ds_s92fe } in
      (\ (loc_X91CO :: String)
         (f_X91CQ :: IO a_a91UP)
         (eta1_i928W :: State# RealWorld) ->
         case Foreign.C.Error.throwErrnoIfMinus1Retry2
                @ a_a91UP pred_s92fd loc_X91CO f_X91CQ eta1_i928W
         of
         { (# ipv_i928Z, ipv1_i9290 #) ->
         (# ipv_i928Z, GHC.Tuple.() #)
         })
      `cast` (<String>_R
              ->_R <IO a_a91UP>_R
              ->_R Sym (GHC.Types.N:IO[0] <()>_R)
              :: (String
                  -> IO a_a91UP
                  -> State# RealWorld
                  -> (# State# RealWorld, () #) :: *)
                 ~R# (String -> IO a_a91UP -> IO () :: *))

-- RHS size: {terms: 15, types: 12, coercions: 0, joins: 0/1}
Foreign.C.Error.throwErrnoIfMinus1Retry1
  :: forall a.
     (Eq a, Num a) =>
     String -> IO a -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(A,A,A,1*C1(U),A,A,1*C1(U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 60] 140 60}]
Foreign.C.Error.throwErrnoIfMinus1Retry1
  = \ (@ a_a91V1)
      ($dEq_a91V3 :: Eq a_a91V1)
      ($dNum_a91V4 :: Num a_a91V1) ->
      Foreign.C.Error.throwErrnoIfMinus1Retry2
        @ a_a91V1
        (let {
           ds_s92fa :: a_a91V1
           [LclId]
           ds_s92fa
             = negate
                 @ a_a91V1
                 $dNum_a91V4
                 (fromInteger
                    @ a_a91V1 $dNum_a91V4 Foreign.C.Error.throwErrnoIfMinus2) } in
         \ (ds1_d923t :: a_a91V1) ->
           == @ a_a91V1 $dEq_a91V3 ds1_d923t ds_s92fa)

-- RHS size: {terms: 1, types: 0, coercions: 17, joins: 0/0}
throwErrnoIfMinus1Retry
  :: forall a. (Eq a, Num a) => String -> IO a -> IO a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(A,A,A,1*C1(U),A,A,1*C1(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.throwErrnoIfMinus1Retry1
               `cast` (forall (a :: <*>_N).
                       <Eq a>_R
                       ->_R <Num a>_R
                       ->_R <String>_R
                       ->_R <IO a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           (Eq a, Num a) =>
                           String
                           -> IO a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. (Eq a, Num a) => String -> IO a -> IO a :: *))}]
throwErrnoIfMinus1Retry
  = Foreign.C.Error.throwErrnoIfMinus1Retry1
    `cast` (forall (a :: <*>_N).
            <Eq a>_R
            ->_R <Num a>_R
            ->_R <String>_R
            ->_R <IO a>_R
            ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                (Eq a, Num a) =>
                String
                -> IO a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. (Eq a, Num a) => String -> IO a -> IO a :: *))

-- RHS size: {terms: 9, types: 8, coercions: 0, joins: 0/0}
Foreign.C.Error.throwErrnoIfNullRetry2 :: forall a. Ptr a -> Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a91Vd) (ds_d923w [Occ=Once!] :: Ptr a_a91Vd) ->
                 case ds_d923w of { GHC.Ptr.Ptr a1_i7JfH [Occ=Once] ->
                 tagToEnum# @ Bool (eqAddr# a1_i7JfH __NULL)
                 }}]
Foreign.C.Error.throwErrnoIfNullRetry2
  = \ (@ a_a91Vd) (ds_d923w :: Ptr a_a91Vd) ->
      case ds_d923w of { GHC.Ptr.Ptr a1_i7JfH ->
      tagToEnum# @ Bool (eqAddr# a1_i7JfH __NULL)
      }

-- RHS size: {terms: 3, types: 5, coercions: 0, joins: 0/0}
Foreign.C.Error.throwErrnoIfNullRetry1
  :: forall a.
     String
     -> IO (Ptr a) -> State# RealWorld -> (# State# RealWorld, Ptr a #)
[GblId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Foreign.C.Error.throwErrnoIfNullRetry1
  = \ (@ a_a91Vd) ->
      Foreign.C.Error.throwErrnoIfMinus1Retry2
        @ (Ptr a_a91Vd) (Foreign.C.Error.throwErrnoIfNullRetry2 @ a_a91Vd)

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
throwErrnoIfNullRetry
  :: forall a. String -> IO (Ptr a) -> IO (Ptr a)
[GblId,
 Arity=3,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.throwErrnoIfNullRetry1
               `cast` (forall (a :: <*>_N).
                       <String>_R
                       ->_R <IO (Ptr a)>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
                       :: (forall a.
                           String
                           -> IO (Ptr a)
                           -> State# RealWorld
                           -> (# State# RealWorld, Ptr a #) :: *)
                          ~R# (forall a. String -> IO (Ptr a) -> IO (Ptr a) :: *))}]
throwErrnoIfNullRetry
  = Foreign.C.Error.throwErrnoIfNullRetry1
    `cast` (forall (a :: <*>_N).
            <String>_R
            ->_R <IO (Ptr a)>_R
            ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
            :: (forall a.
                String
                -> IO (Ptr a)
                -> State# RealWorld
                -> (# State# RealWorld, Ptr a #) :: *)
               ~R# (forall a. String -> IO (Ptr a) -> IO (Ptr a) :: *))

Rec {
-- RHS size: {terms: 46, types: 53, coercions: 4, joins: 0/0}
Foreign.C.Error.throwErrnoIfMinus1RetryMayBlock2 [Occ=LoopBreaker]
  :: forall a b.
     (a -> Bool)
     -> String
     -> IO a
     -> IO b
     -> State# RealWorld
     -> (# State# RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,C(U)><L,U><C(S),C(U(U,U))><L,C(U(U,A))><S,U>,
 Unf=OtherCon []]
Foreign.C.Error.throwErrnoIfMinus1RetryMayBlock2
  = \ (@ a_a91Vk)
      (@ b_a91Vl)
      (pred_a91u5 :: a_a91Vk -> Bool)
      (loc_a91u6 :: String)
      (f_a91u7 :: IO a_a91Vk)
      (on_block_a91u8 :: IO b_a91Vl)
      (s_X7IJ9 :: State# RealWorld) ->
      case (f_a91u7
            `cast` (GHC.Types.N:IO[0] <a_a91Vk>_R
                    :: (IO a_a91Vk :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, a_a91Vk #) :: *)))
             s_X7IJ9
      of ds1_i7IAw
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case pred_a91u5 ipv1_i7IAz of {
        False -> ds1_i7IAw;
        True ->
          case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
                 ipv_i7IAy
          of
          { (# ds_d924s, ds2_d924r #) ->
          case narrow32Int# ds2_d924r of {
            __DEFAULT ->
              Foreign.C.Error.throwErrno1 @ a_a91Vk loc_a91u6 ds_d924s;
            4# ->
              Foreign.C.Error.throwErrnoIfMinus1RetryMayBlock2
                @ a_a91Vk
                @ b_a91Vl
                pred_a91u5
                loc_a91u6
                f_a91u7
                on_block_a91u8
                ds_d924s;
            11# ->
              case (on_block_a91u8
                    `cast` (GHC.Types.N:IO[0] <b_a91Vl>_R
                            :: (IO b_a91Vl :: *)
                               ~R# (State# RealWorld -> (# State# RealWorld, b_a91Vl #) :: *)))
                     ds_d924s
              of
              { (# ipv2_X7IJC, ipv3_X7IJE #) ->
              Foreign.C.Error.throwErrnoIfMinus1RetryMayBlock2
                @ a_a91Vk
                @ b_a91Vl
                pred_a91u5
                loc_a91u6
                f_a91u7
                on_block_a91u8
                ipv2_X7IJC
              }
          }
          }
      }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 20, joins: 0/0}
throwErrnoIfRetryMayBlock
  :: forall a b. (a -> Bool) -> String -> IO a -> IO b -> IO a
[GblId,
 Arity=5,
 Str=<L,C(U)><L,U><C(S),C(U(U,U))><L,C(U(U,A))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.throwErrnoIfMinus1RetryMayBlock2
               `cast` (forall (a :: <*>_N) (b :: <*>_N).
                       <a -> Bool>_R
                       ->_R <String>_R
                       ->_R <IO a>_R
                       ->_R <IO b>_R
                       ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a b.
                           (a -> Bool)
                           -> String
                           -> IO a
                           -> IO b
                           -> State# RealWorld
                           -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a b.
                               (a -> Bool) -> String -> IO a -> IO b -> IO a :: *))}]
throwErrnoIfRetryMayBlock
  = Foreign.C.Error.throwErrnoIfMinus1RetryMayBlock2
    `cast` (forall (a :: <*>_N) (b :: <*>_N).
            <a -> Bool>_R
            ->_R <String>_R
            ->_R <IO a>_R
            ->_R <IO b>_R
            ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a b.
                (a -> Bool)
                -> String
                -> IO a
                -> IO b
                -> State# RealWorld
                -> (# State# RealWorld, a #) :: *)
               ~R# (forall a b.
                    (a -> Bool) -> String -> IO a -> IO b -> IO a :: *))

-- RHS size: {terms: 18, types: 33, coercions: 0, joins: 0/0}
Foreign.C.Error.throwErrnoIfRetryMayBlock_1
  :: forall a b.
     (a -> Bool)
     -> String
     -> IO a
     -> IO b
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=5,
 Str=<L,C(U)><L,U><C(S),C(U(U,U))><L,C(U(U,A))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a91VO)
                 (@ b_a91VP)
                 (pred_a91ue [Occ=Once] :: a_a91VO -> Bool)
                 (loc_a91uf [Occ=Once] :: String)
                 (f_a91ug [Occ=Once] :: IO a_a91VO)
                 (on_block_a91uh [Occ=Once] :: IO b_a91VP)
                 (eta1_i928W [Occ=Once] :: State# RealWorld) ->
                 case Foreign.C.Error.throwErrnoIfMinus1RetryMayBlock2
                        @ a_a91VO
                        @ b_a91VP
                        pred_a91ue
                        loc_a91uf
                        f_a91ug
                        on_block_a91uh
                        eta1_i928W
                 of
                 { (# ipv_i928Z [Occ=Once], _ [Occ=Dead] #) ->
                 (# ipv_i928Z, GHC.Tuple.() #)
                 }}]
Foreign.C.Error.throwErrnoIfRetryMayBlock_1
  = \ (@ a_a91VO)
      (@ b_a91VP)
      (pred_a91ue :: a_a91VO -> Bool)
      (loc_a91uf :: String)
      (f_a91ug :: IO a_a91VO)
      (on_block_a91uh :: IO b_a91VP)
      (eta1_i928W :: State# RealWorld) ->
      case Foreign.C.Error.throwErrnoIfMinus1RetryMayBlock2
             @ a_a91VO
             @ b_a91VP
             pred_a91ue
             loc_a91uf
             f_a91ug
             on_block_a91uh
             eta1_i928W
      of
      { (# ipv_i928Z, ipv1_i9290 #) ->
      (# ipv_i928Z, GHC.Tuple.() #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 20, joins: 0/0}
throwErrnoIfRetryMayBlock_
  :: forall a b. (a -> Bool) -> String -> IO a -> IO b -> IO ()
[GblId,
 Arity=5,
 Str=<L,C(U)><L,U><C(S),C(U(U,U))><L,C(U(U,A))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.throwErrnoIfRetryMayBlock_1
               `cast` (forall (a :: <*>_N) (b :: <*>_N).
                       <a -> Bool>_R
                       ->_R <String>_R
                       ->_R <IO a>_R
                       ->_R <IO b>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (forall a b.
                           (a -> Bool)
                           -> String
                           -> IO a
                           -> IO b
                           -> State# RealWorld
                           -> (# State# RealWorld, () #) :: *)
                          ~R# (forall a b.
                               (a -> Bool) -> String -> IO a -> IO b -> IO () :: *))}]
throwErrnoIfRetryMayBlock_
  = Foreign.C.Error.throwErrnoIfRetryMayBlock_1
    `cast` (forall (a :: <*>_N) (b :: <*>_N).
            <a -> Bool>_R
            ->_R <String>_R
            ->_R <IO a>_R
            ->_R <IO b>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a b.
                (a -> Bool)
                -> String
                -> IO a
                -> IO b
                -> State# RealWorld
                -> (# State# RealWorld, () #) :: *)
               ~R# (forall a b.
                    (a -> Bool) -> String -> IO a -> IO b -> IO () :: *))

-- RHS size: {terms: 31, types: 42, coercions: 11, joins: 0/2}
throwErrnoIfMinus1RetryMayBlock_
  :: forall a b. (Eq a, Num a) => String -> IO a -> IO b -> IO ()
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(A,A,A,1*C1(U),A,A,1*C1(U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 60] 220 60}]
throwErrnoIfMinus1RetryMayBlock_
  = \ (@ a_a91VZ)
      (@ b_a91W0)
      ($dEq_a91W2 :: Eq a_a91VZ)
      ($dNum_a91W3 :: Num a_a91VZ) ->
      let {
        ds_s92f8 :: a_a91VZ
        [LclId]
        ds_s92f8
          = negate
              @ a_a91VZ
              $dNum_a91W3
              (fromInteger
                 @ a_a91VZ $dNum_a91W3 Foreign.C.Error.throwErrnoIfMinus2) } in
      let {
        pred_s92f7 [Dmd=<L,C(U)>] :: a_a91VZ -> Bool
        [LclId,
         Arity=1,
         Str=<L,U>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
                 Tmpl= \ (ds1_d923G [Occ=Once] :: a_a91VZ) ->
                         == @ a_a91VZ $dEq_a91W2 ds1_d923G ds_s92f8}]
        pred_s92f7
          = \ (ds1_d923G :: a_a91VZ) ->
              == @ a_a91VZ $dEq_a91W2 ds1_d923G ds_s92f8 } in
      (\ (loc_X91Dc :: String)
         (f_X91De :: IO a_a91VZ)
         (on_block_X91Dg :: IO b_a91W0)
         (eta1_i928W :: State# RealWorld) ->
         case Foreign.C.Error.throwErrnoIfMinus1RetryMayBlock2
                @ a_a91VZ
                @ b_a91W0
                pred_s92f7
                loc_X91Dc
                f_X91De
                on_block_X91Dg
                eta1_i928W
         of
         { (# ipv_i928Z, ipv1_i9290 #) ->
         (# ipv_i928Z, GHC.Tuple.() #)
         })
      `cast` (<String>_R
              ->_R <IO a_a91VZ>_R
              ->_R <IO b_a91W0>_R
              ->_R Sym (GHC.Types.N:IO[0] <()>_R)
              :: (String
                  -> IO a_a91VZ
                  -> IO b_a91W0
                  -> State# RealWorld
                  -> (# State# RealWorld, () #) :: *)
                 ~R# (String -> IO a_a91VZ -> IO b_a91W0 -> IO () :: *))

-- RHS size: {terms: 16, types: 15, coercions: 0, joins: 0/1}
Foreign.C.Error.throwErrnoIfMinus1RetryMayBlock1
  :: forall a b.
     (Eq a, Num a) =>
     String
     -> IO a -> IO b -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(A,A,A,1*C1(U),A,A,1*C1(U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 60] 140 60}]
Foreign.C.Error.throwErrnoIfMinus1RetryMayBlock1
  = \ (@ a_a91Wd)
      (@ b_a91We)
      ($dEq_a91Wg :: Eq a_a91Wd)
      ($dNum_a91Wh :: Num a_a91Wd) ->
      Foreign.C.Error.throwErrnoIfMinus1RetryMayBlock2
        @ a_a91Wd
        @ b_a91We
        (let {
           ds_s92f4 :: a_a91Wd
           [LclId]
           ds_s92f4
             = negate
                 @ a_a91Wd
                 $dNum_a91Wh
                 (fromInteger
                    @ a_a91Wd $dNum_a91Wh Foreign.C.Error.throwErrnoIfMinus2) } in
         \ (ds1_d923J :: a_a91Wd) ->
           == @ a_a91Wd $dEq_a91Wg ds1_d923J ds_s92f4)

-- RHS size: {terms: 1, types: 0, coercions: 23, joins: 0/0}
throwErrnoIfMinus1RetryMayBlock
  :: forall a b. (Eq a, Num a) => String -> IO a -> IO b -> IO a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(A,A,A,1*C1(U),A,A,1*C1(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.throwErrnoIfMinus1RetryMayBlock1
               `cast` (forall (a :: <*>_N) (b :: <*>_N).
                       <Eq a>_R
                       ->_R <Num a>_R
                       ->_R <String>_R
                       ->_R <IO a>_R
                       ->_R <IO b>_R
                       ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a b.
                           (Eq a, Num a) =>
                           String
                           -> IO a
                           -> IO b
                           -> State# RealWorld
                           -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a b.
                               (Eq a, Num a) =>
                               String -> IO a -> IO b -> IO a :: *))}]
throwErrnoIfMinus1RetryMayBlock
  = Foreign.C.Error.throwErrnoIfMinus1RetryMayBlock1
    `cast` (forall (a :: <*>_N) (b :: <*>_N).
            <Eq a>_R
            ->_R <Num a>_R
            ->_R <String>_R
            ->_R <IO a>_R
            ->_R <IO b>_R
            ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a b.
                (Eq a, Num a) =>
                String
                -> IO a
                -> IO b
                -> State# RealWorld
                -> (# State# RealWorld, a #) :: *)
               ~R# (forall a b.
                    (Eq a, Num a) =>
                    String -> IO a -> IO b -> IO a :: *))

-- RHS size: {terms: 4, types: 8, coercions: 0, joins: 0/0}
Foreign.C.Error.throwErrnoIfNullRetryMayBlock1
  :: forall a b.
     String
     -> IO (Ptr a)
     -> IO b
     -> State# RealWorld
     -> (# State# RealWorld, Ptr a #)
[GblId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Foreign.C.Error.throwErrnoIfNullRetryMayBlock1
  = \ (@ a_a91Wr) (@ b_a91Ws) ->
      Foreign.C.Error.throwErrnoIfMinus1RetryMayBlock2
        @ (Ptr a_a91Wr)
        @ b_a91Ws
        (Foreign.C.Error.throwErrnoIfNullRetry2 @ a_a91Wr)

-- RHS size: {terms: 1, types: 0, coercions: 19, joins: 0/0}
throwErrnoIfNullRetryMayBlock
  :: forall a b. String -> IO (Ptr a) -> IO b -> IO (Ptr a)
[GblId,
 Arity=4,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.throwErrnoIfNullRetryMayBlock1
               `cast` (forall (a :: <*>_N) (b :: <*>_N).
                       <String>_R
                       ->_R <IO (Ptr a)>_R
                       ->_R <IO b>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
                       :: (forall a b.
                           String
                           -> IO (Ptr a)
                           -> IO b
                           -> State# RealWorld
                           -> (# State# RealWorld, Ptr a #) :: *)
                          ~R# (forall a b.
                               String -> IO (Ptr a) -> IO b -> IO (Ptr a) :: *))}]
throwErrnoIfNullRetryMayBlock
  = Foreign.C.Error.throwErrnoIfNullRetryMayBlock1
    `cast` (forall (a :: <*>_N) (b :: <*>_N).
            <String>_R
            ->_R <IO (Ptr a)>_R
            ->_R <IO b>_R
            ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
            :: (forall a b.
                String
                -> IO (Ptr a)
                -> IO b
                -> State# RealWorld
                -> (# State# RealWorld, Ptr a #) :: *)
               ~R# (forall a b. String -> IO (Ptr a) -> IO b -> IO (Ptr a) :: *))

-- RHS size: {terms: 14, types: 11, coercions: 0, joins: 0/0}
Foreign.C.Error.$wlvl1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     String
     -> Int#
     -> FilePath
     -> State# RealWorld
     -> (# State# RealWorld, a #)
[GblId, Arity=4, Str=<B,U><B,U><B,U><B,U>x, Unf=OtherCon []]
Foreign.C.Error.$wlvl1
  = \ (@ a_s92IL)
      (w_s92IM :: String)
      (ww_s92IS :: Int#)
      (w1_s92IO :: FilePath)
      (w2_s92IP :: State# RealWorld) ->
      raiseIO#
        @ GHC.Exception.SomeException
        @ a_s92IL
        (GHC.IO.Exception.$fExceptionIOException_$ctoException
           (Foreign.C.Error.$werrnoToIOError
              w_s92IM
              ww_s92IS
              (GHC.Base.Nothing @ Handle)
              (GHC.Base.Just @ FilePath w1_s92IO)))
        w2_s92IP

-- RHS size: {terms: 14, types: 18, coercions: 0, joins: 0/0}
Foreign.C.Error.throwErrnoPath1
  :: forall a.
     String -> FilePath -> State# RealWorld -> (# State# RealWorld, a #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []]
Foreign.C.Error.throwErrnoPath1
  = \ (@ a_a91WA)
      (loc_a91ui :: String)
      (path_a91uj :: FilePath)
      (s_X7IJq :: State# RealWorld) ->
      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
             s_X7IJq
      of
      { (# ds_d924s, ds1_d924r #) ->
      Foreign.C.Error.$wlvl1
        @ a_a91WA loc_a91ui (narrow32Int# ds1_d924r) path_a91uj ds_d924s
      }

-- RHS size: {terms: 1, types: 0, coercions: 10, joins: 0/0}
throwErrnoPath :: forall a. String -> FilePath -> IO a
[GblId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.throwErrnoPath1
               `cast` (forall (a :: <*>_N).
                       <String>_R ->_R <FilePath>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           String
                           -> FilePath -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. String -> FilePath -> IO a :: *))}]
throwErrnoPath
  = Foreign.C.Error.throwErrnoPath1
    `cast` (forall (a :: <*>_N).
            <String>_R ->_R <FilePath>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                String
                -> FilePath -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. String -> FilePath -> IO a :: *))

-- RHS size: {terms: 20, types: 23, coercions: 2, joins: 0/0}
Foreign.C.Error.throwErrnoPathIf1
  :: forall a.
     (a -> Bool)
     -> String
     -> FilePath
     -> IO a
     -> State# RealWorld
     -> (# State# RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,1*C1(U)><L,U><L,U><C(S),1*C1(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a91WK)
                 (pred_a91ul [Occ=Once!] :: a_a91WK -> Bool)
                 (loc_a91um [Occ=Once] :: String)
                 (path_a91un [Occ=Once] :: FilePath)
                 (f_a91uo [Occ=Once] :: IO a_a91WK)
                 (s_X7IJx [Occ=Once] :: State# RealWorld) ->
                 case (f_a91uo
                       `cast` (GHC.Types.N:IO[0] <a_a91WK>_R
                               :: (IO a_a91WK :: *)
                                  ~R# (State# RealWorld -> (# State# RealWorld, a_a91WK #) :: *)))
                        s_X7IJx
                 of
                 { (# ipv_i7IAy [Occ=Once*], ipv1_i7IAz #) ->
                 case pred_a91ul ipv1_i7IAz of {
                   False -> (# ipv_i7IAy, ipv1_i7IAz #);
                   True ->
                     Foreign.C.Error.throwErrnoPath1
                       @ a_a91WK loc_a91um path_a91un ipv_i7IAy
                 }
                 }}]
Foreign.C.Error.throwErrnoPathIf1
  = \ (@ a_a91WK)
      (pred_a91ul :: a_a91WK -> Bool)
      (loc_a91um :: String)
      (path_a91un :: FilePath)
      (f_a91uo :: IO a_a91WK)
      (s_X7IJx :: State# RealWorld) ->
      case (f_a91uo
            `cast` (GHC.Types.N:IO[0] <a_a91WK>_R
                    :: (IO a_a91WK :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, a_a91WK #) :: *)))
             s_X7IJx
      of ds1_i7IAw
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case pred_a91ul ipv1_i7IAz of {
        False -> ds1_i7IAw;
        True ->
          Foreign.C.Error.throwErrnoPath1
            @ a_a91WK loc_a91um path_a91un ipv_i7IAy
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 16, joins: 0/0}
throwErrnoPathIf
  :: forall a. (a -> Bool) -> String -> FilePath -> IO a -> IO a
[GblId,
 Arity=5,
 Str=<L,1*C1(U)><L,U><L,U><C(S),1*C1(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.throwErrnoPathIf1
               `cast` (forall (a :: <*>_N).
                       <a -> Bool>_R
                       ->_R <String>_R
                       ->_R <FilePath>_R
                       ->_R <IO a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           (a -> Bool)
                           -> String
                           -> FilePath
                           -> IO a
                           -> State# RealWorld
                           -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a.
                               (a -> Bool) -> String -> FilePath -> IO a -> IO a :: *))}]
throwErrnoPathIf
  = Foreign.C.Error.throwErrnoPathIf1
    `cast` (forall (a :: <*>_N).
            <a -> Bool>_R
            ->_R <String>_R
            ->_R <FilePath>_R
            ->_R <IO a>_R
            ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                (a -> Bool)
                -> String
                -> FilePath
                -> IO a
                -> State# RealWorld
                -> (# State# RealWorld, a #) :: *)
               ~R# (forall a.
                    (a -> Bool) -> String -> FilePath -> IO a -> IO a :: *))

-- RHS size: {terms: 29, types: 49, coercions: 2, joins: 0/0}
Foreign.C.Error.throwErrnoPathIf_1
  :: forall a.
     (a -> Bool)
     -> String
     -> FilePath
     -> IO a
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=5,
 Str=<L,1*C1(U)><L,U><L,U><C(S(SL)),1*C1(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a91WV)
                 (pred_a91uq [Occ=Once!] :: a_a91WV -> Bool)
                 (loc_a91ur [Occ=Once] :: String)
                 (path_a91us [Occ=Once] :: FilePath)
                 (f_a91ut [Occ=Once] :: IO a_a91WV)
                 (eta1_i928W [Occ=Once] :: State# RealWorld) ->
                 case (f_a91ut
                       `cast` (GHC.Types.N:IO[0] <a_a91WV>_R
                               :: (IO a_a91WV :: *)
                                  ~R# (State# RealWorld -> (# State# RealWorld, a_a91WV #) :: *)))
                        eta1_i928W
                 of
                 { (# ipv_i7IAy [Occ=Once*], ipv1_i7IAz [Occ=Once] #) ->
                 case pred_a91uq ipv1_i7IAz of {
                   False -> (# ipv_i7IAy, GHC.Tuple.() #);
                   True ->
                     case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
                            ipv_i7IAy
                     of
                     { (# ds_d924s [Occ=Once], ds2_d924r [Occ=Once] #) ->
                     case Foreign.C.Error.$wlvl1
                            @ a_a91WV loc_a91ur (narrow32Int# ds2_d924r) path_a91us ds_d924s
                     of {
                     }
                     }
                 }
                 }}]
Foreign.C.Error.throwErrnoPathIf_1
  = \ (@ a_a91WV)
      (pred_a91uq :: a_a91WV -> Bool)
      (loc_a91ur :: String)
      (path_a91us :: FilePath)
      (f_a91ut :: IO a_a91WV)
      (eta1_i928W :: State# RealWorld) ->
      case (f_a91ut
            `cast` (GHC.Types.N:IO[0] <a_a91WV>_R
                    :: (IO a_a91WV :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, a_a91WV #) :: *)))
             eta1_i928W
      of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case pred_a91uq ipv1_i7IAz of {
        False -> (# ipv_i7IAy, GHC.Tuple.() #);
        True ->
          case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
                 ipv_i7IAy
          of
          { (# ds_d924s, ds2_d924r #) ->
          case Foreign.C.Error.$wlvl1
                 @ a_a91WV loc_a91ur (narrow32Int# ds2_d924r) path_a91us ds_d924s
          of wild2_00 {
          }
          }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 16, joins: 0/0}
throwErrnoPathIf_
  :: forall a. (a -> Bool) -> String -> FilePath -> IO a -> IO ()
[GblId,
 Arity=5,
 Str=<L,1*C1(U)><L,U><L,U><C(S(SL)),1*C1(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.throwErrnoPathIf_1
               `cast` (forall (a :: <*>_N).
                       <a -> Bool>_R
                       ->_R <String>_R
                       ->_R <FilePath>_R
                       ->_R <IO a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           (a -> Bool)
                           -> String
                           -> FilePath
                           -> IO a
                           -> State# RealWorld
                           -> (# State# RealWorld, () #) :: *)
                          ~R# (forall a.
                               (a -> Bool) -> String -> FilePath -> IO a -> IO () :: *))}]
throwErrnoPathIf_
  = Foreign.C.Error.throwErrnoPathIf_1
    `cast` (forall (a :: <*>_N).
            <a -> Bool>_R
            ->_R <String>_R
            ->_R <FilePath>_R
            ->_R <IO a>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                (a -> Bool)
                -> String
                -> FilePath
                -> IO a
                -> State# RealWorld
                -> (# State# RealWorld, () #) :: *)
               ~R# (forall a.
                    (a -> Bool) -> String -> FilePath -> IO a -> IO () :: *))

-- RHS size: {terms: 38, types: 55, coercions: 12, joins: 0/1}
throwErrnoPathIfMinus1_
  :: forall a. (Eq a, Num a) => String -> FilePath -> IO a -> IO ()
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(A,A,A,1*C1(U),A,A,1*C1(U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 60] 231 60}]
throwErrnoPathIfMinus1_
  = \ (@ a_a91X4)
      ($dEq_a91X6 :: Eq a_a91X4)
      ($dNum_a91X7 :: Num a_a91X4) ->
      let {
        ds_s92f2 :: a_a91X4
        [LclId]
        ds_s92f2
          = negate
              @ a_a91X4
              $dNum_a91X7
              (fromInteger
                 @ a_a91X4 $dNum_a91X7 Foreign.C.Error.throwErrnoIfMinus2) } in
      (\ (loc_X91DK :: String)
         (path_X91DM :: FilePath)
         (f_X91DO :: IO a_a91X4)
         (eta1_i928W :: State# RealWorld) ->
         case (f_X91DO
               `cast` (GHC.Types.N:IO[0] <a_a91X4>_R
                       :: (IO a_a91X4 :: *)
                          ~R# (State# RealWorld -> (# State# RealWorld, a_a91X4 #) :: *)))
                eta1_i928W
         of
         { (# ipv_i7IAy, ipv1_i7IAz #) ->
         case == @ a_a91X4 $dEq_a91X6 ipv1_i7IAz ds_s92f2 of {
           False -> (# ipv_i7IAy, GHC.Tuple.() #);
           True ->
             case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
                    ipv_i7IAy
             of
             { (# ds2_d924s, ds3_d924r #) ->
             case Foreign.C.Error.$wlvl1
                    @ a_a91X4 loc_X91DK (narrow32Int# ds3_d924r) path_X91DM ds2_d924s
             of wild2_00 {
             }
             }
         }
         })
      `cast` (<String>_R
              ->_R <FilePath>_R
              ->_R <IO a_a91X4>_R
              ->_R Sym (GHC.Types.N:IO[0] <()>_R)
              :: (String
                  -> FilePath
                  -> IO a_a91X4
                  -> State# RealWorld
                  -> (# State# RealWorld, () #) :: *)
                 ~R# (String -> FilePath -> IO a_a91X4 -> IO () :: *))

-- RHS size: {terms: 23, types: 28, coercions: 3, joins: 0/0}
Foreign.C.Error.throwErrnoPathIfNull1
  :: forall a.
     String
     -> FilePath
     -> IO (Ptr a)
     -> State# RealWorld
     -> (# State# RealWorld, Ptr a #)
[GblId,
 Arity=4,
 Str=<L,U><L,U><C(S(LS(S))),1*C1(U(U,U(U)))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a91Xg)
                 (loc_X91MR [Occ=Once] :: String)
                 (path_X91MU [Occ=Once] :: FilePath)
                 (f_X91MX [Occ=Once] :: IO (Ptr a_a91Xg))
                 (s_X7ISS [Occ=Once] :: State# RealWorld) ->
                 case (f_X91MX
                       `cast` (GHC.Types.N:IO[0] <Ptr a_a91Xg>_R
                               :: (IO (Ptr a_a91Xg) :: *)
                                  ~R# (State# RealWorld
                                       -> (# State# RealWorld, Ptr a_a91Xg #) :: *)))
                        s_X7ISS
                 of
                 { (# ipv_i7IAy [Occ=Once*], ipv1_i7IAz [Occ=Once!] #) ->
                 case ipv1_i7IAz of wild_i7JfF { GHC.Ptr.Ptr a1_i7JfH [Occ=Once] ->
                 case eqAddr# a1_i7JfH __NULL of {
                   __DEFAULT -> (# ipv_i7IAy, wild_i7JfF #);
                   1# ->
                     Foreign.C.Error.throwErrnoPath1
                       @ (Ptr a_a91Xg) loc_X91MR path_X91MU ipv_i7IAy
                 }
                 }
                 }}]
Foreign.C.Error.throwErrnoPathIfNull1
  = \ (@ a_a91Xg)
      (loc_X91MR :: String)
      (path_X91MU :: FilePath)
      (f_X91MX :: IO (Ptr a_a91Xg))
      (s_X7ISS :: State# RealWorld) ->
      case (f_X91MX
            `cast` (GHC.Types.N:IO[0] <Ptr a_a91Xg>_R
                    :: (IO (Ptr a_a91Xg) :: *)
                       ~R# (State# RealWorld
                            -> (# State# RealWorld, Ptr a_a91Xg #) :: *)))
             s_X7ISS
      of ds1_i7IAw
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case ipv1_i7IAz of { GHC.Ptr.Ptr a1_i7JfH ->
      case eqAddr# a1_i7JfH __NULL of {
        __DEFAULT -> ds1_i7IAw;
        1# ->
          Foreign.C.Error.throwErrnoPath1
            @ (Ptr a_a91Xg) loc_X91MR path_X91MU ipv_i7IAy
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 15, joins: 0/0}
throwErrnoPathIfNull
  :: forall a. String -> FilePath -> IO (Ptr a) -> IO (Ptr a)
[GblId,
 Arity=4,
 Str=<L,U><L,U><C(S(LS(S))),1*C1(U(U,U(U)))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Foreign.C.Error.throwErrnoPathIfNull1
               `cast` (forall (a :: <*>_N).
                       <String>_R
                       ->_R <FilePath>_R
                       ->_R <IO (Ptr a)>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
                       :: (forall a.
                           String
                           -> FilePath
                           -> IO (Ptr a)
                           -> State# RealWorld
                           -> (# State# RealWorld, Ptr a #) :: *)
                          ~R# (forall a.
                               String -> FilePath -> IO (Ptr a) -> IO (Ptr a) :: *))}]
throwErrnoPathIfNull
  = Foreign.C.Error.throwErrnoPathIfNull1
    `cast` (forall (a :: <*>_N).
            <String>_R
            ->_R <FilePath>_R
            ->_R <IO (Ptr a)>_R
            ->_R Sym (GHC.Types.N:IO[0] <Ptr a>_R)
            :: (forall a.
                String
                -> FilePath
                -> IO (Ptr a)
                -> State# RealWorld
                -> (# State# RealWorld, Ptr a #) :: *)
               ~R# (forall a.
                    String -> FilePath -> IO (Ptr a) -> IO (Ptr a) :: *))

-- RHS size: {terms: 29, types: 29, coercions: 12, joins: 0/1}
throwErrnoPathIfMinus1
  :: forall a. (Eq a, Num a) => String -> FilePath -> IO a -> IO a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(A,A,A,1*C1(U),A,A,1*C1(U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 60] 210 60}]
throwErrnoPathIfMinus1
  = \ (@ a_a91Xn)
      ($dEq_a91Xp :: Eq a_a91Xn)
      ($dNum_a91Xq :: Num a_a91Xn) ->
      let {
        ds_s92f0 :: a_a91Xn
        [LclId]
        ds_s92f0
          = negate
              @ a_a91Xn
              $dNum_a91Xq
              (fromInteger
                 @ a_a91Xn $dNum_a91Xq Foreign.C.Error.throwErrnoIfMinus2) } in
      (\ (loc_X91DH :: String)
         (path_X91DJ :: FilePath)
         (f_X91DL :: IO a_a91Xn)
         (s_X7IJx :: State# RealWorld) ->
         case (f_X91DL
               `cast` (GHC.Types.N:IO[0] <a_a91Xn>_R
                       :: (IO a_a91Xn :: *)
                          ~R# (State# RealWorld -> (# State# RealWorld, a_a91Xn #) :: *)))
                s_X7IJx
         of ds1_i7IAw
         { (# ipv_i7IAy, ipv1_i7IAz #) ->
         case == @ a_a91Xn $dEq_a91Xp ipv1_i7IAz ds_s92f0 of {
           False -> ds1_i7IAw;
           True ->
             Foreign.C.Error.throwErrnoPath1
               @ a_a91Xn loc_X91DH path_X91DJ ipv_i7IAy
         }
         })
      `cast` (<String>_R
              ->_R <FilePath>_R
              ->_R <IO a_a91Xn>_R
              ->_R Sym (GHC.Types.N:IO[0] <a_a91Xn>_R)
              :: (String
                  -> FilePath
                  -> IO a_a91Xn
                  -> State# RealWorld
                  -> (# State# RealWorld, a_a91Xn #) :: *)
                 ~R# (String -> FilePath -> IO a_a91Xn -> IO a_a91Xn :: *))


