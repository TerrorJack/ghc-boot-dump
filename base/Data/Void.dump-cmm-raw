
==================== Raw Cmm ====================
2018-03-16 16:11:45.407643612 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:11:45.408786379 UTC

[section ""data" . Data.Void.$fIxVoid1_closure" {
     Data.Void.$fIxVoid1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.410879453 UTC

[section ""data" . Data.Void.$fIxVoid_$crangeSize_closure" {
     Data.Void.$fIxVoid_$crangeSize_closure:
         const Data.Void.$fIxVoid_$crangeSize_info;
 },
 Data.Void.$fIxVoid_$crangeSize_entry() //  []
         { []
         }
     {offset
       cfWcP: // global
           R1 = Data.Void.$fIxVoid1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fIxVoid_$crangeSize_info" {
     Data.Void.$fIxVoid_$crangeSize_info:
         const Data.Void.$fIxVoid_$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.414315272 UTC

[section ""data" . Data.Void.$fIxVoid_$crange_closure" {
     Data.Void.$fIxVoid_$crange_closure:
         const Data.Void.$fIxVoid_$crange_info;
 },
 Data.Void.$fIxVoid_$crange_entry() //  []
         { []
         }
     {offset
       cfWd1: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fIxVoid_$crange_info" {
     Data.Void.$fIxVoid_$crange_info:
         const Data.Void.$fIxVoid_$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.417784557 UTC

[section ""data" . Data.Void.$fSemigroupVoid_$cstimes_closure" {
     Data.Void.$fSemigroupVoid_$cstimes_closure:
         const Data.Void.$fSemigroupVoid_$cstimes_info;
         const 0;
 },
 Data.Void.$fSemigroupVoid_$cstimes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfWdd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotent_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fSemigroupVoid_$cstimes_info" {
     Data.Void.$fSemigroupVoid_$cstimes_info:
         const Data.Void.$fSemigroupVoid_$cstimes_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SfVVU_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.421685347 UTC

[section ""data" . Data.Void.$fOrdVoid_$c<>_closure" {
     Data.Void.$fOrdVoid_$c<>_closure:
         const Data.Void.$fOrdVoid_$c<>_info;
 },
 Data.Void.$fOrdVoid_$c<>_entry() //  [R2]
         { []
         }
     {offset
       cfWdo: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fOrdVoid_$c<>_info" {
     Data.Void.$fOrdVoid_$c<>_info:
         const Data.Void.$fOrdVoid_$c<>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.425808283 UTC

[section ""data" . Data.Void.$fSemigroupVoid_$csconcat_closure" {
     Data.Void.$fSemigroupVoid_$csconcat_closure:
         const Data.Void.$fSemigroupVoid_$csconcat_info;
 },
 Data.Void.$fSemigroupVoid_$csconcat_entry() //  [R2]
         { []
         }
     {offset
       cfWdE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWdI; else goto cfWdJ;
       cfWdI: // global
           R2 = R2;
           R1 = Data.Void.$fSemigroupVoid_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfWdJ: // global
           I64[Sp - 8] = block_cfWdB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufWdR; else goto cfWdC;
       ufWdR: // global
           call _cfWdB(R1) args: 0, res: 0, upd: 0;
       cfWdC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fSemigroupVoid_$csconcat_info" {
     Data.Void.$fSemigroupVoid_$csconcat_info:
         const Data.Void.$fSemigroupVoid_$csconcat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfWdB() //  [R1]
         { []
         }
     {offset
       cfWdB: // global
           I64[Sp - 8] = block_cfWdH_info;
           _sfVTo::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfVTo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufWdQ; else goto cfWdL;
       ufWdQ: // global
           call _cfWdH() args: 0, res: 0, upd: 0;
       cfWdL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWdB_info" {
     block_cfWdB_info:
         const _cfWdB;
         const 0;
         const 30;
 },
 _cfWdH() //  []
         { []
         }
     {offset
       cfWdH: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWdH_info" {
     block_cfWdH_info:
         const _cfWdH;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.433702365 UTC

[section ""data" . Data.Void.$fSemigroupVoid_closure" {
     Data.Void.$fSemigroupVoid_closure:
         const GHC.Base.C:Semigroup_con_info;
         const Data.Void.$fOrdVoid_$c<>_closure+2;
         const Data.Void.$fSemigroupVoid_$csconcat_closure+1;
         const Data.Void.$fSemigroupVoid_$cstimes_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.435770388 UTC

[section ""data" . Data.Void.$fShowVoid_$cshowsPrec_closure" {
     Data.Void.$fShowVoid_$cshowsPrec_closure:
         const Data.Void.$fShowVoid_$cshowsPrec_info;
 },
 Data.Void.$fShowVoid_$cshowsPrec_entry() //  [R3]
         { []
         }
     {offset
       cfWec: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fShowVoid_$cshowsPrec_info" {
     Data.Void.$fShowVoid_$cshowsPrec_info:
         const Data.Void.$fShowVoid_$cshowsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.439163146 UTC

[section ""data" . Data.Void.$fExceptionVoid_$cshow_closure" {
     Data.Void.$fExceptionVoid_$cshow_closure:
         const Data.Void.$fExceptionVoid_$cshow_info;
 },
 Data.Void.$fExceptionVoid_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cfWep: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fExceptionVoid_$cshow_info" {
     Data.Void.$fExceptionVoid_$cshow_info:
         const Data.Void.$fExceptionVoid_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.442481859 UTC

[section ""data" . Data.Void.$fShowVoid1_closure" {
     Data.Void.$fShowVoid1_closure:
         const Data.Void.$fShowVoid1_info;
 },
 Data.Void.$fShowVoid1_entry() //  [R2]
         { []
         }
     {offset
       cfWeC: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fShowVoid1_info" {
     Data.Void.$fShowVoid1_info:
         const Data.Void.$fShowVoid1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.446164996 UTC

[section ""data" . Data.Void.$fShowVoid_$cshowList_closure" {
     Data.Void.$fShowVoid_$cshowList_closure:
         const Data.Void.$fShowVoid_$cshowList_info;
 },
 Data.Void.$fShowVoid_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cfWeP: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Void.$fShowVoid1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fShowVoid_$cshowList_info" {
     Data.Void.$fShowVoid_$cshowList_info:
         const Data.Void.$fShowVoid_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.449279091 UTC

[section ""data" . Data.Void.$fShowVoid_closure" {
     Data.Void.$fShowVoid_closure:
         const GHC.Show.C:Show_con_info;
         const Data.Void.$fShowVoid_$cshowsPrec_closure+2;
         const Data.Void.$fExceptionVoid_$cshow_closure+1;
         const Data.Void.$fShowVoid_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.451327313 UTC

[section ""data" . Data.Void.$fReadVoid2_closure" {
     Data.Void.$fReadVoid2_closure:
         const Data.Void.$fReadVoid2_info;
 },
 Data.Void.$fReadVoid2_entry() //  [R2]
         { []
         }
     {offset
       cfWf1: // global
           R3 = R2;
           R2 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fReadVoid2_info" {
     Data.Void.$fReadVoid2_info:
         const Data.Void.$fReadVoid2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.454649971 UTC

[section ""data" . Data.Void.$fReadVoid_$creadsPrec_closure" {
     Data.Void.$fReadVoid_$creadsPrec_closure:
         const Data.Void.$fReadVoid_$creadsPrec_info;
 },
 Data.Void.$fReadVoid_$creadsPrec_entry() //  [R3]
         { []
         }
     {offset
       cfWfc: // global
           R2 = R3;
           call Data.Void.$fReadVoid2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fReadVoid_$creadsPrec_info" {
     Data.Void.$fReadVoid_$creadsPrec_info:
         const Data.Void.$fReadVoid_$creadsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.459005237 UTC

[section ""data" . Data.Void.$fReadVoid_$creadListPrec_closure" {
     Data.Void.$fReadVoid_$creadListPrec_closure:
         const Data.Void.$fReadVoid_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Void.$fReadVoid_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       cfWfp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWfq; else goto cfWfr;
       cfWfq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfWfr: // global
           (_cfWfm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfWfm::I64 == 0) goto cfWfo; else goto cfWfn;
       cfWfo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfWfn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfWfm::I64;
           R2 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Void.$fReadVoid_$creadListPrec_info" {
     Data.Void.$fReadVoid_$creadListPrec_info:
         const Data.Void.$fReadVoid_$creadListPrec_entry;
         const 0;
         const 4294967317;
         const SfVVU_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.46392376 UTC

[section ""data" . Data.Void.$fReadVoid1_closure" {
     Data.Void.$fReadVoid1_closure:
         const Data.Void.$fReadVoid1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Void.$fReadVoid1_entry() //  [R1]
         { []
         }
     {offset
       cfWfF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWfG; else goto cfWfH;
       cfWfG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfWfH: // global
           (_cfWfC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfWfC::I64 == 0) goto cfWfE; else goto cfWfD;
       cfWfE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfWfD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfWfC::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = Data.Void.$fReadVoid_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Void.$fReadVoid1_info" {
     Data.Void.$fReadVoid1_info:
         const Data.Void.$fReadVoid1_entry;
         const 0;
         const 4294967317;
         const SfVVU_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.467695269 UTC

[section ""data" . Data.Void.$fReadVoid_$creadList_closure" {
     Data.Void.$fReadVoid_$creadList_closure:
         const Data.Void.$fReadVoid_$creadList_info;
         const 0;
 },
 Data.Void.$fReadVoid_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cfWfT: // global
           R3 = R2;
           R2 = Data.Void.$fReadVoid1_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fReadVoid_$creadList_info" {
     Data.Void.$fReadVoid_$creadList_info:
         const Data.Void.$fReadVoid_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfVVU_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.471089156 UTC

[section ""data" . Data.Void.$fReadVoid_closure" {
     Data.Void.$fReadVoid_closure:
         const GHC.Read.C:Read_con_info;
         const Data.Void.$fReadVoid_$creadsPrec_closure+2;
         const Data.Void.$fReadVoid_$creadList_closure+1;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
         const Data.Void.$fReadVoid_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.473135737 UTC

[section ""data" . Data.Void.$fOrdVoid_$ccompare_closure" {
     Data.Void.$fOrdVoid_$ccompare_closure:
         const Data.Void.$fOrdVoid_$ccompare_info;
 },
 Data.Void.$fOrdVoid_$ccompare_entry() //  []
         { []
         }
     {offset
       cfWg5: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fOrdVoid_$ccompare_info" {
     Data.Void.$fOrdVoid_$ccompare_info:
         const Data.Void.$fOrdVoid_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.476568403 UTC

[section ""data" . Data.Void.$fGenericVoid_$cto_closure" {
     Data.Void.$fGenericVoid_$cto_closure:
         const Data.Void.$fGenericVoid_$cto_info;
 },
 Data.Void.$fGenericVoid_$cto_entry() //  [R2]
         { []
         }
     {offset
       cfWgh: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fGenericVoid_$cto_info" {
     Data.Void.$fGenericVoid_$cto_info:
         const Data.Void.$fGenericVoid_$cto_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.479888435 UTC

[section ""data" . Data.Void.$fGenericVoid1_closure" {
     Data.Void.$fGenericVoid1_closure:
         const Data.Void.$fGenericVoid1_info;
 },
 Data.Void.$fGenericVoid1_entry() //  [R2]
         { []
         }
     {offset
       cfWgs: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fGenericVoid1_info" {
     Data.Void.$fGenericVoid1_info:
         const Data.Void.$fGenericVoid1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.483527594 UTC

[section ""data" . Data.Void.$fGenericVoid_closure" {
     Data.Void.$fGenericVoid_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Void.$fGenericVoid1_closure+1;
         const Data.Void.$fGenericVoid_$cto_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.485585558 UTC

[section ""data" . Data.Void.$fDataVoid_$ctoConstr_closure" {
     Data.Void.$fDataVoid_$ctoConstr_closure:
         const Data.Void.$fDataVoid_$ctoConstr_info;
 },
 Data.Void.$fDataVoid_$ctoConstr_entry() //  [R2]
         { []
         }
     {offset
       cfWgG: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$ctoConstr_info" {
     Data.Void.$fDataVoid_$ctoConstr_info:
         const Data.Void.$fDataVoid_$ctoConstr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.489151233 UTC

[section ""cstring" . lvl_rfVTe_bytes" {
     lvl_rfVTe_bytes:
         I8[] [68,97,116,97,47,86,111,105,100,46,104,115,58,51,57,58,53,45,56,124,99,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.491636581 UTC

[section ""data" . lvl1_rfVTf_closure" {
     lvl1_rfVTf_closure:
         const lvl1_rfVTf_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rfVTf_entry() //  [R1]
         { []
         }
     {offset
       cfWgW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWgX; else goto cfWgY;
       cfWgX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfWgY: // global
           (_cfWgT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfWgT::I64 == 0) goto cfWgV; else goto cfWgU;
       cfWgV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfWgU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfWgT::I64;
           R2 = lvl_rfVTe_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.patError_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rfVTf_info" {
     lvl1_rfVTf_info:
         const lvl1_rfVTf_entry;
         const 0;
         const 4294967317;
         const SfVVU_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.496602569 UTC

[section ""data" . Data.Void.$w$cgunfold_closure" {
     Data.Void.$w$cgunfold_closure:
         const Data.Void.$w$cgunfold_info;
         const 0;
 },
 Data.Void.$w$cgunfold_entry() //  [R2, R3]
         { []
         }
     {offset
       cfWhh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWhi; else goto cfWhj;
       cfWhi: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Void.$w$cgunfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfWhj: // global
           I64[Sp - 16] = block_cfWha_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufWhx; else goto cfWhb;
       ufWhx: // global
           call _cfWha(R1) args: 0, res: 0, upd: 0;
       cfWhb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$w$cgunfold_info" {
     Data.Void.$w$cgunfold_info:
         const Data.Void.$w$cgunfold_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SfVVU_srt+40;
 },
 _cfWha() //  [R1]
         { []
         }
     {offset
       cfWha: // global
           if (R1 & 7 == 1) goto cfWhf; else goto cfWhe;
       cfWhf: // global
           I64[Sp + 8] = block_cfWhp_info;
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ufWhw; else goto cfWhr;
       ufWhw: // global
           call _cfWhp() args: 0, res: 0, upd: 0;
       cfWhr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cfWhe: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Data.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWha_info" {
     block_cfWha_info:
         const _cfWha;
         const 1;
         const 21474836510;
         const SfVVU_srt+40;
 },
 _cfWhp() //  []
         { []
         }
     {offset
       cfWhp: // global
           R1 = lvl1_rfVTf_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWhp_info" {
     block_cfWhp_info:
         const _cfWhp;
         const 0;
         const 4294967326;
         const SfVVU_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.504085563 UTC

[section ""data" . Data.Void.$fDataVoid_$cgunfold_closure" {
     Data.Void.$fDataVoid_$cgunfold_closure:
         const Data.Void.$fDataVoid_$cgunfold_info;
         const 0;
 },
 Data.Void.$fDataVoid_$cgunfold_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfWhU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWhY; else goto cfWhZ;
       cfWhY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Void.$fDataVoid_$cgunfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfWhZ: // global
           I64[Sp - 8] = block_cfWhR_info;
           R1 = R4;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufWi7; else goto cfWhS;
       ufWi7: // global
           call _cfWhR(R1) args: 0, res: 0, upd: 0;
       cfWhS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cgunfold_info" {
     Data.Void.$fDataVoid_$cgunfold_info:
         const Data.Void.$fDataVoid_$cgunfold_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SfVVU_srt+48;
 },
 _cfWhR() //  [R1]
         { []
         }
     {offset
       cfWhR: // global
           I64[Sp - 8] = block_cfWhX_info;
           _sfVTU::P64 = P64[R1 + 7];
           R1 = P64[R1 + 39];
           P64[Sp] = _sfVTU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufWi6; else goto cfWi1;
       ufWi6: // global
           call _cfWhX(R1) args: 0, res: 0, upd: 0;
       cfWi1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWhR_info" {
     block_cfWhR_info:
         const _cfWhR;
         const 0;
         const 4294967326;
         const SfVVU_srt+48;
 },
 _cfWhX() //  [R1]
         { []
         }
     {offset
       cfWhX: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Void.$w$cgunfold_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWhX_info" {
     block_cfWhX_info:
         const _cfWhX;
         const 1;
         const 4294967326;
         const SfVVU_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.510850289 UTC

[section ""data" . Data.Void.$fDataVoid_$cgfoldl_closure" {
     Data.Void.$fDataVoid_$cgfoldl_closure:
         const Data.Void.$fDataVoid_$cgfoldl_info;
 },
 Data.Void.$fDataVoid_$cgfoldl_entry() //  [R4]
         { []
         }
     {offset
       cfWip: // global
           R1 = R4 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cgfoldl_info" {
     Data.Void.$fDataVoid_$cgfoldl_info:
         const Data.Void.$fDataVoid_$cgfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.515168851 UTC

[section ""data" . Data.Void.$fEqVoid_$c==_closure" {
     Data.Void.$fEqVoid_$c==_closure:
         const Data.Void.$fEqVoid_$c==_info;
 },
 Data.Void.$fEqVoid_$c==_entry() //  []
         { []
         }
     {offset
       cfWiC: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fEqVoid_$c==_info" {
     Data.Void.$fEqVoid_$c==_info:
         const Data.Void.$fEqVoid_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.518759382 UTC

[section ""data" . Data.Void.$fEqVoid_$c/=_closure" {
     Data.Void.$fEqVoid_$c/=_closure:
         const Data.Void.$fEqVoid_$c/=_info;
 },
 Data.Void.$fEqVoid_$c/=_entry() //  []
         { []
         }
     {offset
       cfWiO: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fEqVoid_$c/=_info" {
     Data.Void.$fEqVoid_$c/=_info:
         const Data.Void.$fEqVoid_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.522322834 UTC

[section ""data" . Data.Void.$fEqVoid_closure" {
     Data.Void.$fEqVoid_closure:
         const GHC.Classes.C:Eq_con_info;
         const Data.Void.$fEqVoid_$c==_closure+2;
         const Data.Void.$fEqVoid_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.525366193 UTC

[section ""data" . Data.Void.$fOrdVoid_$c<_closure" {
     Data.Void.$fOrdVoid_$c<_closure:
         const Data.Void.$fOrdVoid_$c<_info;
 },
 Data.Void.$fOrdVoid_$c<_entry() //  []
         { []
         }
     {offset
       cfWj1: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fOrdVoid_$c<_info" {
     Data.Void.$fOrdVoid_$c<_info:
         const Data.Void.$fOrdVoid_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.5291969 UTC

[section ""data" . Data.Void.$fOrdVoid_$cmax_closure" {
     Data.Void.$fOrdVoid_$cmax_closure:
         const Data.Void.$fOrdVoid_$cmax_info;
 },
 Data.Void.$fOrdVoid_$cmax_entry() //  [R3]
         { []
         }
     {offset
       cfWjd: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fOrdVoid_$cmax_info" {
     Data.Void.$fOrdVoid_$cmax_info:
         const Data.Void.$fOrdVoid_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.532983092 UTC

[section ""data" . Data.Void.$fOrdVoid_closure" {
     Data.Void.$fOrdVoid_closure:
         const GHC.Classes.C:Ord_con_info;
         const Data.Void.$fEqVoid_closure+1;
         const Data.Void.$fOrdVoid_$ccompare_closure+2;
         const Data.Void.$fOrdVoid_$c<_closure+2;
         const Data.Void.$fEqVoid_$c==_closure+2;
         const Data.Void.$fOrdVoid_$c<_closure+2;
         const Data.Void.$fEqVoid_$c==_closure+2;
         const Data.Void.$fOrdVoid_$cmax_closure+2;
         const Data.Void.$fOrdVoid_$c<>_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.535409642 UTC

[section ""data" . Data.Void.absurd_closure" {
     Data.Void.absurd_closure:
         const Data.Void.absurd_info;
 },
 Data.Void.absurd_entry() //  [R2]
         { []
         }
     {offset
       cfWjr: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.absurd_info" {
     Data.Void.absurd_info:
         const Data.Void.absurd_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.539886014 UTC

[section ""data" . Data.Void.vacuous_closure" {
     Data.Void.vacuous_closure:
         const Data.Void.vacuous_info;
 },
 Data.Void.vacuous_entry() //  [R2]
         { []
         }
     {offset
       cfWjE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWjF; else goto cfWjG;
       cfWjF: // global
           R2 = R2;
           R1 = Data.Void.vacuous_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfWjG: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Void.absurd_closure+1;
           Sp = Sp - 16;
           call GHC.Base.fmap_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.vacuous_info" {
     Data.Void.vacuous_info:
         const Data.Void.vacuous_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.544426519 UTC

[section ""data" . Data.Void.$fIxVoid_$cindex_closure" {
     Data.Void.$fIxVoid_$cindex_closure:
         const Data.Void.$fIxVoid_$cindex_info;
 },
 Data.Void.$fIxVoid_$cindex_entry() //  [R3]
         { []
         }
     {offset
       cfWjQ: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fIxVoid_$cindex_info" {
     Data.Void.$fIxVoid_$cindex_info:
         const Data.Void.$fIxVoid_$cindex_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.548034955 UTC

[section ""data" . Data.Void.$fIxVoid_$cinRange_closure" {
     Data.Void.$fIxVoid_$cinRange_closure:
         const Data.Void.$fIxVoid_$cinRange_info;
 },
 Data.Void.$fIxVoid_$cinRange_entry() //  [R3]
         { []
         }
     {offset
       cfWk3: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fIxVoid_$cinRange_info" {
     Data.Void.$fIxVoid_$cinRange_info:
         const Data.Void.$fIxVoid_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.553070927 UTC

[section ""data" . Data.Void.$fIxVoid_$cunsafeRangeSize_closure" {
     Data.Void.$fIxVoid_$cunsafeRangeSize_closure:
         const Data.Void.$fIxVoid_$cunsafeRangeSize_info;
 },
 Data.Void.$fIxVoid_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       cfWkj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfWkk; else goto cfWkl;
       cfWkk: // global
           R2 = R2;
           R1 = Data.Void.$fIxVoid_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfWkl: // global
           I64[Sp - 8] = block_cfWkg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufWkp; else goto cfWkh;
       ufWkp: // global
           call _cfWkg(R1) args: 0, res: 0, upd: 0;
       cfWkh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fIxVoid_$cunsafeRangeSize_info" {
     Data.Void.$fIxVoid_$cunsafeRangeSize_info:
         const Data.Void.$fIxVoid_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfWkg() //  [R1]
         { []
         }
     {offset
       cfWkg: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWkg_info" {
     block_cfWkg_info:
         const _cfWkg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.558687666 UTC

[section ""data" . Data.Void.$fIxVoid_closure" {
     Data.Void.$fIxVoid_closure:
         const GHC.Arr.C:Ix_con_info;
         const Data.Void.$fOrdVoid_closure+1;
         const Data.Void.$fIxVoid_$crange_closure+1;
         const Data.Void.$fIxVoid_$cindex_closure+2;
         const Data.Void.$fIxVoid_$cindex_closure+2;
         const Data.Void.$fIxVoid_$cinRange_closure+2;
         const Data.Void.$fIxVoid_$crangeSize_closure+1;
         const Data.Void.$fIxVoid_$cunsafeRangeSize_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.561097844 UTC

[section ""cstring" . Data.Void.$fDataVoid5_bytes" {
     Data.Void.$fDataVoid5_bytes:
         I8[] [86,111,105,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.56369311 UTC

[section ""data" . Data.Void.$fDataVoid4_closure" {
     Data.Void.$fDataVoid4_closure:
         const Data.Void.$fDataVoid4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Void.$fDataVoid4_entry() //  [R1]
         { []
         }
     {offset
       cfWkJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWkK; else goto cfWkL;
       cfWkK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfWkL: // global
           (_cfWkG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfWkG::I64 == 0) goto cfWkI; else goto cfWkH;
       cfWkI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfWkH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfWkG::I64;
           R2 = Data.Void.$fDataVoid5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid4_info" {
     Data.Void.$fDataVoid4_info:
         const Data.Void.$fDataVoid4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.567362592 UTC

[section ""data" . Data.Void.$fDataVoid3_closure" {
     Data.Void.$fDataVoid3_closure:
         const Data.Data.AlgRep_con_info;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.569085454 UTC

[section ""data" . Data.Void.$tVoid_closure" {
     Data.Void.$tVoid_closure:
         const Data.Data.DataType_con_info;
         const Data.Void.$fDataVoid4_closure;
         const Data.Void.$fDataVoid3_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.571223416 UTC

[section ""data" . Data.Void.$fDataVoid_$cdataTypeOf_closure" {
     Data.Void.$fDataVoid_$cdataTypeOf_closure:
         const Data.Void.$fDataVoid_$cdataTypeOf_info;
         const 0;
 },
 Data.Void.$fDataVoid_$cdataTypeOf_entry() //  []
         { []
         }
     {offset
       cfWkZ: // global
           R1 = Data.Void.$tVoid_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cdataTypeOf_info" {
     Data.Void.$fDataVoid_$cdataTypeOf_info:
         const Data.Void.$fDataVoid_$cdataTypeOf_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfVVU_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.574381206 UTC

[section ""cstring" . Data.Void.$trModule4_bytes" {
     Data.Void.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.576088124 UTC

[section ""data" . Data.Void.$trModule3_closure" {
     Data.Void.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Void.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.57821916 UTC

[section ""cstring" . Data.Void.$trModule2_bytes" {
     Data.Void.$trModule2_bytes:
         I8[] [68,97,116,97,46,86,111,105,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.579898501 UTC

[section ""data" . Data.Void.$trModule1_closure" {
     Data.Void.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Void.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.581736463 UTC

[section ""data" . Data.Void.$trModule_closure" {
     Data.Void.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Void.$trModule3_closure+1;
         const Data.Void.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.583520178 UTC

[section ""data" . Data.Void.$fDataVoid7_closure" {
     Data.Void.$fDataVoid7_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Void.$fDataVoid5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.585390536 UTC

[section ""data" . Data.Void.$tcVoid_closure" {
     Data.Void.$tcVoid_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Void.$trModule_closure+1;
         const Data.Void.$fDataVoid7_closure+1;
         const GHC.Types.krep$*_closure;
         const 1716938828100304260;
         const 9065598981067935587;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.588805878 UTC

[section ""data" . Data.Void.$fDataVoid6_closure" {
     Data.Void.$fDataVoid6_closure:
         const Data.Void.$fDataVoid6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Void.$fDataVoid6_entry() //  [R1]
         { []
         }
     {offset
       cfWlp: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfWlq; else goto cfWlr;
       cfWlq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfWlr: // global
           (_cfWlh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfWlh::I64 == 0) goto cfWlj; else goto cfWli;
       cfWlj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfWli: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfWlh::I64;
           I64[Sp - 24] = block_cfWlk_info;
           R6 = 0;
           R5 = Data.Void.$fDataVoid7_closure+1;
           R4 = Data.Void.$trModule_closure+1;
           R3 = 9065598981067935587;
           R2 = 1716938828100304260;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid6_info" {
     Data.Void.$fDataVoid6_info:
         const Data.Void.$fDataVoid6_entry;
         const 0;
         const 4294967317;
         const SfVVU_srt+80;
 },
 _cfWlk() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfWlk: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfWll() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfWlk_info" {
     block_cfWlk_info:
         const _cfWlk;
         const 0;
         const 30;
 },
 _cfWll() //  []
         { []
         }
     {offset
       cfWll: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfWlu; else goto cfWlt;
       cfWlu: // global
           HpAlloc = 48;
           I64[Sp] = block_cfWll_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfWlt: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfWll_info" {
     block_cfWll_info:
         const _cfWll;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.597156377 UTC

[section ""data" . Data.Void.$fDataVoid_$cdataCast1_closure" {
     Data.Void.$fDataVoid_$cdataCast1_closure:
         const Data.Void.$fDataVoid_$cdataCast1_info;
 },
 Data.Void.$fDataVoid_$cdataCast1_entry() //  []
         { []
         }
     {offset
       cfWlU: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cdataCast1_info" {
     Data.Void.$fDataVoid_$cdataCast1_info:
         const Data.Void.$fDataVoid_$cdataCast1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.605086031 UTC

[section ""data" . Data.Void.$w$cgmapMp_closure" {
     Data.Void.$w$cgmapMp_closure:
         const Data.Void.$w$cgmapMp_info;
 },
 lvl2_sfVUD_entry() //  [R1]
         { []
         }
     {offset
       cfWma: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWmb; else goto cfWmc;
       cfWmb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfWmc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_sfVUD_info" {
     lvl2_sfVUD_info:
         const lvl2_sfVUD_entry;
         const 1;
         const 16;
 },
 sat_sfVUL_entry() //  [R1, R2]
         { []
         }
     {offset
       cfWmp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfWmq; else goto cfWmr;
       cfWmq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfWmr: // global
           I64[Sp - 24] = block_cfWmm_info;
           _sfVUD::P64 = P64[R1 + 7];
           _sfVUE::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfVUD::P64;
           P64[Sp - 8] = _sfVUE::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufWmJ; else goto cfWmn;
       ufWmJ: // global
           call _cfWmm(R1) args: 0, res: 0, upd: 0;
       cfWmn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfVUL_info" {
     sat_sfVUL_info:
         const sat_sfVUL_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfWmm() //  [R1]
         { []
         }
     {offset
       cfWmm: // global
           I64[Sp - 8] = block_cfWmu_info;
           _sfVUI::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfVUI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufWmI; else goto cfWmw;
       ufWmI: // global
           call _cfWmu(R1) args: 0, res: 0, upd: 0;
       cfWmw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWmm_info" {
     block_cfWmm_info:
         const _cfWmm;
         const 2;
         const 30;
 },
 _cfWmu() //  [R1]
         { []
         }
     {offset
       cfWmu: // global
           if (R1 & 7 == 1) goto cfWmC; else goto cfWmG;
       cfWmC: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfWmG: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWmu_info" {
     block_cfWmu_info:
         const _cfWmu;
         const 3;
         const 30;
 },
 Data.Void.$w$cgmapMp_entry() //  [R2, R3]
         { []
         }
     {offset
       cfWmK: // global
           _sfVUC::P64 = R3;
           _sfVUB::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfWmL; else goto cfWmM;
       cfWmM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfWmO; else goto cfWmN;
       cfWmO: // global
           HpAlloc = 24;
           goto cfWmL;
       cfWmL: // global
           R3 = _sfVUC::P64;
           R2 = _sfVUB::P64;
           R1 = Data.Void.$w$cgmapMp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfWmN: // global
           I64[Hp - 16] = lvl2_sfVUD_info;
           P64[Hp] = _sfVUB::P64;
           I64[Sp - 24] = block_cfWmd_info;
           R2 = _sfVUB::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _sfVUC::P64;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$w$cgmapMp_info" {
     Data.Void.$w$cgmapMp_info:
         const Data.Void.$w$cgmapMp_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfWmd() //  [R1]
         { []
         }
     {offset
       cfWmd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfWmR; else goto cfWmQ;
       cfWmR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfWmQ: // global
           I64[Hp - 16] = sat_sfVUL_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = Hp - 15;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWmd_info" {
     block_cfWmd_info:
         const _cfWmd;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.618637083 UTC

[section ""data" . Data.Void.$fDataVoid_$cgmapMp_closure" {
     Data.Void.$fDataVoid_$cgmapMp_closure:
         const Data.Void.$fDataVoid_$cgmapMp_info;
 },
 Data.Void.$fDataVoid_$cgmapMp_entry() //  [R2, R4]
         { []
         }
     {offset
       cfWnr: // global
           R3 = R4;
           R2 = R2;
           call Data.Void.$w$cgmapMp_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cgmapMp_info" {
     Data.Void.$fDataVoid_$cgmapMp_info:
         const Data.Void.$fDataVoid_$cgmapMp_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.622223654 UTC

[section ""data" . Data.Void.$fDataVoid_$cgmapM_closure" {
     Data.Void.$fDataVoid_$cgmapM_closure:
         const Data.Void.$fDataVoid_$cgmapM_info;
 },
 Data.Void.$fDataVoid_$cgmapM_entry() //  [R4]
         { []
         }
     {offset
       cfWnC: // global
           R1 = R4 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cgmapM_info" {
     Data.Void.$fDataVoid_$cgmapM_info:
         const Data.Void.$fDataVoid_$cgmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.625941264 UTC

[section ""data" . Data.Void.$fDataVoid_$cgmapQi_closure" {
     Data.Void.$fDataVoid_$cgmapQi_closure:
         const Data.Void.$fDataVoid_$cgmapQi_info;
 },
 Data.Void.$fDataVoid_$cgmapQi_entry() //  [R4]
         { []
         }
     {offset
       cfWnP: // global
           R1 = R4 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cgmapQi_info" {
     Data.Void.$fDataVoid_$cgmapQi_info:
         const Data.Void.$fDataVoid_$cgmapQi_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.629939851 UTC

[section ""data" . Data.Void.$fDataVoid_$cgmapQr_closure" {
     Data.Void.$fDataVoid_$cgmapQr_closure:
         const Data.Void.$fDataVoid_$cgmapQr_info;
 },
 Data.Void.$fDataVoid_$cgmapQr_entry() //  [R5]
         { []
         }
     {offset
       cfWo2: // global
           R1 = R5 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cgmapQr_info" {
     Data.Void.$fDataVoid_$cgmapQr_info:
         const Data.Void.$fDataVoid_$cgmapQr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.634037022 UTC

[section ""data" . Data.Void.$fDataVoid_$cgmapQ_closure" {
     Data.Void.$fDataVoid_$cgmapQ_closure:
         const Data.Void.$fDataVoid_$cgmapQ_info;
 },
 Data.Void.$fDataVoid_$cgmapQ_entry() //  [R3]
         { []
         }
     {offset
       cfWof: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cgmapQ_info" {
     Data.Void.$fDataVoid_$cgmapQ_info:
         const Data.Void.$fDataVoid_$cgmapQ_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.637414819 UTC

[section ""data" . Data.Void.$fDataVoid1_closure" {
     Data.Void.$fDataVoid1_closure:
         const Data.Void.$fDataVoid1_info;
 },
 Data.Void.$fDataVoid1_entry() //  [R5]
         { []
         }
     {offset
       cfWos: // global
           R1 = R5 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid1_info" {
     Data.Void.$fDataVoid1_info:
         const Data.Void.$fDataVoid1_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.6408423 UTC

[section ""data" . Data.Void.$fDataVoid2_closure" {
     Data.Void.$fDataVoid2_closure:
         const Data.Void.$fDataVoid2_info;
 },
 Data.Void.$fDataVoid2_entry() //  [R3]
         { []
         }
     {offset
       cfWoF: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid2_info" {
     Data.Void.$fDataVoid2_info:
         const Data.Void.$fDataVoid2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.64430885 UTC

[section ""data" . Data.Void.$fDataVoid_$cdataCast2_closure" {
     Data.Void.$fDataVoid_$cdataCast2_closure:
         const Data.Void.$fDataVoid_$cdataCast2_info;
 },
 Data.Void.$fDataVoid_$cdataCast2_entry() //  []
         { []
         }
     {offset
       cfWoS: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cdataCast2_info" {
     Data.Void.$fDataVoid_$cdataCast2_info:
         const Data.Void.$fDataVoid_$cdataCast2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.650483608 UTC

[section ""data" . Data.Void.$w$cgmapMo_closure" {
     Data.Void.$w$cgmapMo_closure:
         const Data.Void.$w$cgmapMo_info;
 },
 lvl2_sfVVh_entry() //  [R1]
         { []
         }
     {offset
       cfWp8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWp9; else goto cfWpa;
       cfWp9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfWpa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_sfVVh_info" {
     lvl2_sfVVh_info:
         const lvl2_sfVVh_entry;
         const 1;
         const 16;
 },
 sat_sfVVp_entry() //  [R1, R2]
         { []
         }
     {offset
       cfWpn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfWpo; else goto cfWpp;
       cfWpo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfWpp: // global
           I64[Sp - 24] = block_cfWpk_info;
           _sfVVh::P64 = P64[R1 + 7];
           _sfVVi::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfVVh::P64;
           P64[Sp - 8] = _sfVVi::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufWpH; else goto cfWpl;
       ufWpH: // global
           call _cfWpk(R1) args: 0, res: 0, upd: 0;
       cfWpl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfVVp_info" {
     sat_sfVVp_info:
         const sat_sfVVp_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfWpk() //  [R1]
         { []
         }
     {offset
       cfWpk: // global
           I64[Sp - 8] = block_cfWps_info;
           _sfVVm::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfVVm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufWpG; else goto cfWpu;
       ufWpG: // global
           call _cfWps(R1) args: 0, res: 0, upd: 0;
       cfWpu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWpk_info" {
     block_cfWpk_info:
         const _cfWpk;
         const 2;
         const 30;
 },
 _cfWps() //  [R1]
         { []
         }
     {offset
       cfWps: // global
           if (R1 & 7 == 1) goto cfWpA; else goto cfWpE;
       cfWpA: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfWpE: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWps_info" {
     block_cfWps_info:
         const _cfWps;
         const 3;
         const 30;
 },
 Data.Void.$w$cgmapMo_entry() //  [R2, R3]
         { []
         }
     {offset
       cfWpI: // global
           _sfVVg::P64 = R3;
           _sfVVf::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfWpJ; else goto cfWpK;
       cfWpK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfWpM; else goto cfWpL;
       cfWpM: // global
           HpAlloc = 24;
           goto cfWpJ;
       cfWpJ: // global
           R3 = _sfVVg::P64;
           R2 = _sfVVf::P64;
           R1 = Data.Void.$w$cgmapMo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfWpL: // global
           I64[Hp - 16] = lvl2_sfVVh_info;
           P64[Hp] = _sfVVf::P64;
           I64[Sp - 24] = block_cfWpb_info;
           R2 = _sfVVf::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _sfVVg::P64;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$w$cgmapMo_info" {
     Data.Void.$w$cgmapMo_info:
         const Data.Void.$w$cgmapMo_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfWpb() //  [R1]
         { []
         }
     {offset
       cfWpb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfWpP; else goto cfWpO;
       cfWpP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfWpO: // global
           I64[Hp - 16] = sat_sfVVp_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = Hp - 15;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWpb_info" {
     block_cfWpb_info:
         const _cfWpb;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.662629768 UTC

[section ""data" . Data.Void.$fDataVoid_$cgmapMo_closure" {
     Data.Void.$fDataVoid_$cgmapMo_closure:
         const Data.Void.$fDataVoid_$cgmapMo_info;
 },
 Data.Void.$fDataVoid_$cgmapMo_entry() //  [R2, R4]
         { []
         }
     {offset
       cfWqp: // global
           R3 = R4;
           R2 = R2;
           call Data.Void.$w$cgmapMo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cgmapMo_info" {
     Data.Void.$fDataVoid_$cgmapMo_info:
         const Data.Void.$fDataVoid_$cgmapMo_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.666548611 UTC

[section ""data" . Data.Void.$fDataVoid_closure" {
     Data.Void.$fDataVoid_closure:
         const Data.Data.C:Data_con_info;
         const Data.Void.$fDataVoid6_closure;
         const Data.Void.$fDataVoid_$cgfoldl_closure+3;
         const Data.Void.$fDataVoid_$cgunfold_closure+3;
         const Data.Void.$fDataVoid_$ctoConstr_closure+1;
         const Data.Void.$fDataVoid_$cdataTypeOf_closure+1;
         const Data.Void.$fDataVoid_$cdataCast1_closure+2;
         const Data.Void.$fDataVoid_$cdataCast2_closure+2;
         const Data.Void.$fDataVoid2_closure+2;
         const Data.Void.$fDataVoid1_closure+4;
         const Data.Void.$fDataVoid_$cgmapQr_closure+4;
         const Data.Void.$fDataVoid_$cgmapQ_closure+2;
         const Data.Void.$fDataVoid_$cgmapQi_closure+3;
         const Data.Void.$fDataVoid_$cgmapM_closure+3;
         const Data.Void.$fDataVoid_$cgmapMp_closure+3;
         const Data.Void.$fDataVoid_$cgmapMo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.66992883 UTC

[section ""data" . Data.Void.$fExceptionVoid_$cfromException_closure" {
     Data.Void.$fExceptionVoid_$cfromException_closure:
         const Data.Void.$fExceptionVoid_$cfromException_info;
         const 0;
 },
 Data.Void.$fExceptionVoid_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       cfWqE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWqI; else goto cfWqJ;
       cfWqI: // global
           R2 = R2;
           R1 = Data.Void.$fExceptionVoid_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfWqJ: // global
           I64[Sp - 8] = block_cfWqB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufWr4; else goto cfWqC;
       ufWr4: // global
           call _cfWqB(R1) args: 0, res: 0, upd: 0;
       cfWqC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fExceptionVoid_$cfromException_info" {
     Data.Void.$fExceptionVoid_$cfromException_info:
         const Data.Void.$fExceptionVoid_$cfromException_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SfVVU_srt+88;
 },
 _cfWqB() //  [R1]
         { []
         }
     {offset
       cfWqB: // global
           I64[Sp - 8] = block_cfWqH_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWqB_info" {
     block_cfWqB_info:
         const _cfWqB;
         const 0;
         const 12884901918;
         const SfVVU_srt+88;
 },
 _cfWqH() //  [R1]
         { []
         }
     {offset
       cfWqH: // global
           I64[Sp] = block_cfWqO_info;
           R3 = Data.Void.$fDataVoid6_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWqH_info" {
     block_cfWqH_info:
         const _cfWqH;
         const 1;
         const 12884901918;
         const SfVVU_srt+88;
 },
 _cfWqO() //  [R1]
         { []
         }
     {offset
       cfWqO: // global
           if (R1 & 7 == 1) goto cfWqV; else goto cfWqZ;
       cfWqV: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfWqZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfWr2; else goto cfWr1;
       cfWr2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfWr1: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWqO_info" {
     block_cfWqO_info:
         const _cfWqO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.678474602 UTC

[section ""data" . Data.Void.$fExceptionVoid_closure" {
     Data.Void.$fExceptionVoid_closure:
         const GHC.Exception.C:Exception_con_info;
         const Data.Void.$fDataVoid6_closure;
         const Data.Void.$fShowVoid_closure+1;
         const Data.Void.$fExceptionVoid_$ctoException_closure+1;
         const Data.Void.$fExceptionVoid_$cfromException_closure+1;
         const Data.Void.$fExceptionVoid_$cshow_closure+1;
         const 0;
 },
 section ""data" . Data.Void.$fExceptionVoid_$ctoException_closure" {
     Data.Void.$fExceptionVoid_$ctoException_closure:
         const Data.Void.$fExceptionVoid_$ctoException_info;
         const 0;
 },
 Data.Void.$fExceptionVoid_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       cfWrv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfWrz; else goto cfWry;
       cfWrz: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Void.$fExceptionVoid_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfWry: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Data.Void.$fExceptionVoid_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fExceptionVoid_$ctoException_info" {
     Data.Void.$fExceptionVoid_$ctoException_info:
         const Data.Void.$fExceptionVoid_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfVVU_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.682976811 UTC

[section ""relreadonly" . SfVVU_srt" {
     SfVVU_srt:
         const Data.Semigroup.Internal.stimesIdempotent_closure;
         const GHC.Read.list_closure;
         const Data.Void.$fReadVoid_$creadListPrec_closure;
         const Data.Void.$fReadVoid1_closure;
         const Control.Exception.Base.patError_closure;
         const Data.Data.$wlvl_closure;
         const Data.Void.$w$cgunfold_closure;
         const lvl1_rfVTf_closure;
         const Data.Void.$fDataVoid_$cgunfold_closure;
         const Data.Void.$tVoid_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Data.Void.$fDataVoid6_closure;
         const Data.Void.$fExceptionVoid_$cfromException_closure;
         const Data.Void.$fExceptionVoid_closure;
         const Data.Void.$fExceptionVoid_$ctoException_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.98150374 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:11:45.982655879 UTC

[section ""data" . Data.Void.$fIxVoid1_closure" {
     Data.Void.$fIxVoid1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.984878532 UTC

[section ""data" . Data.Void.$fIxVoid_$crangeSize_closure" {
     Data.Void.$fIxVoid_$crangeSize_closure:
         const Data.Void.$fIxVoid_$crangeSize_info;
 },
 Data.Void.$fIxVoid_$crangeSize_entry() //  []
         { []
         }
     {offset
       cfWu4: // global
           R1 = Data.Void.$fIxVoid1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fIxVoid_$crangeSize_info" {
     Data.Void.$fIxVoid_$crangeSize_info:
         const Data.Void.$fIxVoid_$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.98864569 UTC

[section ""data" . Data.Void.$fIxVoid_$crange_closure" {
     Data.Void.$fIxVoid_$crange_closure:
         const Data.Void.$fIxVoid_$crange_info;
 },
 Data.Void.$fIxVoid_$crange_entry() //  []
         { []
         }
     {offset
       cfWug: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fIxVoid_$crange_info" {
     Data.Void.$fIxVoid_$crange_info:
         const Data.Void.$fIxVoid_$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.992414392 UTC

[section ""data" . Data.Void.$fSemigroupVoid_$cstimes_closure" {
     Data.Void.$fSemigroupVoid_$cstimes_closure:
         const Data.Void.$fSemigroupVoid_$cstimes_info;
         const 0;
 },
 Data.Void.$fSemigroupVoid_$cstimes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfWut: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotent_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fSemigroupVoid_$cstimes_info" {
     Data.Void.$fSemigroupVoid_$cstimes_info:
         const Data.Void.$fSemigroupVoid_$cstimes_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SfWuw_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.997088638 UTC

[section ""data" . Data.Void.$fOrdVoid_$c<>_closure" {
     Data.Void.$fOrdVoid_$c<>_closure:
         const Data.Void.$fOrdVoid_$c<>_info;
 },
 Data.Void.$fOrdVoid_$c<>_entry() //  [R2]
         { []
         }
     {offset
       cfWuF: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fOrdVoid_$c<>_info" {
     Data.Void.$fOrdVoid_$c<>_info:
         const Data.Void.$fOrdVoid_$c<>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.000976927 UTC

[section ""data" . Data.Void.$fSemigroupVoid_$csconcat_closure" {
     Data.Void.$fSemigroupVoid_$csconcat_closure:
         const Data.Void.$fSemigroupVoid_$csconcat_info;
 },
 Data.Void.$fSemigroupVoid_$csconcat_entry() //  [R2]
         { []
         }
     {offset
       cfWuV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWuZ; else goto cfWv0;
       cfWuZ: // global
           R2 = R2;
           R1 = Data.Void.$fSemigroupVoid_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfWv0: // global
           I64[Sp - 8] = block_cfWuS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufWv8; else goto cfWuT;
       ufWv8: // global
           call _cfWuS(R1) args: 0, res: 0, upd: 0;
       cfWuT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fSemigroupVoid_$csconcat_info" {
     Data.Void.$fSemigroupVoid_$csconcat_info:
         const Data.Void.$fSemigroupVoid_$csconcat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfWuS() //  [R1]
         { []
         }
     {offset
       cfWuS: // global
           I64[Sp - 8] = block_cfWuY_info;
           _sfWrO::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfWrO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufWv7; else goto cfWv2;
       ufWv7: // global
           call _cfWuY() args: 0, res: 0, upd: 0;
       cfWv2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWuS_info" {
     block_cfWuS_info:
         const _cfWuS;
         const 0;
         const 30;
 },
 _cfWuY() //  []
         { []
         }
     {offset
       cfWuY: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWuY_info" {
     block_cfWuY_info:
         const _cfWuY;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.007397004 UTC

[section ""data" . Data.Void.$fSemigroupVoid_closure" {
     Data.Void.$fSemigroupVoid_closure:
         const GHC.Base.C:Semigroup_con_info;
         const Data.Void.$fOrdVoid_$c<>_closure+2;
         const Data.Void.$fSemigroupVoid_$csconcat_closure+1;
         const Data.Void.$fSemigroupVoid_$cstimes_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.00944478 UTC

[section ""data" . Data.Void.$fShowVoid_$cshowsPrec_closure" {
     Data.Void.$fShowVoid_$cshowsPrec_closure:
         const Data.Void.$fShowVoid_$cshowsPrec_info;
 },
 Data.Void.$fShowVoid_$cshowsPrec_entry() //  [R3]
         { []
         }
     {offset
       cfWvv: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fShowVoid_$cshowsPrec_info" {
     Data.Void.$fShowVoid_$cshowsPrec_info:
         const Data.Void.$fShowVoid_$cshowsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.012702153 UTC

[section ""data" . Data.Void.$fExceptionVoid_$cshow_closure" {
     Data.Void.$fExceptionVoid_$cshow_closure:
         const Data.Void.$fExceptionVoid_$cshow_info;
 },
 Data.Void.$fExceptionVoid_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cfWvI: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fExceptionVoid_$cshow_info" {
     Data.Void.$fExceptionVoid_$cshow_info:
         const Data.Void.$fExceptionVoid_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.016412781 UTC

[section ""data" . Data.Void.$fShowVoid1_closure" {
     Data.Void.$fShowVoid1_closure:
         const Data.Void.$fShowVoid1_info;
 },
 Data.Void.$fShowVoid1_entry() //  [R2]
         { []
         }
     {offset
       cfWvV: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fShowVoid1_info" {
     Data.Void.$fShowVoid1_info:
         const Data.Void.$fShowVoid1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.019759988 UTC

[section ""data" . Data.Void.$fShowVoid_$cshowList_closure" {
     Data.Void.$fShowVoid_$cshowList_closure:
         const Data.Void.$fShowVoid_$cshowList_info;
 },
 Data.Void.$fShowVoid_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cfWw8: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Void.$fShowVoid1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fShowVoid_$cshowList_info" {
     Data.Void.$fShowVoid_$cshowList_info:
         const Data.Void.$fShowVoid_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.023040591 UTC

[section ""data" . Data.Void.$fShowVoid_closure" {
     Data.Void.$fShowVoid_closure:
         const GHC.Show.C:Show_con_info;
         const Data.Void.$fShowVoid_$cshowsPrec_closure+2;
         const Data.Void.$fExceptionVoid_$cshow_closure+1;
         const Data.Void.$fShowVoid_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.025780596 UTC

[section ""data" . Data.Void.$fReadVoid2_closure" {
     Data.Void.$fReadVoid2_closure:
         const Data.Void.$fReadVoid2_info;
 },
 Data.Void.$fReadVoid2_entry() //  [R2]
         { []
         }
     {offset
       cfWwk: // global
           R3 = R2;
           R2 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fReadVoid2_info" {
     Data.Void.$fReadVoid2_info:
         const Data.Void.$fReadVoid2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.029099423 UTC

[section ""data" . Data.Void.$fReadVoid_$creadsPrec_closure" {
     Data.Void.$fReadVoid_$creadsPrec_closure:
         const Data.Void.$fReadVoid_$creadsPrec_info;
 },
 Data.Void.$fReadVoid_$creadsPrec_entry() //  [R3]
         { []
         }
     {offset
       cfWww: // global
           R2 = R3;
           call Data.Void.$fReadVoid2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fReadVoid_$creadsPrec_info" {
     Data.Void.$fReadVoid_$creadsPrec_info:
         const Data.Void.$fReadVoid_$creadsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.033160722 UTC

[section ""data" . Data.Void.$fReadVoid_$creadListPrec_closure" {
     Data.Void.$fReadVoid_$creadListPrec_closure:
         const Data.Void.$fReadVoid_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Void.$fReadVoid_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       cfWwJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWwK; else goto cfWwL;
       cfWwK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfWwL: // global
           (_cfWwG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfWwG::I64 == 0) goto cfWwI; else goto cfWwH;
       cfWwI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfWwH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfWwG::I64;
           R2 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Void.$fReadVoid_$creadListPrec_info" {
     Data.Void.$fReadVoid_$creadListPrec_info:
         const Data.Void.$fReadVoid_$creadListPrec_entry;
         const 0;
         const 4294967317;
         const SfWuw_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.037544031 UTC

[section ""data" . Data.Void.$fReadVoid1_closure" {
     Data.Void.$fReadVoid1_closure:
         const Data.Void.$fReadVoid1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Void.$fReadVoid1_entry() //  [R1]
         { []
         }
     {offset
       cfWx1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWx2; else goto cfWx3;
       cfWx2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfWx3: // global
           (_cfWwY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfWwY::I64 == 0) goto cfWx0; else goto cfWwZ;
       cfWx0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfWwZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfWwY::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = Data.Void.$fReadVoid_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Void.$fReadVoid1_info" {
     Data.Void.$fReadVoid1_info:
         const Data.Void.$fReadVoid1_entry;
         const 0;
         const 4294967317;
         const SfWuw_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.041501137 UTC

[section ""data" . Data.Void.$fReadVoid_$creadList_closure" {
     Data.Void.$fReadVoid_$creadList_closure:
         const Data.Void.$fReadVoid_$creadList_info;
         const 0;
 },
 Data.Void.$fReadVoid_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cfWxh: // global
           R3 = R2;
           R2 = Data.Void.$fReadVoid1_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fReadVoid_$creadList_info" {
     Data.Void.$fReadVoid_$creadList_info:
         const Data.Void.$fReadVoid_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfWuw_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.044578481 UTC

[section ""data" . Data.Void.$fReadVoid_closure" {
     Data.Void.$fReadVoid_closure:
         const GHC.Read.C:Read_con_info;
         const Data.Void.$fReadVoid_$creadsPrec_closure+2;
         const Data.Void.$fReadVoid_$creadList_closure+1;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
         const Data.Void.$fReadVoid_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.046564779 UTC

[section ""data" . Data.Void.$fOrdVoid_$ccompare_closure" {
     Data.Void.$fOrdVoid_$ccompare_closure:
         const Data.Void.$fOrdVoid_$ccompare_info;
 },
 Data.Void.$fOrdVoid_$ccompare_entry() //  []
         { []
         }
     {offset
       cfWxt: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fOrdVoid_$ccompare_info" {
     Data.Void.$fOrdVoid_$ccompare_info:
         const Data.Void.$fOrdVoid_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.050409935 UTC

[section ""data" . Data.Void.$fGenericVoid_$cto_closure" {
     Data.Void.$fGenericVoid_$cto_closure:
         const Data.Void.$fGenericVoid_$cto_info;
 },
 Data.Void.$fGenericVoid_$cto_entry() //  [R2]
         { []
         }
     {offset
       cfWxG: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fGenericVoid_$cto_info" {
     Data.Void.$fGenericVoid_$cto_info:
         const Data.Void.$fGenericVoid_$cto_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.053695769 UTC

[section ""data" . Data.Void.$fGenericVoid1_closure" {
     Data.Void.$fGenericVoid1_closure:
         const Data.Void.$fGenericVoid1_info;
 },
 Data.Void.$fGenericVoid1_entry() //  [R2]
         { []
         }
     {offset
       cfWxR: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fGenericVoid1_info" {
     Data.Void.$fGenericVoid1_info:
         const Data.Void.$fGenericVoid1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.057331214 UTC

[section ""data" . Data.Void.$fGenericVoid_closure" {
     Data.Void.$fGenericVoid_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Void.$fGenericVoid1_closure+1;
         const Data.Void.$fGenericVoid_$cto_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.059405377 UTC

[section ""data" . Data.Void.$fDataVoid_$ctoConstr_closure" {
     Data.Void.$fDataVoid_$ctoConstr_closure:
         const Data.Void.$fDataVoid_$ctoConstr_info;
 },
 Data.Void.$fDataVoid_$ctoConstr_entry() //  [R2]
         { []
         }
     {offset
       cfWy5: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$ctoConstr_info" {
     Data.Void.$fDataVoid_$ctoConstr_info:
         const Data.Void.$fDataVoid_$ctoConstr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.062760906 UTC

[section ""cstring" . lvl_rfVTe_bytes" {
     lvl_rfVTe_bytes:
         I8[] [68,97,116,97,47,86,111,105,100,46,104,115,58,51,57,58,53,45,56,124,99,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.06510736 UTC

[section ""data" . lvl1_rfVTf_closure" {
     lvl1_rfVTf_closure:
         const lvl1_rfVTf_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rfVTf_entry() //  [R1]
         { []
         }
     {offset
       cfWyl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWym; else goto cfWyn;
       cfWym: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfWyn: // global
           (_cfWyi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfWyi::I64 == 0) goto cfWyk; else goto cfWyj;
       cfWyk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfWyj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfWyi::I64;
           R2 = lvl_rfVTe_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.patError_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rfVTf_info" {
     lvl1_rfVTf_info:
         const lvl1_rfVTf_entry;
         const 0;
         const 4294967317;
         const SfWuw_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.070050706 UTC

[section ""data" . Data.Void.$w$cgunfold_closure" {
     Data.Void.$w$cgunfold_closure:
         const Data.Void.$w$cgunfold_info;
         const 0;
 },
 Data.Void.$w$cgunfold_entry() //  [R2, R3]
         { []
         }
     {offset
       cfWyH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWyI; else goto cfWyJ;
       cfWyI: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Void.$w$cgunfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfWyJ: // global
           I64[Sp - 16] = block_cfWyA_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufWyX; else goto cfWyB;
       ufWyX: // global
           call _cfWyA(R1) args: 0, res: 0, upd: 0;
       cfWyB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$w$cgunfold_info" {
     Data.Void.$w$cgunfold_info:
         const Data.Void.$w$cgunfold_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SfWuw_srt+40;
 },
 _cfWyA() //  [R1]
         { []
         }
     {offset
       cfWyA: // global
           if (R1 & 7 == 1) goto cfWyF; else goto cfWyE;
       cfWyF: // global
           I64[Sp + 8] = block_cfWyP_info;
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ufWyW; else goto cfWyR;
       ufWyW: // global
           call _cfWyP() args: 0, res: 0, upd: 0;
       cfWyR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cfWyE: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Data.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWyA_info" {
     block_cfWyA_info:
         const _cfWyA;
         const 1;
         const 21474836510;
         const SfWuw_srt+40;
 },
 _cfWyP() //  []
         { []
         }
     {offset
       cfWyP: // global
           R1 = lvl1_rfVTf_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWyP_info" {
     block_cfWyP_info:
         const _cfWyP;
         const 0;
         const 4294967326;
         const SfWuw_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.077501151 UTC

[section ""data" . Data.Void.$fDataVoid_$cgunfold_closure" {
     Data.Void.$fDataVoid_$cgunfold_closure:
         const Data.Void.$fDataVoid_$cgunfold_info;
         const 0;
 },
 Data.Void.$fDataVoid_$cgunfold_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfWzm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWzq; else goto cfWzr;
       cfWzq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Void.$fDataVoid_$cgunfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfWzr: // global
           I64[Sp - 8] = block_cfWzj_info;
           R1 = R4;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufWzz; else goto cfWzk;
       ufWzz: // global
           call _cfWzj(R1) args: 0, res: 0, upd: 0;
       cfWzk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cgunfold_info" {
     Data.Void.$fDataVoid_$cgunfold_info:
         const Data.Void.$fDataVoid_$cgunfold_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SfWuw_srt+48;
 },
 _cfWzj() //  [R1]
         { []
         }
     {offset
       cfWzj: // global
           I64[Sp - 8] = block_cfWzp_info;
           _sfWsk::P64 = P64[R1 + 7];
           R1 = P64[R1 + 39];
           P64[Sp] = _sfWsk::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufWzy; else goto cfWzt;
       ufWzy: // global
           call _cfWzp(R1) args: 0, res: 0, upd: 0;
       cfWzt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWzj_info" {
     block_cfWzj_info:
         const _cfWzj;
         const 0;
         const 4294967326;
         const SfWuw_srt+48;
 },
 _cfWzp() //  [R1]
         { []
         }
     {offset
       cfWzp: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Void.$w$cgunfold_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWzp_info" {
     block_cfWzp_info:
         const _cfWzp;
         const 1;
         const 4294967326;
         const SfWuw_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.084128371 UTC

[section ""data" . Data.Void.$fDataVoid_$cgfoldl_closure" {
     Data.Void.$fDataVoid_$cgfoldl_closure:
         const Data.Void.$fDataVoid_$cgfoldl_info;
 },
 Data.Void.$fDataVoid_$cgfoldl_entry() //  [R4]
         { []
         }
     {offset
       cfWzT: // global
           R1 = R4 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cgfoldl_info" {
     Data.Void.$fDataVoid_$cgfoldl_info:
         const Data.Void.$fDataVoid_$cgfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.087721012 UTC

[section ""data" . Data.Void.$fEqVoid_$c==_closure" {
     Data.Void.$fEqVoid_$c==_closure:
         const Data.Void.$fEqVoid_$c==_info;
 },
 Data.Void.$fEqVoid_$c==_entry() //  []
         { []
         }
     {offset
       cfWA6: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fEqVoid_$c==_info" {
     Data.Void.$fEqVoid_$c==_info:
         const Data.Void.$fEqVoid_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.091440345 UTC

[section ""data" . Data.Void.$fEqVoid_$c/=_closure" {
     Data.Void.$fEqVoid_$c/=_closure:
         const Data.Void.$fEqVoid_$c/=_info;
 },
 Data.Void.$fEqVoid_$c/=_entry() //  []
         { []
         }
     {offset
       cfWAj: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fEqVoid_$c/=_info" {
     Data.Void.$fEqVoid_$c/=_info:
         const Data.Void.$fEqVoid_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.094528874 UTC

[section ""data" . Data.Void.$fEqVoid_closure" {
     Data.Void.$fEqVoid_closure:
         const GHC.Classes.C:Eq_con_info;
         const Data.Void.$fEqVoid_$c==_closure+2;
         const Data.Void.$fEqVoid_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.096497753 UTC

[section ""data" . Data.Void.$fOrdVoid_$c<_closure" {
     Data.Void.$fOrdVoid_$c<_closure:
         const Data.Void.$fOrdVoid_$c<_info;
 },
 Data.Void.$fOrdVoid_$c<_entry() //  []
         { []
         }
     {offset
       cfWAx: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fOrdVoid_$c<_info" {
     Data.Void.$fOrdVoid_$c<_info:
         const Data.Void.$fOrdVoid_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.10032782 UTC

[section ""data" . Data.Void.$fOrdVoid_$cmax_closure" {
     Data.Void.$fOrdVoid_$cmax_closure:
         const Data.Void.$fOrdVoid_$cmax_info;
 },
 Data.Void.$fOrdVoid_$cmax_entry() //  [R3]
         { []
         }
     {offset
       cfWAK: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fOrdVoid_$cmax_info" {
     Data.Void.$fOrdVoid_$cmax_info:
         const Data.Void.$fOrdVoid_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.103548869 UTC

[section ""data" . Data.Void.$fOrdVoid_closure" {
     Data.Void.$fOrdVoid_closure:
         const GHC.Classes.C:Ord_con_info;
         const Data.Void.$fEqVoid_closure+1;
         const Data.Void.$fOrdVoid_$ccompare_closure+2;
         const Data.Void.$fOrdVoid_$c<_closure+2;
         const Data.Void.$fEqVoid_$c==_closure+2;
         const Data.Void.$fOrdVoid_$c<_closure+2;
         const Data.Void.$fEqVoid_$c==_closure+2;
         const Data.Void.$fOrdVoid_$cmax_closure+2;
         const Data.Void.$fOrdVoid_$c<>_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.105661367 UTC

[section ""data" . Data.Void.absurd_closure" {
     Data.Void.absurd_closure:
         const Data.Void.absurd_info;
 },
 Data.Void.absurd_entry() //  [R2]
         { []
         }
     {offset
       cfWAY: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.absurd_info" {
     Data.Void.absurd_info:
         const Data.Void.absurd_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.109007293 UTC

[section ""data" . Data.Void.vacuous_closure" {
     Data.Void.vacuous_closure:
         const Data.Void.vacuous_info;
 },
 Data.Void.vacuous_entry() //  [R2]
         { []
         }
     {offset
       cfWBb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWBc; else goto cfWBd;
       cfWBc: // global
           R2 = R2;
           R1 = Data.Void.vacuous_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfWBd: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Void.absurd_closure+1;
           Sp = Sp - 16;
           call GHC.Base.fmap_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.vacuous_info" {
     Data.Void.vacuous_info:
         const Data.Void.vacuous_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.113003229 UTC

[section ""data" . Data.Void.$fIxVoid_$cindex_closure" {
     Data.Void.$fIxVoid_$cindex_closure:
         const Data.Void.$fIxVoid_$cindex_info;
 },
 Data.Void.$fIxVoid_$cindex_entry() //  [R3]
         { []
         }
     {offset
       cfWBp: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fIxVoid_$cindex_info" {
     Data.Void.$fIxVoid_$cindex_info:
         const Data.Void.$fIxVoid_$cindex_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.11629047 UTC

[section ""data" . Data.Void.$fIxVoid_$cinRange_closure" {
     Data.Void.$fIxVoid_$cinRange_closure:
         const Data.Void.$fIxVoid_$cinRange_info;
 },
 Data.Void.$fIxVoid_$cinRange_entry() //  [R3]
         { []
         }
     {offset
       cfWBC: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fIxVoid_$cinRange_info" {
     Data.Void.$fIxVoid_$cinRange_info:
         const Data.Void.$fIxVoid_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.120451374 UTC

[section ""data" . Data.Void.$fIxVoid_$cunsafeRangeSize_closure" {
     Data.Void.$fIxVoid_$cunsafeRangeSize_closure:
         const Data.Void.$fIxVoid_$cunsafeRangeSize_info;
 },
 Data.Void.$fIxVoid_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       cfWBS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfWBT; else goto cfWBU;
       cfWBT: // global
           R2 = R2;
           R1 = Data.Void.$fIxVoid_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfWBU: // global
           I64[Sp - 8] = block_cfWBP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufWBY; else goto cfWBQ;
       ufWBY: // global
           call _cfWBP(R1) args: 0, res: 0, upd: 0;
       cfWBQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fIxVoid_$cunsafeRangeSize_info" {
     Data.Void.$fIxVoid_$cunsafeRangeSize_info:
         const Data.Void.$fIxVoid_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfWBP() //  [R1]
         { []
         }
     {offset
       cfWBP: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWBP_info" {
     block_cfWBP_info:
         const _cfWBP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.125158161 UTC

[section ""data" . Data.Void.$fIxVoid_closure" {
     Data.Void.$fIxVoid_closure:
         const GHC.Arr.C:Ix_con_info;
         const Data.Void.$fOrdVoid_closure+1;
         const Data.Void.$fIxVoid_$crange_closure+1;
         const Data.Void.$fIxVoid_$cindex_closure+2;
         const Data.Void.$fIxVoid_$cindex_closure+2;
         const Data.Void.$fIxVoid_$cinRange_closure+2;
         const Data.Void.$fIxVoid_$crangeSize_closure+1;
         const Data.Void.$fIxVoid_$cunsafeRangeSize_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.127297591 UTC

[section ""cstring" . Data.Void.$fDataVoid5_bytes" {
     Data.Void.$fDataVoid5_bytes:
         I8[] [86,111,105,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.129657924 UTC

[section ""data" . Data.Void.$fDataVoid4_closure" {
     Data.Void.$fDataVoid4_closure:
         const Data.Void.$fDataVoid4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Void.$fDataVoid4_entry() //  [R1]
         { []
         }
     {offset
       cfWCj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWCk; else goto cfWCl;
       cfWCk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfWCl: // global
           (_cfWCg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfWCg::I64 == 0) goto cfWCi; else goto cfWCh;
       cfWCi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfWCh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfWCg::I64;
           R2 = Data.Void.$fDataVoid5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid4_info" {
     Data.Void.$fDataVoid4_info:
         const Data.Void.$fDataVoid4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.133451352 UTC

[section ""data" . Data.Void.$fDataVoid3_closure" {
     Data.Void.$fDataVoid3_closure:
         const Data.Data.AlgRep_con_info;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.135107037 UTC

[section ""data" . Data.Void.$tVoid_closure" {
     Data.Void.$tVoid_closure:
         const Data.Data.DataType_con_info;
         const Data.Void.$fDataVoid4_closure;
         const Data.Void.$fDataVoid3_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.13726326 UTC

[section ""data" . Data.Void.$fDataVoid_$cdataTypeOf_closure" {
     Data.Void.$fDataVoid_$cdataTypeOf_closure:
         const Data.Void.$fDataVoid_$cdataTypeOf_info;
         const 0;
 },
 Data.Void.$fDataVoid_$cdataTypeOf_entry() //  []
         { []
         }
     {offset
       cfWCA: // global
           R1 = Data.Void.$tVoid_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cdataTypeOf_info" {
     Data.Void.$fDataVoid_$cdataTypeOf_info:
         const Data.Void.$fDataVoid_$cdataTypeOf_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfWuw_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.140330395 UTC

[section ""cstring" . Data.Void.$trModule4_bytes" {
     Data.Void.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.142028075 UTC

[section ""data" . Data.Void.$trModule3_closure" {
     Data.Void.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Void.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.143677221 UTC

[section ""cstring" . Data.Void.$trModule2_bytes" {
     Data.Void.$trModule2_bytes:
         I8[] [68,97,116,97,46,86,111,105,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.145823682 UTC

[section ""data" . Data.Void.$trModule1_closure" {
     Data.Void.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Void.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.147523293 UTC

[section ""data" . Data.Void.$trModule_closure" {
     Data.Void.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Void.$trModule3_closure+1;
         const Data.Void.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.149797158 UTC

[section ""data" . Data.Void.$fDataVoid7_closure" {
     Data.Void.$fDataVoid7_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Void.$fDataVoid5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.15152491 UTC

[section ""data" . Data.Void.$tcVoid_closure" {
     Data.Void.$tcVoid_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Void.$trModule_closure+1;
         const Data.Void.$fDataVoid7_closure+1;
         const GHC.Types.krep$*_closure;
         const 1716938828100304260;
         const 9065598981067935587;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.154800886 UTC

[section ""data" . Data.Void.$fDataVoid6_closure" {
     Data.Void.$fDataVoid6_closure:
         const Data.Void.$fDataVoid6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Void.$fDataVoid6_entry() //  [R1]
         { []
         }
     {offset
       cfWD0: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfWD1; else goto cfWD2;
       cfWD1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfWD2: // global
           (_cfWCS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfWCS::I64 == 0) goto cfWCU; else goto cfWCT;
       cfWCU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfWCT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfWCS::I64;
           I64[Sp - 24] = block_cfWCV_info;
           R6 = 0;
           R5 = Data.Void.$fDataVoid7_closure+1;
           R4 = Data.Void.$trModule_closure+1;
           R3 = 9065598981067935587;
           R2 = 1716938828100304260;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid6_info" {
     Data.Void.$fDataVoid6_info:
         const Data.Void.$fDataVoid6_entry;
         const 0;
         const 4294967317;
         const SfWuw_srt+80;
 },
 _cfWCV() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfWCV: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfWCW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfWCV_info" {
     block_cfWCV_info:
         const _cfWCV;
         const 0;
         const 30;
 },
 _cfWCW() //  []
         { []
         }
     {offset
       cfWCW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfWD5; else goto cfWD4;
       cfWD5: // global
           HpAlloc = 48;
           I64[Sp] = block_cfWCW_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfWD4: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfWCW_info" {
     block_cfWCW_info:
         const _cfWCW;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.162537335 UTC

[section ""data" . Data.Void.$fDataVoid_$cdataCast1_closure" {
     Data.Void.$fDataVoid_$cdataCast1_closure:
         const Data.Void.$fDataVoid_$cdataCast1_info;
 },
 Data.Void.$fDataVoid_$cdataCast1_entry() //  []
         { []
         }
     {offset
       cfWDC: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cdataCast1_info" {
     Data.Void.$fDataVoid_$cdataCast1_info:
         const Data.Void.$fDataVoid_$cdataCast1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.168085984 UTC

[section ""data" . Data.Void.$w$cgmapMp_closure" {
     Data.Void.$w$cgmapMp_closure:
         const Data.Void.$w$cgmapMp_info;
 },
 lvl2_sfWt3_entry() //  [R1]
         { []
         }
     {offset
       cfWDT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWDU; else goto cfWDV;
       cfWDU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfWDV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_sfWt3_info" {
     lvl2_sfWt3_info:
         const lvl2_sfWt3_entry;
         const 1;
         const 16;
 },
 sat_sfWtb_entry() //  [R1, R2]
         { []
         }
     {offset
       cfWE8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfWE9; else goto cfWEa;
       cfWE9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfWEa: // global
           I64[Sp - 24] = block_cfWE5_info;
           _sfWt3::P64 = P64[R1 + 7];
           _sfWt4::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfWt3::P64;
           P64[Sp - 8] = _sfWt4::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufWEs; else goto cfWE6;
       ufWEs: // global
           call _cfWE5(R1) args: 0, res: 0, upd: 0;
       cfWE6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfWtb_info" {
     sat_sfWtb_info:
         const sat_sfWtb_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfWE5() //  [R1]
         { []
         }
     {offset
       cfWE5: // global
           I64[Sp - 8] = block_cfWEd_info;
           _sfWt8::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfWt8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufWEr; else goto cfWEf;
       ufWEr: // global
           call _cfWEd(R1) args: 0, res: 0, upd: 0;
       cfWEf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWE5_info" {
     block_cfWE5_info:
         const _cfWE5;
         const 2;
         const 30;
 },
 _cfWEd() //  [R1]
         { []
         }
     {offset
       cfWEd: // global
           if (R1 & 7 == 1) goto cfWEl; else goto cfWEp;
       cfWEl: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfWEp: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWEd_info" {
     block_cfWEd_info:
         const _cfWEd;
         const 3;
         const 30;
 },
 Data.Void.$w$cgmapMp_entry() //  [R2, R3]
         { []
         }
     {offset
       cfWEt: // global
           _sfWt2::P64 = R3;
           _sfWt1::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfWEu; else goto cfWEv;
       cfWEv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfWEx; else goto cfWEw;
       cfWEx: // global
           HpAlloc = 24;
           goto cfWEu;
       cfWEu: // global
           R3 = _sfWt2::P64;
           R2 = _sfWt1::P64;
           R1 = Data.Void.$w$cgmapMp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfWEw: // global
           I64[Hp - 16] = lvl2_sfWt3_info;
           P64[Hp] = _sfWt1::P64;
           I64[Sp - 24] = block_cfWDW_info;
           R2 = _sfWt1::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _sfWt2::P64;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$w$cgmapMp_info" {
     Data.Void.$w$cgmapMp_info:
         const Data.Void.$w$cgmapMp_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfWDW() //  [R1]
         { []
         }
     {offset
       cfWDW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfWEA; else goto cfWEz;
       cfWEA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfWEz: // global
           I64[Hp - 16] = sat_sfWtb_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = Hp - 15;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWDW_info" {
     block_cfWDW_info:
         const _cfWDW;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.18084421 UTC

[section ""data" . Data.Void.$fDataVoid_$cgmapMp_closure" {
     Data.Void.$fDataVoid_$cgmapMp_closure:
         const Data.Void.$fDataVoid_$cgmapMp_info;
 },
 Data.Void.$fDataVoid_$cgmapMp_entry() //  [R2, R4]
         { []
         }
     {offset
       cfWFi: // global
           R3 = R4;
           R2 = R2;
           call Data.Void.$w$cgmapMp_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cgmapMp_info" {
     Data.Void.$fDataVoid_$cgmapMp_info:
         const Data.Void.$fDataVoid_$cgmapMp_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.184541727 UTC

[section ""data" . Data.Void.$fDataVoid_$cgmapM_closure" {
     Data.Void.$fDataVoid_$cgmapM_closure:
         const Data.Void.$fDataVoid_$cgmapM_info;
 },
 Data.Void.$fDataVoid_$cgmapM_entry() //  [R4]
         { []
         }
     {offset
       cfWFt: // global
           R1 = R4 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cgmapM_info" {
     Data.Void.$fDataVoid_$cgmapM_info:
         const Data.Void.$fDataVoid_$cgmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.188475817 UTC

[section ""data" . Data.Void.$fDataVoid_$cgmapQi_closure" {
     Data.Void.$fDataVoid_$cgmapQi_closure:
         const Data.Void.$fDataVoid_$cgmapQi_info;
 },
 Data.Void.$fDataVoid_$cgmapQi_entry() //  [R4]
         { []
         }
     {offset
       cfWFG: // global
           R1 = R4 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cgmapQi_info" {
     Data.Void.$fDataVoid_$cgmapQi_info:
         const Data.Void.$fDataVoid_$cgmapQi_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.191779642 UTC

[section ""data" . Data.Void.$fDataVoid_$cgmapQr_closure" {
     Data.Void.$fDataVoid_$cgmapQr_closure:
         const Data.Void.$fDataVoid_$cgmapQr_info;
 },
 Data.Void.$fDataVoid_$cgmapQr_entry() //  [R5]
         { []
         }
     {offset
       cfWFT: // global
           R1 = R5 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cgmapQr_info" {
     Data.Void.$fDataVoid_$cgmapQr_info:
         const Data.Void.$fDataVoid_$cgmapQr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.195039794 UTC

[section ""data" . Data.Void.$fDataVoid_$cgmapQ_closure" {
     Data.Void.$fDataVoid_$cgmapQ_closure:
         const Data.Void.$fDataVoid_$cgmapQ_info;
 },
 Data.Void.$fDataVoid_$cgmapQ_entry() //  [R3]
         { []
         }
     {offset
       cfWG6: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cgmapQ_info" {
     Data.Void.$fDataVoid_$cgmapQ_info:
         const Data.Void.$fDataVoid_$cgmapQ_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.199032137 UTC

[section ""data" . Data.Void.$fDataVoid1_closure" {
     Data.Void.$fDataVoid1_closure:
         const Data.Void.$fDataVoid1_info;
 },
 Data.Void.$fDataVoid1_entry() //  [R5]
         { []
         }
     {offset
       cfWGj: // global
           R1 = R5 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid1_info" {
     Data.Void.$fDataVoid1_info:
         const Data.Void.$fDataVoid1_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.202302435 UTC

[section ""data" . Data.Void.$fDataVoid2_closure" {
     Data.Void.$fDataVoid2_closure:
         const Data.Void.$fDataVoid2_info;
 },
 Data.Void.$fDataVoid2_entry() //  [R3]
         { []
         }
     {offset
       cfWGw: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid2_info" {
     Data.Void.$fDataVoid2_info:
         const Data.Void.$fDataVoid2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.205567666 UTC

[section ""data" . Data.Void.$fDataVoid_$cdataCast2_closure" {
     Data.Void.$fDataVoid_$cdataCast2_closure:
         const Data.Void.$fDataVoid_$cdataCast2_info;
 },
 Data.Void.$fDataVoid_$cdataCast2_entry() //  []
         { []
         }
     {offset
       cfWGJ: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cdataCast2_info" {
     Data.Void.$fDataVoid_$cdataCast2_info:
         const Data.Void.$fDataVoid_$cdataCast2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.210996859 UTC

[section ""data" . Data.Void.$w$cgmapMo_closure" {
     Data.Void.$w$cgmapMo_closure:
         const Data.Void.$w$cgmapMo_info;
 },
 lvl2_sfWtH_entry() //  [R1]
         { []
         }
     {offset
       cfWH0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWH1; else goto cfWH2;
       cfWH1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfWH2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_sfWtH_info" {
     lvl2_sfWtH_info:
         const lvl2_sfWtH_entry;
         const 1;
         const 16;
 },
 sat_sfWtP_entry() //  [R1, R2]
         { []
         }
     {offset
       cfWHf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfWHg; else goto cfWHh;
       cfWHg: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfWHh: // global
           I64[Sp - 24] = block_cfWHc_info;
           _sfWtH::P64 = P64[R1 + 7];
           _sfWtI::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfWtH::P64;
           P64[Sp - 8] = _sfWtI::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufWHz; else goto cfWHd;
       ufWHz: // global
           call _cfWHc(R1) args: 0, res: 0, upd: 0;
       cfWHd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfWtP_info" {
     sat_sfWtP_info:
         const sat_sfWtP_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfWHc() //  [R1]
         { []
         }
     {offset
       cfWHc: // global
           I64[Sp - 8] = block_cfWHk_info;
           _sfWtM::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfWtM::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufWHy; else goto cfWHm;
       ufWHy: // global
           call _cfWHk(R1) args: 0, res: 0, upd: 0;
       cfWHm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWHc_info" {
     block_cfWHc_info:
         const _cfWHc;
         const 2;
         const 30;
 },
 _cfWHk() //  [R1]
         { []
         }
     {offset
       cfWHk: // global
           if (R1 & 7 == 1) goto cfWHs; else goto cfWHw;
       cfWHs: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfWHw: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWHk_info" {
     block_cfWHk_info:
         const _cfWHk;
         const 3;
         const 30;
 },
 Data.Void.$w$cgmapMo_entry() //  [R2, R3]
         { []
         }
     {offset
       cfWHA: // global
           _sfWtG::P64 = R3;
           _sfWtF::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfWHB; else goto cfWHC;
       cfWHC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfWHE; else goto cfWHD;
       cfWHE: // global
           HpAlloc = 24;
           goto cfWHB;
       cfWHB: // global
           R3 = _sfWtG::P64;
           R2 = _sfWtF::P64;
           R1 = Data.Void.$w$cgmapMo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfWHD: // global
           I64[Hp - 16] = lvl2_sfWtH_info;
           P64[Hp] = _sfWtF::P64;
           I64[Sp - 24] = block_cfWH3_info;
           R2 = _sfWtF::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _sfWtG::P64;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$w$cgmapMo_info" {
     Data.Void.$w$cgmapMo_info:
         const Data.Void.$w$cgmapMo_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfWH3() //  [R1]
         { []
         }
     {offset
       cfWH3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfWHH; else goto cfWHG;
       cfWHH: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfWHG: // global
           I64[Hp - 16] = sat_sfWtP_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = Hp - 15;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWH3_info" {
     block_cfWH3_info:
         const _cfWH3;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.224176004 UTC

[section ""data" . Data.Void.$fDataVoid_$cgmapMo_closure" {
     Data.Void.$fDataVoid_$cgmapMo_closure:
         const Data.Void.$fDataVoid_$cgmapMo_info;
 },
 Data.Void.$fDataVoid_$cgmapMo_entry() //  [R2, R4]
         { []
         }
     {offset
       cfWIp: // global
           R3 = R4;
           R2 = R2;
           call Data.Void.$w$cgmapMo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fDataVoid_$cgmapMo_info" {
     Data.Void.$fDataVoid_$cgmapMo_info:
         const Data.Void.$fDataVoid_$cgmapMo_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.2273039 UTC

[section ""data" . Data.Void.$fDataVoid_closure" {
     Data.Void.$fDataVoid_closure:
         const Data.Data.C:Data_con_info;
         const Data.Void.$fDataVoid6_closure;
         const Data.Void.$fDataVoid_$cgfoldl_closure+3;
         const Data.Void.$fDataVoid_$cgunfold_closure+3;
         const Data.Void.$fDataVoid_$ctoConstr_closure+1;
         const Data.Void.$fDataVoid_$cdataTypeOf_closure+1;
         const Data.Void.$fDataVoid_$cdataCast1_closure+2;
         const Data.Void.$fDataVoid_$cdataCast2_closure+2;
         const Data.Void.$fDataVoid2_closure+2;
         const Data.Void.$fDataVoid1_closure+4;
         const Data.Void.$fDataVoid_$cgmapQr_closure+4;
         const Data.Void.$fDataVoid_$cgmapQ_closure+2;
         const Data.Void.$fDataVoid_$cgmapQi_closure+3;
         const Data.Void.$fDataVoid_$cgmapM_closure+3;
         const Data.Void.$fDataVoid_$cgmapMp_closure+3;
         const Data.Void.$fDataVoid_$cgmapMo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.231105488 UTC

[section ""data" . Data.Void.$fExceptionVoid_$cfromException_closure" {
     Data.Void.$fExceptionVoid_$cfromException_closure:
         const Data.Void.$fExceptionVoid_$cfromException_info;
         const 0;
 },
 Data.Void.$fExceptionVoid_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       cfWIE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfWII; else goto cfWIJ;
       cfWII: // global
           R2 = R2;
           R1 = Data.Void.$fExceptionVoid_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfWIJ: // global
           I64[Sp - 8] = block_cfWIB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufWJ4; else goto cfWIC;
       ufWJ4: // global
           call _cfWIB(R1) args: 0, res: 0, upd: 0;
       cfWIC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fExceptionVoid_$cfromException_info" {
     Data.Void.$fExceptionVoid_$cfromException_info:
         const Data.Void.$fExceptionVoid_$cfromException_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SfWuw_srt+88;
 },
 _cfWIB() //  [R1]
         { []
         }
     {offset
       cfWIB: // global
           I64[Sp - 8] = block_cfWIH_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWIB_info" {
     block_cfWIB_info:
         const _cfWIB;
         const 0;
         const 12884901918;
         const SfWuw_srt+88;
 },
 _cfWIH() //  [R1]
         { []
         }
     {offset
       cfWIH: // global
           I64[Sp] = block_cfWIO_info;
           R3 = Data.Void.$fDataVoid6_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWIH_info" {
     block_cfWIH_info:
         const _cfWIH;
         const 1;
         const 12884901918;
         const SfWuw_srt+88;
 },
 _cfWIO() //  [R1]
         { []
         }
     {offset
       cfWIO: // global
           if (R1 & 7 == 1) goto cfWIV; else goto cfWIZ;
       cfWIV: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfWIZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfWJ2; else goto cfWJ1;
       cfWJ2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfWJ1: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfWIO_info" {
     block_cfWIO_info:
         const _cfWIO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.239728159 UTC

[section ""data" . Data.Void.$fExceptionVoid_closure" {
     Data.Void.$fExceptionVoid_closure:
         const GHC.Exception.C:Exception_con_info;
         const Data.Void.$fDataVoid6_closure;
         const Data.Void.$fShowVoid_closure+1;
         const Data.Void.$fExceptionVoid_$ctoException_closure+1;
         const Data.Void.$fExceptionVoid_$cfromException_closure+1;
         const Data.Void.$fExceptionVoid_$cshow_closure+1;
         const 0;
 },
 section ""data" . Data.Void.$fExceptionVoid_$ctoException_closure" {
     Data.Void.$fExceptionVoid_$ctoException_closure:
         const Data.Void.$fExceptionVoid_$ctoException_info;
         const 0;
 },
 Data.Void.$fExceptionVoid_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       cfWJA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfWJE; else goto cfWJD;
       cfWJE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Void.$fExceptionVoid_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfWJD: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Data.Void.$fExceptionVoid_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Void.$fExceptionVoid_$ctoException_info" {
     Data.Void.$fExceptionVoid_$ctoException_info:
         const Data.Void.$fExceptionVoid_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfWuw_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:46.243862002 UTC

[section ""relreadonly" . SfWuw_srt" {
     SfWuw_srt:
         const Data.Semigroup.Internal.stimesIdempotent_closure;
         const GHC.Read.list_closure;
         const Data.Void.$fReadVoid_$creadListPrec_closure;
         const Data.Void.$fReadVoid1_closure;
         const Control.Exception.Base.patError_closure;
         const Data.Data.$wlvl_closure;
         const Data.Void.$w$cgunfold_closure;
         const lvl1_rfVTf_closure;
         const Data.Void.$fDataVoid_$cgunfold_closure;
         const Data.Void.$tVoid_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Data.Void.$fDataVoid6_closure;
         const Data.Void.$fExceptionVoid_$cfromException_closure;
         const Data.Void.$fExceptionVoid_closure;
         const Data.Void.$fExceptionVoid_$ctoException_closure;
 }]

