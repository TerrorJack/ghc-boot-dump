
==================== Raw Cmm ====================
2018-03-16 16:01:57.094512374 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:01:57.096926221 UTC

[section ""data" . Data.Monoid.$fMonoidFirst_$c<>_closure" {
     Data.Monoid.$fMonoidFirst_$c<>_closure:
         const Data.Monoid.$fMonoidFirst_$c<>_info;
 },
 Data.Monoid.$fMonoidFirst_$c<>_entry() //  [R2, R3]
         { []
         }
     {offset
       c6IPx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6IPy; else goto c6IPz;
       c6IPy: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fMonoidFirst_$c<>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6IPz: // global
           I64[Sp - 16] = block_c6IPq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6IPG; else goto c6IPr;
       u6IPG: // global
           call _c6IPq(R1) args: 0, res: 0, upd: 0;
       c6IPr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fMonoidFirst_$c<>_info" {
     Data.Monoid.$fMonoidFirst_$c<>_info:
         const Data.Monoid.$fMonoidFirst_$c<>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6IPq() //  [R1]
         { []
         }
     {offset
       c6IPq: // global
           if (R1 & 7 == 1) goto c6IPu; else goto c6IPv;
       c6IPu: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c6IPv: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6IPq_info" {
     block_c6IPq_info:
         const _c6IPq;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.103962516 UTC

[section ""data" . Data.Monoid.$fSemigroupFirst1_closure" {
     Data.Monoid.$fSemigroupFirst1_closure:
         const Data.Monoid.$fSemigroupFirst1_info;
 },
 Data.Monoid.$fSemigroupFirst1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6IQ7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6IQ8; else goto u6IQt;
       c6IQ8: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fSemigroupFirst1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u6IQt: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c6IPX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Monoid.$fSemigroupFirst1_info" {
     Data.Monoid.$fSemigroupFirst1_info:
         const Data.Monoid.$fSemigroupFirst1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6IPX() //  []
         { []
         }
     {offset
       c6IPX: // global
           I64[Sp - 8] = block_c6IQ0_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6IQv; else goto c6IQ1;
       u6IQv: // global
           call _c6IQ0(R1) args: 0, res: 0, upd: 0;
       c6IQ1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6IQ0() //  [R1]
         { []
         }
     {offset
       c6IQ0: // global
           _s6I1B::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6IQ4; else goto c6IQ5;
       c6IQ4: // global
           R1 = _s6I1B::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c6IQ5: // global
           I64[Sp] = block_c6IQf_info;
           _s6I1E::P64 = P64[R1 + 6];
           _s6I1F::P64 = P64[R1 + 14];
           R1 = _s6I1B::P64;
           P64[Sp + 8] = _s6I1F::P64;
           P64[Sp + 16] = _s6I1E::P64;
           if (R1 & 7 != 0) goto u6IQw; else goto c6IQh;
       u6IQw: // global
           call _c6IQf(R1) args: 0, res: 0, upd: 0;
       c6IQh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6IQ0_info" {
     block_c6IQ0_info:
         const _c6IQ0;
         const 130;
         const 30;
 },
 _c6IQf() //  [R1]
         { []
         }
     {offset
       c6IQf: // global
           if (R1 & 7 == 1) goto c6IQn; else goto c6IQr;
       c6IQn: // global
           _s6I1C::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s6I1C::P64;
           Sp = Sp + 8;
           call _c6IPX() args: 0, res: 0, upd: 0;
       c6IQr: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6IQf_info" {
     block_c6IQf_info:
         const _c6IQf;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.112861019 UTC

[section ""data" . Data.Monoid.$fSemigroupFirst_$csconcat_closure" {
     Data.Monoid.$fSemigroupFirst_$csconcat_closure:
         const Data.Monoid.$fSemigroupFirst_$csconcat_info;
 },
 Data.Monoid.$fSemigroupFirst_$csconcat_entry() //  [R2]
         { []
         }
     {offset
       c6IR4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6IR5; else goto c6IR6;
       c6IR5: // global
           R2 = R2;
           R1 = Data.Monoid.$fSemigroupFirst_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6IR6: // global
           I64[Sp - 8] = block_c6IR1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6IRa; else goto c6IR2;
       u6IRa: // global
           call _c6IR1(R1) args: 0, res: 0, upd: 0;
       c6IR2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fSemigroupFirst_$csconcat_info" {
     Data.Monoid.$fSemigroupFirst_$csconcat_info:
         const Data.Monoid.$fSemigroupFirst_$csconcat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6IR1() //  [R1]
         { []
         }
     {offset
       c6IR1: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Monoid.$fSemigroupFirst1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6IR1_info" {
     block_c6IR1_info:
         const _c6IR1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.120667322 UTC

[section ""data" . Data.Monoid.$fMonoidFirst_go_closure" {
     Data.Monoid.$fMonoidFirst_go_closure:
         const Data.Monoid.$fMonoidFirst_go_info;
 },
 Data.Monoid.$fMonoidFirst_go_entry() //  [R2]
         { []
         }
     {offset
       c6IRv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6IRw; else goto u6IRR;
       c6IRw: // global
           R2 = R2;
           R1 = Data.Monoid.$fMonoidFirst_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u6IRR: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c6IRl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Monoid.$fMonoidFirst_go_info" {
     Data.Monoid.$fMonoidFirst_go_info:
         const Data.Monoid.$fMonoidFirst_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6IRl() //  []
         { []
         }
     {offset
       c6IRl: // global
           _s6I1M::P64 = P64[Sp];
           I64[Sp] = block_c6IRo_info;
           R1 = _s6I1M::P64;
           if (R1 & 7 != 0) goto u6IRT; else goto c6IRp;
       u6IRT: // global
           call _c6IRo(R1) args: 0, res: 0, upd: 0;
       c6IRp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6IRo() //  [R1]
         { []
         }
     {offset
       c6IRo: // global
           if (R1 & 7 == 1) goto c6IRs; else goto c6IRt;
       c6IRs: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6IRt: // global
           I64[Sp - 8] = block_c6IRD_info;
           _s6I1P::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s6I1P::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6IRU; else goto c6IRF;
       u6IRU: // global
           call _c6IRD(R1) args: 0, res: 0, upd: 0;
       c6IRF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6IRo_info" {
     block_c6IRo_info:
         const _c6IRo;
         const 0;
         const 30;
 },
 _c6IRD() //  [R1]
         { []
         }
     {offset
       c6IRD: // global
           if (R1 & 7 == 1) goto c6IRL; else goto c6IRP;
       c6IRL: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c6IRl() args: 0, res: 0, upd: 0;
       c6IRP: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6IRD_info" {
     block_c6IRD_info:
         const _c6IRD;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.128962392 UTC

[section ""data" . Data.Monoid.$fSemigroupFirst_closure" {
     Data.Monoid.$fSemigroupFirst_closure:
         const GHC.Base.C:Semigroup_con_info;
         const Data.Monoid.$fMonoidFirst_$c<>_closure+2;
         const Data.Monoid.$fSemigroupFirst_$csconcat_closure+1;
         const Data.Monoid.$fSemigroupFirst_$cstimes_closure+3;
         const 0;
 },
 section ""data" . Data.Monoid.$fMonoidFirst_closure" {
     Data.Monoid.$fMonoidFirst_closure:
         const GHC.Base.C:Monoid_con_info;
         const Data.Monoid.$fSemigroupFirst_closure+1;
         const GHC.Base.Nothing_closure+1;
         const Data.Monoid.$fMonoidFirst_$c<>_closure+2;
         const Data.Monoid.$fMonoidFirst_go_closure+1;
         const 0;
 },
 section ""data" . Data.Monoid.$fSemigroupFirst_$cstimes_closure" {
     Data.Monoid.$fSemigroupFirst_$cstimes_closure:
         const Data.Monoid.$fSemigroupFirst_$cstimes_info;
         const 0;
 },
 Data.Monoid.$fSemigroupFirst_$cstimes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ISo: // global
           R5 = R4;
           R4 = R3;
           R3 = Data.Monoid.$fMonoidFirst_closure+1;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotentMonoid_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fSemigroupFirst_$cstimes_info" {
     Data.Monoid.$fSemigroupFirst_$cstimes_info:
         const Data.Monoid.$fSemigroupFirst_$cstimes_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6I7j_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.134696055 UTC

[section ""data" . Data.Monoid.$fMonoidLast_$c<>_closure" {
     Data.Monoid.$fMonoidLast_$c<>_closure:
         const Data.Monoid.$fMonoidLast_$c<>_info;
 },
 Data.Monoid.$fMonoidLast_$c<>_entry() //  [R2, R3]
         { []
         }
     {offset
       c6ISI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ISJ; else goto c6ISK;
       c6ISJ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fMonoidLast_$c<>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ISK: // global
           I64[Sp - 16] = block_c6ISB_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6ISR; else goto c6ISC;
       u6ISR: // global
           call _c6ISB(R1) args: 0, res: 0, upd: 0;
       c6ISC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fMonoidLast_$c<>_info" {
     Data.Monoid.$fMonoidLast_$c<>_info:
         const Data.Monoid.$fMonoidLast_$c<>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6ISB() //  [R1]
         { []
         }
     {offset
       c6ISB: // global
           if (R1 & 7 == 1) goto c6ISF; else goto c6ISG;
       c6ISF: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c6ISG: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ISB_info" {
     block_c6ISB_info:
         const _c6ISB;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.141913026 UTC

[section ""data" . Data.Monoid.$fSemigroupLast1_closure" {
     Data.Monoid.$fSemigroupLast1_closure:
         const Data.Monoid.$fSemigroupLast1_info;
 },
 Data.Monoid.$fSemigroupLast1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6ITi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ITj; else goto c6ITk;
       c6ITj: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fSemigroupLast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ITk: // global
           I64[Sp - 16] = block_c6ITb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6ITG; else goto c6ITc;
       u6ITG: // global
           call _c6ITb(R1) args: 0, res: 0, upd: 0;
       c6ITc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fSemigroupLast1_info" {
     Data.Monoid.$fSemigroupLast1_info:
         const Data.Monoid.$fSemigroupLast1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6ITb() //  [R1]
         { []
         }
     {offset
       c6ITb: // global
           if (R1 & 7 == 1) goto u6ITD; else goto c6ITg;
       u6ITD: // global
           Sp = Sp + 8;
           call _c6ITx() args: 0, res: 0, upd: 0;
       c6ITg: // global
           I64[Sp] = block_c6ITq_info;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Monoid.$fSemigroupLast1_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ITb_info" {
     block_c6ITb_info:
         const _c6ITb;
         const 1;
         const 30;
 },
 _c6ITq() //  [R1]
         { []
         }
     {offset
       c6ITq: // global
           if (R1 & 7 == 1) goto u6ITE; else goto c6ITB;
       u6ITE: // global
           Sp = Sp + 8;
           call _c6ITx() args: 0, res: 0, upd: 0;
       c6ITB: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ITq_info" {
     block_c6ITq_info:
         const _c6ITq;
         const 1;
         const 30;
 },
 _c6ITx() //  []
         { []
         }
     {offset
       c6ITx: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.150164444 UTC

[section ""data" . Data.Monoid.$fSemigroupLast_$csconcat_closure" {
     Data.Monoid.$fSemigroupLast_$csconcat_closure:
         const Data.Monoid.$fSemigroupLast_$csconcat_info;
 },
 Data.Monoid.$fSemigroupLast_$csconcat_entry() //  [R2]
         { []
         }
     {offset
       c6IUb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6IUc; else goto c6IUd;
       c6IUc: // global
           R2 = R2;
           R1 = Data.Monoid.$fSemigroupLast_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6IUd: // global
           I64[Sp - 8] = block_c6IU8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6IUh; else goto c6IU9;
       u6IUh: // global
           call _c6IU8(R1) args: 0, res: 0, upd: 0;
       c6IU9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fSemigroupLast_$csconcat_info" {
     Data.Monoid.$fSemigroupLast_$csconcat_info:
         const Data.Monoid.$fSemigroupLast_$csconcat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6IU8() //  [R1]
         { []
         }
     {offset
       c6IU8: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Monoid.$fSemigroupLast1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6IU8_info" {
     block_c6IU8_info:
         const _c6IU8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.157519336 UTC

[section ""data" . Data.Monoid.$fMonoidLast_go_closure" {
     Data.Monoid.$fMonoidLast_go_closure:
         const Data.Monoid.$fMonoidLast_go_info;
 },
 Data.Monoid.$fMonoidLast_go_entry() //  [R2]
         { []
         }
     {offset
       c6IUC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6IUD; else goto c6IUE;
       c6IUD: // global
           R2 = R2;
           R1 = Data.Monoid.$fMonoidLast_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6IUE: // global
           I64[Sp - 8] = block_c6IUv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6IUX; else goto c6IUw;
       u6IUX: // global
           call _c6IUv(R1) args: 0, res: 0, upd: 0;
       c6IUw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fMonoidLast_go_info" {
     Data.Monoid.$fMonoidLast_go_info:
         const Data.Monoid.$fMonoidLast_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6IUv() //  [R1]
         { []
         }
     {offset
       c6IUv: // global
           if (R1 & 7 == 1) goto c6IUz; else goto c6IUA;
       c6IUz: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6IUA: // global
           I64[Sp - 8] = block_c6IUK_info;
           R2 = P64[R1 + 14];
           P64[Sp] = P64[R1 + 6];
           Sp = Sp - 8;
           call Data.Monoid.$fMonoidLast_go_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6IUv_info" {
     block_c6IUv_info:
         const _c6IUv;
         const 0;
         const 30;
 },
 _c6IUK() //  [R1]
         { []
         }
     {offset
       c6IUK: // global
           if (R1 & 7 == 1) goto c6IUR; else goto c6IUV;
       c6IUR: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c6IUV: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6IUK_info" {
     block_c6IUK_info:
         const _c6IUK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.165004547 UTC

[section ""data" . Data.Monoid.$fSemigroupLast_closure" {
     Data.Monoid.$fSemigroupLast_closure:
         const GHC.Base.C:Semigroup_con_info;
         const Data.Monoid.$fMonoidLast_$c<>_closure+2;
         const Data.Monoid.$fSemigroupLast_$csconcat_closure+1;
         const Data.Monoid.$fSemigroupLast_$cstimes_closure+3;
         const 0;
 },
 section ""data" . Data.Monoid.$fMonoidLast_closure" {
     Data.Monoid.$fMonoidLast_closure:
         const GHC.Base.C:Monoid_con_info;
         const Data.Monoid.$fSemigroupLast_closure+1;
         const GHC.Base.Nothing_closure+1;
         const Data.Monoid.$fMonoidLast_$c<>_closure+2;
         const Data.Monoid.$fMonoidLast_go_closure+1;
         const 0;
 },
 section ""data" . Data.Monoid.$fSemigroupLast_$cstimes_closure" {
     Data.Monoid.$fSemigroupLast_$cstimes_closure:
         const Data.Monoid.$fSemigroupLast_$cstimes_info;
         const 0;
 },
 Data.Monoid.$fSemigroupLast_$cstimes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6IVo: // global
           R5 = R4;
           R4 = R3;
           R3 = Data.Monoid.$fMonoidLast_closure+1;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotentMonoid_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fSemigroupLast_$cstimes_info" {
     Data.Monoid.$fSemigroupLast_$cstimes_info:
         const Data.Monoid.$fSemigroupLast_$cstimes_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S6I7j_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.17003639 UTC

[section ""data" . Data.Monoid.$fFunctorLast_closure" {
     Data.Monoid.$fFunctorLast_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.Base.$fApplicativeMaybe_$cfmap_closure+2;
         const GHC.Base.$fFunctorMaybe_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.172100274 UTC

[section ""data" . Data.Monoid.$fApplicativeLast_closure" {
     Data.Monoid.$fApplicativeLast_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Monoid.$fFunctorLast_closure+1;
         const GHC.Base.Just_closure+1;
         const GHC.Base.$fApplicativeMaybe_$c<*>_closure+2;
         const GHC.Base.$fApplicativeMaybe_$cliftA2_closure+3;
         const GHC.Base.$fApplicativeMaybe_$c*>_closure+2;
         const GHC.Base.$fApplicativeMaybe_$c<*_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.173954732 UTC

[section ""data" . Data.Monoid.$fMonadLast_closure" {
     Data.Monoid.$fMonadLast_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Monoid.$fApplicativeLast_closure+1;
         const GHC.Base.$fMonadMaybe_$c>>=_closure+2;
         const GHC.Base.$fApplicativeMaybe_$c*>_closure+2;
         const GHC.Base.Just_closure+1;
         const GHC.Base.$fMonadMaybe_$cfail_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.176086151 UTC

[section ""data" . Data.Monoid.$fGeneric1Last1_closure" {
     Data.Monoid.$fGeneric1Last1_closure:
         const Data.Monoid.$fGeneric1Last1_info;
 },
 Data.Monoid.$fGeneric1Last1_entry() //  [R2]
         { []
         }
     {offset
       c6IVE: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fGeneric1Last1_info" {
     Data.Monoid.$fGeneric1Last1_info:
         const Data.Monoid.$fGeneric1Last1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.179427664 UTC

[section ""data" . Data.Monoid.$fGeneric1Last2_closure" {
     Data.Monoid.$fGeneric1Last2_closure:
         const Data.Monoid.$fGeneric1Last2_info;
 },
 Data.Monoid.$fGeneric1Last2_entry() //  [R2]
         { []
         }
     {offset
       c6IVP: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fGeneric1Last2_info" {
     Data.Monoid.$fGeneric1Last2_info:
         const Data.Monoid.$fGeneric1Last2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.182517572 UTC

[section ""data" . Data.Monoid.$fGeneric1Last_closure" {
     Data.Monoid.$fGeneric1Last_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Monoid.$fGeneric1Last2_closure+1;
         const Data.Monoid.$fGeneric1Last1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.184434792 UTC

[section ""data" . Data.Monoid.$fGenericLast1_closure" {
     Data.Monoid.$fGenericLast1_closure:
         const Data.Monoid.$fGenericLast1_info;
 },
 Data.Monoid.$fGenericLast1_entry() //  [R2]
         { []
         }
     {offset
       c6IW3: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fGenericLast1_info" {
     Data.Monoid.$fGenericLast1_info:
         const Data.Monoid.$fGenericLast1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.188187506 UTC

[section ""data" . Data.Monoid.$fGenericLast2_closure" {
     Data.Monoid.$fGenericLast2_closure:
         const Data.Monoid.$fGenericLast2_info;
 },
 Data.Monoid.$fGenericLast2_entry() //  [R2]
         { []
         }
     {offset
       c6IWe: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fGenericLast2_info" {
     Data.Monoid.$fGenericLast2_info:
         const Data.Monoid.$fGenericLast2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.191590885 UTC

[section ""data" . Data.Monoid.$fGenericLast_closure" {
     Data.Monoid.$fGenericLast_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Monoid.$fGenericLast2_closure+1;
         const Data.Monoid.$fGenericLast1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.19345982 UTC

[section ""data" . Data.Monoid.$fShowFirst1_closure" {
     Data.Monoid.$fShowFirst1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.195164345 UTC

[section ""cstring" . Data.Monoid.$fShowLast2_bytes" {
     Data.Monoid.$fShowLast2_bytes:
         I8[] [76,97,115,116,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.196904945 UTC

[section ""cstring" . Data.Monoid.$fShowLast1_bytes" {
     Data.Monoid.$fShowLast1_bytes:
         I8[] [103,101,116,76,97,115,116,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.198702315 UTC

[section ""cstring" . Data.Monoid.$fReadFirst4_bytes" {
     Data.Monoid.$fReadFirst4_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.206556926 UTC

[section ""data" . Data.Monoid.$w$cshowsPrec1_closure" {
     Data.Monoid.$w$cshowsPrec1_closure:
         const Data.Monoid.$w$cshowsPrec1_info;
         const 0;
 },
 f_s6I2m_entry() //  [R1]
         { []
         }
     {offset
       c6IWA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6IWB; else goto c6IWC;
       c6IWB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6IWC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 24];
           R3 = Data.Monoid.$fShowFirst1_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6I2m_info" {
     f_s6I2m_info:
         const f_s6I2m_entry;
         const 2;
         const 4294967314;
         const S6I7j_srt+24;
 },
 sat_s6I2p_entry() //  [R1]
         { []
         }
     {offset
       c6IWX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6IWY; else goto c6IWZ;
       c6IWY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6IWZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Monoid.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I2p_info" {
     sat_s6I2p_info:
         const sat_s6I2p_entry;
         const 1;
         const 16;
 },
 sat_s6I2q_entry() //  [R1]
         { []
         }
     {offset
       c6IX0: // global
           _s6I2q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6IX1; else goto c6IX2;
       c6IX2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6IX4; else goto c6IX3;
       c6IX4: // global
           HpAlloc = 24;
           goto c6IX1;
       c6IX1: // global
           R1 = _s6I2q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6IX3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6I2q::P64;
           _s6I2m::P64 = P64[_s6I2q::P64 + 16];
           _s6I2o::P64 = P64[_s6I2q::P64 + 24];
           I64[Hp - 16] = sat_s6I2p_info;
           P64[Hp] = _s6I2o::P64;
           R2 = Hp - 16;
           R1 = _s6I2m::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I2q_info" {
     sat_s6I2q_info:
         const sat_s6I2q_entry;
         const 2;
         const 18;
 },
 sat_s6I2r_entry() //  [R1]
         { []
         }
     {offset
       c6IX5: // global
           _s6I2r::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6IX6; else goto c6IX7;
       c6IX7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6IX9; else goto c6IX8;
       c6IX9: // global
           HpAlloc = 32;
           goto c6IX6;
       c6IX6: // global
           R1 = _s6I2r::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6IX8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6I2r::P64;
           _s6I2m::P64 = P64[_s6I2r::P64 + 16];
           _s6I2o::P64 = P64[_s6I2r::P64 + 24];
           I64[Hp - 24] = sat_s6I2q_info;
           P64[Hp - 8] = _s6I2m::P64;
           P64[Hp] = _s6I2o::P64;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowLast1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I2r_info" {
     sat_s6I2r_info:
         const sat_s6I2r_entry;
         const 2;
         const 18;
 },
 sat_s6I2s_entry() //  [R1, R2]
         { []
         }
     {offset
       c6IXa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6IXe; else goto c6IXd;
       c6IXe: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6IXd: // global
           _s6I2m::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6I2r_info;
           P64[Hp - 8] = _s6I2m::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowLast2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I2s_info" {
     sat_s6I2s_info:
         const sat_s6I2s_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6I2v_entry() //  [R1]
         { []
         }
     {offset
       c6IXC: // global
           _s6I2v::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6IXD; else goto c6IXE;
       c6IXE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6IXG; else goto c6IXF;
       c6IXG: // global
           HpAlloc = 24;
           goto c6IXD;
       c6IXD: // global
           R1 = _s6I2v::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6IXF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6I2v::P64;
           _s6I2t::P64 = P64[_s6I2v::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6I2t::P64;
           R3 = Hp - 14;
           R2 = Data.Monoid.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I2v_info" {
     sat_s6I2v_info:
         const sat_s6I2v_entry;
         const 1;
         const 16;
 },
 sat_s6I2w_entry() //  [R1]
         { []
         }
     {offset
       c6IXH: // global
           _s6I2w::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6IXI; else goto c6IXJ;
       c6IXJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6IXL; else goto c6IXK;
       c6IXL: // global
           HpAlloc = 24;
           goto c6IXI;
       c6IXI: // global
           R1 = _s6I2w::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6IXK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6I2w::P64;
           _s6I2m::P64 = P64[_s6I2w::P64 + 16];
           _s6I2t::P64 = P64[_s6I2w::P64 + 24];
           I64[Hp - 16] = sat_s6I2v_info;
           P64[Hp] = _s6I2t::P64;
           R2 = Hp - 16;
           R1 = _s6I2m::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I2w_info" {
     sat_s6I2w_info:
         const sat_s6I2w_entry;
         const 2;
         const 18;
 },
 sat_s6I2x_entry() //  [R1]
         { []
         }
     {offset
       c6IXM: // global
           _s6I2x::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6IXN; else goto c6IXO;
       c6IXO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6IXQ; else goto c6IXP;
       c6IXQ: // global
           HpAlloc = 32;
           goto c6IXN;
       c6IXN: // global
           R1 = _s6I2x::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6IXP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6I2x::P64;
           _s6I2m::P64 = P64[_s6I2x::P64 + 16];
           _s6I2t::P64 = P64[_s6I2x::P64 + 24];
           I64[Hp - 24] = sat_s6I2w_info;
           P64[Hp - 8] = _s6I2m::P64;
           P64[Hp] = _s6I2t::P64;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowLast1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I2x_info" {
     sat_s6I2x_info:
         const sat_s6I2x_entry;
         const 2;
         const 18;
 },
 sat_s6I2y_entry() //  [R1]
         { []
         }
     {offset
       c6IXR: // global
           _s6I2y::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6IXS; else goto c6IXT;
       c6IXT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6IXV; else goto c6IXU;
       c6IXV: // global
           HpAlloc = 32;
           goto c6IXS;
       c6IXS: // global
           R1 = _s6I2y::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6IXU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6I2y::P64;
           _s6I2m::P64 = P64[_s6I2y::P64 + 16];
           _s6I2t::P64 = P64[_s6I2y::P64 + 24];
           I64[Hp - 24] = sat_s6I2x_info;
           P64[Hp - 8] = _s6I2m::P64;
           P64[Hp] = _s6I2t::P64;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowLast2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I2y_info" {
     sat_s6I2y_info:
         const sat_s6I2y_entry;
         const 2;
         const 18;
 },
 sat_s6I2z_entry() //  [R1, R2]
         { []
         }
     {offset
       c6IXX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6IY1; else goto c6IY0;
       c6IY1: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6IY0: // global
           _s6I2m::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s6I2y_info;
           P64[Hp - 32] = _s6I2m::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I2z_info" {
     sat_s6I2z_info:
         const sat_s6I2z_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Monoid.$w$cshowsPrec1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6IY5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6IY9; else goto c6IY8;
       c6IY9: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$w$cshowsPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6IY8: // global
           I64[Hp - 40] = f_s6I2m_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c6IWw::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto c6IY3; else goto c6IY4;
       c6IY3: // global
           I64[Hp - 8] = sat_s6I2s_info;
           P64[Hp] = _c6IWw::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6IY4: // global
           I64[Hp - 8] = sat_s6I2z_info;
           P64[Hp] = _c6IWw::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$w$cshowsPrec1_info" {
     Data.Monoid.$w$cshowsPrec1_info:
         const Data.Monoid.$w$cshowsPrec1_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const S6I7j_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.231037699 UTC

[section ""data" . Data.Monoid.$fShowLast_$cshowsPrec_closure" {
     Data.Monoid.$fShowLast_$cshowsPrec_closure:
         const Data.Monoid.$fShowLast_$cshowsPrec_info;
         const 0;
 },
 Data.Monoid.$fShowLast_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6IZ1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6IZ2; else goto c6IZ3;
       c6IZ2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fShowLast_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6IZ3: // global
           I64[Sp - 24] = block_c6IYY_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6IZ7; else goto c6IYZ;
       u6IZ7: // global
           call _c6IYY(R1) args: 0, res: 0, upd: 0;
       c6IYZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowLast_$cshowsPrec_info" {
     Data.Monoid.$fShowLast_$cshowsPrec_info:
         const Data.Monoid.$fShowLast_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6I7j_srt+32;
 },
 _c6IYY() //  [R1]
         { []
         }
     {offset
       c6IYY: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Monoid.$w$cshowsPrec1_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6IYY_info" {
     block_c6IYY_info:
         const _c6IYY;
         const 2;
         const 4294967326;
         const S6I7j_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.236787333 UTC

[section ""data" . Data.Monoid.$fReadFirst3_closure" {
     Data.Monoid.$fReadFirst3_closure:
         const Data.Monoid.$fReadFirst3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Monoid.$fReadFirst3_entry() //  [R1]
         { []
         }
     {offset
       c6IZn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6IZo; else goto c6IZp;
       c6IZo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6IZp: // global
           (_c6IZk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6IZk::I64 == 0) goto c6IZm; else goto c6IZl;
       c6IZm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6IZl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6IZk::I64;
           R2 = Data.Monoid.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst3_info" {
     Data.Monoid.$fReadFirst3_info:
         const Data.Monoid.$fReadFirst3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.241128194 UTC

[section ""data" . Data.Monoid.$fShowFirst4_closure" {
     Data.Monoid.$fShowFirst4_closure:
         const Data.Monoid.$fShowFirst4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Monoid.$fShowFirst4_entry() //  [R1]
         { []
         }
     {offset
       c6IZD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6IZE; else goto c6IZF;
       c6IZE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6IZF: // global
           (_c6IZA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6IZA::I64 == 0) goto c6IZC; else goto c6IZB;
       c6IZC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6IZB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6IZA::I64;
           R3 = Data.Monoid.$fReadFirst3_closure;
           R2 = GHC.Show.$fShowMaybe4_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowFirst4_info" {
     Data.Monoid.$fShowFirst4_info:
         const Data.Monoid.$fShowFirst4_entry;
         const 0;
         const 12884901909;
         const S6I7j_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.247743005 UTC

[section ""data" . Data.Monoid.$fShowLast_$cshow_closure" {
     Data.Monoid.$fShowLast_$cshow_closure:
         const Data.Monoid.$fShowLast_$cshow_info;
         const 0;
 },
 sat_s6I2J_entry() //  [R1]
         { []
         }
     {offset
       c6J09: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6J0a; else goto c6J0b;
       c6J0a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6J0b: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Show.appPrec1_closure;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = Data.Monoid.$fReadFirst3_closure;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I2J_info" {
     sat_s6I2J_info:
         const sat_s6I2J_entry;
         const 2;
         const 4294967314;
         const S6I7j_srt+56;
 },
 sat_s6I2K_entry() //  [R1]
         { []
         }
     {offset
       c6J0g: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6J0h; else goto c6J0i;
       c6J0h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6J0i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6IZZ_info;
           _s6I2F::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s6I2F::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6J0o; else goto c6J00;
       u6J0o: // global
           call _c6IZZ(R1) args: 0, res: 0, upd: 0;
       c6J00: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I2K_info" {
     sat_s6I2K_info:
         const sat_s6I2K_entry;
         const 2;
         const 30064771090;
         const S6I7j_srt+56;
 },
 _c6IZZ() //  [R1]
         { []
         }
     {offset
       c6IZZ: // global
           if (R1 & 7 == 1) goto c6J0d; else goto c6J0e;
       c6J0d: // global
           R1 = Data.Monoid.$fShowFirst4_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c6J0e: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6J0n; else goto c6J0m;
       c6J0n: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6J0m: // global
           _s6I2I::P64 = P64[R1 + 6];
           I64[Hp - 24] = sat_s6I2J_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s6I2I::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowMaybe1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6IZZ_info" {
     block_c6IZZ_info:
         const _c6IZZ;
         const 1;
         const 30064771102;
         const S6I7j_srt+56;
 },
 sat_s6I2L_entry() //  [R1]
         { []
         }
     {offset
       c6J0p: // global
           _s6I2L::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6J0q; else goto c6J0r;
       c6J0r: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6J0t; else goto c6J0s;
       c6J0t: // global
           HpAlloc = 32;
           goto c6J0q;
       c6J0q: // global
           R1 = _s6I2L::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6J0s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6I2L::P64;
           _s6I2F::P64 = P64[_s6I2L::P64 + 16];
           _s6I2G::P64 = P64[_s6I2L::P64 + 24];
           I64[Hp - 24] = sat_s6I2K_info;
           P64[Hp - 8] = _s6I2F::P64;
           P64[Hp] = _s6I2G::P64;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowLast1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I2L_info" {
     sat_s6I2L_info:
         const sat_s6I2L_entry;
         const 2;
         const 30064771090;
         const S6I7j_srt+56;
 },
 Data.Monoid.$fShowLast_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c6J0u: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6J0y; else goto c6J0x;
       c6J0y: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fShowLast_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6J0x: // global
           I64[Hp - 24] = sat_s6I2L_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowLast2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowLast_$cshow_info" {
     Data.Monoid.$fShowLast_$cshow_info:
         const Data.Monoid.$fShowLast_$cshow_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const S6I7j_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.25902254 UTC

[section ""data" . Data.Monoid.$fShowLast_$cshowList_closure" {
     Data.Monoid.$fShowLast_$cshowList_closure:
         const Data.Monoid.$fShowLast_$cshowList_info;
         const 0;
 },
 sat_s6I2Q_entry() //  [R1, R2]
         { []
         }
     {offset
       c6J17: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Monoid.$w$cshowsPrec1_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I2Q_info" {
     sat_s6I2Q_info:
         const sat_s6I2Q_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6I7j_srt+32;
 },
 Data.Monoid.$fShowLast_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6J1a: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6J1e; else goto c6J1d;
       c6J1e: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fShowLast_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6J1d: // global
           I64[Hp - 8] = sat_s6I2Q_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowLast_$cshowList_info" {
     Data.Monoid.$fShowLast_$cshowList_info:
         const Data.Monoid.$fShowLast_$cshowList_entry;
         const 0;
         const 554050781198;
         const 12884901911;
         const S6I7j_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.265089519 UTC

[section ""data" . Data.Monoid.$fShowLast_closure" {
     Data.Monoid.$fShowLast_closure:
         const Data.Monoid.$fShowLast_info;
         const 0;
 },
 sat_s6I2U_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6J1v: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fShowLast_$cshowList_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I2U_info" {
     sat_s6I2U_info:
         const sat_s6I2U_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6I7j_srt+88;
 },
 sat_s6I2T_entry() //  [R1, R2]
         { []
         }
     {offset
       c6J1D: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Monoid.$fShowLast_$cshow_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I2T_info" {
     sat_s6I2T_info:
         const sat_s6I2T_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6I7j_srt+80;
 },
 sat_s6I2S_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6J1L: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fShowLast_$cshowsPrec_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I2S_info" {
     sat_s6I2S_info:
         const sat_s6I2S_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6I7j_srt+40;
 },
 Data.Monoid.$fShowLast_entry() //  [R2]
         { []
         }
     {offset
       c6J1P: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c6J1T; else goto c6J1S;
       c6J1T: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Monoid.$fShowLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6J1S: // global
           I64[Hp - 72] = sat_s6I2U_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6I2T_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6I2S_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowLast_info" {
     Data.Monoid.$fShowLast_info:
         const Data.Monoid.$fShowLast_entry;
         const 0;
         const 966367641614;
         const 4294967301;
         const S6I7j_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.273991142 UTC

[section ""cstring" . Data.Monoid.$fReadLast5_bytes" {
     Data.Monoid.$fReadLast5_bytes:
         I8[] [76,97,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.276516798 UTC

[section ""data" . Data.Monoid.$fReadLast4_closure" {
     Data.Monoid.$fReadLast4_closure:
         const Data.Monoid.$fReadLast4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Monoid.$fReadLast4_entry() //  [R1]
         { []
         }
     {offset
       c6J2i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6J2j; else goto c6J2k;
       c6J2j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6J2k: // global
           (_c6J2f::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6J2f::I64 == 0) goto c6J2h; else goto c6J2g;
       c6J2h: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6J2g: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6J2f::I64;
           R2 = Data.Monoid.$fReadLast5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadLast4_info" {
     Data.Monoid.$fReadLast4_info:
         const Data.Monoid.$fReadLast4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.280368844 UTC

[section ""data" . Data.Monoid.$fReadLast_lexeme_closure" {
     Data.Monoid.$fReadLast_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Monoid.$fReadLast4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.282202504 UTC

[section ""cstring" . Data.Monoid.$fReadFirst9_bytes" {
     Data.Monoid.$fReadFirst9_bytes:
         I8[] [123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.284607598 UTC

[section ""data" . Data.Monoid.$fReadFirst8_closure" {
     Data.Monoid.$fReadFirst8_closure:
         const Data.Monoid.$fReadFirst8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Monoid.$fReadFirst8_entry() //  [R1]
         { []
         }
     {offset
       c6J2A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6J2B; else goto c6J2C;
       c6J2B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6J2C: // global
           (_c6J2x::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6J2x::I64 == 0) goto c6J2z; else goto c6J2y;
       c6J2z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6J2y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6J2x::I64;
           R2 = Data.Monoid.$fReadFirst9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst8_info" {
     Data.Monoid.$fReadFirst8_info:
         const Data.Monoid.$fReadFirst8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.288396078 UTC

[section ""data" . Data.Monoid.$fReadFirst_lexeme_closure" {
     Data.Monoid.$fReadFirst_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Monoid.$fReadFirst8_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.290208366 UTC

[section ""cstring" . Data.Monoid.$fReadLast3_bytes" {
     Data.Monoid.$fReadLast3_bytes:
         I8[] [103,101,116,76,97,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.29257882 UTC

[section ""data" . Data.Monoid.$fReadLast2_closure" {
     Data.Monoid.$fReadLast2_closure:
         const Data.Monoid.$fReadLast2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Monoid.$fReadLast2_entry() //  [R1]
         { []
         }
     {offset
       c6J2S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6J2T; else goto c6J2U;
       c6J2T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6J2U: // global
           (_c6J2P::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6J2P::I64 == 0) goto c6J2R; else goto c6J2Q;
       c6J2R: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6J2Q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6J2P::I64;
           R2 = Data.Monoid.$fReadLast3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadLast2_info" {
     Data.Monoid.$fReadLast2_info:
         const Data.Monoid.$fReadLast2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.296321517 UTC

[section ""data" . Data.Monoid.$fReadFirst5_closure" {
     Data.Monoid.$fReadFirst5_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.298072516 UTC

[section ""data" . Data.Monoid.$fReadFirst2_closure" {
     Data.Monoid.$fReadFirst2_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Monoid.$fReadFirst3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.306097302 UTC

[section ""data" . Data.Monoid.$fReadLast1_closure" {
     Data.Monoid.$fReadLast1_closure:
         const Data.Monoid.$fReadLast1_info;
         const 0;
 },
 ds_s6I2Y_entry() //  [R1, R3]
         { []
         }
     {offset
       c6J3d: // global
           R4 = R3;
           R3 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadMaybe1_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_s6I2Y_info" {
     ds_s6I2Y_info:
         const ds_s6I2Y_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6I7j_srt+104;
 },
 sat_s6I3a_entry() //  [R1]
         { []
         }
     {offset
       c6J3O: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3a_info" {
     sat_s6I3a_info:
         const sat_s6I3a_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6I3d_entry() //  [R1, R2]
         { []
         }
     {offset
       c6J3U: // global
           _s6I38::P64 = R2;
           _s6I3d::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6J3V; else goto c6J3W;
       c6J3W: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6J3Y; else goto c6J3X;
       c6J3Y: // global
           HpAlloc = 24;
           goto c6J3V;
       c6J3V: // global
           R2 = _s6I38::P64;
           R1 = _s6I3d::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6J3X: // global
           _s6I32::P64 = P64[_s6I3d::P64 + 7];
           I64[Hp - 16] = sat_s6I3a_info;
           P64[Hp - 8] = _s6I32::P64;
           P64[Hp] = _s6I38::P64;
           I64[Sp - 8] = block_c6J3R_info;
           R3 = Hp - 15;
           R2 = Data.Monoid.$fReadFirst2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3d_info" {
     sat_s6I3d_info:
         const sat_s6I3d_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S6I7j_srt+112;
 },
 _c6J3R() //  [R1]
         { []
         }
     {offset
       c6J3R: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6J41; else goto c6J40;
       c6J41: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6J40: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6J3R_info" {
     block_c6J3R_info:
         const _c6J3R;
         const 0;
         const 30;
 },
 sat_s6I3e_entry() //  [R1, R2]
         { []
         }
     {offset
       c6J42: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6J46; else goto c6J45;
       c6J46: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6J45: // global
           _s6I2Y::P64 = P64[R1 + 7];
           _s6I32::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_s6I3d_info;
           P64[Hp] = _s6I32::P64;
           R5 = Hp - 7;
           R4 = Data.Monoid.$fReadFirst5_closure+1;
           R3 = _s6I2Y::P64;
           R2 = Data.Monoid.$fReadLast2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3e_info" {
     sat_s6I3e_info:
         const sat_s6I3e_entry;
         const 2;
         const 64424509451;
         const 4294967301;
         const S6I7j_srt+112;
 },
 sat_s6I3h_entry() //  [R1, R2]
         { []
         }
     {offset
       c6J4a: // global
           _s6I36::P64 = R2;
           _s6I3h::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6J4b; else goto c6J4c;
       c6J4c: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6J4e; else goto c6J4d;
       c6J4e: // global
           HpAlloc = 24;
           goto c6J4b;
       c6J4b: // global
           R2 = _s6I36::P64;
           R1 = _s6I3h::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6J4d: // global
           _s6I2Y::P64 = P64[_s6I3h::P64 + 7];
           _s6I32::P64 = P64[_s6I3h::P64 + 15];
           I64[Hp - 16] = sat_s6I3e_info;
           P64[Hp - 8] = _s6I2Y::P64;
           P64[Hp] = _s6I32::P64;
           I64[Sp - 8] = block_c6J47_info;
           R3 = Hp - 15;
           R2 = Data.Monoid.$fReadFirst_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3h_info" {
     sat_s6I3h_info:
         const sat_s6I3h_entry;
         const 2;
         const 133143986187;
         const 4294967301;
         const S6I7j_srt+112;
 },
 _c6J47() //  [R1]
         { []
         }
     {offset
       c6J47: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6J4h; else goto c6J4g;
       c6J4h: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6J4g: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6J47_info" {
     block_c6J47_info:
         const _c6J47;
         const 0;
         const 30;
 },
 sat_s6I3k_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6J4i: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6J4j; else goto c6J4k;
       c6J4j: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6J4k: // global
           I64[Sp - 24] = block_c6J3l_info;
           _s6I2Y::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s6I2Y::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6J4x; else goto c6J3m;
       u6J4x: // global
           call _c6J3l(R1) args: 0, res: 0, upd: 0;
       c6J3m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3k_info" {
     sat_s6I3k_info:
         const sat_s6I3k_entry;
         const 1;
         const 270582939657;
         const 8589934607;
         const S6I7j_srt+112;
 },
 _c6J3l() //  [R1]
         { []
         }
     {offset
       c6J3l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6J4n; else goto c6J4m;
       c6J4n: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6J4m: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto c6J4p; else goto c6J4t;
       c6J4p: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6J4t: // global
           I64[Hp - 16] = sat_s6I3h_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c6J4q_info;
           R3 = Hp - 15;
           R2 = Data.Monoid.$fReadLast_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6J3l_info" {
     block_c6J3l_info:
         const _c6J3l;
         const 2;
         const 270582939678;
         const S6I7j_srt+112;
 },
 _c6J4q() //  [R1]
         { []
         }
     {offset
       c6J4q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6J4w; else goto c6J4v;
       c6J4w: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6J4v: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6J4q_info" {
     block_c6J4q_info:
         const _c6J4q;
         const 0;
         const 30;
 },
 Data.Monoid.$fReadLast1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6J4y: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6J4C; else goto c6J4B;
       c6J4C: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fReadLast1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6J4B: // global
           I64[Hp - 24] = ds_s6I2Y_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s6I3k_info;
           P64[Hp] = Hp - 22;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadLast1_info" {
     Data.Monoid.$fReadLast1_info:
         const Data.Monoid.$fReadLast1_entry;
         const 0;
         const 2194728288270;
         const 12884901911;
         const S6I7j_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.328651733 UTC

[section ""data" . Data.Monoid.$fReadLast_$creadsPrec_closure" {
     Data.Monoid.$fReadLast_$creadsPrec_closure:
         const Data.Monoid.$fReadLast_$creadsPrec_info;
         const 0;
 },
 sat_s6I3n_entry() //  [R1]
         { []
         }
     {offset
       c6J5u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6J5v; else goto c6J5w;
       c6J5v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6J5w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Monoid.$fReadLast1_entry(R4,
                                              R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I3n_info" {
     sat_s6I3n_info:
         const sat_s6I3n_entry;
         const 2;
         const 4294967314;
         const S6I7j_srt+168;
 },
 Data.Monoid.$fReadLast_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c6J5x: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6J5B; else goto c6J5A;
       c6J5B: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fReadLast_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6J5A: // global
           I64[Hp - 24] = sat_s6I3n_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadLast_$creadsPrec_info" {
     Data.Monoid.$fReadLast_$creadsPrec_info:
         const Data.Monoid.$fReadLast_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6I7j_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.334844274 UTC

[section ""data" . Data.Monoid.$fReadLast_$creadListPrec_closure" {
     Data.Monoid.$fReadLast_$creadListPrec_closure:
         const Data.Monoid.$fReadLast_$creadListPrec_info;
         const 0;
 },
 sat_s6I3p_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6J5T: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fReadLast1_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3p_info" {
     sat_s6I3p_info:
         const sat_s6I3p_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6I7j_srt+168;
 },
 Data.Monoid.$fReadLast_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c6J5W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6J60; else goto c6J5Z;
       c6J60: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Monoid.$fReadLast_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6J5Z: // global
           I64[Hp - 8] = sat_s6I3p_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadLast_$creadListPrec_info" {
     Data.Monoid.$fReadLast_$creadListPrec_info:
         const Data.Monoid.$fReadLast_$creadListPrec_entry;
         const 0;
         const 55834574862;
         const 4294967301;
         const S6I7j_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.341233379 UTC

[section ""data" . Data.Monoid.$fReadLast_$creadList_closure" {
     Data.Monoid.$fReadLast_$creadList_closure:
         const Data.Monoid.$fReadLast_$creadList_info;
         const 0;
 },
 sat_s6I3r_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6J6l: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fReadLast1_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3r_info" {
     sat_s6I3r_info:
         const sat_s6I3r_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6I7j_srt+168;
 },
 sat_s6I3s_entry() //  [R1]
         { []
         }
     {offset
       c6J6o: // global
           _s6I3s::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6J6p; else goto c6J6q;
       c6J6q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6J6s; else goto c6J6r;
       c6J6s: // global
           HpAlloc = 16;
           goto c6J6p;
       c6J6p: // global
           R1 = _s6I3s::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6J6r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6I3s::P64;
           _s6I3q::P64 = P64[_s6I3s::P64 + 16];
           I64[Hp - 8] = sat_s6I3r_info;
           P64[Hp] = _s6I3q::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I3s_info" {
     sat_s6I3s_info:
         const sat_s6I3s_entry;
         const 1;
         const 21474836496;
         const S6I7j_srt+168;
 },
 Data.Monoid.$fReadLast_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c6J6t: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6J6x; else goto c6J6w;
       c6J6x: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Monoid.$fReadLast_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6J6w: // global
           I64[Hp - 16] = sat_s6I3s_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadLast_$creadList_info" {
     Data.Monoid.$fReadLast_$creadList_info:
         const Data.Monoid.$fReadLast_$creadList_entry;
         const 0;
         const 90194313230;
         const 4294967301;
         const S6I7j_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.351287972 UTC

[section ""data" . Data.Monoid.$fReadLast_closure" {
     Data.Monoid.$fReadLast_closure:
         const Data.Monoid.$fReadLast_info;
         const 0;
 },
 sat_s6I3x_entry() //  [R1]
         { []
         }
     {offset
       c6J6R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6J6S; else goto c6J6T;
       c6J6S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6J6T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Monoid.$fReadLast_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I3x_info" {
     sat_s6I3x_info:
         const sat_s6I3x_entry;
         const 1;
         const 4294967312;
         const S6I7j_srt+192;
 },
 sat_s6I3w_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6J6Z: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fReadLast1_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3w_info" {
     sat_s6I3w_info:
         const sat_s6I3w_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6I7j_srt+168;
 },
 sat_s6I3v_entry() //  [R1]
         { []
         }
     {offset
       c6J76: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6J77; else goto c6J78;
       c6J77: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6J78: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Monoid.$fReadLast_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I3v_info" {
     sat_s6I3v_info:
         const sat_s6I3v_entry;
         const 1;
         const 4294967312;
         const S6I7j_srt+200;
 },
 sat_s6I3u_entry() //  [R1, R2]
         { []
         }
     {offset
       c6J7e: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Monoid.$fReadLast_$creadsPrec_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3u_info" {
     sat_s6I3u_info:
         const sat_s6I3u_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6I7j_srt+176;
 },
 Data.Monoid.$fReadLast_entry() //  [R2]
         { []
         }
     {offset
       c6J7i: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c6J7m; else goto c6J7l;
       c6J7m: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Monoid.$fReadLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6J7l: // global
           I64[Hp - 112] = sat_s6I3x_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6I3w_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s6I3v_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s6I3u_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadLast_info" {
     Data.Monoid.$fReadLast_info:
         const Data.Monoid.$fReadLast_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const S6I7j_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.362894688 UTC

[section ""data" . Data.Monoid.$fEqLast_closure" {
     Data.Monoid.$fEqLast_closure:
         const Data.Monoid.$fEqLast_info;
 },
 sat_s6I3A_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6J7T: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fEqMaybe_$c/=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3A_info" {
     sat_s6I3A_info:
         const sat_s6I3A_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6I3z_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6J81: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fEqMaybe_$c==_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3z_info" {
     sat_s6I3z_info:
         const sat_s6I3z_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Monoid.$fEqLast_entry() //  [R2]
         { []
         }
     {offset
       c6J85: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6J89; else goto c6J88;
       c6J89: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Monoid.$fEqLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6J88: // global
           I64[Hp - 48] = sat_s6I3A_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_s6I3z_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fEqLast_info" {
     Data.Monoid.$fEqLast_info:
         const Data.Monoid.$fEqLast_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.370627443 UTC

[section ""data" . Data.Monoid.$fOrdLast_$cp1Ord_closure" {
     Data.Monoid.$fOrdLast_$cp1Ord_closure:
         const Data.Monoid.$fOrdLast_$cp1Ord_info;
 },
 sat_s6I3C_entry() //  [R1]
         { []
         }
     {offset
       c6J8v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6J8w; else goto c6J8x;
       c6J8w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6J8x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I3C_info" {
     sat_s6I3C_info:
         const sat_s6I3C_entry;
         const 1;
         const 16;
 },
 Data.Monoid.$fOrdLast_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       c6J8y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6J8C; else goto c6J8B;
       c6J8C: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Monoid.$fOrdLast_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6J8B: // global
           I64[Hp - 16] = sat_s6I3C_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Monoid.$fEqLast_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fOrdLast_$cp1Ord_info" {
     Data.Monoid.$fOrdLast_$cp1Ord_info:
         const Data.Monoid.$fOrdLast_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.379017342 UTC

[section ""data" . Data.Monoid.$fOrdLast_closure" {
     Data.Monoid.$fOrdLast_closure:
         const Data.Monoid.$fOrdLast_info;
 },
 sat_s6I3N_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6J8U: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$cmin_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3N_info" {
     sat_s6I3N_info:
         const sat_s6I3N_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6I3M_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6J92: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$cmax_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3M_info" {
     sat_s6I3M_info:
         const sat_s6I3M_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6I3L_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6J9a: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c>=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3L_info" {
     sat_s6I3L_info:
         const sat_s6I3L_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6I3K_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6J9i: // global
           R4 = R2;
           R3 = R3;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3K_info" {
     sat_s6I3K_info:
         const sat_s6I3K_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6I3H_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6J9q: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3H_info" {
     sat_s6I3H_info:
         const sat_s6I3H_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6I3G_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6J9y: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3G_info" {
     sat_s6I3G_info:
         const sat_s6I3G_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6I3F_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6J9G: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I3F_info" {
     sat_s6I3F_info:
         const sat_s6I3F_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6I3E_entry() //  [R1]
         { []
         }
     {offset
       c6J9N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6J9O; else goto c6J9P;
       c6J9O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6J9P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Monoid.$fOrdLast_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I3E_info" {
     sat_s6I3E_info:
         const sat_s6I3E_entry;
         const 1;
         const 16;
 },
 Data.Monoid.$fOrdLast_entry() //  [R2]
         { []
         }
     {offset
       c6J9R: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c6J9V; else goto c6J9U;
       c6J9V: // global
           HpAlloc = 208;
           R2 = R2;
           R1 = Data.Monoid.$fOrdLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6J9U: // global
           I64[Hp - 200] = sat_s6I3N_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s6I3M_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s6I3L_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s6I3K_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6I3H_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s6I3G_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6I3F_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6I3E_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 102;
           P64[Hp - 40] = Hp - 118;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 150;
           P64[Hp - 16] = Hp - 166;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 198;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fOrdLast_info" {
     Data.Monoid.$fOrdLast_info:
         const Data.Monoid.$fOrdLast_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.396263173 UTC

[section ""data" . Data.Monoid.$fFunctorFirst_closure" {
     Data.Monoid.$fFunctorFirst_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.Base.$fApplicativeMaybe_$cfmap_closure+2;
         const GHC.Base.$fFunctorMaybe_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.398129104 UTC

[section ""data" . Data.Monoid.$fApplicativeFirst_closure" {
     Data.Monoid.$fApplicativeFirst_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Monoid.$fFunctorFirst_closure+1;
         const GHC.Base.Just_closure+1;
         const GHC.Base.$fApplicativeMaybe_$c<*>_closure+2;
         const GHC.Base.$fApplicativeMaybe_$cliftA2_closure+3;
         const GHC.Base.$fApplicativeMaybe_$c*>_closure+2;
         const GHC.Base.$fApplicativeMaybe_$c<*_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.400022865 UTC

[section ""data" . Data.Monoid.$fMonadFirst_closure" {
     Data.Monoid.$fMonadFirst_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Monoid.$fApplicativeFirst_closure+1;
         const GHC.Base.$fMonadMaybe_$c>>=_closure+2;
         const GHC.Base.$fApplicativeMaybe_$c*>_closure+2;
         const GHC.Base.Just_closure+1;
         const GHC.Base.$fMonadMaybe_$cfail_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.402324655 UTC

[section ""data" . Data.Monoid.$fGeneric1First1_closure" {
     Data.Monoid.$fGeneric1First1_closure:
         const Data.Monoid.$fGeneric1First1_info;
 },
 Data.Monoid.$fGeneric1First1_entry() //  [R2]
         { []
         }
     {offset
       c6JaF: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fGeneric1First1_info" {
     Data.Monoid.$fGeneric1First1_info:
         const Data.Monoid.$fGeneric1First1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.40621913 UTC

[section ""data" . Data.Monoid.$fGeneric1First2_closure" {
     Data.Monoid.$fGeneric1First2_closure:
         const Data.Monoid.$fGeneric1First2_info;
 },
 Data.Monoid.$fGeneric1First2_entry() //  [R2]
         { []
         }
     {offset
       c6JaQ: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fGeneric1First2_info" {
     Data.Monoid.$fGeneric1First2_info:
         const Data.Monoid.$fGeneric1First2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.409480712 UTC

[section ""data" . Data.Monoid.$fGeneric1First_closure" {
     Data.Monoid.$fGeneric1First_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Monoid.$fGeneric1First2_closure+1;
         const Data.Monoid.$fGeneric1First1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.411612317 UTC

[section ""data" . Data.Monoid.$fGenericFirst1_closure" {
     Data.Monoid.$fGenericFirst1_closure:
         const Data.Monoid.$fGenericFirst1_info;
 },
 Data.Monoid.$fGenericFirst1_entry() //  [R2]
         { []
         }
     {offset
       c6Jb4: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fGenericFirst1_info" {
     Data.Monoid.$fGenericFirst1_info:
         const Data.Monoid.$fGenericFirst1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.415117998 UTC

[section ""data" . Data.Monoid.$fGenericFirst2_closure" {
     Data.Monoid.$fGenericFirst2_closure:
         const Data.Monoid.$fGenericFirst2_info;
 },
 Data.Monoid.$fGenericFirst2_entry() //  [R2]
         { []
         }
     {offset
       c6Jbf: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fGenericFirst2_info" {
     Data.Monoid.$fGenericFirst2_info:
         const Data.Monoid.$fGenericFirst2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.419148708 UTC

[section ""data" . Data.Monoid.$fGenericFirst_closure" {
     Data.Monoid.$fGenericFirst_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Monoid.$fGenericFirst2_closure+1;
         const Data.Monoid.$fGenericFirst1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.421004164 UTC

[section ""cstring" . Data.Monoid.$fShowFirst3_bytes" {
     Data.Monoid.$fShowFirst3_bytes:
         I8[] [70,105,114,115,116,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.422935271 UTC

[section ""cstring" . Data.Monoid.$fShowFirst2_bytes" {
     Data.Monoid.$fShowFirst2_bytes:
         I8[] [103,101,116,70,105,114,115,116,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.430669526 UTC

[section ""data" . Data.Monoid.$w$cshowsPrec_closure" {
     Data.Monoid.$w$cshowsPrec_closure:
         const Data.Monoid.$w$cshowsPrec_info;
         const 0;
 },
 f_s6I3V_entry() //  [R1]
         { []
         }
     {offset
       c6Jbz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JbA; else goto c6JbB;
       c6JbA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JbB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 24];
           R3 = Data.Monoid.$fShowFirst1_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6I3V_info" {
     f_s6I3V_info:
         const f_s6I3V_entry;
         const 2;
         const 4294967314;
         const S6I7j_srt+24;
 },
 sat_s6I3Y_entry() //  [R1]
         { []
         }
     {offset
       c6JbW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JbX; else goto c6JbY;
       c6JbX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JbY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Monoid.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I3Y_info" {
     sat_s6I3Y_info:
         const sat_s6I3Y_entry;
         const 1;
         const 16;
 },
 sat_s6I3Z_entry() //  [R1]
         { []
         }
     {offset
       c6JbZ: // global
           _s6I3Z::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6Jc0; else goto c6Jc1;
       c6Jc1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Jc3; else goto c6Jc2;
       c6Jc3: // global
           HpAlloc = 24;
           goto c6Jc0;
       c6Jc0: // global
           R1 = _s6I3Z::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Jc2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6I3Z::P64;
           _s6I3V::P64 = P64[_s6I3Z::P64 + 16];
           _s6I3X::P64 = P64[_s6I3Z::P64 + 24];
           I64[Hp - 16] = sat_s6I3Y_info;
           P64[Hp] = _s6I3X::P64;
           R2 = Hp - 16;
           R1 = _s6I3V::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I3Z_info" {
     sat_s6I3Z_info:
         const sat_s6I3Z_entry;
         const 2;
         const 18;
 },
 sat_s6I40_entry() //  [R1]
         { []
         }
     {offset
       c6Jc4: // global
           _s6I40::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6Jc5; else goto c6Jc6;
       c6Jc6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Jc8; else goto c6Jc7;
       c6Jc8: // global
           HpAlloc = 32;
           goto c6Jc5;
       c6Jc5: // global
           R1 = _s6I40::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Jc7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6I40::P64;
           _s6I3V::P64 = P64[_s6I40::P64 + 16];
           _s6I3X::P64 = P64[_s6I40::P64 + 24];
           I64[Hp - 24] = sat_s6I3Z_info;
           P64[Hp - 8] = _s6I3V::P64;
           P64[Hp] = _s6I3X::P64;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowFirst2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I40_info" {
     sat_s6I40_info:
         const sat_s6I40_entry;
         const 2;
         const 18;
 },
 sat_s6I41_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Jc9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Jcd; else goto c6Jcc;
       c6Jcd: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Jcc: // global
           _s6I3V::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6I40_info;
           P64[Hp - 8] = _s6I3V::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowFirst3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I41_info" {
     sat_s6I41_info:
         const sat_s6I41_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6I44_entry() //  [R1]
         { []
         }
     {offset
       c6JcB: // global
           _s6I44::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JcC; else goto c6JcD;
       c6JcD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JcF; else goto c6JcE;
       c6JcF: // global
           HpAlloc = 24;
           goto c6JcC;
       c6JcC: // global
           R1 = _s6I44::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JcE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6I44::P64;
           _s6I42::P64 = P64[_s6I44::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6I42::P64;
           R3 = Hp - 14;
           R2 = Data.Monoid.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I44_info" {
     sat_s6I44_info:
         const sat_s6I44_entry;
         const 1;
         const 16;
 },
 sat_s6I45_entry() //  [R1]
         { []
         }
     {offset
       c6JcG: // global
           _s6I45::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JcH; else goto c6JcI;
       c6JcI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JcK; else goto c6JcJ;
       c6JcK: // global
           HpAlloc = 24;
           goto c6JcH;
       c6JcH: // global
           R1 = _s6I45::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JcJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6I45::P64;
           _s6I3V::P64 = P64[_s6I45::P64 + 16];
           _s6I42::P64 = P64[_s6I45::P64 + 24];
           I64[Hp - 16] = sat_s6I44_info;
           P64[Hp] = _s6I42::P64;
           R2 = Hp - 16;
           R1 = _s6I3V::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I45_info" {
     sat_s6I45_info:
         const sat_s6I45_entry;
         const 2;
         const 18;
 },
 sat_s6I46_entry() //  [R1]
         { []
         }
     {offset
       c6JcL: // global
           _s6I46::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JcM; else goto c6JcN;
       c6JcN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JcP; else goto c6JcO;
       c6JcP: // global
           HpAlloc = 32;
           goto c6JcM;
       c6JcM: // global
           R1 = _s6I46::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JcO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6I46::P64;
           _s6I3V::P64 = P64[_s6I46::P64 + 16];
           _s6I42::P64 = P64[_s6I46::P64 + 24];
           I64[Hp - 24] = sat_s6I45_info;
           P64[Hp - 8] = _s6I3V::P64;
           P64[Hp] = _s6I42::P64;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowFirst2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I46_info" {
     sat_s6I46_info:
         const sat_s6I46_entry;
         const 2;
         const 18;
 },
 sat_s6I47_entry() //  [R1]
         { []
         }
     {offset
       c6JcQ: // global
           _s6I47::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JcR; else goto c6JcS;
       c6JcS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JcU; else goto c6JcT;
       c6JcU: // global
           HpAlloc = 32;
           goto c6JcR;
       c6JcR: // global
           R1 = _s6I47::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JcT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6I47::P64;
           _s6I3V::P64 = P64[_s6I47::P64 + 16];
           _s6I42::P64 = P64[_s6I47::P64 + 24];
           I64[Hp - 24] = sat_s6I46_info;
           P64[Hp - 8] = _s6I3V::P64;
           P64[Hp] = _s6I42::P64;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowFirst3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I47_info" {
     sat_s6I47_info:
         const sat_s6I47_entry;
         const 2;
         const 18;
 },
 sat_s6I48_entry() //  [R1, R2]
         { []
         }
     {offset
       c6JcW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6Jd0; else goto c6JcZ;
       c6Jd0: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JcZ: // global
           _s6I3V::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s6I47_info;
           P64[Hp - 32] = _s6I3V::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I48_info" {
     sat_s6I48_info:
         const sat_s6I48_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Monoid.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Jd4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6Jd8; else goto c6Jd7;
       c6Jd8: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Jd7: // global
           I64[Hp - 40] = f_s6I3V_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c6Jbv::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto c6Jd2; else goto c6Jd3;
       c6Jd2: // global
           I64[Hp - 8] = sat_s6I41_info;
           P64[Hp] = _c6Jbv::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Jd3: // global
           I64[Hp - 8] = sat_s6I48_info;
           P64[Hp] = _c6Jbv::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$w$cshowsPrec_info" {
     Data.Monoid.$w$cshowsPrec_info:
         const Data.Monoid.$w$cshowsPrec_entry;
         const 0;
         const 72057598332895246;
         const 12884901909;
         const S6I7j_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.454306929 UTC

[section ""data" . Data.Monoid.$fShowFirst_$cshowsPrec_closure" {
     Data.Monoid.$fShowFirst_$cshowsPrec_closure:
         const Data.Monoid.$fShowFirst_$cshowsPrec_info;
         const 0;
 },
 Data.Monoid.$fShowFirst_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Je0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Je1; else goto c6Je2;
       c6Je1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fShowFirst_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Je2: // global
           I64[Sp - 24] = block_c6JdX_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6Je6; else goto c6JdY;
       u6Je6: // global
           call _c6JdX(R1) args: 0, res: 0, upd: 0;
       c6JdY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowFirst_$cshowsPrec_info" {
     Data.Monoid.$fShowFirst_$cshowsPrec_info:
         const Data.Monoid.$fShowFirst_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6I7j_srt+216;
 },
 _c6JdX() //  [R1]
         { []
         }
     {offset
       c6JdX: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Monoid.$w$cshowsPrec_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6JdX_info" {
     block_c6JdX_info:
         const _c6JdX;
         const 2;
         const 4294967326;
         const S6I7j_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.463517186 UTC

[section ""data" . Data.Monoid.$fShowFirst_$cshow_closure" {
     Data.Monoid.$fShowFirst_$cshow_closure:
         const Data.Monoid.$fShowFirst_$cshow_info;
         const 0;
 },
 sat_s6I4i_entry() //  [R1]
         { []
         }
     {offset
       c6JeC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6JeD; else goto c6JeE;
       c6JeD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JeE: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Show.appPrec1_closure;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = Data.Monoid.$fReadFirst3_closure;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I4i_info" {
     sat_s6I4i_info:
         const sat_s6I4i_entry;
         const 2;
         const 4294967314;
         const S6I7j_srt+56;
 },
 sat_s6I4j_entry() //  [R1]
         { []
         }
     {offset
       c6JeJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6JeK; else goto c6JeL;
       c6JeK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JeL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6Jes_info;
           _s6I4e::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s6I4e::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6JeR; else goto c6Jet;
       u6JeR: // global
           call _c6Jes(R1) args: 0, res: 0, upd: 0;
       c6Jet: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I4j_info" {
     sat_s6I4j_info:
         const sat_s6I4j_entry;
         const 2;
         const 30064771090;
         const S6I7j_srt+56;
 },
 _c6Jes() //  [R1]
         { []
         }
     {offset
       c6Jes: // global
           if (R1 & 7 == 1) goto c6JeG; else goto c6JeH;
       c6JeG: // global
           R1 = Data.Monoid.$fShowFirst4_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c6JeH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JeQ; else goto c6JeP;
       c6JeQ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6JeP: // global
           _s6I4h::P64 = P64[R1 + 6];
           I64[Hp - 24] = sat_s6I4i_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s6I4h::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowMaybe1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Jes_info" {
     block_c6Jes_info:
         const _c6Jes;
         const 1;
         const 30064771102;
         const S6I7j_srt+56;
 },
 sat_s6I4k_entry() //  [R1]
         { []
         }
     {offset
       c6JeS: // global
           _s6I4k::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JeT; else goto c6JeU;
       c6JeU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JeW; else goto c6JeV;
       c6JeW: // global
           HpAlloc = 32;
           goto c6JeT;
       c6JeT: // global
           R1 = _s6I4k::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JeV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6I4k::P64;
           _s6I4e::P64 = P64[_s6I4k::P64 + 16];
           _s6I4f::P64 = P64[_s6I4k::P64 + 24];
           I64[Hp - 24] = sat_s6I4j_info;
           P64[Hp - 8] = _s6I4e::P64;
           P64[Hp] = _s6I4f::P64;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowFirst2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I4k_info" {
     sat_s6I4k_info:
         const sat_s6I4k_entry;
         const 2;
         const 30064771090;
         const S6I7j_srt+56;
 },
 Data.Monoid.$fShowFirst_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c6JeX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Jf1; else goto c6Jf0;
       c6Jf1: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fShowFirst_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Jf0: // global
           I64[Hp - 24] = sat_s6I4k_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowFirst3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowFirst_$cshow_info" {
     Data.Monoid.$fShowFirst_$cshow_info:
         const Data.Monoid.$fShowFirst_$cshow_entry;
         const 0;
         const 18014428574253070;
         const 8589934607;
         const S6I7j_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.476003264 UTC

[section ""data" . Data.Monoid.$fShowFirst_$cshowList_closure" {
     Data.Monoid.$fShowFirst_$cshowList_closure:
         const Data.Monoid.$fShowFirst_$cshowList_info;
         const 0;
 },
 sat_s6I4p_entry() //  [R1, R2]
         { []
         }
     {offset
       c6JfA: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Monoid.$w$cshowsPrec_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I4p_info" {
     sat_s6I4p_info:
         const sat_s6I4p_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6I7j_srt+216;
 },
 Data.Monoid.$fShowFirst_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6JfD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6JfH; else goto c6JfG;
       c6JfH: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fShowFirst_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6JfG: // global
           I64[Hp - 8] = sat_s6I4p_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowFirst_$cshowList_info" {
     Data.Monoid.$fShowFirst_$cshowList_info:
         const Data.Monoid.$fShowFirst_$cshowList_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const S6I7j_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.482939402 UTC

[section ""data" . Data.Monoid.$fShowFirst_closure" {
     Data.Monoid.$fShowFirst_closure:
         const Data.Monoid.$fShowFirst_info;
         const 0;
 },
 sat_s6I4t_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JfY: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fShowFirst_$cshowList_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I4t_info" {
     sat_s6I4t_info:
         const sat_s6I4t_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6I7j_srt+240;
 },
 sat_s6I4s_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Jg6: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Monoid.$fShowFirst_$cshow_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I4s_info" {
     sat_s6I4s_info:
         const sat_s6I4s_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6I7j_srt+232;
 },
 sat_s6I4r_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Jge: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fShowFirst_$cshowsPrec_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I4r_info" {
     sat_s6I4r_info:
         const sat_s6I4r_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6I7j_srt+224;
 },
 Data.Monoid.$fShowFirst_entry() //  [R2]
         { []
         }
     {offset
       c6Jgi: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c6Jgm; else goto c6Jgl;
       c6Jgm: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Monoid.$fShowFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Jgl: // global
           I64[Hp - 72] = sat_s6I4t_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6I4s_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6I4r_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowFirst_info" {
     Data.Monoid.$fShowFirst_info:
         const Data.Monoid.$fShowFirst_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S6I7j_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.491237402 UTC

[section ""cstring" . Data.Monoid.$fReadFirst11_bytes" {
     Data.Monoid.$fReadFirst11_bytes:
         I8[] [70,105,114,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.493859647 UTC

[section ""data" . Data.Monoid.$fReadFirst10_closure" {
     Data.Monoid.$fReadFirst10_closure:
         const Data.Monoid.$fReadFirst10_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Monoid.$fReadFirst10_entry() //  [R1]
         { []
         }
     {offset
       c6JgL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JgM; else goto c6JgN;
       c6JgM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JgN: // global
           (_c6JgI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6JgI::I64 == 0) goto c6JgK; else goto c6JgJ;
       c6JgK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6JgJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6JgI::I64;
           R2 = Data.Monoid.$fReadFirst11_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst10_info" {
     Data.Monoid.$fReadFirst10_info:
         const Data.Monoid.$fReadFirst10_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.498484517 UTC

[section ""data" . Data.Monoid.$fReadFirst_lexeme1_closure" {
     Data.Monoid.$fReadFirst_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Monoid.$fReadFirst10_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.501423824 UTC

[section ""cstring" . Data.Monoid.$fReadFirst7_bytes" {
     Data.Monoid.$fReadFirst7_bytes:
         I8[] [103,101,116,70,105,114,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.503946465 UTC

[section ""data" . Data.Monoid.$fReadFirst6_closure" {
     Data.Monoid.$fReadFirst6_closure:
         const Data.Monoid.$fReadFirst6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Monoid.$fReadFirst6_entry() //  [R1]
         { []
         }
     {offset
       c6Jh3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Jh4; else goto c6Jh5;
       c6Jh4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Jh5: // global
           (_c6Jh0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6Jh0::I64 == 0) goto c6Jh2; else goto c6Jh1;
       c6Jh2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6Jh1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6Jh0::I64;
           R2 = Data.Monoid.$fReadFirst7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst6_info" {
     Data.Monoid.$fReadFirst6_info:
         const Data.Monoid.$fReadFirst6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.512858756 UTC

[section ""data" . Data.Monoid.$fReadFirst1_closure" {
     Data.Monoid.$fReadFirst1_closure:
         const Data.Monoid.$fReadFirst1_info;
         const 0;
 },
 ds_s6I4x_entry() //  [R1, R3]
         { []
         }
     {offset
       c6Jhm: // global
           R4 = R3;
           R3 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadMaybe1_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_s6I4x_info" {
     ds_s6I4x_info:
         const ds_s6I4x_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6I7j_srt+104;
 },
 sat_s6I4J_entry() //  [R1]
         { []
         }
     {offset
       c6JhX: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I4J_info" {
     sat_s6I4J_info:
         const sat_s6I4J_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6I4M_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Ji3: // global
           _s6I4H::P64 = R2;
           _s6I4M::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6Ji4; else goto c6Ji5;
       c6Ji5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Ji7; else goto c6Ji6;
       c6Ji7: // global
           HpAlloc = 24;
           goto c6Ji4;
       c6Ji4: // global
           R2 = _s6I4H::P64;
           R1 = _s6I4M::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Ji6: // global
           _s6I4B::P64 = P64[_s6I4M::P64 + 7];
           I64[Hp - 16] = sat_s6I4J_info;
           P64[Hp - 8] = _s6I4B::P64;
           P64[Hp] = _s6I4H::P64;
           I64[Sp - 8] = block_c6Ji0_info;
           R3 = Hp - 15;
           R2 = Data.Monoid.$fReadFirst2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I4M_info" {
     sat_s6I4M_info:
         const sat_s6I4M_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S6I7j_srt+112;
 },
 _c6Ji0() //  [R1]
         { []
         }
     {offset
       c6Ji0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Jia; else goto c6Ji9;
       c6Jia: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Ji9: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Ji0_info" {
     block_c6Ji0_info:
         const _c6Ji0;
         const 0;
         const 30;
 },
 sat_s6I4N_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Jib: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Jif; else goto c6Jie;
       c6Jif: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Jie: // global
           _s6I4x::P64 = P64[R1 + 7];
           _s6I4B::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_s6I4M_info;
           P64[Hp] = _s6I4B::P64;
           R5 = Hp - 7;
           R4 = Data.Monoid.$fReadFirst5_closure+1;
           R3 = _s6I4x::P64;
           R2 = Data.Monoid.$fReadFirst6_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I4N_info" {
     sat_s6I4N_info:
         const sat_s6I4N_entry;
         const 2;
         const 1125929971613707;
         const 4294967301;
         const S6I7j_srt+112;
 },
 sat_s6I4Q_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Jij: // global
           _s6I4F::P64 = R2;
           _s6I4Q::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6Jik; else goto c6Jil;
       c6Jil: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Jin; else goto c6Jim;
       c6Jin: // global
           HpAlloc = 24;
           goto c6Jik;
       c6Jik: // global
           R2 = _s6I4F::P64;
           R1 = _s6I4Q::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Jim: // global
           _s6I4x::P64 = P64[_s6I4Q::P64 + 7];
           _s6I4B::P64 = P64[_s6I4Q::P64 + 15];
           I64[Hp - 16] = sat_s6I4N_info;
           P64[Hp - 8] = _s6I4x::P64;
           P64[Hp] = _s6I4B::P64;
           I64[Sp - 8] = block_c6Jig_info;
           R3 = Hp - 15;
           R2 = Data.Monoid.$fReadFirst_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I4Q_info" {
     sat_s6I4Q_info:
         const sat_s6I4Q_entry;
         const 2;
         const 1125998691090443;
         const 4294967301;
         const S6I7j_srt+112;
 },
 _c6Jig() //  [R1]
         { []
         }
     {offset
       c6Jig: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Jiq; else goto c6Jip;
       c6Jiq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Jip: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Jig_info" {
     block_c6Jig_info:
         const _c6Jig;
         const 0;
         const 30;
 },
 sat_s6I4T_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Jir: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Jis; else goto c6Jit;
       c6Jis: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Jit: // global
           I64[Sp - 24] = block_c6Jhu_info;
           _s6I4x::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s6I4x::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6JiG; else goto c6Jhv;
       u6JiG: // global
           call _c6Jhu(R1) args: 0, res: 0, upd: 0;
       c6Jhv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I4T_info" {
     sat_s6I4T_info:
         const sat_s6I4T_entry;
         const 1;
         const 3377798504775689;
         const 8589934607;
         const S6I7j_srt+112;
 },
 _c6Jhu() //  [R1]
         { []
         }
     {offset
       c6Jhu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Jiw; else goto c6Jiv;
       c6Jiw: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Jiv: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto c6Jiy; else goto c6JiC;
       c6Jiy: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6JiC: // global
           I64[Hp - 16] = sat_s6I4Q_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c6Jiz_info;
           R3 = Hp - 15;
           R2 = Data.Monoid.$fReadFirst_lexeme1_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Jhu_info" {
     block_c6Jhu_info:
         const _c6Jhu;
         const 2;
         const 3377798504775710;
         const S6I7j_srt+112;
 },
 _c6Jiz() //  [R1]
         { []
         }
     {offset
       c6Jiz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6JiF; else goto c6JiE;
       c6JiF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6JiE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Jiz_info" {
     block_c6Jiz_info:
         const _c6Jiz;
         const 0;
         const 30;
 },
 Data.Monoid.$fReadFirst1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6JiH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JiL; else goto c6JiK;
       c6JiL: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fReadFirst1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6JiK: // global
           I64[Hp - 24] = ds_s6I4x_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s6I4T_info;
           P64[Hp] = Hp - 22;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst1_info" {
     Data.Monoid.$fReadFirst1_info:
         const Data.Monoid.$fReadFirst1_entry;
         const 0;
         const 15763350315073550;
         const 12884901911;
         const S6I7j_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.535392889 UTC

[section ""data" . Data.Monoid.$fReadFirst_$creadsPrec_closure" {
     Data.Monoid.$fReadFirst_$creadsPrec_closure:
         const Data.Monoid.$fReadFirst_$creadsPrec_info;
         const 0;
 },
 sat_s6I4W_entry() //  [R1]
         { []
         }
     {offset
       c6JjD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JjE; else goto c6JjF;
       c6JjE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JjF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Monoid.$fReadFirst1_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I4W_info" {
     sat_s6I4W_info:
         const sat_s6I4W_entry;
         const 2;
         const 4294967314;
         const S6I7j_srt+272;
 },
 Data.Monoid.$fReadFirst_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c6JjG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JjK; else goto c6JjJ;
       c6JjK: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fReadFirst_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6JjJ: // global
           I64[Hp - 24] = sat_s6I4W_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst_$creadsPrec_info" {
     Data.Monoid.$fReadFirst_$creadsPrec_info:
         const Data.Monoid.$fReadFirst_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6I7j_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.542040111 UTC

[section ""data" . Data.Monoid.$fReadFirst_$creadListPrec_closure" {
     Data.Monoid.$fReadFirst_$creadListPrec_closure:
         const Data.Monoid.$fReadFirst_$creadListPrec_info;
         const 0;
 },
 sat_s6I4Y_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Jk2: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fReadFirst1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I4Y_info" {
     sat_s6I4Y_info:
         const sat_s6I4Y_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6I7j_srt+272;
 },
 Data.Monoid.$fReadFirst_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c6Jk5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Jk9; else goto c6Jk8;
       c6Jk9: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Monoid.$fReadFirst_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Jk8: // global
           I64[Hp - 8] = sat_s6I4Y_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst_$creadListPrec_info" {
     Data.Monoid.$fReadFirst_$creadListPrec_info:
         const Data.Monoid.$fReadFirst_$creadListPrec_entry;
         const 0;
         const 43984760078350;
         const 4294967301;
         const S6I7j_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.549274084 UTC

[section ""data" . Data.Monoid.$fReadFirst_$creadList_closure" {
     Data.Monoid.$fReadFirst_$creadList_closure:
         const Data.Monoid.$fReadFirst_$creadList_info;
         const 0;
 },
 sat_s6I50_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Jku: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fReadFirst1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I50_info" {
     sat_s6I50_info:
         const sat_s6I50_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6I7j_srt+272;
 },
 sat_s6I51_entry() //  [R1]
         { []
         }
     {offset
       c6Jkx: // global
           _s6I51::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6Jky; else goto c6Jkz;
       c6Jkz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6JkB; else goto c6JkA;
       c6JkB: // global
           HpAlloc = 16;
           goto c6Jky;
       c6Jky: // global
           R1 = _s6I51::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JkA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6I51::P64;
           _s6I4Z::P64 = P64[_s6I51::P64 + 16];
           I64[Hp - 8] = sat_s6I50_info;
           P64[Hp] = _s6I4Z::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I51_info" {
     sat_s6I51_info:
         const sat_s6I51_entry;
         const 1;
         const 8800387989520;
         const S6I7j_srt+184;
 },
 Data.Monoid.$fReadFirst_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c6JkC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JkG; else goto c6JkF;
       c6JkG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Monoid.$fReadFirst_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JkF: // global
           I64[Hp - 16] = sat_s6I51_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst_$creadList_info" {
     Data.Monoid.$fReadFirst_$creadList_info:
         const Data.Monoid.$fReadFirst_$creadList_entry;
         const 0;
         const 79169132167182;
         const 4294967301;
         const S6I7j_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.558808982 UTC

[section ""data" . Data.Monoid.$fReadFirst_closure" {
     Data.Monoid.$fReadFirst_closure:
         const Data.Monoid.$fReadFirst_info;
         const 0;
 },
 sat_s6I56_entry() //  [R1]
         { []
         }
     {offset
       c6Jl0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Jl1; else goto c6Jl2;
       c6Jl1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Jl2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Monoid.$fReadFirst_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I56_info" {
     sat_s6I56_info:
         const sat_s6I56_entry;
         const 1;
         const 4294967312;
         const S6I7j_srt+288;
 },
 sat_s6I55_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Jl8: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fReadFirst1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I55_info" {
     sat_s6I55_info:
         const sat_s6I55_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6I7j_srt+272;
 },
 sat_s6I54_entry() //  [R1]
         { []
         }
     {offset
       c6Jlf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Jlg; else goto c6Jlh;
       c6Jlg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Jlh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Monoid.$fReadFirst_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I54_info" {
     sat_s6I54_info:
         const sat_s6I54_entry;
         const 1;
         const 4294967312;
         const S6I7j_srt+296;
 },
 sat_s6I53_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Jln: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Monoid.$fReadFirst_$creadsPrec_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I53_info" {
     sat_s6I53_info:
         const sat_s6I53_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6I7j_srt+280;
 },
 Data.Monoid.$fReadFirst_entry() //  [R2]
         { []
         }
     {offset
       c6Jlr: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c6Jlv; else goto c6Jlu;
       c6Jlv: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Monoid.$fReadFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Jlu: // global
           I64[Hp - 112] = sat_s6I56_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6I55_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s6I54_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s6I53_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst_info" {
     Data.Monoid.$fReadFirst_info:
         const Data.Monoid.$fReadFirst_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S6I7j_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.570742733 UTC

[section ""data" . Data.Monoid.$fEqFirst_closure" {
     Data.Monoid.$fEqFirst_closure:
         const Data.Monoid.$fEqFirst_info;
 },
 sat_s6I59_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Jm2: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fEqMaybe_$c/=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I59_info" {
     sat_s6I59_info:
         const sat_s6I59_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6I58_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Jma: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fEqMaybe_$c==_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I58_info" {
     sat_s6I58_info:
         const sat_s6I58_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Monoid.$fEqFirst_entry() //  [R2]
         { []
         }
     {offset
       c6Jme: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6Jmi; else goto c6Jmh;
       c6Jmi: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Monoid.$fEqFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Jmh: // global
           I64[Hp - 48] = sat_s6I59_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_s6I58_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fEqFirst_info" {
     Data.Monoid.$fEqFirst_info:
         const Data.Monoid.$fEqFirst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.578350162 UTC

[section ""data" . Data.Monoid.$fOrdFirst_$cp1Ord_closure" {
     Data.Monoid.$fOrdFirst_$cp1Ord_closure:
         const Data.Monoid.$fOrdFirst_$cp1Ord_info;
 },
 sat_s6I5b_entry() //  [R1]
         { []
         }
     {offset
       c6JmE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JmF; else goto c6JmG;
       c6JmF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JmG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I5b_info" {
     sat_s6I5b_info:
         const sat_s6I5b_entry;
         const 1;
         const 16;
 },
 Data.Monoid.$fOrdFirst_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       c6JmH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JmL; else goto c6JmK;
       c6JmL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Monoid.$fOrdFirst_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JmK: // global
           I64[Hp - 16] = sat_s6I5b_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Monoid.$fEqFirst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fOrdFirst_$cp1Ord_info" {
     Data.Monoid.$fOrdFirst_$cp1Ord_info:
         const Data.Monoid.$fOrdFirst_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.58765826 UTC

[section ""data" . Data.Monoid.$fOrdFirst_closure" {
     Data.Monoid.$fOrdFirst_closure:
         const Data.Monoid.$fOrdFirst_info;
 },
 sat_s6I5m_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Jn3: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$cmin_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I5m_info" {
     sat_s6I5m_info:
         const sat_s6I5m_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6I5l_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Jnb: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$cmax_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I5l_info" {
     sat_s6I5l_info:
         const sat_s6I5l_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6I5k_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Jnj: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c>=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I5k_info" {
     sat_s6I5k_info:
         const sat_s6I5k_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6I5j_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Jnr: // global
           R4 = R2;
           R3 = R3;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I5j_info" {
     sat_s6I5j_info:
         const sat_s6I5j_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6I5g_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Jnz: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I5g_info" {
     sat_s6I5g_info:
         const sat_s6I5g_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6I5f_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JnH: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I5f_info" {
     sat_s6I5f_info:
         const sat_s6I5f_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6I5e_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JnP: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6I5e_info" {
     sat_s6I5e_info:
         const sat_s6I5e_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6I5d_entry() //  [R1]
         { []
         }
     {offset
       c6JnW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JnX; else goto c6JnY;
       c6JnX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JnY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Monoid.$fOrdFirst_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6I5d_info" {
     sat_s6I5d_info:
         const sat_s6I5d_entry;
         const 1;
         const 16;
 },
 Data.Monoid.$fOrdFirst_entry() //  [R2]
         { []
         }
     {offset
       c6Jo0: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c6Jo4; else goto c6Jo3;
       c6Jo4: // global
           HpAlloc = 208;
           R2 = R2;
           R1 = Data.Monoid.$fOrdFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Jo3: // global
           I64[Hp - 200] = sat_s6I5m_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s6I5l_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s6I5k_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s6I5j_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6I5g_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s6I5f_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6I5e_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6I5d_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 102;
           P64[Hp - 40] = Hp - 118;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 150;
           P64[Hp - 16] = Hp - 166;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 198;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fOrdFirst_info" {
     Data.Monoid.$fOrdFirst_info:
         const Data.Monoid.$fOrdFirst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.604128567 UTC

[section ""data" . Data.Monoid.getFirst_closure" {
     Data.Monoid.getFirst_closure:
         const Data.Monoid.getFirst_info;
 },
 Data.Monoid.getFirst_entry() //  [R2]
         { []
         }
     {offset
       c6JoL: // global
           R2 = R2;
           call Data.Monoid.$fGeneric1First2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.getFirst_info" {
     Data.Monoid.getFirst_info:
         const Data.Monoid.getFirst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.607685445 UTC

[section ""data" . Data.Monoid.getLast_closure" {
     Data.Monoid.getLast_closure:
         const Data.Monoid.getLast_info;
 },
 Data.Monoid.getLast_entry() //  [R2]
         { []
         }
     {offset
       c6JoW: // global
           R2 = R2;
           call Data.Monoid.$fGeneric1Last2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.getLast_info" {
     Data.Monoid.getLast_info:
         const Data.Monoid.getLast_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.610867618 UTC

[section ""cstring" . Data.Monoid.$trModule4_bytes" {
     Data.Monoid.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.612644856 UTC

[section ""data" . Data.Monoid.$trModule3_closure" {
     Data.Monoid.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Monoid.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.614365936 UTC

[section ""cstring" . Data.Monoid.$trModule2_bytes" {
     Data.Monoid.$trModule2_bytes:
         I8[] [68,97,116,97,46,77,111,110,111,105,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.616114284 UTC

[section ""data" . Data.Monoid.$trModule1_closure" {
     Data.Monoid.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Monoid.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.619090837 UTC

[section ""data" . Data.Monoid.$trModule_closure" {
     Data.Monoid.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Monoid.$trModule3_closure+1;
         const Data.Monoid.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.62092674 UTC

[section ""data" . $krep_r6I1r_closure" {
     $krep_r6I1r_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.6227186 UTC

[section ""data" . $krep1_r6I1s_closure" {
     $krep1_r6I1s_closure:
         const :_con_info;
         const $krep_r6I1r_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.62453486 UTC

[section ""data" . $krep2_r6I1t_closure" {
     $krep2_r6I1t_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep1_r6I1s_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.626574556 UTC

[section ""data" . Data.Monoid.$tcFirst1_closure" {
     Data.Monoid.$tcFirst1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Monoid.$fReadFirst11_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.628308134 UTC

[section ""data" . Data.Monoid.$tcFirst_closure" {
     Data.Monoid.$tcFirst_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Monoid.$trModule_closure+1;
         const Data.Monoid.$tcFirst1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 12072287807032806756;
         const 12788244796562536401;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.630338304 UTC

[section ""data" . $krep3_r6I1u_closure" {
     $krep3_r6I1u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Monoid.$tcFirst_closure+1;
         const $krep1_r6I1s_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.632745078 UTC

[section ""data" . Data.Monoid.$tc'First1_closure" {
     Data.Monoid.$tc'First1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r6I1t_closure+1;
         const $krep3_r6I1u_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.634890762 UTC

[section ""cstring" . Data.Monoid.$tc'First3_bytes" {
     Data.Monoid.$tc'First3_bytes:
         I8[] [39,70,105,114,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.63707896 UTC

[section ""data" . Data.Monoid.$tc'First2_closure" {
     Data.Monoid.$tc'First2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Monoid.$tc'First3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.639450836 UTC

[section ""data" . Data.Monoid.$tc'First_closure" {
     Data.Monoid.$tc'First_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Monoid.$trModule_closure+1;
         const Data.Monoid.$tc'First2_closure+1;
         const Data.Monoid.$tc'First1_closure+4;
         const 7752528083504400280;
         const 15965132804789246607;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.642050293 UTC

[section ""data" . Data.Monoid.$tcLast1_closure" {
     Data.Monoid.$tcLast1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Monoid.$fReadLast5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.644390995 UTC

[section ""data" . Data.Monoid.$tcLast_closure" {
     Data.Monoid.$tcLast_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Monoid.$trModule_closure+1;
         const Data.Monoid.$tcLast1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 6920195955404695016;
         const 2388797855174213212;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.646894376 UTC

[section ""data" . $krep4_r6I1v_closure" {
     $krep4_r6I1v_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Monoid.$tcLast_closure+1;
         const $krep1_r6I1s_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.649978649 UTC

[section ""data" . Data.Monoid.$tc'Last1_closure" {
     Data.Monoid.$tc'Last1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r6I1t_closure+1;
         const $krep4_r6I1v_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.652307058 UTC

[section ""cstring" . Data.Monoid.$tc'Last3_bytes" {
     Data.Monoid.$tc'Last3_bytes:
         I8[] [39,76,97,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.654610514 UTC

[section ""data" . Data.Monoid.$tc'Last2_closure" {
     Data.Monoid.$tc'Last2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Monoid.$tc'Last3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.656941988 UTC

[section ""data" . Data.Monoid.$tc'Last_closure" {
     Data.Monoid.$tc'Last_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Monoid.$trModule_closure+1;
         const Data.Monoid.$tc'Last2_closure+1;
         const Data.Monoid.$tc'Last1_closure+4;
         const 5411164464353425083;
         const 12998161994081761510;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:57.660236659 UTC

[section ""relreadonly" . S6I7j_srt" {
     S6I7j_srt:
         const Data.Semigroup.Internal.stimesIdempotentMonoid_closure;
         const Data.Monoid.$fMonoidFirst_closure;
         const Data.Monoid.$fMonoidLast_closure;
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const Data.Monoid.$w$cshowsPrec1_closure;
         const Data.Monoid.$fShowLast_$cshowsPrec_closure;
         const GHC.Show.$fShowMaybe4_closure;
         const Data.Monoid.$fReadFirst3_closure;
         const GHC.Show.$fShowMaybe1_closure;
         const Data.Monoid.$fShowFirst4_closure;
         const Data.Monoid.$fShowLast_$cshow_closure;
         const Data.Monoid.$fShowLast_$cshowList_closure;
         const Data.Monoid.$fShowLast_closure;
         const GHC.Read.$fReadMaybe1_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Monoid.$fReadFirst2_closure;
         const GHC.Read.readField_closure;
         const Data.Monoid.$fReadLast2_closure;
         const Data.Monoid.$fReadFirst_lexeme_closure;
         const Data.Monoid.$fReadLast_lexeme_closure;
         const GHC.Read.list3_closure;
         const Data.Monoid.$fReadLast1_closure;
         const Data.Monoid.$fReadLast_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Monoid.$fReadLast_$creadListPrec_closure;
         const Data.Monoid.$fReadLast_$creadList_closure;
         const Data.Monoid.$fReadLast_closure;
         const Data.Monoid.$w$cshowsPrec_closure;
         const Data.Monoid.$fShowFirst_$cshowsPrec_closure;
         const Data.Monoid.$fShowFirst_$cshow_closure;
         const Data.Monoid.$fShowFirst_$cshowList_closure;
         const Data.Monoid.$fShowFirst_closure;
         const Data.Monoid.$fReadFirst6_closure;
         const Data.Monoid.$fReadFirst_lexeme1_closure;
         const Data.Monoid.$fReadFirst1_closure;
         const Data.Monoid.$fReadFirst_$creadsPrec_closure;
         const Data.Monoid.$fReadFirst_$creadListPrec_closure;
         const Data.Monoid.$fReadFirst_$creadList_closure;
         const Data.Monoid.$fReadFirst_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.16171855 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:01:59.164147972 UTC

[section ""data" . Data.Monoid.$fMonoidFirst_$c<>_closure" {
     Data.Monoid.$fMonoidFirst_$c<>_closure:
         const Data.Monoid.$fMonoidFirst_$c<>_info;
 },
 Data.Monoid.$fMonoidFirst_$c<>_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Jtr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Jts; else goto c6Jtt;
       c6Jts: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fMonoidFirst_$c<>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Jtt: // global
           I64[Sp - 16] = block_c6Jtk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6JtA; else goto c6Jtl;
       u6JtA: // global
           call _c6Jtk(R1) args: 0, res: 0, upd: 0;
       c6Jtl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fMonoidFirst_$c<>_info" {
     Data.Monoid.$fMonoidFirst_$c<>_info:
         const Data.Monoid.$fMonoidFirst_$c<>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6Jtk() //  [R1]
         { []
         }
     {offset
       c6Jtk: // global
           if (R1 & 7 == 1) goto c6Jto; else goto c6Jtp;
       c6Jto: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c6Jtp: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Jtk_info" {
     block_c6Jtk_info:
         const _c6Jtk;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.171352056 UTC

[section ""data" . Data.Monoid.$fSemigroupFirst1_closure" {
     Data.Monoid.$fSemigroupFirst1_closure:
         const Data.Monoid.$fSemigroupFirst1_info;
 },
 Data.Monoid.$fSemigroupFirst1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Ju2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Ju3; else goto u6Juo;
       c6Ju3: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fSemigroupFirst1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u6Juo: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c6JtS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Monoid.$fSemigroupFirst1_info" {
     Data.Monoid.$fSemigroupFirst1_info:
         const Data.Monoid.$fSemigroupFirst1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6JtS() //  []
         { []
         }
     {offset
       c6JtS: // global
           I64[Sp - 8] = block_c6JtV_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Juq; else goto c6JtW;
       u6Juq: // global
           call _c6JtV(R1) args: 0, res: 0, upd: 0;
       c6JtW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6JtV() //  [R1]
         { []
         }
     {offset
       c6JtV: // global
           _s6Jpu::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6JtZ; else goto c6Ju0;
       c6JtZ: // global
           R1 = _s6Jpu::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c6Ju0: // global
           I64[Sp] = block_c6Jua_info;
           _s6Jpx::P64 = P64[R1 + 6];
           _s6Jpy::P64 = P64[R1 + 14];
           R1 = _s6Jpu::P64;
           P64[Sp + 8] = _s6Jpy::P64;
           P64[Sp + 16] = _s6Jpx::P64;
           if (R1 & 7 != 0) goto u6Jur; else goto c6Juc;
       u6Jur: // global
           call _c6Jua(R1) args: 0, res: 0, upd: 0;
       c6Juc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6JtV_info" {
     block_c6JtV_info:
         const _c6JtV;
         const 130;
         const 30;
 },
 _c6Jua() //  [R1]
         { []
         }
     {offset
       c6Jua: // global
           if (R1 & 7 == 1) goto c6Jui; else goto c6Jum;
       c6Jui: // global
           _s6Jpv::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s6Jpv::P64;
           Sp = Sp + 8;
           call _c6JtS() args: 0, res: 0, upd: 0;
       c6Jum: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Jua_info" {
     block_c6Jua_info:
         const _c6Jua;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.180452703 UTC

[section ""data" . Data.Monoid.$fSemigroupFirst_$csconcat_closure" {
     Data.Monoid.$fSemigroupFirst_$csconcat_closure:
         const Data.Monoid.$fSemigroupFirst_$csconcat_info;
 },
 Data.Monoid.$fSemigroupFirst_$csconcat_entry() //  [R2]
         { []
         }
     {offset
       c6Jv1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Jv2; else goto c6Jv3;
       c6Jv2: // global
           R2 = R2;
           R1 = Data.Monoid.$fSemigroupFirst_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Jv3: // global
           I64[Sp - 8] = block_c6JuY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Jv7; else goto c6JuZ;
       u6Jv7: // global
           call _c6JuY(R1) args: 0, res: 0, upd: 0;
       c6JuZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fSemigroupFirst_$csconcat_info" {
     Data.Monoid.$fSemigroupFirst_$csconcat_info:
         const Data.Monoid.$fSemigroupFirst_$csconcat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6JuY() //  [R1]
         { []
         }
     {offset
       c6JuY: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Monoid.$fSemigroupFirst1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6JuY_info" {
     block_c6JuY_info:
         const _c6JuY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.187435545 UTC

[section ""data" . Data.Monoid.$fMonoidFirst_go_closure" {
     Data.Monoid.$fMonoidFirst_go_closure:
         const Data.Monoid.$fMonoidFirst_go_info;
 },
 Data.Monoid.$fMonoidFirst_go_entry() //  [R2]
         { []
         }
     {offset
       c6Jvt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Jvu; else goto u6JvP;
       c6Jvu: // global
           R2 = R2;
           R1 = Data.Monoid.$fMonoidFirst_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u6JvP: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c6Jvj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Monoid.$fMonoidFirst_go_info" {
     Data.Monoid.$fMonoidFirst_go_info:
         const Data.Monoid.$fMonoidFirst_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Jvj() //  []
         { []
         }
     {offset
       c6Jvj: // global
           _s6JpF::P64 = P64[Sp];
           I64[Sp] = block_c6Jvm_info;
           R1 = _s6JpF::P64;
           if (R1 & 7 != 0) goto u6JvR; else goto c6Jvn;
       u6JvR: // global
           call _c6Jvm(R1) args: 0, res: 0, upd: 0;
       c6Jvn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6Jvm() //  [R1]
         { []
         }
     {offset
       c6Jvm: // global
           if (R1 & 7 == 1) goto c6Jvq; else goto c6Jvr;
       c6Jvq: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Jvr: // global
           I64[Sp - 8] = block_c6JvB_info;
           _s6JpI::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s6JpI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6JvS; else goto c6JvD;
       u6JvS: // global
           call _c6JvB(R1) args: 0, res: 0, upd: 0;
       c6JvD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Jvm_info" {
     block_c6Jvm_info:
         const _c6Jvm;
         const 0;
         const 30;
 },
 _c6JvB() //  [R1]
         { []
         }
     {offset
       c6JvB: // global
           if (R1 & 7 == 1) goto c6JvJ; else goto c6JvN;
       c6JvJ: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c6Jvj() args: 0, res: 0, upd: 0;
       c6JvN: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6JvB_info" {
     block_c6JvB_info:
         const _c6JvB;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.196427244 UTC

[section ""data" . Data.Monoid.$fSemigroupFirst_closure" {
     Data.Monoid.$fSemigroupFirst_closure:
         const GHC.Base.C:Semigroup_con_info;
         const Data.Monoid.$fMonoidFirst_$c<>_closure+2;
         const Data.Monoid.$fSemigroupFirst_$csconcat_closure+1;
         const Data.Monoid.$fSemigroupFirst_$cstimes_closure+3;
         const 0;
 },
 section ""data" . Data.Monoid.$fMonoidFirst_closure" {
     Data.Monoid.$fMonoidFirst_closure:
         const GHC.Base.C:Monoid_con_info;
         const Data.Monoid.$fSemigroupFirst_closure+1;
         const GHC.Base.Nothing_closure+1;
         const Data.Monoid.$fMonoidFirst_$c<>_closure+2;
         const Data.Monoid.$fMonoidFirst_go_closure+1;
         const 0;
 },
 section ""data" . Data.Monoid.$fSemigroupFirst_$cstimes_closure" {
     Data.Monoid.$fSemigroupFirst_$cstimes_closure:
         const Data.Monoid.$fSemigroupFirst_$cstimes_info;
         const 0;
 },
 Data.Monoid.$fSemigroupFirst_$cstimes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Jwp: // global
           R5 = R4;
           R4 = R3;
           R3 = Data.Monoid.$fMonoidFirst_closure+1;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotentMonoid_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fSemigroupFirst_$cstimes_info" {
     Data.Monoid.$fSemigroupFirst_$cstimes_info:
         const Data.Monoid.$fSemigroupFirst_$cstimes_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6Jws_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.203346283 UTC

[section ""data" . Data.Monoid.$fMonoidLast_$c<>_closure" {
     Data.Monoid.$fMonoidLast_$c<>_closure:
         const Data.Monoid.$fMonoidLast_$c<>_info;
 },
 Data.Monoid.$fMonoidLast_$c<>_entry() //  [R2, R3]
         { []
         }
     {offset
       c6JwK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JwL; else goto c6JwM;
       c6JwL: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fMonoidLast_$c<>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6JwM: // global
           I64[Sp - 16] = block_c6JwD_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6JwT; else goto c6JwE;
       u6JwT: // global
           call _c6JwD(R1) args: 0, res: 0, upd: 0;
       c6JwE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fMonoidLast_$c<>_info" {
     Data.Monoid.$fMonoidLast_$c<>_info:
         const Data.Monoid.$fMonoidLast_$c<>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6JwD() //  [R1]
         { []
         }
     {offset
       c6JwD: // global
           if (R1 & 7 == 1) goto c6JwH; else goto c6JwI;
       c6JwH: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c6JwI: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6JwD_info" {
     block_c6JwD_info:
         const _c6JwD;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.210613569 UTC

[section ""data" . Data.Monoid.$fSemigroupLast1_closure" {
     Data.Monoid.$fSemigroupLast1_closure:
         const Data.Monoid.$fSemigroupLast1_info;
 },
 Data.Monoid.$fSemigroupLast1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Jxl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Jxm; else goto c6Jxn;
       c6Jxm: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fSemigroupLast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Jxn: // global
           I64[Sp - 16] = block_c6Jxe_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6JxJ; else goto c6Jxf;
       u6JxJ: // global
           call _c6Jxe(R1) args: 0, res: 0, upd: 0;
       c6Jxf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fSemigroupLast1_info" {
     Data.Monoid.$fSemigroupLast1_info:
         const Data.Monoid.$fSemigroupLast1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6Jxe() //  [R1]
         { []
         }
     {offset
       c6Jxe: // global
           if (R1 & 7 == 1) goto u6JxG; else goto c6Jxj;
       u6JxG: // global
           Sp = Sp + 8;
           call _c6JxA() args: 0, res: 0, upd: 0;
       c6Jxj: // global
           I64[Sp] = block_c6Jxt_info;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Monoid.$fSemigroupLast1_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Jxe_info" {
     block_c6Jxe_info:
         const _c6Jxe;
         const 1;
         const 30;
 },
 _c6Jxt() //  [R1]
         { []
         }
     {offset
       c6Jxt: // global
           if (R1 & 7 == 1) goto u6JxH; else goto c6JxE;
       u6JxH: // global
           Sp = Sp + 8;
           call _c6JxA() args: 0, res: 0, upd: 0;
       c6JxE: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Jxt_info" {
     block_c6Jxt_info:
         const _c6Jxt;
         const 1;
         const 30;
 },
 _c6JxA() //  []
         { []
         }
     {offset
       c6JxA: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.219529704 UTC

[section ""data" . Data.Monoid.$fSemigroupLast_$csconcat_closure" {
     Data.Monoid.$fSemigroupLast_$csconcat_closure:
         const Data.Monoid.$fSemigroupLast_$csconcat_info;
 },
 Data.Monoid.$fSemigroupLast_$csconcat_entry() //  [R2]
         { []
         }
     {offset
       c6Jyg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Jyh; else goto c6Jyi;
       c6Jyh: // global
           R2 = R2;
           R1 = Data.Monoid.$fSemigroupLast_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Jyi: // global
           I64[Sp - 8] = block_c6Jyd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Jym; else goto c6Jye;
       u6Jym: // global
           call _c6Jyd(R1) args: 0, res: 0, upd: 0;
       c6Jye: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fSemigroupLast_$csconcat_info" {
     Data.Monoid.$fSemigroupLast_$csconcat_info:
         const Data.Monoid.$fSemigroupLast_$csconcat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Jyd() //  [R1]
         { []
         }
     {offset
       c6Jyd: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Monoid.$fSemigroupLast1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Jyd_info" {
     block_c6Jyd_info:
         const _c6Jyd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.226280386 UTC

[section ""data" . Data.Monoid.$fMonoidLast_go_closure" {
     Data.Monoid.$fMonoidLast_go_closure:
         const Data.Monoid.$fMonoidLast_go_info;
 },
 Data.Monoid.$fMonoidLast_go_entry() //  [R2]
         { []
         }
     {offset
       c6JyI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JyJ; else goto c6JyK;
       c6JyJ: // global
           R2 = R2;
           R1 = Data.Monoid.$fMonoidLast_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JyK: // global
           I64[Sp - 8] = block_c6JyB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Jz3; else goto c6JyC;
       u6Jz3: // global
           call _c6JyB(R1) args: 0, res: 0, upd: 0;
       c6JyC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fMonoidLast_go_info" {
     Data.Monoid.$fMonoidLast_go_info:
         const Data.Monoid.$fMonoidLast_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6JyB() //  [R1]
         { []
         }
     {offset
       c6JyB: // global
           if (R1 & 7 == 1) goto c6JyF; else goto c6JyG;
       c6JyF: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6JyG: // global
           I64[Sp - 8] = block_c6JyQ_info;
           R2 = P64[R1 + 14];
           P64[Sp] = P64[R1 + 6];
           Sp = Sp - 8;
           call Data.Monoid.$fMonoidLast_go_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6JyB_info" {
     block_c6JyB_info:
         const _c6JyB;
         const 0;
         const 30;
 },
 _c6JyQ() //  [R1]
         { []
         }
     {offset
       c6JyQ: // global
           if (R1 & 7 == 1) goto c6JyX; else goto c6Jz1;
       c6JyX: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c6Jz1: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6JyQ_info" {
     block_c6JyQ_info:
         const _c6JyQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.233631462 UTC

[section ""data" . Data.Monoid.$fSemigroupLast_closure" {
     Data.Monoid.$fSemigroupLast_closure:
         const GHC.Base.C:Semigroup_con_info;
         const Data.Monoid.$fMonoidLast_$c<>_closure+2;
         const Data.Monoid.$fSemigroupLast_$csconcat_closure+1;
         const Data.Monoid.$fSemigroupLast_$cstimes_closure+3;
         const 0;
 },
 section ""data" . Data.Monoid.$fMonoidLast_closure" {
     Data.Monoid.$fMonoidLast_closure:
         const GHC.Base.C:Monoid_con_info;
         const Data.Monoid.$fSemigroupLast_closure+1;
         const GHC.Base.Nothing_closure+1;
         const Data.Monoid.$fMonoidLast_$c<>_closure+2;
         const Data.Monoid.$fMonoidLast_go_closure+1;
         const 0;
 },
 section ""data" . Data.Monoid.$fSemigroupLast_$cstimes_closure" {
     Data.Monoid.$fSemigroupLast_$cstimes_closure:
         const Data.Monoid.$fSemigroupLast_$cstimes_info;
         const 0;
 },
 Data.Monoid.$fSemigroupLast_$cstimes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Jzx: // global
           R5 = R4;
           R4 = R3;
           R3 = Data.Monoid.$fMonoidLast_closure+1;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotentMonoid_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fSemigroupLast_$cstimes_info" {
     Data.Monoid.$fSemigroupLast_$cstimes_info:
         const Data.Monoid.$fSemigroupLast_$cstimes_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S6Jws_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.238438285 UTC

[section ""data" . Data.Monoid.$fFunctorLast_closure" {
     Data.Monoid.$fFunctorLast_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.Base.$fApplicativeMaybe_$cfmap_closure+2;
         const GHC.Base.$fFunctorMaybe_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.240267394 UTC

[section ""data" . Data.Monoid.$fApplicativeLast_closure" {
     Data.Monoid.$fApplicativeLast_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Monoid.$fFunctorLast_closure+1;
         const GHC.Base.Just_closure+1;
         const GHC.Base.$fApplicativeMaybe_$c<*>_closure+2;
         const GHC.Base.$fApplicativeMaybe_$cliftA2_closure+3;
         const GHC.Base.$fApplicativeMaybe_$c*>_closure+2;
         const GHC.Base.$fApplicativeMaybe_$c<*_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.241999473 UTC

[section ""data" . Data.Monoid.$fMonadLast_closure" {
     Data.Monoid.$fMonadLast_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Monoid.$fApplicativeLast_closure+1;
         const GHC.Base.$fMonadMaybe_$c>>=_closure+2;
         const GHC.Base.$fApplicativeMaybe_$c*>_closure+2;
         const GHC.Base.Just_closure+1;
         const GHC.Base.$fMonadMaybe_$cfail_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.244057252 UTC

[section ""data" . Data.Monoid.$fGeneric1Last1_closure" {
     Data.Monoid.$fGeneric1Last1_closure:
         const Data.Monoid.$fGeneric1Last1_info;
 },
 Data.Monoid.$fGeneric1Last1_entry() //  [R2]
         { []
         }
     {offset
       c6JzN: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fGeneric1Last1_info" {
     Data.Monoid.$fGeneric1Last1_info:
         const Data.Monoid.$fGeneric1Last1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.247336093 UTC

[section ""data" . Data.Monoid.$fGeneric1Last2_closure" {
     Data.Monoid.$fGeneric1Last2_closure:
         const Data.Monoid.$fGeneric1Last2_info;
 },
 Data.Monoid.$fGeneric1Last2_entry() //  [R2]
         { []
         }
     {offset
       c6JzY: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fGeneric1Last2_info" {
     Data.Monoid.$fGeneric1Last2_info:
         const Data.Monoid.$fGeneric1Last2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.250437241 UTC

[section ""data" . Data.Monoid.$fGeneric1Last_closure" {
     Data.Monoid.$fGeneric1Last_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Monoid.$fGeneric1Last2_closure+1;
         const Data.Monoid.$fGeneric1Last1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.252335746 UTC

[section ""data" . Data.Monoid.$fGenericLast1_closure" {
     Data.Monoid.$fGenericLast1_closure:
         const Data.Monoid.$fGenericLast1_info;
 },
 Data.Monoid.$fGenericLast1_entry() //  [R2]
         { []
         }
     {offset
       c6JAc: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fGenericLast1_info" {
     Data.Monoid.$fGenericLast1_info:
         const Data.Monoid.$fGenericLast1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.255536248 UTC

[section ""data" . Data.Monoid.$fGenericLast2_closure" {
     Data.Monoid.$fGenericLast2_closure:
         const Data.Monoid.$fGenericLast2_info;
 },
 Data.Monoid.$fGenericLast2_entry() //  [R2]
         { []
         }
     {offset
       c6JAn: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fGenericLast2_info" {
     Data.Monoid.$fGenericLast2_info:
         const Data.Monoid.$fGenericLast2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.258423529 UTC

[section ""data" . Data.Monoid.$fGenericLast_closure" {
     Data.Monoid.$fGenericLast_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Monoid.$fGenericLast2_closure+1;
         const Data.Monoid.$fGenericLast1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.26004272 UTC

[section ""data" . Data.Monoid.$fShowFirst1_closure" {
     Data.Monoid.$fShowFirst1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.26162664 UTC

[section ""cstring" . Data.Monoid.$fShowLast2_bytes" {
     Data.Monoid.$fShowLast2_bytes:
         I8[] [76,97,115,116,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.26318689 UTC

[section ""cstring" . Data.Monoid.$fShowLast1_bytes" {
     Data.Monoid.$fShowLast1_bytes:
         I8[] [103,101,116,76,97,115,116,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.265266151 UTC

[section ""cstring" . Data.Monoid.$fReadFirst4_bytes" {
     Data.Monoid.$fReadFirst4_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.273218625 UTC

[section ""data" . Data.Monoid.$w$cshowsPrec1_closure" {
     Data.Monoid.$w$cshowsPrec1_closure:
         const Data.Monoid.$w$cshowsPrec1_info;
         const 0;
 },
 f_s6Jqf_entry() //  [R1]
         { []
         }
     {offset
       c6JAJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JAK; else goto c6JAL;
       c6JAK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JAL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 24];
           R3 = Data.Monoid.$fShowFirst1_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6Jqf_info" {
     f_s6Jqf_info:
         const f_s6Jqf_entry;
         const 2;
         const 4294967314;
         const S6Jws_srt+24;
 },
 sat_s6Jqi_entry() //  [R1]
         { []
         }
     {offset
       c6JB6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JB7; else goto c6JB8;
       c6JB7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JB8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Monoid.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Jqi_info" {
     sat_s6Jqi_info:
         const sat_s6Jqi_entry;
         const 1;
         const 16;
 },
 sat_s6Jqj_entry() //  [R1]
         { []
         }
     {offset
       c6JB9: // global
           _s6Jqj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JBa; else goto c6JBb;
       c6JBb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JBd; else goto c6JBc;
       c6JBd: // global
           HpAlloc = 24;
           goto c6JBa;
       c6JBa: // global
           R1 = _s6Jqj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JBc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6Jqj::P64;
           _s6Jqf::P64 = P64[_s6Jqj::P64 + 16];
           _s6Jqh::P64 = P64[_s6Jqj::P64 + 24];
           I64[Hp - 16] = sat_s6Jqi_info;
           P64[Hp] = _s6Jqh::P64;
           R2 = Hp - 16;
           R1 = _s6Jqf::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Jqj_info" {
     sat_s6Jqj_info:
         const sat_s6Jqj_entry;
         const 2;
         const 18;
 },
 sat_s6Jqk_entry() //  [R1]
         { []
         }
     {offset
       c6JBe: // global
           _s6Jqk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JBf; else goto c6JBg;
       c6JBg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JBi; else goto c6JBh;
       c6JBi: // global
           HpAlloc = 32;
           goto c6JBf;
       c6JBf: // global
           R1 = _s6Jqk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JBh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6Jqk::P64;
           _s6Jqf::P64 = P64[_s6Jqk::P64 + 16];
           _s6Jqh::P64 = P64[_s6Jqk::P64 + 24];
           I64[Hp - 24] = sat_s6Jqj_info;
           P64[Hp - 8] = _s6Jqf::P64;
           P64[Hp] = _s6Jqh::P64;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowLast1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Jqk_info" {
     sat_s6Jqk_info:
         const sat_s6Jqk_entry;
         const 2;
         const 18;
 },
 sat_s6Jql_entry() //  [R1, R2]
         { []
         }
     {offset
       c6JBj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JBn; else goto c6JBm;
       c6JBn: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JBm: // global
           _s6Jqf::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6Jqk_info;
           P64[Hp - 8] = _s6Jqf::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowLast2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jql_info" {
     sat_s6Jql_info:
         const sat_s6Jql_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6Jqo_entry() //  [R1]
         { []
         }
     {offset
       c6JBL: // global
           _s6Jqo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JBM; else goto c6JBN;
       c6JBN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JBP; else goto c6JBO;
       c6JBP: // global
           HpAlloc = 24;
           goto c6JBM;
       c6JBM: // global
           R1 = _s6Jqo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JBO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6Jqo::P64;
           _s6Jqm::P64 = P64[_s6Jqo::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6Jqm::P64;
           R3 = Hp - 14;
           R2 = Data.Monoid.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Jqo_info" {
     sat_s6Jqo_info:
         const sat_s6Jqo_entry;
         const 1;
         const 16;
 },
 sat_s6Jqp_entry() //  [R1]
         { []
         }
     {offset
       c6JBQ: // global
           _s6Jqp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JBR; else goto c6JBS;
       c6JBS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JBU; else goto c6JBT;
       c6JBU: // global
           HpAlloc = 24;
           goto c6JBR;
       c6JBR: // global
           R1 = _s6Jqp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JBT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6Jqp::P64;
           _s6Jqf::P64 = P64[_s6Jqp::P64 + 16];
           _s6Jqm::P64 = P64[_s6Jqp::P64 + 24];
           I64[Hp - 16] = sat_s6Jqo_info;
           P64[Hp] = _s6Jqm::P64;
           R2 = Hp - 16;
           R1 = _s6Jqf::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Jqp_info" {
     sat_s6Jqp_info:
         const sat_s6Jqp_entry;
         const 2;
         const 18;
 },
 sat_s6Jqq_entry() //  [R1]
         { []
         }
     {offset
       c6JBV: // global
           _s6Jqq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JBW; else goto c6JBX;
       c6JBX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JBZ; else goto c6JBY;
       c6JBZ: // global
           HpAlloc = 32;
           goto c6JBW;
       c6JBW: // global
           R1 = _s6Jqq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JBY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6Jqq::P64;
           _s6Jqf::P64 = P64[_s6Jqq::P64 + 16];
           _s6Jqm::P64 = P64[_s6Jqq::P64 + 24];
           I64[Hp - 24] = sat_s6Jqp_info;
           P64[Hp - 8] = _s6Jqf::P64;
           P64[Hp] = _s6Jqm::P64;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowLast1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Jqq_info" {
     sat_s6Jqq_info:
         const sat_s6Jqq_entry;
         const 2;
         const 18;
 },
 sat_s6Jqr_entry() //  [R1]
         { []
         }
     {offset
       c6JC0: // global
           _s6Jqr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JC1; else goto c6JC2;
       c6JC2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JC4; else goto c6JC3;
       c6JC4: // global
           HpAlloc = 32;
           goto c6JC1;
       c6JC1: // global
           R1 = _s6Jqr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JC3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6Jqr::P64;
           _s6Jqf::P64 = P64[_s6Jqr::P64 + 16];
           _s6Jqm::P64 = P64[_s6Jqr::P64 + 24];
           I64[Hp - 24] = sat_s6Jqq_info;
           P64[Hp - 8] = _s6Jqf::P64;
           P64[Hp] = _s6Jqm::P64;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowLast2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Jqr_info" {
     sat_s6Jqr_info:
         const sat_s6Jqr_entry;
         const 2;
         const 18;
 },
 sat_s6Jqs_entry() //  [R1, R2]
         { []
         }
     {offset
       c6JC6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6JCa; else goto c6JC9;
       c6JCa: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JC9: // global
           _s6Jqf::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s6Jqr_info;
           P64[Hp - 32] = _s6Jqf::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jqs_info" {
     sat_s6Jqs_info:
         const sat_s6Jqs_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Monoid.$w$cshowsPrec1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6JCe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6JCi; else goto c6JCh;
       c6JCi: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$w$cshowsPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6JCh: // global
           I64[Hp - 40] = f_s6Jqf_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c6JAF::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto c6JCc; else goto c6JCd;
       c6JCc: // global
           I64[Hp - 8] = sat_s6Jql_info;
           P64[Hp] = _c6JAF::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6JCd: // global
           I64[Hp - 8] = sat_s6Jqs_info;
           P64[Hp] = _c6JAF::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$w$cshowsPrec1_info" {
     Data.Monoid.$w$cshowsPrec1_info:
         const Data.Monoid.$w$cshowsPrec1_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const S6Jws_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.296485386 UTC

[section ""data" . Data.Monoid.$fShowLast_$cshowsPrec_closure" {
     Data.Monoid.$fShowLast_$cshowsPrec_closure:
         const Data.Monoid.$fShowLast_$cshowsPrec_info;
         const 0;
 },
 Data.Monoid.$fShowLast_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6JDw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6JDx; else goto c6JDy;
       c6JDx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fShowLast_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6JDy: // global
           I64[Sp - 24] = block_c6JDt_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6JDC; else goto c6JDu;
       u6JDC: // global
           call _c6JDt(R1) args: 0, res: 0, upd: 0;
       c6JDu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowLast_$cshowsPrec_info" {
     Data.Monoid.$fShowLast_$cshowsPrec_info:
         const Data.Monoid.$fShowLast_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6Jws_srt+32;
 },
 _c6JDt() //  [R1]
         { []
         }
     {offset
       c6JDt: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Monoid.$w$cshowsPrec1_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6JDt_info" {
     block_c6JDt_info:
         const _c6JDt;
         const 2;
         const 4294967326;
         const S6Jws_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.302541196 UTC

[section ""data" . Data.Monoid.$fReadFirst3_closure" {
     Data.Monoid.$fReadFirst3_closure:
         const Data.Monoid.$fReadFirst3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Monoid.$fReadFirst3_entry() //  [R1]
         { []
         }
     {offset
       c6JDT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JDU; else goto c6JDV;
       c6JDU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JDV: // global
           (_c6JDQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6JDQ::I64 == 0) goto c6JDS; else goto c6JDR;
       c6JDS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6JDR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6JDQ::I64;
           R2 = Data.Monoid.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst3_info" {
     Data.Monoid.$fReadFirst3_info:
         const Data.Monoid.$fReadFirst3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.306903858 UTC

[section ""data" . Data.Monoid.$fShowFirst4_closure" {
     Data.Monoid.$fShowFirst4_closure:
         const Data.Monoid.$fShowFirst4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Monoid.$fShowFirst4_entry() //  [R1]
         { []
         }
     {offset
       c6JEa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JEb; else goto c6JEc;
       c6JEb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JEc: // global
           (_c6JE7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6JE7::I64 == 0) goto c6JE9; else goto c6JE8;
       c6JE9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6JE8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6JE7::I64;
           R3 = Data.Monoid.$fReadFirst3_closure;
           R2 = GHC.Show.$fShowMaybe4_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowFirst4_info" {
     Data.Monoid.$fShowFirst4_info:
         const Data.Monoid.$fShowFirst4_entry;
         const 0;
         const 12884901909;
         const S6Jws_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.313969634 UTC

[section ""data" . Data.Monoid.$fShowLast_$cshow_closure" {
     Data.Monoid.$fShowLast_$cshow_closure:
         const Data.Monoid.$fShowLast_$cshow_info;
         const 0;
 },
 sat_s6JqC_entry() //  [R1]
         { []
         }
     {offset
       c6JEH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6JEI; else goto c6JEJ;
       c6JEI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JEJ: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Show.appPrec1_closure;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = Data.Monoid.$fReadFirst3_closure;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JqC_info" {
     sat_s6JqC_info:
         const sat_s6JqC_entry;
         const 2;
         const 4294967314;
         const S6Jws_srt+56;
 },
 sat_s6JqD_entry() //  [R1]
         { []
         }
     {offset
       c6JEO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6JEP; else goto c6JEQ;
       c6JEP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JEQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6JEx_info;
           _s6Jqy::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s6Jqy::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6JEW; else goto c6JEy;
       u6JEW: // global
           call _c6JEx(R1) args: 0, res: 0, upd: 0;
       c6JEy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6JqD_info" {
     sat_s6JqD_info:
         const sat_s6JqD_entry;
         const 2;
         const 30064771090;
         const S6Jws_srt+56;
 },
 _c6JEx() //  [R1]
         { []
         }
     {offset
       c6JEx: // global
           if (R1 & 7 == 1) goto c6JEL; else goto c6JEM;
       c6JEL: // global
           R1 = Data.Monoid.$fShowFirst4_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c6JEM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JEV; else goto c6JEU;
       c6JEV: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6JEU: // global
           _s6JqB::P64 = P64[R1 + 6];
           I64[Hp - 24] = sat_s6JqC_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s6JqB::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowMaybe1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6JEx_info" {
     block_c6JEx_info:
         const _c6JEx;
         const 1;
         const 30064771102;
         const S6Jws_srt+56;
 },
 sat_s6JqE_entry() //  [R1]
         { []
         }
     {offset
       c6JEX: // global
           _s6JqE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JEY; else goto c6JEZ;
       c6JEZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JF1; else goto c6JF0;
       c6JF1: // global
           HpAlloc = 32;
           goto c6JEY;
       c6JEY: // global
           R1 = _s6JqE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JF0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6JqE::P64;
           _s6Jqy::P64 = P64[_s6JqE::P64 + 16];
           _s6Jqz::P64 = P64[_s6JqE::P64 + 24];
           I64[Hp - 24] = sat_s6JqD_info;
           P64[Hp - 8] = _s6Jqy::P64;
           P64[Hp] = _s6Jqz::P64;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowLast1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6JqE_info" {
     sat_s6JqE_info:
         const sat_s6JqE_entry;
         const 2;
         const 30064771090;
         const S6Jws_srt+56;
 },
 Data.Monoid.$fShowLast_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c6JF2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JF6; else goto c6JF5;
       c6JF6: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fShowLast_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6JF5: // global
           I64[Hp - 24] = sat_s6JqE_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowLast2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowLast_$cshow_info" {
     Data.Monoid.$fShowLast_$cshow_info:
         const Data.Monoid.$fShowLast_$cshow_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const S6Jws_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.326313272 UTC

[section ""data" . Data.Monoid.$fShowLast_$cshowList_closure" {
     Data.Monoid.$fShowLast_$cshowList_closure:
         const Data.Monoid.$fShowLast_$cshowList_info;
         const 0;
 },
 sat_s6JqJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c6JFO: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Monoid.$w$cshowsPrec1_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JqJ_info" {
     sat_s6JqJ_info:
         const sat_s6JqJ_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Jws_srt+32;
 },
 Data.Monoid.$fShowLast_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6JFR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6JFV; else goto c6JFU;
       c6JFV: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fShowLast_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6JFU: // global
           I64[Hp - 8] = sat_s6JqJ_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowLast_$cshowList_info" {
     Data.Monoid.$fShowLast_$cshowList_info:
         const Data.Monoid.$fShowLast_$cshowList_entry;
         const 0;
         const 554050781198;
         const 12884901911;
         const S6Jws_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.332918387 UTC

[section ""data" . Data.Monoid.$fShowLast_closure" {
     Data.Monoid.$fShowLast_closure:
         const Data.Monoid.$fShowLast_info;
         const 0;
 },
 sat_s6JqN_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JGd: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fShowLast_$cshowList_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JqN_info" {
     sat_s6JqN_info:
         const sat_s6JqN_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Jws_srt+88;
 },
 sat_s6JqM_entry() //  [R1, R2]
         { []
         }
     {offset
       c6JGl: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Monoid.$fShowLast_$cshow_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JqM_info" {
     sat_s6JqM_info:
         const sat_s6JqM_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Jws_srt+80;
 },
 sat_s6JqL_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JGt: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fShowLast_$cshowsPrec_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JqL_info" {
     sat_s6JqL_info:
         const sat_s6JqL_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Jws_srt+40;
 },
 Data.Monoid.$fShowLast_entry() //  [R2]
         { []
         }
     {offset
       c6JGx: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c6JGB; else goto c6JGA;
       c6JGB: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Monoid.$fShowLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JGA: // global
           I64[Hp - 72] = sat_s6JqN_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6JqM_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6JqL_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowLast_info" {
     Data.Monoid.$fShowLast_info:
         const Data.Monoid.$fShowLast_entry;
         const 0;
         const 966367641614;
         const 4294967301;
         const S6Jws_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.340858935 UTC

[section ""cstring" . Data.Monoid.$fReadLast5_bytes" {
     Data.Monoid.$fReadLast5_bytes:
         I8[] [76,97,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.343274466 UTC

[section ""data" . Data.Monoid.$fReadLast4_closure" {
     Data.Monoid.$fReadLast4_closure:
         const Data.Monoid.$fReadLast4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Monoid.$fReadLast4_entry() //  [R1]
         { []
         }
     {offset
       c6JH4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JH5; else goto c6JH6;
       c6JH5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JH6: // global
           (_c6JH1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6JH1::I64 == 0) goto c6JH3; else goto c6JH2;
       c6JH3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6JH2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6JH1::I64;
           R2 = Data.Monoid.$fReadLast5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadLast4_info" {
     Data.Monoid.$fReadLast4_info:
         const Data.Monoid.$fReadLast4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.347629598 UTC

[section ""data" . Data.Monoid.$fReadLast_lexeme_closure" {
     Data.Monoid.$fReadLast_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Monoid.$fReadLast4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.34989651 UTC

[section ""cstring" . Data.Monoid.$fReadFirst9_bytes" {
     Data.Monoid.$fReadFirst9_bytes:
         I8[] [123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.352277261 UTC

[section ""data" . Data.Monoid.$fReadFirst8_closure" {
     Data.Monoid.$fReadFirst8_closure:
         const Data.Monoid.$fReadFirst8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Monoid.$fReadFirst8_entry() //  [R1]
         { []
         }
     {offset
       c6JHn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JHo; else goto c6JHp;
       c6JHo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JHp: // global
           (_c6JHk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6JHk::I64 == 0) goto c6JHm; else goto c6JHl;
       c6JHm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6JHl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6JHk::I64;
           R2 = Data.Monoid.$fReadFirst9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst8_info" {
     Data.Monoid.$fReadFirst8_info:
         const Data.Monoid.$fReadFirst8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.356121068 UTC

[section ""data" . Data.Monoid.$fReadFirst_lexeme_closure" {
     Data.Monoid.$fReadFirst_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Monoid.$fReadFirst8_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.357945064 UTC

[section ""cstring" . Data.Monoid.$fReadLast3_bytes" {
     Data.Monoid.$fReadLast3_bytes:
         I8[] [103,101,116,76,97,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.360283538 UTC

[section ""data" . Data.Monoid.$fReadLast2_closure" {
     Data.Monoid.$fReadLast2_closure:
         const Data.Monoid.$fReadLast2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Monoid.$fReadLast2_entry() //  [R1]
         { []
         }
     {offset
       c6JHG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JHH; else goto c6JHI;
       c6JHH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JHI: // global
           (_c6JHD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6JHD::I64 == 0) goto c6JHF; else goto c6JHE;
       c6JHF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6JHE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6JHD::I64;
           R2 = Data.Monoid.$fReadLast3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadLast2_info" {
     Data.Monoid.$fReadLast2_info:
         const Data.Monoid.$fReadLast2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.364568294 UTC

[section ""data" . Data.Monoid.$fReadFirst5_closure" {
     Data.Monoid.$fReadFirst5_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.366454467 UTC

[section ""data" . Data.Monoid.$fReadFirst2_closure" {
     Data.Monoid.$fReadFirst2_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Monoid.$fReadFirst3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.376396824 UTC

[section ""data" . Data.Monoid.$fReadLast1_closure" {
     Data.Monoid.$fReadLast1_closure:
         const Data.Monoid.$fReadLast1_info;
         const 0;
 },
 ds_s6JqR_entry() //  [R1, R3]
         { []
         }
     {offset
       c6JI2: // global
           R4 = R3;
           R3 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadMaybe1_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_s6JqR_info" {
     ds_s6JqR_info:
         const ds_s6JqR_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Jws_srt+104;
 },
 sat_s6Jr3_entry() //  [R1]
         { []
         }
     {offset
       c6JID: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jr3_info" {
     sat_s6Jr3_info:
         const sat_s6Jr3_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6Jr6_entry() //  [R1, R2]
         { []
         }
     {offset
       c6JIJ: // global
           _s6Jr1::P64 = R2;
           _s6Jr6::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6JIK; else goto c6JIL;
       c6JIL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JIN; else goto c6JIM;
       c6JIN: // global
           HpAlloc = 24;
           goto c6JIK;
       c6JIK: // global
           R2 = _s6Jr1::P64;
           R1 = _s6Jr6::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JIM: // global
           _s6JqV::P64 = P64[_s6Jr6::P64 + 7];
           I64[Hp - 16] = sat_s6Jr3_info;
           P64[Hp - 8] = _s6JqV::P64;
           P64[Hp] = _s6Jr1::P64;
           I64[Sp - 8] = block_c6JIG_info;
           R3 = Hp - 15;
           R2 = Data.Monoid.$fReadFirst2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jr6_info" {
     sat_s6Jr6_info:
         const sat_s6Jr6_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S6Jws_srt+112;
 },
 _c6JIG() //  [R1]
         { []
         }
     {offset
       c6JIG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6JIQ; else goto c6JIP;
       c6JIQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6JIP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6JIG_info" {
     block_c6JIG_info:
         const _c6JIG;
         const 0;
         const 30;
 },
 sat_s6Jr7_entry() //  [R1, R2]
         { []
         }
     {offset
       c6JIR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6JIV; else goto c6JIU;
       c6JIV: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JIU: // global
           _s6JqR::P64 = P64[R1 + 7];
           _s6JqV::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_s6Jr6_info;
           P64[Hp] = _s6JqV::P64;
           R5 = Hp - 7;
           R4 = Data.Monoid.$fReadFirst5_closure+1;
           R3 = _s6JqR::P64;
           R2 = Data.Monoid.$fReadLast2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jr7_info" {
     sat_s6Jr7_info:
         const sat_s6Jr7_entry;
         const 2;
         const 64424509451;
         const 4294967301;
         const S6Jws_srt+112;
 },
 sat_s6Jra_entry() //  [R1, R2]
         { []
         }
     {offset
       c6JIZ: // global
           _s6JqZ::P64 = R2;
           _s6Jra::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6JJ0; else goto c6JJ1;
       c6JJ1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JJ3; else goto c6JJ2;
       c6JJ3: // global
           HpAlloc = 24;
           goto c6JJ0;
       c6JJ0: // global
           R2 = _s6JqZ::P64;
           R1 = _s6Jra::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JJ2: // global
           _s6JqR::P64 = P64[_s6Jra::P64 + 7];
           _s6JqV::P64 = P64[_s6Jra::P64 + 15];
           I64[Hp - 16] = sat_s6Jr7_info;
           P64[Hp - 8] = _s6JqR::P64;
           P64[Hp] = _s6JqV::P64;
           I64[Sp - 8] = block_c6JIW_info;
           R3 = Hp - 15;
           R2 = Data.Monoid.$fReadFirst_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jra_info" {
     sat_s6Jra_info:
         const sat_s6Jra_entry;
         const 2;
         const 133143986187;
         const 4294967301;
         const S6Jws_srt+112;
 },
 _c6JIW() //  [R1]
         { []
         }
     {offset
       c6JIW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6JJ6; else goto c6JJ5;
       c6JJ6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6JJ5: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6JIW_info" {
     block_c6JIW_info:
         const _c6JIW;
         const 0;
         const 30;
 },
 sat_s6Jrd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JJ7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6JJ8; else goto c6JJ9;
       c6JJ8: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6JJ9: // global
           I64[Sp - 24] = block_c6JIa_info;
           _s6JqR::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s6JqR::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6JJm; else goto c6JIb;
       u6JJm: // global
           call _c6JIa(R1) args: 0, res: 0, upd: 0;
       c6JIb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jrd_info" {
     sat_s6Jrd_info:
         const sat_s6Jrd_entry;
         const 1;
         const 270582939657;
         const 8589934607;
         const S6Jws_srt+112;
 },
 _c6JIa() //  [R1]
         { []
         }
     {offset
       c6JIa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JJc; else goto c6JJb;
       c6JJc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6JJb: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto c6JJe; else goto c6JJi;
       c6JJe: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6JJi: // global
           I64[Hp - 16] = sat_s6Jra_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c6JJf_info;
           R3 = Hp - 15;
           R2 = Data.Monoid.$fReadLast_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6JIa_info" {
     block_c6JIa_info:
         const _c6JIa;
         const 2;
         const 270582939678;
         const S6Jws_srt+112;
 },
 _c6JJf() //  [R1]
         { []
         }
     {offset
       c6JJf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6JJl; else goto c6JJk;
       c6JJl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6JJk: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6JJf_info" {
     block_c6JJf_info:
         const _c6JJf;
         const 0;
         const 30;
 },
 Data.Monoid.$fReadLast1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6JJn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JJr; else goto c6JJq;
       c6JJr: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fReadLast1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6JJq: // global
           I64[Hp - 24] = ds_s6JqR_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s6Jrd_info;
           P64[Hp] = Hp - 22;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadLast1_info" {
     Data.Monoid.$fReadLast1_info:
         const Data.Monoid.$fReadLast1_entry;
         const 0;
         const 2194728288270;
         const 12884901911;
         const S6Jws_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.4032142 UTC

[section ""data" . Data.Monoid.$fReadLast_$creadsPrec_closure" {
     Data.Monoid.$fReadLast_$creadsPrec_closure:
         const Data.Monoid.$fReadLast_$creadsPrec_info;
         const 0;
 },
 sat_s6Jrg_entry() //  [R1]
         { []
         }
     {offset
       c6JKx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JKy; else goto c6JKz;
       c6JKy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JKz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Monoid.$fReadLast1_entry(R4,
                                              R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Jrg_info" {
     sat_s6Jrg_info:
         const sat_s6Jrg_entry;
         const 2;
         const 4294967314;
         const S6Jws_srt+168;
 },
 Data.Monoid.$fReadLast_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c6JKA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JKE; else goto c6JKD;
       c6JKE: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fReadLast_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6JKD: // global
           I64[Hp - 24] = sat_s6Jrg_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadLast_$creadsPrec_info" {
     Data.Monoid.$fReadLast_$creadsPrec_info:
         const Data.Monoid.$fReadLast_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Jws_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.410002242 UTC

[section ""data" . Data.Monoid.$fReadLast_$creadListPrec_closure" {
     Data.Monoid.$fReadLast_$creadListPrec_closure:
         const Data.Monoid.$fReadLast_$creadListPrec_info;
         const 0;
 },
 sat_s6Jri_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JL0: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fReadLast1_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jri_info" {
     sat_s6Jri_info:
         const sat_s6Jri_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Jws_srt+168;
 },
 Data.Monoid.$fReadLast_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c6JL3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6JL7; else goto c6JL6;
       c6JL7: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Monoid.$fReadLast_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JL6: // global
           I64[Hp - 8] = sat_s6Jri_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadLast_$creadListPrec_info" {
     Data.Monoid.$fReadLast_$creadListPrec_info:
         const Data.Monoid.$fReadLast_$creadListPrec_entry;
         const 0;
         const 55834574862;
         const 4294967301;
         const S6Jws_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.416861547 UTC

[section ""data" . Data.Monoid.$fReadLast_$creadList_closure" {
     Data.Monoid.$fReadLast_$creadList_closure:
         const Data.Monoid.$fReadLast_$creadList_info;
         const 0;
 },
 sat_s6Jrk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JLt: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fReadLast1_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jrk_info" {
     sat_s6Jrk_info:
         const sat_s6Jrk_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Jws_srt+168;
 },
 sat_s6Jrl_entry() //  [R1]
         { []
         }
     {offset
       c6JLw: // global
           _s6Jrl::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6JLx; else goto c6JLy;
       c6JLy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6JLA; else goto c6JLz;
       c6JLA: // global
           HpAlloc = 16;
           goto c6JLx;
       c6JLx: // global
           R1 = _s6Jrl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JLz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6Jrl::P64;
           _s6Jrj::P64 = P64[_s6Jrl::P64 + 16];
           I64[Hp - 8] = sat_s6Jrk_info;
           P64[Hp] = _s6Jrj::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Jrl_info" {
     sat_s6Jrl_info:
         const sat_s6Jrl_entry;
         const 1;
         const 21474836496;
         const S6Jws_srt+168;
 },
 Data.Monoid.$fReadLast_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c6JLB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JLF; else goto c6JLE;
       c6JLF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Monoid.$fReadLast_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JLE: // global
           I64[Hp - 16] = sat_s6Jrl_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadLast_$creadList_info" {
     Data.Monoid.$fReadLast_$creadList_info:
         const Data.Monoid.$fReadLast_$creadList_entry;
         const 0;
         const 90194313230;
         const 4294967301;
         const S6Jws_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.426196713 UTC

[section ""data" . Data.Monoid.$fReadLast_closure" {
     Data.Monoid.$fReadLast_closure:
         const Data.Monoid.$fReadLast_info;
         const 0;
 },
 sat_s6Jrq_entry() //  [R1]
         { []
         }
     {offset
       c6JM7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JM8; else goto c6JM9;
       c6JM8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JM9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Monoid.$fReadLast_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Jrq_info" {
     sat_s6Jrq_info:
         const sat_s6Jrq_entry;
         const 1;
         const 4294967312;
         const S6Jws_srt+192;
 },
 sat_s6Jrp_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JMf: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fReadLast1_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jrp_info" {
     sat_s6Jrp_info:
         const sat_s6Jrp_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Jws_srt+168;
 },
 sat_s6Jro_entry() //  [R1]
         { []
         }
     {offset
       c6JMm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JMn; else goto c6JMo;
       c6JMn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JMo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Monoid.$fReadLast_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Jro_info" {
     sat_s6Jro_info:
         const sat_s6Jro_entry;
         const 1;
         const 4294967312;
         const S6Jws_srt+200;
 },
 sat_s6Jrn_entry() //  [R1, R2]
         { []
         }
     {offset
       c6JMu: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Monoid.$fReadLast_$creadsPrec_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jrn_info" {
     sat_s6Jrn_info:
         const sat_s6Jrn_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Jws_srt+176;
 },
 Data.Monoid.$fReadLast_entry() //  [R2]
         { []
         }
     {offset
       c6JMy: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c6JMC; else goto c6JMB;
       c6JMC: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Monoid.$fReadLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JMB: // global
           I64[Hp - 112] = sat_s6Jrq_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6Jrp_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s6Jro_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s6Jrn_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadLast_info" {
     Data.Monoid.$fReadLast_info:
         const Data.Monoid.$fReadLast_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const S6Jws_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.437892764 UTC

[section ""data" . Data.Monoid.$fEqLast_closure" {
     Data.Monoid.$fEqLast_closure:
         const Data.Monoid.$fEqLast_info;
 },
 sat_s6Jrt_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JNg: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fEqMaybe_$c/=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jrt_info" {
     sat_s6Jrt_info:
         const sat_s6Jrt_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Jrs_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JNo: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fEqMaybe_$c==_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jrs_info" {
     sat_s6Jrs_info:
         const sat_s6Jrs_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Monoid.$fEqLast_entry() //  [R2]
         { []
         }
     {offset
       c6JNs: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6JNw; else goto c6JNv;
       c6JNw: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Monoid.$fEqLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JNv: // global
           I64[Hp - 48] = sat_s6Jrt_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_s6Jrs_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fEqLast_info" {
     Data.Monoid.$fEqLast_info:
         const Data.Monoid.$fEqLast_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.445780853 UTC

[section ""data" . Data.Monoid.$fOrdLast_$cp1Ord_closure" {
     Data.Monoid.$fOrdLast_$cp1Ord_closure:
         const Data.Monoid.$fOrdLast_$cp1Ord_info;
 },
 sat_s6Jrv_entry() //  [R1]
         { []
         }
     {offset
       c6JNV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JNW; else goto c6JNX;
       c6JNW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JNX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Jrv_info" {
     sat_s6Jrv_info:
         const sat_s6Jrv_entry;
         const 1;
         const 16;
 },
 Data.Monoid.$fOrdLast_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       c6JNY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JO2; else goto c6JO1;
       c6JO2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Monoid.$fOrdLast_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JO1: // global
           I64[Hp - 16] = sat_s6Jrv_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Monoid.$fEqLast_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fOrdLast_$cp1Ord_info" {
     Data.Monoid.$fOrdLast_$cp1Ord_info:
         const Data.Monoid.$fOrdLast_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.453483073 UTC

[section ""data" . Data.Monoid.$fOrdLast_closure" {
     Data.Monoid.$fOrdLast_closure:
         const Data.Monoid.$fOrdLast_info;
 },
 sat_s6JrG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JOm: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$cmin_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JrG_info" {
     sat_s6JrG_info:
         const sat_s6JrG_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6JrF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JOu: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$cmax_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JrF_info" {
     sat_s6JrF_info:
         const sat_s6JrF_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6JrE_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JOC: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c>=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JrE_info" {
     sat_s6JrE_info:
         const sat_s6JrE_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6JrD_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JOK: // global
           R4 = R2;
           R3 = R3;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JrD_info" {
     sat_s6JrD_info:
         const sat_s6JrD_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6JrA_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JOS: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JrA_info" {
     sat_s6JrA_info:
         const sat_s6JrA_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Jrz_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JP0: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jrz_info" {
     sat_s6Jrz_info:
         const sat_s6Jrz_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Jry_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JP8: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jry_info" {
     sat_s6Jry_info:
         const sat_s6Jry_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Jrx_entry() //  [R1]
         { []
         }
     {offset
       c6JPf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JPg; else goto c6JPh;
       c6JPg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JPh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Monoid.$fOrdLast_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Jrx_info" {
     sat_s6Jrx_info:
         const sat_s6Jrx_entry;
         const 1;
         const 16;
 },
 Data.Monoid.$fOrdLast_entry() //  [R2]
         { []
         }
     {offset
       c6JPj: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c6JPn; else goto c6JPm;
       c6JPn: // global
           HpAlloc = 208;
           R2 = R2;
           R1 = Data.Monoid.$fOrdLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JPm: // global
           I64[Hp - 200] = sat_s6JrG_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s6JrF_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s6JrE_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s6JrD_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6JrA_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s6Jrz_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6Jry_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6Jrx_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 102;
           P64[Hp - 40] = Hp - 118;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 150;
           P64[Hp - 16] = Hp - 166;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 198;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fOrdLast_info" {
     Data.Monoid.$fOrdLast_info:
         const Data.Monoid.$fOrdLast_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.467998593 UTC

[section ""data" . Data.Monoid.$fFunctorFirst_closure" {
     Data.Monoid.$fFunctorFirst_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.Base.$fApplicativeMaybe_$cfmap_closure+2;
         const GHC.Base.$fFunctorMaybe_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.470371976 UTC

[section ""data" . Data.Monoid.$fApplicativeFirst_closure" {
     Data.Monoid.$fApplicativeFirst_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Monoid.$fFunctorFirst_closure+1;
         const GHC.Base.Just_closure+1;
         const GHC.Base.$fApplicativeMaybe_$c<*>_closure+2;
         const GHC.Base.$fApplicativeMaybe_$cliftA2_closure+3;
         const GHC.Base.$fApplicativeMaybe_$c*>_closure+2;
         const GHC.Base.$fApplicativeMaybe_$c<*_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.472515485 UTC

[section ""data" . Data.Monoid.$fMonadFirst_closure" {
     Data.Monoid.$fMonadFirst_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Monoid.$fApplicativeFirst_closure+1;
         const GHC.Base.$fMonadMaybe_$c>>=_closure+2;
         const GHC.Base.$fApplicativeMaybe_$c*>_closure+2;
         const GHC.Base.Just_closure+1;
         const GHC.Base.$fMonadMaybe_$cfail_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.475012378 UTC

[section ""data" . Data.Monoid.$fGeneric1First1_closure" {
     Data.Monoid.$fGeneric1First1_closure:
         const Data.Monoid.$fGeneric1First1_info;
 },
 Data.Monoid.$fGeneric1First1_entry() //  [R2]
         { []
         }
     {offset
       c6JQh: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fGeneric1First1_info" {
     Data.Monoid.$fGeneric1First1_info:
         const Data.Monoid.$fGeneric1First1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.478562686 UTC

[section ""data" . Data.Monoid.$fGeneric1First2_closure" {
     Data.Monoid.$fGeneric1First2_closure:
         const Data.Monoid.$fGeneric1First2_info;
 },
 Data.Monoid.$fGeneric1First2_entry() //  [R2]
         { []
         }
     {offset
       c6JQs: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fGeneric1First2_info" {
     Data.Monoid.$fGeneric1First2_info:
         const Data.Monoid.$fGeneric1First2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.48183236 UTC

[section ""data" . Data.Monoid.$fGeneric1First_closure" {
     Data.Monoid.$fGeneric1First_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Monoid.$fGeneric1First2_closure+1;
         const Data.Monoid.$fGeneric1First1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.484040246 UTC

[section ""data" . Data.Monoid.$fGenericFirst1_closure" {
     Data.Monoid.$fGenericFirst1_closure:
         const Data.Monoid.$fGenericFirst1_info;
 },
 Data.Monoid.$fGenericFirst1_entry() //  [R2]
         { []
         }
     {offset
       c6JQG: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fGenericFirst1_info" {
     Data.Monoid.$fGenericFirst1_info:
         const Data.Monoid.$fGenericFirst1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.487596967 UTC

[section ""data" . Data.Monoid.$fGenericFirst2_closure" {
     Data.Monoid.$fGenericFirst2_closure:
         const Data.Monoid.$fGenericFirst2_info;
 },
 Data.Monoid.$fGenericFirst2_entry() //  [R2]
         { []
         }
     {offset
       c6JQR: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fGenericFirst2_info" {
     Data.Monoid.$fGenericFirst2_info:
         const Data.Monoid.$fGenericFirst2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.490872461 UTC

[section ""data" . Data.Monoid.$fGenericFirst_closure" {
     Data.Monoid.$fGenericFirst_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Monoid.$fGenericFirst2_closure+1;
         const Data.Monoid.$fGenericFirst1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.49266307 UTC

[section ""cstring" . Data.Monoid.$fShowFirst3_bytes" {
     Data.Monoid.$fShowFirst3_bytes:
         I8[] [70,105,114,115,116,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.494506566 UTC

[section ""cstring" . Data.Monoid.$fShowFirst2_bytes" {
     Data.Monoid.$fShowFirst2_bytes:
         I8[] [103,101,116,70,105,114,115,116,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.501757471 UTC

[section ""data" . Data.Monoid.$w$cshowsPrec_closure" {
     Data.Monoid.$w$cshowsPrec_closure:
         const Data.Monoid.$w$cshowsPrec_info;
         const 0;
 },
 f_s6JrO_entry() //  [R1]
         { []
         }
     {offset
       c6JRb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JRc; else goto c6JRd;
       c6JRc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JRd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 24];
           R3 = Data.Monoid.$fShowFirst1_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6JrO_info" {
     f_s6JrO_info:
         const f_s6JrO_entry;
         const 2;
         const 4294967314;
         const S6Jws_srt+24;
 },
 sat_s6JrR_entry() //  [R1]
         { []
         }
     {offset
       c6JRy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JRz; else goto c6JRA;
       c6JRz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JRA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Monoid.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6JrR_info" {
     sat_s6JrR_info:
         const sat_s6JrR_entry;
         const 1;
         const 16;
 },
 sat_s6JrS_entry() //  [R1]
         { []
         }
     {offset
       c6JRB: // global
           _s6JrS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JRC; else goto c6JRD;
       c6JRD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JRF; else goto c6JRE;
       c6JRF: // global
           HpAlloc = 24;
           goto c6JRC;
       c6JRC: // global
           R1 = _s6JrS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JRE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6JrS::P64;
           _s6JrO::P64 = P64[_s6JrS::P64 + 16];
           _s6JrQ::P64 = P64[_s6JrS::P64 + 24];
           I64[Hp - 16] = sat_s6JrR_info;
           P64[Hp] = _s6JrQ::P64;
           R2 = Hp - 16;
           R1 = _s6JrO::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6JrS_info" {
     sat_s6JrS_info:
         const sat_s6JrS_entry;
         const 2;
         const 18;
 },
 sat_s6JrT_entry() //  [R1]
         { []
         }
     {offset
       c6JRG: // global
           _s6JrT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JRH; else goto c6JRI;
       c6JRI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JRK; else goto c6JRJ;
       c6JRK: // global
           HpAlloc = 32;
           goto c6JRH;
       c6JRH: // global
           R1 = _s6JrT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JRJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6JrT::P64;
           _s6JrO::P64 = P64[_s6JrT::P64 + 16];
           _s6JrQ::P64 = P64[_s6JrT::P64 + 24];
           I64[Hp - 24] = sat_s6JrS_info;
           P64[Hp - 8] = _s6JrO::P64;
           P64[Hp] = _s6JrQ::P64;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowFirst2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6JrT_info" {
     sat_s6JrT_info:
         const sat_s6JrT_entry;
         const 2;
         const 18;
 },
 sat_s6JrU_entry() //  [R1, R2]
         { []
         }
     {offset
       c6JRL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JRP; else goto c6JRO;
       c6JRP: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JRO: // global
           _s6JrO::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s6JrT_info;
           P64[Hp - 8] = _s6JrO::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowFirst3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JrU_info" {
     sat_s6JrU_info:
         const sat_s6JrU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6JrX_entry() //  [R1]
         { []
         }
     {offset
       c6JSd: // global
           _s6JrX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JSe; else goto c6JSf;
       c6JSf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JSh; else goto c6JSg;
       c6JSh: // global
           HpAlloc = 24;
           goto c6JSe;
       c6JSe: // global
           R1 = _s6JrX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JSg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6JrX::P64;
           _s6JrV::P64 = P64[_s6JrX::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s6JrV::P64;
           R3 = Hp - 14;
           R2 = Data.Monoid.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6JrX_info" {
     sat_s6JrX_info:
         const sat_s6JrX_entry;
         const 1;
         const 16;
 },
 sat_s6JrY_entry() //  [R1]
         { []
         }
     {offset
       c6JSi: // global
           _s6JrY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JSj; else goto c6JSk;
       c6JSk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JSm; else goto c6JSl;
       c6JSm: // global
           HpAlloc = 24;
           goto c6JSj;
       c6JSj: // global
           R1 = _s6JrY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JSl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6JrY::P64;
           _s6JrO::P64 = P64[_s6JrY::P64 + 16];
           _s6JrV::P64 = P64[_s6JrY::P64 + 24];
           I64[Hp - 16] = sat_s6JrX_info;
           P64[Hp] = _s6JrV::P64;
           R2 = Hp - 16;
           R1 = _s6JrO::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6JrY_info" {
     sat_s6JrY_info:
         const sat_s6JrY_entry;
         const 2;
         const 18;
 },
 sat_s6JrZ_entry() //  [R1]
         { []
         }
     {offset
       c6JSn: // global
           _s6JrZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JSo; else goto c6JSp;
       c6JSp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JSr; else goto c6JSq;
       c6JSr: // global
           HpAlloc = 32;
           goto c6JSo;
       c6JSo: // global
           R1 = _s6JrZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JSq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6JrZ::P64;
           _s6JrO::P64 = P64[_s6JrZ::P64 + 16];
           _s6JrV::P64 = P64[_s6JrZ::P64 + 24];
           I64[Hp - 24] = sat_s6JrY_info;
           P64[Hp - 8] = _s6JrO::P64;
           P64[Hp] = _s6JrV::P64;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowFirst2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6JrZ_info" {
     sat_s6JrZ_info:
         const sat_s6JrZ_entry;
         const 2;
         const 18;
 },
 sat_s6Js0_entry() //  [R1]
         { []
         }
     {offset
       c6JSs: // global
           _s6Js0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JSt; else goto c6JSu;
       c6JSu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JSw; else goto c6JSv;
       c6JSw: // global
           HpAlloc = 32;
           goto c6JSt;
       c6JSt: // global
           R1 = _s6Js0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JSv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6Js0::P64;
           _s6JrO::P64 = P64[_s6Js0::P64 + 16];
           _s6JrV::P64 = P64[_s6Js0::P64 + 24];
           I64[Hp - 24] = sat_s6JrZ_info;
           P64[Hp - 8] = _s6JrO::P64;
           P64[Hp] = _s6JrV::P64;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowFirst3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Js0_info" {
     sat_s6Js0_info:
         const sat_s6Js0_entry;
         const 2;
         const 18;
 },
 sat_s6Js1_entry() //  [R1, R2]
         { []
         }
     {offset
       c6JSy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6JSC; else goto c6JSB;
       c6JSC: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JSB: // global
           _s6JrO::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s6Js0_info;
           P64[Hp - 32] = _s6JrO::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Js1_info" {
     sat_s6Js1_info:
         const sat_s6Js1_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Monoid.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6JSG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6JSK; else goto c6JSJ;
       c6JSK: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6JSJ: // global
           I64[Hp - 40] = f_s6JrO_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c6JR7::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto c6JSE; else goto c6JSF;
       c6JSE: // global
           I64[Hp - 8] = sat_s6JrU_info;
           P64[Hp] = _c6JR7::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6JSF: // global
           I64[Hp - 8] = sat_s6Js1_info;
           P64[Hp] = _c6JR7::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$w$cshowsPrec_info" {
     Data.Monoid.$w$cshowsPrec_info:
         const Data.Monoid.$w$cshowsPrec_entry;
         const 0;
         const 72057598332895246;
         const 12884901909;
         const S6Jws_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.526025437 UTC

[section ""data" . Data.Monoid.$fShowFirst_$cshowsPrec_closure" {
     Data.Monoid.$fShowFirst_$cshowsPrec_closure:
         const Data.Monoid.$fShowFirst_$cshowsPrec_info;
         const 0;
 },
 Data.Monoid.$fShowFirst_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6JTY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6JTZ; else goto c6JU0;
       c6JTZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fShowFirst_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6JU0: // global
           I64[Sp - 24] = block_c6JTV_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6JU4; else goto c6JTW;
       u6JU4: // global
           call _c6JTV(R1) args: 0, res: 0, upd: 0;
       c6JTW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowFirst_$cshowsPrec_info" {
     Data.Monoid.$fShowFirst_$cshowsPrec_info:
         const Data.Monoid.$fShowFirst_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6Jws_srt+216;
 },
 _c6JTV() //  [R1]
         { []
         }
     {offset
       c6JTV: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Monoid.$w$cshowsPrec_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6JTV_info" {
     block_c6JTV_info:
         const _c6JTV;
         const 2;
         const 4294967326;
         const S6Jws_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.534521345 UTC

[section ""data" . Data.Monoid.$fShowFirst_$cshow_closure" {
     Data.Monoid.$fShowFirst_$cshow_closure:
         const Data.Monoid.$fShowFirst_$cshow_info;
         const 0;
 },
 sat_s6Jsb_entry() //  [R1]
         { []
         }
     {offset
       c6JUB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6JUC; else goto c6JUD;
       c6JUC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JUD: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Show.appPrec1_closure;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = Data.Monoid.$fReadFirst3_closure;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jsb_info" {
     sat_s6Jsb_info:
         const sat_s6Jsb_entry;
         const 2;
         const 4294967314;
         const S6Jws_srt+56;
 },
 sat_s6Jsc_entry() //  [R1]
         { []
         }
     {offset
       c6JUI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6JUJ; else goto c6JUK;
       c6JUJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JUK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6JUr_info;
           _s6Js7::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s6Js7::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6JUQ; else goto c6JUs;
       u6JUQ: // global
           call _c6JUr(R1) args: 0, res: 0, upd: 0;
       c6JUs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Jsc_info" {
     sat_s6Jsc_info:
         const sat_s6Jsc_entry;
         const 2;
         const 30064771090;
         const S6Jws_srt+56;
 },
 _c6JUr() //  [R1]
         { []
         }
     {offset
       c6JUr: // global
           if (R1 & 7 == 1) goto c6JUF; else goto c6JUG;
       c6JUF: // global
           R1 = Data.Monoid.$fShowFirst4_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c6JUG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JUP; else goto c6JUO;
       c6JUP: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6JUO: // global
           _s6Jsa::P64 = P64[R1 + 6];
           I64[Hp - 24] = sat_s6Jsb_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s6Jsa::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowMaybe1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6JUr_info" {
     block_c6JUr_info:
         const _c6JUr;
         const 1;
         const 30064771102;
         const S6Jws_srt+56;
 },
 sat_s6Jsd_entry() //  [R1]
         { []
         }
     {offset
       c6JUR: // global
           _s6Jsd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6JUS; else goto c6JUT;
       c6JUT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JUV; else goto c6JUU;
       c6JUV: // global
           HpAlloc = 32;
           goto c6JUS;
       c6JUS: // global
           R1 = _s6Jsd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JUU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6Jsd::P64;
           _s6Js7::P64 = P64[_s6Jsd::P64 + 16];
           _s6Js8::P64 = P64[_s6Jsd::P64 + 24];
           I64[Hp - 24] = sat_s6Jsc_info;
           P64[Hp - 8] = _s6Js7::P64;
           P64[Hp] = _s6Js8::P64;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowFirst2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Jsd_info" {
     sat_s6Jsd_info:
         const sat_s6Jsd_entry;
         const 2;
         const 30064771090;
         const S6Jws_srt+56;
 },
 Data.Monoid.$fShowFirst_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c6JUW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JV0; else goto c6JUZ;
       c6JV0: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fShowFirst_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6JUZ: // global
           I64[Hp - 24] = sat_s6Jsd_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Monoid.$fShowFirst3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowFirst_$cshow_info" {
     Data.Monoid.$fShowFirst_$cshow_info:
         const Data.Monoid.$fShowFirst_$cshow_entry;
         const 0;
         const 18014428574253070;
         const 8589934607;
         const S6Jws_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.547154585 UTC

[section ""data" . Data.Monoid.$fShowFirst_$cshowList_closure" {
     Data.Monoid.$fShowFirst_$cshowList_closure:
         const Data.Monoid.$fShowFirst_$cshowList_info;
         const 0;
 },
 sat_s6Jsi_entry() //  [R1, R2]
         { []
         }
     {offset
       c6JVI: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Monoid.$w$cshowsPrec_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jsi_info" {
     sat_s6Jsi_info:
         const sat_s6Jsi_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Jws_srt+216;
 },
 Data.Monoid.$fShowFirst_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6JVL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6JVP; else goto c6JVO;
       c6JVP: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fShowFirst_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6JVO: // global
           I64[Hp - 8] = sat_s6Jsi_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowFirst_$cshowList_info" {
     Data.Monoid.$fShowFirst_$cshowList_info:
         const Data.Monoid.$fShowFirst_$cshowList_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const S6Jws_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.55468589 UTC

[section ""data" . Data.Monoid.$fShowFirst_closure" {
     Data.Monoid.$fShowFirst_closure:
         const Data.Monoid.$fShowFirst_info;
         const 0;
 },
 sat_s6Jsm_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JW7: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fShowFirst_$cshowList_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jsm_info" {
     sat_s6Jsm_info:
         const sat_s6Jsm_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Jws_srt+240;
 },
 sat_s6Jsl_entry() //  [R1, R2]
         { []
         }
     {offset
       c6JWf: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Monoid.$fShowFirst_$cshow_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jsl_info" {
     sat_s6Jsl_info:
         const sat_s6Jsl_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Jws_srt+232;
 },
 sat_s6Jsk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JWn: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fShowFirst_$cshowsPrec_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jsk_info" {
     sat_s6Jsk_info:
         const sat_s6Jsk_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Jws_srt+224;
 },
 Data.Monoid.$fShowFirst_entry() //  [R2]
         { []
         }
     {offset
       c6JWr: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c6JWv; else goto c6JWu;
       c6JWv: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Monoid.$fShowFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JWu: // global
           I64[Hp - 72] = sat_s6Jsm_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s6Jsl_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s6Jsk_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fShowFirst_info" {
     Data.Monoid.$fShowFirst_info:
         const Data.Monoid.$fShowFirst_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S6Jws_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.563211781 UTC

[section ""cstring" . Data.Monoid.$fReadFirst11_bytes" {
     Data.Monoid.$fReadFirst11_bytes:
         I8[] [70,105,114,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.565726642 UTC

[section ""data" . Data.Monoid.$fReadFirst10_closure" {
     Data.Monoid.$fReadFirst10_closure:
         const Data.Monoid.$fReadFirst10_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Monoid.$fReadFirst10_entry() //  [R1]
         { []
         }
     {offset
       c6JWY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JWZ; else goto c6JX0;
       c6JWZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JX0: // global
           (_c6JWV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6JWV::I64 == 0) goto c6JWX; else goto c6JWW;
       c6JWX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6JWW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6JWV::I64;
           R2 = Data.Monoid.$fReadFirst11_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst10_info" {
     Data.Monoid.$fReadFirst10_info:
         const Data.Monoid.$fReadFirst10_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.569626079 UTC

[section ""data" . Data.Monoid.$fReadFirst_lexeme1_closure" {
     Data.Monoid.$fReadFirst_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Monoid.$fReadFirst10_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.571353407 UTC

[section ""cstring" . Data.Monoid.$fReadFirst7_bytes" {
     Data.Monoid.$fReadFirst7_bytes:
         I8[] [103,101,116,70,105,114,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.573630193 UTC

[section ""data" . Data.Monoid.$fReadFirst6_closure" {
     Data.Monoid.$fReadFirst6_closure:
         const Data.Monoid.$fReadFirst6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Monoid.$fReadFirst6_entry() //  [R1]
         { []
         }
     {offset
       c6JXh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6JXi; else goto c6JXj;
       c6JXi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6JXj: // global
           (_c6JXe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6JXe::I64 == 0) goto c6JXg; else goto c6JXf;
       c6JXg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6JXf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6JXe::I64;
           R2 = Data.Monoid.$fReadFirst7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst6_info" {
     Data.Monoid.$fReadFirst6_info:
         const Data.Monoid.$fReadFirst6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.581997532 UTC

[section ""data" . Data.Monoid.$fReadFirst1_closure" {
     Data.Monoid.$fReadFirst1_closure:
         const Data.Monoid.$fReadFirst1_info;
         const 0;
 },
 ds_s6Jsq_entry() //  [R1, R3]
         { []
         }
     {offset
       c6JXB: // global
           R4 = R3;
           R3 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadMaybe1_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_s6Jsq_info" {
     ds_s6Jsq_info:
         const ds_s6Jsq_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Jws_srt+104;
 },
 sat_s6JsC_entry() //  [R1]
         { []
         }
     {offset
       c6JYc: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JsC_info" {
     sat_s6JsC_info:
         const sat_s6JsC_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6JsF_entry() //  [R1, R2]
         { []
         }
     {offset
       c6JYi: // global
           _s6JsA::P64 = R2;
           _s6JsF::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6JYj; else goto c6JYk;
       c6JYk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JYm; else goto c6JYl;
       c6JYm: // global
           HpAlloc = 24;
           goto c6JYj;
       c6JYj: // global
           R2 = _s6JsA::P64;
           R1 = _s6JsF::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JYl: // global
           _s6Jsu::P64 = P64[_s6JsF::P64 + 7];
           I64[Hp - 16] = sat_s6JsC_info;
           P64[Hp - 8] = _s6Jsu::P64;
           P64[Hp] = _s6JsA::P64;
           I64[Sp - 8] = block_c6JYf_info;
           R3 = Hp - 15;
           R2 = Data.Monoid.$fReadFirst2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JsF_info" {
     sat_s6JsF_info:
         const sat_s6JsF_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S6Jws_srt+112;
 },
 _c6JYf() //  [R1]
         { []
         }
     {offset
       c6JYf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6JYp; else goto c6JYo;
       c6JYp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6JYo: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6JYf_info" {
     block_c6JYf_info:
         const _c6JYf;
         const 0;
         const 30;
 },
 sat_s6JsG_entry() //  [R1, R2]
         { []
         }
     {offset
       c6JYq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6JYu; else goto c6JYt;
       c6JYu: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JYt: // global
           _s6Jsq::P64 = P64[R1 + 7];
           _s6Jsu::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_s6JsF_info;
           P64[Hp] = _s6Jsu::P64;
           R5 = Hp - 7;
           R4 = Data.Monoid.$fReadFirst5_closure+1;
           R3 = _s6Jsq::P64;
           R2 = Data.Monoid.$fReadFirst6_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JsG_info" {
     sat_s6JsG_info:
         const sat_s6JsG_entry;
         const 2;
         const 1125929971613707;
         const 4294967301;
         const S6Jws_srt+112;
 },
 sat_s6JsJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c6JYy: // global
           _s6Jsy::P64 = R2;
           _s6JsJ::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c6JYz; else goto c6JYA;
       c6JYA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JYC; else goto c6JYB;
       c6JYC: // global
           HpAlloc = 24;
           goto c6JYz;
       c6JYz: // global
           R2 = _s6Jsy::P64;
           R1 = _s6JsJ::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6JYB: // global
           _s6Jsq::P64 = P64[_s6JsJ::P64 + 7];
           _s6Jsu::P64 = P64[_s6JsJ::P64 + 15];
           I64[Hp - 16] = sat_s6JsG_info;
           P64[Hp - 8] = _s6Jsq::P64;
           P64[Hp] = _s6Jsu::P64;
           I64[Sp - 8] = block_c6JYv_info;
           R3 = Hp - 15;
           R2 = Data.Monoid.$fReadFirst_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JsJ_info" {
     sat_s6JsJ_info:
         const sat_s6JsJ_entry;
         const 2;
         const 1125998691090443;
         const 4294967301;
         const S6Jws_srt+112;
 },
 _c6JYv() //  [R1]
         { []
         }
     {offset
       c6JYv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6JYF; else goto c6JYE;
       c6JYF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6JYE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6JYv_info" {
     block_c6JYv_info:
         const _c6JYv;
         const 0;
         const 30;
 },
 sat_s6JsM_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6JYG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6JYH; else goto c6JYI;
       c6JYH: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6JYI: // global
           I64[Sp - 24] = block_c6JXJ_info;
           _s6Jsq::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _s6Jsq::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6JYV; else goto c6JXK;
       u6JYV: // global
           call _c6JXJ(R1) args: 0, res: 0, upd: 0;
       c6JXK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JsM_info" {
     sat_s6JsM_info:
         const sat_s6JsM_entry;
         const 1;
         const 3377798504775689;
         const 8589934607;
         const S6Jws_srt+112;
 },
 _c6JXJ() //  [R1]
         { []
         }
     {offset
       c6JXJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6JYL; else goto c6JYK;
       c6JYL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6JYK: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto c6JYN; else goto c6JYR;
       c6JYN: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6JYR: // global
           I64[Hp - 16] = sat_s6JsJ_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c6JYO_info;
           R3 = Hp - 15;
           R2 = Data.Monoid.$fReadFirst_lexeme1_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6JXJ_info" {
     block_c6JXJ_info:
         const _c6JXJ;
         const 2;
         const 3377798504775710;
         const S6Jws_srt+112;
 },
 _c6JYO() //  [R1]
         { []
         }
     {offset
       c6JYO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6JYU; else goto c6JYT;
       c6JYU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6JYT: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6JYO_info" {
     block_c6JYO_info:
         const _c6JYO;
         const 0;
         const 30;
 },
 Data.Monoid.$fReadFirst1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6JYW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6JZ0; else goto c6JYZ;
       c6JZ0: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fReadFirst1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6JYZ: // global
           I64[Hp - 24] = ds_s6Jsq_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s6JsM_info;
           P64[Hp] = Hp - 22;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst1_info" {
     Data.Monoid.$fReadFirst1_info:
         const Data.Monoid.$fReadFirst1_entry;
         const 0;
         const 15763350315073550;
         const 12884901911;
         const S6Jws_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.603728765 UTC

[section ""data" . Data.Monoid.$fReadFirst_$creadsPrec_closure" {
     Data.Monoid.$fReadFirst_$creadsPrec_closure:
         const Data.Monoid.$fReadFirst_$creadsPrec_info;
         const 0;
 },
 sat_s6JsP_entry() //  [R1]
         { []
         }
     {offset
       c6K06: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6K07; else goto c6K08;
       c6K07: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6K08: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Monoid.$fReadFirst1_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6JsP_info" {
     sat_s6JsP_info:
         const sat_s6JsP_entry;
         const 2;
         const 4294967314;
         const S6Jws_srt+272;
 },
 Data.Monoid.$fReadFirst_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c6K09: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6K0d; else goto c6K0c;
       c6K0d: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Monoid.$fReadFirst_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6K0c: // global
           I64[Hp - 24] = sat_s6JsP_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst_$creadsPrec_info" {
     Data.Monoid.$fReadFirst_$creadsPrec_info:
         const Data.Monoid.$fReadFirst_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Jws_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.609688826 UTC

[section ""data" . Data.Monoid.$fReadFirst_$creadListPrec_closure" {
     Data.Monoid.$fReadFirst_$creadListPrec_closure:
         const Data.Monoid.$fReadFirst_$creadListPrec_info;
         const 0;
 },
 sat_s6JsR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6K0z: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fReadFirst1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JsR_info" {
     sat_s6JsR_info:
         const sat_s6JsR_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Jws_srt+272;
 },
 Data.Monoid.$fReadFirst_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c6K0C: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6K0G; else goto c6K0F;
       c6K0G: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Monoid.$fReadFirst_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6K0F: // global
           I64[Hp - 8] = sat_s6JsR_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst_$creadListPrec_info" {
     Data.Monoid.$fReadFirst_$creadListPrec_info:
         const Data.Monoid.$fReadFirst_$creadListPrec_entry;
         const 0;
         const 43984760078350;
         const 4294967301;
         const S6Jws_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.615663079 UTC

[section ""data" . Data.Monoid.$fReadFirst_$creadList_closure" {
     Data.Monoid.$fReadFirst_$creadList_closure:
         const Data.Monoid.$fReadFirst_$creadList_info;
         const 0;
 },
 sat_s6JsT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6K12: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fReadFirst1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JsT_info" {
     sat_s6JsT_info:
         const sat_s6JsT_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Jws_srt+272;
 },
 sat_s6JsU_entry() //  [R1]
         { []
         }
     {offset
       c6K15: // global
           _s6JsU::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6K16; else goto c6K17;
       c6K17: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6K19; else goto c6K18;
       c6K19: // global
           HpAlloc = 16;
           goto c6K16;
       c6K16: // global
           R1 = _s6JsU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6K18: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6JsU::P64;
           _s6JsS::P64 = P64[_s6JsU::P64 + 16];
           I64[Hp - 8] = sat_s6JsT_info;
           P64[Hp] = _s6JsS::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6JsU_info" {
     sat_s6JsU_info:
         const sat_s6JsU_entry;
         const 1;
         const 8800387989520;
         const S6Jws_srt+184;
 },
 Data.Monoid.$fReadFirst_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c6K1a: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6K1e; else goto c6K1d;
       c6K1e: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Monoid.$fReadFirst_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6K1d: // global
           I64[Hp - 16] = sat_s6JsU_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst_$creadList_info" {
     Data.Monoid.$fReadFirst_$creadList_info:
         const Data.Monoid.$fReadFirst_$creadList_entry;
         const 0;
         const 79169132167182;
         const 4294967301;
         const S6Jws_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.624288458 UTC

[section ""data" . Data.Monoid.$fReadFirst_closure" {
     Data.Monoid.$fReadFirst_closure:
         const Data.Monoid.$fReadFirst_info;
         const 0;
 },
 sat_s6JsZ_entry() //  [R1]
         { []
         }
     {offset
       c6K1G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6K1H; else goto c6K1I;
       c6K1H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6K1I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Monoid.$fReadFirst_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6JsZ_info" {
     sat_s6JsZ_info:
         const sat_s6JsZ_entry;
         const 1;
         const 4294967312;
         const S6Jws_srt+288;
 },
 sat_s6JsY_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6K1O: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Monoid.$fReadFirst1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JsY_info" {
     sat_s6JsY_info:
         const sat_s6JsY_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Jws_srt+272;
 },
 sat_s6JsX_entry() //  [R1]
         { []
         }
     {offset
       c6K1V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6K1W; else goto c6K1X;
       c6K1W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6K1X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Monoid.$fReadFirst_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6JsX_info" {
     sat_s6JsX_info:
         const sat_s6JsX_entry;
         const 1;
         const 4294967312;
         const S6Jws_srt+296;
 },
 sat_s6JsW_entry() //  [R1, R2]
         { []
         }
     {offset
       c6K23: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Monoid.$fReadFirst_$creadsPrec_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6JsW_info" {
     sat_s6JsW_info:
         const sat_s6JsW_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Jws_srt+280;
 },
 Data.Monoid.$fReadFirst_entry() //  [R2]
         { []
         }
     {offset
       c6K27: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c6K2b; else goto c6K2a;
       c6K2b: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Monoid.$fReadFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6K2a: // global
           I64[Hp - 112] = sat_s6JsZ_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6JsY_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s6JsX_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s6JsW_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fReadFirst_info" {
     Data.Monoid.$fReadFirst_info:
         const Data.Monoid.$fReadFirst_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S6Jws_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.63629374 UTC

[section ""data" . Data.Monoid.$fEqFirst_closure" {
     Data.Monoid.$fEqFirst_closure:
         const Data.Monoid.$fEqFirst_info;
 },
 sat_s6Jt2_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6K2P: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fEqMaybe_$c/=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jt2_info" {
     sat_s6Jt2_info:
         const sat_s6Jt2_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Jt1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6K2X: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fEqMaybe_$c==_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jt1_info" {
     sat_s6Jt1_info:
         const sat_s6Jt1_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Monoid.$fEqFirst_entry() //  [R2]
         { []
         }
     {offset
       c6K31: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6K35; else goto c6K34;
       c6K35: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Monoid.$fEqFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6K34: // global
           I64[Hp - 48] = sat_s6Jt2_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_s6Jt1_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fEqFirst_info" {
     Data.Monoid.$fEqFirst_info:
         const Data.Monoid.$fEqFirst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.64350418 UTC

[section ""data" . Data.Monoid.$fOrdFirst_$cp1Ord_closure" {
     Data.Monoid.$fOrdFirst_$cp1Ord_closure:
         const Data.Monoid.$fOrdFirst_$cp1Ord_info;
 },
 sat_s6Jt4_entry() //  [R1]
         { []
         }
     {offset
       c6K3u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6K3v; else goto c6K3w;
       c6K3v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6K3w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Jt4_info" {
     sat_s6Jt4_info:
         const sat_s6Jt4_entry;
         const 1;
         const 16;
 },
 Data.Monoid.$fOrdFirst_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       c6K3x: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6K3B; else goto c6K3A;
       c6K3B: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Monoid.$fOrdFirst_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6K3A: // global
           I64[Hp - 16] = sat_s6Jt4_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Monoid.$fEqFirst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fOrdFirst_$cp1Ord_info" {
     Data.Monoid.$fOrdFirst_$cp1Ord_info:
         const Data.Monoid.$fOrdFirst_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.651276761 UTC

[section ""data" . Data.Monoid.$fOrdFirst_closure" {
     Data.Monoid.$fOrdFirst_closure:
         const Data.Monoid.$fOrdFirst_info;
 },
 sat_s6Jtf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6K3V: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$cmin_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jtf_info" {
     sat_s6Jtf_info:
         const sat_s6Jtf_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Jte_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6K43: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$cmax_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jte_info" {
     sat_s6Jte_info:
         const sat_s6Jte_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Jtd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6K4b: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c>=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jtd_info" {
     sat_s6Jtd_info:
         const sat_s6Jtd_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Jtc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6K4j: // global
           R4 = R2;
           R3 = R3;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jtc_info" {
     sat_s6Jtc_info:
         const sat_s6Jtc_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Jt9_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6K4r: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jt9_info" {
     sat_s6Jt9_info:
         const sat_s6Jt9_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Jt8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6K4z: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jt8_info" {
     sat_s6Jt8_info:
         const sat_s6Jt8_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Jt7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6K4H: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Jt7_info" {
     sat_s6Jt7_info:
         const sat_s6Jt7_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Jt6_entry() //  [R1]
         { []
         }
     {offset
       c6K4O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6K4P; else goto c6K4Q;
       c6K4P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6K4Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Monoid.$fOrdFirst_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Jt6_info" {
     sat_s6Jt6_info:
         const sat_s6Jt6_entry;
         const 1;
         const 16;
 },
 Data.Monoid.$fOrdFirst_entry() //  [R2]
         { []
         }
     {offset
       c6K4S: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c6K4W; else goto c6K4V;
       c6K4W: // global
           HpAlloc = 208;
           R2 = R2;
           R1 = Data.Monoid.$fOrdFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6K4V: // global
           I64[Hp - 200] = sat_s6Jtf_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s6Jte_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s6Jtd_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s6Jtc_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s6Jt9_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s6Jt8_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s6Jt7_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s6Jt6_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 102;
           P64[Hp - 40] = Hp - 118;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 150;
           P64[Hp - 16] = Hp - 166;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 198;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.$fOrdFirst_info" {
     Data.Monoid.$fOrdFirst_info:
         const Data.Monoid.$fOrdFirst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.667662002 UTC

[section ""data" . Data.Monoid.getFirst_closure" {
     Data.Monoid.getFirst_closure:
         const Data.Monoid.getFirst_info;
 },
 Data.Monoid.getFirst_entry() //  [R2]
         { []
         }
     {offset
       c6K5N: // global
           R2 = R2;
           call Data.Monoid.$fGeneric1First2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.getFirst_info" {
     Data.Monoid.getFirst_info:
         const Data.Monoid.getFirst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.670929579 UTC

[section ""data" . Data.Monoid.getLast_closure" {
     Data.Monoid.getLast_closure:
         const Data.Monoid.getLast_info;
 },
 Data.Monoid.getLast_entry() //  [R2]
         { []
         }
     {offset
       c6K5Y: // global
           R2 = R2;
           call Data.Monoid.$fGeneric1Last2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Monoid.getLast_info" {
     Data.Monoid.getLast_info:
         const Data.Monoid.getLast_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.67378231 UTC

[section ""cstring" . Data.Monoid.$trModule4_bytes" {
     Data.Monoid.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.675379211 UTC

[section ""data" . Data.Monoid.$trModule3_closure" {
     Data.Monoid.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Monoid.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.677053601 UTC

[section ""cstring" . Data.Monoid.$trModule2_bytes" {
     Data.Monoid.$trModule2_bytes:
         I8[] [68,97,116,97,46,77,111,110,111,105,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.678988224 UTC

[section ""data" . Data.Monoid.$trModule1_closure" {
     Data.Monoid.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Monoid.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.680475982 UTC

[section ""data" . Data.Monoid.$trModule_closure" {
     Data.Monoid.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Monoid.$trModule3_closure+1;
         const Data.Monoid.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.682194294 UTC

[section ""data" . $krep_r6I1r_closure" {
     $krep_r6I1r_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.68385267 UTC

[section ""data" . $krep1_r6I1s_closure" {
     $krep1_r6I1s_closure:
         const :_con_info;
         const $krep_r6I1r_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.685565881 UTC

[section ""data" . $krep2_r6I1t_closure" {
     $krep2_r6I1t_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep1_r6I1s_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.687242869 UTC

[section ""data" . Data.Monoid.$tcFirst1_closure" {
     Data.Monoid.$tcFirst1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Monoid.$fReadFirst11_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.689399119 UTC

[section ""data" . Data.Monoid.$tcFirst_closure" {
     Data.Monoid.$tcFirst_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Monoid.$trModule_closure+1;
         const Data.Monoid.$tcFirst1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 12072287807032806756;
         const 12788244796562536401;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.691366688 UTC

[section ""data" . $krep3_r6I1u_closure" {
     $krep3_r6I1u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Monoid.$tcFirst_closure+1;
         const $krep1_r6I1s_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.693107024 UTC

[section ""data" . Data.Monoid.$tc'First1_closure" {
     Data.Monoid.$tc'First1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r6I1t_closure+1;
         const $krep3_r6I1u_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.694984196 UTC

[section ""cstring" . Data.Monoid.$tc'First3_bytes" {
     Data.Monoid.$tc'First3_bytes:
         I8[] [39,70,105,114,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.696703785 UTC

[section ""data" . Data.Monoid.$tc'First2_closure" {
     Data.Monoid.$tc'First2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Monoid.$tc'First3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.698566467 UTC

[section ""data" . Data.Monoid.$tc'First_closure" {
     Data.Monoid.$tc'First_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Monoid.$trModule_closure+1;
         const Data.Monoid.$tc'First2_closure+1;
         const Data.Monoid.$tc'First1_closure+4;
         const 7752528083504400280;
         const 15965132804789246607;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.700358619 UTC

[section ""data" . Data.Monoid.$tcLast1_closure" {
     Data.Monoid.$tcLast1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Monoid.$fReadLast5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.702222952 UTC

[section ""data" . Data.Monoid.$tcLast_closure" {
     Data.Monoid.$tcLast_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Monoid.$trModule_closure+1;
         const Data.Monoid.$tcLast1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 6920195955404695016;
         const 2388797855174213212;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.704112366 UTC

[section ""data" . $krep4_r6I1v_closure" {
     $krep4_r6I1v_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Monoid.$tcLast_closure+1;
         const $krep1_r6I1s_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.70608051 UTC

[section ""data" . Data.Monoid.$tc'Last1_closure" {
     Data.Monoid.$tc'Last1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r6I1t_closure+1;
         const $krep4_r6I1v_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.707841068 UTC

[section ""cstring" . Data.Monoid.$tc'Last3_bytes" {
     Data.Monoid.$tc'Last3_bytes:
         I8[] [39,76,97,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.709625864 UTC

[section ""data" . Data.Monoid.$tc'Last2_closure" {
     Data.Monoid.$tc'Last2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Monoid.$tc'Last3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.711480471 UTC

[section ""data" . Data.Monoid.$tc'Last_closure" {
     Data.Monoid.$tc'Last_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Monoid.$trModule_closure+1;
         const Data.Monoid.$tc'Last2_closure+1;
         const Data.Monoid.$tc'Last1_closure+4;
         const 5411164464353425083;
         const 12998161994081761510;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:01:59.713849536 UTC

[section ""relreadonly" . S6Jws_srt" {
     S6Jws_srt:
         const Data.Semigroup.Internal.stimesIdempotentMonoid_closure;
         const Data.Monoid.$fMonoidFirst_closure;
         const Data.Monoid.$fMonoidLast_closure;
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const Data.Monoid.$w$cshowsPrec1_closure;
         const Data.Monoid.$fShowLast_$cshowsPrec_closure;
         const GHC.Show.$fShowMaybe4_closure;
         const Data.Monoid.$fReadFirst3_closure;
         const GHC.Show.$fShowMaybe1_closure;
         const Data.Monoid.$fShowFirst4_closure;
         const Data.Monoid.$fShowLast_$cshow_closure;
         const Data.Monoid.$fShowLast_$cshowList_closure;
         const Data.Monoid.$fShowLast_closure;
         const GHC.Read.$fReadMaybe1_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Monoid.$fReadFirst2_closure;
         const GHC.Read.readField_closure;
         const Data.Monoid.$fReadLast2_closure;
         const Data.Monoid.$fReadFirst_lexeme_closure;
         const Data.Monoid.$fReadLast_lexeme_closure;
         const GHC.Read.list3_closure;
         const Data.Monoid.$fReadLast1_closure;
         const Data.Monoid.$fReadLast_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Monoid.$fReadLast_$creadListPrec_closure;
         const Data.Monoid.$fReadLast_$creadList_closure;
         const Data.Monoid.$fReadLast_closure;
         const Data.Monoid.$w$cshowsPrec_closure;
         const Data.Monoid.$fShowFirst_$cshowsPrec_closure;
         const Data.Monoid.$fShowFirst_$cshow_closure;
         const Data.Monoid.$fShowFirst_$cshowList_closure;
         const Data.Monoid.$fShowFirst_closure;
         const Data.Monoid.$fReadFirst6_closure;
         const Data.Monoid.$fReadFirst_lexeme1_closure;
         const Data.Monoid.$fReadFirst1_closure;
         const Data.Monoid.$fReadFirst_$creadsPrec_closure;
         const Data.Monoid.$fReadFirst_$creadListPrec_closure;
         const Data.Monoid.$fReadFirst_$creadList_closure;
         const Data.Monoid.$fReadFirst_closure;
 }]

