
==================== Tidy Core ====================
2018-03-16 16:00:08.764664371 UTC

Result size of Tidy Core
  = {terms: 515, types: 1,316, coercions: 62, joins: 0/0}

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
Data.Proxy.$fEqProxy_$c==
  :: forall k (s :: k). Proxy s -> Proxy s -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5byA)
                 (@ (s_a5byB :: k_a5byA))
                 _ [Occ=Dead]
                 _ [Occ=Dead] ->
                 GHC.Types.True}]
Data.Proxy.$fEqProxy_$c==
  = \ (@ k_a5byA)
      (@ (s_a5byB :: k_a5byA))
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      GHC.Types.True

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
Data.Proxy.$fEqProxy_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall k (s :: k). Proxy s -> Proxy s -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ k_a5byA)
                 (@ (s_a5byB :: k_a5byA))
                 _ [Occ=Dead]
                 _ [Occ=Dead] ->
                 GHC.Types.False}]
Data.Proxy.$fEqProxy_$c/=
  = \ (@ k_a5byA)
      (@ (s_a5byB :: k_a5byA))
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      GHC.Types.False

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
Data.Proxy.$fEqProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). Eq (Proxy s)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ k_a5bqw) (@ (s_a5bp8 :: k_a5bqw)) ->
       GHC.Classes.C:Eq TYPE: Proxy s_a5bp8
                        Data.Proxy.$fEqProxy_$c== @ k_a5bqw @ s_a5bp8
                        Data.Proxy.$fEqProxy_$c/= @ k_a5bqw @ s_a5bp8]
Data.Proxy.$fEqProxy
  = \ (@ k_a5byA) (@ (s_a5byB :: k_a5byA)) ->
      GHC.Classes.C:Eq
        @ (Proxy s_a5byB)
        (Data.Proxy.$fEqProxy_$c== @ k_a5byA @ s_a5byB)
        (Data.Proxy.$fEqProxy_$c/= @ k_a5byA @ s_a5byB)

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
Data.Proxy.$fOrdProxy_$ccompare
  :: forall k (s :: k). Proxy s -> Proxy s -> Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bxU)
                 (@ (s_a5bxV :: k_a5bxU))
                 _ [Occ=Dead]
                 _ [Occ=Dead] ->
                 GHC.Types.EQ}]
Data.Proxy.$fOrdProxy_$ccompare
  = \ (@ k_a5bxU)
      (@ (s_a5bxV :: k_a5bxU))
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      GHC.Types.EQ

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
Data.Proxy.$fOrdProxy_$c<
  :: forall k (s :: k). Proxy s -> Proxy s -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bxU)
                 (@ (s_a5bxV :: k_a5bxU))
                 _ [Occ=Dead]
                 _ [Occ=Dead] ->
                 GHC.Types.False}]
Data.Proxy.$fOrdProxy_$c<
  = \ (@ k_a5bxU)
      (@ (s_a5bxV :: k_a5bxU))
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      GHC.Types.False

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
Data.Proxy.$fOrdProxy_$cmax
  :: forall k (s :: k). Proxy s -> Proxy s -> Proxy s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U()>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bxU)
                 (@ (s_a5bxV :: k_a5bxU))
                 _ [Occ=Dead]
                 (y_a55e [Occ=Once] :: Proxy s_a5bxV) ->
                 y_a55e}]
Data.Proxy.$fOrdProxy_$cmax
  = \ (@ k_a5bxU)
      (@ (s_a5bxV :: k_a5bxU))
      _ [Occ=Dead]
      (y_a55e :: Proxy s_a5bxV) ->
      y_a55e

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
Data.Proxy.$fOrdProxy_$cmin
  :: forall k (s :: k). Proxy s -> Proxy s -> Proxy s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U()><L,A>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bxU)
                 (@ (s_a5bxV :: k_a5bxU))
                 (x_a55m [Occ=Once] :: Proxy s_a5bxV)
                 _ [Occ=Dead] ->
                 x_a55m}]
Data.Proxy.$fOrdProxy_$cmin
  = \ (@ k_a5bxU)
      (@ (s_a5bxV :: k_a5bxU))
      (x_a55m :: Proxy s_a5bxV)
      _ [Occ=Dead] ->
      x_a55m

-- RHS size: {terms: 11, types: 22, coercions: 0, joins: 0/0}
Data.Proxy.$fOrdProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). Ord (Proxy s)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ k_a5bqp) (@ (s_a5bp7 :: k_a5bqp)) ->
       GHC.Classes.C:Ord TYPE: Proxy s_a5bp7
                         Data.Proxy.$fEqProxy @ k_a5bqp @ s_a5bp7
                         Data.Proxy.$fOrdProxy_$ccompare @ k_a5bqp @ s_a5bp7
                         Data.Proxy.$fOrdProxy_$c< @ k_a5bqp @ s_a5bp7
                         Data.Proxy.$fEqProxy_$c== @ k_a5bqp @ s_a5bp7
                         Data.Proxy.$fOrdProxy_$c< @ k_a5bqp @ s_a5bp7
                         Data.Proxy.$fEqProxy_$c== @ k_a5bqp @ s_a5bp7
                         Data.Proxy.$fOrdProxy_$cmax @ k_a5bqp @ s_a5bp7
                         Data.Proxy.$fOrdProxy_$cmin @ k_a5bqp @ s_a5bp7]
Data.Proxy.$fOrdProxy
  = \ (@ k_a5bxU) (@ (s_a5bxV :: k_a5bxU)) ->
      GHC.Classes.C:Ord
        @ (Proxy s_a5bxV)
        (Data.Proxy.$fEqProxy @ k_a5bxU @ s_a5bxV)
        (Data.Proxy.$fOrdProxy_$ccompare @ k_a5bxU @ s_a5bxV)
        (Data.Proxy.$fOrdProxy_$c< @ k_a5bxU @ s_a5bxV)
        (Data.Proxy.$fEqProxy_$c== @ k_a5bxU @ s_a5bxV)
        (Data.Proxy.$fOrdProxy_$c< @ k_a5bxU @ s_a5bxV)
        (Data.Proxy.$fEqProxy_$c== @ k_a5bxU @ s_a5bxV)
        (Data.Proxy.$fOrdProxy_$cmax @ k_a5bxU @ s_a5bxV)
        (Data.Proxy.$fOrdProxy_$cmin @ k_a5bxU @ s_a5bxV)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$fReadProxy4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Proxy.$fReadProxy4 = "Proxy"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$fReadProxy3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Proxy.$fReadProxy3 = unpackCString# Data.Proxy.$fReadProxy4

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
Data.Proxy.$fShowProxy2 :: [Char] -> [Char]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Data.Proxy.$fShowProxy2 = ++ @ Char Data.Proxy.$fReadProxy3

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
Data.Proxy.$fShowProxy_$cshowsPrec
  :: forall k (s :: k). Int -> Proxy s -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bxC)
                 (@ (s_a5bxD :: k_a5bxC))
                 _ [Occ=Dead]
                 _ [Occ=Dead] ->
                 Data.Proxy.$fShowProxy2}]
Data.Proxy.$fShowProxy_$cshowsPrec
  = \ (@ k_a5bxC)
      (@ (s_a5bxD :: k_a5bxC))
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      Data.Proxy.$fShowProxy2

-- RHS size: {terms: 4, types: 6, coercions: 0, joins: 0/0}
Data.Proxy.$fShowProxy_$cshow
  :: forall k (s :: k). Proxy s -> String
[GblId,
 Arity=1,
 Str=<L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bxC) (@ (s_a5bxD :: k_a5bxC)) _ [Occ=Dead] ->
                 Data.Proxy.$fReadProxy3}]
Data.Proxy.$fShowProxy_$cshow
  = \ (@ k_a5bxC) (@ (s_a5bxD :: k_a5bxC)) _ [Occ=Dead] ->
      Data.Proxy.$fReadProxy3

-- RHS size: {terms: 4, types: 6, coercions: 0, joins: 0/0}
Data.Proxy.$fShowProxy1
  :: forall k (s :: k). Proxy s -> [Char] -> [Char]
[GblId,
 Arity=2,
 Str=<L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bxC) (@ (s_a5bxD :: k_a5bxC)) _ [Occ=Dead] ->
                 Data.Proxy.$fShowProxy2}]
Data.Proxy.$fShowProxy1
  = \ (@ k_a5bxC) (@ (s_a5bxD :: k_a5bxC)) _ [Occ=Dead] ->
      Data.Proxy.$fShowProxy2

-- RHS size: {terms: 8, types: 13, coercions: 0, joins: 0/0}
Data.Proxy.$fShowProxy_$cshowList
  :: forall k (s :: k). [Proxy s] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_a5bxC)
                 (@ (s_a5bxD :: k_a5bxC))
                 (ls_i1Mix [Occ=Once] :: [Proxy s_a5bxD])
                 (s1_i1Miy [Occ=Once] :: String) ->
                 showList__
                   @ (Proxy s_a5bxD)
                   (Data.Proxy.$fShowProxy1 @ k_a5bxC @ s_a5bxD)
                   ls_i1Mix
                   s1_i1Miy}]
Data.Proxy.$fShowProxy_$cshowList
  = \ (@ k_a5bxC)
      (@ (s_a5bxD :: k_a5bxC))
      (ls_i1Mix :: [Proxy s_a5bxD])
      (s1_i1Miy :: String) ->
      showList__
        @ (Proxy s_a5bxD)
        (Data.Proxy.$fShowProxy1 @ k_a5bxC @ s_a5bxD)
        ls_i1Mix
        s1_i1Miy

-- RHS size: {terms: 6, types: 12, coercions: 0, joins: 0/0}
Data.Proxy.$fShowProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). Show (Proxy s)
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ (@ k_a5bqi) (@ (s_a5bp6 :: k_a5bqi)) ->
       GHC.Show.C:Show TYPE: Proxy s_a5bp6
                       Data.Proxy.$fShowProxy_$cshowsPrec @ k_a5bqi @ s_a5bp6
                       Data.Proxy.$fShowProxy_$cshow @ k_a5bqi @ s_a5bp6
                       Data.Proxy.$fShowProxy_$cshowList @ k_a5bqi @ s_a5bp6]
Data.Proxy.$fShowProxy
  = \ (@ k_a5bxC) (@ (s_a5bxD :: k_a5bxC)) ->
      GHC.Show.C:Show
        @ (Proxy s_a5bxD)
        (Data.Proxy.$fShowProxy_$cshowsPrec @ k_a5bxC @ s_a5bxD)
        (Data.Proxy.$fShowProxy_$cshow @ k_a5bxC @ s_a5bxD)
        (Data.Proxy.$fShowProxy_$cshowList @ k_a5bxC @ s_a5bxD)

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
Data.Proxy.$fEnumProxy1 :: forall k (s :: k). [Proxy s]
[GblId,
 Caf=NoCafRefs,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Data.Proxy.$fEnumProxy1
  = \ (@ k_a5bwI) (@ (s_a5bwJ :: k_a5bwI)) ->
      GHC.Types.:
        @ (Proxy s_a5bwJ)
        (Data.Proxy.Proxy @ k_a5bwI @ s_a5bwJ)
        (GHC.Types.[] @ (Proxy s_a5bwJ))

-- RHS size: {terms: 6, types: 14, coercions: 0, joins: 0/0}
Data.Proxy.$fEnumProxy_$cenumFromThenTo
  :: forall k (s :: k). Proxy s -> Proxy s -> Proxy s -> [Proxy s]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bwI)
                 (@ (s_a5bwJ :: k_a5bwI))
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead] ->
                 Data.Proxy.$fEnumProxy1 @ k_a5bwI @ s_a5bwJ}]
Data.Proxy.$fEnumProxy_$cenumFromThenTo
  = \ (@ k_a5bwI)
      (@ (s_a5bwJ :: k_a5bwI))
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      Data.Proxy.$fEnumProxy1 @ k_a5bwI @ s_a5bwJ

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
Data.Proxy.$fEnumProxy_$cenumFromTo
  :: forall k (s :: k). Proxy s -> Proxy s -> [Proxy s]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bwI)
                 (@ (s_a5bwJ :: k_a5bwI))
                 _ [Occ=Dead]
                 _ [Occ=Dead] ->
                 Data.Proxy.$fEnumProxy1 @ k_a5bwI @ s_a5bwJ}]
Data.Proxy.$fEnumProxy_$cenumFromTo
  = \ (@ k_a5bwI)
      (@ (s_a5bwJ :: k_a5bwI))
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      Data.Proxy.$fEnumProxy1 @ k_a5bwI @ s_a5bwJ

-- RHS size: {terms: 4, types: 8, coercions: 0, joins: 0/0}
Data.Proxy.$fEnumProxy_$cenumFrom
  :: forall k (s :: k). Proxy s -> [Proxy s]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,A>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bwI) (@ (s_a5bwJ :: k_a5bwI)) _ [Occ=Dead] ->
                 Data.Proxy.$fEnumProxy1 @ k_a5bwI @ s_a5bwJ}]
Data.Proxy.$fEnumProxy_$cenumFrom
  = \ (@ k_a5bwI) (@ (s_a5bwJ :: k_a5bwI)) _ [Occ=Dead] ->
      Data.Proxy.$fEnumProxy1 @ k_a5bwI @ s_a5bwJ

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$fEnumProxy2 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Proxy.$fEnumProxy2 = GHC.Types.I# 0#

-- RHS size: {terms: 4, types: 6, coercions: 0, joins: 0/0}
Data.Proxy.$fEnumProxy_$cfromEnum
  :: forall k (s :: k). Proxy s -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,A>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bwI) (@ (s_a5bwJ :: k_a5bwI)) _ [Occ=Dead] ->
                 Data.Proxy.$fEnumProxy2}]
Data.Proxy.$fEnumProxy_$cfromEnum
  = \ (@ k_a5bwI) (@ (s_a5bwJ :: k_a5bwI)) _ [Occ=Dead] ->
      Data.Proxy.$fEnumProxy2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_r5bED :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_r5bED = "Proxy.toEnum: 0 expected"#

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
Data.Proxy.$fEnumProxy3 :: forall k (s :: k). Proxy s
[GblId, Str=x]
Data.Proxy.$fEnumProxy3
  = \ (@ k_a5bwI) (@ (s_a5bwJ :: k_a5bwI)) ->
      errorWithoutStackTrace
        @ 'LiftedRep @ (Proxy s_a5bwJ) (unpackCString# lvl_r5bED)

-- RHS size: {terms: 12, types: 11, coercions: 0, joins: 0/0}
Data.Proxy.$fEnumProxy_$ctoEnum
  :: forall k (s :: k). Int -> Proxy s
[GblId,
 Arity=1,
 Str=<S(S),1*U(1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_a5bwI)
                 (@ (s_a5bwJ :: k_a5bwI))
                 (ds_d5bAj [Occ=Once!] :: Int) ->
                 case ds_d5bAj of { I# ds1_d5bAm [Occ=Once!] ->
                 case ds1_d5bAm of {
                   __DEFAULT -> Data.Proxy.$fEnumProxy3 @ k_a5bwI @ s_a5bwJ;
                   0# -> Data.Proxy.Proxy @ k_a5bwI @ s_a5bwJ
                 }
                 }}]
Data.Proxy.$fEnumProxy_$ctoEnum
  = \ (@ k_a5bwI) (@ (s_a5bwJ :: k_a5bwI)) (ds_d5bAj :: Int) ->
      case ds_d5bAj of { I# ds1_d5bAm ->
      case ds1_d5bAm of {
        __DEFAULT -> Data.Proxy.$fEnumProxy3 @ k_a5bwI @ s_a5bwJ;
        0# -> Data.Proxy.Proxy @ k_a5bwI @ s_a5bwJ
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$fEnumProxy5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Data.Proxy.$fEnumProxy5 = "Proxy.pred"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$fEnumProxy4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Proxy.$fEnumProxy4 = unpackCString# Data.Proxy.$fEnumProxy5

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
Data.Proxy.$fEnumProxy_$cpred
  :: forall k (s :: k). Proxy s -> Proxy s
[GblId,
 Arity=1,
 Str=<B,A>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bwI) (@ (s_a5bwJ :: k_a5bwI)) _ [Occ=Dead] ->
                 errorWithoutStackTrace
                   @ 'LiftedRep @ (Proxy s_a5bwJ) Data.Proxy.$fEnumProxy4}]
Data.Proxy.$fEnumProxy_$cpred
  = \ (@ k_a5bwI) (@ (s_a5bwJ :: k_a5bwI)) _ [Occ=Dead] ->
      errorWithoutStackTrace
        @ 'LiftedRep @ (Proxy s_a5bwJ) Data.Proxy.$fEnumProxy4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$fEnumProxy7 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Data.Proxy.$fEnumProxy7 = "Proxy.succ"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$fEnumProxy6 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Proxy.$fEnumProxy6 = unpackCString# Data.Proxy.$fEnumProxy7

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
Data.Proxy.$fEnumProxy_$csucc
  :: forall k (s :: k). Proxy s -> Proxy s
[GblId,
 Arity=1,
 Str=<B,A>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bwI) (@ (s_a5bwJ :: k_a5bwI)) _ [Occ=Dead] ->
                 errorWithoutStackTrace
                   @ 'LiftedRep @ (Proxy s_a5bwJ) Data.Proxy.$fEnumProxy6}]
Data.Proxy.$fEnumProxy_$csucc
  = \ (@ k_a5bwI) (@ (s_a5bwJ :: k_a5bwI)) _ [Occ=Dead] ->
      errorWithoutStackTrace
        @ 'LiftedRep @ (Proxy s_a5bwJ) Data.Proxy.$fEnumProxy6

-- RHS size: {terms: 11, types: 22, coercions: 0, joins: 0/0}
Data.Proxy.$fEnumProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). Enum (Proxy s)
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ (@ k_a5bqb) (@ (s_a5bp5 :: k_a5bqb)) ->
       GHC.Enum.C:Enum TYPE: Proxy s_a5bp5
                       Data.Proxy.$fEnumProxy_$csucc @ k_a5bqb @ s_a5bp5
                       Data.Proxy.$fEnumProxy_$cpred @ k_a5bqb @ s_a5bp5
                       Data.Proxy.$fEnumProxy_$ctoEnum @ k_a5bqb @ s_a5bp5
                       Data.Proxy.$fEnumProxy_$cfromEnum @ k_a5bqb @ s_a5bp5
                       Data.Proxy.$fEnumProxy_$cenumFrom @ k_a5bqb @ s_a5bp5
                       Data.Proxy.$fEnumProxy_$cenumFromTo @ k_a5bqb @ s_a5bp5
                       Data.Proxy.$fEnumProxy_$cenumFromTo @ k_a5bqb @ s_a5bp5
                       Data.Proxy.$fEnumProxy_$cenumFromThenTo @ k_a5bqb @ s_a5bp5]
Data.Proxy.$fEnumProxy
  = \ (@ k_a5bwI) (@ (s_a5bwJ :: k_a5bwI)) ->
      GHC.Enum.C:Enum
        @ (Proxy s_a5bwJ)
        (Data.Proxy.$fEnumProxy_$csucc @ k_a5bwI @ s_a5bwJ)
        (Data.Proxy.$fEnumProxy_$cpred @ k_a5bwI @ s_a5bwJ)
        (Data.Proxy.$fEnumProxy_$ctoEnum @ k_a5bwI @ s_a5bwJ)
        (Data.Proxy.$fEnumProxy_$cfromEnum @ k_a5bwI @ s_a5bwJ)
        (Data.Proxy.$fEnumProxy_$cenumFrom @ k_a5bwI @ s_a5bwJ)
        (Data.Proxy.$fEnumProxy_$cenumFromTo @ k_a5bwI @ s_a5bwJ)
        (Data.Proxy.$fEnumProxy_$cenumFromTo @ k_a5bwI @ s_a5bwJ)
        (Data.Proxy.$fEnumProxy_$cenumFromThenTo @ k_a5bwI @ s_a5bwJ)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$fIxProxy1 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Proxy.$fIxProxy1 = GHC.Types.I# 1#

-- RHS size: {terms: 4, types: 10, coercions: 0, joins: 0/0}
Data.Proxy.$fIxProxy_$cunsafeRangeSize
  :: forall k (s :: k). (Proxy s, Proxy s) -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,A>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bwa) (@ (s_a5bwb :: k_a5bwa)) _ [Occ=Dead] ->
                 Data.Proxy.$fIxProxy1}]
Data.Proxy.$fIxProxy_$cunsafeRangeSize
  = \ (@ k_a5bwa) (@ (s_a5bwb :: k_a5bwa)) _ [Occ=Dead] ->
      Data.Proxy.$fIxProxy1

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
Data.Proxy.$fIxProxy_$cinRange
  :: forall k (s :: k). (Proxy s, Proxy s) -> Proxy s -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bwa)
                 (@ (s_a5bwb :: k_a5bwa))
                 _ [Occ=Dead]
                 _ [Occ=Dead] ->
                 GHC.Types.True}]
Data.Proxy.$fIxProxy_$cinRange
  = \ (@ k_a5bwa)
      (@ (s_a5bwb :: k_a5bwa))
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      GHC.Types.True

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
Data.Proxy.$fIxProxy_$cunsafeIndex
  :: forall k (s :: k). (Proxy s, Proxy s) -> Proxy s -> Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bwa)
                 (@ (s_a5bwb :: k_a5bwa))
                 _ [Occ=Dead]
                 _ [Occ=Dead] ->
                 Data.Proxy.$fEnumProxy2}]
Data.Proxy.$fIxProxy_$cunsafeIndex
  = \ (@ k_a5bwa)
      (@ (s_a5bwb :: k_a5bwa))
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      Data.Proxy.$fEnumProxy2

-- RHS size: {terms: 4, types: 12, coercions: 0, joins: 0/0}
Data.Proxy.$fIxProxy_$crange
  :: forall k (s :: k). (Proxy s, Proxy s) -> [Proxy s]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,A>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bwa) (@ (s_a5bwb :: k_a5bwa)) _ [Occ=Dead] ->
                 Data.Proxy.$fEnumProxy1 @ k_a5bwa @ s_a5bwb}]
Data.Proxy.$fIxProxy_$crange
  = \ (@ k_a5bwa) (@ (s_a5bwb :: k_a5bwa)) _ [Occ=Dead] ->
      Data.Proxy.$fEnumProxy1 @ k_a5bwa @ s_a5bwb

-- RHS size: {terms: 10, types: 20, coercions: 0, joins: 0/0}
Data.Proxy.$fIxProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). Ix (Proxy s)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ k_a5bq4) (@ (s_a5bp4 :: k_a5bq4)) ->
       GHC.Arr.C:Ix TYPE: Proxy s_a5bp4
                    Data.Proxy.$fOrdProxy @ k_a5bq4 @ s_a5bp4
                    Data.Proxy.$fIxProxy_$crange @ k_a5bq4 @ s_a5bp4
                    Data.Proxy.$fIxProxy_$cunsafeIndex @ k_a5bq4 @ s_a5bp4
                    Data.Proxy.$fIxProxy_$cunsafeIndex @ k_a5bq4 @ s_a5bp4
                    Data.Proxy.$fIxProxy_$cinRange @ k_a5bq4 @ s_a5bp4
                    Data.Proxy.$fIxProxy_$cunsafeRangeSize @ k_a5bq4 @ s_a5bp4
                    Data.Proxy.$fIxProxy_$cunsafeRangeSize @ k_a5bq4 @ s_a5bp4]
Data.Proxy.$fIxProxy
  = \ (@ k_a5bwa) (@ (s_a5bwb :: k_a5bwa)) ->
      GHC.Arr.C:Ix
        @ (Proxy s_a5bwb)
        (Data.Proxy.$fOrdProxy @ k_a5bwa @ s_a5bwb)
        (Data.Proxy.$fIxProxy_$crange @ k_a5bwa @ s_a5bwb)
        (Data.Proxy.$fIxProxy_$cunsafeIndex @ k_a5bwa @ s_a5bwb)
        (Data.Proxy.$fIxProxy_$cunsafeIndex @ k_a5bwa @ s_a5bwb)
        (Data.Proxy.$fIxProxy_$cinRange @ k_a5bwa @ s_a5bwb)
        (Data.Proxy.$fIxProxy_$cunsafeRangeSize @ k_a5bwa @ s_a5bwb)
        (Data.Proxy.$fIxProxy_$cunsafeRangeSize @ k_a5bwa @ s_a5bwb)

-- RHS size: {terms: 7, types: 13, coercions: 0, joins: 0/0}
Data.Proxy.$fSemigroupProxy_$cstimes
  :: forall k (s :: k) b.
     GHC.Real.Integral b =>
     b -> Proxy s -> Proxy s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bvL)
                 (@ (s_a5bvM :: k_a5bvL))
                 (@ b_a5bw2)
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 _ [Occ=Dead] ->
                 Data.Proxy.Proxy @ k_a5bvL @ s_a5bvM}]
Data.Proxy.$fSemigroupProxy_$cstimes
  = \ (@ k_a5bvL)
      (@ (s_a5bvM :: k_a5bvL))
      (@ b_a5bw2)
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      Data.Proxy.Proxy @ k_a5bvL @ s_a5bvM

-- RHS size: {terms: 4, types: 9, coercions: 0, joins: 0/0}
Data.Proxy.$fSemigroupProxy_$csconcat
  :: forall k (s :: k). NonEmpty (Proxy s) -> Proxy s
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bvL) (@ (s_a5bvM :: k_a5bvL)) _ [Occ=Dead] ->
                 Data.Proxy.Proxy @ k_a5bvL @ s_a5bvM}]
Data.Proxy.$fSemigroupProxy_$csconcat
  = \ (@ k_a5bvL) (@ (s_a5bvM :: k_a5bvL)) _ [Occ=Dead] ->
      Data.Proxy.Proxy @ k_a5bvL @ s_a5bvM

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
Data.Proxy.$fMonoidProxy_$c<>
  :: forall k (s :: k). Proxy s -> Proxy s -> Proxy s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bvL)
                 (@ (s_a5bvM :: k_a5bvL))
                 _ [Occ=Dead]
                 _ [Occ=Dead] ->
                 Data.Proxy.Proxy @ k_a5bvL @ s_a5bvM}]
Data.Proxy.$fMonoidProxy_$c<>
  = \ (@ k_a5bvL)
      (@ (s_a5bvM :: k_a5bvL))
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      Data.Proxy.Proxy @ k_a5bvL @ s_a5bvM

-- RHS size: {terms: 6, types: 12, coercions: 0, joins: 0/0}
Data.Proxy.$fSemigroupProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). Semigroup (Proxy s)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ k_a5bpX) (@ (s_a5bp3 :: k_a5bpX)) ->
       GHC.Base.C:Semigroup TYPE: Proxy s_a5bp3
                            Data.Proxy.$fMonoidProxy_$c<> @ k_a5bpX @ s_a5bp3
                            Data.Proxy.$fSemigroupProxy_$csconcat @ k_a5bpX @ s_a5bp3
                            Data.Proxy.$fSemigroupProxy_$cstimes @ k_a5bpX @ s_a5bp3]
Data.Proxy.$fSemigroupProxy
  = \ (@ k_a5bvL) (@ (s_a5bvM :: k_a5bvL)) ->
      GHC.Base.C:Semigroup
        @ (Proxy s_a5bvM)
        (Data.Proxy.$fMonoidProxy_$c<> @ k_a5bvL @ s_a5bvM)
        (Data.Proxy.$fSemigroupProxy_$csconcat @ k_a5bvL @ s_a5bvM)
        (Data.Proxy.$fSemigroupProxy_$cstimes @ k_a5bvL @ s_a5bvM)

-- RHS size: {terms: 4, types: 9, coercions: 0, joins: 0/0}
Data.Proxy.$fMonoidProxy_$cmconcat
  :: forall k (s :: k). [Proxy s] -> Proxy s
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ k_a5bvm) (@ (s_a5bvn :: k_a5bvm)) _ [Occ=Dead] ->
                 Data.Proxy.Proxy @ k_a5bvm @ s_a5bvn}]
Data.Proxy.$fMonoidProxy_$cmconcat
  = \ (@ k_a5bvm) (@ (s_a5bvn :: k_a5bvm)) _ [Occ=Dead] ->
      Data.Proxy.Proxy @ k_a5bvm @ s_a5bvn

-- RHS size: {terms: 7, types: 14, coercions: 0, joins: 0/0}
Data.Proxy.$fMonoidProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). Monoid (Proxy s)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ k_a5bpQ) (@ (s_a5bp2 :: k_a5bpQ)) ->
       GHC.Base.C:Monoid TYPE: Proxy s_a5bp2
                         Data.Proxy.$fSemigroupProxy @ k_a5bpQ @ s_a5bp2
                         Data.Proxy.Proxy @ k_a5bpQ @ s_a5bp2
                         Data.Proxy.$fMonoidProxy_$c<> @ k_a5bpQ @ s_a5bp2
                         Data.Proxy.$fMonoidProxy_$cmconcat @ k_a5bpQ @ s_a5bp2]
Data.Proxy.$fMonoidProxy
  = \ (@ k_a5bvm) (@ (s_a5bvn :: k_a5bvm)) ->
      GHC.Base.C:Monoid
        @ (Proxy s_a5bvn)
        (Data.Proxy.$fSemigroupProxy @ k_a5bvm @ s_a5bvn)
        (Data.Proxy.Proxy @ k_a5bvm @ s_a5bvn)
        (Data.Proxy.$fMonoidProxy_$c<> @ k_a5bvm @ s_a5bvn)
        (Data.Proxy.$fMonoidProxy_$cmconcat @ k_a5bvm @ s_a5bvn)

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
Data.Proxy.$fFunctorProxy_$cfmap [InlPrag=INLINE (sat-args=2)]
  :: forall a b. (a -> b) -> Proxy a -> Proxy b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ a_a5bv5) (@ b_a5bv6) _ [Occ=Dead] _ [Occ=Dead] ->
                 Data.Proxy.Proxy @ * @ b_a5bv6}]
Data.Proxy.$fFunctorProxy_$cfmap
  = \ (@ a_a5bv5) (@ b_a5bv6) _ [Occ=Dead] _ [Occ=Dead] ->
      Data.Proxy.Proxy @ * @ b_a5bv6

-- RHS size: {terms: 5, types: 12, coercions: 0, joins: 0/0}
Data.Proxy.$fFunctorProxy_$c<$
  :: forall a b. a -> Proxy b -> Proxy a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a5bvd) (@ b_a5bve) _ [Occ=Dead] _ [Occ=Dead] ->
                 Data.Proxy.Proxy @ * @ a_a5bvd}]
Data.Proxy.$fFunctorProxy_$c<$
  = \ (@ a_a5bvd) (@ b_a5bve) _ [Occ=Dead] _ [Occ=Dead] ->
      Data.Proxy.Proxy @ * @ a_a5bvd

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
Data.Proxy.$fFunctorProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: Functor Proxy
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Functor TYPE: Proxy
                          Data.Proxy.$fFunctorProxy_$cfmap
                          Data.Proxy.$fFunctorProxy_$c<$]
Data.Proxy.$fFunctorProxy
  = GHC.Base.C:Functor
      @ Proxy
      Data.Proxy.$fFunctorProxy_$cfmap
      Data.Proxy.$fFunctorProxy_$c<$

-- RHS size: {terms: 5, types: 16, coercions: 0, joins: 0/0}
Data.Proxy.$fApplicativeProxy_$c<*> [InlPrag=INLINE (sat-args=2)]
  :: forall a b. Proxy (a -> b) -> Proxy a -> Proxy b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ a_a5bup) (@ b_a5buq) _ [Occ=Dead] _ [Occ=Dead] ->
                 Data.Proxy.Proxy @ * @ b_a5buq}]
Data.Proxy.$fApplicativeProxy_$c<*>
  = \ (@ a_a5bup) (@ b_a5buq) _ [Occ=Dead] _ [Occ=Dead] ->
      Data.Proxy.Proxy @ * @ b_a5buq

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
Data.Proxy.$fApplicativeProxy_$cpure [InlPrag=INLINE (sat-args=1)]
  :: forall a. a -> Proxy a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ a_a5bui) _ [Occ=Dead] ->
                 Data.Proxy.Proxy @ * @ a_a5bui}]
Data.Proxy.$fApplicativeProxy_$cpure
  = \ (@ a_a5bui) _ [Occ=Dead] -> Data.Proxy.Proxy @ * @ a_a5bui

-- RHS size: {terms: 4, types: 10, coercions: 0, joins: 0/0}
Data.Proxy.$fApplicativeProxy1 :: forall b c. Proxy b -> Proxy c
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Data.Proxy.$fApplicativeProxy1
  = \ (@ b_a5buy) (@ c_a5buz) ->
      Data.Proxy.$fApplicativeProxy_$c<*>
        @ b_a5buy @ c_a5buz (Data.Proxy.Proxy @ * @ (b_a5buy -> c_a5buz))

-- RHS size: {terms: 6, types: 15, coercions: 0, joins: 0/0}
Data.Proxy.$fApplicativeProxy_$cliftA2
  :: forall a b c. (a -> b -> c) -> Proxy a -> Proxy b -> Proxy c
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a5bux)
                 (@ b_a5buy)
                 (@ c_a5buz)
                 _ [Occ=Dead]
                 _ [Occ=Dead] ->
                 Data.Proxy.$fApplicativeProxy1 @ b_a5buy @ c_a5buz}]
Data.Proxy.$fApplicativeProxy_$cliftA2
  = \ (@ a_a5bux)
      (@ b_a5buy)
      (@ c_a5buz)
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      Data.Proxy.$fApplicativeProxy1 @ b_a5buy @ c_a5buz

-- RHS size: {terms: 5, types: 15, coercions: 0, joins: 0/0}
Data.Proxy.$fApplicativeProxy_$c*>
  :: forall a b. Proxy a -> Proxy b -> Proxy b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a5buJ) (@ b_a5buK) _ [Occ=Dead] _ [Occ=Dead] ->
                 Data.Proxy.Proxy @ * @ b_a5buK}]
Data.Proxy.$fApplicativeProxy_$c*>
  = \ (@ a_a5buJ) (@ b_a5buK) _ [Occ=Dead] _ [Occ=Dead] ->
      Data.Proxy.Proxy @ * @ b_a5buK

-- RHS size: {terms: 4, types: 10, coercions: 0, joins: 0/0}
Data.Proxy.$fApplicativeProxy_$c<*
  :: forall a b. Proxy a -> Proxy b -> Proxy a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a5buT) (@ b_a5buU) _ [Occ=Dead] ->
                 Data.Proxy.$fApplicativeProxy1 @ b_a5buU @ a_a5buT}]
Data.Proxy.$fApplicativeProxy_$c<*
  = \ (@ a_a5buT) (@ b_a5buU) _ [Occ=Dead] ->
      Data.Proxy.$fApplicativeProxy1 @ b_a5buU @ a_a5buT

-- RHS size: {terms: 7, types: 3, coercions: 0, joins: 0/0}
Data.Proxy.$fApplicativeProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: Applicative Proxy
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Applicative TYPE: Proxy
                              Data.Proxy.$fFunctorProxy
                              Data.Proxy.$fApplicativeProxy_$cpure
                              Data.Proxy.$fApplicativeProxy_$c<*>
                              Data.Proxy.$fApplicativeProxy_$cliftA2
                              Data.Proxy.$fApplicativeProxy_$c*>
                              Data.Proxy.$fApplicativeProxy_$c<*]
Data.Proxy.$fApplicativeProxy
  = GHC.Base.C:Applicative
      @ Proxy
      Data.Proxy.$fFunctorProxy
      Data.Proxy.$fApplicativeProxy_$cpure
      Data.Proxy.$fApplicativeProxy_$c<*>
      Data.Proxy.$fApplicativeProxy_$cliftA2
      Data.Proxy.$fApplicativeProxy_$c*>
      Data.Proxy.$fApplicativeProxy_$c<*

-- RHS size: {terms: 4, types: 13, coercions: 0, joins: 0/0}
Data.Proxy.$fAlternativeProxy_$c<|> [InlPrag=INLINE (sat-args=2)]
  :: forall a. Proxy a -> Proxy a -> Proxy a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ a_a5btP) _ [Occ=Dead] _ [Occ=Dead] ->
                 Data.Proxy.Proxy @ * @ a_a5btP}]
Data.Proxy.$fAlternativeProxy_$c<|>
  = \ (@ a_a5btP) _ [Occ=Dead] _ [Occ=Dead] ->
      Data.Proxy.Proxy @ * @ a_a5btP

-- RHS size: {terms: 3, types: 10, coercions: 0, joins: 0/0}
Data.Proxy.$fAlternativeProxy_$csome
  :: forall a. Proxy a -> Proxy [a]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a5btW) _ [Occ=Dead] ->
                 Data.Proxy.Proxy @ * @ [a_a5btW]}]
Data.Proxy.$fAlternativeProxy_$csome
  = \ (@ a_a5btW) _ [Occ=Dead] -> Data.Proxy.Proxy @ * @ [a_a5btW]

-- RHS size: {terms: 6, types: 5, coercions: 0, joins: 0/0}
Data.Proxy.$fAlternativeProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: Alternative Proxy
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Alternative TYPE: Proxy
                              Data.Proxy.$fApplicativeProxy
                              Data.Proxy.Proxy @ *
                              Data.Proxy.$fAlternativeProxy_$c<|>
                              Data.Proxy.$fAlternativeProxy_$csome
                              Data.Proxy.$fAlternativeProxy_$csome]
Data.Proxy.$fAlternativeProxy
  = GHC.Base.C:Alternative
      @ Proxy
      Data.Proxy.$fApplicativeProxy
      (Data.Proxy.Proxy @ *)
      Data.Proxy.$fAlternativeProxy_$c<|>
      Data.Proxy.$fAlternativeProxy_$csome
      Data.Proxy.$fAlternativeProxy_$csome

-- RHS size: {terms: 5, types: 16, coercions: 0, joins: 0/0}
Data.Proxy.$fMonadProxy_$c>>= [InlPrag=INLINE (sat-args=2)]
  :: forall a b. Proxy a -> (a -> Proxy b) -> Proxy b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ a_a5bt4) (@ b_a5bt5) _ [Occ=Dead] _ [Occ=Dead] ->
                 Data.Proxy.Proxy @ * @ b_a5bt5}]
Data.Proxy.$fMonadProxy_$c>>=
  = \ (@ a_a5bt4) (@ b_a5bt5) _ [Occ=Dead] _ [Occ=Dead] ->
      Data.Proxy.Proxy @ * @ b_a5bt5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$fMonadProxy_$c>> [InlPrag=INLINE (sat-args=2)]
  :: forall a b. Proxy a -> Proxy b -> Proxy b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ a_a5btc) (@ b_a5btd) _ [Occ=Dead] _ [Occ=Dead] ->
                 Data.Proxy.Proxy @ * @ b_a5btd}]
Data.Proxy.$fMonadProxy_$c>> = Data.Proxy.$fApplicativeProxy_$c*>

-- RHS size: {terms: 4, types: 9, coercions: 0, joins: 0/0}
lvl1_r5bEE :: forall a. [Char] -> Proxy a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
lvl1_r5bEE
  = \ (@ a_a5btu) (eta_B1 :: [Char]) ->
      errorWithoutStackTrace @ 'LiftedRep @ (Proxy a_a5btu) eta_B1

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
Data.Proxy.$fMonadProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: Monad Proxy
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Monad TYPE: Proxy
                        Data.Proxy.$fApplicativeProxy
                        Data.Proxy.$fMonadProxy_$c>>=
                        Data.Proxy.$fMonadProxy_$c>>
                        Data.Proxy.$fApplicativeProxy_$cpure
                        \ (@ a_a5btu) ->
                          errorWithoutStackTrace @ 'LiftedRep @ (Proxy a_a5btu)]
Data.Proxy.$fMonadProxy
  = GHC.Base.C:Monad
      @ Proxy
      Data.Proxy.$fApplicativeProxy
      Data.Proxy.$fMonadProxy_$c>>=
      Data.Proxy.$fMonadProxy_$c>>
      Data.Proxy.$fApplicativeProxy_$cpure
      lvl1_r5bEE

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
Data.Proxy.$fMonadPlusProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: MonadPlus Proxy
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:MonadPlus TYPE: Proxy
                            Data.Proxy.$fAlternativeProxy
                            Data.Proxy.$fMonadProxy
                            Data.Proxy.Proxy @ *
                            Data.Proxy.$fAlternativeProxy_$c<|>]
Data.Proxy.$fMonadPlusProxy
  = GHC.Base.C:MonadPlus
      @ Proxy
      Data.Proxy.$fAlternativeProxy
      Data.Proxy.$fMonadProxy
      (Data.Proxy.Proxy @ *)
      Data.Proxy.$fAlternativeProxy_$c<|>

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$fReadProxy_lexeme :: Text.Read.Lex.Lexeme
[GblId,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Proxy.$fReadProxy_lexeme
  = Text.Read.Lex.Ident Data.Proxy.$fReadProxy3

-- RHS size: {terms: 14, types: 24, coercions: 0, joins: 0/0}
Data.Proxy.$fReadProxy2
  :: forall k (t :: k).
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Proxy t -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,A><L,1*C1(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_a5brY)
                 (@ (t_a5brZ :: k_a5brY))
                 _ [Occ=Dead]
                 (@ b_a3ngn)
                 (eta_B1 [Occ=Once!]
                    :: Proxy t_a5brZ -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
                 case Text.Read.Lex.$wexpect
                        Data.Proxy.$fReadProxy_lexeme
                        @ b_a3ngn
                        (\ _ [Occ=Dead, OS=OneShot] ->
                           eta_B1 (Data.Proxy.Proxy @ k_a5brY @ t_a5brZ))
                 of
                 { (# ww1_s3xlt [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b_a3ngn ww1_s3xlt
                 }}]
Data.Proxy.$fReadProxy2
  = \ (@ k_a5brY)
      (@ (t_a5brZ :: k_a5brY))
      _ [Occ=Dead]
      (@ b_a3ngn)
      (eta_B1
         :: Proxy t_a5brZ -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
      case Text.Read.Lex.$wexpect
             Data.Proxy.$fReadProxy_lexeme
             @ b_a3ngn
             (\ _ [Occ=Dead, OS=OneShot] ->
                eta_B1 (Data.Proxy.Proxy @ k_a5brY @ t_a5brZ))
      of
      { (# ww1_s3xlt #) ->
      Text.ParserCombinators.ReadP.Look @ b_a3ngn ww1_s3xlt
      }

-- RHS size: {terms: 4, types: 8, coercions: 13, joins: 0/0}
Data.Proxy.$fReadProxy1
  :: forall k (t :: k).
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Proxy t -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Data.Proxy.$fReadProxy1
  = \ (@ k_a5brY) (@ (t_a5brZ :: k_a5brY)) ->
      GHC.Read.list3
        @ (Proxy t_a5brZ)
        ((Data.Proxy.$fReadProxy2 @ k_a5brY @ t_a5brZ)
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Proxy
                                   t_a5brZ>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Proxy t_a5brZ>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Proxy t_a5brZ -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Proxy t_a5brZ) :: *)))

-- RHS size: {terms: 8, types: 18, coercions: 13, joins: 0/0}
Data.Proxy.$fReadProxy_$creadsPrec
  :: forall k (t :: k). Int -> ReadS (Proxy t)
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ k_a5brY)
                 (@ (t_a5brZ :: k_a5brY))
                 (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (Proxy t_a5brZ)
                   (GHC.Read.list3
                      @ (Proxy t_a5brZ)
                      ((Data.Proxy.$fReadProxy2 @ k_a5brY @ t_a5brZ)
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Proxy
                                                 t_a5brZ>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <Proxy t_a5brZ>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Proxy t_a5brZ -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                         (Proxy t_a5brZ) :: *)))
                      n_a3tmE
                      @ (Proxy t_a5brZ)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (Proxy t_a5brZ)))}]
Data.Proxy.$fReadProxy_$creadsPrec
  = \ (@ k_a5brY) (@ (t_a5brZ :: k_a5brY)) (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (Proxy t_a5brZ)
        (GHC.Read.list3
           @ (Proxy t_a5brZ)
           ((Data.Proxy.$fReadProxy2 @ k_a5brY @ t_a5brZ)
            `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <Proxy
                                      t_a5brZ>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                              <Proxy t_a5brZ>_R)
                    :: (Text.ParserCombinators.ReadPrec.Prec
                        -> forall b.
                           (Proxy t_a5brZ -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                       ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                              (Proxy t_a5brZ) :: *)))
           n_a3tmE
           @ (Proxy t_a5brZ)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (Proxy t_a5brZ)))

-- RHS size: {terms: 4, types: 8, coercions: 13, joins: 0/0}
Data.Proxy.$fReadProxy_$creadListPrec
  :: forall k (t :: k).
     Text.ParserCombinators.ReadPrec.ReadPrec [Proxy t]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
Data.Proxy.$fReadProxy_$creadListPrec
  = \ (@ k_a5brY) (@ (t_a5brZ :: k_a5brY)) ->
      list
        @ (Proxy t_a5brZ)
        ((Data.Proxy.$fReadProxy1 @ k_a5brY @ t_a5brZ)
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Proxy
                                   t_a5brZ>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Proxy t_a5brZ>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Proxy t_a5brZ -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Proxy t_a5brZ) :: *)))

-- RHS size: {terms: 5, types: 13, coercions: 10, joins: 0/0}
Data.Proxy.$fReadProxy5
  :: forall k (t :: k). Text.ParserCombinators.ReadP.P [Proxy t]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
Data.Proxy.$fReadProxy5
  = \ (@ k_a5brY) (@ (t_a5brZ :: k_a5brY)) ->
      ((((Data.Proxy.$fReadProxy_$creadListPrec @ k_a5brY @ t_a5brZ)
         `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                     <[Proxy t_a5brZ]>_R
                 :: (Text.ParserCombinators.ReadPrec.ReadPrec [Proxy t_a5brZ] :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.Prec
                         -> Text.ParserCombinators.ReadP.ReadP [Proxy t_a5brZ] :: *)))
          GHC.Read.$fRead()7)
       `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Proxy t_a5brZ]>_R
               :: (Text.ParserCombinators.ReadP.ReadP [Proxy t_a5brZ] :: *)
                  ~R# (forall b.
                       ([Proxy t_a5brZ] -> Text.ParserCombinators.ReadP.P b)
                       -> Text.ParserCombinators.ReadP.P b :: *)))
        @ [Proxy t_a5brZ]
        (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
           @ [Proxy t_a5brZ])

-- RHS size: {terms: 4, types: 9, coercions: 0, joins: 0/0}
Data.Proxy.$fReadProxy_$creadList
  :: forall k (t :: k). ReadS [Proxy t]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Data.Proxy.$fReadProxy_$creadList
  = \ (@ k_a5brY) (@ (t_a5brZ :: k_a5brY)) ->
      Text.ParserCombinators.ReadP.run
        @ [Proxy t_a5brZ] (Data.Proxy.$fReadProxy5 @ k_a5brY @ t_a5brZ)

-- RHS size: {terms: 7, types: 14, coercions: 13, joins: 0/0}
Data.Proxy.$fReadProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (t :: k). Read (Proxy t)
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ (@ k_a5bpb) (@ (t_a5bp1 :: k_a5bpb)) ->
       GHC.Read.C:Read TYPE: Proxy t_a5bp1
                       Data.Proxy.$fReadProxy_$creadsPrec @ k_a5bpb @ t_a5bp1
                       Data.Proxy.$fReadProxy_$creadList @ k_a5bpb @ t_a5bp1
                       (Data.Proxy.$fReadProxy1 @ k_a5bpb @ t_a5bp1)
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Proxy
                                                 t_a5bp1>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <Proxy t_a5bp1>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Proxy t_a5bp1 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                                         (Proxy t_a5bp1) :: *))
                       Data.Proxy.$fReadProxy_$creadListPrec @ k_a5bpb @ t_a5bp1]
Data.Proxy.$fReadProxy
  = \ (@ k_a5brY) (@ (t_a5brZ :: k_a5brY)) ->
      GHC.Read.C:Read
        @ (Proxy t_a5brZ)
        (Data.Proxy.$fReadProxy_$creadsPrec @ k_a5brY @ t_a5brZ)
        (Data.Proxy.$fReadProxy_$creadList @ k_a5brY @ t_a5brZ)
        ((Data.Proxy.$fReadProxy1 @ k_a5brY @ t_a5brZ)
         `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Proxy
                                   t_a5brZ>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Proxy t_a5brZ>_R)
                 :: (Text.ParserCombinators.ReadPrec.Prec
                     -> forall b.
                        (Proxy t_a5brZ -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (Text.ParserCombinators.ReadPrec.ReadPrec
                           (Proxy t_a5brZ) :: *)))
        (Data.Proxy.$fReadProxy_$creadListPrec @ k_a5brY @ t_a5brZ)

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
Data.Proxy.$fBoundedProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (t :: k). Bounded (Proxy t)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ k_a5bpb) (@ (t_a5bp1 :: k_a5bpb)) ->
       GHC.Enum.C:Bounded TYPE: Proxy t_a5bp1
                          Data.Proxy.Proxy @ k_a5bpb @ t_a5bp1
                          Data.Proxy.Proxy @ k_a5bpb @ t_a5bp1]
Data.Proxy.$fBoundedProxy
  = \ (@ k_a5brI) (@ (t_a5brJ :: k_a5brI)) ->
      GHC.Enum.C:Bounded
        @ (Proxy t_a5brJ)
        (Data.Proxy.Proxy @ k_a5brI @ t_a5brJ)
        (Data.Proxy.Proxy @ k_a5brI @ t_a5brJ)

-- RHS size: {terms: 3, types: 9, coercions: 0, joins: 0/0}
asProxyTypeOf [InlPrag=INLINE (sat-args=0)]
  :: forall a (proxy :: * -> *). a -> proxy a -> a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ a_a5brD) (@ (proxy_a5brE :: * -> *)) ->
                 const @ a_a5brD @ (proxy_a5brE a_a5brD)}]
asProxyTypeOf
  = \ (@ a_a5brD) (@ (proxy_a5brE :: * -> *)) ->
      const @ a_a5brD @ (proxy_a5brE a_a5brD)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Proxy.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Proxy.$trModule3 = GHC.Types.TrNameS Data.Proxy.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Data.Proxy.$trModule2 = "Data.Proxy"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Proxy.$trModule1 = GHC.Types.TrNameS Data.Proxy.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Data.Proxy.$trModule
  = GHC.Types.Module Data.Proxy.$trModule3 Data.Proxy.$trModule1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_r5bEF :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep_r5bEF = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$tcProxy1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.Proxy.$tcProxy1
  = GHC.Types.KindRepFun $krep_r5bEF GHC.Types.krep$*

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep1_r5bEG :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep1_r5bEG = GHC.Types.KindRepVar 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$tcProxy2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Proxy.$tcProxy2 = GHC.Types.TrNameS Data.Proxy.$fReadProxy4

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$tcProxy :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Proxy.$tcProxy
  = GHC.Types.TyCon
      11117694004322800938##
      2653577047990140727##
      Data.Proxy.$trModule
      Data.Proxy.$tcProxy2
      1#
      Data.Proxy.$tcProxy1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep2_r5bEH :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep2_r5bEH
  = GHC.Types.: @ KindRep $krep1_r5bEG (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_r5bEI :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep3_r5bEI = GHC.Types.: @ KindRep $krep_r5bEF $krep2_r5bEH

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$tc'Proxy1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
Data.Proxy.$tc'Proxy1
  = GHC.Types.KindRepTyConApp Data.Proxy.$tcProxy $krep3_r5bEI

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$tc'Proxy3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Proxy.$tc'Proxy3 = "'Proxy"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$tc'Proxy2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Proxy.$tc'Proxy2 = GHC.Types.TrNameS Data.Proxy.$tc'Proxy3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$tc'Proxy :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Proxy.$tc'Proxy
  = GHC.Types.TyCon
      14415442874167749476##
      5236148037739324872##
      Data.Proxy.$trModule
      Data.Proxy.$tc'Proxy2
      2#
      Data.Proxy.$tc'Proxy1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$tcKProxy2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Proxy.$tcKProxy2 = "KProxy"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$tcKProxy1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Proxy.$tcKProxy1 = GHC.Types.TrNameS Data.Proxy.$tcKProxy2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$tcKProxy :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Proxy.$tcKProxy
  = GHC.Types.TyCon
      8448499740867508124##
      2482783599294208243##
      Data.Proxy.$trModule
      Data.Proxy.$tcKProxy1
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep4_r5bEJ :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep4_r5bEJ
  = GHC.Types.: @ KindRep $krep_r5bEF (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$tc'KProxy1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
Data.Proxy.$tc'KProxy1
  = GHC.Types.KindRepTyConApp Data.Proxy.$tcKProxy $krep4_r5bEJ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$tc'KProxy3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Data.Proxy.$tc'KProxy3 = "'KProxy"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$tc'KProxy2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Proxy.$tc'KProxy2 = GHC.Types.TrNameS Data.Proxy.$tc'KProxy3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Proxy.$tc'KProxy :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Proxy.$tc'KProxy
  = GHC.Types.TyCon
      13347977177506077081##
      15425068275281601281##
      Data.Proxy.$trModule
      Data.Proxy.$tc'KProxy2
      1#
      Data.Proxy.$tc'KProxy1


