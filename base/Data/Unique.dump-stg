
==================== Pre unarise: ====================
2018-03-16 16:07:30.205928852 UTC

Data.Unique.$fEqUnique [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Data.Unique.Unique
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Integer.Type.eqInteger
                                     GHC.Integer.Type.neqInteger];

Data.Unique.$fOrdUnique [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord Data.Unique.Unique
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Data.Unique.$fEqUnique
                                      GHC.Integer.Type.compareInteger
                                      GHC.Integer.Type.ltInteger
                                      GHC.Integer.Type.leInteger
                                      GHC.Integer.Type.gtInteger
                                      GHC.Integer.Type.geInteger
                                      GHC.Integer.Type.$fOrdInteger_$cmax
                                      GHC.Integer.Type.$fOrdInteger_$cmin];

lvl_rcBip :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

lvl1_rcBiq
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IORef.IORef GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_scBiu]
        case noDuplicate# [s_scBiu] of s'_scBiv {
          __DEFAULT ->
              case newMutVar# [lvl_rcBip s'_scBiv] of {
                (#,#) ipv_scBix [Occ=Once] ipv1_scBiy [Occ=Once] ->
                    let {
                      sat_scBiz [Occ=Once] :: GHC.IORef.IORef GHC.Integer.Type.Integer
                      [LclId] =
                          CCCS GHC.STRef.STRef! [ipv1_scBiy];
                    } in  (#,#) [ipv_scBix sat_scBiz];
              };
        };

Data.Unique.uniqSource [InlPrag=NOINLINE]
  :: GHC.IORef.IORef GHC.Integer.Type.Integer
[GblId] =
    [] \u []
        case lvl1_rcBiq GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_scBiC [Occ=Once] -> ipv1_scBiC;
        };

Data.Unique.hashUnique :: Data.Unique.Unique -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_scBiD]
        case GHC.Integer.Type.hashInteger ds_scBiD of wild_scBiE {
          __DEFAULT -> GHC.Types.I# [wild_scBiE];
        };

Data.Unique.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Unique.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Unique.$trModule4];

Data.Unique.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Unique"#;

Data.Unique.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Unique.$trModule2];

Data.Unique.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Unique.$trModule3
                                     Data.Unique.$trModule1];

$krep_rcBir :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

Data.Unique.$tcUnique2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Unique"#;

Data.Unique.$tcUnique1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Unique.$tcUnique2];

Data.Unique.$tcUnique :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9376197555697821408##
                                    12289580968443169787##
                                    Data.Unique.$trModule
                                    Data.Unique.$tcUnique1
                                    0#
                                    GHC.Types.krep$*];

$krep1_rcBis :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Unique.$tcUnique
                                              GHC.Types.[]];

Data.Unique.$tc'Unique1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rcBir $krep1_rcBis];

Data.Unique.$tc'Unique3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Unique"#;

Data.Unique.$tc'Unique2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Unique.$tc'Unique3];

Data.Unique.$tc'Unique :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6673795421757133892##
                                    3923002115329816747##
                                    Data.Unique.$trModule
                                    Data.Unique.$tc'Unique2
                                    0#
                                    Data.Unique.$tc'Unique1];

sat_scBiF :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_scBiG :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scBiF GHC.Types.[]];

Data.Unique.newUnique3 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_scBiG;

Data.Unique.newUnique2
  :: GHC.Integer.Type.Integer
     -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
[GblId, Arity=1, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [a1_scBiH]
        case
            GHC.Integer.Type.plusInteger a1_scBiH Data.Unique.newUnique3
        of
        a'1_scBiI
        { __DEFAULT -> (,) [a'1_scBiI a'1_scBiI];
        };

Data.Unique.newUnique1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Unique.Unique #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_scBiJ]
        case Data.Unique.uniqSource of {
          GHC.STRef.STRef r#_scBiL [Occ=Once] ->
              case
                  atomicModifyMutVar# [r#_scBiL Data.Unique.newUnique2 s_scBiJ]
              of
              { (#,#) ipv_scBiN [Occ=Once] ipv1_scBiO [Occ=Once] ->
                    case ipv1_scBiO of b1_scBiP { __DEFAULT -> ds1_scBiM; };
              };
        };

Data.Unique.newUnique :: GHC.Types.IO Data.Unique.Unique
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] Data.Unique.newUnique1 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:07:30.2085329 UTC

Data.Unique.$fEqUnique [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Data.Unique.Unique
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Integer.Type.eqInteger
                                     GHC.Integer.Type.neqInteger];

Data.Unique.$fOrdUnique [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord Data.Unique.Unique
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Data.Unique.$fEqUnique
                                      GHC.Integer.Type.compareInteger
                                      GHC.Integer.Type.ltInteger
                                      GHC.Integer.Type.leInteger
                                      GHC.Integer.Type.gtInteger
                                      GHC.Integer.Type.geInteger
                                      GHC.Integer.Type.$fOrdInteger_$cmax
                                      GHC.Integer.Type.$fOrdInteger_$cmin];

lvl_rcBip :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

lvl1_rcBiq
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IORef.IORef GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_scBiv {
          (##) ->
              case newMutVar# [lvl_rcBip GHC.Prim.void#] of {
                Unit# ipv1_scBiy [Occ=Once] ->
                    let {
                      sat_scBiz [Occ=Once] :: GHC.IORef.IORef GHC.Integer.Type.Integer
                      [LclId] =
                          CCCS GHC.STRef.STRef! [ipv1_scBiy];
                    } in  Unit# [sat_scBiz];
              };
        };

Data.Unique.uniqSource [InlPrag=NOINLINE]
  :: GHC.IORef.IORef GHC.Integer.Type.Integer
[GblId] =
    [] \u []
        case lvl1_rcBiq GHC.Prim.realWorld# of {
          Unit# ipv1_scBiC [Occ=Once] -> ipv1_scBiC;
        };

Data.Unique.hashUnique :: Data.Unique.Unique -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_scBiD]
        case GHC.Integer.Type.hashInteger ds_scBiD of wild_scBiE {
          __DEFAULT -> GHC.Types.I# [wild_scBiE];
        };

Data.Unique.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Unique.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Unique.$trModule4];

Data.Unique.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Unique"#;

Data.Unique.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Unique.$trModule2];

Data.Unique.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Unique.$trModule3
                                     Data.Unique.$trModule1];

$krep_rcBir :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

Data.Unique.$tcUnique2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Unique"#;

Data.Unique.$tcUnique1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Unique.$tcUnique2];

Data.Unique.$tcUnique :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9376197555697821408##
                                    12289580968443169787##
                                    Data.Unique.$trModule
                                    Data.Unique.$tcUnique1
                                    0#
                                    GHC.Types.krep$*];

$krep1_rcBis :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Unique.$tcUnique
                                              GHC.Types.[]];

Data.Unique.$tc'Unique1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rcBir $krep1_rcBis];

Data.Unique.$tc'Unique3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Unique"#;

Data.Unique.$tc'Unique2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Unique.$tc'Unique3];

Data.Unique.$tc'Unique :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6673795421757133892##
                                    3923002115329816747##
                                    Data.Unique.$trModule
                                    Data.Unique.$tc'Unique2
                                    0#
                                    Data.Unique.$tc'Unique1];

sat_scBiF :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_scBiG :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scBiF GHC.Types.[]];

Data.Unique.newUnique3 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_scBiG;

Data.Unique.newUnique2
  :: GHC.Integer.Type.Integer
     -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
[GblId, Arity=1, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [a1_scBiH]
        case
            GHC.Integer.Type.plusInteger a1_scBiH Data.Unique.newUnique3
        of
        a'1_scBiI
        { __DEFAULT -> (,) [a'1_scBiI a'1_scBiI];
        };

Data.Unique.newUnique1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Unique.Unique #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case Data.Unique.uniqSource of {
          GHC.STRef.STRef r#_scBiL [Occ=Once] ->
              case
                  atomicModifyMutVar# [r#_scBiL
                                       Data.Unique.newUnique2
                                       GHC.Prim.void#]
              of
              { Unit# ipv1_scBiO [Occ=Once] ->
                    case ipv1_scBiO of b1_scBiP { __DEFAULT -> Unit# [ipv1_scBiO]; };
              };
        };

Data.Unique.newUnique :: GHC.Types.IO Data.Unique.Unique
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Data.Unique.newUnique1 GHC.Prim.void#;


==================== Pre unarise: ====================
2018-03-16 16:07:30.42374314 UTC

Data.Unique.$fEqUnique [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Data.Unique.Unique
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Integer.Type.eqInteger
                                     GHC.Integer.Type.neqInteger];

Data.Unique.$fOrdUnique [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord Data.Unique.Unique
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Data.Unique.$fEqUnique
                                      GHC.Integer.Type.compareInteger
                                      GHC.Integer.Type.ltInteger
                                      GHC.Integer.Type.leInteger
                                      GHC.Integer.Type.gtInteger
                                      GHC.Integer.Type.geInteger
                                      GHC.Integer.Type.$fOrdInteger_$cmax
                                      GHC.Integer.Type.$fOrdInteger_$cmin];

lvl_rcBip :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

lvl1_rcBiq
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IORef.IORef GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_scBpA]
        case noDuplicate# [s_scBpA] of s'_scBpB {
          __DEFAULT ->
              case newMutVar# [lvl_rcBip s'_scBpB] of {
                (#,#) ipv_scBpD [Occ=Once] ipv1_scBpE [Occ=Once] ->
                    let {
                      sat_scBpF [Occ=Once] :: GHC.IORef.IORef GHC.Integer.Type.Integer
                      [LclId] =
                          CCCS GHC.STRef.STRef! [ipv1_scBpE];
                    } in  (#,#) [ipv_scBpD sat_scBpF];
              };
        };

Data.Unique.uniqSource [InlPrag=NOINLINE]
  :: GHC.IORef.IORef GHC.Integer.Type.Integer
[GblId] =
    [] \u []
        case lvl1_rcBiq GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_scBpI [Occ=Once] -> ipv1_scBpI;
        };

Data.Unique.hashUnique :: Data.Unique.Unique -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_scBpJ]
        case GHC.Integer.Type.hashInteger ds_scBpJ of wild_scBpK {
          __DEFAULT -> GHC.Types.I# [wild_scBpK];
        };

Data.Unique.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Unique.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Unique.$trModule4];

Data.Unique.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Unique"#;

Data.Unique.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Unique.$trModule2];

Data.Unique.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Unique.$trModule3
                                     Data.Unique.$trModule1];

$krep_rcBir :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

Data.Unique.$tcUnique2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Unique"#;

Data.Unique.$tcUnique1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Unique.$tcUnique2];

Data.Unique.$tcUnique :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9376197555697821408##
                                    12289580968443169787##
                                    Data.Unique.$trModule
                                    Data.Unique.$tcUnique1
                                    0#
                                    GHC.Types.krep$*];

$krep1_rcBis :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Unique.$tcUnique
                                              GHC.Types.[]];

Data.Unique.$tc'Unique1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rcBir $krep1_rcBis];

Data.Unique.$tc'Unique3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Unique"#;

Data.Unique.$tc'Unique2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Unique.$tc'Unique3];

Data.Unique.$tc'Unique :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6673795421757133892##
                                    3923002115329816747##
                                    Data.Unique.$trModule
                                    Data.Unique.$tc'Unique2
                                    0#
                                    Data.Unique.$tc'Unique1];

sat_scBpL :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_scBpM :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scBpL GHC.Types.[]];

Data.Unique.newUnique3 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_scBpM;

Data.Unique.newUnique2
  :: GHC.Integer.Type.Integer
     -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
[GblId, Arity=1, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [a1_scBpN]
        case
            GHC.Integer.Type.plusInteger a1_scBpN Data.Unique.newUnique3
        of
        a'1_scBpO
        { __DEFAULT -> (,) [a'1_scBpO a'1_scBpO];
        };

Data.Unique.newUnique1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Unique.Unique #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_scBpP]
        case Data.Unique.uniqSource of {
          GHC.STRef.STRef r#_scBpR [Occ=Once] ->
              case
                  atomicModifyMutVar# [r#_scBpR Data.Unique.newUnique2 s_scBpP]
              of
              { (#,#) ipv_scBpT [Occ=Once] ipv1_scBpU [Occ=Once] ->
                    case ipv1_scBpU of b1_scBpV { __DEFAULT -> ds1_scBpS; };
              };
        };

Data.Unique.newUnique :: GHC.Types.IO Data.Unique.Unique
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] Data.Unique.newUnique1 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:07:30.426660236 UTC

Data.Unique.$fEqUnique [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Data.Unique.Unique
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Integer.Type.eqInteger
                                     GHC.Integer.Type.neqInteger];

Data.Unique.$fOrdUnique [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord Data.Unique.Unique
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Data.Unique.$fEqUnique
                                      GHC.Integer.Type.compareInteger
                                      GHC.Integer.Type.ltInteger
                                      GHC.Integer.Type.leInteger
                                      GHC.Integer.Type.gtInteger
                                      GHC.Integer.Type.geInteger
                                      GHC.Integer.Type.$fOrdInteger_$cmax
                                      GHC.Integer.Type.$fOrdInteger_$cmin];

lvl_rcBip :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

lvl1_rcBiq
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IORef.IORef GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_scBpB {
          (##) ->
              case newMutVar# [lvl_rcBip GHC.Prim.void#] of {
                Unit# ipv1_scBpE [Occ=Once] ->
                    let {
                      sat_scBpF [Occ=Once] :: GHC.IORef.IORef GHC.Integer.Type.Integer
                      [LclId] =
                          CCCS GHC.STRef.STRef! [ipv1_scBpE];
                    } in  Unit# [sat_scBpF];
              };
        };

Data.Unique.uniqSource [InlPrag=NOINLINE]
  :: GHC.IORef.IORef GHC.Integer.Type.Integer
[GblId] =
    [] \u []
        case lvl1_rcBiq GHC.Prim.realWorld# of {
          Unit# ipv1_scBpI [Occ=Once] -> ipv1_scBpI;
        };

Data.Unique.hashUnique :: Data.Unique.Unique -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_scBpJ]
        case GHC.Integer.Type.hashInteger ds_scBpJ of wild_scBpK {
          __DEFAULT -> GHC.Types.I# [wild_scBpK];
        };

Data.Unique.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Unique.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Unique.$trModule4];

Data.Unique.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Unique"#;

Data.Unique.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Unique.$trModule2];

Data.Unique.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Unique.$trModule3
                                     Data.Unique.$trModule1];

$krep_rcBir :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

Data.Unique.$tcUnique2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Unique"#;

Data.Unique.$tcUnique1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Unique.$tcUnique2];

Data.Unique.$tcUnique :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9376197555697821408##
                                    12289580968443169787##
                                    Data.Unique.$trModule
                                    Data.Unique.$tcUnique1
                                    0#
                                    GHC.Types.krep$*];

$krep1_rcBis :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Unique.$tcUnique
                                              GHC.Types.[]];

Data.Unique.$tc'Unique1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rcBir $krep1_rcBis];

Data.Unique.$tc'Unique3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Unique"#;

Data.Unique.$tc'Unique2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Unique.$tc'Unique3];

Data.Unique.$tc'Unique :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6673795421757133892##
                                    3923002115329816747##
                                    Data.Unique.$trModule
                                    Data.Unique.$tc'Unique2
                                    0#
                                    Data.Unique.$tc'Unique1];

sat_scBpL :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_scBpM :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scBpL GHC.Types.[]];

Data.Unique.newUnique3 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_scBpM;

Data.Unique.newUnique2
  :: GHC.Integer.Type.Integer
     -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
[GblId, Arity=1, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [a1_scBpN]
        case
            GHC.Integer.Type.plusInteger a1_scBpN Data.Unique.newUnique3
        of
        a'1_scBpO
        { __DEFAULT -> (,) [a'1_scBpO a'1_scBpO];
        };

Data.Unique.newUnique1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Unique.Unique #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case Data.Unique.uniqSource of {
          GHC.STRef.STRef r#_scBpR [Occ=Once] ->
              case
                  atomicModifyMutVar# [r#_scBpR
                                       Data.Unique.newUnique2
                                       GHC.Prim.void#]
              of
              { Unit# ipv1_scBpU [Occ=Once] ->
                    case ipv1_scBpU of b1_scBpV { __DEFAULT -> Unit# [ipv1_scBpU]; };
              };
        };

Data.Unique.newUnique :: GHC.Types.IO Data.Unique.Unique
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Data.Unique.newUnique1 GHC.Prim.void#;

