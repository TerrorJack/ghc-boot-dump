
==================== Pre unarise: ====================
2018-03-16 16:00:10.395488521 UTC

Data.Ord.$fFunctorDown2 :: forall a b. (a -> b) -> a -> b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [v_s5cDp] v_s5cDp;

Data.Ord.$fFunctorDown1 :: forall b a. a -> b -> a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [x_s5cDq ds_s5cDr] x_s5cDq;

Data.Ord.$fFunctorDown [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Functor Data.Ord.Down
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Functor! [Data.Ord.$fFunctorDown2
                                       Data.Ord.$fFunctorDown1];

Data.Ord.$fApplicativeDown3
  :: forall a b. Data.Ord.Down (a -> b) -> Data.Ord.Down (a -> b)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [v_s5cDs] v_s5cDs;

Data.Ord.$fApplicativeDown4 :: forall a. a -> a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [v_s5cDt] v_s5cDt;

Data.Ord.$fApplicativeDown2
  :: forall a c b. (a -> b -> c) -> Data.Ord.Down a -> b -> c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [f1_s5cDu x_s5cDv] f1_s5cDu x_s5cDv;

Data.Ord.$fApplicativeDown_$c*>
  :: forall a b.
     Data.Ord.Down a -> Data.Ord.Down b -> Data.Ord.Down b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a1_s5cDw a2_s5cDx] a2_s5cDx;

Data.Ord.$fApplicativeDown1
  :: forall b a. Data.Ord.Down a -> b -> Data.Ord.Down a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [x_s5cDy ds_s5cDz] x_s5cDy;

Data.Ord.$fApplicativeDown [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Applicative Data.Ord.Down
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Applicative! [Data.Ord.$fFunctorDown
                                           Data.Ord.$fApplicativeDown4
                                           Data.Ord.$fApplicativeDown3
                                           Data.Ord.$fApplicativeDown2
                                           Data.Ord.$fApplicativeDown_$c*>
                                           Data.Ord.$fApplicativeDown1];

Data.Ord.$fMonadDown_$c>>=
  :: forall a b.
     Data.Ord.Down a -> (a -> Data.Ord.Down b) -> Data.Ord.Down b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s5cDA k_s5cDB] k_s5cDB ds_s5cDA;

Data.Ord.$fMonadDown_$c>> [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     Data.Ord.Down a -> Data.Ord.Down b -> Data.Ord.Down b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Data.Ord.$fApplicativeDown_$c*> eta_B2 eta_B1;

lvl_r5cDk :: forall a. [GHC.Types.Char] -> Data.Ord.Down a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_s5cDC] GHC.Err.errorWithoutStackTrace eta_s5cDC;

Data.Ord.$fMonadDown [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Monad Data.Ord.Down
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Monad! [Data.Ord.$fApplicativeDown
                                     Data.Ord.$fMonadDown_$c>>=
                                     Data.Ord.$fMonadDown_$c>>
                                     Data.Ord.$fApplicativeDown4
                                     lvl_r5cDk];

Data.Ord.$fSemigroupDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a.
     GHC.Base.Semigroup a =>
     GHC.Base.Semigroup (Data.Ord.Down a)
[GblId[DFunId], Arity=1, Caf=NoCafRefs, Str=<L,U(1*U,1*U,1*U)>m] =
    [] \r [$dSemigroup_s5cDD]
        let {
          sat_s5cDG [Occ=Once]
            :: forall b.
               GHC.Real.Integral b =>
               b -> Data.Ord.Down a_a5crv -> Data.Ord.Down a_a5crv
          [LclId] =
              [$dSemigroup_s5cDD] \u [] GHC.Base.stimes $dSemigroup_s5cDD; } in
        let {
          sat_s5cDF [Occ=Once]
            :: GHC.Base.NonEmpty (Data.Ord.Down a_a5crv)
               -> Data.Ord.Down a_a5crv
          [LclId] =
              [$dSemigroup_s5cDD] \u [] GHC.Base.sconcat $dSemigroup_s5cDD; } in
        let {
          sat_s5cDE [Occ=Once]
            :: Data.Ord.Down a_a5crv
               -> Data.Ord.Down a_a5crv -> Data.Ord.Down a_a5crv
          [LclId] =
              [$dSemigroup_s5cDD] \u [] GHC.Base.<> $dSemigroup_s5cDD;
        } in  GHC.Base.C:Semigroup [sat_s5cDE sat_s5cDF sat_s5cDG];

Data.Ord.$fMonoidDown_$cp1Monoid
  :: forall a.
     GHC.Base.Monoid a =>
     GHC.Base.Semigroup (Data.Ord.Down a)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U,1*U,1*U),A,A,A)>m,
 Unf=OtherCon []] =
    [] \r [$dMonoid_s5cDH]
        let {
          sat_s5cDI [Occ=Once, Dmd=<L,U(1*U,1*U,1*U)>]
            :: GHC.Base.Semigroup a_a5csr
          [LclId] =
              [$dMonoid_s5cDH] \u [] GHC.Base.$p1Monoid $dMonoid_s5cDH;
        } in  Data.Ord.$fSemigroupDown sat_s5cDI;

Data.Ord.$fMonoidDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Base.Monoid a => GHC.Base.Monoid (Data.Ord.Down a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U,1*U,1*U),1*U,1*U,1*U)>m] =
    [] \r [$dMonoid_s5cDJ]
        let {
          sat_s5cDN [Occ=Once]
            :: [Data.Ord.Down a_a5csr] -> Data.Ord.Down a_a5csr
          [LclId] =
              [$dMonoid_s5cDJ] \u [] GHC.Base.mconcat $dMonoid_s5cDJ; } in
        let {
          sat_s5cDM [Occ=Once]
            :: Data.Ord.Down a_a5csr
               -> Data.Ord.Down a_a5csr -> Data.Ord.Down a_a5csr
          [LclId] =
              [$dMonoid_s5cDJ] \u [] GHC.Base.mappend $dMonoid_s5cDJ; } in
        let {
          sat_s5cDL [Occ=Once] :: Data.Ord.Down a_a5csr
          [LclId] =
              [$dMonoid_s5cDJ] \u [] GHC.Base.mempty $dMonoid_s5cDJ; } in
        let {
          sat_s5cDK [Occ=Once] :: GHC.Base.Semigroup (Data.Ord.Down a_a5csr)
          [LclId] =
              [$dMonoid_s5cDJ] \u []
                  Data.Ord.$fMonoidDown_$cp1Monoid $dMonoid_s5cDJ;
        } in  GHC.Base.C:Monoid [sat_s5cDK sat_s5cDL sat_s5cDM sat_s5cDN];

Data.Ord.$fNumDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Num.Num a => GHC.Num.Num (Data.Ord.Down a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m] =
    [] \r [$dNum_s5cDO]
        let {
          sat_s5cDV [Occ=Once]
            :: GHC.Integer.Type.Integer -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5cDO] \u [] GHC.Num.fromInteger $dNum_s5cDO; } in
        let {
          sat_s5cDU [Occ=Once]
            :: Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5cDO] \u [] GHC.Num.signum $dNum_s5cDO; } in
        let {
          sat_s5cDT [Occ=Once]
            :: Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5cDO] \u [] GHC.Num.abs $dNum_s5cDO; } in
        let {
          sat_s5cDS [Occ=Once]
            :: Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5cDO] \u [] GHC.Num.negate $dNum_s5cDO; } in
        let {
          sat_s5cDR [Occ=Once]
            :: Data.Ord.Down a_a5cq0
               -> Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5cDO] \u [] GHC.Num.* $dNum_s5cDO; } in
        let {
          sat_s5cDQ [Occ=Once]
            :: Data.Ord.Down a_a5cq0
               -> Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5cDO] \u [] GHC.Num.- $dNum_s5cDO; } in
        let {
          sat_s5cDP [Occ=Once]
            :: Data.Ord.Down a_a5cq0
               -> Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5cDO] \u [] GHC.Num.+ $dNum_s5cDO;
        } in 
          GHC.Num.C:Num [sat_s5cDP
                         sat_s5cDQ
                         sat_s5cDR
                         sat_s5cDS
                         sat_s5cDT
                         sat_s5cDU
                         sat_s5cDV];

Data.Ord.$fReadDown4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Down"#;

Data.Ord.$fReadDown3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Ord.$fReadDown4;

Data.Ord.$fReadDown_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [Data.Ord.$fReadDown3];

Data.Ord.$fReadDown2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

Data.Ord.$fReadDown1
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Ord.Down a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s5cDW eta_s5cDX eta1_s5cDY]
        let {
          sat_s5cEa [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (Data.Ord.Down a_a5cpk)
          [LclId] =
              [$dRead_s5cDW] \r [c_s5cDZ eta2_s5cE0]
                  case c_s5cDZ of {
                    GHC.Types.I# x_s5cE2 [Occ=Once] ->
                        case <=# [x_s5cE2 10#] of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          1# ->
                              let {
                                sat_s5cE7 [Occ=Once]
                                  :: () -> Text.ParserCombinators.ReadP.P b1_X3ngt
                                [LclId] =
                                    [$dRead_s5cDW eta2_s5cE0] \r [a1_s5cE4]
                                        let {
                                          sat_s5cE6 [Occ=Once]
                                            :: a_a5cpk -> Text.ParserCombinators.ReadP.P b1_X3ngt
                                          [LclId] =
                                              [eta2_s5cE0] \r [a2_s5cE5] eta2_s5cE0 a2_s5cE5;
                                        } in 
                                          GHC.Read.readPrec
                                              $dRead_s5cDW Data.Ord.$fReadDown2 sat_s5cE6;
                              } in 
                                case
                                    Text.Read.Lex.$wexpect Data.Ord.$fReadDown_lexeme sat_s5cE7
                                of
                                { Unit# ww1_s5cE9 [Occ=Once] ->
                                      Text.ParserCombinators.ReadP.Look [ww1_s5cE9];
                                };
                        };
                  };
        } in  GHC.Read.list3 sat_s5cEa eta_s5cDX eta1_s5cDY;

Data.Ord.$fReadDown_$creadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (Data.Ord.Down a)
[GblId, Arity=2, Str=<L,U(A,A,C(C1(U)),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dRead_s5cEb n_s5cEc]
        let {
          sat_s5cEd [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (Data.Ord.Down a_X5cr8)
          [LclId] =
              [$dRead_s5cEb n_s5cEc] \u []
                  Data.Ord.$fReadDown1
                      $dRead_s5cEb
                      n_s5cEc
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s5cEd;

Data.Ord.$fReadDown_$creadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [Data.Ord.Down a]
[GblId, Arity=1, Str=<L,U(A,A,C(C1(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s5cEe]
        let {
          sat_s5cEf [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (Data.Ord.Down a_X5cr6)
          [LclId] =
              [$dRead_s5cEe] \r [eta_B2 eta_B1]
                  Data.Ord.$fReadDown1 $dRead_s5cEe eta_B2 eta_B1;
        } in  GHC.Read.list sat_s5cEf;

Data.Ord.$fReadDown_$creadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [Data.Ord.Down a]
[GblId, Arity=1, Str=<L,U(A,A,C(C1(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s5cEg]
        let {
          sat_s5cEi [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [Data.Ord.Down a_X5cr7]
          [LclId] =
              [$dRead_s5cEg] \u []
                  let {
                    sat_s5cEh [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec (Data.Ord.Down a_X5cr7)
                    [LclId] =
                        [$dRead_s5cEg] \r [eta_B2 eta_B1]
                            Data.Ord.$fReadDown1 $dRead_s5cEg eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s5cEh
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s5cEi;

Data.Ord.$fReadDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Read.Read a => GHC.Read.Read (Data.Ord.Down a)
[GblId[DFunId], Arity=1, Str=<L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s5cEj]
        let {
          sat_s5cEn [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [Data.Ord.Down a_X5cr5]
          [LclId] =
              [$dRead_s5cEj] \u []
                  Data.Ord.$fReadDown_$creadListPrec $dRead_s5cEj; } in
        let {
          sat_s5cEm [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (Data.Ord.Down a_X5cr5)
          [LclId] =
              [$dRead_s5cEj] \r [eta_B2 eta_B1]
                  Data.Ord.$fReadDown1 $dRead_s5cEj eta_B2 eta_B1; } in
        let {
          sat_s5cEl [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [Data.Ord.Down a_X5cr5]
          [LclId] =
              [$dRead_s5cEj] \u []
                  Data.Ord.$fReadDown_$creadList $dRead_s5cEj; } in
        let {
          sat_s5cEk [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (Data.Ord.Down a_X5cr5)
          [LclId] =
              [$dRead_s5cEj] \r [eta_B1]
                  Data.Ord.$fReadDown_$creadsPrec $dRead_s5cEj eta_B1;
        } in  GHC.Read.C:Read [sat_s5cEk sat_s5cEl sat_s5cEm sat_s5cEn];

Data.Ord.$fShowDown3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Down "#;

Data.Ord.$fShowDown2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Ord.$fShowDown3;

Data.Ord.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Prim.Int# -> Data.Ord.Down a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s5cEo ww_s5cEp w1_s5cEq]
        let {
          g_s5cEr [Occ=OnceL*!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [w_s5cEo w1_s5cEq] \u []
                  GHC.Show.showsPrec w_s5cEo Data.Ord.$fReadDown2 w1_s5cEq;
        } in 
          case >=# [ww_s5cEp 11#] of {
            __DEFAULT ->
                let {
                  sat_s5cEv [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                  [LclId] =
                      [g_s5cEr] \r [x_s5cEt]
                          let {
                            sat_s5cEu [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                            [LclId] =
                                [g_s5cEr x_s5cEt] \s [] g_s5cEr x_s5cEt;
                          } in  GHC.Base.++ Data.Ord.$fShowDown2 sat_s5cEu;
                } in  sat_s5cEv;
            1# ->
                let {
                  sat_s5cEA [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                  [LclId] =
                      [g_s5cEr] \r [x_s5cEw]
                          let {
                            sat_s5cEz [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [g_s5cEr x_s5cEw] \u []
                                    let {
                                      sat_s5cEy [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                      [LclId] =
                                          [g_s5cEr x_s5cEw] \s []
                                              let {
                                                sat_s5cEx [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)2 x_s5cEw];
                                              } in  g_s5cEr sat_s5cEx;
                                    } in  GHC.Base.++ Data.Ord.$fShowDown2 sat_s5cEy;
                          } in  : [GHC.Show.$fShow(,)4 sat_s5cEz];
                } in  sat_s5cEA;
          };

Data.Ord.$fShowDown_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> Data.Ord.Down a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s5cEB w1_s5cEC w2_s5cED]
        case w1_s5cEC of {
          GHC.Types.I# ww1_s5cEF [Occ=Once] ->
              Data.Ord.$w$cshowsPrec w_s5cEB ww1_s5cEF w2_s5cED;
        };

Data.Ord.$fShowDown_$cshow
  :: forall a. GHC.Show.Show a => Data.Ord.Down a -> GHC.Base.String
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_s5cEG x_s5cEH]
        let {
          sat_s5cEI [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [$dShow_s5cEG x_s5cEH] \s []
                  GHC.Show.showsPrec
                      $dShow_s5cEG Data.Ord.$fReadDown2 x_s5cEH GHC.Types.[];
        } in  GHC.Base.++ Data.Ord.$fShowDown2 sat_s5cEI;

Data.Ord.$fShowDown1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Data.Ord.$fShowDown_$cshowList
  :: forall a. GHC.Show.Show a => [Data.Ord.Down a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_s5cEJ ls_s5cEK s_s5cEL]
        let {
          sat_s5cEN [Occ=Once] :: Data.Ord.Down a_a5coV -> GHC.Show.ShowS
          [LclId] =
              [$dShow_s5cEJ] \r [w_s5cEM]
                  Data.Ord.$w$cshowsPrec $dShow_s5cEJ 0# w_s5cEM;
        } in  GHC.Show.showList__ sat_s5cEN ls_s5cEK s_s5cEL;

Data.Ord.$fShowDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show (Data.Ord.Down a)
[GblId[DFunId], Arity=1, Str=<L,U(C(C1(C(U))),A,A)>m] =
    [] \r [$dShow_s5cEO]
        let {
          sat_s5cER [Occ=Once] :: [Data.Ord.Down a_a5coV] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_s5cEO] \r [eta_B2 eta_B1]
                  Data.Ord.$fShowDown_$cshowList $dShow_s5cEO eta_B2 eta_B1; } in
        let {
          sat_s5cEQ [Occ=Once] :: Data.Ord.Down a_a5coV -> GHC.Base.String
          [LclId] =
              [$dShow_s5cEO] \r [eta_B1]
                  Data.Ord.$fShowDown_$cshow $dShow_s5cEO eta_B1; } in
        let {
          sat_s5cEP [Occ=Once]
            :: GHC.Types.Int -> Data.Ord.Down a_a5coV -> GHC.Show.ShowS
          [LclId] =
              [$dShow_s5cEO] \r [eta_B2 eta_B1]
                  Data.Ord.$fShowDown_$cshowsPrec $dShow_s5cEO eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_s5cEP sat_s5cEQ sat_s5cER];

Data.Ord.$fEqDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq a => GHC.Classes.Eq (Data.Ord.Down a)
[GblId[DFunId], Arity=1, Caf=NoCafRefs, Str=<L,U(1*U,1*U)>m] =
    [] \r [$dEq_s5cES]
        let {
          sat_s5cEU [Occ=Once]
            :: Data.Ord.Down a_a5con -> Data.Ord.Down a_a5con -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5cES] \u [] GHC.Classes./= $dEq_s5cES; } in
        let {
          sat_s5cET [Occ=Once]
            :: Data.Ord.Down a_a5con -> Data.Ord.Down a_a5con -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5cES] \u [] GHC.Classes.== $dEq_s5cES;
        } in  GHC.Classes.C:Eq [sat_s5cET sat_s5cEU];

Data.Ord.$fOrdDown_$cp1Ord
  :: forall a. GHC.Classes.Ord a => GHC.Classes.Eq (Data.Ord.Down a)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U,1*U),A,A,A,A,A,A,A)>m,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5cEV]
        let {
          sat_s5cEW [Occ=Once, Dmd=<L,U(1*U,1*U)>] :: GHC.Classes.Eq a_a5cuW
          [LclId] =
              [$dOrd_s5cEV] \u [] GHC.Classes.$p1Ord $dOrd_s5cEV;
        } in  Data.Ord.$fEqDown sat_s5cEW;

Data.Ord.$fOrdDown_$c<
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5cEX x_s5cEY y_s5cEZ]
        case GHC.Classes.compare $dOrd_s5cEX y_s5cEZ x_s5cEY of {
          __DEFAULT -> GHC.Types.False [];
          GHC.Types.LT -> GHC.Types.True [];
        };

Data.Ord.$fOrdDown_$c>=
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5cF1 x_s5cF2 y_s5cF3]
        case GHC.Classes.compare $dOrd_s5cF1 y_s5cF3 x_s5cF2 of {
          __DEFAULT -> GHC.Types.True [];
          GHC.Types.LT -> GHC.Types.False [];
        };

Data.Ord.$fOrdDown_$c>
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5cF5 x_s5cF6 y_s5cF7]
        case GHC.Classes.compare $dOrd_s5cF5 y_s5cF7 x_s5cF6 of {
          __DEFAULT -> GHC.Types.False [];
          GHC.Types.GT -> GHC.Types.True [];
        };

Data.Ord.$fOrdDown_$c<=
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5cF9 x_s5cFa y_s5cFb]
        case GHC.Classes.compare $dOrd_s5cF9 y_s5cFb x_s5cFa of {
          __DEFAULT -> GHC.Types.True [];
          GHC.Types.GT -> GHC.Types.False [];
        };

Data.Ord.$fOrdDown_$cmax
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> Data.Ord.Down a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5cFd x_s5cFe y_s5cFf]
        case GHC.Classes.compare $dOrd_s5cFd y_s5cFf x_s5cFe of {
          __DEFAULT -> y_s5cFf;
          GHC.Types.GT -> x_s5cFe;
        };

Data.Ord.$fOrdDown_$cmin
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> Data.Ord.Down a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5cFh x_s5cFi y_s5cFj]
        case GHC.Classes.compare $dOrd_s5cFh y_s5cFj x_s5cFi of {
          __DEFAULT -> x_s5cFi;
          GHC.Types.GT -> y_s5cFj;
        };

Data.Ord.$fOrdDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Ord a => GHC.Classes.Ord (Data.Ord.Down a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U,1*U),C(C1(U)),A,A,A,A,A,A)>m] =
    [] \r [$dOrd_s5cFl]
        let {
          sat_s5cFv [Occ=Once]
            :: Data.Ord.Down a_a5cuW
               -> Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW
          [LclId] =
              [$dOrd_s5cFl] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$cmin $dOrd_s5cFl eta_B2 eta_B1; } in
        let {
          sat_s5cFu [Occ=Once]
            :: Data.Ord.Down a_a5cuW
               -> Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW
          [LclId] =
              [$dOrd_s5cFl] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$cmax $dOrd_s5cFl eta_B2 eta_B1; } in
        let {
          sat_s5cFt [Occ=Once]
            :: Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW -> GHC.Types.Bool
          [LclId] =
              [$dOrd_s5cFl] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$c>= $dOrd_s5cFl eta_B2 eta_B1; } in
        let {
          sat_s5cFs [Occ=Once]
            :: Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW -> GHC.Types.Bool
          [LclId] =
              [$dOrd_s5cFl] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$c> $dOrd_s5cFl eta_B2 eta_B1; } in
        let {
          sat_s5cFr [Occ=Once]
            :: Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW -> GHC.Types.Bool
          [LclId] =
              [$dOrd_s5cFl] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$c<= $dOrd_s5cFl eta_B2 eta_B1; } in
        let {
          sat_s5cFq [Occ=Once]
            :: Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW -> GHC.Types.Bool
          [LclId] =
              [$dOrd_s5cFl] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$c< $dOrd_s5cFl eta_B2 eta_B1; } in
        let {
          sat_s5cFp [Occ=Once]
            :: Data.Ord.Down a_a5cuW
               -> Data.Ord.Down a_a5cuW -> GHC.Types.Ordering
          [LclId] =
              [$dOrd_s5cFl] \r [ds_s5cFn ds1_s5cFo]
                  GHC.Classes.compare $dOrd_s5cFl ds1_s5cFo ds_s5cFn; } in
        let {
          sat_s5cFm [Occ=Once] :: GHC.Classes.Eq (Data.Ord.Down a_a5cuW)
          [LclId] =
              [$dOrd_s5cFl] \u [] Data.Ord.$fOrdDown_$cp1Ord $dOrd_s5cFl;
        } in 
          GHC.Classes.C:Ord [sat_s5cFm
                             sat_s5cFp
                             sat_s5cFq
                             sat_s5cFr
                             sat_s5cFs
                             sat_s5cFt
                             sat_s5cFu
                             sat_s5cFv];

Data.Ord.comparing
  :: forall a b.
     GHC.Classes.Ord a =>
     (b -> a) -> b -> b -> GHC.Types.Ordering
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,C(U)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5cFw p_s5cFx x_s5cFy y_s5cFz]
        let {
          sat_s5cFB [Occ=Once] :: a_a5cog
          [LclId] =
              [p_s5cFx y_s5cFz] \u [] p_s5cFx y_s5cFz; } in
        let {
          sat_s5cFA [Occ=Once] :: a_a5cog
          [LclId] =
              [p_s5cFx x_s5cFy] \u [] p_s5cFx x_s5cFy;
        } in  GHC.Classes.compare $dOrd_s5cFw sat_s5cFA sat_s5cFB;

Data.Ord.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Ord.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ord.$trModule4];

Data.Ord.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Ord"#;

Data.Ord.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ord.$trModule2];

Data.Ord.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Ord.$trModule3
                                     Data.Ord.$trModule1];

$krep_r5cDl :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

Data.Ord.$tcDown1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ord.$fReadDown4];

Data.Ord.$tcDown :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7479183817722852251##
                                    10417149520322703999##
                                    Data.Ord.$trModule
                                    Data.Ord.$tcDown1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep1_r5cDm :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5cDl GHC.Types.[]];

$krep2_r5cDn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Ord.$tcDown
                                              $krep1_r5cDm];

Data.Ord.$tc'Down1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r5cDl $krep2_r5cDn];

Data.Ord.$tc'Down3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Down"#;

Data.Ord.$tc'Down2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ord.$tc'Down3];

Data.Ord.$tc'Down :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2181324915805229541##
                                    7680134812570657793##
                                    Data.Ord.$trModule
                                    Data.Ord.$tc'Down2
                                    1#
                                    Data.Ord.$tc'Down1];


==================== STG syntax: ====================
2018-03-16 16:00:10.410671898 UTC

Data.Ord.$fFunctorDown2 :: forall a b. (a -> b) -> a -> b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [v_s5cDp] v_s5cDp;

Data.Ord.$fFunctorDown1 :: forall b a. a -> b -> a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [x_s5cDq ds_s5cDr] x_s5cDq;

Data.Ord.$fFunctorDown [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Functor Data.Ord.Down
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Functor! [Data.Ord.$fFunctorDown2
                                       Data.Ord.$fFunctorDown1];

Data.Ord.$fApplicativeDown3
  :: forall a b. Data.Ord.Down (a -> b) -> Data.Ord.Down (a -> b)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [v_s5cDs] v_s5cDs;

Data.Ord.$fApplicativeDown4 :: forall a. a -> a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [v_s5cDt] v_s5cDt;

Data.Ord.$fApplicativeDown2
  :: forall a c b. (a -> b -> c) -> Data.Ord.Down a -> b -> c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [f1_s5cDu x_s5cDv] f1_s5cDu x_s5cDv;

Data.Ord.$fApplicativeDown_$c*>
  :: forall a b.
     Data.Ord.Down a -> Data.Ord.Down b -> Data.Ord.Down b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a1_s5cDw a2_s5cDx] a2_s5cDx;

Data.Ord.$fApplicativeDown1
  :: forall b a. Data.Ord.Down a -> b -> Data.Ord.Down a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [x_s5cDy ds_s5cDz] x_s5cDy;

Data.Ord.$fApplicativeDown [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Applicative Data.Ord.Down
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Applicative! [Data.Ord.$fFunctorDown
                                           Data.Ord.$fApplicativeDown4
                                           Data.Ord.$fApplicativeDown3
                                           Data.Ord.$fApplicativeDown2
                                           Data.Ord.$fApplicativeDown_$c*>
                                           Data.Ord.$fApplicativeDown1];

Data.Ord.$fMonadDown_$c>>=
  :: forall a b.
     Data.Ord.Down a -> (a -> Data.Ord.Down b) -> Data.Ord.Down b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s5cDA k_s5cDB] k_s5cDB ds_s5cDA;

Data.Ord.$fMonadDown_$c>> [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     Data.Ord.Down a -> Data.Ord.Down b -> Data.Ord.Down b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Data.Ord.$fApplicativeDown_$c*> eta_B2 eta_B1;

lvl_r5cDk :: forall a. [GHC.Types.Char] -> Data.Ord.Down a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_s5cDC] GHC.Err.errorWithoutStackTrace eta_s5cDC;

Data.Ord.$fMonadDown [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Monad Data.Ord.Down
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Monad! [Data.Ord.$fApplicativeDown
                                     Data.Ord.$fMonadDown_$c>>=
                                     Data.Ord.$fMonadDown_$c>>
                                     Data.Ord.$fApplicativeDown4
                                     lvl_r5cDk];

Data.Ord.$fSemigroupDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a.
     GHC.Base.Semigroup a =>
     GHC.Base.Semigroup (Data.Ord.Down a)
[GblId[DFunId], Arity=1, Caf=NoCafRefs, Str=<L,U(1*U,1*U,1*U)>m] =
    [] \r [$dSemigroup_s5cDD]
        let {
          sat_s5cDG [Occ=Once]
            :: forall b.
               GHC.Real.Integral b =>
               b -> Data.Ord.Down a_a5crv -> Data.Ord.Down a_a5crv
          [LclId] =
              [$dSemigroup_s5cDD] \u [] GHC.Base.stimes $dSemigroup_s5cDD; } in
        let {
          sat_s5cDF [Occ=Once]
            :: GHC.Base.NonEmpty (Data.Ord.Down a_a5crv)
               -> Data.Ord.Down a_a5crv
          [LclId] =
              [$dSemigroup_s5cDD] \u [] GHC.Base.sconcat $dSemigroup_s5cDD; } in
        let {
          sat_s5cDE [Occ=Once]
            :: Data.Ord.Down a_a5crv
               -> Data.Ord.Down a_a5crv -> Data.Ord.Down a_a5crv
          [LclId] =
              [$dSemigroup_s5cDD] \u [] GHC.Base.<> $dSemigroup_s5cDD;
        } in  GHC.Base.C:Semigroup [sat_s5cDE sat_s5cDF sat_s5cDG];

Data.Ord.$fMonoidDown_$cp1Monoid
  :: forall a.
     GHC.Base.Monoid a =>
     GHC.Base.Semigroup (Data.Ord.Down a)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U,1*U,1*U),A,A,A)>m,
 Unf=OtherCon []] =
    [] \r [$dMonoid_s5cDH]
        let {
          sat_s5cDI [Occ=Once, Dmd=<L,U(1*U,1*U,1*U)>]
            :: GHC.Base.Semigroup a_a5csr
          [LclId] =
              [$dMonoid_s5cDH] \u [] GHC.Base.$p1Monoid $dMonoid_s5cDH;
        } in  Data.Ord.$fSemigroupDown sat_s5cDI;

Data.Ord.$fMonoidDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Base.Monoid a => GHC.Base.Monoid (Data.Ord.Down a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U,1*U,1*U),1*U,1*U,1*U)>m] =
    [] \r [$dMonoid_s5cDJ]
        let {
          sat_s5cDN [Occ=Once]
            :: [Data.Ord.Down a_a5csr] -> Data.Ord.Down a_a5csr
          [LclId] =
              [$dMonoid_s5cDJ] \u [] GHC.Base.mconcat $dMonoid_s5cDJ; } in
        let {
          sat_s5cDM [Occ=Once]
            :: Data.Ord.Down a_a5csr
               -> Data.Ord.Down a_a5csr -> Data.Ord.Down a_a5csr
          [LclId] =
              [$dMonoid_s5cDJ] \u [] GHC.Base.mappend $dMonoid_s5cDJ; } in
        let {
          sat_s5cDL [Occ=Once] :: Data.Ord.Down a_a5csr
          [LclId] =
              [$dMonoid_s5cDJ] \u [] GHC.Base.mempty $dMonoid_s5cDJ; } in
        let {
          sat_s5cDK [Occ=Once] :: GHC.Base.Semigroup (Data.Ord.Down a_a5csr)
          [LclId] =
              [$dMonoid_s5cDJ] \u []
                  Data.Ord.$fMonoidDown_$cp1Monoid $dMonoid_s5cDJ;
        } in  GHC.Base.C:Monoid [sat_s5cDK sat_s5cDL sat_s5cDM sat_s5cDN];

Data.Ord.$fNumDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Num.Num a => GHC.Num.Num (Data.Ord.Down a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m] =
    [] \r [$dNum_s5cDO]
        let {
          sat_s5cDV [Occ=Once]
            :: GHC.Integer.Type.Integer -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5cDO] \u [] GHC.Num.fromInteger $dNum_s5cDO; } in
        let {
          sat_s5cDU [Occ=Once]
            :: Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5cDO] \u [] GHC.Num.signum $dNum_s5cDO; } in
        let {
          sat_s5cDT [Occ=Once]
            :: Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5cDO] \u [] GHC.Num.abs $dNum_s5cDO; } in
        let {
          sat_s5cDS [Occ=Once]
            :: Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5cDO] \u [] GHC.Num.negate $dNum_s5cDO; } in
        let {
          sat_s5cDR [Occ=Once]
            :: Data.Ord.Down a_a5cq0
               -> Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5cDO] \u [] GHC.Num.* $dNum_s5cDO; } in
        let {
          sat_s5cDQ [Occ=Once]
            :: Data.Ord.Down a_a5cq0
               -> Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5cDO] \u [] GHC.Num.- $dNum_s5cDO; } in
        let {
          sat_s5cDP [Occ=Once]
            :: Data.Ord.Down a_a5cq0
               -> Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5cDO] \u [] GHC.Num.+ $dNum_s5cDO;
        } in 
          GHC.Num.C:Num [sat_s5cDP
                         sat_s5cDQ
                         sat_s5cDR
                         sat_s5cDS
                         sat_s5cDT
                         sat_s5cDU
                         sat_s5cDV];

Data.Ord.$fReadDown4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Down"#;

Data.Ord.$fReadDown3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Ord.$fReadDown4;

Data.Ord.$fReadDown_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [Data.Ord.$fReadDown3];

Data.Ord.$fReadDown2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

Data.Ord.$fReadDown1
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Ord.Down a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s5cDW eta_s5cDX eta1_s5cDY]
        let {
          sat_s5cEa [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (Data.Ord.Down a_a5cpk)
          [LclId] =
              [$dRead_s5cDW] \r [c_s5cDZ eta2_s5cE0]
                  case c_s5cDZ of {
                    GHC.Types.I# x_s5cE2 [Occ=Once] ->
                        case <=# [x_s5cE2 10#] of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          1# ->
                              let {
                                sat_s5cE7 [Occ=Once]
                                  :: () -> Text.ParserCombinators.ReadP.P b1_X3ngt
                                [LclId] =
                                    [$dRead_s5cDW eta2_s5cE0] \r [a1_s5cE4]
                                        let {
                                          sat_s5cE6 [Occ=Once]
                                            :: a_a5cpk -> Text.ParserCombinators.ReadP.P b1_X3ngt
                                          [LclId] =
                                              [eta2_s5cE0] \r [a2_s5cE5] eta2_s5cE0 a2_s5cE5;
                                        } in 
                                          GHC.Read.readPrec
                                              $dRead_s5cDW Data.Ord.$fReadDown2 sat_s5cE6;
                              } in 
                                case
                                    Text.Read.Lex.$wexpect Data.Ord.$fReadDown_lexeme sat_s5cE7
                                of
                                { Unit# ww1_s5cE9 [Occ=Once] ->
                                      Text.ParserCombinators.ReadP.Look [ww1_s5cE9];
                                };
                        };
                  };
        } in  GHC.Read.list3 sat_s5cEa eta_s5cDX eta1_s5cDY;

Data.Ord.$fReadDown_$creadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (Data.Ord.Down a)
[GblId, Arity=2, Str=<L,U(A,A,C(C1(U)),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dRead_s5cEb n_s5cEc]
        let {
          sat_s5cEd [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (Data.Ord.Down a_X5cr8)
          [LclId] =
              [$dRead_s5cEb n_s5cEc] \u []
                  Data.Ord.$fReadDown1
                      $dRead_s5cEb
                      n_s5cEc
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s5cEd;

Data.Ord.$fReadDown_$creadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [Data.Ord.Down a]
[GblId, Arity=1, Str=<L,U(A,A,C(C1(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s5cEe]
        let {
          sat_s5cEf [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (Data.Ord.Down a_X5cr6)
          [LclId] =
              [$dRead_s5cEe] \r [eta_B2 eta_B1]
                  Data.Ord.$fReadDown1 $dRead_s5cEe eta_B2 eta_B1;
        } in  GHC.Read.list sat_s5cEf;

Data.Ord.$fReadDown_$creadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [Data.Ord.Down a]
[GblId, Arity=1, Str=<L,U(A,A,C(C1(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s5cEg]
        let {
          sat_s5cEi [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [Data.Ord.Down a_X5cr7]
          [LclId] =
              [$dRead_s5cEg] \u []
                  let {
                    sat_s5cEh [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec (Data.Ord.Down a_X5cr7)
                    [LclId] =
                        [$dRead_s5cEg] \r [eta_B2 eta_B1]
                            Data.Ord.$fReadDown1 $dRead_s5cEg eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s5cEh
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s5cEi;

Data.Ord.$fReadDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Read.Read a => GHC.Read.Read (Data.Ord.Down a)
[GblId[DFunId], Arity=1, Str=<L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s5cEj]
        let {
          sat_s5cEn [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [Data.Ord.Down a_X5cr5]
          [LclId] =
              [$dRead_s5cEj] \u []
                  Data.Ord.$fReadDown_$creadListPrec $dRead_s5cEj; } in
        let {
          sat_s5cEm [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (Data.Ord.Down a_X5cr5)
          [LclId] =
              [$dRead_s5cEj] \r [eta_B2 eta_B1]
                  Data.Ord.$fReadDown1 $dRead_s5cEj eta_B2 eta_B1; } in
        let {
          sat_s5cEl [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [Data.Ord.Down a_X5cr5]
          [LclId] =
              [$dRead_s5cEj] \u []
                  Data.Ord.$fReadDown_$creadList $dRead_s5cEj; } in
        let {
          sat_s5cEk [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (Data.Ord.Down a_X5cr5)
          [LclId] =
              [$dRead_s5cEj] \r [eta_B1]
                  Data.Ord.$fReadDown_$creadsPrec $dRead_s5cEj eta_B1;
        } in  GHC.Read.C:Read [sat_s5cEk sat_s5cEl sat_s5cEm sat_s5cEn];

Data.Ord.$fShowDown3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Down "#;

Data.Ord.$fShowDown2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Ord.$fShowDown3;

Data.Ord.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Prim.Int# -> Data.Ord.Down a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s5cEo ww_s5cEp w1_s5cEq]
        let {
          g_s5cEr [Occ=OnceL*!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [w_s5cEo w1_s5cEq] \u []
                  GHC.Show.showsPrec w_s5cEo Data.Ord.$fReadDown2 w1_s5cEq;
        } in 
          case >=# [ww_s5cEp 11#] of {
            __DEFAULT ->
                let {
                  sat_s5cEv [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                  [LclId] =
                      [g_s5cEr] \r [x_s5cEt]
                          let {
                            sat_s5cEu [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                            [LclId] =
                                [g_s5cEr x_s5cEt] \s [] g_s5cEr x_s5cEt;
                          } in  GHC.Base.++ Data.Ord.$fShowDown2 sat_s5cEu;
                } in  sat_s5cEv;
            1# ->
                let {
                  sat_s5cEA [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                  [LclId] =
                      [g_s5cEr] \r [x_s5cEw]
                          let {
                            sat_s5cEz [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [g_s5cEr x_s5cEw] \u []
                                    let {
                                      sat_s5cEy [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                      [LclId] =
                                          [g_s5cEr x_s5cEw] \s []
                                              let {
                                                sat_s5cEx [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)2 x_s5cEw];
                                              } in  g_s5cEr sat_s5cEx;
                                    } in  GHC.Base.++ Data.Ord.$fShowDown2 sat_s5cEy;
                          } in  : [GHC.Show.$fShow(,)4 sat_s5cEz];
                } in  sat_s5cEA;
          };

Data.Ord.$fShowDown_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> Data.Ord.Down a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s5cEB w1_s5cEC w2_s5cED]
        case w1_s5cEC of {
          GHC.Types.I# ww1_s5cEF [Occ=Once] ->
              Data.Ord.$w$cshowsPrec w_s5cEB ww1_s5cEF w2_s5cED;
        };

Data.Ord.$fShowDown_$cshow
  :: forall a. GHC.Show.Show a => Data.Ord.Down a -> GHC.Base.String
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_s5cEG x_s5cEH]
        let {
          sat_s5cEI [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [$dShow_s5cEG x_s5cEH] \s []
                  GHC.Show.showsPrec
                      $dShow_s5cEG Data.Ord.$fReadDown2 x_s5cEH GHC.Types.[];
        } in  GHC.Base.++ Data.Ord.$fShowDown2 sat_s5cEI;

Data.Ord.$fShowDown1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Data.Ord.$fShowDown_$cshowList
  :: forall a. GHC.Show.Show a => [Data.Ord.Down a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_s5cEJ ls_s5cEK s_s5cEL]
        let {
          sat_s5cEN [Occ=Once] :: Data.Ord.Down a_a5coV -> GHC.Show.ShowS
          [LclId] =
              [$dShow_s5cEJ] \r [w_s5cEM]
                  Data.Ord.$w$cshowsPrec $dShow_s5cEJ 0# w_s5cEM;
        } in  GHC.Show.showList__ sat_s5cEN ls_s5cEK s_s5cEL;

Data.Ord.$fShowDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show (Data.Ord.Down a)
[GblId[DFunId], Arity=1, Str=<L,U(C(C1(C(U))),A,A)>m] =
    [] \r [$dShow_s5cEO]
        let {
          sat_s5cER [Occ=Once] :: [Data.Ord.Down a_a5coV] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_s5cEO] \r [eta_B2 eta_B1]
                  Data.Ord.$fShowDown_$cshowList $dShow_s5cEO eta_B2 eta_B1; } in
        let {
          sat_s5cEQ [Occ=Once] :: Data.Ord.Down a_a5coV -> GHC.Base.String
          [LclId] =
              [$dShow_s5cEO] \r [eta_B1]
                  Data.Ord.$fShowDown_$cshow $dShow_s5cEO eta_B1; } in
        let {
          sat_s5cEP [Occ=Once]
            :: GHC.Types.Int -> Data.Ord.Down a_a5coV -> GHC.Show.ShowS
          [LclId] =
              [$dShow_s5cEO] \r [eta_B2 eta_B1]
                  Data.Ord.$fShowDown_$cshowsPrec $dShow_s5cEO eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_s5cEP sat_s5cEQ sat_s5cER];

Data.Ord.$fEqDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq a => GHC.Classes.Eq (Data.Ord.Down a)
[GblId[DFunId], Arity=1, Caf=NoCafRefs, Str=<L,U(1*U,1*U)>m] =
    [] \r [$dEq_s5cES]
        let {
          sat_s5cEU [Occ=Once]
            :: Data.Ord.Down a_a5con -> Data.Ord.Down a_a5con -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5cES] \u [] GHC.Classes./= $dEq_s5cES; } in
        let {
          sat_s5cET [Occ=Once]
            :: Data.Ord.Down a_a5con -> Data.Ord.Down a_a5con -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5cES] \u [] GHC.Classes.== $dEq_s5cES;
        } in  GHC.Classes.C:Eq [sat_s5cET sat_s5cEU];

Data.Ord.$fOrdDown_$cp1Ord
  :: forall a. GHC.Classes.Ord a => GHC.Classes.Eq (Data.Ord.Down a)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U,1*U),A,A,A,A,A,A,A)>m,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5cEV]
        let {
          sat_s5cEW [Occ=Once, Dmd=<L,U(1*U,1*U)>] :: GHC.Classes.Eq a_a5cuW
          [LclId] =
              [$dOrd_s5cEV] \u [] GHC.Classes.$p1Ord $dOrd_s5cEV;
        } in  Data.Ord.$fEqDown sat_s5cEW;

Data.Ord.$fOrdDown_$c<
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5cEX x_s5cEY y_s5cEZ]
        case GHC.Classes.compare $dOrd_s5cEX y_s5cEZ x_s5cEY of {
          __DEFAULT -> GHC.Types.False [];
          GHC.Types.LT -> GHC.Types.True [];
        };

Data.Ord.$fOrdDown_$c>=
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5cF1 x_s5cF2 y_s5cF3]
        case GHC.Classes.compare $dOrd_s5cF1 y_s5cF3 x_s5cF2 of {
          __DEFAULT -> GHC.Types.True [];
          GHC.Types.LT -> GHC.Types.False [];
        };

Data.Ord.$fOrdDown_$c>
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5cF5 x_s5cF6 y_s5cF7]
        case GHC.Classes.compare $dOrd_s5cF5 y_s5cF7 x_s5cF6 of {
          __DEFAULT -> GHC.Types.False [];
          GHC.Types.GT -> GHC.Types.True [];
        };

Data.Ord.$fOrdDown_$c<=
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5cF9 x_s5cFa y_s5cFb]
        case GHC.Classes.compare $dOrd_s5cF9 y_s5cFb x_s5cFa of {
          __DEFAULT -> GHC.Types.True [];
          GHC.Types.GT -> GHC.Types.False [];
        };

Data.Ord.$fOrdDown_$cmax
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> Data.Ord.Down a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5cFd x_s5cFe y_s5cFf]
        case GHC.Classes.compare $dOrd_s5cFd y_s5cFf x_s5cFe of {
          __DEFAULT -> y_s5cFf;
          GHC.Types.GT -> x_s5cFe;
        };

Data.Ord.$fOrdDown_$cmin
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> Data.Ord.Down a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5cFh x_s5cFi y_s5cFj]
        case GHC.Classes.compare $dOrd_s5cFh y_s5cFj x_s5cFi of {
          __DEFAULT -> x_s5cFi;
          GHC.Types.GT -> y_s5cFj;
        };

Data.Ord.$fOrdDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Ord a => GHC.Classes.Ord (Data.Ord.Down a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U,1*U),C(C1(U)),A,A,A,A,A,A)>m] =
    [] \r [$dOrd_s5cFl]
        let {
          sat_s5cFv [Occ=Once]
            :: Data.Ord.Down a_a5cuW
               -> Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW
          [LclId] =
              [$dOrd_s5cFl] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$cmin $dOrd_s5cFl eta_B2 eta_B1; } in
        let {
          sat_s5cFu [Occ=Once]
            :: Data.Ord.Down a_a5cuW
               -> Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW
          [LclId] =
              [$dOrd_s5cFl] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$cmax $dOrd_s5cFl eta_B2 eta_B1; } in
        let {
          sat_s5cFt [Occ=Once]
            :: Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW -> GHC.Types.Bool
          [LclId] =
              [$dOrd_s5cFl] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$c>= $dOrd_s5cFl eta_B2 eta_B1; } in
        let {
          sat_s5cFs [Occ=Once]
            :: Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW -> GHC.Types.Bool
          [LclId] =
              [$dOrd_s5cFl] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$c> $dOrd_s5cFl eta_B2 eta_B1; } in
        let {
          sat_s5cFr [Occ=Once]
            :: Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW -> GHC.Types.Bool
          [LclId] =
              [$dOrd_s5cFl] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$c<= $dOrd_s5cFl eta_B2 eta_B1; } in
        let {
          sat_s5cFq [Occ=Once]
            :: Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW -> GHC.Types.Bool
          [LclId] =
              [$dOrd_s5cFl] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$c< $dOrd_s5cFl eta_B2 eta_B1; } in
        let {
          sat_s5cFp [Occ=Once]
            :: Data.Ord.Down a_a5cuW
               -> Data.Ord.Down a_a5cuW -> GHC.Types.Ordering
          [LclId] =
              [$dOrd_s5cFl] \r [ds_s5cFn ds1_s5cFo]
                  GHC.Classes.compare $dOrd_s5cFl ds1_s5cFo ds_s5cFn; } in
        let {
          sat_s5cFm [Occ=Once] :: GHC.Classes.Eq (Data.Ord.Down a_a5cuW)
          [LclId] =
              [$dOrd_s5cFl] \u [] Data.Ord.$fOrdDown_$cp1Ord $dOrd_s5cFl;
        } in 
          GHC.Classes.C:Ord [sat_s5cFm
                             sat_s5cFp
                             sat_s5cFq
                             sat_s5cFr
                             sat_s5cFs
                             sat_s5cFt
                             sat_s5cFu
                             sat_s5cFv];

Data.Ord.comparing
  :: forall a b.
     GHC.Classes.Ord a =>
     (b -> a) -> b -> b -> GHC.Types.Ordering
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,C(U)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5cFw p_s5cFx x_s5cFy y_s5cFz]
        let {
          sat_s5cFB [Occ=Once] :: a_a5cog
          [LclId] =
              [p_s5cFx y_s5cFz] \u [] p_s5cFx y_s5cFz; } in
        let {
          sat_s5cFA [Occ=Once] :: a_a5cog
          [LclId] =
              [p_s5cFx x_s5cFy] \u [] p_s5cFx x_s5cFy;
        } in  GHC.Classes.compare $dOrd_s5cFw sat_s5cFA sat_s5cFB;

Data.Ord.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Ord.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ord.$trModule4];

Data.Ord.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Ord"#;

Data.Ord.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ord.$trModule2];

Data.Ord.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Ord.$trModule3
                                     Data.Ord.$trModule1];

$krep_r5cDl :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

Data.Ord.$tcDown1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ord.$fReadDown4];

Data.Ord.$tcDown :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7479183817722852251##
                                    10417149520322703999##
                                    Data.Ord.$trModule
                                    Data.Ord.$tcDown1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep1_r5cDm :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5cDl GHC.Types.[]];

$krep2_r5cDn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Ord.$tcDown
                                              $krep1_r5cDm];

Data.Ord.$tc'Down1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r5cDl $krep2_r5cDn];

Data.Ord.$tc'Down3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Down"#;

Data.Ord.$tc'Down2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ord.$tc'Down3];

Data.Ord.$tc'Down :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2181324915805229541##
                                    7680134812570657793##
                                    Data.Ord.$trModule
                                    Data.Ord.$tc'Down2
                                    1#
                                    Data.Ord.$tc'Down1];


==================== Pre unarise: ====================
2018-03-16 16:00:12.195023373 UTC

Data.Ord.$fFunctorDown2 :: forall a b. (a -> b) -> a -> b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [v_s5doy] v_s5doy;

Data.Ord.$fFunctorDown1 :: forall b a. a -> b -> a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [x_s5doz ds_s5doA] x_s5doz;

Data.Ord.$fFunctorDown [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Functor Data.Ord.Down
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Functor! [Data.Ord.$fFunctorDown2
                                       Data.Ord.$fFunctorDown1];

Data.Ord.$fApplicativeDown3
  :: forall a b. Data.Ord.Down (a -> b) -> Data.Ord.Down (a -> b)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [v_s5doB] v_s5doB;

Data.Ord.$fApplicativeDown4 :: forall a. a -> a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [v_s5doC] v_s5doC;

Data.Ord.$fApplicativeDown2
  :: forall a c b. (a -> b -> c) -> Data.Ord.Down a -> b -> c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [f1_s5doD x_s5doE] f1_s5doD x_s5doE;

Data.Ord.$fApplicativeDown_$c*>
  :: forall a b.
     Data.Ord.Down a -> Data.Ord.Down b -> Data.Ord.Down b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a1_s5doF a2_s5doG] a2_s5doG;

Data.Ord.$fApplicativeDown1
  :: forall b a. Data.Ord.Down a -> b -> Data.Ord.Down a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [x_s5doH ds_s5doI] x_s5doH;

Data.Ord.$fApplicativeDown [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Applicative Data.Ord.Down
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Applicative! [Data.Ord.$fFunctorDown
                                           Data.Ord.$fApplicativeDown4
                                           Data.Ord.$fApplicativeDown3
                                           Data.Ord.$fApplicativeDown2
                                           Data.Ord.$fApplicativeDown_$c*>
                                           Data.Ord.$fApplicativeDown1];

Data.Ord.$fMonadDown_$c>>=
  :: forall a b.
     Data.Ord.Down a -> (a -> Data.Ord.Down b) -> Data.Ord.Down b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s5doJ k_s5doK] k_s5doK ds_s5doJ;

Data.Ord.$fMonadDown_$c>> [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     Data.Ord.Down a -> Data.Ord.Down b -> Data.Ord.Down b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Data.Ord.$fApplicativeDown_$c*> eta_B2 eta_B1;

lvl_r5cDk :: forall a. [GHC.Types.Char] -> Data.Ord.Down a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_s5doL] GHC.Err.errorWithoutStackTrace eta_s5doL;

Data.Ord.$fMonadDown [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Monad Data.Ord.Down
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Monad! [Data.Ord.$fApplicativeDown
                                     Data.Ord.$fMonadDown_$c>>=
                                     Data.Ord.$fMonadDown_$c>>
                                     Data.Ord.$fApplicativeDown4
                                     lvl_r5cDk];

Data.Ord.$fSemigroupDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a.
     GHC.Base.Semigroup a =>
     GHC.Base.Semigroup (Data.Ord.Down a)
[GblId[DFunId], Arity=1, Caf=NoCafRefs, Str=<L,U(1*U,1*U,1*U)>m] =
    [] \r [$dSemigroup_s5doM]
        let {
          sat_s5doP [Occ=Once]
            :: forall b.
               GHC.Real.Integral b =>
               b -> Data.Ord.Down a_a5crv -> Data.Ord.Down a_a5crv
          [LclId] =
              [$dSemigroup_s5doM] \u [] GHC.Base.stimes $dSemigroup_s5doM; } in
        let {
          sat_s5doO [Occ=Once]
            :: GHC.Base.NonEmpty (Data.Ord.Down a_a5crv)
               -> Data.Ord.Down a_a5crv
          [LclId] =
              [$dSemigroup_s5doM] \u [] GHC.Base.sconcat $dSemigroup_s5doM; } in
        let {
          sat_s5doN [Occ=Once]
            :: Data.Ord.Down a_a5crv
               -> Data.Ord.Down a_a5crv -> Data.Ord.Down a_a5crv
          [LclId] =
              [$dSemigroup_s5doM] \u [] GHC.Base.<> $dSemigroup_s5doM;
        } in  GHC.Base.C:Semigroup [sat_s5doN sat_s5doO sat_s5doP];

Data.Ord.$fMonoidDown_$cp1Monoid
  :: forall a.
     GHC.Base.Monoid a =>
     GHC.Base.Semigroup (Data.Ord.Down a)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U,1*U,1*U),A,A,A)>m,
 Unf=OtherCon []] =
    [] \r [$dMonoid_s5doQ]
        let {
          sat_s5doR [Occ=Once, Dmd=<L,U(1*U,1*U,1*U)>]
            :: GHC.Base.Semigroup a_a5csr
          [LclId] =
              [$dMonoid_s5doQ] \u [] GHC.Base.$p1Monoid $dMonoid_s5doQ;
        } in  Data.Ord.$fSemigroupDown sat_s5doR;

Data.Ord.$fMonoidDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Base.Monoid a => GHC.Base.Monoid (Data.Ord.Down a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U,1*U,1*U),1*U,1*U,1*U)>m] =
    [] \r [$dMonoid_s5doS]
        let {
          sat_s5doW [Occ=Once]
            :: [Data.Ord.Down a_a5csr] -> Data.Ord.Down a_a5csr
          [LclId] =
              [$dMonoid_s5doS] \u [] GHC.Base.mconcat $dMonoid_s5doS; } in
        let {
          sat_s5doV [Occ=Once]
            :: Data.Ord.Down a_a5csr
               -> Data.Ord.Down a_a5csr -> Data.Ord.Down a_a5csr
          [LclId] =
              [$dMonoid_s5doS] \u [] GHC.Base.mappend $dMonoid_s5doS; } in
        let {
          sat_s5doU [Occ=Once] :: Data.Ord.Down a_a5csr
          [LclId] =
              [$dMonoid_s5doS] \u [] GHC.Base.mempty $dMonoid_s5doS; } in
        let {
          sat_s5doT [Occ=Once] :: GHC.Base.Semigroup (Data.Ord.Down a_a5csr)
          [LclId] =
              [$dMonoid_s5doS] \u []
                  Data.Ord.$fMonoidDown_$cp1Monoid $dMonoid_s5doS;
        } in  GHC.Base.C:Monoid [sat_s5doT sat_s5doU sat_s5doV sat_s5doW];

Data.Ord.$fNumDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Num.Num a => GHC.Num.Num (Data.Ord.Down a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m] =
    [] \r [$dNum_s5doX]
        let {
          sat_s5dp4 [Occ=Once]
            :: GHC.Integer.Type.Integer -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5doX] \u [] GHC.Num.fromInteger $dNum_s5doX; } in
        let {
          sat_s5dp3 [Occ=Once]
            :: Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5doX] \u [] GHC.Num.signum $dNum_s5doX; } in
        let {
          sat_s5dp2 [Occ=Once]
            :: Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5doX] \u [] GHC.Num.abs $dNum_s5doX; } in
        let {
          sat_s5dp1 [Occ=Once]
            :: Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5doX] \u [] GHC.Num.negate $dNum_s5doX; } in
        let {
          sat_s5dp0 [Occ=Once]
            :: Data.Ord.Down a_a5cq0
               -> Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5doX] \u [] GHC.Num.* $dNum_s5doX; } in
        let {
          sat_s5doZ [Occ=Once]
            :: Data.Ord.Down a_a5cq0
               -> Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5doX] \u [] GHC.Num.- $dNum_s5doX; } in
        let {
          sat_s5doY [Occ=Once]
            :: Data.Ord.Down a_a5cq0
               -> Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5doX] \u [] GHC.Num.+ $dNum_s5doX;
        } in 
          GHC.Num.C:Num [sat_s5doY
                         sat_s5doZ
                         sat_s5dp0
                         sat_s5dp1
                         sat_s5dp2
                         sat_s5dp3
                         sat_s5dp4];

Data.Ord.$fReadDown4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Down"#;

Data.Ord.$fReadDown3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Ord.$fReadDown4;

Data.Ord.$fReadDown_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [Data.Ord.$fReadDown3];

Data.Ord.$fReadDown2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

Data.Ord.$fReadDown1
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Ord.Down a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s5dp5 eta_s5dp6 eta1_s5dp7]
        let {
          sat_s5dpj [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (Data.Ord.Down a_a5cpk)
          [LclId] =
              [$dRead_s5dp5] \r [c_s5dp8 eta2_s5dp9]
                  case c_s5dp8 of {
                    GHC.Types.I# x_s5dpb [Occ=Once] ->
                        case <=# [x_s5dpb 10#] of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          1# ->
                              let {
                                sat_s5dpg [Occ=Once]
                                  :: () -> Text.ParserCombinators.ReadP.P b1_X3ngt
                                [LclId] =
                                    [$dRead_s5dp5 eta2_s5dp9] \r [a1_s5dpd]
                                        let {
                                          sat_s5dpf [Occ=Once]
                                            :: a_a5cpk -> Text.ParserCombinators.ReadP.P b1_X3ngt
                                          [LclId] =
                                              [eta2_s5dp9] \r [a2_s5dpe] eta2_s5dp9 a2_s5dpe;
                                        } in 
                                          GHC.Read.readPrec
                                              $dRead_s5dp5 Data.Ord.$fReadDown2 sat_s5dpf;
                              } in 
                                case
                                    Text.Read.Lex.$wexpect Data.Ord.$fReadDown_lexeme sat_s5dpg
                                of
                                { Unit# ww1_s5dpi [Occ=Once] ->
                                      Text.ParserCombinators.ReadP.Look [ww1_s5dpi];
                                };
                        };
                  };
        } in  GHC.Read.list3 sat_s5dpj eta_s5dp6 eta1_s5dp7;

Data.Ord.$fReadDown_$creadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (Data.Ord.Down a)
[GblId, Arity=2, Str=<L,U(A,A,C(C1(U)),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dRead_s5dpk n_s5dpl]
        let {
          sat_s5dpm [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (Data.Ord.Down a_X5cr8)
          [LclId] =
              [$dRead_s5dpk n_s5dpl] \u []
                  Data.Ord.$fReadDown1
                      $dRead_s5dpk
                      n_s5dpl
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s5dpm;

Data.Ord.$fReadDown_$creadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [Data.Ord.Down a]
[GblId, Arity=1, Str=<L,U(A,A,C(C1(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s5dpn]
        let {
          sat_s5dpo [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (Data.Ord.Down a_X5cr6)
          [LclId] =
              [$dRead_s5dpn] \r [eta_B2 eta_B1]
                  Data.Ord.$fReadDown1 $dRead_s5dpn eta_B2 eta_B1;
        } in  GHC.Read.list sat_s5dpo;

Data.Ord.$fReadDown_$creadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [Data.Ord.Down a]
[GblId, Arity=1, Str=<L,U(A,A,C(C1(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s5dpp]
        let {
          sat_s5dpr [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [Data.Ord.Down a_X5cr7]
          [LclId] =
              [$dRead_s5dpp] \u []
                  let {
                    sat_s5dpq [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec (Data.Ord.Down a_X5cr7)
                    [LclId] =
                        [$dRead_s5dpp] \r [eta_B2 eta_B1]
                            Data.Ord.$fReadDown1 $dRead_s5dpp eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s5dpq
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s5dpr;

Data.Ord.$fReadDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Read.Read a => GHC.Read.Read (Data.Ord.Down a)
[GblId[DFunId], Arity=1, Str=<L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s5dps]
        let {
          sat_s5dpw [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [Data.Ord.Down a_X5cr5]
          [LclId] =
              [$dRead_s5dps] \u []
                  Data.Ord.$fReadDown_$creadListPrec $dRead_s5dps; } in
        let {
          sat_s5dpv [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (Data.Ord.Down a_X5cr5)
          [LclId] =
              [$dRead_s5dps] \r [eta_B2 eta_B1]
                  Data.Ord.$fReadDown1 $dRead_s5dps eta_B2 eta_B1; } in
        let {
          sat_s5dpu [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [Data.Ord.Down a_X5cr5]
          [LclId] =
              [$dRead_s5dps] \u []
                  Data.Ord.$fReadDown_$creadList $dRead_s5dps; } in
        let {
          sat_s5dpt [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (Data.Ord.Down a_X5cr5)
          [LclId] =
              [$dRead_s5dps] \r [eta_B1]
                  Data.Ord.$fReadDown_$creadsPrec $dRead_s5dps eta_B1;
        } in  GHC.Read.C:Read [sat_s5dpt sat_s5dpu sat_s5dpv sat_s5dpw];

Data.Ord.$fShowDown3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Down "#;

Data.Ord.$fShowDown2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Ord.$fShowDown3;

Data.Ord.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Prim.Int# -> Data.Ord.Down a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s5dpx ww_s5dpy w1_s5dpz]
        let {
          g_s5dpA [Occ=OnceL*!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [w_s5dpx w1_s5dpz] \u []
                  GHC.Show.showsPrec w_s5dpx Data.Ord.$fReadDown2 w1_s5dpz;
        } in 
          case >=# [ww_s5dpy 11#] of {
            __DEFAULT ->
                let {
                  sat_s5dpE [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                  [LclId] =
                      [g_s5dpA] \r [x_s5dpC]
                          let {
                            sat_s5dpD [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                            [LclId] =
                                [g_s5dpA x_s5dpC] \s [] g_s5dpA x_s5dpC;
                          } in  GHC.Base.++ Data.Ord.$fShowDown2 sat_s5dpD;
                } in  sat_s5dpE;
            1# ->
                let {
                  sat_s5dpJ [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                  [LclId] =
                      [g_s5dpA] \r [x_s5dpF]
                          let {
                            sat_s5dpI [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [g_s5dpA x_s5dpF] \u []
                                    let {
                                      sat_s5dpH [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                      [LclId] =
                                          [g_s5dpA x_s5dpF] \s []
                                              let {
                                                sat_s5dpG [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)2 x_s5dpF];
                                              } in  g_s5dpA sat_s5dpG;
                                    } in  GHC.Base.++ Data.Ord.$fShowDown2 sat_s5dpH;
                          } in  : [GHC.Show.$fShow(,)4 sat_s5dpI];
                } in  sat_s5dpJ;
          };

Data.Ord.$fShowDown_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> Data.Ord.Down a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s5dpK w1_s5dpL w2_s5dpM]
        case w1_s5dpL of {
          GHC.Types.I# ww1_s5dpO [Occ=Once] ->
              Data.Ord.$w$cshowsPrec w_s5dpK ww1_s5dpO w2_s5dpM;
        };

Data.Ord.$fShowDown_$cshow
  :: forall a. GHC.Show.Show a => Data.Ord.Down a -> GHC.Base.String
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_s5dpP x_s5dpQ]
        let {
          sat_s5dpR [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [$dShow_s5dpP x_s5dpQ] \s []
                  GHC.Show.showsPrec
                      $dShow_s5dpP Data.Ord.$fReadDown2 x_s5dpQ GHC.Types.[];
        } in  GHC.Base.++ Data.Ord.$fShowDown2 sat_s5dpR;

Data.Ord.$fShowDown1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Data.Ord.$fShowDown_$cshowList
  :: forall a. GHC.Show.Show a => [Data.Ord.Down a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_s5dpS ls_s5dpT s_s5dpU]
        let {
          sat_s5dpW [Occ=Once] :: Data.Ord.Down a_a5coV -> GHC.Show.ShowS
          [LclId] =
              [$dShow_s5dpS] \r [w_s5dpV]
                  Data.Ord.$w$cshowsPrec $dShow_s5dpS 0# w_s5dpV;
        } in  GHC.Show.showList__ sat_s5dpW ls_s5dpT s_s5dpU;

Data.Ord.$fShowDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show (Data.Ord.Down a)
[GblId[DFunId], Arity=1, Str=<L,U(C(C1(C(U))),A,A)>m] =
    [] \r [$dShow_s5dpX]
        let {
          sat_s5dq0 [Occ=Once] :: [Data.Ord.Down a_a5coV] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_s5dpX] \r [eta_B2 eta_B1]
                  Data.Ord.$fShowDown_$cshowList $dShow_s5dpX eta_B2 eta_B1; } in
        let {
          sat_s5dpZ [Occ=Once] :: Data.Ord.Down a_a5coV -> GHC.Base.String
          [LclId] =
              [$dShow_s5dpX] \r [eta_B1]
                  Data.Ord.$fShowDown_$cshow $dShow_s5dpX eta_B1; } in
        let {
          sat_s5dpY [Occ=Once]
            :: GHC.Types.Int -> Data.Ord.Down a_a5coV -> GHC.Show.ShowS
          [LclId] =
              [$dShow_s5dpX] \r [eta_B2 eta_B1]
                  Data.Ord.$fShowDown_$cshowsPrec $dShow_s5dpX eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_s5dpY sat_s5dpZ sat_s5dq0];

Data.Ord.$fEqDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq a => GHC.Classes.Eq (Data.Ord.Down a)
[GblId[DFunId], Arity=1, Caf=NoCafRefs, Str=<L,U(1*U,1*U)>m] =
    [] \r [$dEq_s5dq1]
        let {
          sat_s5dq3 [Occ=Once]
            :: Data.Ord.Down a_a5con -> Data.Ord.Down a_a5con -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5dq1] \u [] GHC.Classes./= $dEq_s5dq1; } in
        let {
          sat_s5dq2 [Occ=Once]
            :: Data.Ord.Down a_a5con -> Data.Ord.Down a_a5con -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5dq1] \u [] GHC.Classes.== $dEq_s5dq1;
        } in  GHC.Classes.C:Eq [sat_s5dq2 sat_s5dq3];

Data.Ord.$fOrdDown_$cp1Ord
  :: forall a. GHC.Classes.Ord a => GHC.Classes.Eq (Data.Ord.Down a)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U,1*U),A,A,A,A,A,A,A)>m,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5dq4]
        let {
          sat_s5dq5 [Occ=Once, Dmd=<L,U(1*U,1*U)>] :: GHC.Classes.Eq a_a5cuW
          [LclId] =
              [$dOrd_s5dq4] \u [] GHC.Classes.$p1Ord $dOrd_s5dq4;
        } in  Data.Ord.$fEqDown sat_s5dq5;

Data.Ord.$fOrdDown_$c<
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5dq6 x_s5dq7 y_s5dq8]
        case GHC.Classes.compare $dOrd_s5dq6 y_s5dq8 x_s5dq7 of {
          __DEFAULT -> GHC.Types.False [];
          GHC.Types.LT -> GHC.Types.True [];
        };

Data.Ord.$fOrdDown_$c>=
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5dqa x_s5dqb y_s5dqc]
        case GHC.Classes.compare $dOrd_s5dqa y_s5dqc x_s5dqb of {
          __DEFAULT -> GHC.Types.True [];
          GHC.Types.LT -> GHC.Types.False [];
        };

Data.Ord.$fOrdDown_$c>
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5dqe x_s5dqf y_s5dqg]
        case GHC.Classes.compare $dOrd_s5dqe y_s5dqg x_s5dqf of {
          __DEFAULT -> GHC.Types.False [];
          GHC.Types.GT -> GHC.Types.True [];
        };

Data.Ord.$fOrdDown_$c<=
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5dqi x_s5dqj y_s5dqk]
        case GHC.Classes.compare $dOrd_s5dqi y_s5dqk x_s5dqj of {
          __DEFAULT -> GHC.Types.True [];
          GHC.Types.GT -> GHC.Types.False [];
        };

Data.Ord.$fOrdDown_$cmax
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> Data.Ord.Down a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5dqm x_s5dqn y_s5dqo]
        case GHC.Classes.compare $dOrd_s5dqm y_s5dqo x_s5dqn of {
          __DEFAULT -> y_s5dqo;
          GHC.Types.GT -> x_s5dqn;
        };

Data.Ord.$fOrdDown_$cmin
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> Data.Ord.Down a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5dqq x_s5dqr y_s5dqs]
        case GHC.Classes.compare $dOrd_s5dqq y_s5dqs x_s5dqr of {
          __DEFAULT -> x_s5dqr;
          GHC.Types.GT -> y_s5dqs;
        };

Data.Ord.$fOrdDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Ord a => GHC.Classes.Ord (Data.Ord.Down a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U,1*U),C(C1(U)),A,A,A,A,A,A)>m] =
    [] \r [$dOrd_s5dqu]
        let {
          sat_s5dqE [Occ=Once]
            :: Data.Ord.Down a_a5cuW
               -> Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW
          [LclId] =
              [$dOrd_s5dqu] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$cmin $dOrd_s5dqu eta_B2 eta_B1; } in
        let {
          sat_s5dqD [Occ=Once]
            :: Data.Ord.Down a_a5cuW
               -> Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW
          [LclId] =
              [$dOrd_s5dqu] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$cmax $dOrd_s5dqu eta_B2 eta_B1; } in
        let {
          sat_s5dqC [Occ=Once]
            :: Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW -> GHC.Types.Bool
          [LclId] =
              [$dOrd_s5dqu] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$c>= $dOrd_s5dqu eta_B2 eta_B1; } in
        let {
          sat_s5dqB [Occ=Once]
            :: Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW -> GHC.Types.Bool
          [LclId] =
              [$dOrd_s5dqu] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$c> $dOrd_s5dqu eta_B2 eta_B1; } in
        let {
          sat_s5dqA [Occ=Once]
            :: Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW -> GHC.Types.Bool
          [LclId] =
              [$dOrd_s5dqu] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$c<= $dOrd_s5dqu eta_B2 eta_B1; } in
        let {
          sat_s5dqz [Occ=Once]
            :: Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW -> GHC.Types.Bool
          [LclId] =
              [$dOrd_s5dqu] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$c< $dOrd_s5dqu eta_B2 eta_B1; } in
        let {
          sat_s5dqy [Occ=Once]
            :: Data.Ord.Down a_a5cuW
               -> Data.Ord.Down a_a5cuW -> GHC.Types.Ordering
          [LclId] =
              [$dOrd_s5dqu] \r [ds_s5dqw ds1_s5dqx]
                  GHC.Classes.compare $dOrd_s5dqu ds1_s5dqx ds_s5dqw; } in
        let {
          sat_s5dqv [Occ=Once] :: GHC.Classes.Eq (Data.Ord.Down a_a5cuW)
          [LclId] =
              [$dOrd_s5dqu] \u [] Data.Ord.$fOrdDown_$cp1Ord $dOrd_s5dqu;
        } in 
          GHC.Classes.C:Ord [sat_s5dqv
                             sat_s5dqy
                             sat_s5dqz
                             sat_s5dqA
                             sat_s5dqB
                             sat_s5dqC
                             sat_s5dqD
                             sat_s5dqE];

Data.Ord.comparing
  :: forall a b.
     GHC.Classes.Ord a =>
     (b -> a) -> b -> b -> GHC.Types.Ordering
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,C(U)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5dqF p_s5dqG x_s5dqH y_s5dqI]
        let {
          sat_s5dqK [Occ=Once] :: a_a5cog
          [LclId] =
              [p_s5dqG y_s5dqI] \u [] p_s5dqG y_s5dqI; } in
        let {
          sat_s5dqJ [Occ=Once] :: a_a5cog
          [LclId] =
              [p_s5dqG x_s5dqH] \u [] p_s5dqG x_s5dqH;
        } in  GHC.Classes.compare $dOrd_s5dqF sat_s5dqJ sat_s5dqK;

Data.Ord.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Ord.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ord.$trModule4];

Data.Ord.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Ord"#;

Data.Ord.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ord.$trModule2];

Data.Ord.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Ord.$trModule3
                                     Data.Ord.$trModule1];

$krep_r5cDl :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

Data.Ord.$tcDown1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ord.$fReadDown4];

Data.Ord.$tcDown :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7479183817722852251##
                                    10417149520322703999##
                                    Data.Ord.$trModule
                                    Data.Ord.$tcDown1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep1_r5cDm :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5cDl GHC.Types.[]];

$krep2_r5cDn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Ord.$tcDown
                                              $krep1_r5cDm];

Data.Ord.$tc'Down1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r5cDl $krep2_r5cDn];

Data.Ord.$tc'Down3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Down"#;

Data.Ord.$tc'Down2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ord.$tc'Down3];

Data.Ord.$tc'Down :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2181324915805229541##
                                    7680134812570657793##
                                    Data.Ord.$trModule
                                    Data.Ord.$tc'Down2
                                    1#
                                    Data.Ord.$tc'Down1];


==================== STG syntax: ====================
2018-03-16 16:00:12.220720656 UTC

Data.Ord.$fFunctorDown2 :: forall a b. (a -> b) -> a -> b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [v_s5doy] v_s5doy;

Data.Ord.$fFunctorDown1 :: forall b a. a -> b -> a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [x_s5doz ds_s5doA] x_s5doz;

Data.Ord.$fFunctorDown [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Functor Data.Ord.Down
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Functor! [Data.Ord.$fFunctorDown2
                                       Data.Ord.$fFunctorDown1];

Data.Ord.$fApplicativeDown3
  :: forall a b. Data.Ord.Down (a -> b) -> Data.Ord.Down (a -> b)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [v_s5doB] v_s5doB;

Data.Ord.$fApplicativeDown4 :: forall a. a -> a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [v_s5doC] v_s5doC;

Data.Ord.$fApplicativeDown2
  :: forall a c b. (a -> b -> c) -> Data.Ord.Down a -> b -> c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [f1_s5doD x_s5doE] f1_s5doD x_s5doE;

Data.Ord.$fApplicativeDown_$c*>
  :: forall a b.
     Data.Ord.Down a -> Data.Ord.Down b -> Data.Ord.Down b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a1_s5doF a2_s5doG] a2_s5doG;

Data.Ord.$fApplicativeDown1
  :: forall b a. Data.Ord.Down a -> b -> Data.Ord.Down a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [x_s5doH ds_s5doI] x_s5doH;

Data.Ord.$fApplicativeDown [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Applicative Data.Ord.Down
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Applicative! [Data.Ord.$fFunctorDown
                                           Data.Ord.$fApplicativeDown4
                                           Data.Ord.$fApplicativeDown3
                                           Data.Ord.$fApplicativeDown2
                                           Data.Ord.$fApplicativeDown_$c*>
                                           Data.Ord.$fApplicativeDown1];

Data.Ord.$fMonadDown_$c>>=
  :: forall a b.
     Data.Ord.Down a -> (a -> Data.Ord.Down b) -> Data.Ord.Down b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s5doJ k_s5doK] k_s5doK ds_s5doJ;

Data.Ord.$fMonadDown_$c>> [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     Data.Ord.Down a -> Data.Ord.Down b -> Data.Ord.Down b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Data.Ord.$fApplicativeDown_$c*> eta_B2 eta_B1;

lvl_r5cDk :: forall a. [GHC.Types.Char] -> Data.Ord.Down a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_s5doL] GHC.Err.errorWithoutStackTrace eta_s5doL;

Data.Ord.$fMonadDown [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Monad Data.Ord.Down
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Monad! [Data.Ord.$fApplicativeDown
                                     Data.Ord.$fMonadDown_$c>>=
                                     Data.Ord.$fMonadDown_$c>>
                                     Data.Ord.$fApplicativeDown4
                                     lvl_r5cDk];

Data.Ord.$fSemigroupDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a.
     GHC.Base.Semigroup a =>
     GHC.Base.Semigroup (Data.Ord.Down a)
[GblId[DFunId], Arity=1, Caf=NoCafRefs, Str=<L,U(1*U,1*U,1*U)>m] =
    [] \r [$dSemigroup_s5doM]
        let {
          sat_s5doP [Occ=Once]
            :: forall b.
               GHC.Real.Integral b =>
               b -> Data.Ord.Down a_a5crv -> Data.Ord.Down a_a5crv
          [LclId] =
              [$dSemigroup_s5doM] \u [] GHC.Base.stimes $dSemigroup_s5doM; } in
        let {
          sat_s5doO [Occ=Once]
            :: GHC.Base.NonEmpty (Data.Ord.Down a_a5crv)
               -> Data.Ord.Down a_a5crv
          [LclId] =
              [$dSemigroup_s5doM] \u [] GHC.Base.sconcat $dSemigroup_s5doM; } in
        let {
          sat_s5doN [Occ=Once]
            :: Data.Ord.Down a_a5crv
               -> Data.Ord.Down a_a5crv -> Data.Ord.Down a_a5crv
          [LclId] =
              [$dSemigroup_s5doM] \u [] GHC.Base.<> $dSemigroup_s5doM;
        } in  GHC.Base.C:Semigroup [sat_s5doN sat_s5doO sat_s5doP];

Data.Ord.$fMonoidDown_$cp1Monoid
  :: forall a.
     GHC.Base.Monoid a =>
     GHC.Base.Semigroup (Data.Ord.Down a)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U,1*U,1*U),A,A,A)>m,
 Unf=OtherCon []] =
    [] \r [$dMonoid_s5doQ]
        let {
          sat_s5doR [Occ=Once, Dmd=<L,U(1*U,1*U,1*U)>]
            :: GHC.Base.Semigroup a_a5csr
          [LclId] =
              [$dMonoid_s5doQ] \u [] GHC.Base.$p1Monoid $dMonoid_s5doQ;
        } in  Data.Ord.$fSemigroupDown sat_s5doR;

Data.Ord.$fMonoidDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Base.Monoid a => GHC.Base.Monoid (Data.Ord.Down a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U,1*U,1*U),1*U,1*U,1*U)>m] =
    [] \r [$dMonoid_s5doS]
        let {
          sat_s5doW [Occ=Once]
            :: [Data.Ord.Down a_a5csr] -> Data.Ord.Down a_a5csr
          [LclId] =
              [$dMonoid_s5doS] \u [] GHC.Base.mconcat $dMonoid_s5doS; } in
        let {
          sat_s5doV [Occ=Once]
            :: Data.Ord.Down a_a5csr
               -> Data.Ord.Down a_a5csr -> Data.Ord.Down a_a5csr
          [LclId] =
              [$dMonoid_s5doS] \u [] GHC.Base.mappend $dMonoid_s5doS; } in
        let {
          sat_s5doU [Occ=Once] :: Data.Ord.Down a_a5csr
          [LclId] =
              [$dMonoid_s5doS] \u [] GHC.Base.mempty $dMonoid_s5doS; } in
        let {
          sat_s5doT [Occ=Once] :: GHC.Base.Semigroup (Data.Ord.Down a_a5csr)
          [LclId] =
              [$dMonoid_s5doS] \u []
                  Data.Ord.$fMonoidDown_$cp1Monoid $dMonoid_s5doS;
        } in  GHC.Base.C:Monoid [sat_s5doT sat_s5doU sat_s5doV sat_s5doW];

Data.Ord.$fNumDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Num.Num a => GHC.Num.Num (Data.Ord.Down a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m] =
    [] \r [$dNum_s5doX]
        let {
          sat_s5dp4 [Occ=Once]
            :: GHC.Integer.Type.Integer -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5doX] \u [] GHC.Num.fromInteger $dNum_s5doX; } in
        let {
          sat_s5dp3 [Occ=Once]
            :: Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5doX] \u [] GHC.Num.signum $dNum_s5doX; } in
        let {
          sat_s5dp2 [Occ=Once]
            :: Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5doX] \u [] GHC.Num.abs $dNum_s5doX; } in
        let {
          sat_s5dp1 [Occ=Once]
            :: Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5doX] \u [] GHC.Num.negate $dNum_s5doX; } in
        let {
          sat_s5dp0 [Occ=Once]
            :: Data.Ord.Down a_a5cq0
               -> Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5doX] \u [] GHC.Num.* $dNum_s5doX; } in
        let {
          sat_s5doZ [Occ=Once]
            :: Data.Ord.Down a_a5cq0
               -> Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5doX] \u [] GHC.Num.- $dNum_s5doX; } in
        let {
          sat_s5doY [Occ=Once]
            :: Data.Ord.Down a_a5cq0
               -> Data.Ord.Down a_a5cq0 -> Data.Ord.Down a_a5cq0
          [LclId] =
              [$dNum_s5doX] \u [] GHC.Num.+ $dNum_s5doX;
        } in 
          GHC.Num.C:Num [sat_s5doY
                         sat_s5doZ
                         sat_s5dp0
                         sat_s5dp1
                         sat_s5dp2
                         sat_s5dp3
                         sat_s5dp4];

Data.Ord.$fReadDown4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Down"#;

Data.Ord.$fReadDown3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Ord.$fReadDown4;

Data.Ord.$fReadDown_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [Data.Ord.$fReadDown3];

Data.Ord.$fReadDown2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

Data.Ord.$fReadDown1
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Ord.Down a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s5dp5 eta_s5dp6 eta1_s5dp7]
        let {
          sat_s5dpj [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (Data.Ord.Down a_a5cpk)
          [LclId] =
              [$dRead_s5dp5] \r [c_s5dp8 eta2_s5dp9]
                  case c_s5dp8 of {
                    GHC.Types.I# x_s5dpb [Occ=Once] ->
                        case <=# [x_s5dpb 10#] of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          1# ->
                              let {
                                sat_s5dpg [Occ=Once]
                                  :: () -> Text.ParserCombinators.ReadP.P b1_X3ngt
                                [LclId] =
                                    [$dRead_s5dp5 eta2_s5dp9] \r [a1_s5dpd]
                                        let {
                                          sat_s5dpf [Occ=Once]
                                            :: a_a5cpk -> Text.ParserCombinators.ReadP.P b1_X3ngt
                                          [LclId] =
                                              [eta2_s5dp9] \r [a2_s5dpe] eta2_s5dp9 a2_s5dpe;
                                        } in 
                                          GHC.Read.readPrec
                                              $dRead_s5dp5 Data.Ord.$fReadDown2 sat_s5dpf;
                              } in 
                                case
                                    Text.Read.Lex.$wexpect Data.Ord.$fReadDown_lexeme sat_s5dpg
                                of
                                { Unit# ww1_s5dpi [Occ=Once] ->
                                      Text.ParserCombinators.ReadP.Look [ww1_s5dpi];
                                };
                        };
                  };
        } in  GHC.Read.list3 sat_s5dpj eta_s5dp6 eta1_s5dp7;

Data.Ord.$fReadDown_$creadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (Data.Ord.Down a)
[GblId, Arity=2, Str=<L,U(A,A,C(C1(U)),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dRead_s5dpk n_s5dpl]
        let {
          sat_s5dpm [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (Data.Ord.Down a_X5cr8)
          [LclId] =
              [$dRead_s5dpk n_s5dpl] \u []
                  Data.Ord.$fReadDown1
                      $dRead_s5dpk
                      n_s5dpl
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s5dpm;

Data.Ord.$fReadDown_$creadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [Data.Ord.Down a]
[GblId, Arity=1, Str=<L,U(A,A,C(C1(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s5dpn]
        let {
          sat_s5dpo [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (Data.Ord.Down a_X5cr6)
          [LclId] =
              [$dRead_s5dpn] \r [eta_B2 eta_B1]
                  Data.Ord.$fReadDown1 $dRead_s5dpn eta_B2 eta_B1;
        } in  GHC.Read.list sat_s5dpo;

Data.Ord.$fReadDown_$creadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [Data.Ord.Down a]
[GblId, Arity=1, Str=<L,U(A,A,C(C1(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s5dpp]
        let {
          sat_s5dpr [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [Data.Ord.Down a_X5cr7]
          [LclId] =
              [$dRead_s5dpp] \u []
                  let {
                    sat_s5dpq [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec (Data.Ord.Down a_X5cr7)
                    [LclId] =
                        [$dRead_s5dpp] \r [eta_B2 eta_B1]
                            Data.Ord.$fReadDown1 $dRead_s5dpp eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s5dpq
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s5dpr;

Data.Ord.$fReadDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Read.Read a => GHC.Read.Read (Data.Ord.Down a)
[GblId[DFunId], Arity=1, Str=<L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s5dps]
        let {
          sat_s5dpw [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [Data.Ord.Down a_X5cr5]
          [LclId] =
              [$dRead_s5dps] \u []
                  Data.Ord.$fReadDown_$creadListPrec $dRead_s5dps; } in
        let {
          sat_s5dpv [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (Data.Ord.Down a_X5cr5)
          [LclId] =
              [$dRead_s5dps] \r [eta_B2 eta_B1]
                  Data.Ord.$fReadDown1 $dRead_s5dps eta_B2 eta_B1; } in
        let {
          sat_s5dpu [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [Data.Ord.Down a_X5cr5]
          [LclId] =
              [$dRead_s5dps] \u []
                  Data.Ord.$fReadDown_$creadList $dRead_s5dps; } in
        let {
          sat_s5dpt [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (Data.Ord.Down a_X5cr5)
          [LclId] =
              [$dRead_s5dps] \r [eta_B1]
                  Data.Ord.$fReadDown_$creadsPrec $dRead_s5dps eta_B1;
        } in  GHC.Read.C:Read [sat_s5dpt sat_s5dpu sat_s5dpv sat_s5dpw];

Data.Ord.$fShowDown3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Down "#;

Data.Ord.$fShowDown2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Ord.$fShowDown3;

Data.Ord.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Prim.Int# -> Data.Ord.Down a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s5dpx ww_s5dpy w1_s5dpz]
        let {
          g_s5dpA [Occ=OnceL*!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [w_s5dpx w1_s5dpz] \u []
                  GHC.Show.showsPrec w_s5dpx Data.Ord.$fReadDown2 w1_s5dpz;
        } in 
          case >=# [ww_s5dpy 11#] of {
            __DEFAULT ->
                let {
                  sat_s5dpE [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                  [LclId] =
                      [g_s5dpA] \r [x_s5dpC]
                          let {
                            sat_s5dpD [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                            [LclId] =
                                [g_s5dpA x_s5dpC] \s [] g_s5dpA x_s5dpC;
                          } in  GHC.Base.++ Data.Ord.$fShowDown2 sat_s5dpD;
                } in  sat_s5dpE;
            1# ->
                let {
                  sat_s5dpJ [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                  [LclId] =
                      [g_s5dpA] \r [x_s5dpF]
                          let {
                            sat_s5dpI [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [g_s5dpA x_s5dpF] \u []
                                    let {
                                      sat_s5dpH [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                      [LclId] =
                                          [g_s5dpA x_s5dpF] \s []
                                              let {
                                                sat_s5dpG [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)2 x_s5dpF];
                                              } in  g_s5dpA sat_s5dpG;
                                    } in  GHC.Base.++ Data.Ord.$fShowDown2 sat_s5dpH;
                          } in  : [GHC.Show.$fShow(,)4 sat_s5dpI];
                } in  sat_s5dpJ;
          };

Data.Ord.$fShowDown_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> Data.Ord.Down a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s5dpK w1_s5dpL w2_s5dpM]
        case w1_s5dpL of {
          GHC.Types.I# ww1_s5dpO [Occ=Once] ->
              Data.Ord.$w$cshowsPrec w_s5dpK ww1_s5dpO w2_s5dpM;
        };

Data.Ord.$fShowDown_$cshow
  :: forall a. GHC.Show.Show a => Data.Ord.Down a -> GHC.Base.String
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_s5dpP x_s5dpQ]
        let {
          sat_s5dpR [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [$dShow_s5dpP x_s5dpQ] \s []
                  GHC.Show.showsPrec
                      $dShow_s5dpP Data.Ord.$fReadDown2 x_s5dpQ GHC.Types.[];
        } in  GHC.Base.++ Data.Ord.$fShowDown2 sat_s5dpR;

Data.Ord.$fShowDown1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Data.Ord.$fShowDown_$cshowList
  :: forall a. GHC.Show.Show a => [Data.Ord.Down a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_s5dpS ls_s5dpT s_s5dpU]
        let {
          sat_s5dpW [Occ=Once] :: Data.Ord.Down a_a5coV -> GHC.Show.ShowS
          [LclId] =
              [$dShow_s5dpS] \r [w_s5dpV]
                  Data.Ord.$w$cshowsPrec $dShow_s5dpS 0# w_s5dpV;
        } in  GHC.Show.showList__ sat_s5dpW ls_s5dpT s_s5dpU;

Data.Ord.$fShowDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show (Data.Ord.Down a)
[GblId[DFunId], Arity=1, Str=<L,U(C(C1(C(U))),A,A)>m] =
    [] \r [$dShow_s5dpX]
        let {
          sat_s5dq0 [Occ=Once] :: [Data.Ord.Down a_a5coV] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_s5dpX] \r [eta_B2 eta_B1]
                  Data.Ord.$fShowDown_$cshowList $dShow_s5dpX eta_B2 eta_B1; } in
        let {
          sat_s5dpZ [Occ=Once] :: Data.Ord.Down a_a5coV -> GHC.Base.String
          [LclId] =
              [$dShow_s5dpX] \r [eta_B1]
                  Data.Ord.$fShowDown_$cshow $dShow_s5dpX eta_B1; } in
        let {
          sat_s5dpY [Occ=Once]
            :: GHC.Types.Int -> Data.Ord.Down a_a5coV -> GHC.Show.ShowS
          [LclId] =
              [$dShow_s5dpX] \r [eta_B2 eta_B1]
                  Data.Ord.$fShowDown_$cshowsPrec $dShow_s5dpX eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_s5dpY sat_s5dpZ sat_s5dq0];

Data.Ord.$fEqDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq a => GHC.Classes.Eq (Data.Ord.Down a)
[GblId[DFunId], Arity=1, Caf=NoCafRefs, Str=<L,U(1*U,1*U)>m] =
    [] \r [$dEq_s5dq1]
        let {
          sat_s5dq3 [Occ=Once]
            :: Data.Ord.Down a_a5con -> Data.Ord.Down a_a5con -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5dq1] \u [] GHC.Classes./= $dEq_s5dq1; } in
        let {
          sat_s5dq2 [Occ=Once]
            :: Data.Ord.Down a_a5con -> Data.Ord.Down a_a5con -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5dq1] \u [] GHC.Classes.== $dEq_s5dq1;
        } in  GHC.Classes.C:Eq [sat_s5dq2 sat_s5dq3];

Data.Ord.$fOrdDown_$cp1Ord
  :: forall a. GHC.Classes.Ord a => GHC.Classes.Eq (Data.Ord.Down a)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U(1*U,1*U),A,A,A,A,A,A,A)>m,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5dq4]
        let {
          sat_s5dq5 [Occ=Once, Dmd=<L,U(1*U,1*U)>] :: GHC.Classes.Eq a_a5cuW
          [LclId] =
              [$dOrd_s5dq4] \u [] GHC.Classes.$p1Ord $dOrd_s5dq4;
        } in  Data.Ord.$fEqDown sat_s5dq5;

Data.Ord.$fOrdDown_$c<
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5dq6 x_s5dq7 y_s5dq8]
        case GHC.Classes.compare $dOrd_s5dq6 y_s5dq8 x_s5dq7 of {
          __DEFAULT -> GHC.Types.False [];
          GHC.Types.LT -> GHC.Types.True [];
        };

Data.Ord.$fOrdDown_$c>=
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5dqa x_s5dqb y_s5dqc]
        case GHC.Classes.compare $dOrd_s5dqa y_s5dqc x_s5dqb of {
          __DEFAULT -> GHC.Types.True [];
          GHC.Types.LT -> GHC.Types.False [];
        };

Data.Ord.$fOrdDown_$c>
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5dqe x_s5dqf y_s5dqg]
        case GHC.Classes.compare $dOrd_s5dqe y_s5dqg x_s5dqf of {
          __DEFAULT -> GHC.Types.False [];
          GHC.Types.GT -> GHC.Types.True [];
        };

Data.Ord.$fOrdDown_$c<=
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5dqi x_s5dqj y_s5dqk]
        case GHC.Classes.compare $dOrd_s5dqi y_s5dqk x_s5dqj of {
          __DEFAULT -> GHC.Types.True [];
          GHC.Types.GT -> GHC.Types.False [];
        };

Data.Ord.$fOrdDown_$cmax
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> Data.Ord.Down a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5dqm x_s5dqn y_s5dqo]
        case GHC.Classes.compare $dOrd_s5dqm y_s5dqo x_s5dqn of {
          __DEFAULT -> y_s5dqo;
          GHC.Types.GT -> x_s5dqn;
        };

Data.Ord.$fOrdDown_$cmin
  :: forall a.
     GHC.Classes.Ord a =>
     Data.Ord.Down a -> Data.Ord.Down a -> Data.Ord.Down a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5dqq x_s5dqr y_s5dqs]
        case GHC.Classes.compare $dOrd_s5dqq y_s5dqs x_s5dqr of {
          __DEFAULT -> x_s5dqr;
          GHC.Types.GT -> y_s5dqs;
        };

Data.Ord.$fOrdDown [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Ord a => GHC.Classes.Ord (Data.Ord.Down a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(1*U(1*U,1*U),C(C1(U)),A,A,A,A,A,A)>m] =
    [] \r [$dOrd_s5dqu]
        let {
          sat_s5dqE [Occ=Once]
            :: Data.Ord.Down a_a5cuW
               -> Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW
          [LclId] =
              [$dOrd_s5dqu] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$cmin $dOrd_s5dqu eta_B2 eta_B1; } in
        let {
          sat_s5dqD [Occ=Once]
            :: Data.Ord.Down a_a5cuW
               -> Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW
          [LclId] =
              [$dOrd_s5dqu] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$cmax $dOrd_s5dqu eta_B2 eta_B1; } in
        let {
          sat_s5dqC [Occ=Once]
            :: Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW -> GHC.Types.Bool
          [LclId] =
              [$dOrd_s5dqu] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$c>= $dOrd_s5dqu eta_B2 eta_B1; } in
        let {
          sat_s5dqB [Occ=Once]
            :: Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW -> GHC.Types.Bool
          [LclId] =
              [$dOrd_s5dqu] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$c> $dOrd_s5dqu eta_B2 eta_B1; } in
        let {
          sat_s5dqA [Occ=Once]
            :: Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW -> GHC.Types.Bool
          [LclId] =
              [$dOrd_s5dqu] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$c<= $dOrd_s5dqu eta_B2 eta_B1; } in
        let {
          sat_s5dqz [Occ=Once]
            :: Data.Ord.Down a_a5cuW -> Data.Ord.Down a_a5cuW -> GHC.Types.Bool
          [LclId] =
              [$dOrd_s5dqu] \r [eta_B2 eta_B1]
                  Data.Ord.$fOrdDown_$c< $dOrd_s5dqu eta_B2 eta_B1; } in
        let {
          sat_s5dqy [Occ=Once]
            :: Data.Ord.Down a_a5cuW
               -> Data.Ord.Down a_a5cuW -> GHC.Types.Ordering
          [LclId] =
              [$dOrd_s5dqu] \r [ds_s5dqw ds1_s5dqx]
                  GHC.Classes.compare $dOrd_s5dqu ds1_s5dqx ds_s5dqw; } in
        let {
          sat_s5dqv [Occ=Once] :: GHC.Classes.Eq (Data.Ord.Down a_a5cuW)
          [LclId] =
              [$dOrd_s5dqu] \u [] Data.Ord.$fOrdDown_$cp1Ord $dOrd_s5dqu;
        } in 
          GHC.Classes.C:Ord [sat_s5dqv
                             sat_s5dqy
                             sat_s5dqz
                             sat_s5dqA
                             sat_s5dqB
                             sat_s5dqC
                             sat_s5dqD
                             sat_s5dqE];

Data.Ord.comparing
  :: forall a b.
     GHC.Classes.Ord a =>
     (b -> a) -> b -> b -> GHC.Types.Ordering
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,C(U)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5dqF p_s5dqG x_s5dqH y_s5dqI]
        let {
          sat_s5dqK [Occ=Once] :: a_a5cog
          [LclId] =
              [p_s5dqG y_s5dqI] \u [] p_s5dqG y_s5dqI; } in
        let {
          sat_s5dqJ [Occ=Once] :: a_a5cog
          [LclId] =
              [p_s5dqG x_s5dqH] \u [] p_s5dqG x_s5dqH;
        } in  GHC.Classes.compare $dOrd_s5dqF sat_s5dqJ sat_s5dqK;

Data.Ord.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Ord.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ord.$trModule4];

Data.Ord.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Ord"#;

Data.Ord.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ord.$trModule2];

Data.Ord.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Ord.$trModule3
                                     Data.Ord.$trModule1];

$krep_r5cDl :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

Data.Ord.$tcDown1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ord.$fReadDown4];

Data.Ord.$tcDown :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7479183817722852251##
                                    10417149520322703999##
                                    Data.Ord.$trModule
                                    Data.Ord.$tcDown1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep1_r5cDm :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5cDl GHC.Types.[]];

$krep2_r5cDn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Ord.$tcDown
                                              $krep1_r5cDm];

Data.Ord.$tc'Down1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r5cDl $krep2_r5cDn];

Data.Ord.$tc'Down3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Down"#;

Data.Ord.$tc'Down2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ord.$tc'Down3];

Data.Ord.$tc'Down :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2181324915805229541##
                                    7680134812570657793##
                                    Data.Ord.$trModule
                                    Data.Ord.$tc'Down2
                                    1#
                                    Data.Ord.$tc'Down1];

