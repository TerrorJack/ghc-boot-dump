
==================== Output Cmm ====================
2018-03-16 15:55:04.840725501 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:55:04.841648802 UTC

[section ""data" . Data.Tuple.fst_closure" {
     Data.Tuple.fst_closure:
         const Data.Tuple.fst_info;
 },
 Data.Tuple.fst_entry() //  [R2]
         { info_tbl: [(cr6W,
                       label: Data.Tuple.fst_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr6W: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cr6X; else goto cr6Y;
       cr6X: // global
           R2 = R2;
           R1 = Data.Tuple.fst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cr6Y: // global
           I64[Sp - 8] = block_cr6T_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ur72; else goto cr6U;
       ur72: // global
           call _cr6T(R1) args: 0, res: 0, upd: 0;
       cr6U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cr6T() //  [R1]
         { info_tbl: [(cr6T,
                       label: block_cr6T_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr6T: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.842846935 UTC

[section ""data" . Data.Tuple.snd_closure" {
     Data.Tuple.snd_closure:
         const Data.Tuple.snd_info;
 },
 Data.Tuple.snd_entry() //  [R2]
         { info_tbl: [(cr7a,
                       label: Data.Tuple.snd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr7a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cr7b; else goto cr7c;
       cr7b: // global
           R2 = R2;
           R1 = Data.Tuple.snd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cr7c: // global
           I64[Sp - 8] = block_cr77_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ur7g; else goto cr78;
       ur7g: // global
           call _cr77(R1) args: 0, res: 0, upd: 0;
       cr78: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cr77() //  [R1]
         { info_tbl: [(cr77,
                       label: block_cr77_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr77: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.844031065 UTC

[section ""data" . Data.Tuple.uncurry_closure" {
     Data.Tuple.uncurry_closure:
         const Data.Tuple.uncurry_info;
 },
 Data.Tuple.uncurry_entry() //  [R2, R3]
         { info_tbl: [(cr7n,
                       label: Data.Tuple.uncurry_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr7n: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cr7r; else goto cr7q;
       cr7r: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Tuple.uncurry_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cr7q: // global
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = R3;
           R3 = Hp - 40;
           _sr6x::P64 = R2;
           R2 = Hp - 16;
           R1 = _sr6x::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.845153417 UTC

[section ""data" . Data.Tuple.curry_closure" {
     Data.Tuple.curry_closure:
         const Data.Tuple.curry_info;
 },
 Data.Tuple.curry_entry() //  [R2, R3, R4]
         { info_tbl: [(cr7x,
                       label: Data.Tuple.curry_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr7x: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cr7B; else goto cr7A;
       cr7B: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Tuple.curry_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cr7A: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _sr6H::P64 = R2;
           R2 = Hp - 15;
           R1 = _sr6H::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.846668032 UTC

[section ""data" . Data.Tuple.swap_closure" {
     Data.Tuple.swap_closure:
         const Data.Tuple.swap_info;
 },
 Data.Tuple.swap_entry() //  [R2]
         { info_tbl: [(cr7J,
                       label: Data.Tuple.swap_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr7J: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cr7N; else goto cr7O;
       cr7N: // global
           R2 = R2;
           R1 = Data.Tuple.swap_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cr7O: // global
           I64[Sp - 8] = block_cr7G_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ur7S; else goto cr7H;
       ur7S: // global
           call _cr7G(R1) args: 0, res: 0, upd: 0;
       cr7H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cr7G() //  [R1]
         { info_tbl: [(cr7G,
                       label: block_cr7G_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr7G: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cr7R; else goto cr7Q;
       cr7R: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cr7Q: // global
           _sr6N::P64 = P64[R1 + 7];
           _sr6O::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sr6O::P64;
           P64[Hp] = _sr6N::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.847698221 UTC

[section ""cstring" . Data.Tuple.$trModule4_bytes" {
     Data.Tuple.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.848246025 UTC

[section ""data" . Data.Tuple.$trModule3_closure" {
     Data.Tuple.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Tuple.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.848765121 UTC

[section ""cstring" . Data.Tuple.$trModule2_bytes" {
     Data.Tuple.$trModule2_bytes:
         I8[] [68,97,116,97,46,84,117,112,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.849348254 UTC

[section ""data" . Data.Tuple.$trModule1_closure" {
     Data.Tuple.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Tuple.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.849905902 UTC

[section ""data" . Data.Tuple.$trModule_closure" {
     Data.Tuple.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Tuple.$trModule3_closure+1;
         const Data.Tuple.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.850466822 UTC

[section ""relreadonly" . Sr7T_srt" { Sr7T_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.850996861 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:55:04.851752145 UTC

[section ""data" . Data.Tuple.fst_closure" {
     Data.Tuple.fst_closure:
         const Data.Tuple.fst_info;
 },
 Data.Tuple.fst_entry() //  [R2]
         { info_tbl: [(cr81,
                       label: Data.Tuple.fst_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr81: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cr82; else goto cr83;
       cr82: // global
           R2 = R2;
           R1 = Data.Tuple.fst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cr83: // global
           I64[Sp - 8] = block_cr7Y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ur87; else goto cr7Z;
       ur87: // global
           call _cr7Y(R1) args: 0, res: 0, upd: 0;
       cr7Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cr7Y() //  [R1]
         { info_tbl: [(cr7Y,
                       label: block_cr7Y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr7Y: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.852902389 UTC

[section ""data" . Data.Tuple.snd_closure" {
     Data.Tuple.snd_closure:
         const Data.Tuple.snd_info;
 },
 Data.Tuple.snd_entry() //  [R2]
         { info_tbl: [(cr8f,
                       label: Data.Tuple.snd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr8f: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cr8g; else goto cr8h;
       cr8g: // global
           R2 = R2;
           R1 = Data.Tuple.snd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cr8h: // global
           I64[Sp - 8] = block_cr8c_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ur8l; else goto cr8d;
       ur8l: // global
           call _cr8c(R1) args: 0, res: 0, upd: 0;
       cr8d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cr8c() //  [R1]
         { info_tbl: [(cr8c,
                       label: block_cr8c_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr8c: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.854511007 UTC

[section ""data" . Data.Tuple.uncurry_closure" {
     Data.Tuple.uncurry_closure:
         const Data.Tuple.uncurry_info;
 },
 Data.Tuple.uncurry_entry() //  [R2, R3]
         { info_tbl: [(cr8s,
                       label: Data.Tuple.uncurry_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr8s: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cr8w; else goto cr8v;
       cr8w: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Tuple.uncurry_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cr8v: // global
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = R3;
           R3 = Hp - 40;
           _sr6x::P64 = R2;
           R2 = Hp - 16;
           R1 = _sr6x::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.855591643 UTC

[section ""data" . Data.Tuple.curry_closure" {
     Data.Tuple.curry_closure:
         const Data.Tuple.curry_info;
 },
 Data.Tuple.curry_entry() //  [R2, R3, R4]
         { info_tbl: [(cr8C,
                       label: Data.Tuple.curry_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr8C: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cr8G; else goto cr8F;
       cr8G: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Tuple.curry_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cr8F: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _sr6H::P64 = R2;
           R2 = Hp - 15;
           R1 = _sr6H::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.856708002 UTC

[section ""data" . Data.Tuple.swap_closure" {
     Data.Tuple.swap_closure:
         const Data.Tuple.swap_info;
 },
 Data.Tuple.swap_entry() //  [R2]
         { info_tbl: [(cr8O,
                       label: Data.Tuple.swap_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr8O: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cr8S; else goto cr8T;
       cr8S: // global
           R2 = R2;
           R1 = Data.Tuple.swap_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cr8T: // global
           I64[Sp - 8] = block_cr8L_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ur8X; else goto cr8M;
       ur8X: // global
           call _cr8L(R1) args: 0, res: 0, upd: 0;
       cr8M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cr8L() //  [R1]
         { info_tbl: [(cr8L,
                       label: block_cr8L_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr8L: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cr8W; else goto cr8V;
       cr8W: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cr8V: // global
           _sr6N::P64 = P64[R1 + 7];
           _sr6O::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sr6O::P64;
           P64[Hp] = _sr6N::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.857848834 UTC

[section ""cstring" . Data.Tuple.$trModule4_bytes" {
     Data.Tuple.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.858389693 UTC

[section ""data" . Data.Tuple.$trModule3_closure" {
     Data.Tuple.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Tuple.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.858921535 UTC

[section ""cstring" . Data.Tuple.$trModule2_bytes" {
     Data.Tuple.$trModule2_bytes:
         I8[] [68,97,116,97,46,84,117,112,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.859454518 UTC

[section ""data" . Data.Tuple.$trModule1_closure" {
     Data.Tuple.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Tuple.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.860118823 UTC

[section ""data" . Data.Tuple.$trModule_closure" {
     Data.Tuple.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Tuple.$trModule3_closure+1;
         const Data.Tuple.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.860756047 UTC

[section ""relreadonly" . Sr7T_srt" { Sr7T_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.86157287 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:55:04.863375102 UTC

[section ""data" . Data.Tuple.fst_closure" {
     Data.Tuple.fst_closure:
         const Data.Tuple.fst_info;
 },
 Data.Tuple.fst_entry() //  [R2]
         { info_tbl: [(cr95,
                       label: Data.Tuple.fst_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr95: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cr96; else goto cr97;
       cr96: // global
           R2 = R2;
           R1 = Data.Tuple.fst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cr97: // global
           I64[Sp - 8] = block_cr92_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ur9b; else goto cr93;
       ur9b: // global
           call _cr92(R1) args: 0, res: 0, upd: 0;
       cr93: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cr92() //  [R1]
         { info_tbl: [(cr92,
                       label: block_cr92_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr92: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.869405488 UTC

[section ""data" . Data.Tuple.snd_closure" {
     Data.Tuple.snd_closure:
         const Data.Tuple.snd_info;
 },
 Data.Tuple.snd_entry() //  [R2]
         { info_tbl: [(cr9s,
                       label: Data.Tuple.snd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr9s: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cr9t; else goto cr9u;
       cr9t: // global
           R2 = R2;
           R1 = Data.Tuple.snd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cr9u: // global
           I64[Sp - 8] = block_cr9p_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ur9y; else goto cr9q;
       ur9y: // global
           call _cr9p(R1) args: 0, res: 0, upd: 0;
       cr9q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cr9p() //  [R1]
         { info_tbl: [(cr9p,
                       label: block_cr9p_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr9p: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.875058723 UTC

[section ""data" . Data.Tuple.uncurry_closure" {
     Data.Tuple.uncurry_closure:
         const Data.Tuple.uncurry_info;
 },
 Data.Tuple.uncurry_entry() //  [R2, R3]
         { info_tbl: [(cr9O,
                       label: Data.Tuple.uncurry_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr9O: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cr9S; else goto cr9R;
       cr9S: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Tuple.uncurry_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cr9R: // global
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = R3;
           R3 = Hp - 40;
           _sr6x::P64 = R2;
           R2 = Hp - 16;
           R1 = _sr6x::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.878895 UTC

[section ""data" . Data.Tuple.curry_closure" {
     Data.Tuple.curry_closure:
         const Data.Tuple.curry_info;
 },
 Data.Tuple.curry_entry() //  [R2, R3, R4]
         { info_tbl: [(cra2,
                       label: Data.Tuple.curry_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cra2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cra6; else goto cra5;
       cra6: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Tuple.curry_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cra5: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _sr6H::P64 = R2;
           R2 = Hp - 15;
           R1 = _sr6H::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.883205848 UTC

[section ""data" . Data.Tuple.swap_closure" {
     Data.Tuple.swap_closure:
         const Data.Tuple.swap_info;
 },
 Data.Tuple.swap_entry() //  [R2]
         { info_tbl: [(crai,
                       label: Data.Tuple.swap_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       crai: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cram; else goto cran;
       cram: // global
           R2 = R2;
           R1 = Data.Tuple.swap_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cran: // global
           I64[Sp - 8] = block_craf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urar; else goto crag;
       urar: // global
           call _craf(R1) args: 0, res: 0, upd: 0;
       crag: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _craf() //  [R1]
         { info_tbl: [(craf,
                       label: block_craf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       craf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto craq; else goto crap;
       craq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       crap: // global
           _sr6N::P64 = P64[R1 + 7];
           _sr6O::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sr6O::P64;
           P64[Hp] = _sr6N::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.88905995 UTC

[section ""cstring" . Data.Tuple.$trModule4_bytes" {
     Data.Tuple.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.890736773 UTC

[section ""data" . Data.Tuple.$trModule3_closure" {
     Data.Tuple.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Tuple.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.892347226 UTC

[section ""cstring" . Data.Tuple.$trModule2_bytes" {
     Data.Tuple.$trModule2_bytes:
         I8[] [68,97,116,97,46,84,117,112,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.894096137 UTC

[section ""data" . Data.Tuple.$trModule1_closure" {
     Data.Tuple.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Tuple.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.896042153 UTC

[section ""data" . Data.Tuple.$trModule_closure" {
     Data.Tuple.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Tuple.$trModule3_closure+1;
         const Data.Tuple.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.897779819 UTC

[section ""relreadonly" . Sr7T_srt" { Sr7T_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.950430966 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:55:04.95173439 UTC

[section ""data" . Data.Tuple.fst_closure" {
     Data.Tuple.fst_closure:
         const Data.Tuple.fst_info;
 },
 Data.Tuple.fst_entry() //  [R2]
         { info_tbl: [(crbf,
                       label: Data.Tuple.fst_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       crbf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto crbg; else goto crbh;
       crbg: // global
           R2 = R2;
           R1 = Data.Tuple.fst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       crbh: // global
           I64[Sp - 8] = block_crbc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urbl; else goto crbd;
       urbl: // global
           call _crbc(R1) args: 0, res: 0, upd: 0;
       crbd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _crbc() //  [R1]
         { info_tbl: [(crbc,
                       label: block_crbc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       crbc: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.95785022 UTC

[section ""data" . Data.Tuple.snd_closure" {
     Data.Tuple.snd_closure:
         const Data.Tuple.snd_info;
 },
 Data.Tuple.snd_entry() //  [R2]
         { info_tbl: [(crbD,
                       label: Data.Tuple.snd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       crbD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto crbE; else goto crbF;
       crbE: // global
           R2 = R2;
           R1 = Data.Tuple.snd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       crbF: // global
           I64[Sp - 8] = block_crbA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urbJ; else goto crbB;
       urbJ: // global
           call _crbA(R1) args: 0, res: 0, upd: 0;
       crbB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _crbA() //  [R1]
         { info_tbl: [(crbA,
                       label: block_crbA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       crbA: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.963521257 UTC

[section ""data" . Data.Tuple.uncurry_closure" {
     Data.Tuple.uncurry_closure:
         const Data.Tuple.uncurry_info;
 },
 Data.Tuple.uncurry_entry() //  [R2, R3]
         { info_tbl: [(crc0,
                       label: Data.Tuple.uncurry_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       crc0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto crc4; else goto crc3;
       crc4: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Tuple.uncurry_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       crc3: // global
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = R3;
           R3 = Hp - 40;
           _sraQ::P64 = R2;
           R2 = Hp - 16;
           R1 = _sraQ::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.967454758 UTC

[section ""data" . Data.Tuple.curry_closure" {
     Data.Tuple.curry_closure:
         const Data.Tuple.curry_info;
 },
 Data.Tuple.curry_entry() //  [R2, R3, R4]
         { info_tbl: [(crcg,
                       label: Data.Tuple.curry_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       crcg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto crck; else goto crcj;
       crck: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Tuple.curry_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       crcj: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _srb0::P64 = R2;
           R2 = Hp - 15;
           R1 = _srb0::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.971770159 UTC

[section ""data" . Data.Tuple.swap_closure" {
     Data.Tuple.swap_closure:
         const Data.Tuple.swap_info;
 },
 Data.Tuple.swap_entry() //  [R2]
         { info_tbl: [(crcx,
                       label: Data.Tuple.swap_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       crcx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto crcB; else goto crcC;
       crcB: // global
           R2 = R2;
           R1 = Data.Tuple.swap_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       crcC: // global
           I64[Sp - 8] = block_crcu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto urcG; else goto crcv;
       urcG: // global
           call _crcu(R1) args: 0, res: 0, upd: 0;
       crcv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _crcu() //  [R1]
         { info_tbl: [(crcu,
                       label: block_crcu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       crcu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto crcF; else goto crcE;
       crcF: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       crcE: // global
           _srb6::P64 = P64[R1 + 7];
           _srb7::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _srb7::P64;
           P64[Hp] = _srb6::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.977430914 UTC

[section ""cstring" . Data.Tuple.$trModule4_bytes" {
     Data.Tuple.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.979087841 UTC

[section ""data" . Data.Tuple.$trModule3_closure" {
     Data.Tuple.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Tuple.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.980667698 UTC

[section ""cstring" . Data.Tuple.$trModule2_bytes" {
     Data.Tuple.$trModule2_bytes:
         I8[] [68,97,116,97,46,84,117,112,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.982312869 UTC

[section ""data" . Data.Tuple.$trModule1_closure" {
     Data.Tuple.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Tuple.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.984219778 UTC

[section ""data" . Data.Tuple.$trModule_closure" {
     Data.Tuple.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Tuple.$trModule3_closure+1;
         const Data.Tuple.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.98593247 UTC

[section ""relreadonly" . SrcY_srt" { SrcY_srt:
 }]

