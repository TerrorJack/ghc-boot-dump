
==================== Raw Cmm ====================
2018-03-16 16:02:03.872864574 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:02:03.87467698 UTC

[section ""data" . Data.Foldable.fold_closure" {
     Data.Foldable.fold_closure:
         const Data.Foldable.fold_info;
 },
 Data.Foldable.fold_entry() //  [R2]
         { []
         }
     {offset
       c6Unt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Unu; else goto c6Unv;
       c6Unu: // global
           R2 = R2;
           R1 = Data.Foldable.fold_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Unv: // global
           I64[Sp - 8] = block_c6Unq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Unz; else goto c6Unr;
       u6Unz: // global
           call _c6Unq(R1) args: 0, res: 0, upd: 0;
       c6Unr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.fold_info" {
     Data.Foldable.fold_info:
         const Data.Foldable.fold_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Unq() //  [R1]
         { []
         }
     {offset
       c6Unq: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Unq_info" {
     block_c6Unq_info:
         const _c6Unq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.880301607 UTC

[section ""data" . Data.Foldable.foldMap_closure" {
     Data.Foldable.foldMap_closure:
         const Data.Foldable.foldMap_info;
 },
 Data.Foldable.foldMap_entry() //  [R2]
         { []
         }
     {offset
       c6UnQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6UnR; else goto c6UnS;
       c6UnR: // global
           R2 = R2;
           R1 = Data.Foldable.foldMap_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UnS: // global
           I64[Sp - 8] = block_c6UnN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6UnW; else goto c6UnO;
       u6UnW: // global
           call _c6UnN(R1) args: 0, res: 0, upd: 0;
       c6UnO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldMap_info" {
     Data.Foldable.foldMap_info:
         const Data.Foldable.foldMap_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6UnN() //  [R1]
         { []
         }
     {offset
       c6UnN: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UnN_info" {
     block_c6UnN_info:
         const _c6UnN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.887068098 UTC

[section ""data" . Data.Foldable.foldr_closure" {
     Data.Foldable.foldr_closure:
         const Data.Foldable.foldr_info;
 },
 Data.Foldable.foldr_entry() //  [R2]
         { []
         }
     {offset
       c6Uod: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Uoe; else goto c6Uof;
       c6Uoe: // global
           R2 = R2;
           R1 = Data.Foldable.foldr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Uof: // global
           I64[Sp - 8] = block_c6Uoa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Uoj; else goto c6Uob;
       u6Uoj: // global
           call _c6Uoa(R1) args: 0, res: 0, upd: 0;
       c6Uob: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldr_info" {
     Data.Foldable.foldr_info:
         const Data.Foldable.foldr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Uoa() //  [R1]
         { []
         }
     {offset
       c6Uoa: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Uoa_info" {
     block_c6Uoa_info:
         const _c6Uoa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.893071467 UTC

[section ""data" . Data.Foldable.foldr'_closure" {
     Data.Foldable.foldr'_closure:
         const Data.Foldable.foldr'_info;
 },
 Data.Foldable.foldr'_entry() //  [R2]
         { []
         }
     {offset
       c6UoA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6UoB; else goto c6UoC;
       c6UoB: // global
           R2 = R2;
           R1 = Data.Foldable.foldr'_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UoC: // global
           I64[Sp - 8] = block_c6Uox_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6UoG; else goto c6Uoy;
       u6UoG: // global
           call _c6Uox(R1) args: 0, res: 0, upd: 0;
       c6Uoy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldr'_info" {
     Data.Foldable.foldr'_info:
         const Data.Foldable.foldr'_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Uox() //  [R1]
         { []
         }
     {offset
       c6Uox: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Uox_info" {
     block_c6Uox_info:
         const _c6Uox;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.899009327 UTC

[section ""data" . Data.Foldable.foldl_closure" {
     Data.Foldable.foldl_closure:
         const Data.Foldable.foldl_info;
 },
 Data.Foldable.foldl_entry() //  [R2]
         { []
         }
     {offset
       c6UoX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6UoY; else goto c6UoZ;
       c6UoY: // global
           R2 = R2;
           R1 = Data.Foldable.foldl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UoZ: // global
           I64[Sp - 8] = block_c6UoU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Up3; else goto c6UoV;
       u6Up3: // global
           call _c6UoU(R1) args: 0, res: 0, upd: 0;
       c6UoV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldl_info" {
     Data.Foldable.foldl_info:
         const Data.Foldable.foldl_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6UoU() //  [R1]
         { []
         }
     {offset
       c6UoU: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UoU_info" {
     block_c6UoU_info:
         const _c6UoU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.905012753 UTC

[section ""data" . Data.Foldable.foldl'_closure" {
     Data.Foldable.foldl'_closure:
         const Data.Foldable.foldl'_info;
 },
 Data.Foldable.foldl'_entry() //  [R2]
         { []
         }
     {offset
       c6Upk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Upl; else goto c6Upm;
       c6Upl: // global
           R2 = R2;
           R1 = Data.Foldable.foldl'_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Upm: // global
           I64[Sp - 8] = block_c6Uph_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Upq; else goto c6Upi;
       u6Upq: // global
           call _c6Uph(R1) args: 0, res: 0, upd: 0;
       c6Upi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldl'_info" {
     Data.Foldable.foldl'_info:
         const Data.Foldable.foldl'_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Uph() //  [R1]
         { []
         }
     {offset
       c6Uph: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Uph_info" {
     block_c6Uph_info:
         const _c6Uph;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.911239634 UTC

[section ""data" . Data.Foldable.foldr1_closure" {
     Data.Foldable.foldr1_closure:
         const Data.Foldable.foldr1_info;
 },
 Data.Foldable.foldr1_entry() //  [R2]
         { []
         }
     {offset
       c6UpH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6UpI; else goto c6UpJ;
       c6UpI: // global
           R2 = R2;
           R1 = Data.Foldable.foldr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UpJ: // global
           I64[Sp - 8] = block_c6UpE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6UpN; else goto c6UpF;
       u6UpN: // global
           call _c6UpE(R1) args: 0, res: 0, upd: 0;
       c6UpF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldr1_info" {
     Data.Foldable.foldr1_info:
         const Data.Foldable.foldr1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6UpE() //  [R1]
         { []
         }
     {offset
       c6UpE: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UpE_info" {
     block_c6UpE_info:
         const _c6UpE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.918410131 UTC

[section ""data" . Data.Foldable.foldl1_closure" {
     Data.Foldable.foldl1_closure:
         const Data.Foldable.foldl1_info;
 },
 Data.Foldable.foldl1_entry() //  [R2]
         { []
         }
     {offset
       c6Uq4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Uq5; else goto c6Uq6;
       c6Uq5: // global
           R2 = R2;
           R1 = Data.Foldable.foldl1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Uq6: // global
           I64[Sp - 8] = block_c6Uq1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Uqa; else goto c6Uq2;
       u6Uqa: // global
           call _c6Uq1(R1) args: 0, res: 0, upd: 0;
       c6Uq2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldl1_info" {
     Data.Foldable.foldl1_info:
         const Data.Foldable.foldl1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Uq1() //  [R1]
         { []
         }
     {offset
       c6Uq1: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Uq1_info" {
     block_c6Uq1_info:
         const _c6Uq1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.923668333 UTC

[section ""data" . Data.Foldable.toList_closure" {
     Data.Foldable.toList_closure:
         const Data.Foldable.toList_info;
 },
 Data.Foldable.toList_entry() //  [R2]
         { []
         }
     {offset
       c6Uqr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Uqs; else goto c6Uqt;
       c6Uqs: // global
           R2 = R2;
           R1 = Data.Foldable.toList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Uqt: // global
           I64[Sp - 8] = block_c6Uqo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Uqx; else goto c6Uqp;
       u6Uqx: // global
           call _c6Uqo(R1) args: 0, res: 0, upd: 0;
       c6Uqp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.toList_info" {
     Data.Foldable.toList_info:
         const Data.Foldable.toList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Uqo() //  [R1]
         { []
         }
     {offset
       c6Uqo: // global
           R1 = P64[R1 + 71];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Uqo_info" {
     block_c6Uqo_info:
         const _c6Uqo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.929130041 UTC

[section ""data" . Data.Foldable.null_closure" {
     Data.Foldable.null_closure:
         const Data.Foldable.null_info;
 },
 Data.Foldable.null_entry() //  [R2]
         { []
         }
     {offset
       c6UqO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6UqP; else goto c6UqQ;
       c6UqP: // global
           R2 = R2;
           R1 = Data.Foldable.null_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UqQ: // global
           I64[Sp - 8] = block_c6UqL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6UqU; else goto c6UqM;
       u6UqU: // global
           call _c6UqL(R1) args: 0, res: 0, upd: 0;
       c6UqM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.null_info" {
     Data.Foldable.null_info:
         const Data.Foldable.null_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6UqL() //  [R1]
         { []
         }
     {offset
       c6UqL: // global
           R1 = P64[R1 + 79];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UqL_info" {
     block_c6UqL_info:
         const _c6UqL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.934481112 UTC

[section ""data" . Data.Foldable.length_closure" {
     Data.Foldable.length_closure:
         const Data.Foldable.length_info;
 },
 Data.Foldable.length_entry() //  [R2]
         { []
         }
     {offset
       c6Urb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Urc; else goto c6Urd;
       c6Urc: // global
           R2 = R2;
           R1 = Data.Foldable.length_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Urd: // global
           I64[Sp - 8] = block_c6Ur8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Urh; else goto c6Ur9;
       u6Urh: // global
           call _c6Ur8(R1) args: 0, res: 0, upd: 0;
       c6Ur9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.length_info" {
     Data.Foldable.length_info:
         const Data.Foldable.length_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Ur8() //  [R1]
         { []
         }
     {offset
       c6Ur8: // global
           R1 = P64[R1 + 87];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Ur8_info" {
     block_c6Ur8_info:
         const _c6Ur8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.940641521 UTC

[section ""data" . Data.Foldable.elem_closure" {
     Data.Foldable.elem_closure:
         const Data.Foldable.elem_info;
 },
 Data.Foldable.elem_entry() //  [R2]
         { []
         }
     {offset
       c6Ury: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Urz; else goto c6UrA;
       c6Urz: // global
           R2 = R2;
           R1 = Data.Foldable.elem_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UrA: // global
           I64[Sp - 8] = block_c6Urv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6UrE; else goto c6Urw;
       u6UrE: // global
           call _c6Urv(R1) args: 0, res: 0, upd: 0;
       c6Urw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.elem_info" {
     Data.Foldable.elem_info:
         const Data.Foldable.elem_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Urv() //  [R1]
         { []
         }
     {offset
       c6Urv: // global
           R1 = P64[R1 + 95];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Urv_info" {
     block_c6Urv_info:
         const _c6Urv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.945827637 UTC

[section ""data" . Data.Foldable.maximum_closure" {
     Data.Foldable.maximum_closure:
         const Data.Foldable.maximum_info;
 },
 Data.Foldable.maximum_entry() //  [R2]
         { []
         }
     {offset
       c6UrV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6UrW; else goto c6UrX;
       c6UrW: // global
           R2 = R2;
           R1 = Data.Foldable.maximum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UrX: // global
           I64[Sp - 8] = block_c6UrS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Us1; else goto c6UrT;
       u6Us1: // global
           call _c6UrS(R1) args: 0, res: 0, upd: 0;
       c6UrT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.maximum_info" {
     Data.Foldable.maximum_info:
         const Data.Foldable.maximum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6UrS() //  [R1]
         { []
         }
     {offset
       c6UrS: // global
           R1 = P64[R1 + 103];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UrS_info" {
     block_c6UrS_info:
         const _c6UrS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.950985914 UTC

[section ""data" . Data.Foldable.minimum_closure" {
     Data.Foldable.minimum_closure:
         const Data.Foldable.minimum_info;
 },
 Data.Foldable.minimum_entry() //  [R2]
         { []
         }
     {offset
       c6Usi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Usj; else goto c6Usk;
       c6Usj: // global
           R2 = R2;
           R1 = Data.Foldable.minimum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Usk: // global
           I64[Sp - 8] = block_c6Usf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Uso; else goto c6Usg;
       u6Uso: // global
           call _c6Usf(R1) args: 0, res: 0, upd: 0;
       c6Usg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.minimum_info" {
     Data.Foldable.minimum_info:
         const Data.Foldable.minimum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Usf() //  [R1]
         { []
         }
     {offset
       c6Usf: // global
           R1 = P64[R1 + 111];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Usf_info" {
     block_c6Usf_info:
         const _c6Usf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.956739846 UTC

[section ""data" . Data.Foldable.sum_closure" {
     Data.Foldable.sum_closure:
         const Data.Foldable.sum_info;
 },
 Data.Foldable.sum_entry() //  [R2]
         { []
         }
     {offset
       c6UsF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6UsG; else goto c6UsH;
       c6UsG: // global
           R2 = R2;
           R1 = Data.Foldable.sum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UsH: // global
           I64[Sp - 8] = block_c6UsC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6UsL; else goto c6UsD;
       u6UsL: // global
           call _c6UsC(R1) args: 0, res: 0, upd: 0;
       c6UsD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.sum_info" {
     Data.Foldable.sum_info:
         const Data.Foldable.sum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6UsC() //  [R1]
         { []
         }
     {offset
       c6UsC: // global
           R1 = P64[R1 + 119];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UsC_info" {
     block_c6UsC_info:
         const _c6UsC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.962030927 UTC

[section ""data" . Data.Foldable.product_closure" {
     Data.Foldable.product_closure:
         const Data.Foldable.product_info;
 },
 Data.Foldable.product_entry() //  [R2]
         { []
         }
     {offset
       c6Ut2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Ut3; else goto c6Ut4;
       c6Ut3: // global
           R2 = R2;
           R1 = Data.Foldable.product_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Ut4: // global
           I64[Sp - 8] = block_c6UsZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Ut8; else goto c6Ut0;
       u6Ut8: // global
           call _c6UsZ(R1) args: 0, res: 0, upd: 0;
       c6Ut0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.product_info" {
     Data.Foldable.product_info:
         const Data.Foldable.product_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6UsZ() //  [R1]
         { []
         }
     {offset
       c6UsZ: // global
           R1 = P64[R1 + 127];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UsZ_info" {
     block_c6UsZ_info:
         const _c6UsZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.968642661 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cfoldl_closure" {
     Data.Foldable.$fFoldableMaybe_$cfoldl_closure:
         const Data.Foldable.$fFoldableMaybe_$cfoldl_info;
 },
 Data.Foldable.$fFoldableMaybe_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Utt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Utu; else goto c6Utv;
       c6Utu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$cfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Utv: // global
           I64[Sp - 24] = block_c6Utm_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6UtC; else goto c6Utn;
       u6UtC: // global
           call _c6Utm(R1) args: 0, res: 0, upd: 0;
       c6Utn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cfoldl_info" {
     Data.Foldable.$fFoldableMaybe_$cfoldl_info:
         const Data.Foldable.$fFoldableMaybe_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Utm() //  [R1]
         { []
         }
     {offset
       c6Utm: // global
           _s6OXE::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6Utq; else goto c6Utr;
       c6Utq: // global
           R1 = _s6OXE::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Utr: // global
           R3 = P64[R1 + 6];
           R2 = _s6OXE::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Utm_info" {
     block_c6Utm_info:
         const _c6Utm;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.974529237 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cfoldr_closure" {
     Data.Foldable.$fFoldableMaybe_$cfoldr_closure:
         const Data.Foldable.$fFoldableMaybe_$cfoldr_info;
 },
 Data.Foldable.$fFoldableMaybe_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UtZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Uu0; else goto c6Uu1;
       c6Uu0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Uu1: // global
           I64[Sp - 24] = block_c6UtS_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6Uu8; else goto c6UtT;
       u6Uu8: // global
           call _c6UtS(R1) args: 0, res: 0, upd: 0;
       c6UtT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cfoldr_info" {
     Data.Foldable.$fFoldableMaybe_$cfoldr_info:
         const Data.Foldable.$fFoldableMaybe_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UtS() //  [R1]
         { []
         }
     {offset
       c6UtS: // global
           _s6OXJ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6UtW; else goto c6UtX;
       c6UtW: // global
           R1 = _s6OXJ::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6UtX: // global
           R3 = _s6OXJ::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UtS_info" {
     block_c6UtS_info:
         const _c6UtS;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.980445069 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cfoldMap_closure" {
     Data.Foldable.$fFoldableMaybe_$cfoldMap_closure:
         const Data.Foldable.$fFoldableMaybe_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableMaybe_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Uuv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Uuw; else goto c6Uux;
       c6Uuw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Uux: // global
           I64[Sp - 24] = block_c6Uuo_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6UuE; else goto c6Uup;
       u6UuE: // global
           call _c6Uuo(R1) args: 0, res: 0, upd: 0;
       c6Uup: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cfoldMap_info" {
     Data.Foldable.$fFoldableMaybe_$cfoldMap_info:
         const Data.Foldable.$fFoldableMaybe_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Uuo() //  [R1]
         { []
         }
     {offset
       c6Uuo: // global
           if (R1 & 7 == 1) goto c6Uus; else goto c6Uut;
       c6Uus: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c6Uut: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Uuo_info" {
     block_c6Uuo_info:
         const _c6Uuo;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.987362773 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$clength_closure" {
     Data.Foldable.$fFoldableNonEmpty_$clength_closure:
         const Data.Foldable.$fFoldableNonEmpty_$clength_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$clength_entry() //  [R2]
         { []
         }
     {offset
       c6UuX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Uv8; else goto c6Uv9;
       c6Uv8: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Uv9: // global
           I64[Sp - 8] = block_c6UuU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Uve; else goto c6UuV;
       u6Uve: // global
           call _c6UuU(R1) args: 0, res: 0, upd: 0;
       c6UuV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$clength_info" {
     Data.Foldable.$fFoldableNonEmpty_$clength_info:
         const Data.Foldable.$fFoldableNonEmpty_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6UuU() //  [R1]
         { []
         }
     {offset
       c6UuU: // global
           I64[Sp] = block_c6Uv0_info;
           R3 = 0;
           R2 = P64[R1 + 15];
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UuU_info" {
     block_c6UuU_info:
         const _c6UuU;
         const 0;
         const 30;
 },
 _c6Uv0() //  [R1]
         { []
         }
     {offset
       c6Uv0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Uvd; else goto c6Uvc;
       c6Uvd: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c6Uvc: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1 + 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Uv0_info" {
     block_c6Uv0_info:
         const _c6Uv0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:03.995086452 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$ctoList_closure" {
     Data.Foldable.$fFoldableNonEmpty_$ctoList_closure:
         const Data.Foldable.$fFoldableNonEmpty_$ctoList_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6UvA: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6UvE; else goto c6UvD;
       c6UvE: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UvD: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$ctoList_info" {
     Data.Foldable.$fFoldableNonEmpty_$ctoList_info:
         const Data.Foldable.$fFoldableNonEmpty_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.001648306 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfoldl1_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldl1_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl1_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfoldl1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Uw7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Uw8; else goto c6Uw9;
       c6Uw8: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfoldl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Uw9: // global
           I64[Sp - 16] = block_c6UvQ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6Uwq; else goto c6UvR;
       u6Uwq: // global
           call _c6UvQ(R1) args: 0, res: 0, upd: 0;
       c6UvR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfoldl1_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldl1_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6UvQ() //  [R1]
         { []
         }
     {offset
       c6UvQ: // global
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call _c6UvY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6UvQ_info" {
     block_c6UvQ_info:
         const _c6UvQ;
         const 1;
         const 30;
 },
 _c6UvY() //  []
         { []
         }
     {offset
       c6UvY: // global
           I64[Sp - 8] = block_c6Uw0_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Uwo; else goto c6Uw1;
       u6Uwo: // global
           call _c6Uw0(R1) args: 0, res: 0, upd: 0;
       c6Uw1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6Uw0() //  [R1]
         { []
         }
     {offset
       c6Uw0: // global
           _s6OYe::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6Uwf; else goto c6Uwg;
       c6Uwf: // global
           R1 = _s6OYe::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Uwg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6Uwj; else goto c6Uwi;
       c6Uwj: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Uwi: // global
           _s6OYg::P64 = P64[R1 + 6];
           _s6OYh::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s6OYe::P64;
           P64[Hp] = _s6OYg::P64;
           P64[Sp + 16] = _s6OYh::P64;
           P64[Sp + 8] = Hp - 32;
           Sp = Sp + 8;
           call _c6UvY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6Uw0_info" {
     block_c6Uw0_info:
         const _c6Uw0;
         const 131;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.010701706 UTC

[section ""data" . Data.Foldable.$w$cfoldl2_closure" {
     Data.Foldable.$w$cfoldl2_closure:
         const Data.Foldable.$w$cfoldl2_info;
 },
 Data.Foldable.$w$cfoldl2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6Ux3: // global
           _s6OYm::P64 = R5;
           _s6OYl::P64 = R4;
           _s6OYk::P64 = R3;
           _s6OYj::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c6Ux4; else goto c6Ux5;
       c6Ux5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6Ux7; else goto c6Ux6;
       c6Ux7: // global
           HpAlloc = 40;
           goto c6Ux4;
       c6Ux4: // global
           R5 = _s6OYm::P64;
           R4 = _s6OYl::P64;
           R3 = _s6OYk::P64;
           R2 = _s6OYj::P64;
           R1 = Data.Foldable.$w$cfoldl2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Ux6: // global
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s6OYj::P64;
           P64[Hp - 8] = _s6OYk::P64;
           P64[Hp] = _s6OYl::P64;
           P64[Sp - 24] = _s6OYj::P64;
           P64[Sp - 16] = _s6OYm::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 24;
           call _c6UwU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldl2_info" {
     Data.Foldable.$w$cfoldl2_info:
         const Data.Foldable.$w$cfoldl2_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c6UwU() //  []
         { []
         }
     {offset
       c6UwU: // global
           I64[Sp - 8] = block_c6UwW_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Uxk; else goto c6UwX;
       u6Uxk: // global
           call _c6UwW(R1) args: 0, res: 0, upd: 0;
       c6UwX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6UwW() //  [R1]
         { []
         }
     {offset
       c6UwW: // global
           _s6OYp::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6Uxc; else goto c6Uxd;
       c6Uxc: // global
           R1 = _s6OYp::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Uxd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6Uxg; else goto c6Uxf;
       c6Uxg: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Uxf: // global
           _s6OYr::P64 = P64[R1 + 6];
           _s6OYs::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s6OYp::P64;
           P64[Hp] = _s6OYr::P64;
           P64[Sp + 16] = _s6OYs::P64;
           P64[Sp + 24] = Hp - 32;
           Sp = Sp + 8;
           call _c6UwU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6UwW_info" {
     block_c6UwW_info:
         const _c6UwW;
         const 131;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.017740889 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfoldl_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldl_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UxK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6UxL; else goto c6UxM;
       c6UxL: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UxM: // global
           I64[Sp - 24] = block_c6UxH_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6UxQ; else goto c6UxI;
       u6UxQ: // global
           call _c6UxH(R1) args: 0, res: 0, upd: 0;
       c6UxI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfoldl_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldl_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UxH() //  [R1]
         { []
         }
     {offset
       c6UxH: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Foldable.$w$cfoldl2_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UxH_info" {
     block_c6UxH_info:
         const _c6UxH;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.025489818 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfoldr_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldr_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr_info;
 },
 go_s6OYL_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Uyp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Uyq; else goto c6Uyr;
       c6Uyq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Uyr: // global
           I64[Sp - 32] = block_c6Uyi_info;
           _s6OYL::P64 = R1;
           _s6OYB::P64 = P64[R1 + 7];
           _s6OYC::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s6OYB::P64;
           P64[Sp - 16] = _s6OYC::P64;
           P64[Sp - 8] = _s6OYL::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6UyB; else goto c6Uyj;
       u6UyB: // global
           call _c6Uyi(R1) args: 0, res: 0, upd: 0;
       c6Uyj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6OYL_info" {
     go_s6OYL_info:
         const go_s6OYL_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c6Uyi() //  [R1]
         { []
         }
     {offset
       c6Uyi: // global
           if (R1 & 7 == 1) goto c6Uym; else goto c6Uyn;
       c6Uym: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Uyn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6UyA; else goto c6Uyz;
       c6UyA: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Uyz: // global
           _s6OYO::P64 = P64[R1 + 6];
           _s6OYP::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s6OYP::P64;
           R3 = Hp - 24;
           R2 = _s6OYO::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Uyi_info" {
     block_c6Uyi_info:
         const _c6Uyi;
         const 3;
         const 30;
 },
 sat_s6OYR_entry() //  [R1]
         { []
         }
     {offset
       c6UyC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6UyD; else goto c6UyE;
       c6UyD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6UyE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6Uy8_info;
           _s6OYB::P64 = P64[R1 + 16];
           _s6OYC::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6OYB::P64;
           P64[Sp - 24] = _s6OYC::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6UyI; else goto c6Uy9;
       u6UyI: // global
           call _c6Uy8(R1) args: 0, res: 0, upd: 0;
       c6Uy9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6OYR_info" {
     sat_s6OYR_info:
         const sat_s6OYR_entry;
         const 3;
         const 15;
 },
 _c6Uy8() //  [R1]
         { []
         }
     {offset
       c6Uy8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6UyH; else goto c6UyG;
       c6UyH: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6UyG: // global
           _s6OYK::P64 = P64[R1 + 15];
           I64[Hp - 16] = go_s6OYL_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = _s6OYK::P64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go_s6OYL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Uy8_info" {
     block_c6Uy8_info:
         const _c6Uy8;
         const 2;
         const 30;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UyK: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6UyO; else goto c6UyN;
       c6UyO: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UyN: // global
           I64[Hp - 56] = sat_s6OYR_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = R4;
           R3 = Hp - 56;
           _s6OYB::P64 = R2;
           R2 = Hp - 16;
           R1 = _s6OYB::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfoldr_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldr_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.036298434 UTC

[section ""data" . Data.Foldable.$fFoldable:*:4_closure" {
     Data.Foldable.$fFoldable:*:4_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.038307685 UTC

[section ""data" . Data.Foldable.$fFoldableDual3_closure" {
     Data.Foldable.$fFoldableDual3_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.040850966 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$clength_closure" {
     Data.Foldable.$fFoldableEither_$clength_closure:
         const Data.Foldable.$fFoldableEither_$clength_info;
 },
 Data.Foldable.$fFoldableEither_$clength_entry() //  [R2]
         { []
         }
     {offset
       c6Uzr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Uzs; else goto c6Uzt;
       c6Uzs: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Uzt: // global
           I64[Sp - 8] = block_c6Uzk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6UzA; else goto c6Uzl;
       u6UzA: // global
           call _c6Uzk(R1) args: 0, res: 0, upd: 0;
       c6Uzl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$clength_info" {
     Data.Foldable.$fFoldableEither_$clength_info:
         const Data.Foldable.$fFoldableEither_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Uzk() //  [R1]
         { []
         }
     {offset
       c6Uzk: // global
           if (R1 & 7 == 1) goto c6Uzo; else goto c6Uzp;
       c6Uzo: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Uzp: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Uzk_info" {
     block_c6Uzk_info:
         const _c6Uzk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.046845442 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$cfoldr_closure" {
     Data.Foldable.$fFoldableEither_$cfoldr_closure:
         const Data.Foldable.$fFoldableEither_$cfoldr_info;
 },
 Data.Foldable.$fFoldableEither_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UzZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6UA0; else goto c6UA1;
       c6UA0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UA1: // global
           I64[Sp - 24] = block_c6UzS_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6UA8; else goto c6UzT;
       u6UA8: // global
           call _c6UzS(R1) args: 0, res: 0, upd: 0;
       c6UzT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$cfoldr_info" {
     Data.Foldable.$fFoldableEither_$cfoldr_info:
         const Data.Foldable.$fFoldableEither_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UzS() //  [R1]
         { []
         }
     {offset
       c6UzS: // global
           _s6OYX::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6UzW; else goto c6UzX;
       c6UzW: // global
           R1 = _s6OYX::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6UzX: // global
           R3 = _s6OYX::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UzS_info" {
     block_c6UzS_info:
         const _c6UzS;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.053227152 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$cfoldMap_closure" {
     Data.Foldable.$fFoldableEither_$cfoldMap_closure:
         const Data.Foldable.$fFoldableEither_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableEither_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UAv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6UAw; else goto c6UAx;
       c6UAw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UAx: // global
           I64[Sp - 24] = block_c6UAo_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6UAE; else goto c6UAp;
       u6UAE: // global
           call _c6UAo(R1) args: 0, res: 0, upd: 0;
       c6UAp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$cfoldMap_info" {
     Data.Foldable.$fFoldableEither_$cfoldMap_info:
         const Data.Foldable.$fFoldableEither_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UAo() //  [R1]
         { []
         }
     {offset
       c6UAo: // global
           if (R1 & 7 == 1) goto c6UAs; else goto c6UAt;
       c6UAs: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c6UAt: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UAo_info" {
     block_c6UAo_info:
         const _c6UAo;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.059670275 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$cfoldr_closure" {
     Data.Foldable.$fFoldable(,)_$cfoldr_closure:
         const Data.Foldable.$fFoldable(,)_$cfoldr_info;
 },
 Data.Foldable.$fFoldable(,)_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UAX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6UAY; else goto c6UAZ;
       c6UAY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UAZ: // global
           I64[Sp - 24] = block_c6UAU_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6UB3; else goto c6UAV;
       u6UB3: // global
           call _c6UAU(R1) args: 0, res: 0, upd: 0;
       c6UAV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$cfoldr_info" {
     Data.Foldable.$fFoldable(,)_$cfoldr_info:
         const Data.Foldable.$fFoldable(,)_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UAU() //  [R1]
         { []
         }
     {offset
       c6UAU: // global
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UAU_info" {
     block_c6UAU_info:
         const _c6UAU;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.065434989 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$cfoldMap_closure" {
     Data.Foldable.$fFoldable(,)_$cfoldMap_closure:
         const Data.Foldable.$fFoldable(,)_$cfoldMap_info;
 },
 Data.Foldable.$fFoldable(,)_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UBk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UBl; else goto c6UBm;
       c6UBl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UBm: // global
           I64[Sp - 16] = block_c6UBh_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6UBq; else goto c6UBi;
       u6UBq: // global
           call _c6UBh(R1) args: 0, res: 0, upd: 0;
       c6UBi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$cfoldMap_info" {
     Data.Foldable.$fFoldable(,)_$cfoldMap_info:
         const Data.Foldable.$fFoldable(,)_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UBh() //  [R1]
         { []
         }
     {offset
       c6UBh: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UBh_info" {
     block_c6UBh_info:
         const _c6UBh;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.070963625 UTC

[section ""data" . Data.Foldable.$fFoldableArray_$cnull_closure" {
     Data.Foldable.$fFoldableArray_$cnull_closure:
         const Data.Foldable.$fFoldableArray_$cnull_info;
 },
 Data.Foldable.$fFoldableArray_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6UBH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6UBI; else goto c6UBJ;
       c6UBI: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableArray_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UBJ: // global
           I64[Sp - 8] = block_c6UBE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6UBR; else goto c6UBF;
       u6UBR: // global
           call _c6UBE(R1) args: 0, res: 0, upd: 0;
       c6UBF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableArray_$cnull_info" {
     Data.Foldable.$fFoldableArray_$cnull_info:
         const Data.Foldable.$fFoldableArray_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6UBE() //  [R1]
         { []
         }
     {offset
       c6UBE: // global
           if (I64[R1 + 31] == 0) goto c6UBQ; else goto c6UBP;
       c6UBQ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6UBP: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UBE_info" {
     block_c6UBE_info:
         const _c6UBE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.075815546 UTC

[section ""data" . sat_s6OZr_closure" {
     sat_s6OZr_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.077818663 UTC

[section ""data" . sat_s6OZs_closure" {
     sat_s6OZs_closure:
         const :_con_info;
         const sat_s6OZr_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.08021231 UTC

[section ""data" . Data.Foldable.$fFoldableProxy1_closure" {
     Data.Foldable.$fFoldableProxy1_closure:
         const Data.Foldable.$fFoldableProxy1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableProxy1_entry() //  [R1]
         { []
         }
     {offset
       c6UCb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UCc; else goto c6UCd;
       c6UCc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6UCd: // global
           (_c6UC8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6UC8::I64 == 0) goto c6UCa; else goto c6UC9;
       c6UCa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6UC9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6UC8::I64;
           R3 = sat_s6OZs_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy1_info" {
     Data.Foldable.$fFoldableProxy1_info:
         const Data.Foldable.$fFoldableProxy1_entry;
         const 0;
         const 4294967317;
         const S6PH7_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.084895337 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cproduct_closure" {
     Data.Foldable.$fFoldableProxy_$cproduct_closure:
         const Data.Foldable.$fFoldableProxy_$cproduct_info;
         const 0;
 },
 Data.Foldable.$fFoldableProxy_$cproduct_entry() //  [R2, R3]
         { []
         }
     {offset
       c6UCp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UCq; else goto c6UCr;
       c6UCq: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableProxy_$cproduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UCr: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Foldable.$fFoldableProxy1_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cproduct_info" {
     Data.Foldable.$fFoldableProxy_$cproduct_info:
         const Data.Foldable.$fFoldableProxy_$cproduct_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.088750338 UTC

[section ""data" . Data.Foldable.$fFoldableProxy2_closure" {
     Data.Foldable.$fFoldableProxy2_closure:
         const Data.Foldable.$fFoldableProxy2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableProxy2_entry() //  [R1]
         { []
         }
     {offset
       c6UCD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UCE; else goto c6UCF;
       c6UCE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6UCF: // global
           (_c6UCA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6UCA::I64 == 0) goto c6UCC; else goto c6UCB;
       c6UCC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6UCB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6UCA::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy2_info" {
     Data.Foldable.$fFoldableProxy2_info:
         const Data.Foldable.$fFoldableProxy2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.092742858 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$csum_closure" {
     Data.Foldable.$fFoldableProxy_$csum_closure:
         const Data.Foldable.$fFoldableProxy_$csum_info;
         const 0;
 },
 Data.Foldable.$fFoldableProxy_$csum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6UCR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UCS; else goto c6UCT;
       c6UCS: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableProxy_$csum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UCT: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Foldable.$fFoldableProxy2_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$csum_info" {
     Data.Foldable.$fFoldableProxy_$csum_info:
         const Data.Foldable.$fFoldableProxy_$csum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.096261534 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$celem_closure" {
     Data.Foldable.$fFoldableProxy_$celem_closure:
         const Data.Foldable.$fFoldableProxy_$celem_info;
 },
 Data.Foldable.$fFoldableProxy_$celem_entry() //  []
         { []
         }
     {offset
       c6UD3: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$celem_info" {
     Data.Foldable.$fFoldableProxy_$celem_info:
         const Data.Foldable.$fFoldableProxy_$celem_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.099959644 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$clength_closure" {
     Data.Foldable.$fFoldableProxy_$clength_closure:
         const Data.Foldable.$fFoldableProxy_$clength_info;
 },
 Data.Foldable.$fFoldableProxy_$clength_entry() //  []
         { []
         }
     {offset
       c6UDf: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$clength_info" {
     Data.Foldable.$fFoldableProxy_$clength_info:
         const Data.Foldable.$fFoldableProxy_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.103314685 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cnull_closure" {
     Data.Foldable.$fFoldableProxy_$cnull_closure:
         const Data.Foldable.$fFoldableProxy_$cnull_info;
 },
 Data.Foldable.$fFoldableProxy_$cnull_entry() //  []
         { []
         }
     {offset
       c6UDr: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cnull_info" {
     Data.Foldable.$fFoldableProxy_$cnull_info:
         const Data.Foldable.$fFoldableProxy_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.106460529 UTC

[section ""cstring" . Data.Foldable.$fFoldableProxy4_bytes" {
     Data.Foldable.$fFoldableProxy4_bytes:
         I8[] [102,111,108,100,108,49,58,32,80,114,111,120,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.108833669 UTC

[section ""data" . Data.Foldable.$fFoldableProxy3_closure" {
     Data.Foldable.$fFoldableProxy3_closure:
         const Data.Foldable.$fFoldableProxy3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableProxy3_entry() //  [R1]
         { []
         }
     {offset
       c6UDG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UDH; else goto c6UDI;
       c6UDH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6UDI: // global
           (_c6UDD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6UDD::I64 == 0) goto c6UDF; else goto c6UDE;
       c6UDF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6UDE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6UDD::I64;
           R2 = Data.Foldable.$fFoldableProxy4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy3_info" {
     Data.Foldable.$fFoldableProxy3_info:
         const Data.Foldable.$fFoldableProxy3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.11388296 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cfoldl1_closure" {
     Data.Foldable.$fFoldableProxy_$cfoldl1_closure:
         const Data.Foldable.$fFoldableProxy_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableProxy_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c6UDU: // global
           R2 = Data.Foldable.$fFoldableProxy3_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cfoldl1_info" {
     Data.Foldable.$fFoldableProxy_$cfoldl1_info:
         const Data.Foldable.$fFoldableProxy_$cfoldl1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.116947496 UTC

[section ""cstring" . Data.Foldable.$fFoldableProxy6_bytes" {
     Data.Foldable.$fFoldableProxy6_bytes:
         I8[] [102,111,108,100,114,49,58,32,80,114,111,120,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.119134899 UTC

[section ""data" . Data.Foldable.$fFoldableProxy5_closure" {
     Data.Foldable.$fFoldableProxy5_closure:
         const Data.Foldable.$fFoldableProxy5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableProxy5_entry() //  [R1]
         { []
         }
     {offset
       c6UE8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UE9; else goto c6UEa;
       c6UE9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6UEa: // global
           (_c6UE5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6UE5::I64 == 0) goto c6UE7; else goto c6UE6;
       c6UE7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6UE6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6UE5::I64;
           R2 = Data.Foldable.$fFoldableProxy6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy5_info" {
     Data.Foldable.$fFoldableProxy5_info:
         const Data.Foldable.$fFoldableProxy5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.122980256 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cfoldr1_closure" {
     Data.Foldable.$fFoldableProxy_$cfoldr1_closure:
         const Data.Foldable.$fFoldableProxy_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableProxy_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c6UEm: // global
           R2 = Data.Foldable.$fFoldableProxy5_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cfoldr1_info" {
     Data.Foldable.$fFoldableProxy_$cfoldr1_info:
         const Data.Foldable.$fFoldableProxy_$cfoldr1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S6PH7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.126590017 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cfoldl_closure" {
     Data.Foldable.$fFoldableProxy_$cfoldl_closure:
         const Data.Foldable.$fFoldableProxy_$cfoldl_info;
 },
 Data.Foldable.$fFoldableProxy_$cfoldl_entry() //  [R3]
         { []
         }
     {offset
       c6UEx: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cfoldl_info" {
     Data.Foldable.$fFoldableProxy_$cfoldl_info:
         const Data.Foldable.$fFoldableProxy_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.129942342 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cfoldr_closure" {
     Data.Foldable.$fFoldableProxy_$cfoldr_closure:
         const Data.Foldable.$fFoldableProxy_$cfoldr_info;
 },
 Data.Foldable.$fFoldableProxy_$cfoldr_entry() //  [R3]
         { []
         }
     {offset
       c6UEI: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cfoldr_info" {
     Data.Foldable.$fFoldableProxy_$cfoldr_info:
         const Data.Foldable.$fFoldableProxy_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.133273093 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cfoldMap_closure" {
     Data.Foldable.$fFoldableProxy_$cfoldMap_closure:
         const Data.Foldable.$fFoldableProxy_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableProxy_$cfoldMap_entry() //  [R2]
         { []
         }
     {offset
       c6UET: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cfoldMap_info" {
     Data.Foldable.$fFoldableProxy_$cfoldMap_info:
         const Data.Foldable.$fFoldableProxy_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.136602772 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cfold_closure" {
     Data.Foldable.$fFoldableProxy_$cfold_closure:
         const Data.Foldable.$fFoldableProxy_$cfold_info;
 },
 Data.Foldable.$fFoldableProxy_$cfold_entry() //  [R2]
         { []
         }
     {offset
       c6UF4: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cfold_info" {
     Data.Foldable.$fFoldableProxy_$cfold_info:
         const Data.Foldable.$fFoldableProxy_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.140234891 UTC

[section ""data" . Data.Foldable.$fFoldableDual1_closure" {
     Data.Foldable.$fFoldableDual1_closure:
         const Data.Foldable.$fFoldableDual1_info;
 },
 Data.Foldable.$fFoldableDual1_entry() //  [R3]
         { []
         }
     {offset
       c6UFf: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Dual2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual1_info" {
     Data.Foldable.$fFoldableDual1_info:
         const Data.Foldable.$fFoldableDual1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.14343729 UTC

[section ""data" . Data.Foldable.$fFoldableDual2_closure" {
     Data.Foldable.$fFoldableDual2_closure:
         const Data.Foldable.$fFoldableDual2_info;
 },
 Data.Foldable.$fFoldableDual2_entry() //  [R3]
         { []
         }
     {offset
       c6UFq: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Dual2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual2_info" {
     Data.Foldable.$fFoldableDual2_info:
         const Data.Foldable.$fFoldableDual2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.147287705 UTC

[section ""data" . Data.Foldable.$fFoldableDual_$clength_closure" {
     Data.Foldable.$fFoldableDual_$clength_closure:
         const Data.Foldable.$fFoldableDual_$clength_info;
 },
 Data.Foldable.$fFoldableDual_$clength_entry() //  []
         { []
         }
     {offset
       c6UFB: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual_$clength_info" {
     Data.Foldable.$fFoldableDual_$clength_info:
         const Data.Foldable.$fFoldableDual_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.150531161 UTC

[section ""data" . Data.Foldable.$fFoldableDual_$cnull_closure" {
     Data.Foldable.$fFoldableDual_$cnull_closure:
         const Data.Foldable.$fFoldableDual_$cnull_info;
 },
 Data.Foldable.$fFoldableDual_$cnull_entry() //  []
         { []
         }
     {offset
       c6UFN: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual_$cnull_info" {
     Data.Foldable.$fFoldableDual_$cnull_info:
         const Data.Foldable.$fFoldableDual_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.154149666 UTC

[section ""data" . Data.Foldable.$fFoldableDual_$ctoList_closure" {
     Data.Foldable.$fFoldableDual_$ctoList_closure:
         const Data.Foldable.$fFoldableDual_$ctoList_info;
 },
 Data.Foldable.$fFoldableDual_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6UG0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6UG4; else goto c6UG3;
       c6UG4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableDual_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UG3: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual_$ctoList_info" {
     Data.Foldable.$fFoldableDual_$ctoList_info:
         const Data.Foldable.$fFoldableDual_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.158217023 UTC

[section ""data" . Data.Foldable.$fFoldableDual4_closure" {
     Data.Foldable.$fFoldableDual4_closure:
         const Data.Foldable.$fFoldableDual4_info;
 },
 Data.Foldable.$fFoldableDual4_entry() //  [R3]
         { []
         }
     {offset
       c6UGe: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Dual2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual4_info" {
     Data.Foldable.$fFoldableDual4_info:
         const Data.Foldable.$fFoldableDual4_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.161600497 UTC

[section ""data" . Data.Foldable.$fFoldableDual5_closure" {
     Data.Foldable.$fFoldableDual5_closure:
         const Data.Foldable.$fFoldableDual5_info;
 },
 Data.Foldable.$fFoldableDual5_entry() //  [R2]
         { []
         }
     {offset
       c6UGp: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual5_info" {
     Data.Foldable.$fFoldableDual5_info:
         const Data.Foldable.$fFoldableDual5_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.16565413 UTC

[section ""data" . Data.Foldable.$fFoldableDual_$cfoldr_closure" {
     Data.Foldable.$fFoldableDual_$cfoldr_closure:
         const Data.Foldable.$fFoldableDual_$cfoldr_info;
 },
 Data.Foldable.$fFoldableDual_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UGA: // global
           R3 = R3;
           _s6OZY::P64 = R2;
           R2 = R4;
           R1 = _s6OZY::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual_$cfoldr_info" {
     Data.Foldable.$fFoldableDual_$cfoldr_info:
         const Data.Foldable.$fFoldableDual_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.168802241 UTC

[section ""data" . Data.Foldable.$fFoldableDual6_closure" {
     Data.Foldable.$fFoldableDual6_closure:
         const Data.Foldable.$fFoldableDual6_info;
 },
 Data.Foldable.$fFoldableDual6_entry() //  [R3]
         { []
         }
     {offset
       c6UGL: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual6_info" {
     Data.Foldable.$fFoldableDual6_info:
         const Data.Foldable.$fFoldableDual6_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.172066627 UTC

[section ""data" . Data.Foldable.$fFoldableSum1_closure" {
     Data.Foldable.$fFoldableSum1_closure:
         const Data.Foldable.$fFoldableSum1_info;
 },
 Data.Foldable.$fFoldableSum1_entry() //  [R3]
         { []
         }
     {offset
       c6UGW: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Sum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableSum1_info" {
     Data.Foldable.$fFoldableSum1_info:
         const Data.Foldable.$fFoldableSum1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.175391298 UTC

[section ""data" . Data.Foldable.$fFoldableSum2_closure" {
     Data.Foldable.$fFoldableSum2_closure:
         const Data.Foldable.$fFoldableSum2_info;
 },
 Data.Foldable.$fFoldableSum2_entry() //  [R3]
         { []
         }
     {offset
       c6UH7: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Sum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableSum2_info" {
     Data.Foldable.$fFoldableSum2_info:
         const Data.Foldable.$fFoldableSum2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.179079327 UTC

[section ""data" . Data.Foldable.$fFoldableSum_$clength_closure" {
     Data.Foldable.$fFoldableSum_$clength_closure:
         const Data.Foldable.$fFoldableSum_$clength_info;
 },
 Data.Foldable.$fFoldableSum_$clength_entry() //  []
         { []
         }
     {offset
       c6UHi: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableSum_$clength_info" {
     Data.Foldable.$fFoldableSum_$clength_info:
         const Data.Foldable.$fFoldableSum_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.182516268 UTC

[section ""data" . Data.Foldable.$fFoldableSum_$cnull_closure" {
     Data.Foldable.$fFoldableSum_$cnull_closure:
         const Data.Foldable.$fFoldableSum_$cnull_info;
 },
 Data.Foldable.$fFoldableSum_$cnull_entry() //  []
         { []
         }
     {offset
       c6UHu: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableSum_$cnull_info" {
     Data.Foldable.$fFoldableSum_$cnull_info:
         const Data.Foldable.$fFoldableSum_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.186143905 UTC

[section ""data" . Data.Foldable.$fFoldableSum_$ctoList_closure" {
     Data.Foldable.$fFoldableSum_$ctoList_closure:
         const Data.Foldable.$fFoldableSum_$ctoList_info;
 },
 Data.Foldable.$fFoldableSum_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6UHH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6UHL; else goto c6UHK;
       c6UHL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableSum_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UHK: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableSum_$ctoList_info" {
     Data.Foldable.$fFoldableSum_$ctoList_info:
         const Data.Foldable.$fFoldableSum_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.189793086 UTC

[section ""data" . Data.Foldable.$fFoldableSum3_closure" {
     Data.Foldable.$fFoldableSum3_closure:
         const Data.Foldable.$fFoldableSum3_info;
 },
 Data.Foldable.$fFoldableSum3_entry() //  [R3]
         { []
         }
     {offset
       c6UHV: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Sum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableSum3_info" {
     Data.Foldable.$fFoldableSum3_info:
         const Data.Foldable.$fFoldableSum3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.193561574 UTC

[section ""data" . Data.Foldable.$fFoldableSum_$cfoldr_closure" {
     Data.Foldable.$fFoldableSum_$cfoldr_closure:
         const Data.Foldable.$fFoldableSum_$cfoldr_info;
 },
 Data.Foldable.$fFoldableSum_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UI6: // global
           R3 = R3;
           _s6P09::P64 = R2;
           R2 = R4;
           R1 = _s6P09::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableSum_$cfoldr_info" {
     Data.Foldable.$fFoldableSum_$cfoldr_info:
         const Data.Foldable.$fFoldableSum_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.196746667 UTC

[section ""data" . Data.Foldable.$fFoldableProduct1_closure" {
     Data.Foldable.$fFoldableProduct1_closure:
         const Data.Foldable.$fFoldableProduct1_info;
 },
 Data.Foldable.$fFoldableProduct1_entry() //  [R3]
         { []
         }
     {offset
       c6UIh: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Product2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProduct1_info" {
     Data.Foldable.$fFoldableProduct1_info:
         const Data.Foldable.$fFoldableProduct1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.200040072 UTC

[section ""data" . Data.Foldable.$fFoldableProduct2_closure" {
     Data.Foldable.$fFoldableProduct2_closure:
         const Data.Foldable.$fFoldableProduct2_info;
 },
 Data.Foldable.$fFoldableProduct2_entry() //  [R3]
         { []
         }
     {offset
       c6UIs: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Product2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProduct2_info" {
     Data.Foldable.$fFoldableProduct2_info:
         const Data.Foldable.$fFoldableProduct2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.203841311 UTC

[section ""data" . Data.Foldable.$fFoldableProduct_$clength_closure" {
     Data.Foldable.$fFoldableProduct_$clength_closure:
         const Data.Foldable.$fFoldableProduct_$clength_info;
 },
 Data.Foldable.$fFoldableProduct_$clength_entry() //  []
         { []
         }
     {offset
       c6UID: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProduct_$clength_info" {
     Data.Foldable.$fFoldableProduct_$clength_info:
         const Data.Foldable.$fFoldableProduct_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.20712961 UTC

[section ""data" . Data.Foldable.$fFoldableProduct_$cnull_closure" {
     Data.Foldable.$fFoldableProduct_$cnull_closure:
         const Data.Foldable.$fFoldableProduct_$cnull_info;
 },
 Data.Foldable.$fFoldableProduct_$cnull_entry() //  []
         { []
         }
     {offset
       c6UIP: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProduct_$cnull_info" {
     Data.Foldable.$fFoldableProduct_$cnull_info:
         const Data.Foldable.$fFoldableProduct_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.210804694 UTC

[section ""data" . Data.Foldable.$fFoldableProduct_$ctoList_closure" {
     Data.Foldable.$fFoldableProduct_$ctoList_closure:
         const Data.Foldable.$fFoldableProduct_$ctoList_info;
 },
 Data.Foldable.$fFoldableProduct_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6UJ2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6UJ6; else goto c6UJ5;
       c6UJ6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableProduct_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UJ5: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProduct_$ctoList_info" {
     Data.Foldable.$fFoldableProduct_$ctoList_info:
         const Data.Foldable.$fFoldableProduct_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.214758476 UTC

[section ""data" . Data.Foldable.$fFoldableProduct3_closure" {
     Data.Foldable.$fFoldableProduct3_closure:
         const Data.Foldable.$fFoldableProduct3_info;
 },
 Data.Foldable.$fFoldableProduct3_entry() //  [R3]
         { []
         }
     {offset
       c6UJg: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Product2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProduct3_info" {
     Data.Foldable.$fFoldableProduct3_info:
         const Data.Foldable.$fFoldableProduct3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.218747399 UTC

[section ""data" . Data.Foldable.$fFoldableProduct_$cfoldr_closure" {
     Data.Foldable.$fFoldableProduct_$cfoldr_closure:
         const Data.Foldable.$fFoldableProduct_$cfoldr_info;
 },
 Data.Foldable.$fFoldableProduct_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UJr: // global
           R3 = R3;
           _s6P0i::P64 = R2;
           R2 = R4;
           R1 = _s6P0i::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProduct_$cfoldr_info" {
     Data.Foldable.$fFoldableProduct_$cfoldr_info:
         const Data.Foldable.$fFoldableProduct_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.2222645 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cproduct_closure" {
     Data.Foldable.$fFoldableU1_$cproduct_closure:
         const Data.Foldable.$fFoldableU1_$cproduct_info;
         const 0;
 },
 Data.Foldable.$fFoldableU1_$cproduct_entry() //  [R2, R3]
         { []
         }
     {offset
       c6UJC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UJD; else goto c6UJE;
       c6UJD: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableU1_$cproduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UJE: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Foldable.$fFoldableProxy1_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cproduct_info" {
     Data.Foldable.$fFoldableU1_$cproduct_info:
         const Data.Foldable.$fFoldableU1_$cproduct_entry;
         const 0;
         const 279172874254;
         const 8589934607;
         const S6PH7_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.225872969 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$csum_closure" {
     Data.Foldable.$fFoldableU1_$csum_closure:
         const Data.Foldable.$fFoldableU1_$csum_info;
         const 0;
 },
 Data.Foldable.$fFoldableU1_$csum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6UJO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UJP; else goto c6UJQ;
       c6UJP: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableU1_$csum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UJQ: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Foldable.$fFoldableProxy2_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$csum_info" {
     Data.Foldable.$fFoldableU1_$csum_info:
         const Data.Foldable.$fFoldableU1_$csum_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const S6PH7_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.229596904 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$celem_closure" {
     Data.Foldable.$fFoldableU1_$celem_closure:
         const Data.Foldable.$fFoldableU1_$celem_info;
 },
 Data.Foldable.$fFoldableU1_$celem_entry() //  []
         { []
         }
     {offset
       c6UK0: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$celem_info" {
     Data.Foldable.$fFoldableU1_$celem_info:
         const Data.Foldable.$fFoldableU1_$celem_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.232951824 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$clength_closure" {
     Data.Foldable.$fFoldableU1_$clength_closure:
         const Data.Foldable.$fFoldableU1_$clength_info;
 },
 Data.Foldable.$fFoldableU1_$clength_entry() //  []
         { []
         }
     {offset
       c6UKc: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$clength_info" {
     Data.Foldable.$fFoldableU1_$clength_info:
         const Data.Foldable.$fFoldableU1_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.236322099 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cnull_closure" {
     Data.Foldable.$fFoldableU1_$cnull_closure:
         const Data.Foldable.$fFoldableU1_$cnull_info;
 },
 Data.Foldable.$fFoldableU1_$cnull_entry() //  []
         { []
         }
     {offset
       c6UKo: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cnull_info" {
     Data.Foldable.$fFoldableU1_$cnull_info:
         const Data.Foldable.$fFoldableU1_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.239423111 UTC

[section ""cstring" . Data.Foldable.$fFoldableU3_bytes" {
     Data.Foldable.$fFoldableU3_bytes:
         I8[] [102,111,108,100,108,49,58,32,85,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.242274622 UTC

[section ""data" . Data.Foldable.$fFoldableU2_closure" {
     Data.Foldable.$fFoldableU2_closure:
         const Data.Foldable.$fFoldableU2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableU2_entry() //  [R1]
         { []
         }
     {offset
       c6UKD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UKE; else goto c6UKF;
       c6UKE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6UKF: // global
           (_c6UKA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6UKA::I64 == 0) goto c6UKC; else goto c6UKB;
       c6UKC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6UKB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6UKA::I64;
           R2 = Data.Foldable.$fFoldableU3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU2_info" {
     Data.Foldable.$fFoldableU2_info:
         const Data.Foldable.$fFoldableU2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.246655412 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cfoldl1_closure" {
     Data.Foldable.$fFoldableU1_$cfoldl1_closure:
         const Data.Foldable.$fFoldableU1_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableU1_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c6UKR: // global
           R2 = Data.Foldable.$fFoldableU2_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cfoldl1_info" {
     Data.Foldable.$fFoldableU1_$cfoldl1_info:
         const Data.Foldable.$fFoldableU1_$cfoldl1_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const S6PH7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.249507694 UTC

[section ""cstring" . Data.Foldable.$fFoldableU5_bytes" {
     Data.Foldable.$fFoldableU5_bytes:
         I8[] [102,111,108,100,114,49,58,32,85,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.251682006 UTC

[section ""data" . Data.Foldable.$fFoldableU4_closure" {
     Data.Foldable.$fFoldableU4_closure:
         const Data.Foldable.$fFoldableU4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableU4_entry() //  [R1]
         { []
         }
     {offset
       c6UL5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UL6; else goto c6UL7;
       c6UL6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6UL7: // global
           (_c6UL2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6UL2::I64 == 0) goto c6UL4; else goto c6UL3;
       c6UL4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6UL3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6UL2::I64;
           R2 = Data.Foldable.$fFoldableU5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU4_info" {
     Data.Foldable.$fFoldableU4_info:
         const Data.Foldable.$fFoldableU4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.255766191 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cfoldr1_closure" {
     Data.Foldable.$fFoldableU1_$cfoldr1_closure:
         const Data.Foldable.$fFoldableU1_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableU1_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c6ULj: // global
           R2 = Data.Foldable.$fFoldableU4_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cfoldr1_info" {
     Data.Foldable.$fFoldableU1_$cfoldr1_info:
         const Data.Foldable.$fFoldableU1_$cfoldr1_entry;
         const 0;
         const 279172874254;
         const 8589934607;
         const S6PH7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.259058275 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cfoldl_closure" {
     Data.Foldable.$fFoldableU1_$cfoldl_closure:
         const Data.Foldable.$fFoldableU1_$cfoldl_info;
 },
 Data.Foldable.$fFoldableU1_$cfoldl_entry() //  [R3]
         { []
         }
     {offset
       c6ULu: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cfoldl_info" {
     Data.Foldable.$fFoldableU1_$cfoldl_info:
         const Data.Foldable.$fFoldableU1_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.262347491 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cfoldr_closure" {
     Data.Foldable.$fFoldableU1_$cfoldr_closure:
         const Data.Foldable.$fFoldableU1_$cfoldr_info;
 },
 Data.Foldable.$fFoldableU1_$cfoldr_entry() //  [R3]
         { []
         }
     {offset
       c6ULF: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cfoldr_info" {
     Data.Foldable.$fFoldableU1_$cfoldr_info:
         const Data.Foldable.$fFoldableU1_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.265645786 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cfoldMap_closure" {
     Data.Foldable.$fFoldableU1_$cfoldMap_closure:
         const Data.Foldable.$fFoldableU1_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableU1_$cfoldMap_entry() //  [R2]
         { []
         }
     {offset
       c6ULQ: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cfoldMap_info" {
     Data.Foldable.$fFoldableU1_$cfoldMap_info:
         const Data.Foldable.$fFoldableU1_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.268884753 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cfold_closure" {
     Data.Foldable.$fFoldableU1_$cfold_closure:
         const Data.Foldable.$fFoldableU1_$cfold_info;
 },
 Data.Foldable.$fFoldableU1_$cfold_entry() //  [R2]
         { []
         }
     {offset
       c6UM1: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cfold_info" {
     Data.Foldable.$fFoldableU1_$cfold_info:
         const Data.Foldable.$fFoldableU1_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.272907473 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cfoldMap_closure" {
     Data.Foldable.$fFoldableV1_$cfoldMap_closure:
         const Data.Foldable.$fFoldableV1_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableV1_$cfoldMap_entry() //  [R2]
         { []
         }
     {offset
       c6UMc: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cfoldMap_info" {
     Data.Foldable.$fFoldableV1_$cfoldMap_info:
         const Data.Foldable.$fFoldableV1_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.276098938 UTC

[section ""data" . Data.Foldable.$fFoldablePar1_$cnull_closure" {
     Data.Foldable.$fFoldablePar1_$cnull_closure:
         const Data.Foldable.$fFoldablePar1_$cnull_info;
 },
 Data.Foldable.$fFoldablePar1_$cnull_entry() //  []
         { []
         }
     {offset
       c6UMn: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar1_$cnull_info" {
     Data.Foldable.$fFoldablePar1_$cnull_info:
         const Data.Foldable.$fFoldablePar1_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.279356223 UTC

[section ""data" . Data.Foldable.$fFoldablePar1_$cfoldr_closure" {
     Data.Foldable.$fFoldablePar1_$cfoldr_closure:
         const Data.Foldable.$fFoldablePar1_$cfoldr_info;
 },
 Data.Foldable.$fFoldablePar1_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UMz: // global
           R3 = R3;
           _s6P0N::P64 = R2;
           R2 = R4;
           R1 = _s6P0N::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar1_$cfoldr_info" {
     Data.Foldable.$fFoldablePar1_$cfoldr_info:
         const Data.Foldable.$fFoldablePar1_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.283066742 UTC

[section ""data" . Data.Foldable.$fFoldablePar1_$cfoldMap_closure" {
     Data.Foldable.$fFoldablePar1_$cfoldMap_closure:
         const Data.Foldable.$fFoldablePar1_$cfoldMap_info;
 },
 Data.Foldable.$fFoldablePar1_$cfoldMap_entry() //  [R3, R4]
         { []
         }
     {offset
       c6UMK: // global
           R2 = R4;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar1_$cfoldMap_info" {
     Data.Foldable.$fFoldablePar1_$cfoldMap_info:
         const Data.Foldable.$fFoldablePar1_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.286194848 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cfoldMap_closure" {
     Data.Foldable.$fFoldableK1_$cfoldMap_closure:
         const Data.Foldable.$fFoldableK1_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableK1_$cfoldMap_entry() //  [R2]
         { []
         }
     {offset
       c6UMV: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cfoldMap_info" {
     Data.Foldable.$fFoldableK1_$cfoldMap_info:
         const Data.Foldable.$fFoldableK1_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.290066036 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cnull_closure" {
     Data.Foldable.$fFoldable:+:_$cnull_closure:
         const Data.Foldable.$fFoldable:+:_$cnull_info;
 },
 Data.Foldable.$fFoldable:+:_$cnull_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UNd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6UNe; else goto c6UNf;
       c6UNe: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cnull_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UNf: // global
           I64[Sp - 24] = block_c6UN6_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6UNm; else goto c6UN7;
       u6UNm: // global
           call _c6UN6(R1) args: 0, res: 0, upd: 0;
       c6UN7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cnull_info" {
     Data.Foldable.$fFoldable:+:_$cnull_info:
         const Data.Foldable.$fFoldable:+:_$cnull_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UN6() //  [R1]
         { []
         }
     {offset
       c6UN6: // global
           if (R1 & 7 == 1) goto c6UNa; else goto c6UNb;
       c6UNa: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Foldable.null_entry(R2) args: 24, res: 0, upd: 8;
       c6UNb: // global
           R2 = P64[Sp + 16];
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = P64[R1 + 6];
           Sp = Sp + 8;
           call Data.Foldable.null_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UN6_info" {
     block_c6UN6_info:
         const _c6UN6;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.296288843 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cfoldr_closure" {
     Data.Foldable.$fFoldable:+:_$cfoldr_closure:
         const Data.Foldable.$fFoldable:+:_$cfoldr_info;
 },
 Data.Foldable.$fFoldable:+:_$cfoldr_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c6UNL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6UNM; else goto c6UNN;
       c6UNM: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cfoldr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UNN: // global
           I64[Sp - 40] = block_c6UNE_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6UNU; else goto c6UNF;
       u6UNU: // global
           call _c6UNE(R1) args: 0, res: 0, upd: 0;
       c6UNF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cfoldr_info" {
     Data.Foldable.$fFoldable:+:_$cfoldr_info:
         const Data.Foldable.$fFoldable:+:_$cfoldr_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c6UNE() //  [R1]
         { []
         }
     {offset
       c6UNE: // global
           _s6P14::P64 = P64[Sp + 24];
           _s6P15::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c6UNI; else goto c6UNJ;
       c6UNI: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = _s6P14::P64;
           P64[Sp + 24] = _s6P15::P64;
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
       c6UNJ: // global
           R2 = P64[Sp + 16];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = _s6P14::P64;
           P64[Sp + 24] = _s6P15::P64;
           P64[Sp + 32] = P64[R1 + 6];
           Sp = Sp + 8;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UNE_info" {
     block_c6UNE_info:
         const _c6UNE;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.30364715 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cfoldMap_closure" {
     Data.Foldable.$fFoldable:+:_$cfoldMap_closure:
         const Data.Foldable.$fFoldable:+:_$cfoldMap_info;
 },
 Data.Foldable.$fFoldable:+:_$cfoldMap_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       c6UOj: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6UOk; else goto c6UOl;
       c6UOk: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cfoldMap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UOl: // global
           I64[Sp - 40] = block_c6UOc_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6UOs; else goto c6UOd;
       u6UOs: // global
           call _c6UOc(R1) args: 0, res: 0, upd: 0;
       c6UOd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cfoldMap_info" {
     Data.Foldable.$fFoldable:+:_$cfoldMap_info:
         const Data.Foldable.$fFoldable:+:_$cfoldMap_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c6UOc() //  [R1]
         { []
         }
     {offset
       c6UOc: // global
           _s6P1c::P64 = P64[Sp + 24];
           _s6P1d::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c6UOg; else goto c6UOh;
       c6UOg: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = _s6P1c::P64;
           P64[Sp + 24] = _s6P1d::P64;
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       c6UOh: // global
           R2 = P64[Sp + 16];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = _s6P1c::P64;
           P64[Sp + 24] = _s6P1d::P64;
           P64[Sp + 32] = P64[R1 + 6];
           Sp = Sp + 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UOc_info" {
     block_c6UOc_info:
         const _c6UOc;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.310011176 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cnull_closure" {
     Data.Foldable.$fFoldable:*:_$cnull_closure:
         const Data.Foldable.$fFoldable:*:_$cnull_info;
 },
 Data.Foldable.$fFoldable:*:_$cnull_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UON: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6UOO; else goto c6UOP;
       c6UOO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cnull_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UOP: // global
           I64[Sp - 24] = block_c6UOK_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6UP5; else goto c6UOL;
       u6UP5: // global
           call _c6UOK(R1) args: 0, res: 0, upd: 0;
       c6UOL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cnull_info" {
     Data.Foldable.$fFoldable:*:_$cnull_info:
         const Data.Foldable.$fFoldable:*:_$cnull_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UOK() //  [R1]
         { []
         }
     {offset
       c6UOK: // global
           I64[Sp] = block_c6UOS_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           Sp = Sp - 16;
           call Data.Foldable.null_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UOK_info" {
     block_c6UOK_info:
         const _c6UOK;
         const 2;
         const 30;
 },
 _c6UOS() //  [R1]
         { []
         }
     {offset
       c6UOS: // global
           if (R1 & 7 == 1) goto c6UOZ; else goto c6UP3;
       c6UOZ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6UP3: // global
           R2 = P64[Sp + 16];
           _s6P1n::P64 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = _s6P1n::P64;
           Sp = Sp + 8;
           call Data.Foldable.null_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UOS_info" {
     block_c6UOS_info:
         const _c6UOS;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.3184407 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cfoldr_closure" {
     Data.Foldable.$fFoldable:*:_$cfoldr_closure:
         const Data.Foldable.$fFoldable:*:_$cfoldr_info;
 },
 sat_s6P1x_entry() //  [R1]
         { []
         }
     {offset
       c6UPA: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6UPB; else goto c6UPC;
       c6UPB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6UPC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Foldable.foldr_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P1x_info" {
     sat_s6P1x_info:
         const sat_s6P1x_entry;
         const 4;
         const 15;
 },
 Data.Foldable.$fFoldable:*:_$cfoldr_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c6UPD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6UPE; else goto c6UPF;
       c6UPE: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cfoldr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UPF: // global
           I64[Sp - 40] = block_c6UPr_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6UPJ; else goto c6UPs;
       u6UPJ: // global
           call _c6UPr(R1) args: 0, res: 0, upd: 0;
       c6UPs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cfoldr_info" {
     Data.Foldable.$fFoldable:*:_$cfoldr_info:
         const Data.Foldable.$fFoldable:*:_$cfoldr_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c6UPr() //  [R1]
         { []
         }
     {offset
       c6UPr: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6UPI; else goto c6UPH;
       c6UPI: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6UPH: // global
           _s6P1v::P64 = P64[R1 + 7];
           _s6P1w::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_s6P1x_info;
           P64[Hp - 24] = P64[Sp + 16];
           _s6P1r::P64 = P64[Sp + 24];
           P64[Hp - 16] = _s6P1r::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _s6P1w::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = _s6P1r::P64;
           P64[Sp + 24] = Hp - 40;
           P64[Sp + 32] = _s6P1v::P64;
           Sp = Sp + 8;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UPr_info" {
     block_c6UPr_info:
         const _c6UPr;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.327789528 UTC

[section ""data" . Data.Foldable.$w$cfoldMap_closure" {
     Data.Foldable.$w$cfoldMap_closure:
         const Data.Foldable.$w$cfoldMap_info;
 },
 sat_s6P1F_entry() //  [R1]
         { []
         }
     {offset
       c6UQb: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6UQc; else goto c6UQd;
       c6UQc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6UQd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P1F_info" {
     sat_s6P1F_info:
         const sat_s6P1F_entry;
         const 4;
         const 15;
 },
 sat_s6P1E_entry() //  [R1]
         { []
         }
     {offset
       c6UQi: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6UQj; else goto c6UQk;
       c6UQj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6UQk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P1E_info" {
     sat_s6P1E_info:
         const sat_s6P1E_entry;
         const 4;
         const 15;
 },
 Data.Foldable.$w$cfoldMap_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c6UQl: // global
           _s6P1C::P64 = R6;
           _s6P1B::P64 = R5;
           _s6P1A::P64 = R4;
           _s6P1z::P64 = R3;
           _s6P1y::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c6UQm; else goto c6UQn;
       c6UQn: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c6UQp; else goto c6UQo;
       c6UQp: // global
           HpAlloc = 96;
           goto c6UQm;
       c6UQm: // global
           R6 = _s6P1C::P64;
           R5 = _s6P1B::P64;
           R4 = _s6P1A::P64;
           R3 = _s6P1z::P64;
           R2 = _s6P1y::P64;
           R1 = Data.Foldable.$w$cfoldMap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c6UQo: // global
           I64[Hp - 88] = sat_s6P1F_info;
           P64[Hp - 72] = _s6P1z::P64;
           P64[Hp - 64] = _s6P1A::P64;
           P64[Hp - 56] = _s6P1B::P64;
           P64[Hp - 48] = P64[Sp];
           I64[Hp - 40] = sat_s6P1E_info;
           P64[Hp - 24] = _s6P1y::P64;
           P64[Hp - 16] = _s6P1A::P64;
           P64[Hp - 8] = _s6P1B::P64;
           P64[Hp] = _s6P1C::P64;
           R2 = _s6P1A::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = Hp - 40;
           P64[Sp] = Hp - 88;
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldMap_info" {
     Data.Foldable.$w$cfoldMap_info:
         const Data.Foldable.$w$cfoldMap_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.335678464 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cfoldMap_closure" {
     Data.Foldable.$fFoldable:*:_$cfoldMap_closure:
         const Data.Foldable.$fFoldable:*:_$cfoldMap_info;
 },
 Data.Foldable.$fFoldable:*:_$cfoldMap_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       c6UQT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6UQU; else goto c6UQV;
       c6UQU: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cfoldMap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UQV: // global
           I64[Sp - 40] = block_c6UQQ_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6UQZ; else goto c6UQR;
       u6UQZ: // global
           call _c6UQQ(R1) args: 0, res: 0, upd: 0;
       c6UQR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cfoldMap_info" {
     Data.Foldable.$fFoldable:*:_$cfoldMap_info:
         const Data.Foldable.$fFoldable:*:_$cfoldMap_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c6UQQ() //  [R1]
         { []
         }
     {offset
       c6UQQ: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Foldable.$w$cfoldMap_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UQQ_info" {
     block_c6UQQ_info:
         const _c6UQQ;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.341732906 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cfoldr_closure" {
     Data.Foldable.$fFoldable:.:_$cfoldr_closure:
         const Data.Foldable.$fFoldable:.:_$cfoldr_info;
 },
 sat_s6P1V_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6URj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6URk; else goto c6URl;
       c6URk: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6URl: // global
           _s6P1T::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 14];
           P64[Sp - 16] = R3;
           P64[Sp - 8] = _s6P1T::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6P1V_info" {
     sat_s6P1V_info:
         const sat_s6P1V_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:.:_$cfoldr_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c6URm: // global
           _s6P1S::P64 = R6;
           _s6P1R::P64 = R5;
           _s6P1Q::P64 = R4;
           _s6P1P::P64 = R3;
           _s6P1O::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c6URn; else goto c6URo;
       c6URo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6URq; else goto c6URp;
       c6URq: // global
           HpAlloc = 24;
           goto c6URn;
       c6URn: // global
           R6 = _s6P1S::P64;
           R5 = _s6P1R::P64;
           R4 = _s6P1Q::P64;
           R3 = _s6P1P::P64;
           R2 = _s6P1O::P64;
           R1 = Data.Foldable.$fFoldable:.:_$cfoldr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6URp: // global
           I64[Hp - 16] = sat_s6P1V_info;
           P64[Hp - 8] = _s6P1P::P64;
           P64[Hp] = _s6P1Q::P64;
           R2 = _s6P1O::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 14;
           P64[Sp - 16] = _s6P1R::P64;
           P64[Sp - 8] = _s6P1S::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cfoldr_info" {
     Data.Foldable.$fFoldable:.:_$cfoldr_info:
         const Data.Foldable.$fFoldable:.:_$cfoldr_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.348575095 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cfoldMap_closure" {
     Data.Foldable.$fFoldable:.:_$cfoldMap_closure:
         const Data.Foldable.$fFoldable:.:_$cfoldMap_info;
 },
 sat_s6P21_entry() //  [R1]
         { []
         }
     {offset
       c6URK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6URL; else goto c6URM;
       c6URL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6URM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P21_info" {
     sat_s6P21_info:
         const sat_s6P21_entry;
         const 3;
         const 15;
 },
 Data.Foldable.$fFoldable:.:_$cfoldMap_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       c6URN: // global
           _s6P20::P64 = R6;
           _s6P1Z::P64 = R5;
           _s6P1Y::P64 = R4;
           _s6P1X::P64 = R3;
           _s6P1W::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c6URO; else goto c6URP;
       c6URP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6URR; else goto c6URQ;
       c6URR: // global
           HpAlloc = 40;
           goto c6URO;
       c6URO: // global
           R6 = _s6P20::P64;
           R5 = _s6P1Z::P64;
           R4 = _s6P1Y::P64;
           R3 = _s6P1X::P64;
           R2 = _s6P1W::P64;
           R1 = Data.Foldable.$fFoldable:.:_$cfoldMap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6URQ: // global
           I64[Hp - 32] = sat_s6P21_info;
           P64[Hp - 16] = _s6P1X::P64;
           P64[Hp - 8] = _s6P1Y::P64;
           P64[Hp] = _s6P1Z::P64;
           R2 = _s6P1W::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _s6P1Y::P64;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _s6P20::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cfoldMap_info" {
     Data.Foldable.$fFoldable:.:_$cfoldMap_info:
         const Data.Foldable.$fFoldable:.:_$cfoldMap_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.355483398 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cnull_closure" {
     Data.Foldable.$fFoldableURec4_$cnull_closure:
         const Data.Foldable.$fFoldableURec4_$cnull_info;
 },
 Data.Foldable.$fFoldableURec4_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6USa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6USb; else goto c6USc;
       c6USb: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec4_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6USc: // global
           I64[Sp - 8] = block_c6US8_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cnull_info" {
     Data.Foldable.$fFoldableURec4_$cnull_info:
         const Data.Foldable.$fFoldableURec4_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6US8() //  []
         { []
         }
     {offset
       c6US8: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6US8_info" {
     block_c6US8_info:
         const _c6US8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.360613753 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cfoldr_closure" {
     Data.Foldable.$fFoldableURec4_$cfoldr_closure:
         const Data.Foldable.$fFoldableURec4_$cfoldr_info;
 },
 Data.Foldable.$fFoldableURec4_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6USv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6USw; else goto c6USx;
       c6USw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec4_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6USx: // global
           I64[Sp - 16] = block_c6USt_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cfoldr_info" {
     Data.Foldable.$fFoldableURec4_$cfoldr_info:
         const Data.Foldable.$fFoldableURec4_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6USt() //  []
         { []
         }
     {offset
       c6USt: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6USt_info" {
     block_c6USt_info:
         const _c6USt;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.365939449 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cfoldMap_closure" {
     Data.Foldable.$fFoldableURec4_$cfoldMap_closure:
         const Data.Foldable.$fFoldableURec4_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableURec4_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6USP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6USQ; else goto c6USR;
       c6USQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec4_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6USR: // global
           I64[Sp - 16] = block_c6USN_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cfoldMap_info" {
     Data.Foldable.$fFoldableURec4_$cfoldMap_info:
         const Data.Foldable.$fFoldableURec4_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6USN() //  []
         { []
         }
     {offset
       c6USN: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6USN_info" {
     block_c6USN_info:
         const _c6USN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.371598858 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cnull_closure" {
     Data.Foldable.$fFoldableURec3_$cnull_closure:
         const Data.Foldable.$fFoldableURec3_$cnull_info;
 },
 Data.Foldable.$fFoldableURec3_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6UT9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6UTa; else goto c6UTb;
       c6UTa: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec3_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UTb: // global
           I64[Sp - 8] = block_c6UT7_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cnull_info" {
     Data.Foldable.$fFoldableURec3_$cnull_info:
         const Data.Foldable.$fFoldableURec3_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6UT7() //  []
         { []
         }
     {offset
       c6UT7: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UT7_info" {
     block_c6UT7_info:
         const _c6UT7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.376950819 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cfoldr_closure" {
     Data.Foldable.$fFoldableURec3_$cfoldr_closure:
         const Data.Foldable.$fFoldableURec3_$cfoldr_info;
 },
 Data.Foldable.$fFoldableURec3_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UTu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UTv; else goto c6UTw;
       c6UTv: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec3_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UTw: // global
           I64[Sp - 16] = block_c6UTs_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cfoldr_info" {
     Data.Foldable.$fFoldableURec3_$cfoldr_info:
         const Data.Foldable.$fFoldableURec3_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UTs() //  []
         { []
         }
     {offset
       c6UTs: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UTs_info" {
     block_c6UTs_info:
         const _c6UTs;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.38428963 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cfoldMap_closure" {
     Data.Foldable.$fFoldableURec3_$cfoldMap_closure:
         const Data.Foldable.$fFoldableURec3_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableURec3_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UTO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UTP; else goto c6UTQ;
       c6UTP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec3_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UTQ: // global
           I64[Sp - 16] = block_c6UTM_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cfoldMap_info" {
     Data.Foldable.$fFoldableURec3_$cfoldMap_info:
         const Data.Foldable.$fFoldableURec3_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UTM() //  []
         { []
         }
     {offset
       c6UTM: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UTM_info" {
     block_c6UTM_info:
         const _c6UTM;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.389951806 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cnull_closure" {
     Data.Foldable.$fFoldableURec2_$cnull_closure:
         const Data.Foldable.$fFoldableURec2_$cnull_info;
 },
 Data.Foldable.$fFoldableURec2_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6UU8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6UU9; else goto c6UUa;
       c6UU9: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec2_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UUa: // global
           I64[Sp - 8] = block_c6UU6_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cnull_info" {
     Data.Foldable.$fFoldableURec2_$cnull_info:
         const Data.Foldable.$fFoldableURec2_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6UU6() //  []
         { []
         }
     {offset
       c6UU6: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UU6_info" {
     block_c6UU6_info:
         const _c6UU6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.395218019 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cfoldr_closure" {
     Data.Foldable.$fFoldableURec2_$cfoldr_closure:
         const Data.Foldable.$fFoldableURec2_$cfoldr_info;
 },
 Data.Foldable.$fFoldableURec2_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UUt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UUu; else goto c6UUv;
       c6UUu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec2_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UUv: // global
           I64[Sp - 16] = block_c6UUr_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cfoldr_info" {
     Data.Foldable.$fFoldableURec2_$cfoldr_info:
         const Data.Foldable.$fFoldableURec2_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UUr() //  []
         { []
         }
     {offset
       c6UUr: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UUr_info" {
     block_c6UUr_info:
         const _c6UUr;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.400585131 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cfoldMap_closure" {
     Data.Foldable.$fFoldableURec2_$cfoldMap_closure:
         const Data.Foldable.$fFoldableURec2_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableURec2_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UUN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UUO; else goto c6UUP;
       c6UUO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec2_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UUP: // global
           I64[Sp - 16] = block_c6UUL_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cfoldMap_info" {
     Data.Foldable.$fFoldableURec2_$cfoldMap_info:
         const Data.Foldable.$fFoldableURec2_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UUL() //  []
         { []
         }
     {offset
       c6UUL: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UUL_info" {
     block_c6UUL_info:
         const _c6UUL;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.406013192 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cnull_closure" {
     Data.Foldable.$fFoldableURec1_$cnull_closure:
         const Data.Foldable.$fFoldableURec1_$cnull_info;
 },
 Data.Foldable.$fFoldableURec1_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6UV7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6UV8; else goto c6UV9;
       c6UV8: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec1_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UV9: // global
           I64[Sp - 8] = block_c6UV5_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cnull_info" {
     Data.Foldable.$fFoldableURec1_$cnull_info:
         const Data.Foldable.$fFoldableURec1_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6UV5() //  []
         { []
         }
     {offset
       c6UV5: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UV5_info" {
     block_c6UV5_info:
         const _c6UV5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.411962303 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cfoldr_closure" {
     Data.Foldable.$fFoldableURec1_$cfoldr_closure:
         const Data.Foldable.$fFoldableURec1_$cfoldr_info;
 },
 Data.Foldable.$fFoldableURec1_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UVs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UVt; else goto c6UVu;
       c6UVt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec1_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UVu: // global
           I64[Sp - 16] = block_c6UVq_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cfoldr_info" {
     Data.Foldable.$fFoldableURec1_$cfoldr_info:
         const Data.Foldable.$fFoldableURec1_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UVq() //  []
         { []
         }
     {offset
       c6UVq: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UVq_info" {
     block_c6UVq_info:
         const _c6UVq;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.417497754 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cfoldMap_closure" {
     Data.Foldable.$fFoldableURec1_$cfoldMap_closure:
         const Data.Foldable.$fFoldableURec1_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableURec1_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UVM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UVN; else goto c6UVO;
       c6UVN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec1_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UVO: // global
           I64[Sp - 16] = block_c6UVK_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cfoldMap_info" {
     Data.Foldable.$fFoldableURec1_$cfoldMap_info:
         const Data.Foldable.$fFoldableURec1_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UVK() //  []
         { []
         }
     {offset
       c6UVK: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UVK_info" {
     block_c6UVK_info:
         const _c6UVK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.422681412 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cnull_closure" {
     Data.Foldable.$fFoldableURec0_$cnull_closure:
         const Data.Foldable.$fFoldableURec0_$cnull_info;
 },
 Data.Foldable.$fFoldableURec0_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6UW6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6UW7; else goto c6UW8;
       c6UW7: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec0_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UW8: // global
           I64[Sp - 8] = block_c6UW4_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cnull_info" {
     Data.Foldable.$fFoldableURec0_$cnull_info:
         const Data.Foldable.$fFoldableURec0_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6UW4() //  []
         { []
         }
     {offset
       c6UW4: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UW4_info" {
     block_c6UW4_info:
         const _c6UW4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.428225526 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cfoldr_closure" {
     Data.Foldable.$fFoldableURec0_$cfoldr_closure:
         const Data.Foldable.$fFoldableURec0_$cfoldr_info;
 },
 Data.Foldable.$fFoldableURec0_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UWr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UWs; else goto c6UWt;
       c6UWs: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec0_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UWt: // global
           I64[Sp - 16] = block_c6UWp_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cfoldr_info" {
     Data.Foldable.$fFoldableURec0_$cfoldr_info:
         const Data.Foldable.$fFoldableURec0_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UWp() //  []
         { []
         }
     {offset
       c6UWp: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UWp_info" {
     block_c6UWp_info:
         const _c6UWp;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.433885487 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cfoldMap_closure" {
     Data.Foldable.$fFoldableURec0_$cfoldMap_closure:
         const Data.Foldable.$fFoldableURec0_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableURec0_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UWL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UWM; else goto c6UWN;
       c6UWM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec0_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UWN: // global
           I64[Sp - 16] = block_c6UWJ_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cfoldMap_info" {
     Data.Foldable.$fFoldableURec0_$cfoldMap_info:
         const Data.Foldable.$fFoldableURec0_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UWJ() //  []
         { []
         }
     {offset
       c6UWJ: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UWJ_info" {
     block_c6UWJ_info:
         const _c6UWJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.439665515 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cnull_closure" {
     Data.Foldable.$fFoldableURec_$cnull_closure:
         const Data.Foldable.$fFoldableURec_$cnull_info;
 },
 Data.Foldable.$fFoldableURec_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6UX5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6UX6; else goto c6UX7;
       c6UX6: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6UX7: // global
           I64[Sp - 8] = block_c6UX3_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cnull_info" {
     Data.Foldable.$fFoldableURec_$cnull_info:
         const Data.Foldable.$fFoldableURec_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6UX3() //  []
         { []
         }
     {offset
       c6UX3: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UX3_info" {
     block_c6UX3_info:
         const _c6UX3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.445298031 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cfoldr_closure" {
     Data.Foldable.$fFoldableURec_$cfoldr_closure:
         const Data.Foldable.$fFoldableURec_$cfoldr_info;
 },
 Data.Foldable.$fFoldableURec_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UXq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UXr; else goto c6UXs;
       c6UXr: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UXs: // global
           I64[Sp - 16] = block_c6UXo_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cfoldr_info" {
     Data.Foldable.$fFoldableURec_$cfoldr_info:
         const Data.Foldable.$fFoldableURec_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UXo() //  []
         { []
         }
     {offset
       c6UXo: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UXo_info" {
     block_c6UXo_info:
         const _c6UXo;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.450557346 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cfoldMap_closure" {
     Data.Foldable.$fFoldableURec_$cfoldMap_closure:
         const Data.Foldable.$fFoldableURec_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableURec_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6UXK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UXL; else goto c6UXM;
       c6UXL: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UXM: // global
           I64[Sp - 16] = block_c6UXI_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cfoldMap_info" {
     Data.Foldable.$fFoldableURec_$cfoldMap_info:
         const Data.Foldable.$fFoldableURec_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6UXI() //  []
         { []
         }
     {offset
       c6UXI: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6UXI_info" {
     block_c6UXI_info:
         const _c6UXI;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.45593947 UTC

[section ""data" . Data.Foldable.$fFoldable:*:1_closure" {
     Data.Foldable.$fFoldable:*:1_closure:
         const Data.Foldable.$fFoldable:*:1_info;
 },
 Data.Foldable.$fFoldable:*:1_entry() //  [R2]
         { []
         }
     {offset
       c6UY2: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:1_info" {
     Data.Foldable.$fFoldable:*:1_info:
         const Data.Foldable.$fFoldable:*:1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.460000164 UTC

[section ""data" . $dmproduct1_r6OSR_closure" {
     $dmproduct1_r6OSR_closure:
         const $dmproduct1_r6OSR_info;
         const 0;
 },
 sat_s6P3l_entry() //  [R1]
         { []
         }
     {offset
       c6UYh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UYi; else goto c6UYj;
       c6UYi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6UYj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P3l_info" {
     sat_s6P3l_info:
         const sat_s6P3l_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+96;
 },
 $dmproduct1_r6OSR_entry() //  [R2, R3]
         { []
         }
     {offset
       c6UYk: // global
           _s6P3k::P64 = R3;
           _s6P3j::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6UYl; else goto c6UYm;
       c6UYm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6UYo; else goto c6UYn;
       c6UYo: // global
           HpAlloc = 24;
           goto c6UYl;
       c6UYl: // global
           R3 = _s6P3k::P64;
           R2 = _s6P3j::P64;
           R1 = $dmproduct1_r6OSR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UYn: // global
           I64[Hp - 16] = sat_s6P3l_info;
           P64[Hp] = _s6P3k::P64;
           R2 = _s6P3j::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Data.Foldable.$fFoldable:*:1_closure+1;
           Sp = Sp - 24;
           call Data.Foldable.foldMap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmproduct1_r6OSR_info" {
     $dmproduct1_r6OSR_info:
         const $dmproduct1_r6OSR_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.466045653 UTC

[section ""data" . Data.Foldable.$dmproduct_closure" {
     Data.Foldable.$dmproduct_closure:
         const Data.Foldable.$dmproduct_info;
         const 0;
 },
 Data.Foldable.$dmproduct_entry() //  [R2, R3]
         { []
         }
     {offset
       c6UYD: // global
           R3 = R3;
           R2 = R2;
           call $dmproduct1_r6OSR_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmproduct_info" {
     Data.Foldable.$dmproduct_info:
         const Data.Foldable.$dmproduct_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.4699869 UTC

[section ""data" . $dmsum1_r6OSS_closure" {
     $dmsum1_r6OSS_closure:
         const $dmsum1_r6OSS_info;
         const 0;
 },
 sat_s6P3o_entry() //  [R1]
         { []
         }
     {offset
       c6UYS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UYT; else goto c6UYU;
       c6UYT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6UYU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P3o_info" {
     sat_s6P3o_info:
         const sat_s6P3o_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+112;
 },
 $dmsum1_r6OSS_entry() //  [R2, R3]
         { []
         }
     {offset
       c6UYV: // global
           _s6P3n::P64 = R3;
           _s6P3m::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6UYW; else goto c6UYX;
       c6UYX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6UYZ; else goto c6UYY;
       c6UYZ: // global
           HpAlloc = 24;
           goto c6UYW;
       c6UYW: // global
           R3 = _s6P3n::P64;
           R2 = _s6P3m::P64;
           R1 = $dmsum1_r6OSS_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6UYY: // global
           I64[Hp - 16] = sat_s6P3o_info;
           P64[Hp] = _s6P3n::P64;
           R2 = _s6P3m::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Data.Foldable.$fFoldable:*:1_closure+1;
           Sp = Sp - 24;
           call Data.Foldable.foldMap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmsum1_r6OSS_info" {
     $dmsum1_r6OSS_info:
         const $dmsum1_r6OSS_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.475397483 UTC

[section ""data" . Data.Foldable.$dmsum_closure" {
     Data.Foldable.$dmsum_closure:
         const Data.Foldable.$dmsum_info;
         const 0;
 },
 Data.Foldable.$dmsum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6UZe: // global
           R3 = R3;
           R2 = R2;
           call $dmsum1_r6OSS_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmsum_info" {
     Data.Foldable.$dmsum_info:
         const Data.Foldable.$dmsum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.47842675 UTC

[section ""cstring" . Data.Foldable.$fFoldableK3_bytes" {
     Data.Foldable.$fFoldableK3_bytes:
         I8[] [109,105,110,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.480824038 UTC

[section ""data" . poly_d_r6OST_closure" {
     poly_d_r6OST_closure:
         const poly_d_r6OST_info;
         const 0;
         const 0;
         const 0;
 },
 poly_d_r6OST_entry() //  [R1]
         { []
         }
     {offset
       c6UZu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6UZv; else goto c6UZw;
       c6UZv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6UZw: // global
           (_c6UZp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6UZp::I64 == 0) goto c6UZr; else goto c6UZq;
       c6UZr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6UZq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6UZp::I64;
           I64[Sp - 24] = block_c6UZs_info;
           R2 = Data.Foldable.$fFoldableK3_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . poly_d_r6OST_info" {
     poly_d_r6OST_info:
         const poly_d_r6OST_entry;
         const 0;
         const 4294967317;
         const S6PH7_srt+40;
 },
 _c6UZs() //  [R1]
         { []
         }
     {offset
       c6UZs: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6UZs_info" {
     block_c6UZs_info:
         const _c6UZs;
         const 0;
         const 4294967326;
         const S6PH7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.488095237 UTC

[section ""data" . Data.Foldable.$dmminimum_closure" {
     Data.Foldable.$dmminimum_closure:
         const Data.Foldable.$dmminimum_info;
         const 0;
 },
 sat_s6P3t_entry() //  [R1]
         { []
         }
     {offset
       c6UZW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6UZX; else goto c6UZY;
       c6UZX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6UZY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P3t_info" {
     sat_s6P3t_info:
         const sat_s6P3t_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+128;
 },
 g_s6P3s_entry() //  [R1]
         { []
         }
     {offset
       c6UZZ: // global
           _s6P3s::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6V00; else goto c6V01;
       c6V01: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6V03; else goto c6V02;
       c6V03: // global
           HpAlloc = 24;
           goto c6V00;
       c6V00: // global
           R1 = _s6P3s::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6V02: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6P3s::P64;
           _s6P3q::P64 = P64[_s6P3s::P64 + 16];
           _s6P3r::P64 = P64[_s6P3s::P64 + 24];
           I64[Hp - 16] = sat_s6P3t_info;
           P64[Hp] = _s6P3r::P64;
           R2 = _s6P3q::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s6P3s_info" {
     g_s6P3s_info:
         const g_s6P3s_entry;
         const 2;
         const 4294967314;
         const S6PH7_srt+128;
 },
 sat_s6P3x_entry() //  [R1, R2]
         { []
         }
     {offset
       c6V0f: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6V0g; else goto c6V0h;
       c6V0g: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6V0h: // global
           I64[Sp - 8] = block_c6V09_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6P3x_info" {
     sat_s6P3x_info:
         const sat_s6P3x_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6PH7_srt+136;
 },
 _c6V09() //  [R1]
         { []
         }
     {offset
       c6V09: // global
           if (R1 & 7 == 1) goto c6V0c; else goto c6V0d;
       c6V0c: // global
           R1 = poly_d_r6OST_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6V0d: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6V09_info" {
     block_c6V09_info:
         const _c6V09;
         const 0;
         const 4294967326;
         const S6PH7_srt+136;
 },
 Data.Foldable.$dmminimum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6V0o: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6V0s; else goto c6V0r;
       c6V0s: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$dmminimum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6V0r: // global
           I64[Hp - 40] = g_s6P3s_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6P3x_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmminimum_info" {
     Data.Foldable.$dmminimum_info:
         const Data.Foldable.$dmminimum_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S6PH7_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.498963181 UTC

[section ""cstring" . Data.Foldable.$fFoldableK5_bytes" {
     Data.Foldable.$fFoldableK5_bytes:
         I8[] [109,97,120,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.50147515 UTC

[section ""data" . poly_d1_r6OSU_closure" {
     poly_d1_r6OSU_closure:
         const poly_d1_r6OSU_info;
         const 0;
         const 0;
         const 0;
 },
 poly_d1_r6OSU_entry() //  [R1]
         { []
         }
     {offset
       c6V10: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6V11; else goto c6V12;
       c6V11: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6V12: // global
           (_c6V0V::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6V0V::I64 == 0) goto c6V0X; else goto c6V0W;
       c6V0X: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6V0W: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6V0V::I64;
           I64[Sp - 24] = block_c6V0Y_info;
           R2 = Data.Foldable.$fFoldableK5_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . poly_d1_r6OSU_info" {
     poly_d1_r6OSU_info:
         const poly_d1_r6OSU_entry;
         const 0;
         const 4294967317;
         const S6PH7_srt+40;
 },
 _c6V0Y() //  [R1]
         { []
         }
     {offset
       c6V0Y: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6V0Y_info" {
     block_c6V0Y_info:
         const _c6V0Y;
         const 0;
         const 4294967326;
         const S6PH7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.508611993 UTC

[section ""data" . Data.Foldable.$dmmaximum_closure" {
     Data.Foldable.$dmmaximum_closure:
         const Data.Foldable.$dmmaximum_info;
         const 0;
 },
 sat_s6P3C_entry() //  [R1]
         { []
         }
     {offset
       c6V1s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6V1t; else goto c6V1u;
       c6V1t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6V1u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P3C_info" {
     sat_s6P3C_info:
         const sat_s6P3C_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+152;
 },
 g_s6P3B_entry() //  [R1]
         { []
         }
     {offset
       c6V1v: // global
           _s6P3B::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6V1w; else goto c6V1x;
       c6V1x: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6V1z; else goto c6V1y;
       c6V1z: // global
           HpAlloc = 24;
           goto c6V1w;
       c6V1w: // global
           R1 = _s6P3B::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6V1y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6P3B::P64;
           _s6P3z::P64 = P64[_s6P3B::P64 + 16];
           _s6P3A::P64 = P64[_s6P3B::P64 + 24];
           I64[Hp - 16] = sat_s6P3C_info;
           P64[Hp] = _s6P3A::P64;
           R2 = _s6P3z::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s6P3B_info" {
     g_s6P3B_info:
         const g_s6P3B_entry;
         const 2;
         const 4294967314;
         const S6PH7_srt+152;
 },
 sat_s6P3G_entry() //  [R1, R2]
         { []
         }
     {offset
       c6V1L: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6V1M; else goto c6V1N;
       c6V1M: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6V1N: // global
           I64[Sp - 8] = block_c6V1F_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6P3G_info" {
     sat_s6P3G_info:
         const sat_s6P3G_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6PH7_srt+160;
 },
 _c6V1F() //  [R1]
         { []
         }
     {offset
       c6V1F: // global
           if (R1 & 7 == 1) goto c6V1I; else goto c6V1J;
       c6V1I: // global
           R1 = poly_d1_r6OSU_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6V1J: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6V1F_info" {
     block_c6V1F_info:
         const _c6V1F;
         const 0;
         const 4294967326;
         const S6PH7_srt+160;
 },
 Data.Foldable.$dmmaximum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6V1U: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6V1Y; else goto c6V1X;
       c6V1Y: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$dmmaximum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6V1X: // global
           I64[Hp - 40] = g_s6P3B_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6P3G_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmmaximum_info" {
     Data.Foldable.$dmmaximum_info:
         const Data.Foldable.$dmmaximum_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S6PH7_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.520250345 UTC

[section ""data" . Data.Foldable.$fFoldable:*:5_closure" {
     Data.Foldable.$fFoldable:*:5_closure:
         const Data.Foldable.$fFoldable:*:5_info;
 },
 Data.Foldable.$fFoldable:*:5_entry() //  [R2, R3]
         { []
         }
     {offset
       c6V2u: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6V2B; else goto c6V2C;
       c6V2B: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6V2C: // global
           I64[Sp - 8] = block_c6V2r_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6V2G; else goto c6V2s;
       u6V2G: // global
           call _c6V2r(R1) args: 0, res: 0, upd: 0;
       c6V2s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:5_info" {
     Data.Foldable.$fFoldable:*:5_info:
         const Data.Foldable.$fFoldable:*:5_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6V2r() //  [R1]
         { []
         }
     {offset
       c6V2r: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6V2F; else goto c6V2E;
       c6V2F: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6V2E: // global
           _s6P3L::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s6P3L::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6V2r_info" {
     block_c6V2r_info:
         const _c6V2r;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.525635983 UTC

[section ""data" . Data.Foldable.$dmlength_closure" {
     Data.Foldable.$dmlength_closure:
         const Data.Foldable.$dmlength_info;
 },
 Data.Foldable.$dmlength_entry() //  [R2]
         { []
         }
     {offset
       c6V2W: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6V2X; else goto c6V2Y;
       c6V2X: // global
           R2 = R2;
           R1 = Data.Foldable.$dmlength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6V2Y: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Foldable.$fFoldable:*:5_closure+2;
           P64[Sp - 8] = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp - 24;
           call Data.Foldable.foldl'_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmlength_info" {
     Data.Foldable.$dmlength_info:
         const Data.Foldable.$dmlength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.529114709 UTC

[section ""data" . lvl_r6OSV_closure" {
     lvl_r6OSV_closure:
         const lvl_r6OSV_info;
 },
 lvl_r6OSV_entry() //  []
         { []
         }
     {offset
       c6V38: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl_r6OSV_info" {
     lvl_r6OSV_info:
         const lvl_r6OSV_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.532546496 UTC

[section ""data" . Data.Foldable.$dmnull_closure" {
     Data.Foldable.$dmnull_closure:
         const Data.Foldable.$dmnull_info;
 },
 Data.Foldable.$dmnull_entry() //  [R2]
         { []
         }
     {offset
       c6V3k: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6V3l; else goto c6V3m;
       c6V3l: // global
           R2 = R2;
           R1 = Data.Foldable.$dmnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6V3m: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = lvl_r6OSV_closure+2;
           P64[Sp - 8] = GHC.Types.True_closure+2;
           Sp = Sp - 24;
           call Data.Foldable.foldr_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmnull_info" {
     Data.Foldable.$dmnull_info:
         const Data.Foldable.$dmnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.53697606 UTC

[section ""data" . Data.Foldable.$dmtoList_closure" {
     Data.Foldable.$dmtoList_closure:
         const Data.Foldable.$dmtoList_info;
 },
 Data.Foldable.$dmtoList_entry() //  [R2, R3]
         { []
         }
     {offset
       c6V3w: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6V3x; else goto c6V3y;
       c6V3x: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$dmtoList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6V3y: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmtoList_info" {
     Data.Foldable.$dmtoList_info:
         const Data.Foldable.$dmtoList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.540337501 UTC

[section ""cstring" . Data.Foldable.$fFoldableK7_bytes" {
     Data.Foldable.$fFoldableK7_bytes:
         I8[] [102,111,108,100,108,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.54320855 UTC

[section ""data" . Data.Foldable.$fFoldable:*:6_closure" {
     Data.Foldable.$fFoldable:*:6_closure:
         const Data.Foldable.$fFoldable:*:6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldable:*:6_entry() //  [R1]
         { []
         }
     {offset
       c6V3N: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6V3O; else goto c6V3P;
       c6V3O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6V3P: // global
           (_c6V3I::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6V3I::I64 == 0) goto c6V3K; else goto c6V3J;
       c6V3K: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6V3J: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6V3I::I64;
           I64[Sp - 24] = block_c6V3L_info;
           R2 = Data.Foldable.$fFoldableK7_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:6_info" {
     Data.Foldable.$fFoldable:*:6_info:
         const Data.Foldable.$fFoldable:*:6_entry;
         const 0;
         const 4294967317;
         const S6PH7_srt+40;
 },
 _c6V3L() //  [R1]
         { []
         }
     {offset
       c6V3L: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6V3L_info" {
     block_c6V3L_info:
         const _c6V3L;
         const 0;
         const 4294967326;
         const S6PH7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.554362819 UTC

[section ""data" . Data.Foldable.$dmfoldl1_closure" {
     Data.Foldable.$dmfoldl1_closure:
         const Data.Foldable.$dmfoldl1_info;
         const 0;
 },
 sat_s6P40_entry() //  [R1]
         { []
         }
     {offset
       c6V4n: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6V4o; else goto c6V4p;
       c6V4o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6V4p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6V4g_info;
           _s6P3U::P64 = P64[R1 + 16];
           _s6P3X::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s6P3U::P64;
           P64[Sp - 24] = _s6P3X::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6V4w; else goto c6V4h;
       u6V4w: // global
           call _c6V4g(R1) args: 0, res: 0, upd: 0;
       c6V4h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P40_info" {
     sat_s6P40_info:
         const sat_s6P40_entry;
         const 3;
         const 15;
 },
 _c6V4g() //  [R1]
         { []
         }
     {offset
       c6V4g: // global
           _s6P3X::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6V4k; else goto c6V4l;
       c6V4k: // global
           R1 = _s6P3X::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c6V4l: // global
           R3 = _s6P3X::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6V4g_info" {
     block_c6V4g_info:
         const _c6V4g;
         const 2;
         const 30;
 },
 sat_s6P41_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6V4y: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6V4C; else goto c6V4B;
       c6V4C: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6V4B: // global
           _s6P3U::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6P40_info;
           P64[Hp - 32] = _s6P3U::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6P41_info" {
     sat_s6P41_info:
         const sat_s6P41_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$dmfoldl1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6V4J: // global
           _s6P3V::P64 = R4;
           _s6P3U::P64 = R3;
           _s6P3T::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6V4K; else goto c6V4L;
       c6V4L: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6V4N; else goto c6V4M;
       c6V4N: // global
           HpAlloc = 16;
           goto c6V4K;
       c6V4K: // global
           R4 = _s6P3V::P64;
           R3 = _s6P3U::P64;
           R2 = _s6P3T::P64;
           R1 = Data.Foldable.$dmfoldl1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6V4M: // global
           I64[Hp - 8] = sat_s6P41_info;
           P64[Hp] = _s6P3U::P64;
           I64[Sp - 8] = block_c6V4D_info;
           R2 = _s6P3T::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _s6P3V::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldl_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmfoldl1_info" {
     Data.Foldable.$dmfoldl1_info:
         const Data.Foldable.$dmfoldl1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6PH7_srt+176;
 },
 _c6V4D() //  [R1]
         { []
         }
     {offset
       c6V4D: // global
           if (R1 & 7 == 1) goto c6V4G; else goto c6V4H;
       c6V4G: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6V4H: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6V4D_info" {
     block_c6V4D_info:
         const _c6V4D;
         const 0;
         const 4294967326;
         const S6PH7_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.567869268 UTC

[section ""cstring" . Data.Foldable.$fFoldableK9_bytes" {
     Data.Foldable.$fFoldableK9_bytes:
         I8[] [102,111,108,100,114,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.570536571 UTC

[section ""data" . Data.Foldable.$fFoldable:*:8_closure" {
     Data.Foldable.$fFoldable:*:8_closure:
         const Data.Foldable.$fFoldable:*:8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldable:*:8_entry() //  [R1]
         { []
         }
     {offset
       c6V5t: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6V5u; else goto c6V5v;
       c6V5u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6V5v: // global
           (_c6V5o::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6V5o::I64 == 0) goto c6V5q; else goto c6V5p;
       c6V5q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6V5p: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6V5o::I64;
           I64[Sp - 24] = block_c6V5r_info;
           R2 = Data.Foldable.$fFoldableK9_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:8_info" {
     Data.Foldable.$fFoldable:*:8_info:
         const Data.Foldable.$fFoldable:*:8_entry;
         const 0;
         const 4294967317;
         const S6PH7_srt+40;
 },
 _c6V5r() //  [R1]
         { []
         }
     {offset
       c6V5r: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6V5r_info" {
     block_c6V5r_info:
         const _c6V5r;
         const 0;
         const 4294967326;
         const S6PH7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.578384995 UTC

[section ""data" . Data.Foldable.$dmfoldr1_closure" {
     Data.Foldable.$dmfoldr1_closure:
         const Data.Foldable.$dmfoldr1_info;
         const 0;
 },
 sat_s6P4c_entry() //  [R1]
         { []
         }
     {offset
       c6V63: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6V64; else goto c6V65;
       c6V64: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6V65: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6V5W_info;
           _s6P46::P64 = P64[R1 + 16];
           _s6P48::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6P46::P64;
           P64[Sp - 24] = _s6P48::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6V6c; else goto c6V5X;
       u6V6c: // global
           call _c6V5W(R1) args: 0, res: 0, upd: 0;
       c6V5X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P4c_info" {
     sat_s6P4c_info:
         const sat_s6P4c_entry;
         const 3;
         const 15;
 },
 _c6V5W() //  [R1]
         { []
         }
     {offset
       c6V5W: // global
           _s6P48::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6V60; else goto c6V61;
       c6V60: // global
           R1 = _s6P48::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c6V61: // global
           R3 = P64[R1 + 6];
           R2 = _s6P48::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6V5W_info" {
     block_c6V5W_info:
         const _c6V5W;
         const 2;
         const 30;
 },
 sat_s6P4d_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6V6e: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6V6i; else goto c6V6h;
       c6V6i: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6V6h: // global
           _s6P46::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6P4c_info;
           P64[Hp - 32] = _s6P46::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6P4d_info" {
     sat_s6P4d_info:
         const sat_s6P4d_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$dmfoldr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6V6p: // global
           _s6P47::P64 = R4;
           _s6P46::P64 = R3;
           _s6P45::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6V6q; else goto c6V6r;
       c6V6r: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6V6t; else goto c6V6s;
       c6V6t: // global
           HpAlloc = 16;
           goto c6V6q;
       c6V6q: // global
           R4 = _s6P47::P64;
           R3 = _s6P46::P64;
           R2 = _s6P45::P64;
           R1 = Data.Foldable.$dmfoldr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6V6s: // global
           I64[Hp - 8] = sat_s6P4d_info;
           P64[Hp] = _s6P46::P64;
           I64[Sp - 8] = block_c6V6j_info;
           R2 = _s6P45::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _s6P47::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmfoldr1_info" {
     Data.Foldable.$dmfoldr1_info:
         const Data.Foldable.$dmfoldr1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6PH7_srt+192;
 },
 _c6V6j() //  [R1]
         { []
         }
     {offset
       c6V6j: // global
           if (R1 & 7 == 1) goto c6V6m; else goto c6V6n;
       c6V6m: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6V6n: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6V6j_info" {
     block_c6V6j_info:
         const _c6V6j;
         const 0;
         const 4294967326;
         const S6PH7_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.595056661 UTC

[section ""data" . Data.Foldable.$dmfoldl'_closure" {
     Data.Foldable.$dmfoldl'_closure:
         const Data.Foldable.$dmfoldl'_info;
 },
 sat_s6P4o_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6V7b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6V7c; else goto c6V7d;
       c6V7c: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6V7d: // global
           I64[Sp - 16] = block_c6V79_info;
           _s6P4l::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6P4l::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6P4o_info" {
     sat_s6P4o_info:
         const sat_s6P4o_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c6V79() //  [R1]
         { []
         }
     {offset
       c6V79: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6V79_info" {
     block_c6V79_info:
         const _c6V79;
         const 1;
         const 30;
 },
 Data.Foldable.$dmfoldl'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6V7f: // global
           _s6P4j::P64 = R5;
           _s6P4i::P64 = R4;
           _s6P4h::P64 = R3;
           _s6P4g::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6V7g; else goto c6V7h;
       c6V7h: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6V7j; else goto c6V7i;
       c6V7j: // global
           HpAlloc = 16;
           goto c6V7g;
       c6V7g: // global
           R5 = _s6P4j::P64;
           R4 = _s6P4i::P64;
           R3 = _s6P4h::P64;
           R2 = _s6P4g::P64;
           R1 = Data.Foldable.$dmfoldl'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6V7i: // global
           I64[Hp - 8] = sat_s6P4o_info;
           P64[Hp] = _s6P4h::P64;
           R2 = _s6P4g::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 5;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = _s6P4j::P64;
           P64[Sp - 8] = _s6P4i::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmfoldl'_info" {
     Data.Foldable.$dmfoldl'_info:
         const Data.Foldable.$dmfoldl'_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.602582375 UTC

[section ""data" . Data.Foldable.$fFoldable:*:7_closure" {
     Data.Foldable.$fFoldable:*:7_closure:
         const Data.Foldable.$fFoldable:*:7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldable:*:7_entry() //  [R1]
         { []
         }
     {offset
       c6V7D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6V7E; else goto c6V7F;
       c6V7E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6V7F: // global
           (_c6V7A::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6V7A::I64 == 0) goto c6V7C; else goto c6V7B;
       c6V7C: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6V7B: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6V7A::I64;
           R2 = Data.Semigroup.Internal.$fMonoidEndo_closure;
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidDual_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:7_info" {
     Data.Foldable.$fFoldable:*:7_info:
         const Data.Foldable.$fFoldable:*:7_entry;
         const 0;
         const 4294967317;
         const S6PH7_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.607152266 UTC

[section ""data" . Data.Foldable.$dmfoldl_closure" {
     Data.Foldable.$dmfoldl_closure:
         const Data.Foldable.$dmfoldl_info;
         const 0;
 },
 sat_s6P4v_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6V7W: // global
           _s6P4u::P64 = R3;
           R3 = R2;
           R2 = _s6P4u::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6P4v_info" {
     sat_s6P4v_info:
         const sat_s6P4v_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$dmfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6V7Z: // global
           _s6P4s::P64 = R5;
           _s6P4r::P64 = R4;
           _s6P4q::P64 = R3;
           _s6P4p::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6V80; else goto c6V81;
       c6V81: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6V83; else goto c6V82;
       c6V83: // global
           HpAlloc = 16;
           goto c6V80;
       c6V80: // global
           R5 = _s6P4s::P64;
           R4 = _s6P4r::P64;
           R3 = _s6P4q::P64;
           R2 = _s6P4p::P64;
           R1 = Data.Foldable.$dmfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6V82: // global
           I64[Hp - 8] = sat_s6P4v_info;
           P64[Hp] = _s6P4q::P64;
           R2 = _s6P4p::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = _s6P4s::P64;
           P64[Sp - 8] = _s6P4r::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmfoldl_info" {
     Data.Foldable.$dmfoldl_info:
         const Data.Foldable.$dmfoldl_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S6PH7_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.614233101 UTC

[section ""data" . Data.Foldable.$dmfoldr'_closure" {
     Data.Foldable.$dmfoldr'_closure:
         const Data.Foldable.$dmfoldr'_info;
 },
 sat_s6P4E_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6V8o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6V8p; else goto c6V8q;
       c6V8p: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6V8q: // global
           I64[Sp - 16] = block_c6V8m_info;
           _s6P4B::P64 = R3;
           R3 = R4;
           _s6P4A::P64 = R2;
           R2 = _s6P4B::P64;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6P4A::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6P4E_info" {
     sat_s6P4E_info:
         const sat_s6P4E_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c6V8m() //  [R1]
         { []
         }
     {offset
       c6V8m: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6V8m_info" {
     block_c6V8m_info:
         const _c6V8m;
         const 1;
         const 30;
 },
 Data.Foldable.$dmfoldr'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6V8s: // global
           _s6P4z::P64 = R5;
           _s6P4y::P64 = R4;
           _s6P4x::P64 = R3;
           _s6P4w::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6V8t; else goto c6V8u;
       c6V8u: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6V8w; else goto c6V8v;
       c6V8w: // global
           HpAlloc = 16;
           goto c6V8t;
       c6V8t: // global
           R5 = _s6P4z::P64;
           R4 = _s6P4y::P64;
           R3 = _s6P4x::P64;
           R2 = _s6P4w::P64;
           R1 = Data.Foldable.$dmfoldr'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6V8v: // global
           I64[Hp - 8] = sat_s6P4E_info;
           P64[Hp] = _s6P4x::P64;
           R2 = _s6P4w::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 5;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = _s6P4z::P64;
           P64[Sp - 8] = _s6P4y::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldl_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmfoldr'_info" {
     Data.Foldable.$dmfoldr'_info:
         const Data.Foldable.$dmfoldr'_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.621306294 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cfoldr'_closure" {
     Data.Foldable.$fFoldableU1_$cfoldr'_closure:
         const Data.Foldable.$fFoldableU1_$cfoldr'_info;
 },
 Data.Foldable.$fFoldableU1_$cfoldr'_entry() //  [R3]
         { []
         }
     {offset
       c6V8O: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cfoldr'_info" {
     Data.Foldable.$fFoldableU1_$cfoldr'_info:
         const Data.Foldable.$fFoldableU1_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.624811446 UTC

[section ""data" . Data.Foldable.$fFoldableK4_closure" {
     Data.Foldable.$fFoldableK4_closure:
         const Data.Foldable.$fFoldableK4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableK4_entry() //  [R1]
         { []
         }
     {offset
       c6V91: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6V92; else goto c6V93;
       c6V92: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6V93: // global
           (_c6V8Y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6V8Y::I64 == 0) goto c6V90; else goto c6V8Z;
       c6V90: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6V8Z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6V8Y::I64;
           R2 = Data.Foldable.$fFoldableK5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK4_info" {
     Data.Foldable.$fFoldableK4_info:
         const Data.Foldable.$fFoldableK4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.628666153 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cmaximum_closure" {
     Data.Foldable.$fFoldableU1_$cmaximum_closure:
         const Data.Foldable.$fFoldableU1_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableU1_$cmaximum_entry() //  []
         { []
         }
     {offset
       c6V9f: // global
           R2 = Data.Foldable.$fFoldableK4_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cmaximum_info" {
     Data.Foldable.$fFoldableU1_$cmaximum_info:
         const Data.Foldable.$fFoldableU1_$cmaximum_entry;
         const 0;
         const 72057598332895246;
         const 8589934607;
         const S6PH7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.634039731 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cfoldl'_closure" {
     Data.Foldable.$fFoldableU1_$cfoldl'_closure:
         const Data.Foldable.$fFoldableU1_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableU1_$cfoldl'_entry() //  [R3]
         { []
         }
     {offset
       c6V9q: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cfoldl'_info" {
     Data.Foldable.$fFoldableU1_$cfoldl'_info:
         const Data.Foldable.$fFoldableU1_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.639185316 UTC

[section ""data" . Data.Foldable.$fFoldableK2_closure" {
     Data.Foldable.$fFoldableK2_closure:
         const Data.Foldable.$fFoldableK2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableK2_entry() //  [R1]
         { []
         }
     {offset
       c6V9D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6V9E; else goto c6V9F;
       c6V9E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6V9F: // global
           (_c6V9A::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6V9A::I64 == 0) goto c6V9C; else goto c6V9B;
       c6V9C: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6V9B: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6V9A::I64;
           R2 = Data.Foldable.$fFoldableK3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK2_info" {
     Data.Foldable.$fFoldableK2_info:
         const Data.Foldable.$fFoldableK2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.645900354 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cminimum_closure" {
     Data.Foldable.$fFoldableU1_$cminimum_closure:
         const Data.Foldable.$fFoldableU1_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableU1_$cminimum_entry() //  []
         { []
         }
     {offset
       c6V9R: // global
           R2 = Data.Foldable.$fFoldableK2_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cminimum_info" {
     Data.Foldable.$fFoldableU1_$cminimum_info:
         const Data.Foldable.$fFoldableU1_$cminimum_entry;
         const 0;
         const 144115192370823182;
         const 8589934607;
         const S6PH7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.65058873 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$ctoList_closure" {
     Data.Foldable.$fFoldableU1_$ctoList_closure:
         const Data.Foldable.$fFoldableU1_$ctoList_info;
 },
 Data.Foldable.$fFoldableU1_$ctoList_entry() //  []
         { []
         }
     {offset
       c6Va2: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$ctoList_info" {
     Data.Foldable.$fFoldableU1_$ctoList_info:
         const Data.Foldable.$fFoldableU1_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.655220633 UTC

[section ""data" . Data.Foldable.$fFoldableU1_closure" {
     Data.Foldable.$fFoldableU1_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableU1_$cfold_closure+2;
         const Data.Foldable.$fFoldableU1_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableU1_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableU1_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableU1_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableU1_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableU1_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableU1_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableU1_$ctoList_closure+1;
         const Data.Foldable.$fFoldableU1_$cnull_closure+1;
         const Data.Foldable.$fFoldableU1_$clength_closure+1;
         const Data.Foldable.$fFoldableU1_$celem_closure+3;
         const Data.Foldable.$fFoldableU1_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableU1_$cminimum_closure+2;
         const Data.Foldable.$fFoldableU1_$csum_closure+2;
         const Data.Foldable.$fFoldableU1_$cproduct_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.658444025 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cfoldr'_closure" {
     Data.Foldable.$fFoldableProxy_$cfoldr'_closure:
         const Data.Foldable.$fFoldableProxy_$cfoldr'_info;
 },
 Data.Foldable.$fFoldableProxy_$cfoldr'_entry() //  [R3]
         { []
         }
     {offset
       c6Vaf: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cfoldr'_info" {
     Data.Foldable.$fFoldableProxy_$cfoldr'_info:
         const Data.Foldable.$fFoldableProxy_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.663280236 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cmaximum_closure" {
     Data.Foldable.$fFoldableProxy_$cmaximum_closure:
         const Data.Foldable.$fFoldableProxy_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableProxy_$cmaximum_entry() //  []
         { []
         }
     {offset
       c6Vaq: // global
           R2 = Data.Foldable.$fFoldableK4_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cmaximum_info" {
     Data.Foldable.$fFoldableProxy_$cmaximum_info:
         const Data.Foldable.$fFoldableProxy_$cmaximum_entry;
         const 0;
         const 72057598332895246;
         const 8589934607;
         const S6PH7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.667874019 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cfoldl'_closure" {
     Data.Foldable.$fFoldableProxy_$cfoldl'_closure:
         const Data.Foldable.$fFoldableProxy_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableProxy_$cfoldl'_entry() //  [R3]
         { []
         }
     {offset
       c6VaB: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cfoldl'_info" {
     Data.Foldable.$fFoldableProxy_$cfoldl'_info:
         const Data.Foldable.$fFoldableProxy_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.672572346 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cminimum_closure" {
     Data.Foldable.$fFoldableProxy_$cminimum_closure:
         const Data.Foldable.$fFoldableProxy_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableProxy_$cminimum_entry() //  []
         { []
         }
     {offset
       c6VaM: // global
           R2 = Data.Foldable.$fFoldableK2_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cminimum_info" {
     Data.Foldable.$fFoldableProxy_$cminimum_info:
         const Data.Foldable.$fFoldableProxy_$cminimum_entry;
         const 0;
         const 144115192370823182;
         const 8589934607;
         const S6PH7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.678111178 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$ctoList_closure" {
     Data.Foldable.$fFoldableProxy_$ctoList_closure:
         const Data.Foldable.$fFoldableProxy_$ctoList_info;
 },
 Data.Foldable.$fFoldableProxy_$ctoList_entry() //  []
         { []
         }
     {offset
       c6VaX: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$ctoList_info" {
     Data.Foldable.$fFoldableProxy_$ctoList_info:
         const Data.Foldable.$fFoldableProxy_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.683379084 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_closure" {
     Data.Foldable.$fFoldableProxy_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableProxy_$cfold_closure+2;
         const Data.Foldable.$fFoldableProxy_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableProxy_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableProxy_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableProxy_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableProxy_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableProxy_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableProxy_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableProxy_$ctoList_closure+1;
         const Data.Foldable.$fFoldableProxy_$cnull_closure+1;
         const Data.Foldable.$fFoldableProxy_$clength_closure+1;
         const Data.Foldable.$fFoldableProxy_$celem_closure+3;
         const Data.Foldable.$fFoldableProxy_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableProxy_$cminimum_closure+2;
         const Data.Foldable.$fFoldableProxy_$csum_closure+2;
         const Data.Foldable.$fFoldableProxy_$cproduct_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.686601761 UTC

[section ""data" . Data.Foldable.$dmfoldr_closure" {
     Data.Foldable.$dmfoldr_closure:
         const Data.Foldable.$dmfoldr_info;
         const 0;
 },
 Data.Foldable.$dmfoldr_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6Vba: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Vbb; else goto c6Vbc;
       c6Vbb: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$dmfoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vbc: // global
           R2 = R2;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmfoldr_info" {
     Data.Foldable.$dmfoldr_info:
         const Data.Foldable.$dmfoldr_entry;
         const 0;
         const 141733920782;
         const 17179869208;
         const S6PH7_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.69152723 UTC

[section ""data" . Data.Foldable.$dmfoldMap_closure" {
     Data.Foldable.$dmfoldMap_closure:
         const Data.Foldable.$dmfoldMap_info;
 },
 sat_s6P5b_entry() //  [R1]
         { []
         }
     {offset
       c6Vbq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vbr; else goto c6Vbs;
       c6Vbr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Vbs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P5b_info" {
     sat_s6P5b_info:
         const sat_s6P5b_entry;
         const 1;
         const 16;
 },
 sat_s6P5a_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Vbz: // global
           _s6P58::P64 = R2;
           _s6P5a::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6VbA; else goto c6VbB;
       c6VbB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6VbD; else goto c6VbC;
       c6VbD: // global
           HpAlloc = 32;
           goto c6VbA;
       c6VbA: // global
           R2 = _s6P58::P64;
           R1 = _s6P5a::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VbC: // global
           _s6P56::P64 = P64[_s6P5a::P64 + 7];
           _s6P57::P64 = P64[_s6P5a::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s6P57::P64;
           P64[Hp] = _s6P58::P64;
           R2 = _s6P56::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6P5a_info" {
     sat_s6P5a_info:
         const sat_s6P5a_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Foldable.$dmfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6VbE: // global
           _s6P57::P64 = R4;
           _s6P56::P64 = R3;
           _s6P55::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6VbF; else goto c6VbG;
       c6VbG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6VbI; else goto c6VbH;
       c6VbI: // global
           HpAlloc = 48;
           goto c6VbF;
       c6VbF: // global
           R4 = _s6P57::P64;
           R3 = _s6P56::P64;
           R2 = _s6P55::P64;
           R1 = Data.Foldable.$dmfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VbH: // global
           I64[Hp - 40] = sat_s6P5b_info;
           P64[Hp - 24] = _s6P56::P64;
           I64[Hp - 16] = sat_s6P5a_info;
           P64[Hp - 8] = _s6P56::P64;
           P64[Hp] = _s6P57::P64;
           R2 = _s6P55::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Foldable.foldr_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmfoldMap_info" {
     Data.Foldable.$dmfoldMap_info:
         const Data.Foldable.$dmfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.699384689 UTC

[section ""data" . Data.Foldable.$dmfold_closure" {
     Data.Foldable.$dmfold_closure:
         const Data.Foldable.$dmfold_info;
 },
 Data.Foldable.$dmfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Vc3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Vc4; else goto c6Vc5;
       c6Vc4: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$dmfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vc5: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = GHC.Base.id_closure+1;
           Sp = Sp - 24;
           call Data.Foldable.foldMap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmfold_info" {
     Data.Foldable.$dmfold_info:
         const Data.Foldable.$dmfold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.703108381 UTC

[section ""data" . Data.Foldable.$fFoldableDual7_closure" {
     Data.Foldable.$fFoldableDual7_closure:
         const Data.Foldable.$fFoldableDual7_info;
 },
 Data.Foldable.$fFoldableDual7_entry() //  [R3]
         { []
         }
     {offset
       c6Vcf: // global
           R2 = R3;
           call GHC.Base.id_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual7_info" {
     Data.Foldable.$fFoldableDual7_info:
         const Data.Foldable.$fFoldableDual7_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.706393164 UTC

[section ""data" . Data.Foldable.$fFoldableProduct_closure" {
     Data.Foldable.$fFoldableProduct_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableDual7_closure+2;
         const Data.Foldable.$fFoldableDual6_closure+2;
         const Data.Foldable.$fFoldableProduct_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableProduct_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableDual5_closure+1;
         const Data.Foldable.$fFoldableDual5_closure+1;
         const Data.Foldable.$fFoldableProduct3_closure+2;
         const Data.Foldable.$fFoldableProduct3_closure+2;
         const Data.Foldable.$fFoldableProduct_$ctoList_closure+1;
         const Data.Foldable.$fFoldableProduct_$cnull_closure+1;
         const Data.Foldable.$fFoldableProduct_$clength_closure+1;
         const GHC.Classes.==_closure+1;
         const Data.Foldable.$fFoldableProduct2_closure+2;
         const Data.Foldable.$fFoldableProduct2_closure+2;
         const Data.Foldable.$fFoldableProduct1_closure+2;
         const Data.Foldable.$fFoldableProduct1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.708992764 UTC

[section ""data" . Data.Foldable.$fFoldableSum_closure" {
     Data.Foldable.$fFoldableSum_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableDual7_closure+2;
         const Data.Foldable.$fFoldableDual6_closure+2;
         const Data.Foldable.$fFoldableSum_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableSum_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableDual5_closure+1;
         const Data.Foldable.$fFoldableDual5_closure+1;
         const Data.Foldable.$fFoldableSum3_closure+2;
         const Data.Foldable.$fFoldableSum3_closure+2;
         const Data.Foldable.$fFoldableSum_$ctoList_closure+1;
         const Data.Foldable.$fFoldableSum_$cnull_closure+1;
         const Data.Foldable.$fFoldableSum_$clength_closure+1;
         const GHC.Classes.==_closure+1;
         const Data.Foldable.$fFoldableSum2_closure+2;
         const Data.Foldable.$fFoldableSum2_closure+2;
         const Data.Foldable.$fFoldableSum1_closure+2;
         const Data.Foldable.$fFoldableSum1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.711316603 UTC

[section ""data" . Data.Foldable.$fFoldableDual_closure" {
     Data.Foldable.$fFoldableDual_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableDual7_closure+2;
         const Data.Foldable.$fFoldableDual6_closure+2;
         const Data.Foldable.$fFoldableDual_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableDual_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableDual5_closure+1;
         const Data.Foldable.$fFoldableDual5_closure+1;
         const Data.Foldable.$fFoldableDual4_closure+2;
         const Data.Foldable.$fFoldableDual4_closure+2;
         const Data.Foldable.$fFoldableDual_$ctoList_closure+1;
         const Data.Foldable.$fFoldableDual_$cnull_closure+1;
         const Data.Foldable.$fFoldableDual_$clength_closure+1;
         const GHC.Classes.==_closure+1;
         const Data.Foldable.$fFoldableDual2_closure+2;
         const Data.Foldable.$fFoldableDual2_closure+2;
         const Data.Foldable.$fFoldableDual1_closure+2;
         const Data.Foldable.$fFoldableDual1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.715424923 UTC

[section ""data" . Data.Foldable.$fFoldable[]_$cfoldr'_closure" {
     Data.Foldable.$fFoldable[]_$cfoldr'_closure:
         const Data.Foldable.$fFoldable[]_$cfoldr'_info;
 },
 sat_s6P5r_entry() //  [R1, R2]
         { []
         }
     {offset
       c6VcL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VcM; else goto c6VcN;
       c6VcM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VcN: // global
           I64[Sp - 16] = block_c6VcJ_info;
           R3 = R2;
           R2 = P64[R1 + 23];
           _s6P5k::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s6P5k::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6P5r_info" {
     sat_s6P5r_info:
         const sat_s6P5r_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c6VcJ() //  [R1]
         { []
         }
     {offset
       c6VcJ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VcJ_info" {
     block_c6VcJ_info:
         const _c6VcJ;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldable[]_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6VcP: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6VcQ; else goto c6VcR;
       c6VcQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable[]_$cfoldr'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VcR: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           call _c6Vcw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable[]_$cfoldr'_info" {
     Data.Foldable.$fFoldable[]_$cfoldr'_info:
         const Data.Foldable.$fFoldable[]_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Vcw() //  []
         { []
         }
     {offset
       c6Vcw: // global
           I64[Sp - 8] = block_c6Vcy_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Vd4; else goto c6Vcz;
       u6Vd4: // global
           call _c6Vcy(R1) args: 0, res: 0, upd: 0;
       c6Vcz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6Vcy() //  [R1]
         { []
         }
     {offset
       c6Vcy: // global
           _s6P5k::P64 = P64[Sp + 24];
           _s6P5l::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c6VcW; else goto c6VcX;
       c6VcW: // global
           R2 = _s6P5l::P64;
           R1 = _s6P5k::P64;
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c6VcX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Vd0; else goto c6VcZ;
       c6Vd0: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6VcZ: // global
           _s6P5n::P64 = P64[R1 + 6];
           _s6P5o::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_s6P5r_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s6P5k::P64;
           P64[Hp] = _s6P5n::P64;
           P64[Sp + 16] = _s6P5o::P64;
           P64[Sp + 24] = Hp - 23;
           P64[Sp + 32] = _s6P5l::P64;
           Sp = Sp + 8;
           call _c6Vcw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6Vcy_info" {
     block_c6Vcy_info:
         const _c6Vcy;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.727328155 UTC

[section ""data" . Data.Foldable.$fFoldable[]_$cfoldMap_closure" {
     Data.Foldable.$fFoldable[]_$cfoldMap_closure:
         const Data.Foldable.$fFoldable[]_$cfoldMap_info;
 },
 z_s6P5v_entry() //  [R1]
         { []
         }
     {offset
       c6VdB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VdC; else goto c6VdD;
       c6VdC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VdD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6P5v_info" {
     z_s6P5v_info:
         const z_s6P5v_entry;
         const 1;
         const 16;
 },
 go_s6P5w_entry() //  [R1, R2]
         { []
         }
     {offset
       c6VdQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6VdR; else goto c6VdS;
       c6VdR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VdS: // global
           I64[Sp - 40] = block_c6VdJ_info;
           _s6P5w::P64 = R1;
           _s6P5s::P64 = P64[R1 + 7];
           _s6P5t::P64 = P64[R1 + 15];
           _s6P5v::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _s6P5s::P64;
           P64[Sp - 24] = _s6P5t::P64;
           P64[Sp - 16] = _s6P5v::P64;
           P64[Sp - 8] = _s6P5w::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6Ve3; else goto c6VdK;
       u6Ve3: // global
           call _c6VdJ(R1) args: 0, res: 0, upd: 0;
       c6VdK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6P5w_info" {
     go_s6P5w_info:
         const go_s6P5w_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c6VdJ() //  [R1]
         { []
         }
     {offset
       c6VdJ: // global
           if (R1 & 7 == 1) goto c6VdN; else goto c6VdO;
       c6VdN: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6VdO: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6Ve0; else goto c6VdZ;
       c6Ve0: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6VdZ: // global
           _s6P5z::P64 = P64[R1 + 6];
           _s6P5A::P64 = P64[R1 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _s6P5A::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s6P5z::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 32] = Hp - 56;
           Sp = Sp + 16;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VdJ_info" {
     block_c6VdJ_info:
         const _c6VdJ;
         const 4;
         const 30;
 },
 Data.Foldable.$fFoldable[]_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Ve4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6Ve8; else goto c6Ve7;
       c6Ve8: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable[]_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Ve7: // global
           I64[Hp - 48] = z_s6P5v_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = go_s6P5w_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R2 = R4;
           R1 = Hp - 23;
           call go_s6P5w_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable[]_$cfoldMap_info" {
     Data.Foldable.$fFoldable[]_$cfoldMap_info:
         const Data.Foldable.$fFoldable[]_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.743172831 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfold1_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfold1_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfold1_info;
 },
 z_s6P5F_entry() //  [R1]
         { []
         }
     {offset
       c6VeE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VeF; else goto c6VeG;
       c6VeF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VeG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6P5F_info" {
     z_s6P5F_info:
         const z_s6P5F_entry;
         const 1;
         const 16;
 },
 go_s6P5G_entry() //  [R1, R2]
         { []
         }
     {offset
       c6VeT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6VeU; else goto c6VeV;
       c6VeU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VeV: // global
           I64[Sp - 32] = block_c6VeM_info;
           _s6P5G::P64 = R1;
           _s6P5D::P64 = P64[R1 + 7];
           _s6P5F::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s6P5D::P64;
           P64[Sp - 16] = _s6P5F::P64;
           P64[Sp - 8] = _s6P5G::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6Vf5; else goto c6VeN;
       u6Vf5: // global
           call _c6VeM(R1) args: 0, res: 0, upd: 0;
       c6VeN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6P5G_info" {
     go_s6P5G_info:
         const go_s6P5G_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c6VeM() //  [R1]
         { []
         }
     {offset
       c6VeM: // global
           if (R1 & 7 == 1) goto c6VeQ; else goto c6VeR;
       c6VeQ: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6VeR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Vf3; else goto c6Vf2;
       c6Vf3: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Vf2: // global
           _s6P5J::P64 = P64[R1 + 6];
           _s6P5K::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s6P5K::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6P5J::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VeM_info" {
     block_c6VeM_info:
         const _c6VeM;
         const 3;
         const 30;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfold1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Vf6: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6Vfa; else goto c6Vf9;
       c6Vfa: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfold1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vf9: // global
           I64[Hp - 40] = z_s6P5F_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_s6P5G_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R2 = R3;
           R1 = Hp - 15;
           call go_s6P5G_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfold1_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfold1_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfold1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.756172543 UTC

[section ""data" . Data.Foldable.$fFoldable[]_closure" {
     Data.Foldable.$fFoldable[]_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableNonEmpty_$cfold1_closure+2;
         const Data.Foldable.$fFoldable[]_$cfoldMap_closure+3;
         const GHC.Base.foldr_closure+3;
         const Data.Foldable.$fFoldable[]_$cfoldr'_closure+3;
         const GHC.List.foldl_closure+3;
         const GHC.List.foldl'_closure+3;
         const GHC.List.foldr1_closure+2;
         const GHC.List.foldl1_closure+2;
         const GHC.Base.id_closure+1;
         const GHC.List.null_closure+1;
         const GHC.List.length_closure+1;
         const GHC.List.elem_closure+3;
         const GHC.List.maximum_closure+2;
         const GHC.List.minimum_closure+2;
         const GHC.List.sum_closure+1;
         const GHC.List.product_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.760970809 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfold_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfold_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfold_info;
 },
 sat_s6P5V_entry() //  [R1]
         { []
         }
     {offset
       c6VfI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6VfJ; else goto c6VfK;
       c6VfJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VfK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6VfF_info;
           _s6P5M::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s6P5M::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6VfO; else goto c6VfG;
       u6VfO: // global
           call _c6VfF(R1) args: 0, res: 0, upd: 0;
       c6VfG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P5V_info" {
     sat_s6P5V_info:
         const sat_s6P5V_entry;
         const 2;
         const 18;
 },
 _c6VfF() //  [R1]
         { []
         }
     {offset
       c6VfF: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Foldable.$fFoldableNonEmpty_$cfold1_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6VfF_info" {
     block_c6VfF_info:
         const _c6VfF;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VfQ: // global
           _s6P5N::P64 = R3;
           _s6P5M::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6VfR; else goto c6VfS;
       c6VfS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6VfU; else goto c6VfT;
       c6VfU: // global
           HpAlloc = 56;
           goto c6VfR;
       c6VfR: // global
           R3 = _s6P5N::P64;
           R2 = _s6P5M::P64;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VfT: // global
           I64[Hp - 48] = sat_s6P5V_info;
           P64[Hp - 32] = _s6P5M::P64;
           P64[Hp - 24] = _s6P5N::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s6P5N::P64;
           R2 = _s6P5M::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfold_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfold_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.776506515 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfoldMap_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldMap_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldMap_info;
 },
 z_s6P67_entry() //  [R1]
         { []
         }
     {offset
       c6Vgr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vgs; else goto c6Vgt;
       c6Vgs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Vgt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6P67_info" {
     z_s6P67_info:
         const z_s6P67_entry;
         const 1;
         const 16;
 },
 go_s6P68_entry() //  [R1, R2]
         { []
         }
     {offset
       c6VgG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6VgH; else goto c6VgI;
       c6VgH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VgI: // global
           I64[Sp - 40] = block_c6Vgz_info;
           _s6P68::P64 = R1;
           _s6P5W::P64 = P64[R1 + 7];
           _s6P5X::P64 = P64[R1 + 15];
           _s6P67::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _s6P5W::P64;
           P64[Sp - 24] = _s6P5X::P64;
           P64[Sp - 16] = _s6P67::P64;
           P64[Sp - 8] = _s6P68::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6VgT; else goto c6VgA;
       u6VgT: // global
           call _c6Vgz(R1) args: 0, res: 0, upd: 0;
       c6VgA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6P68_info" {
     go_s6P68_info:
         const go_s6P68_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c6Vgz() //  [R1]
         { []
         }
     {offset
       c6Vgz: // global
           if (R1 & 7 == 1) goto c6VgD; else goto c6VgE;
       c6VgD: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6VgE: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6VgQ; else goto c6VgP;
       c6VgQ: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6VgP: // global
           _s6P6b::P64 = P64[R1 + 6];
           _s6P6c::P64 = P64[R1 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _s6P6c::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s6P6b::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 32] = Hp - 56;
           Sp = Sp + 16;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Vgz_info" {
     block_c6Vgz_info:
         const _c6Vgz;
         const 4;
         const 30;
 },
 sat_s6P6f_entry() //  [R1]
         { []
         }
     {offset
       c6VgU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6VgV; else goto c6VgW;
       c6VgV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VgW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6Vgi_info;
           _s6P5W::P64 = P64[R1 + 16];
           _s6P5X::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6P5W::P64;
           P64[Sp - 24] = _s6P5X::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6Vh0; else goto c6Vgj;
       u6Vh0: // global
           call _c6Vgi(R1) args: 0, res: 0, upd: 0;
       c6Vgj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P6f_info" {
     sat_s6P6f_info:
         const sat_s6P6f_entry;
         const 3;
         const 15;
 },
 _c6Vgi() //  [R1]
         { []
         }
     {offset
       c6Vgi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6VgZ; else goto c6VgY;
       c6VgZ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6VgY: // global
           _s6P66::P64 = P64[R1 + 15];
           I64[Hp - 48] = z_s6P67_info;
           _s6P5W::P64 = P64[Sp + 8];
           P64[Hp - 32] = _s6P5W::P64;
           I64[Hp - 24] = go_s6P68_info;
           P64[Hp - 16] = _s6P5W::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 48;
           R2 = _s6P66::P64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call go_s6P68_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Vgi_info" {
     block_c6Vgi_info:
         const _c6Vgi;
         const 2;
         const 30;
 },
 sat_s6P63_entry() //  [R1]
         { []
         }
     {offset
       c6Vh6: // global
           _s6P63::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vh7; else goto c6Vh8;
       c6Vh8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Vha; else goto c6Vh9;
       c6Vha: // global
           HpAlloc = 24;
           goto c6Vh7;
       c6Vh7: // global
           R1 = _s6P63::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Vh9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6P63::P64;
           _s6P5X::P64 = P64[_s6P63::P64 + 16];
           _s6P5Y::P64 = P64[_s6P63::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s6P5Y::P64;
           R2 = Hp - 16;
           R1 = _s6P5X::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P63_info" {
     sat_s6P63_info:
         const sat_s6P63_entry;
         const 2;
         const 18;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Vhb: // global
           _s6P5Y::P64 = R4;
           _s6P5X::P64 = R3;
           _s6P5W::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6Vhc; else goto c6Vhd;
       c6Vhd: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6Vhf; else goto c6Vhe;
       c6Vhf: // global
           HpAlloc = 72;
           goto c6Vhc;
       c6Vhc: // global
           R4 = _s6P5Y::P64;
           R3 = _s6P5X::P64;
           R2 = _s6P5W::P64;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vhe: // global
           I64[Hp - 64] = sat_s6P6f_info;
           P64[Hp - 48] = _s6P5W::P64;
           P64[Hp - 40] = _s6P5X::P64;
           P64[Hp - 32] = _s6P5Y::P64;
           I64[Hp - 24] = sat_s6P63_info;
           P64[Hp - 8] = _s6P5X::P64;
           P64[Hp] = _s6P5Y::P64;
           R2 = _s6P5W::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfoldMap_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldMap_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.795059031 UTC

[section ""data" . Data.Foldable.foldrM_closure" {
     Data.Foldable.foldrM_closure:
         const Data.Foldable.foldrM_info;
 },
 sat_s6P6q_entry() //  [R1]
         { []
         }
     {offset
       c6Vi1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vi2; else goto c6Vi3;
       c6Vi2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Vi3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P6q_info" {
     sat_s6P6q_info:
         const sat_s6P6q_entry;
         const 1;
         const 16;
 },
 sat_s6P6p_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6Via: // global
           _s6P6n::P64 = R4;
           _s6P6m::P64 = R3;
           _s6P6l::P64 = R2;
           _s6P6p::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c6Vib; else goto c6Vic;
       c6Vic: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6Vie; else goto c6Vid;
       c6Vie: // global
           HpAlloc = 40;
           goto c6Vib;
       c6Vib: // global
           R4 = _s6P6n::P64;
           R3 = _s6P6m::P64;
           R2 = _s6P6l::P64;
           R1 = _s6P6p::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vid: // global
           _s6P6h::P64 = P64[_s6P6p::P64 + 5];
           _s6P6i::P64 = P64[_s6P6p::P64 + 13];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s6P6i::P64;
           P64[Hp - 8] = _s6P6m::P64;
           P64[Hp] = _s6P6n::P64;
           R2 = _s6P6h::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _s6P6l::P64;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6P6p_info" {
     sat_s6P6p_info:
         const sat_s6P6p_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 Data.Foldable.foldrM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c6Vif: // global
           _s6P6k::P64 = R6;
           _s6P6j::P64 = R5;
           _s6P6i::P64 = R4;
           _s6P6h::P64 = R3;
           _s6P6g::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6Vig; else goto c6Vih;
       c6Vih: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6Vij; else goto c6Vii;
       c6Vij: // global
           HpAlloc = 48;
           goto c6Vig;
       c6Vig: // global
           R6 = _s6P6k::P64;
           R5 = _s6P6j::P64;
           R4 = _s6P6i::P64;
           R3 = _s6P6h::P64;
           R2 = _s6P6g::P64;
           R1 = Data.Foldable.foldrM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vii: // global
           I64[Hp - 40] = sat_s6P6q_info;
           P64[Hp - 24] = _s6P6h::P64;
           I64[Hp - 16] = sat_s6P6p_info;
           P64[Hp - 8] = _s6P6h::P64;
           P64[Hp] = _s6P6i::P64;
           R2 = _s6P6g::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 13;
           P64[Sp - 24] = Hp - 40;
           P64[Sp - 16] = _s6P6k::P64;
           P64[Sp - 8] = _s6P6j::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldl_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldrM_info" {
     Data.Foldable.foldrM_info:
         const Data.Foldable.foldrM_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.804195118 UTC

[section ""data" . Data.Foldable.foldlM_closure" {
     Data.Foldable.foldlM_closure:
         const Data.Foldable.foldlM_info;
 },
 sat_s6P6B_entry() //  [R1]
         { []
         }
     {offset
       c6ViI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ViJ; else goto c6ViK;
       c6ViJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ViK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P6B_info" {
     sat_s6P6B_info:
         const sat_s6P6B_entry;
         const 1;
         const 16;
 },
 sat_s6P6A_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6ViR: // global
           _s6P6y::P64 = R4;
           _s6P6x::P64 = R3;
           _s6P6w::P64 = R2;
           _s6P6A::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c6ViS; else goto c6ViT;
       c6ViT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6ViV; else goto c6ViU;
       c6ViV: // global
           HpAlloc = 40;
           goto c6ViS;
       c6ViS: // global
           R4 = _s6P6y::P64;
           R3 = _s6P6x::P64;
           R2 = _s6P6w::P64;
           R1 = _s6P6A::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ViU: // global
           _s6P6s::P64 = P64[_s6P6A::P64 + 5];
           _s6P6t::P64 = P64[_s6P6A::P64 + 13];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s6P6t::P64;
           P64[Hp - 8] = _s6P6y::P64;
           P64[Hp] = _s6P6w::P64;
           R2 = _s6P6s::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _s6P6x::P64;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6P6A_info" {
     sat_s6P6A_info:
         const sat_s6P6A_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 Data.Foldable.foldlM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c6ViW: // global
           _s6P6v::P64 = R6;
           _s6P6u::P64 = R5;
           _s6P6t::P64 = R4;
           _s6P6s::P64 = R3;
           _s6P6r::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6ViX; else goto c6ViY;
       c6ViY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6Vj0; else goto c6ViZ;
       c6Vj0: // global
           HpAlloc = 48;
           goto c6ViX;
       c6ViX: // global
           R6 = _s6P6v::P64;
           R5 = _s6P6u::P64;
           R4 = _s6P6t::P64;
           R3 = _s6P6s::P64;
           R2 = _s6P6r::P64;
           R1 = Data.Foldable.foldlM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ViZ: // global
           I64[Hp - 40] = sat_s6P6B_info;
           P64[Hp - 24] = _s6P6s::P64;
           I64[Hp - 16] = sat_s6P6A_info;
           P64[Hp - 8] = _s6P6s::P64;
           P64[Hp] = _s6P6t::P64;
           R2 = _s6P6r::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 13;
           P64[Sp - 24] = Hp - 40;
           P64[Sp - 16] = _s6P6v::P64;
           P64[Sp - 8] = _s6P6u::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldlM_info" {
     Data.Foldable.foldlM_info:
         const Data.Foldable.foldlM_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.813726407 UTC

[section ""data" . Data.Foldable.traverse__closure" {
     Data.Foldable.traverse__closure:
         const Data.Foldable.traverse__info;
 },
 sat_s6P6I_entry() //  [R1]
         { []
         }
     {offset
       c6Vjp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Vjq; else goto c6Vjr;
       c6Vjq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Vjr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Tuple.()_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P6I_info" {
     sat_s6P6I_info:
         const sat_s6P6I_entry;
         const 1;
         const 16;
 },
 sat_s6P6H_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Vjy: // global
           _s6P6F::P64 = R2;
           _s6P6H::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vjz; else goto c6VjA;
       c6VjA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6VjC; else goto c6VjB;
       c6VjC: // global
           HpAlloc = 32;
           goto c6Vjz;
       c6Vjz: // global
           R2 = _s6P6F::P64;
           R1 = _s6P6H::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VjB: // global
           _s6P6D::P64 = P64[_s6P6H::P64 + 7];
           _s6P6E::P64 = P64[_s6P6H::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s6P6E::P64;
           P64[Hp] = _s6P6F::P64;
           R2 = _s6P6D::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.*>_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6P6H_info" {
     sat_s6P6H_info:
         const sat_s6P6H_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Foldable.traverse__entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6VjD: // global
           _s6P6E::P64 = R4;
           _s6P6D::P64 = R3;
           _s6P6C::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6VjE; else goto c6VjF;
       c6VjF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6VjH; else goto c6VjG;
       c6VjH: // global
           HpAlloc = 48;
           goto c6VjE;
       c6VjE: // global
           R4 = _s6P6E::P64;
           R3 = _s6P6D::P64;
           R2 = _s6P6C::P64;
           R1 = Data.Foldable.traverse__closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VjG: // global
           I64[Hp - 40] = sat_s6P6I_info;
           P64[Hp - 24] = _s6P6D::P64;
           I64[Hp - 16] = sat_s6P6H_info;
           P64[Hp - 8] = _s6P6D::P64;
           P64[Hp] = _s6P6E::P64;
           R2 = _s6P6C::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Foldable.foldr_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.traverse__info" {
     Data.Foldable.traverse__info:
         const Data.Foldable.traverse__entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.821233833 UTC

[section ""data" . Data.Foldable.for__closure" {
     Data.Foldable.for__closure:
         const Data.Foldable.for__info;
 },
 Data.Foldable.for__entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6Vk2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vk3; else goto c6Vk4;
       c6Vk3: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.for__closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vk4: // global
           _s6P6L::P64 = R4;
           R4 = R5;
           R3 = R3;
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s6P6L::P64;
           Sp = Sp - 16;
           call Data.Foldable.traverse__entry(R4,
                                              R3,
                                              R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.for__info" {
     Data.Foldable.for__info:
         const Data.Foldable.for__entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.826388975 UTC

[section ""data" . Data.Foldable.mapM__closure" {
     Data.Foldable.mapM__closure:
         const Data.Foldable.mapM__info;
 },
 sat_s6P6T_entry() //  [R1]
         { []
         }
     {offset
       c6Vki: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Vkj; else goto c6Vkk;
       c6Vkj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Vkk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Tuple.()_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P6T_info" {
     sat_s6P6T_info:
         const sat_s6P6T_entry;
         const 1;
         const 16;
 },
 sat_s6P6S_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Vkr: // global
           _s6P6Q::P64 = R2;
           _s6P6S::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vks; else goto c6Vkt;
       c6Vkt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Vkv; else goto c6Vku;
       c6Vkv: // global
           HpAlloc = 32;
           goto c6Vks;
       c6Vks: // global
           R2 = _s6P6Q::P64;
           R1 = _s6P6S::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Vku: // global
           _s6P6O::P64 = P64[_s6P6S::P64 + 7];
           _s6P6P::P64 = P64[_s6P6S::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s6P6P::P64;
           P64[Hp] = _s6P6Q::P64;
           R2 = _s6P6O::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.>>_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6P6S_info" {
     sat_s6P6S_info:
         const sat_s6P6S_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Foldable.mapM__entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Vkw: // global
           _s6P6P::P64 = R4;
           _s6P6O::P64 = R3;
           _s6P6N::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6Vkx; else goto c6Vky;
       c6Vky: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6VkA; else goto c6Vkz;
       c6VkA: // global
           HpAlloc = 48;
           goto c6Vkx;
       c6Vkx: // global
           R4 = _s6P6P::P64;
           R3 = _s6P6O::P64;
           R2 = _s6P6N::P64;
           R1 = Data.Foldable.mapM__closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vkz: // global
           I64[Hp - 40] = sat_s6P6T_info;
           P64[Hp - 24] = _s6P6O::P64;
           I64[Hp - 16] = sat_s6P6S_info;
           P64[Hp - 8] = _s6P6O::P64;
           P64[Hp] = _s6P6P::P64;
           R2 = _s6P6N::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Foldable.foldr_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.mapM__info" {
     Data.Foldable.mapM__info:
         const Data.Foldable.mapM__entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.837075082 UTC

[section ""data" . Data.Foldable.forM__closure" {
     Data.Foldable.forM__closure:
         const Data.Foldable.forM__info;
 },
 Data.Foldable.forM__entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6VkV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VkW; else goto c6VkX;
       c6VkW: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.forM__closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VkX: // global
           _s6P6W::P64 = R4;
           R4 = R5;
           R3 = R3;
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s6P6W::P64;
           Sp = Sp - 16;
           call Data.Foldable.mapM__entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.forM__info" {
     Data.Foldable.forM__info:
         const Data.Foldable.forM__entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.843670165 UTC

[section ""data" . Data.Foldable.sequenceA__closure" {
     Data.Foldable.sequenceA__closure:
         const Data.Foldable.sequenceA__info;
 },
 sat_s6P71_entry() //  [R1]
         { []
         }
     {offset
       c6Vlb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Vlc; else goto c6Vld;
       c6Vlc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Vld: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Tuple.()_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P71_info" {
     sat_s6P71_info:
         const sat_s6P71_entry;
         const 1;
         const 16;
 },
 sat_s6P70_entry() //  [R1]
         { []
         }
     {offset
       c6Vli: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vlj; else goto c6Vlk;
       c6Vlj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Vlk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.*>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P70_info" {
     sat_s6P70_info:
         const sat_s6P70_entry;
         const 1;
         const 16;
 },
 Data.Foldable.sequenceA__entry() //  [R2, R3]
         { []
         }
     {offset
       c6Vll: // global
           _s6P6Z::P64 = R3;
           _s6P6Y::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6Vlm; else goto c6Vln;
       c6Vln: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6Vlp; else goto c6Vlo;
       c6Vlp: // global
           HpAlloc = 48;
           goto c6Vlm;
       c6Vlm: // global
           R3 = _s6P6Z::P64;
           R2 = _s6P6Y::P64;
           R1 = Data.Foldable.sequenceA__closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vlo: // global
           I64[Hp - 40] = sat_s6P71_info;
           P64[Hp - 24] = _s6P6Z::P64;
           I64[Hp - 16] = sat_s6P70_info;
           P64[Hp] = _s6P6Z::P64;
           R2 = _s6P6Y::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Foldable.foldr_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.sequenceA__info" {
     Data.Foldable.sequenceA__info:
         const Data.Foldable.sequenceA__entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.854818322 UTC

[section ""data" . Data.Foldable.sequence__closure" {
     Data.Foldable.sequence__closure:
         const Data.Foldable.sequence__info;
 },
 sat_s6P75_entry() //  [R1]
         { []
         }
     {offset
       c6VlN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6VlO; else goto c6VlP;
       c6VlO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VlP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Tuple.()_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P75_info" {
     sat_s6P75_info:
         const sat_s6P75_entry;
         const 1;
         const 16;
 },
 sat_s6P74_entry() //  [R1]
         { []
         }
     {offset
       c6VlU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VlV; else goto c6VlW;
       c6VlV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VlW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.>>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P74_info" {
     sat_s6P74_info:
         const sat_s6P74_entry;
         const 1;
         const 16;
 },
 Data.Foldable.sequence__entry() //  [R2, R3]
         { []
         }
     {offset
       c6VlX: // global
           _s6P73::P64 = R3;
           _s6P72::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6VlY; else goto c6VlZ;
       c6VlZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6Vm1; else goto c6Vm0;
       c6Vm1: // global
           HpAlloc = 48;
           goto c6VlY;
       c6VlY: // global
           R3 = _s6P73::P64;
           R2 = _s6P72::P64;
           R1 = Data.Foldable.sequence__closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vm0: // global
           I64[Hp - 40] = sat_s6P75_info;
           P64[Hp - 24] = _s6P73::P64;
           I64[Hp - 16] = sat_s6P74_info;
           P64[Hp] = _s6P73::P64;
           R2 = _s6P72::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Foldable.foldr_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.sequence__info" {
     Data.Foldable.sequence__info:
         const Data.Foldable.sequence__entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.866470406 UTC

[section ""data" . Data.Foldable.asum_closure" {
     Data.Foldable.asum_closure:
         const Data.Foldable.asum_info;
 },
 sat_s6P79_entry() //  [R1]
         { []
         }
     {offset
       c6Vmp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vmq; else goto c6Vmr;
       c6Vmq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Vmr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P79_info" {
     sat_s6P79_info:
         const sat_s6P79_entry;
         const 1;
         const 16;
 },
 sat_s6P78_entry() //  [R1]
         { []
         }
     {offset
       c6Vmw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vmx; else goto c6Vmy;
       c6Vmx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Vmy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<|>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P78_info" {
     sat_s6P78_info:
         const sat_s6P78_entry;
         const 1;
         const 16;
 },
 Data.Foldable.asum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Vmz: // global
           _s6P77::P64 = R3;
           _s6P76::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6VmA; else goto c6VmB;
       c6VmB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6VmD; else goto c6VmC;
       c6VmD: // global
           HpAlloc = 48;
           goto c6VmA;
       c6VmA: // global
           R3 = _s6P77::P64;
           R2 = _s6P76::P64;
           R1 = Data.Foldable.asum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VmC: // global
           I64[Hp - 40] = sat_s6P79_info;
           P64[Hp - 24] = _s6P77::P64;
           I64[Hp - 16] = sat_s6P78_info;
           P64[Hp] = _s6P77::P64;
           R2 = _s6P76::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Foldable.foldr_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.asum_info" {
     Data.Foldable.asum_info:
         const Data.Foldable.asum_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.879279742 UTC

[section ""data" . Data.Foldable.msum_closure" {
     Data.Foldable.msum_closure:
         const Data.Foldable.msum_info;
 },
 $dAlternative_s6P7c_entry() //  [R1]
         { []
         }
     {offset
       c6Vn1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vn2; else goto c6Vn3;
       c6Vn2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Vn3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dAlternative_s6P7c_info" {
     $dAlternative_s6P7c_info:
         const $dAlternative_s6P7c_entry;
         const 1;
         const 16;
 },
 sat_s6P7e_entry() //  [R1]
         { []
         }
     {offset
       c6Vn8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vn9; else goto c6Vna;
       c6Vn9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Vna: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P7e_info" {
     sat_s6P7e_info:
         const sat_s6P7e_entry;
         const 1;
         const 16;
 },
 sat_s6P7d_entry() //  [R1]
         { []
         }
     {offset
       c6Vnf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vng; else goto c6Vnh;
       c6Vng: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Vnh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<|>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P7d_info" {
     sat_s6P7d_info:
         const sat_s6P7d_entry;
         const 1;
         const 16;
 },
 Data.Foldable.msum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Vni: // global
           _s6P7b::P64 = R3;
           _s6P7a::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6Vnj; else goto c6Vnk;
       c6Vnk: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6Vnm; else goto c6Vnl;
       c6Vnm: // global
           HpAlloc = 72;
           goto c6Vnj;
       c6Vnj: // global
           R3 = _s6P7b::P64;
           R2 = _s6P7a::P64;
           R1 = Data.Foldable.msum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vnl: // global
           I64[Hp - 64] = $dAlternative_s6P7c_info;
           P64[Hp - 48] = _s6P7b::P64;
           I64[Hp - 40] = sat_s6P7e_info;
           _c6VmX::P64 = Hp - 64;
           P64[Hp - 24] = _c6VmX::P64;
           I64[Hp - 16] = sat_s6P7d_info;
           P64[Hp] = _c6VmX::P64;
           R2 = _s6P7a::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Foldable.foldr_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.msum_info" {
     Data.Foldable.msum_info:
         const Data.Foldable.msum_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.888620063 UTC

[section ""data" . Data.Foldable.concat_closure" {
     Data.Foldable.concat_closure:
         const Data.Foldable.concat_info;
 },
 Data.Foldable.concat_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VnK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6VnL; else goto c6VnM;
       c6VnL: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.concat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VnM: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Base.++_closure+2;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.concat_info" {
     Data.Foldable.concat_info:
         const Data.Foldable.concat_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.893260153 UTC

[section ""data" . Data.Foldable.concatMap_closure" {
     Data.Foldable.concatMap_closure:
         const Data.Foldable.concatMap_info;
 },
 sat_s6P7n_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Vo3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vo4; else goto c6Vo5;
       c6Vo4: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vo5: // global
           I64[Sp - 16] = block_c6Vo1_info;
           R2 = R2;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6P7n_info" {
     sat_s6P7n_info:
         const sat_s6P7n_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c6Vo1() //  [R1]
         { []
         }
     {offset
       c6Vo1: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Vo1_info" {
     block_c6Vo1_info:
         const _c6Vo1;
         const 1;
         const 30;
 },
 Data.Foldable.concatMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Vo9: // global
           _s6P7j::P64 = R4;
           _s6P7i::P64 = R3;
           _s6P7h::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c6Voa; else goto c6Vob;
       c6Vob: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Vod; else goto c6Voc;
       c6Vod: // global
           HpAlloc = 16;
           goto c6Voa;
       c6Voa: // global
           R4 = _s6P7j::P64;
           R3 = _s6P7i::P64;
           R2 = _s6P7h::P64;
           R1 = Data.Foldable.concatMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Voc: // global
           I64[Hp - 8] = sat_s6P7n_info;
           P64[Hp] = _s6P7i::P64;
           R2 = _s6P7h::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           P64[Sp - 8] = _s6P7j::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.concatMap_info" {
     Data.Foldable.concatMap_info:
         const Data.Foldable.concatMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.900027632 UTC

[section ""data" . Data.Foldable.and2_closure" {
     Data.Foldable.and2_closure:
         const Data.Foldable.and2_info;
 },
 Data.Foldable.and2_entry() //  [R2]
         { []
         }
     {offset
       c6Vov: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.and2_info" {
     Data.Foldable.and2_info:
         const Data.Foldable.and2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.903918157 UTC

[section ""data" . Data.Foldable.and1_closure" {
     Data.Foldable.and1_closure:
         const Data.Foldable.and1_info;
         const 0;
 },
 Data.Foldable.and1_entry() //  [R2]
         { []
         }
     {offset
       c6VoI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6VoJ; else goto c6VoK;
       c6VoJ: // global
           R2 = R2;
           R1 = Data.Foldable.and1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VoK: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Semigroup.Internal.$fMonoidAll_closure;
           P64[Sp - 8] = Data.Foldable.and2_closure+1;
           Sp = Sp - 24;
           call Data.Foldable.foldMap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.and1_info" {
     Data.Foldable.and1_info:
         const Data.Foldable.and1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6PH7_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.907756269 UTC

[section ""data" . Data.Foldable.and_closure" {
     Data.Foldable.and_closure:
         const Data.Foldable.and_info;
         const 0;
 },
 Data.Foldable.and_entry() //  [R2]
         { []
         }
     {offset
       c6VoU: // global
           R2 = R2;
           call Data.Foldable.and1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.and_info" {
     Data.Foldable.and_info:
         const Data.Foldable.and_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6PH7_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.911115776 UTC

[section ""data" . Data.Foldable.or1_closure" {
     Data.Foldable.or1_closure:
         const Data.Foldable.or1_info;
         const 0;
 },
 Data.Foldable.or1_entry() //  [R2]
         { []
         }
     {offset
       c6Vp5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Vp6; else goto c6Vp7;
       c6Vp6: // global
           R2 = R2;
           R1 = Data.Foldable.or1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Vp7: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 8] = Data.Foldable.and2_closure+1;
           Sp = Sp - 24;
           call Data.Foldable.foldMap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.or1_info" {
     Data.Foldable.or1_info:
         const Data.Foldable.or1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6PH7_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.91467233 UTC

[section ""data" . Data.Foldable.or_closure" {
     Data.Foldable.or_closure:
         const Data.Foldable.or_info;
         const 0;
 },
 Data.Foldable.or_entry() //  [R2]
         { []
         }
     {offset
       c6Vph: // global
           R2 = R2;
           call Data.Foldable.or1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.or_info" {
     Data.Foldable.or_info:
         const Data.Foldable.or_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6PH7_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.918051303 UTC

[section ""data" . Data.Foldable.any1_closure" {
     Data.Foldable.any1_closure:
         const Data.Foldable.any1_info;
         const 0;
 },
 Data.Foldable.any1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Vps: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Vpt; else goto c6Vpu;
       c6Vpt: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.any1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vpu: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call Data.Foldable.foldMap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.any1_info" {
     Data.Foldable.any1_info:
         const Data.Foldable.any1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S6PH7_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.921771942 UTC

[section ""data" . Data.Foldable.any_closure" {
     Data.Foldable.any_closure:
         const Data.Foldable.any_info;
         const 0;
 },
 Data.Foldable.any_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VpE: // global
           R3 = R3;
           R2 = R2;
           call Data.Foldable.any1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.any_info" {
     Data.Foldable.any_info:
         const Data.Foldable.any_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.92592744 UTC

[section ""data" . $dmelem1_r6OSW_closure" {
     $dmelem1_r6OSW_closure:
         const $dmelem1_r6OSW_info;
         const 0;
 },
 sat_s6P7w_entry() //  [R1]
         { []
         }
     {offset
       c6VpT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6VpU; else goto c6VpV;
       c6VpU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VpV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6P7w_info" {
     sat_s6P7w_info:
         const sat_s6P7w_entry;
         const 2;
         const 18;
 },
 $dmelem1_r6OSW_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6VpW: // global
           _s6P7v::P64 = R4;
           _s6P7u::P64 = R3;
           _s6P7t::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6VpX; else goto c6VpY;
       c6VpY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Vq0; else goto c6VpZ;
       c6Vq0: // global
           HpAlloc = 32;
           goto c6VpX;
       c6VpX: // global
           R4 = _s6P7v::P64;
           R3 = _s6P7u::P64;
           R2 = _s6P7t::P64;
           R1 = $dmelem1_r6OSW_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VpZ: // global
           I64[Hp - 24] = sat_s6P7w_info;
           P64[Hp - 8] = _s6P7u::P64;
           P64[Hp] = _s6P7v::P64;
           R2 = _s6P7t::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call Data.Foldable.foldMap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmelem1_r6OSW_info" {
     $dmelem1_r6OSW_info:
         const $dmelem1_r6OSW_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const S6PH7_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.932791103 UTC

[section ""data" . Data.Foldable.$dmelem_closure" {
     Data.Foldable.$dmelem_closure:
         const Data.Foldable.$dmelem_info;
         const 0;
 },
 Data.Foldable.$dmelem_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Vqg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmelem1_r6OSW_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmelem_info" {
     Data.Foldable.$dmelem_info:
         const Data.Foldable.$dmelem_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S6PH7_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.93825221 UTC

[section ""data" . Data.Foldable.$fFoldableURec11_closure" {
     Data.Foldable.$fFoldableURec11_closure:
         const Data.Foldable.$fFoldableURec11_info;
 },
 Data.Foldable.$fFoldableURec11_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Vqt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Vqu; else goto c6Vqv;
       c6Vqu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec11_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vqv: // global
           I64[Sp - 8] = block_c6Vqr_info;
           R1 = R4;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec11_info" {
     Data.Foldable.$fFoldableURec11_info:
         const Data.Foldable.$fFoldableURec11_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Vqr() //  []
         { []
         }
     {offset
       c6Vqr: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Vqr_info" {
     block_c6Vqr_info:
         const _c6Vqr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.945317985 UTC

[section ""data" . Data.Foldable.$fFoldableURec8_closure" {
     Data.Foldable.$fFoldableURec8_closure:
         const Data.Foldable.$fFoldableURec8_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec8_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VqO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VqP; else goto c6VqQ;
       c6VqP: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec8_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VqQ: // global
           I64[Sp - 16] = block_c6VqM_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec8_info" {
     Data.Foldable.$fFoldableURec8_info:
         const Data.Foldable.$fFoldableURec8_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+304;
 },
 _c6VqM() //  []
         { []
         }
     {offset
       c6VqM: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VqM_info" {
     block_c6VqM_info:
         const _c6VqM;
         const 1;
         const 4294967326;
         const S6PH7_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.953868893 UTC

[section ""data" . Data.Foldable.$fFoldable:*:2_closure" {
     Data.Foldable.$fFoldable:*:2_closure:
         const Data.Foldable.$fFoldable:*:2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldable:*:2_entry() //  [R1]
         { []
         }
     {offset
       c6Vr8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vr9; else goto c6Vra;
       c6Vr9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Vra: // global
           (_c6Vr5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6Vr5::I64 == 0) goto c6Vr7; else goto c6Vr6;
       c6Vr7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6Vr6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6Vr5::I64;
           R2 = Data.Foldable.$fFoldableK2_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:2_info" {
     Data.Foldable.$fFoldable:*:2_info:
         const Data.Foldable.$fFoldable:*:2_entry;
         const 0;
         const 144115192370823189;
         const S6PH7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.960147868 UTC

[section ""data" . Data.Foldable.$fFoldableURec9_closure" {
     Data.Foldable.$fFoldableURec9_closure:
         const Data.Foldable.$fFoldableURec9_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec9_entry() //  []
         { []
         }
     {offset
       c6Vrm: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec9_info" {
     Data.Foldable.$fFoldableURec9_info:
         const Data.Foldable.$fFoldableURec9_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6PH7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.965570437 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cminimum_closure" {
     Data.Foldable.$fFoldableURec_$cminimum_closure:
         const Data.Foldable.$fFoldableURec_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c6Vrx: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec9_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cminimum_info" {
     Data.Foldable.$fFoldableURec_$cminimum_info:
         const Data.Foldable.$fFoldableURec_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.970728811 UTC

[section ""data" . Data.Foldable.$fFoldable:*:3_closure" {
     Data.Foldable.$fFoldable:*:3_closure:
         const Data.Foldable.$fFoldable:*:3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldable:*:3_entry() //  [R1]
         { []
         }
     {offset
       c6VrK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VrL; else goto c6VrM;
       c6VrL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VrM: // global
           (_c6VrH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6VrH::I64 == 0) goto c6VrJ; else goto c6VrI;
       c6VrJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6VrI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6VrH::I64;
           R2 = Data.Foldable.$fFoldableK4_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:3_info" {
     Data.Foldable.$fFoldable:*:3_info:
         const Data.Foldable.$fFoldable:*:3_entry;
         const 0;
         const 72057598332895253;
         const S6PH7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.97451351 UTC

[section ""data" . Data.Foldable.$fFoldableURec10_closure" {
     Data.Foldable.$fFoldableURec10_closure:
         const Data.Foldable.$fFoldableURec10_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec10_entry() //  []
         { []
         }
     {offset
       c6VrY: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec10_info" {
     Data.Foldable.$fFoldableURec10_info:
         const Data.Foldable.$fFoldableURec10_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6PH7_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.977818269 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cmaximum_closure" {
     Data.Foldable.$fFoldableURec_$cmaximum_closure:
         const Data.Foldable.$fFoldableURec_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c6Vs9: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec10_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cmaximum_info" {
     Data.Foldable.$fFoldableURec_$cmaximum_info:
         const Data.Foldable.$fFoldableURec_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.981032114 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cfoldr1_closure" {
     Data.Foldable.$fFoldableURec_$cfoldr1_closure:
         const Data.Foldable.$fFoldableURec_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c6Vsk: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cfoldr1_info" {
     Data.Foldable.$fFoldableURec_$cfoldr1_info:
         const Data.Foldable.$fFoldableURec_$cfoldr1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.984772643 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cfoldl'_closure" {
     Data.Foldable.$fFoldableURec_$cfoldl'_closure:
         const Data.Foldable.$fFoldableURec_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableURec_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Vsx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vsy; else goto c6Vsz;
       c6Vsy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vsz: // global
           I64[Sp - 16] = block_c6Vsv_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cfoldl'_info" {
     Data.Foldable.$fFoldableURec_$cfoldl'_info:
         const Data.Foldable.$fFoldableURec_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Vsv() //  []
         { []
         }
     {offset
       c6Vsv: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Vsv_info" {
     block_c6Vsv_info:
         const _c6Vsv;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.98994274 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$clength_closure" {
     Data.Foldable.$fFoldableURec_$clength_closure:
         const Data.Foldable.$fFoldableURec_$clength_info;
 },
 Data.Foldable.$fFoldableURec_$clength_entry() //  [R2]
         { []
         }
     {offset
       c6VsR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6VsS; else goto c6VsT;
       c6VsS: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VsT: // global
           I64[Sp - 8] = block_c6VsP_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$clength_info" {
     Data.Foldable.$fFoldableURec_$clength_info:
         const Data.Foldable.$fFoldableURec_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6VsP() //  []
         { []
         }
     {offset
       c6VsP: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VsP_info" {
     block_c6VsP_info:
         const _c6VsP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.995358539 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cfoldl1_closure" {
     Data.Foldable.$fFoldableURec_$cfoldl1_closure:
         const Data.Foldable.$fFoldableURec_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c6Vta: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cfoldl1_info" {
     Data.Foldable.$fFoldableURec_$cfoldl1_info:
         const Data.Foldable.$fFoldableURec_$cfoldl1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:04.998846239 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cfold_closure" {
     Data.Foldable.$fFoldableURec_$cfold_closure:
         const Data.Foldable.$fFoldableURec_$cfold_info;
 },
 Data.Foldable.$fFoldableURec_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Vtn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vto; else goto c6Vtp;
       c6Vto: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vtp: // global
           I64[Sp - 16] = block_c6Vtl_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cfold_info" {
     Data.Foldable.$fFoldableURec_$cfold_info:
         const Data.Foldable.$fFoldableURec_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6Vtl() //  []
         { []
         }
     {offset
       c6Vtl: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Vtl_info" {
     block_c6Vtl_info:
         const _c6Vtl;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.003789466 UTC

[section ""data" . Data.Foldable.$fFoldableURec7_closure" {
     Data.Foldable.$fFoldableURec7_closure:
         const Data.Foldable.$fFoldableURec7_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec7_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VtH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VtI; else goto c6VtJ;
       c6VtI: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec7_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VtJ: // global
           I64[Sp - 16] = block_c6VtF_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec7_info" {
     Data.Foldable.$fFoldableURec7_info:
         const Data.Foldable.$fFoldableURec7_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+352;
 },
 _c6VtF() //  []
         { []
         }
     {offset
       c6VtF: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VtF_info" {
     block_c6VtF_info:
         const _c6VtF;
         const 1;
         const 4294967326;
         const S6PH7_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.00934595 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$ctoList_closure" {
     Data.Foldable.$fFoldableURec_$ctoList_closure:
         const Data.Foldable.$fFoldableURec_$ctoList_info;
 },
 Data.Foldable.$fFoldableURec_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6Vu1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Vu2; else goto c6Vu3;
       c6Vu2: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Vu3: // global
           I64[Sp - 8] = block_c6VtZ_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$ctoList_info" {
     Data.Foldable.$fFoldableURec_$ctoList_info:
         const Data.Foldable.$fFoldableURec_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6VtZ() //  []
         { []
         }
     {offset
       c6VtZ: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VtZ_info" {
     block_c6VtZ_info:
         const _c6VtZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.013912306 UTC

[section ""data" . Data.Foldable.$fFoldableURec_closure" {
     Data.Foldable.$fFoldableURec_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableURec_$cfold_closure+2;
         const Data.Foldable.$fFoldableURec_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableURec_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableURec_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableURec_$ctoList_closure+1;
         const Data.Foldable.$fFoldableURec_$cnull_closure+1;
         const Data.Foldable.$fFoldableURec_$clength_closure+1;
         const Data.Foldable.$fFoldableURec11_closure+3;
         const Data.Foldable.$fFoldableURec_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableURec_$cminimum_closure+2;
         const Data.Foldable.$fFoldableURec8_closure+2;
         const Data.Foldable.$fFoldableURec7_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.016438813 UTC

[section ""data" . Data.Foldable.$fFoldableURec16_closure" {
     Data.Foldable.$fFoldableURec16_closure:
         const Data.Foldable.$fFoldableURec16_info;
 },
 Data.Foldable.$fFoldableURec16_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Vun: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Vuo; else goto c6Vup;
       c6Vuo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec16_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vup: // global
           I64[Sp - 8] = block_c6Vul_info;
           R1 = R4;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec16_info" {
     Data.Foldable.$fFoldableURec16_info:
         const Data.Foldable.$fFoldableURec16_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Vul() //  []
         { []
         }
     {offset
       c6Vul: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Vul_info" {
     block_c6Vul_info:
         const _c6Vul;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.022073238 UTC

[section ""data" . Data.Foldable.$fFoldableURec13_closure" {
     Data.Foldable.$fFoldableURec13_closure:
         const Data.Foldable.$fFoldableURec13_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec13_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VuI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VuJ; else goto c6VuK;
       c6VuJ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec13_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VuK: // global
           I64[Sp - 16] = block_c6VuG_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec13_info" {
     Data.Foldable.$fFoldableURec13_info:
         const Data.Foldable.$fFoldableURec13_entry;
         const 0;
         const 1103806595086;
         const 8589934607;
         const S6PH7_srt+304;
 },
 _c6VuG() //  []
         { []
         }
     {offset
       c6VuG: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VuG_info" {
     block_c6VuG_info:
         const _c6VuG;
         const 1;
         const 4294967326;
         const S6PH7_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.027435468 UTC

[section ""data" . Data.Foldable.$fFoldableURec14_closure" {
     Data.Foldable.$fFoldableURec14_closure:
         const Data.Foldable.$fFoldableURec14_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec14_entry() //  []
         { []
         }
     {offset
       c6Vv0: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec14_info" {
     Data.Foldable.$fFoldableURec14_info:
         const Data.Foldable.$fFoldableURec14_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6PH7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.030681839 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cminimum_closure" {
     Data.Foldable.$fFoldableURec0_$cminimum_closure:
         const Data.Foldable.$fFoldableURec0_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec0_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c6Vvb: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec14_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cminimum_info" {
     Data.Foldable.$fFoldableURec0_$cminimum_info:
         const Data.Foldable.$fFoldableURec0_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.033900927 UTC

[section ""data" . Data.Foldable.$fFoldableURec15_closure" {
     Data.Foldable.$fFoldableURec15_closure:
         const Data.Foldable.$fFoldableURec15_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec15_entry() //  []
         { []
         }
     {offset
       c6Vvm: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec15_info" {
     Data.Foldable.$fFoldableURec15_info:
         const Data.Foldable.$fFoldableURec15_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6PH7_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.037033624 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cmaximum_closure" {
     Data.Foldable.$fFoldableURec0_$cmaximum_closure:
         const Data.Foldable.$fFoldableURec0_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec0_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c6Vvx: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec15_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cmaximum_info" {
     Data.Foldable.$fFoldableURec0_$cmaximum_info:
         const Data.Foldable.$fFoldableURec0_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.040663208 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cfoldr1_closure" {
     Data.Foldable.$fFoldableURec0_$cfoldr1_closure:
         const Data.Foldable.$fFoldableURec0_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec0_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c6VvI: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cfoldr1_info" {
     Data.Foldable.$fFoldableURec0_$cfoldr1_info:
         const Data.Foldable.$fFoldableURec0_$cfoldr1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.044287649 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cfoldl'_closure" {
     Data.Foldable.$fFoldableURec0_$cfoldl'_closure:
         const Data.Foldable.$fFoldableURec0_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableURec0_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6VvV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VvW; else goto c6VvX;
       c6VvW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec0_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VvX: // global
           I64[Sp - 16] = block_c6VvT_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cfoldl'_info" {
     Data.Foldable.$fFoldableURec0_$cfoldl'_info:
         const Data.Foldable.$fFoldableURec0_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6VvT() //  []
         { []
         }
     {offset
       c6VvT: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VvT_info" {
     block_c6VvT_info:
         const _c6VvT;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.050647771 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$clength_closure" {
     Data.Foldable.$fFoldableURec0_$clength_closure:
         const Data.Foldable.$fFoldableURec0_$clength_info;
 },
 Data.Foldable.$fFoldableURec0_$clength_entry() //  [R2]
         { []
         }
     {offset
       c6Vwf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Vwg; else goto c6Vwh;
       c6Vwg: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec0_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Vwh: // global
           I64[Sp - 8] = block_c6Vwd_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$clength_info" {
     Data.Foldable.$fFoldableURec0_$clength_info:
         const Data.Foldable.$fFoldableURec0_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Vwd() //  []
         { []
         }
     {offset
       c6Vwd: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Vwd_info" {
     block_c6Vwd_info:
         const _c6Vwd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.055542947 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cfoldl1_closure" {
     Data.Foldable.$fFoldableURec0_$cfoldl1_closure:
         const Data.Foldable.$fFoldableURec0_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec0_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c6Vwy: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cfoldl1_info" {
     Data.Foldable.$fFoldableURec0_$cfoldl1_info:
         const Data.Foldable.$fFoldableURec0_$cfoldl1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.059158203 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cfold_closure" {
     Data.Foldable.$fFoldableURec0_$cfold_closure:
         const Data.Foldable.$fFoldableURec0_$cfold_info;
 },
 Data.Foldable.$fFoldableURec0_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VwL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VwM; else goto c6VwN;
       c6VwM: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec0_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VwN: // global
           I64[Sp - 16] = block_c6VwJ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cfold_info" {
     Data.Foldable.$fFoldableURec0_$cfold_info:
         const Data.Foldable.$fFoldableURec0_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6VwJ() //  []
         { []
         }
     {offset
       c6VwJ: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VwJ_info" {
     block_c6VwJ_info:
         const _c6VwJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.064193774 UTC

[section ""data" . Data.Foldable.$fFoldableURec12_closure" {
     Data.Foldable.$fFoldableURec12_closure:
         const Data.Foldable.$fFoldableURec12_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec12_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Vx5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vx6; else goto c6Vx7;
       c6Vx6: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec12_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vx7: // global
           I64[Sp - 16] = block_c6Vx3_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec12_info" {
     Data.Foldable.$fFoldableURec12_info:
         const Data.Foldable.$fFoldableURec12_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const S6PH7_srt+352;
 },
 _c6Vx3() //  []
         { []
         }
     {offset
       c6Vx3: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Vx3_info" {
     block_c6Vx3_info:
         const _c6Vx3;
         const 1;
         const 4294967326;
         const S6PH7_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.069737223 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$ctoList_closure" {
     Data.Foldable.$fFoldableURec0_$ctoList_closure:
         const Data.Foldable.$fFoldableURec0_$ctoList_info;
 },
 Data.Foldable.$fFoldableURec0_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6Vxp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Vxq; else goto c6Vxr;
       c6Vxq: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec0_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Vxr: // global
           I64[Sp - 8] = block_c6Vxn_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$ctoList_info" {
     Data.Foldable.$fFoldableURec0_$ctoList_info:
         const Data.Foldable.$fFoldableURec0_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Vxn() //  []
         { []
         }
     {offset
       c6Vxn: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Vxn_info" {
     block_c6Vxn_info:
         const _c6Vxn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.074715611 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_closure" {
     Data.Foldable.$fFoldableURec0_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableURec0_$cfold_closure+2;
         const Data.Foldable.$fFoldableURec0_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableURec0_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec0_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec0_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec0_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec0_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableURec0_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableURec0_$ctoList_closure+1;
         const Data.Foldable.$fFoldableURec0_$cnull_closure+1;
         const Data.Foldable.$fFoldableURec0_$clength_closure+1;
         const Data.Foldable.$fFoldableURec16_closure+3;
         const Data.Foldable.$fFoldableURec0_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableURec0_$cminimum_closure+2;
         const Data.Foldable.$fFoldableURec13_closure+2;
         const Data.Foldable.$fFoldableURec12_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.077859332 UTC

[section ""data" . Data.Foldable.$fFoldableURec21_closure" {
     Data.Foldable.$fFoldableURec21_closure:
         const Data.Foldable.$fFoldableURec21_info;
 },
 Data.Foldable.$fFoldableURec21_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6VxL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6VxM; else goto c6VxN;
       c6VxM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec21_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VxN: // global
           I64[Sp - 8] = block_c6VxJ_info;
           R1 = R4;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec21_info" {
     Data.Foldable.$fFoldableURec21_info:
         const Data.Foldable.$fFoldableURec21_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6VxJ() //  []
         { []
         }
     {offset
       c6VxJ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VxJ_info" {
     block_c6VxJ_info:
         const _c6VxJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.083054186 UTC

[section ""data" . Data.Foldable.$fFoldableURec18_closure" {
     Data.Foldable.$fFoldableURec18_closure:
         const Data.Foldable.$fFoldableURec18_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec18_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Vy6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vy7; else goto c6Vy8;
       c6Vy7: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec18_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vy8: // global
           I64[Sp - 16] = block_c6Vy4_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec18_info" {
     Data.Foldable.$fFoldableURec18_info:
         const Data.Foldable.$fFoldableURec18_entry;
         const 0;
         const 17596481011726;
         const 8589934607;
         const S6PH7_srt+304;
 },
 _c6Vy4() //  []
         { []
         }
     {offset
       c6Vy4: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Vy4_info" {
     block_c6Vy4_info:
         const _c6Vy4;
         const 1;
         const 4294967326;
         const S6PH7_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.088280739 UTC

[section ""data" . Data.Foldable.$fFoldableURec19_closure" {
     Data.Foldable.$fFoldableURec19_closure:
         const Data.Foldable.$fFoldableURec19_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec19_entry() //  []
         { []
         }
     {offset
       c6Vyo: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec19_info" {
     Data.Foldable.$fFoldableURec19_info:
         const Data.Foldable.$fFoldableURec19_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6PH7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.091519824 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cminimum_closure" {
     Data.Foldable.$fFoldableURec1_$cminimum_closure:
         const Data.Foldable.$fFoldableURec1_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec1_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c6Vyz: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec19_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cminimum_info" {
     Data.Foldable.$fFoldableURec1_$cminimum_info:
         const Data.Foldable.$fFoldableURec1_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.094863532 UTC

[section ""data" . Data.Foldable.$fFoldableURec20_closure" {
     Data.Foldable.$fFoldableURec20_closure:
         const Data.Foldable.$fFoldableURec20_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec20_entry() //  []
         { []
         }
     {offset
       c6VyK: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec20_info" {
     Data.Foldable.$fFoldableURec20_info:
         const Data.Foldable.$fFoldableURec20_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6PH7_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.098216297 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cmaximum_closure" {
     Data.Foldable.$fFoldableURec1_$cmaximum_closure:
         const Data.Foldable.$fFoldableURec1_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec1_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c6VyV: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec20_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cmaximum_info" {
     Data.Foldable.$fFoldableURec1_$cmaximum_info:
         const Data.Foldable.$fFoldableURec1_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.101675652 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cfoldr1_closure" {
     Data.Foldable.$fFoldableURec1_$cfoldr1_closure:
         const Data.Foldable.$fFoldableURec1_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec1_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c6Vz6: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cfoldr1_info" {
     Data.Foldable.$fFoldableURec1_$cfoldr1_info:
         const Data.Foldable.$fFoldableURec1_$cfoldr1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.106093483 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cfoldl'_closure" {
     Data.Foldable.$fFoldableURec1_$cfoldl'_closure:
         const Data.Foldable.$fFoldableURec1_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableURec1_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Vzj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Vzk; else goto c6Vzl;
       c6Vzk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec1_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Vzl: // global
           I64[Sp - 16] = block_c6Vzh_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cfoldl'_info" {
     Data.Foldable.$fFoldableURec1_$cfoldl'_info:
         const Data.Foldable.$fFoldableURec1_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Vzh() //  []
         { []
         }
     {offset
       c6Vzh: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Vzh_info" {
     block_c6Vzh_info:
         const _c6Vzh;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.111216567 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$clength_closure" {
     Data.Foldable.$fFoldableURec1_$clength_closure:
         const Data.Foldable.$fFoldableURec1_$clength_info;
 },
 Data.Foldable.$fFoldableURec1_$clength_entry() //  [R2]
         { []
         }
     {offset
       c6VzD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6VzE; else goto c6VzF;
       c6VzE: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec1_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VzF: // global
           I64[Sp - 8] = block_c6VzB_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$clength_info" {
     Data.Foldable.$fFoldableURec1_$clength_info:
         const Data.Foldable.$fFoldableURec1_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6VzB() //  []
         { []
         }
     {offset
       c6VzB: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VzB_info" {
     block_c6VzB_info:
         const _c6VzB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.115958962 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cfoldl1_closure" {
     Data.Foldable.$fFoldableURec1_$cfoldl1_closure:
         const Data.Foldable.$fFoldableURec1_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec1_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c6VzW: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cfoldl1_info" {
     Data.Foldable.$fFoldableURec1_$cfoldl1_info:
         const Data.Foldable.$fFoldableURec1_$cfoldl1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.120109078 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cfold_closure" {
     Data.Foldable.$fFoldableURec1_$cfold_closure:
         const Data.Foldable.$fFoldableURec1_$cfold_info;
 },
 Data.Foldable.$fFoldableURec1_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VA9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VAa; else goto c6VAb;
       c6VAa: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec1_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VAb: // global
           I64[Sp - 16] = block_c6VA7_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cfold_info" {
     Data.Foldable.$fFoldableURec1_$cfold_info:
         const Data.Foldable.$fFoldableURec1_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6VA7() //  []
         { []
         }
     {offset
       c6VA7: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VA7_info" {
     block_c6VA7_info:
         const _c6VA7;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.125454927 UTC

[section ""data" . Data.Foldable.$fFoldableURec17_closure" {
     Data.Foldable.$fFoldableURec17_closure:
         const Data.Foldable.$fFoldableURec17_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec17_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VAt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VAu; else goto c6VAv;
       c6VAu: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec17_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VAv: // global
           I64[Sp - 16] = block_c6VAr_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec17_info" {
     Data.Foldable.$fFoldableURec17_info:
         const Data.Foldable.$fFoldableURec17_entry;
         const 0;
         const 2203318222862;
         const 8589934607;
         const S6PH7_srt+352;
 },
 _c6VAr() //  []
         { []
         }
     {offset
       c6VAr: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VAr_info" {
     block_c6VAr_info:
         const _c6VAr;
         const 1;
         const 4294967326;
         const S6PH7_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.131634349 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$ctoList_closure" {
     Data.Foldable.$fFoldableURec1_$ctoList_closure:
         const Data.Foldable.$fFoldableURec1_$ctoList_info;
 },
 Data.Foldable.$fFoldableURec1_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6VAN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6VAO; else goto c6VAP;
       c6VAO: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec1_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VAP: // global
           I64[Sp - 8] = block_c6VAL_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$ctoList_info" {
     Data.Foldable.$fFoldableURec1_$ctoList_info:
         const Data.Foldable.$fFoldableURec1_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6VAL() //  []
         { []
         }
     {offset
       c6VAL: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VAL_info" {
     block_c6VAL_info:
         const _c6VAL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.136258356 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_closure" {
     Data.Foldable.$fFoldableURec1_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableURec1_$cfold_closure+2;
         const Data.Foldable.$fFoldableURec1_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableURec1_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec1_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec1_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec1_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec1_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableURec1_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableURec1_$ctoList_closure+1;
         const Data.Foldable.$fFoldableURec1_$cnull_closure+1;
         const Data.Foldable.$fFoldableURec1_$clength_closure+1;
         const Data.Foldable.$fFoldableURec21_closure+3;
         const Data.Foldable.$fFoldableURec1_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableURec1_$cminimum_closure+2;
         const Data.Foldable.$fFoldableURec18_closure+2;
         const Data.Foldable.$fFoldableURec17_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.138808846 UTC

[section ""data" . Data.Foldable.$fFoldableURec26_closure" {
     Data.Foldable.$fFoldableURec26_closure:
         const Data.Foldable.$fFoldableURec26_info;
 },
 Data.Foldable.$fFoldableURec26_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6VB9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6VBa; else goto c6VBb;
       c6VBa: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec26_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VBb: // global
           I64[Sp - 8] = block_c6VB7_info;
           R1 = R4;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec26_info" {
     Data.Foldable.$fFoldableURec26_info:
         const Data.Foldable.$fFoldableURec26_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6VB7() //  []
         { []
         }
     {offset
       c6VB7: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VB7_info" {
     block_c6VB7_info:
         const _c6VB7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.143864271 UTC

[section ""data" . Data.Foldable.$fFoldableURec23_closure" {
     Data.Foldable.$fFoldableURec23_closure:
         const Data.Foldable.$fFoldableURec23_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec23_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VBu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VBv; else goto c6VBw;
       c6VBv: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec23_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VBw: // global
           I64[Sp - 16] = block_c6VBs_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec23_info" {
     Data.Foldable.$fFoldableURec23_info:
         const Data.Foldable.$fFoldableURec23_entry;
         const 0;
         const 281479271677966;
         const 8589934607;
         const S6PH7_srt+304;
 },
 _c6VBs() //  []
         { []
         }
     {offset
       c6VBs: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VBs_info" {
     block_c6VBs_info:
         const _c6VBs;
         const 1;
         const 4294967326;
         const S6PH7_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.148869638 UTC

[section ""data" . Data.Foldable.$fFoldableURec24_closure" {
     Data.Foldable.$fFoldableURec24_closure:
         const Data.Foldable.$fFoldableURec24_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec24_entry() //  []
         { []
         }
     {offset
       c6VBM: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec24_info" {
     Data.Foldable.$fFoldableURec24_info:
         const Data.Foldable.$fFoldableURec24_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6PH7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.152599056 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cminimum_closure" {
     Data.Foldable.$fFoldableURec2_$cminimum_closure:
         const Data.Foldable.$fFoldableURec2_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec2_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c6VBX: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec24_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cminimum_info" {
     Data.Foldable.$fFoldableURec2_$cminimum_info:
         const Data.Foldable.$fFoldableURec2_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.156587425 UTC

[section ""data" . Data.Foldable.$fFoldableURec25_closure" {
     Data.Foldable.$fFoldableURec25_closure:
         const Data.Foldable.$fFoldableURec25_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec25_entry() //  []
         { []
         }
     {offset
       c6VC8: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec25_info" {
     Data.Foldable.$fFoldableURec25_info:
         const Data.Foldable.$fFoldableURec25_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6PH7_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.159923164 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cmaximum_closure" {
     Data.Foldable.$fFoldableURec2_$cmaximum_closure:
         const Data.Foldable.$fFoldableURec2_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec2_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c6VCj: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec25_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cmaximum_info" {
     Data.Foldable.$fFoldableURec2_$cmaximum_info:
         const Data.Foldable.$fFoldableURec2_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.163178658 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cfoldr1_closure" {
     Data.Foldable.$fFoldableURec2_$cfoldr1_closure:
         const Data.Foldable.$fFoldableURec2_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec2_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c6VCu: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cfoldr1_info" {
     Data.Foldable.$fFoldableURec2_$cfoldr1_info:
         const Data.Foldable.$fFoldableURec2_$cfoldr1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.166848822 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cfoldl'_closure" {
     Data.Foldable.$fFoldableURec2_$cfoldl'_closure:
         const Data.Foldable.$fFoldableURec2_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableURec2_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6VCH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VCI; else goto c6VCJ;
       c6VCI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec2_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VCJ: // global
           I64[Sp - 16] = block_c6VCF_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cfoldl'_info" {
     Data.Foldable.$fFoldableURec2_$cfoldl'_info:
         const Data.Foldable.$fFoldableURec2_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6VCF() //  []
         { []
         }
     {offset
       c6VCF: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VCF_info" {
     block_c6VCF_info:
         const _c6VCF;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.172526026 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$clength_closure" {
     Data.Foldable.$fFoldableURec2_$clength_closure:
         const Data.Foldable.$fFoldableURec2_$clength_info;
 },
 Data.Foldable.$fFoldableURec2_$clength_entry() //  [R2]
         { []
         }
     {offset
       c6VD1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6VD2; else goto c6VD3;
       c6VD2: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec2_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VD3: // global
           I64[Sp - 8] = block_c6VCZ_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$clength_info" {
     Data.Foldable.$fFoldableURec2_$clength_info:
         const Data.Foldable.$fFoldableURec2_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6VCZ() //  []
         { []
         }
     {offset
       c6VCZ: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VCZ_info" {
     block_c6VCZ_info:
         const _c6VCZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.177536211 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cfoldl1_closure" {
     Data.Foldable.$fFoldableURec2_$cfoldl1_closure:
         const Data.Foldable.$fFoldableURec2_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec2_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c6VDk: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cfoldl1_info" {
     Data.Foldable.$fFoldableURec2_$cfoldl1_info:
         const Data.Foldable.$fFoldableURec2_$cfoldl1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.18190911 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cfold_closure" {
     Data.Foldable.$fFoldableURec2_$cfold_closure:
         const Data.Foldable.$fFoldableURec2_$cfold_info;
 },
 Data.Foldable.$fFoldableURec2_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VDx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VDy; else goto c6VDz;
       c6VDy: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec2_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VDz: // global
           I64[Sp - 16] = block_c6VDv_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cfold_info" {
     Data.Foldable.$fFoldableURec2_$cfold_info:
         const Data.Foldable.$fFoldableURec2_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6VDv() //  []
         { []
         }
     {offset
       c6VDv: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VDv_info" {
     block_c6VDv_info:
         const _c6VDv;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.187756785 UTC

[section ""data" . Data.Foldable.$fFoldableURec22_closure" {
     Data.Foldable.$fFoldableURec22_closure:
         const Data.Foldable.$fFoldableURec22_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec22_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VDR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VDS; else goto c6VDT;
       c6VDS: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec22_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VDT: // global
           I64[Sp - 16] = block_c6VDP_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec22_info" {
     Data.Foldable.$fFoldableURec22_info:
         const Data.Foldable.$fFoldableURec22_entry;
         const 0;
         const 70373039144974;
         const 8589934607;
         const S6PH7_srt+352;
 },
 _c6VDP() //  []
         { []
         }
     {offset
       c6VDP: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VDP_info" {
     block_c6VDP_info:
         const _c6VDP;
         const 1;
         const 4294967326;
         const S6PH7_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.192982322 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$ctoList_closure" {
     Data.Foldable.$fFoldableURec2_$ctoList_closure:
         const Data.Foldable.$fFoldableURec2_$ctoList_info;
 },
 Data.Foldable.$fFoldableURec2_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6VEb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6VEc; else goto c6VEd;
       c6VEc: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec2_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VEd: // global
           I64[Sp - 8] = block_c6VE9_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$ctoList_info" {
     Data.Foldable.$fFoldableURec2_$ctoList_info:
         const Data.Foldable.$fFoldableURec2_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6VE9() //  []
         { []
         }
     {offset
       c6VE9: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VE9_info" {
     block_c6VE9_info:
         const _c6VE9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.197804231 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_closure" {
     Data.Foldable.$fFoldableURec2_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableURec2_$cfold_closure+2;
         const Data.Foldable.$fFoldableURec2_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableURec2_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec2_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec2_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec2_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec2_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableURec2_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableURec2_$ctoList_closure+1;
         const Data.Foldable.$fFoldableURec2_$cnull_closure+1;
         const Data.Foldable.$fFoldableURec2_$clength_closure+1;
         const Data.Foldable.$fFoldableURec26_closure+3;
         const Data.Foldable.$fFoldableURec2_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableURec2_$cminimum_closure+2;
         const Data.Foldable.$fFoldableURec23_closure+2;
         const Data.Foldable.$fFoldableURec22_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.20045153 UTC

[section ""data" . Data.Foldable.$fFoldableURec31_closure" {
     Data.Foldable.$fFoldableURec31_closure:
         const Data.Foldable.$fFoldableURec31_info;
 },
 Data.Foldable.$fFoldableURec31_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6VEx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6VEy; else goto c6VEz;
       c6VEy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec31_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VEz: // global
           I64[Sp - 8] = block_c6VEv_info;
           R1 = R4;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec31_info" {
     Data.Foldable.$fFoldableURec31_info:
         const Data.Foldable.$fFoldableURec31_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6VEv() //  []
         { []
         }
     {offset
       c6VEv: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VEv_info" {
     block_c6VEv_info:
         const _c6VEv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.205836433 UTC

[section ""data" . Data.Foldable.$fFoldableURec28_closure" {
     Data.Foldable.$fFoldableURec28_closure:
         const Data.Foldable.$fFoldableURec28_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec28_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VES: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VET; else goto c6VEU;
       c6VET: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec28_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VEU: // global
           I64[Sp - 16] = block_c6VEQ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec28_info" {
     Data.Foldable.$fFoldableURec28_info:
         const Data.Foldable.$fFoldableURec28_entry;
         const 0;
         const 9007203549708302;
         const 8589934607;
         const S6PH7_srt+304;
 },
 _c6VEQ() //  []
         { []
         }
     {offset
       c6VEQ: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VEQ_info" {
     block_c6VEQ_info:
         const _c6VEQ;
         const 1;
         const 4294967326;
         const S6PH7_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.211550131 UTC

[section ""data" . Data.Foldable.$fFoldableURec29_closure" {
     Data.Foldable.$fFoldableURec29_closure:
         const Data.Foldable.$fFoldableURec29_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec29_entry() //  []
         { []
         }
     {offset
       c6VFa: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec29_info" {
     Data.Foldable.$fFoldableURec29_info:
         const Data.Foldable.$fFoldableURec29_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6PH7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.214913074 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cminimum_closure" {
     Data.Foldable.$fFoldableURec3_$cminimum_closure:
         const Data.Foldable.$fFoldableURec3_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec3_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c6VFl: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec29_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cminimum_info" {
     Data.Foldable.$fFoldableURec3_$cminimum_info:
         const Data.Foldable.$fFoldableURec3_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.21810915 UTC

[section ""data" . Data.Foldable.$fFoldableURec30_closure" {
     Data.Foldable.$fFoldableURec30_closure:
         const Data.Foldable.$fFoldableURec30_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec30_entry() //  []
         { []
         }
     {offset
       c6VFw: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec30_info" {
     Data.Foldable.$fFoldableURec30_info:
         const Data.Foldable.$fFoldableURec30_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6PH7_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.221203333 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cmaximum_closure" {
     Data.Foldable.$fFoldableURec3_$cmaximum_closure:
         const Data.Foldable.$fFoldableURec3_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec3_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c6VFH: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec30_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cmaximum_info" {
     Data.Foldable.$fFoldableURec3_$cmaximum_info:
         const Data.Foldable.$fFoldableURec3_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.224489804 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cfoldr1_closure" {
     Data.Foldable.$fFoldableURec3_$cfoldr1_closure:
         const Data.Foldable.$fFoldableURec3_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec3_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c6VFS: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cfoldr1_info" {
     Data.Foldable.$fFoldableURec3_$cfoldr1_info:
         const Data.Foldable.$fFoldableURec3_$cfoldr1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+496;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.228121948 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cfoldl'_closure" {
     Data.Foldable.$fFoldableURec3_$cfoldl'_closure:
         const Data.Foldable.$fFoldableURec3_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableURec3_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6VG5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VG6; else goto c6VG7;
       c6VG6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec3_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VG7: // global
           I64[Sp - 16] = block_c6VG3_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cfoldl'_info" {
     Data.Foldable.$fFoldableURec3_$cfoldl'_info:
         const Data.Foldable.$fFoldableURec3_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6VG3() //  []
         { []
         }
     {offset
       c6VG3: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VG3_info" {
     block_c6VG3_info:
         const _c6VG3;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.2338903 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$clength_closure" {
     Data.Foldable.$fFoldableURec3_$clength_closure:
         const Data.Foldable.$fFoldableURec3_$clength_info;
 },
 Data.Foldable.$fFoldableURec3_$clength_entry() //  [R2]
         { []
         }
     {offset
       c6VGp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6VGq; else goto c6VGr;
       c6VGq: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec3_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VGr: // global
           I64[Sp - 8] = block_c6VGn_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$clength_info" {
     Data.Foldable.$fFoldableURec3_$clength_info:
         const Data.Foldable.$fFoldableURec3_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6VGn() //  []
         { []
         }
     {offset
       c6VGn: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VGn_info" {
     block_c6VGn_info:
         const _c6VGn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.239156143 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cfoldl1_closure" {
     Data.Foldable.$fFoldableURec3_$cfoldl1_closure:
         const Data.Foldable.$fFoldableURec3_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec3_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c6VGI: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cfoldl1_info" {
     Data.Foldable.$fFoldableURec3_$cfoldl1_info:
         const Data.Foldable.$fFoldableURec3_$cfoldl1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.242679714 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cfold_closure" {
     Data.Foldable.$fFoldableURec3_$cfold_closure:
         const Data.Foldable.$fFoldableURec3_$cfold_info;
 },
 Data.Foldable.$fFoldableURec3_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VGV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VGW; else goto c6VGX;
       c6VGW: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec3_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VGX: // global
           I64[Sp - 16] = block_c6VGT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cfold_info" {
     Data.Foldable.$fFoldableURec3_$cfold_info:
         const Data.Foldable.$fFoldableURec3_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6VGT() //  []
         { []
         }
     {offset
       c6VGT: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VGT_info" {
     block_c6VGT_info:
         const _c6VGT;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.248336728 UTC

[section ""data" . Data.Foldable.$fFoldableURec27_closure" {
     Data.Foldable.$fFoldableURec27_closure:
         const Data.Foldable.$fFoldableURec27_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec27_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VHf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VHg; else goto c6VHh;
       c6VHg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec27_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VHh: // global
           I64[Sp - 16] = block_c6VHd_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec27_info" {
     Data.Foldable.$fFoldableURec27_info:
         const Data.Foldable.$fFoldableURec27_entry;
         const 0;
         const 2251804108652558;
         const 8589934607;
         const S6PH7_srt+352;
 },
 _c6VHd() //  []
         { []
         }
     {offset
       c6VHd: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VHd_info" {
     block_c6VHd_info:
         const _c6VHd;
         const 1;
         const 4294967326;
         const S6PH7_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.253445257 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$ctoList_closure" {
     Data.Foldable.$fFoldableURec3_$ctoList_closure:
         const Data.Foldable.$fFoldableURec3_$ctoList_info;
 },
 Data.Foldable.$fFoldableURec3_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6VHz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6VHA; else goto c6VHB;
       c6VHA: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec3_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VHB: // global
           I64[Sp - 8] = block_c6VHx_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$ctoList_info" {
     Data.Foldable.$fFoldableURec3_$ctoList_info:
         const Data.Foldable.$fFoldableURec3_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6VHx() //  []
         { []
         }
     {offset
       c6VHx: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VHx_info" {
     block_c6VHx_info:
         const _c6VHx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.258283963 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_closure" {
     Data.Foldable.$fFoldableURec3_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableURec3_$cfold_closure+2;
         const Data.Foldable.$fFoldableURec3_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableURec3_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec3_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec3_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec3_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec3_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableURec3_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableURec3_$ctoList_closure+1;
         const Data.Foldable.$fFoldableURec3_$cnull_closure+1;
         const Data.Foldable.$fFoldableURec3_$clength_closure+1;
         const Data.Foldable.$fFoldableURec31_closure+3;
         const Data.Foldable.$fFoldableURec3_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableURec3_$cminimum_closure+2;
         const Data.Foldable.$fFoldableURec28_closure+2;
         const Data.Foldable.$fFoldableURec27_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.260956351 UTC

[section ""data" . Data.Foldable.$fFoldableURec36_closure" {
     Data.Foldable.$fFoldableURec36_closure:
         const Data.Foldable.$fFoldableURec36_info;
 },
 Data.Foldable.$fFoldableURec36_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6VHV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6VHW; else goto c6VHX;
       c6VHW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec36_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VHX: // global
           I64[Sp - 8] = block_c6VHT_info;
           R1 = R4;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec36_info" {
     Data.Foldable.$fFoldableURec36_info:
         const Data.Foldable.$fFoldableURec36_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6VHT() //  []
         { []
         }
     {offset
       c6VHT: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VHT_info" {
     block_c6VHT_info:
         const _c6VHT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.267116501 UTC

[section ""data" . Data.Foldable.$fFoldableURec33_closure" {
     Data.Foldable.$fFoldableURec33_closure:
         const Data.Foldable.$fFoldableURec33_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec33_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VIg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VIh; else goto c6VIi;
       c6VIh: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec33_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VIi: // global
           I64[Sp - 16] = block_c6VIe_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec33_info" {
     Data.Foldable.$fFoldableURec33_info:
         const Data.Foldable.$fFoldableURec33_entry;
         const 0;
         const 288230380446679054;
         const 8589934607;
         const S6PH7_srt+304;
 },
 _c6VIe() //  []
         { []
         }
     {offset
       c6VIe: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VIe_info" {
     block_c6VIe_info:
         const _c6VIe;
         const 1;
         const 4294967326;
         const S6PH7_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.271917561 UTC

[section ""data" . Data.Foldable.$fFoldableURec34_closure" {
     Data.Foldable.$fFoldableURec34_closure:
         const Data.Foldable.$fFoldableURec34_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec34_entry() //  []
         { []
         }
     {offset
       c6VIy: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec34_info" {
     Data.Foldable.$fFoldableURec34_info:
         const Data.Foldable.$fFoldableURec34_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6PH7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.275318936 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cminimum_closure" {
     Data.Foldable.$fFoldableURec4_$cminimum_closure:
         const Data.Foldable.$fFoldableURec4_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec4_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c6VIJ: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec34_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cminimum_info" {
     Data.Foldable.$fFoldableURec4_$cminimum_info:
         const Data.Foldable.$fFoldableURec4_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.279012002 UTC

[section ""data" . Data.Foldable.$fFoldableURec35_closure" {
     Data.Foldable.$fFoldableURec35_closure:
         const Data.Foldable.$fFoldableURec35_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec35_entry() //  []
         { []
         }
     {offset
       c6VIU: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec35_info" {
     Data.Foldable.$fFoldableURec35_info:
         const Data.Foldable.$fFoldableURec35_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6PH7_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.282444609 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cmaximum_closure" {
     Data.Foldable.$fFoldableURec4_$cmaximum_closure:
         const Data.Foldable.$fFoldableURec4_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec4_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c6VJ5: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec35_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cmaximum_info" {
     Data.Foldable.$fFoldableURec4_$cmaximum_info:
         const Data.Foldable.$fFoldableURec4_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.286001643 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cfoldr1_closure" {
     Data.Foldable.$fFoldableURec4_$cfoldr1_closure:
         const Data.Foldable.$fFoldableURec4_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec4_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c6VJg: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cfoldr1_info" {
     Data.Foldable.$fFoldableURec4_$cfoldr1_info:
         const Data.Foldable.$fFoldableURec4_$cfoldr1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+496;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.290571823 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cfoldl'_closure" {
     Data.Foldable.$fFoldableURec4_$cfoldl'_closure:
         const Data.Foldable.$fFoldableURec4_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableURec4_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6VJt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VJu; else goto c6VJv;
       c6VJu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec4_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VJv: // global
           I64[Sp - 16] = block_c6VJr_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cfoldl'_info" {
     Data.Foldable.$fFoldableURec4_$cfoldl'_info:
         const Data.Foldable.$fFoldableURec4_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6VJr() //  []
         { []
         }
     {offset
       c6VJr: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VJr_info" {
     block_c6VJr_info:
         const _c6VJr;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.29559386 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$clength_closure" {
     Data.Foldable.$fFoldableURec4_$clength_closure:
         const Data.Foldable.$fFoldableURec4_$clength_info;
 },
 Data.Foldable.$fFoldableURec4_$clength_entry() //  [R2]
         { []
         }
     {offset
       c6VJN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6VJO; else goto c6VJP;
       c6VJO: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec4_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VJP: // global
           I64[Sp - 8] = block_c6VJL_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$clength_info" {
     Data.Foldable.$fFoldableURec4_$clength_info:
         const Data.Foldable.$fFoldableURec4_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6VJL() //  []
         { []
         }
     {offset
       c6VJL: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VJL_info" {
     block_c6VJL_info:
         const _c6VJL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.300322483 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cfoldl1_closure" {
     Data.Foldable.$fFoldableURec4_$cfoldl1_closure:
         const Data.Foldable.$fFoldableURec4_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec4_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c6VK6: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cfoldl1_info" {
     Data.Foldable.$fFoldableURec4_$cfoldl1_info:
         const Data.Foldable.$fFoldableURec4_$cfoldl1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.303920236 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cfold_closure" {
     Data.Foldable.$fFoldableURec4_$cfold_closure:
         const Data.Foldable.$fFoldableURec4_$cfold_info;
 },
 Data.Foldable.$fFoldableURec4_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VKj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VKk; else goto c6VKl;
       c6VKk: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec4_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VKl: // global
           I64[Sp - 16] = block_c6VKh_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cfold_info" {
     Data.Foldable.$fFoldableURec4_$cfold_info:
         const Data.Foldable.$fFoldableURec4_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6VKh() //  []
         { []
         }
     {offset
       c6VKh: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VKh_info" {
     block_c6VKh_info:
         const _c6VKh;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.309530004 UTC

[section ""data" . Data.Foldable.$fFoldableURec32_closure" {
     Data.Foldable.$fFoldableURec32_closure:
         const Data.Foldable.$fFoldableURec32_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec32_entry() //  [R2, R3]
         { []
         }
     {offset
       c6VKD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VKE; else goto c6VKF;
       c6VKE: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec32_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VKF: // global
           I64[Sp - 16] = block_c6VKB_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec32_info" {
     Data.Foldable.$fFoldableURec32_info:
         const Data.Foldable.$fFoldableURec32_entry;
         const 0;
         const 36028801313931278;
         const 8589934607;
         const S6PH7_srt+352;
 },
 _c6VKB() //  []
         { []
         }
     {offset
       c6VKB: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VKB_info" {
     block_c6VKB_info:
         const _c6VKB;
         const 1;
         const 4294967326;
         const S6PH7_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.315394949 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$ctoList_closure" {
     Data.Foldable.$fFoldableURec4_$ctoList_closure:
         const Data.Foldable.$fFoldableURec4_$ctoList_info;
 },
 Data.Foldable.$fFoldableURec4_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6VKX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6VKY; else goto c6VKZ;
       c6VKY: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec4_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VKZ: // global
           I64[Sp - 8] = block_c6VKV_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$ctoList_info" {
     Data.Foldable.$fFoldableURec4_$ctoList_info:
         const Data.Foldable.$fFoldableURec4_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6VKV() //  []
         { []
         }
     {offset
       c6VKV: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VKV_info" {
     block_c6VKV_info:
         const _c6VKV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.320144914 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_closure" {
     Data.Foldable.$fFoldableURec4_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableURec4_$cfold_closure+2;
         const Data.Foldable.$fFoldableURec4_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableURec4_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec4_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec4_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec4_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec4_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableURec4_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableURec4_$ctoList_closure+1;
         const Data.Foldable.$fFoldableURec4_$cnull_closure+1;
         const Data.Foldable.$fFoldableURec4_$clength_closure+1;
         const Data.Foldable.$fFoldableURec36_closure+3;
         const Data.Foldable.$fFoldableURec4_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableURec4_$cminimum_closure+2;
         const Data.Foldable.$fFoldableURec33_closure+2;
         const Data.Foldable.$fFoldableURec32_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.324735598 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$celem_closure" {
     Data.Foldable.$fFoldable:*:_$celem_closure:
         const Data.Foldable.$fFoldable:*:_$celem_info;
         const 0;
 },
 f1_s6Pbh_entry() //  [R1]
         { []
         }
     {offset
       c6VLl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6VLm; else goto c6VLn;
       c6VLm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VLn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s6Pbh_info" {
     f1_s6Pbh_info:
         const f1_s6Pbh_entry;
         const 2;
         const 18;
 },
 sat_s6Pbn_entry() //  [R1, R2]
         { []
         }
     {offset
       c6VLw: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c6VLx; else goto c6VLy;
       c6VLx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VLy: // global
           I64[Sp - 32] = block_c6VLt_info;
           _s6Pbd::P64 = P64[R1 + 7];
           _s6Pbe::P64 = P64[R1 + 15];
           _s6Pbh::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s6Pbd::P64;
           P64[Sp - 16] = _s6Pbe::P64;
           P64[Sp - 8] = _s6Pbh::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6VLO; else goto c6VLu;
       u6VLO: // global
           call _c6VLt(R1) args: 0, res: 0, upd: 0;
       c6VLu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pbn_info" {
     sat_s6Pbn_info:
         const sat_s6Pbn_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S6PH7_srt+544;
 },
 _c6VLt() //  [R1]
         { []
         }
     {offset
       c6VLt: // global
           I64[Sp] = block_c6VLB_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VLt_info" {
     block_c6VLt_info:
         const _c6VLt;
         const 3;
         const 4294967326;
         const S6PH7_srt+544;
 },
 _c6VLB() //  [R1]
         { []
         }
     {offset
       c6VLB: // global
           if (R1 & 7 == 1) goto c6VLI; else goto c6VLM;
       c6VLI: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           _s6Pbl::P64 = P64[Sp + 8];
           P64[Sp + 8] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = _s6Pbl::P64;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       c6VLM: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VLB_info" {
     block_c6VLB_info:
         const _c6VLB;
         const 3;
         const 4294967326;
         const S6PH7_srt+544;
 },
 Data.Foldable.$fFoldable:*:_$celem_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6VLP: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6VLT; else goto c6VLS;
       c6VLT: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$celem_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VLS: // global
           I64[Hp - 56] = f1_s6Pbh_info;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           I64[Hp - 24] = sat_s6Pbn_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$celem_info" {
     Data.Foldable.$fFoldable:*:_$celem_info:
         const Data.Foldable.$fFoldable:*:_$celem_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S6PH7_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.33826779 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$csum_closure" {
     Data.Foldable.$fFoldable:*:_$csum_closure:
         const Data.Foldable.$fFoldable:*:_$csum_info;
         const 0;
 },
 $dMonoid_s6Pbr_entry() //  [R1]
         { []
         }
     {offset
       c6VMv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VMw; else goto c6VMx;
       c6VMw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VMx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6Pbr_info" {
     $dMonoid_s6Pbr_info:
         const $dMonoid_s6Pbr_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+560;
 },
 sat_s6Pbx_entry() //  [R1]
         { []
         }
     {offset
       c6VMM: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6VMN; else goto c6VMO;
       c6VMN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VMO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pbx_info" {
     sat_s6Pbx_info:
         const sat_s6Pbx_entry;
         const 3;
         const 15;
 },
 sat_s6Pbw_entry() //  [R1]
         { []
         }
     {offset
       c6VMT: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6VMU; else goto c6VMV;
       c6VMU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VMV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pbw_info" {
     sat_s6Pbw_info:
         const sat_s6Pbw_entry;
         const 3;
         const 15;
 },
 sat_s6Pby_entry() //  [R1, R2]
         { []
         }
     {offset
       c6VMW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6VMX; else goto c6VMY;
       c6VMX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VMY: // global
           I64[Sp - 40] = block_c6VMD_info;
           _s6Pbo::P64 = P64[R1 + 7];
           _s6Pbp::P64 = P64[R1 + 15];
           _s6Pbq::P64 = P64[R1 + 23];
           _s6Pbr::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s6Pbo::P64;
           P64[Sp - 24] = _s6Pbp::P64;
           P64[Sp - 16] = _s6Pbq::P64;
           P64[Sp - 8] = _s6Pbr::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6VN2; else goto c6VME;
       u6VN2: // global
           call _c6VMD(R1) args: 0, res: 0, upd: 0;
       c6VME: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pby_info" {
     sat_s6Pby_info:
         const sat_s6Pby_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c6VMD() //  [R1]
         { []
         }
     {offset
       c6VMD: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c6VN1; else goto c6VN0;
       c6VN1: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6VN0: // global
           _s6Pbu::P64 = P64[R1 + 7];
           _s6Pbv::P64 = P64[R1 + 15];
           I64[Hp - 72] = sat_s6Pbx_info;
           P64[Hp - 56] = P64[Sp + 16];
           _s6Pbr::P64 = P64[Sp + 32];
           P64[Hp - 48] = _s6Pbr::P64;
           P64[Hp - 40] = _s6Pbv::P64;
           I64[Hp - 32] = sat_s6Pbw_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s6Pbr::P64;
           P64[Hp] = _s6Pbu::P64;
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 72;
           Sp = Sp + 16;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VMD_info" {
     block_c6VMD_info:
         const _c6VMD;
         const 4;
         const 30;
 },
 Data.Foldable.$fFoldable:*:_$csum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6VN3: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6VN7; else goto c6VN6;
       c6VN7: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$csum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VN6: // global
           I64[Hp - 56] = $dMonoid_s6Pbr_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_s6Pby_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$csum_info" {
     Data.Foldable.$fFoldable:*:_$csum_info:
         const Data.Foldable.$fFoldable:*:_$csum_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6PH7_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.354500723 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cminimum_closure" {
     Data.Foldable.$fFoldable:*:_$cminimum_closure:
         const Data.Foldable.$fFoldable:*:_$cminimum_info;
         const 0;
 },
 $dMonoid_s6PbC_entry() //  [R1]
         { []
         }
     {offset
       c6VNO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VNP; else goto c6VNQ;
       c6VNP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VNQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6PbC_info" {
     $dMonoid_s6PbC_info:
         const $dMonoid_s6PbC_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+576;
 },
 sat_s6PbO_entry() //  [R1, R2]
         { []
         }
     {offset
       c6VNZ: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c6VO0; else goto c6VO1;
       c6VO0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VO1: // global
           I64[Sp - 40] = block_c6VNW_info;
           _s6Pbz::P64 = P64[R1 + 7];
           _s6PbA::P64 = P64[R1 + 15];
           _s6PbB::P64 = P64[R1 + 23];
           _s6PbC::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s6Pbz::P64;
           P64[Sp - 24] = _s6PbA::P64;
           P64[Sp - 16] = _s6PbB::P64;
           P64[Sp - 8] = _s6PbC::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6VOT; else goto c6VNX;
       u6VOT: // global
           call _c6VNW(R1) args: 0, res: 0, upd: 0;
       c6VNX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PbO_info" {
     sat_s6PbO_info:
         const sat_s6PbO_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S6PH7_srt+584;
 },
 _c6VNW() //  [R1]
         { []
         }
     {offset
       c6VNW: // global
           I64[Sp] = block_c6VO4_info;
           R2 = P64[Sp + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[Sp + 32];
           P64[Sp - 16] = GHC.Base.Just_closure+1;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VNW_info" {
     block_c6VNW_info:
         const _c6VNW;
         const 4;
         const 4294967326;
         const S6PH7_srt+584;
 },
 _c6VO4() //  [R1]
         { []
         }
     {offset
       c6VO4: // global
           _s6Pbz::P64 = P64[Sp + 8];
           _s6PbC::P64 = P64[Sp + 32];
           _s6PbF::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6VOc; else goto c6VOr;
       c6VOc: // global
           I64[Sp + 32] = block_c6VO9_info;
           R2 = _s6Pbz::P64;
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _s6PbC::P64;
           P64[Sp + 16] = GHC.Base.Just_closure+1;
           P64[Sp + 24] = _s6PbF::P64;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
       c6VOr: // global
           I64[Sp + 16] = block_c6VOp_info;
           R2 = _s6Pbz::P64;
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = _s6PbC::P64;
           P64[Sp] = GHC.Base.Just_closure+1;
           P64[Sp + 8] = _s6PbF::P64;
           P64[Sp + 32] = P64[R1 + 6];
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VO4_info" {
     block_c6VO4_info:
         const _c6VO4;
         const 4;
         const 4294967326;
         const S6PH7_srt+584;
 },
 _c6VO9() //  [R1]
         { []
         }
     {offset
       c6VO9: // global
           if (R1 & 7 == 1) goto c6VOi; else goto c6VOm;
       c6VOi: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6VOm: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VO9_info" {
     block_c6VO9_info:
         const _c6VO9;
         const 0;
         const 4294967326;
         const S6PH7_srt+584;
 },
 _c6VOp() //  [R1]
         { []
         }
     {offset
       c6VOp: // global
           if (R1 & 7 == 1) goto u6VOR; else goto c6VOC;
       u6VOR: // global
           Sp = Sp + 16;
           call _c6VOI() args: 0, res: 0, upd: 0;
       c6VOC: // global
           I64[Sp] = block_c6VOA_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           _s6PbM::P64 = P64[R1 + 6];
           P64[Sp - 16] = _s6PbM::P64;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp + 8] = _s6PbM::P64;
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VOp_info" {
     block_c6VOp_info:
         const _c6VOp;
         const 2;
         const 30;
 },
 _c6VOA() //  [R1]
         { []
         }
     {offset
       c6VOA: // global
           if (R1 & 7 == 1) goto u6VOS; else goto c6VOM;
       u6VOS: // global
           Sp = Sp + 16;
           call _c6VOI() args: 0, res: 0, upd: 0;
       c6VOM: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VOA_info" {
     block_c6VOA_info:
         const _c6VOA;
         const 2;
         const 30;
 },
 _c6VOI() //  []
         { []
         }
     {offset
       c6VOI: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Foldable.$fFoldable:*:_$cminimum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6VOW: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6VP0; else goto c6VOZ;
       c6VP0: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cminimum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VOZ: // global
           I64[Hp - 56] = $dMonoid_s6PbC_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_s6PbO_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cminimum_info" {
     Data.Foldable.$fFoldable:*:_$cminimum_info:
         const Data.Foldable.$fFoldable:*:_$cminimum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S6PH7_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.374619615 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cmaximum_closure" {
     Data.Foldable.$fFoldable:*:_$cmaximum_closure:
         const Data.Foldable.$fFoldable:*:_$cmaximum_info;
         const 0;
 },
 $dMonoid_s6PbS_entry() //  [R1]
         { []
         }
     {offset
       c6VPS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VPT; else goto c6VPU;
       c6VPT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VPU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6PbS_info" {
     $dMonoid_s6PbS_info:
         const $dMonoid_s6PbS_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+600;
 },
 sat_s6Pc4_entry() //  [R1, R2]
         { []
         }
     {offset
       c6VQ3: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c6VQ4; else goto c6VQ5;
       c6VQ4: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6VQ5: // global
           I64[Sp - 40] = block_c6VQ0_info;
           _s6PbP::P64 = P64[R1 + 7];
           _s6PbQ::P64 = P64[R1 + 15];
           _s6PbR::P64 = P64[R1 + 23];
           _s6PbS::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s6PbP::P64;
           P64[Sp - 24] = _s6PbQ::P64;
           P64[Sp - 16] = _s6PbR::P64;
           P64[Sp - 8] = _s6PbS::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6VQX; else goto c6VQ1;
       u6VQX: // global
           call _c6VQ0(R1) args: 0, res: 0, upd: 0;
       c6VQ1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pc4_info" {
     sat_s6Pc4_info:
         const sat_s6Pc4_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S6PH7_srt+608;
 },
 _c6VQ0() //  [R1]
         { []
         }
     {offset
       c6VQ0: // global
           I64[Sp] = block_c6VQ8_info;
           R2 = P64[Sp + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[Sp + 32];
           P64[Sp - 16] = GHC.Base.Just_closure+1;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VQ0_info" {
     block_c6VQ0_info:
         const _c6VQ0;
         const 4;
         const 4294967326;
         const S6PH7_srt+608;
 },
 _c6VQ8() //  [R1]
         { []
         }
     {offset
       c6VQ8: // global
           _s6PbP::P64 = P64[Sp + 8];
           _s6PbS::P64 = P64[Sp + 32];
           _s6PbV::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6VQg; else goto c6VQv;
       c6VQg: // global
           I64[Sp + 32] = block_c6VQd_info;
           R2 = _s6PbP::P64;
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _s6PbS::P64;
           P64[Sp + 16] = GHC.Base.Just_closure+1;
           P64[Sp + 24] = _s6PbV::P64;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
       c6VQv: // global
           I64[Sp + 16] = block_c6VQt_info;
           R2 = _s6PbP::P64;
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = _s6PbS::P64;
           P64[Sp] = GHC.Base.Just_closure+1;
           P64[Sp + 8] = _s6PbV::P64;
           P64[Sp + 32] = P64[R1 + 6];
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VQ8_info" {
     block_c6VQ8_info:
         const _c6VQ8;
         const 4;
         const 4294967326;
         const S6PH7_srt+608;
 },
 _c6VQd() //  [R1]
         { []
         }
     {offset
       c6VQd: // global
           if (R1 & 7 == 1) goto c6VQm; else goto c6VQq;
       c6VQm: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6VQq: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VQd_info" {
     block_c6VQd_info:
         const _c6VQd;
         const 0;
         const 4294967326;
         const S6PH7_srt+608;
 },
 _c6VQt() //  [R1]
         { []
         }
     {offset
       c6VQt: // global
           if (R1 & 7 == 1) goto u6VQV; else goto c6VQG;
       u6VQV: // global
           Sp = Sp + 16;
           call _c6VQM() args: 0, res: 0, upd: 0;
       c6VQG: // global
           I64[Sp] = block_c6VQE_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           _s6Pc2::P64 = P64[R1 + 6];
           P64[Sp - 16] = _s6Pc2::P64;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp + 8] = _s6Pc2::P64;
           Sp = Sp - 24;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VQt_info" {
     block_c6VQt_info:
         const _c6VQt;
         const 2;
         const 30;
 },
 _c6VQE() //  [R1]
         { []
         }
     {offset
       c6VQE: // global
           if (R1 & 7 == 1) goto u6VQW; else goto c6VQQ;
       u6VQW: // global
           Sp = Sp + 16;
           call _c6VQM() args: 0, res: 0, upd: 0;
       c6VQQ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VQE_info" {
     block_c6VQE_info:
         const _c6VQE;
         const 2;
         const 30;
 },
 _c6VQM() //  []
         { []
         }
     {offset
       c6VQM: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Foldable.$fFoldable:*:_$cmaximum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6VR0: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6VR4; else goto c6VR3;
       c6VR4: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cmaximum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VR3: // global
           I64[Hp - 56] = $dMonoid_s6PbS_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_s6Pc4_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cmaximum_info" {
     Data.Foldable.$fFoldable:*:_$cmaximum_info:
         const Data.Foldable.$fFoldable:*:_$cmaximum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S6PH7_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.393453799 UTC

[section ""data" . Data.Foldable.$w$cfoldr1_closure" {
     Data.Foldable.$w$cfoldr1_closure:
         const Data.Foldable.$w$cfoldr1_info;
         const 0;
 },
 sat_s6Pcf_entry() //  [R1]
         { []
         }
     {offset
       c6VS8: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6VS9; else goto c6VSa;
       c6VS9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VSa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6VS1_info;
           _s6Pc7::P64 = P64[R1 + 16];
           _s6Pcb::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6Pc7::P64;
           P64[Sp - 24] = _s6Pcb::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6VSh; else goto c6VS2;
       u6VSh: // global
           call _c6VS1(R1) args: 0, res: 0, upd: 0;
       c6VS2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pcf_info" {
     sat_s6Pcf_info:
         const sat_s6Pcf_entry;
         const 3;
         const 15;
 },
 _c6VS1() //  [R1]
         { []
         }
     {offset
       c6VS1: // global
           _s6Pcb::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6VS5; else goto c6VS6;
       c6VS5: // global
           R1 = _s6Pcb::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c6VS6: // global
           R3 = P64[R1 + 6];
           R2 = _s6Pcb::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6VS1_info" {
     block_c6VS1_info:
         const _c6VS1;
         const 2;
         const 30;
 },
 f1_s6Pca_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6VSj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6VSn; else goto c6VSm;
       c6VSn: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VSm: // global
           _s6Pc7::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6Pcf_info;
           P64[Hp - 32] = _s6Pc7::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f1_s6Pca_info" {
     f1_s6Pca_info:
         const f1_s6Pca_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Pcg_entry() //  [R1]
         { []
         }
     {offset
       c6VSs: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6VSt; else goto c6VSu;
       c6VSt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VSu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = GHC.Base.Nothing_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 48;
           call Data.Foldable.foldr_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pcg_info" {
     sat_s6Pcg_info:
         const sat_s6Pcg_entry;
         const 3;
         const 15;
 },
 Data.Foldable.$w$cfoldr1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c6VSB: // global
           _s6Pc9::P64 = R6;
           _s6Pc8::P64 = R5;
           _s6Pc7::P64 = R4;
           _s6Pc6::P64 = R3;
           _s6Pc5::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6VSC; else goto c6VSD;
       c6VSD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6VSF; else goto c6VSE;
       c6VSF: // global
           HpAlloc = 56;
           goto c6VSC;
       c6VSC: // global
           R6 = _s6Pc9::P64;
           R5 = _s6Pc8::P64;
           R4 = _s6Pc7::P64;
           R3 = _s6Pc6::P64;
           R2 = _s6Pc5::P64;
           R1 = Data.Foldable.$w$cfoldr1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VSE: // global
           I64[Hp - 48] = f1_s6Pca_info;
           P64[Hp - 40] = _s6Pc7::P64;
           I64[Hp - 32] = sat_s6Pcg_info;
           P64[Hp - 16] = _s6Pc6::P64;
           P64[Hp - 8] = _s6Pc9::P64;
           _c6VRS::P64 = Hp - 46;
           P64[Hp] = _c6VRS::P64;
           I64[Sp - 8] = block_c6VSv_info;
           R2 = _s6Pc5::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = _c6VRS::P64;
           P64[Sp - 24] = Hp - 32;
           P64[Sp - 16] = _s6Pc8::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldr1_info" {
     Data.Foldable.$w$cfoldr1_info:
         const Data.Foldable.$w$cfoldr1_entry;
         const 0;
         const 281479271677966;
         const 21474836505;
         const S6PH7_srt+496;
 },
 _c6VSv() //  [R1]
         { []
         }
     {offset
       c6VSv: // global
           if (R1 & 7 == 1) goto c6VSy; else goto c6VSz;
       c6VSy: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6VSz: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VSv_info" {
     block_c6VSv_info:
         const _c6VSv;
         const 0;
         const 4294967326;
         const S6PH7_srt+496;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.40678685 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cfoldr1_closure" {
     Data.Foldable.$fFoldable:*:_$cfoldr1_closure:
         const Data.Foldable.$fFoldable:*:_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldable:*:_$cfoldr1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6VTp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6VTq; else goto c6VTr;
       c6VTq: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cfoldr1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VTr: // global
           I64[Sp - 32] = block_c6VTm_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6VTv; else goto c6VTn;
       u6VTv: // global
           call _c6VTm(R1) args: 0, res: 0, upd: 0;
       c6VTn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cfoldr1_info" {
     Data.Foldable.$fFoldable:*:_$cfoldr1_info:
         const Data.Foldable.$fFoldable:*:_$cfoldr1_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S6PH7_srt+624;
 },
 _c6VTm() //  [R1]
         { []
         }
     {offset
       c6VTm: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Foldable.$w$cfoldr1_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VTm_info" {
     block_c6VTm_info:
         const _c6VTm;
         const 3;
         const 4294967326;
         const S6PH7_srt+624;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.413478832 UTC

[section ""data" . Data.Foldable.$w$cfoldl'_closure" {
     Data.Foldable.$w$cfoldl'_closure:
         const Data.Foldable.$w$cfoldl'_info;
 },
 f1_s6Pcw_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6VTQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VTR; else goto c6VTS;
       c6VTR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VTS: // global
           I64[Sp - 16] = block_c6VTO_info;
           _s6Pcy::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6Pcy::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . f1_s6Pcw_info" {
     f1_s6Pcw_info:
         const f1_s6Pcw_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c6VTO() //  [R1]
         { []
         }
     {offset
       c6VTO: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VTO_info" {
     block_c6VTO_info:
         const _c6VTO;
         const 1;
         const 30;
 },
 sat_s6PcB_entry() //  [R1]
         { []
         }
     {offset
       c6VTY: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6VTZ; else goto c6VU0;
       c6VTZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VU0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = GHC.Base.id_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 48;
           call Data.Foldable.foldr_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6PcB_info" {
     sat_s6PcB_info:
         const sat_s6PcB_entry;
         const 3;
         const 15;
 },
 Data.Foldable.$w$cfoldl'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c6VU1: // global
           _s6Pcu::P64 = R6;
           _s6Pct::P64 = R5;
           _s6Pcs::P64 = R4;
           _s6Pcr::P64 = R3;
           _s6Pcq::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c6VU2; else goto c6VU3;
       c6VU3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6VU5; else goto c6VU4;
       c6VU5: // global
           HpAlloc = 56;
           goto c6VU2;
       c6VU2: // global
           R6 = _s6Pcu::P64;
           R5 = _s6Pct::P64;
           R4 = _s6Pcs::P64;
           R3 = _s6Pcr::P64;
           R2 = _s6Pcq::P64;
           R1 = Data.Foldable.$w$cfoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c6VU4: // global
           I64[Hp - 48] = f1_s6Pcw_info;
           P64[Hp - 40] = _s6Pcs::P64;
           I64[Hp - 32] = sat_s6PcB_info;
           P64[Hp - 16] = _s6Pcr::P64;
           P64[Hp - 8] = P64[Sp];
           _c6VTJ::P64 = Hp - 45;
           P64[Hp] = _c6VTJ::P64;
           R2 = _s6Pcq::P64;
           I64[Sp - 32] = stg_ap_pppp_info;
           P64[Sp - 24] = _c6VTJ::P64;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _s6Pcu::P64;
           P64[Sp] = _s6Pct::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldl'_info" {
     Data.Foldable.$w$cfoldl'_info:
         const Data.Foldable.$w$cfoldl'_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.423745517 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cfoldl'_closure" {
     Data.Foldable.$fFoldable:*:_$cfoldl'_closure:
         const Data.Foldable.$fFoldable:*:_$cfoldl'_info;
 },
 Data.Foldable.$fFoldable:*:_$cfoldl'_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c6VUx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6VUy; else goto c6VUz;
       c6VUy: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cfoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VUz: // global
           I64[Sp - 40] = block_c6VUu_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6VUD; else goto c6VUv;
       u6VUD: // global
           call _c6VUu(R1) args: 0, res: 0, upd: 0;
       c6VUv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cfoldl'_info" {
     Data.Foldable.$fFoldable:*:_$cfoldl'_info:
         const Data.Foldable.$fFoldable:*:_$cfoldl'_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c6VUu() //  [R1]
         { []
         }
     {offset
       c6VUu: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Foldable.$w$cfoldl'_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VUu_info" {
     block_c6VUu_info:
         const _c6VUu;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.429888028 UTC

[section ""data" . Data.Foldable.$fFoldableM2_closure" {
     Data.Foldable.$fFoldableM2_closure:
         const Data.Foldable.$fFoldableM2_info;
 },
 Data.Foldable.$fFoldableM2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6VUV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VV2; else goto c6VV3;
       c6VV2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VV3: // global
           I64[Sp - 16] = block_c6VUS_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6VV7; else goto c6VUT;
       u6VV7: // global
           call _c6VUS(R1) args: 0, res: 0, upd: 0;
       c6VUT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM2_info" {
     Data.Foldable.$fFoldableM2_info:
         const Data.Foldable.$fFoldableM2_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6VUS() //  [R1]
         { []
         }
     {offset
       c6VUS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6VV6; else goto c6VV5;
       c6VV6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6VV5: // global
           _s6PcP::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s6PcP::I64;
           R2 = Hp - 7;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VUS_info" {
     block_c6VUS_info:
         const _c6VUS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.436260669 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$clength_closure" {
     Data.Foldable.$fFoldable:*:_$clength_closure:
         const Data.Foldable.$fFoldable:*:_$clength_info;
 },
 sat_s6PcX_entry() //  [R1]
         { []
         }
     {offset
       c6VVv: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6VVw; else goto c6VVx;
       c6VVw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VVx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Foldable.$fFoldableM2_closure+3;
           P64[Sp - 32] = GHC.Base.id_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 48;
           call Data.Foldable.foldr_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6PcX_info" {
     sat_s6PcX_info:
         const sat_s6PcX_entry;
         const 2;
         const 18;
 },
 Data.Foldable.$fFoldable:*:_$clength_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6VVy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6VVz; else goto c6VVA;
       c6VVz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$clength_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VVA: // global
           I64[Sp - 24] = block_c6VVm_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6VVE; else goto c6VVn;
       u6VVE: // global
           call _c6VVm(R1) args: 0, res: 0, upd: 0;
       c6VVn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$clength_info" {
     Data.Foldable.$fFoldable:*:_$clength_info:
         const Data.Foldable.$fFoldable:*:_$clength_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6VVm() //  [R1]
         { []
         }
     {offset
       c6VVm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6VVD; else goto c6VVC;
       c6VVD: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6VVC: // global
           _s6PcV::P64 = P64[R1 + 7];
           _s6PcW::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s6PcX_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s6PcW::P64;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_pppp_info;
           P64[Sp - 8] = Data.Foldable.$fFoldableM2_closure+3;
           P64[Sp] = Hp - 24;
           P64[Sp + 8] = _s6PcV::P64;
           P64[Sp + 16] = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp - 16;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VVm_info" {
     block_c6VVm_info:
         const _c6VVm;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.444778202 UTC

[section ""data" . Data.Foldable.$w$cfoldl_closure" {
     Data.Foldable.$w$cfoldl_closure:
         const Data.Foldable.$w$cfoldl_info;
         const 0;
 },
 f1_s6Pd4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6VW4: // global
           _s6Pd6::P64 = R3;
           R3 = R2;
           R2 = _s6Pd6::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f1_s6Pd4_info" {
     f1_s6Pd4_info:
         const f1_s6Pd4_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Pd7_entry() //  [R1]
         { []
         }
     {offset
       c6VWb: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c6VWc; else goto c6VWd;
       c6VWc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VWd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pd7_info" {
     sat_s6Pd7_info:
         const sat_s6Pd7_entry;
         const 4;
         const 4294967311;
         const S6PH7_srt+640;
 },
 Data.Foldable.$w$cfoldl_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c6VWe: // global
           _s6Pd2::P64 = R6;
           _s6Pd1::P64 = R5;
           _s6Pd0::P64 = R4;
           _s6PcZ::P64 = R3;
           _s6PcY::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c6VWf; else goto c6VWg;
       c6VWg: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6VWi; else goto c6VWh;
       c6VWi: // global
           HpAlloc = 64;
           goto c6VWf;
       c6VWf: // global
           R6 = _s6Pd2::P64;
           R5 = _s6Pd1::P64;
           R4 = _s6Pd0::P64;
           R3 = _s6PcZ::P64;
           R2 = _s6PcY::P64;
           R1 = Data.Foldable.$w$cfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c6VWh: // global
           I64[Hp - 56] = f1_s6Pd4_info;
           P64[Hp - 48] = _s6Pd0::P64;
           I64[Hp - 40] = sat_s6Pd7_info;
           P64[Hp - 24] = _s6PcY::P64;
           P64[Hp - 16] = _s6Pd1::P64;
           P64[Hp - 8] = _s6Pd2::P64;
           _c6VVZ::P64 = Hp - 54;
           P64[Hp] = _c6VVZ::P64;
           R2 = _s6PcZ::P64;
           I64[Sp - 32] = stg_ap_pppp_info;
           P64[Sp - 24] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 16] = _c6VVZ::P64;
           P64[Sp - 8] = P64[Sp];
           P64[Sp] = Hp - 40;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldl_info" {
     Data.Foldable.$w$cfoldl_info:
         const Data.Foldable.$w$cfoldl_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const S6PH7_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.453292746 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cfoldl_closure" {
     Data.Foldable.$fFoldable:*:_$cfoldl_closure:
         const Data.Foldable.$fFoldable:*:_$cfoldl_info;
         const 0;
 },
 Data.Foldable.$fFoldable:*:_$cfoldl_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c6VWH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6VWI; else goto c6VWJ;
       c6VWI: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VWJ: // global
           I64[Sp - 40] = block_c6VWE_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6VWN; else goto c6VWF;
       u6VWN: // global
           call _c6VWE(R1) args: 0, res: 0, upd: 0;
       c6VWF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cfoldl_info" {
     Data.Foldable.$fFoldable:*:_$cfoldl_info:
         const Data.Foldable.$fFoldable:*:_$cfoldl_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const S6PH7_srt+648;
 },
 _c6VWE() //  [R1]
         { []
         }
     {offset
       c6VWE: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Foldable.$w$cfoldl_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VWE_info" {
     block_c6VWE_info:
         const _c6VWE;
         const 4;
         const 4294967326;
         const S6PH7_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.461395362 UTC

[section ""data" . Data.Foldable.$w$cfoldl1_closure" {
     Data.Foldable.$w$cfoldl1_closure:
         const Data.Foldable.$w$cfoldl1_info;
         const 0;
 },
 sat_s6Pdq_entry() //  [R1]
         { []
         }
     {offset
       c6VXi: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6VXj; else goto c6VXk;
       c6VXj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VXk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6VXb_info;
           _s6Pdi::P64 = P64[R1 + 16];
           _s6Pdm::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6Pdi::P64;
           P64[Sp - 24] = _s6Pdm::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6VXr; else goto c6VXc;
       u6VXr: // global
           call _c6VXb(R1) args: 0, res: 0, upd: 0;
       c6VXc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pdq_info" {
     sat_s6Pdq_info:
         const sat_s6Pdq_entry;
         const 3;
         const 15;
 },
 _c6VXb() //  [R1]
         { []
         }
     {offset
       c6VXb: // global
           _s6Pdm::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6VXf; else goto c6VXg;
       c6VXf: // global
           R1 = _s6Pdm::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c6VXg: // global
           R3 = _s6Pdm::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6VXb_info" {
     block_c6VXb_info:
         const _c6VXb;
         const 2;
         const 30;
 },
 f1_s6Pdl_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6VXt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6VXx; else goto c6VXw;
       c6VXx: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VXw: // global
           _s6Pdi::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6Pdq_info;
           P64[Hp - 32] = _s6Pdi::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f1_s6Pdl_info" {
     f1_s6Pdl_info:
         const f1_s6Pdl_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Pdr_entry() //  [R1]
         { []
         }
     {offset
       c6VXC: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c6VXD; else goto c6VXE;
       c6VXD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VXE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pdr_info" {
     sat_s6Pdr_info:
         const sat_s6Pdr_entry;
         const 3;
         const 4294967311;
         const S6PH7_srt+640;
 },
 Data.Foldable.$w$cfoldl1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c6VXL: // global
           _s6Pdk::P64 = R6;
           _s6Pdj::P64 = R5;
           _s6Pdi::P64 = R4;
           _s6Pdh::P64 = R3;
           _s6Pdg::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c6VXM; else goto c6VXN;
       c6VXN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6VXP; else goto c6VXO;
       c6VXP: // global
           HpAlloc = 56;
           goto c6VXM;
       c6VXM: // global
           R6 = _s6Pdk::P64;
           R5 = _s6Pdj::P64;
           R4 = _s6Pdi::P64;
           R3 = _s6Pdh::P64;
           R2 = _s6Pdg::P64;
           R1 = Data.Foldable.$w$cfoldl1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VXO: // global
           I64[Hp - 48] = f1_s6Pdl_info;
           P64[Hp - 40] = _s6Pdi::P64;
           I64[Hp - 32] = sat_s6Pdr_info;
           P64[Hp - 16] = _s6Pdg::P64;
           P64[Hp - 8] = _s6Pdj::P64;
           _c6VX2::P64 = Hp - 46;
           P64[Hp] = _c6VX2::P64;
           I64[Sp - 8] = block_c6VXF_info;
           R2 = _s6Pdh::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           P64[Sp - 40] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 32] = _c6VX2::P64;
           P64[Sp - 24] = _s6Pdk::P64;
           P64[Sp - 16] = Hp - 32;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldl1_info" {
     Data.Foldable.$w$cfoldl1_info:
         const Data.Foldable.$w$cfoldl1_entry;
         const 0;
         const 324259177465643022;
         const 21474836505;
         const S6PH7_srt+456;
 },
 _c6VXF() //  [R1]
         { []
         }
     {offset
       c6VXF: // global
           if (R1 & 7 == 1) goto c6VXI; else goto c6VXJ;
       c6VXI: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6VXJ: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VXF_info" {
     block_c6VXF_info:
         const _c6VXF;
         const 0;
         const 4294967326;
         const S6PH7_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.474515419 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cfoldl1_closure" {
     Data.Foldable.$fFoldable:*:_$cfoldl1_closure:
         const Data.Foldable.$fFoldable:*:_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldable:*:_$cfoldl1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6VYz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6VYA; else goto c6VYB;
       c6VYA: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cfoldl1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VYB: // global
           I64[Sp - 32] = block_c6VYw_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6VYF; else goto c6VYx;
       u6VYF: // global
           call _c6VYw(R1) args: 0, res: 0, upd: 0;
       c6VYx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cfoldl1_info" {
     Data.Foldable.$fFoldable:*:_$cfoldl1_info:
         const Data.Foldable.$fFoldable:*:_$cfoldl1_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S6PH7_srt+664;
 },
 _c6VYw() //  [R1]
         { []
         }
     {offset
       c6VYw: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Foldable.$w$cfoldl1_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VYw_info" {
     block_c6VYw_info:
         const _c6VYw;
         const 3;
         const 4294967326;
         const S6PH7_srt+664;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.482229359 UTC

[section ""data" . Data.Foldable.$w$cfoldr'_closure" {
     Data.Foldable.$w$cfoldr'_closure:
         const Data.Foldable.$w$cfoldr'_info;
         const 0;
 },
 f1_s6PdH_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6VZ0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6VZ1; else goto c6VZ2;
       c6VZ1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VZ2: // global
           I64[Sp - 16] = block_c6VYY_info;
           _s6PdJ::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6PdJ::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . f1_s6PdH_info" {
     f1_s6PdH_info:
         const f1_s6PdH_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c6VYY() //  [R1]
         { []
         }
     {offset
       c6VYY: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VYY_info" {
     block_c6VYY_info:
         const _c6VYY;
         const 1;
         const 30;
 },
 sat_s6PdM_entry() //  [R1]
         { []
         }
     {offset
       c6VZ8: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c6VZ9; else goto c6VZa;
       c6VZ9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6VZa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.id_closure+1;
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6PdM_info" {
     sat_s6PdM_info:
         const sat_s6PdM_entry;
         const 3;
         const 4294967311;
         const S6PH7_srt+640;
 },
 Data.Foldable.$w$cfoldr'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c6VZb: // global
           _s6PdF::P64 = R6;
           _s6PdE::P64 = R5;
           _s6PdD::P64 = R4;
           _s6PdC::P64 = R3;
           _s6PdB::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6VZc; else goto c6VZd;
       c6VZd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6VZf; else goto c6VZe;
       c6VZf: // global
           HpAlloc = 56;
           goto c6VZc;
       c6VZc: // global
           R6 = _s6PdF::P64;
           R5 = _s6PdE::P64;
           R4 = _s6PdD::P64;
           R3 = _s6PdC::P64;
           R2 = _s6PdB::P64;
           R1 = Data.Foldable.$w$cfoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c6VZe: // global
           I64[Hp - 48] = f1_s6PdH_info;
           P64[Hp - 40] = _s6PdD::P64;
           I64[Hp - 32] = sat_s6PdM_info;
           P64[Hp - 16] = _s6PdB::P64;
           P64[Hp - 8] = _s6PdF::P64;
           _c6VYT::P64 = Hp - 45;
           P64[Hp] = _c6VYT::P64;
           R2 = _s6PdC::P64;
           I64[Sp - 40] = stg_ap_ppppp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 24] = _c6VYT::P64;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = Hp - 32;
           P64[Sp] = _s6PdE::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldr'_info" {
     Data.Foldable.$w$cfoldr'_info:
         const Data.Foldable.$w$cfoldr'_entry;
         const 0;
         const 141733920782;
         const 25769803802;
         const S6PH7_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.491396533 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cfoldr'_closure" {
     Data.Foldable.$fFoldable:*:_$cfoldr'_closure:
         const Data.Foldable.$fFoldable:*:_$cfoldr'_info;
         const 0;
 },
 Data.Foldable.$fFoldable:*:_$cfoldr'_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c6VZH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6VZI; else goto c6VZJ;
       c6VZI: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cfoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6VZJ: // global
           I64[Sp - 40] = block_c6VZE_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6VZN; else goto c6VZF;
       u6VZN: // global
           call _c6VZE(R1) args: 0, res: 0, upd: 0;
       c6VZF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cfoldr'_info" {
     Data.Foldable.$fFoldable:*:_$cfoldr'_info:
         const Data.Foldable.$fFoldable:*:_$cfoldr'_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const S6PH7_srt+680;
 },
 _c6VZE() //  [R1]
         { []
         }
     {offset
       c6VZE: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Foldable.$w$cfoldr'_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6VZE_info" {
     block_c6VZE_info:
         const _c6VZE;
         const 4;
         const 4294967326;
         const S6PH7_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.497370539 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cfold_closure" {
     Data.Foldable.$fFoldable:*:_$cfold_closure:
         const Data.Foldable.$fFoldable:*:_$cfold_info;
 },
 Data.Foldable.$fFoldable:*:_$cfold_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6W05: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6W06; else goto c6W07;
       c6W06: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cfold_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6W07: // global
           I64[Sp - 32] = block_c6W02_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6W0b; else goto c6W03;
       u6W0b: // global
           call _c6W02(R1) args: 0, res: 0, upd: 0;
       c6W03: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cfold_info" {
     Data.Foldable.$fFoldable:*:_$cfold_info:
         const Data.Foldable.$fFoldable:*:_$cfold_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c6W02() //  [R1]
         { []
         }
     {offset
       c6W02: // global
           R6 = P64[R1 + 7];
           R5 = GHC.Base.id_closure+1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp + 24;
           call Data.Foldable.$w$cfoldMap_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6W02_info" {
     block_c6W02_info:
         const _c6W02;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.506169352 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cproduct_closure" {
     Data.Foldable.$fFoldable:*:_$cproduct_closure:
         const Data.Foldable.$fFoldable:*:_$cproduct_info;
         const 0;
 },
 $dMonoid_s6Pe5_entry() //  [R1]
         { []
         }
     {offset
       c6W0u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6W0v; else goto c6W0w;
       c6W0v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6W0w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6Pe5_info" {
     $dMonoid_s6Pe5_info:
         const $dMonoid_s6Pe5_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+696;
 },
 sat_s6Peb_entry() //  [R1]
         { []
         }
     {offset
       c6W0L: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6W0M; else goto c6W0N;
       c6W0M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6W0N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Peb_info" {
     sat_s6Peb_info:
         const sat_s6Peb_entry;
         const 3;
         const 15;
 },
 sat_s6Pea_entry() //  [R1]
         { []
         }
     {offset
       c6W0S: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6W0T; else goto c6W0U;
       c6W0T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6W0U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pea_info" {
     sat_s6Pea_info:
         const sat_s6Pea_entry;
         const 3;
         const 15;
 },
 sat_s6Pec_entry() //  [R1, R2]
         { []
         }
     {offset
       c6W0V: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6W0W; else goto c6W0X;
       c6W0W: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6W0X: // global
           I64[Sp - 40] = block_c6W0C_info;
           _s6Pe2::P64 = P64[R1 + 7];
           _s6Pe3::P64 = P64[R1 + 15];
           _s6Pe4::P64 = P64[R1 + 23];
           _s6Pe5::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s6Pe2::P64;
           P64[Sp - 24] = _s6Pe3::P64;
           P64[Sp - 16] = _s6Pe4::P64;
           P64[Sp - 8] = _s6Pe5::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6W11; else goto c6W0D;
       u6W11: // global
           call _c6W0C(R1) args: 0, res: 0, upd: 0;
       c6W0D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pec_info" {
     sat_s6Pec_info:
         const sat_s6Pec_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c6W0C() //  [R1]
         { []
         }
     {offset
       c6W0C: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c6W10; else goto c6W0Z;
       c6W10: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6W0Z: // global
           _s6Pe8::P64 = P64[R1 + 7];
           _s6Pe9::P64 = P64[R1 + 15];
           I64[Hp - 72] = sat_s6Peb_info;
           P64[Hp - 56] = P64[Sp + 16];
           _s6Pe5::P64 = P64[Sp + 32];
           P64[Hp - 48] = _s6Pe5::P64;
           P64[Hp - 40] = _s6Pe9::P64;
           I64[Hp - 32] = sat_s6Pea_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s6Pe5::P64;
           P64[Hp] = _s6Pe8::P64;
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 72;
           Sp = Sp + 16;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6W0C_info" {
     block_c6W0C_info:
         const _c6W0C;
         const 4;
         const 30;
 },
 Data.Foldable.$fFoldable:*:_$cproduct_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6W12: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6W16; else goto c6W15;
       c6W16: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cproduct_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6W15: // global
           I64[Hp - 56] = $dMonoid_s6Pe5_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_s6Pec_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cproduct_info" {
     Data.Foldable.$fFoldable:*:_$cproduct_info:
         const Data.Foldable.$fFoldable:*:_$cproduct_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6PH7_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.519562721 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$ctoList_closure" {
     Data.Foldable.$fFoldable:*:_$ctoList_closure:
         const Data.Foldable.$fFoldable:*:_$ctoList_info;
 },
 sat_s6Pej_entry() //  [R1]
         { []
         }
     {offset
       c6W1S: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6W1T; else goto c6W1U;
       c6W1T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6W1U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = GHC.Types.:_closure+2;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 48;
           call Data.Foldable.foldr_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pej_info" {
     sat_s6Pej_info:
         const sat_s6Pej_entry;
         const 2;
         const 18;
 },
 Data.Foldable.$fFoldable:*:_$ctoList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6W1V: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6W1W; else goto c6W1X;
       c6W1W: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$ctoList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6W1X: // global
           I64[Sp - 24] = block_c6W1J_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6W21; else goto c6W1K;
       u6W21: // global
           call _c6W1J(R1) args: 0, res: 0, upd: 0;
       c6W1K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$ctoList_info" {
     Data.Foldable.$fFoldable:*:_$ctoList_info:
         const Data.Foldable.$fFoldable:*:_$ctoList_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6W1J() //  [R1]
         { []
         }
     {offset
       c6W1J: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6W20; else goto c6W1Z;
       c6W20: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6W1Z: // global
           _s6Peh::P64 = P64[R1 + 7];
           _s6Pei::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s6Pej_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s6Pei::P64;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = GHC.Types.:_closure+2;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = _s6Peh::P64;
           Sp = Sp - 8;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6W1J_info" {
     block_c6W1J_info:
         const _c6W1J;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.533927845 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_closure" {
     Data.Foldable.$fFoldable:*:_closure:
         const Data.Foldable.$fFoldable:*:_info;
         const 0;
 },
 sat_s6PeB_entry() //  [R1, R2]
         { []
         }
     {offset
       c6W2r: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:*:_$cproduct_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PeB_info" {
     sat_s6PeB_info:
         const sat_s6PeB_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+704;
 },
 sat_s6PeA_entry() //  [R1, R2]
         { []
         }
     {offset
       c6W2z: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:*:_$csum_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PeA_info" {
     sat_s6PeA_info:
         const sat_s6PeA_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+568;
 },
 sat_s6Pez_entry() //  [R1, R2]
         { []
         }
     {offset
       c6W2H: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:*:_$cminimum_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pez_info" {
     sat_s6Pez_info:
         const sat_s6Pez_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+592;
 },
 sat_s6Pey_entry() //  [R1, R2]
         { []
         }
     {offset
       c6W2P: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:*:_$cmaximum_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pey_info" {
     sat_s6Pey_info:
         const sat_s6Pey_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+616;
 },
 sat_s6Pex_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6W2X: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:*:_$celem_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pex_info" {
     sat_s6Pex_info:
         const sat_s6Pex_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6PH7_srt+552;
 },
 sat_s6Pew_entry() //  [R1, R2]
         { []
         }
     {offset
       c6W35: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:*:_$clength_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pew_info" {
     sat_s6Pew_info:
         const sat_s6Pew_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6Pev_entry() //  [R1, R2]
         { []
         }
     {offset
       c6W3d: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:*:_$cnull_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pev_info" {
     sat_s6Pev_info:
         const sat_s6Pev_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6Peu_entry() //  [R1, R2]
         { []
         }
     {offset
       c6W3l: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:*:_$ctoList_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Peu_info" {
     sat_s6Peu_info:
         const sat_s6Peu_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6Pet_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6W3t: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:*:_$cfoldl1_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pet_info" {
     sat_s6Pet_info:
         const sat_s6Pet_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6PH7_srt+672;
 },
 sat_s6Pes_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6W3B: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:*:_$cfoldr1_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pes_info" {
     sat_s6Pes_info:
         const sat_s6Pes_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6PH7_srt+632;
 },
 sat_s6Per_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6W3J: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:*:_$cfoldl'_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Per_info" {
     sat_s6Per_info:
         const sat_s6Per_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6Peq_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6W3R: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:*:_$cfoldl_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Peq_info" {
     sat_s6Peq_info:
         const sat_s6Peq_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const S6PH7_srt+656;
 },
 sat_s6Pep_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6W3Z: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:*:_$cfoldr'_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pep_info" {
     sat_s6Pep_info:
         const sat_s6Pep_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const S6PH7_srt+688;
 },
 sat_s6Peo_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6W47: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:*:_$cfoldr_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Peo_info" {
     sat_s6Peo_info:
         const sat_s6Peo_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6Pen_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6W4f: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:*:_$cfoldMap_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pen_info" {
     sat_s6Pen_info:
         const sat_s6Pen_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6Pem_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6W4n: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:*:_$cfold_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pem_info" {
     sat_s6Pem_info:
         const sat_s6Pem_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:*:_entry() //  [R2, R3]
         { []
         }
     {offset
       c6W4r: // global
           Hp = Hp + 520;
           if (Hp > HpLim) (likely: False) goto c6W4v; else goto c6W4u;
       c6W4v: // global
           HpAlloc = 520;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6W4u: // global
           I64[Hp - 512] = sat_s6PeB_info;
           P64[Hp - 504] = R2;
           P64[Hp - 496] = R3;
           I64[Hp - 488] = sat_s6PeA_info;
           P64[Hp - 480] = R2;
           P64[Hp - 472] = R3;
           I64[Hp - 464] = sat_s6Pez_info;
           P64[Hp - 456] = R2;
           P64[Hp - 448] = R3;
           I64[Hp - 440] = sat_s6Pey_info;
           P64[Hp - 432] = R2;
           P64[Hp - 424] = R3;
           I64[Hp - 416] = sat_s6Pex_info;
           P64[Hp - 408] = R2;
           P64[Hp - 400] = R3;
           I64[Hp - 392] = sat_s6Pew_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           I64[Hp - 368] = sat_s6Pev_info;
           P64[Hp - 360] = R2;
           P64[Hp - 352] = R3;
           I64[Hp - 344] = sat_s6Peu_info;
           P64[Hp - 336] = R2;
           P64[Hp - 328] = R3;
           I64[Hp - 320] = sat_s6Pet_info;
           P64[Hp - 312] = R2;
           P64[Hp - 304] = R3;
           I64[Hp - 296] = sat_s6Pes_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           I64[Hp - 272] = sat_s6Per_info;
           P64[Hp - 264] = R2;
           P64[Hp - 256] = R3;
           I64[Hp - 248] = sat_s6Peq_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           I64[Hp - 224] = sat_s6Pep_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           I64[Hp - 200] = sat_s6Peo_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_s6Pen_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_s6Pem_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = Hp - 150;
           P64[Hp - 112] = Hp - 173;
           P64[Hp - 104] = Hp - 197;
           P64[Hp - 96] = Hp - 221;
           P64[Hp - 88] = Hp - 245;
           P64[Hp - 80] = Hp - 269;
           P64[Hp - 72] = Hp - 294;
           P64[Hp - 64] = Hp - 318;
           P64[Hp - 56] = Hp - 343;
           P64[Hp - 48] = Hp - 367;
           P64[Hp - 40] = Hp - 391;
           P64[Hp - 32] = Hp - 414;
           P64[Hp - 24] = Hp - 439;
           P64[Hp - 16] = Hp - 463;
           P64[Hp - 8] = Hp - 487;
           P64[Hp] = Hp - 511;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_info" {
     Data.Foldable.$fFoldable:*:_info:
         const Data.Foldable.$fFoldable:*:_entry;
         const 0;
         const 7499927726850062;
         const 8589934607;
         const S6PH7_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.564961659 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$celem_closure" {
     Data.Foldable.$fFoldable:+:_$celem_closure:
         const Data.Foldable.$fFoldable:+:_$celem_info;
         const 0;
 },
 f1_s6PeG_entry() //  [R1]
         { []
         }
     {offset
       c6W5L: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6W5M; else goto c6W5N;
       c6W5M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6W5N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s6PeG_info" {
     f1_s6PeG_info:
         const f1_s6PeG_entry;
         const 2;
         const 18;
 },
 sat_s6PeL_entry() //  [R1, R2]
         { []
         }
     {offset
       c6W60: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6W61; else goto c6W62;
       c6W61: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6W62: // global
           I64[Sp - 32] = block_c6W5T_info;
           _s6PeC::P64 = P64[R1 + 7];
           _s6PeD::P64 = P64[R1 + 15];
           _s6PeG::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s6PeC::P64;
           P64[Sp - 16] = _s6PeD::P64;
           P64[Sp - 8] = _s6PeG::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6W69; else goto c6W5U;
       u6W69: // global
           call _c6W5T(R1) args: 0, res: 0, upd: 0;
       c6W5U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PeL_info" {
     sat_s6PeL_info:
         const sat_s6PeL_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S6PH7_srt+544;
 },
 _c6W5T() //  [R1]
         { []
         }
     {offset
       c6W5T: // global
           _s6PeG::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6W5X; else goto c6W5Y;
       c6W5X: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp + 16] = _s6PeG::P64;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       c6W5Y: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp + 16] = _s6PeG::P64;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6W5T_info" {
     block_c6W5T_info:
         const _c6W5T;
         const 3;
         const 4294967326;
         const S6PH7_srt+544;
 },
 Data.Foldable.$fFoldable:+:_$celem_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6W6a: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6W6e; else goto c6W6d;
       c6W6e: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$celem_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6W6d: // global
           I64[Hp - 56] = f1_s6PeG_info;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           I64[Hp - 24] = sat_s6PeL_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$celem_info" {
     Data.Foldable.$fFoldable:+:_$celem_info:
         const Data.Foldable.$fFoldable:+:_$celem_entry;
         const 0;
         const 18014402804449294;
         const 17179869208;
         const S6PH7_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.576272059 UTC

[section ""data" . Data.Foldable.$fFoldable:+:2_closure" {
     Data.Foldable.$fFoldable:+:2_closure:
         const Data.Foldable.$fFoldable:+:2_info;
         const 0;
 },
 $dMonoid_s6PeP_entry() //  [R1]
         { []
         }
     {offset
       c6W6K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6W6L; else goto c6W6M;
       c6W6L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6W6M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6PeP_info" {
     $dMonoid_s6PeP_info:
         const $dMonoid_s6PeP_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+560;
 },
 sat_s6PeU_entry() //  [R1, R2]
         { []
         }
     {offset
       c6W6Z: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6W70; else goto c6W71;
       c6W70: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6W71: // global
           I64[Sp - 32] = block_c6W6S_info;
           _s6PeM::P64 = P64[R1 + 7];
           _s6PeN::P64 = P64[R1 + 15];
           _s6PeP::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s6PeM::P64;
           P64[Sp - 16] = _s6PeN::P64;
           P64[Sp - 8] = _s6PeP::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6W78; else goto c6W6T;
       u6W78: // global
           call _c6W6S(R1) args: 0, res: 0, upd: 0;
       c6W6T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PeU_info" {
     sat_s6PeU_info:
         const sat_s6PeU_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c6W6S() //  [R1]
         { []
         }
     {offset
       c6W6S: // global
           _s6PeP::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6W6W; else goto c6W6X;
       c6W6W: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _s6PeP::P64;
           P64[Sp + 16] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       c6W6X: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _s6PeP::P64;
           P64[Sp + 16] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6W6S_info" {
     block_c6W6S_info:
         const _c6W6S;
         const 3;
         const 30;
 },
 Data.Foldable.$fFoldable:+:2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6W79: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6W7d; else goto c6W7c;
       c6W7d: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6W7c: // global
           I64[Hp - 48] = $dMonoid_s6PeP_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s6PeU_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:2_info" {
     Data.Foldable.$fFoldable:+:2_info:
         const Data.Foldable.$fFoldable:+:2_entry;
         const 0;
         const 9007203549708302;
         const 12884901911;
         const S6PH7_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.588543452 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cminimum_closure" {
     Data.Foldable.$fFoldable:+:_$cminimum_closure:
         const Data.Foldable.$fFoldable:+:_$cminimum_info;
         const 0;
 },
 g1_s6PeY_entry() //  [R1]
         { []
         }
     {offset
       c6W7I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6W7J; else goto c6W7K;
       c6W7J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6W7K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g1_s6PeY_info" {
     g1_s6PeY_info:
         const g1_s6PeY_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+576;
 },
 sat_s6Pf7_entry() //  [R1, R2]
         { []
         }
     {offset
       c6W7X: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6W7Y; else goto c6W7Z;
       c6W7Y: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6W7Z: // global
           I64[Sp - 32] = block_c6W7Q_info;
           _s6PeV::P64 = P64[R1 + 7];
           _s6PeW::P64 = P64[R1 + 15];
           _s6PeY::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s6PeV::P64;
           P64[Sp - 16] = _s6PeW::P64;
           P64[Sp - 8] = _s6PeY::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6W8w; else goto c6W7R;
       u6W8w: // global
           call _c6W7Q(R1) args: 0, res: 0, upd: 0;
       c6W7R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pf7_info" {
     sat_s6Pf7_info:
         const sat_s6Pf7_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S6PH7_srt+584;
 },
 _c6W7Q() //  [R1]
         { []
         }
     {offset
       c6W7Q: // global
           _s6PeY::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6W7U; else goto c6W7V;
       c6W7U: // global
           I64[Sp + 24] = block_c6W82_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = _s6PeY::P64;
           P64[Sp + 8] = GHC.Base.Just_closure+1;
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
       c6W7V: // global
           I64[Sp + 24] = block_c6W8g_info;
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = _s6PeY::P64;
           P64[Sp + 8] = GHC.Base.Just_closure+1;
           P64[Sp + 16] = P64[R1 + 6];
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6W7Q_info" {
     block_c6W7Q_info:
         const _c6W7Q;
         const 3;
         const 4294967326;
         const S6PH7_srt+584;
 },
 _c6W82() //  [R1]
         { []
         }
     {offset
       c6W82: // global
           if (R1 & 7 == 1) goto u6W8v; else goto c6W8d;
       u6W8v: // global
           Sp = Sp + 8;
           call _c6W8n() args: 0, res: 0, upd: 0;
       c6W8d: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6W82_info" {
     block_c6W82_info:
         const _c6W82;
         const 0;
         const 4294967326;
         const S6PH7_srt+584;
 },
 _c6W8g() //  [R1]
         { []
         }
     {offset
       c6W8g: // global
           if (R1 & 7 == 1) goto u6W8u; else goto c6W8r;
       u6W8u: // global
           Sp = Sp + 8;
           call _c6W8n() args: 0, res: 0, upd: 0;
       c6W8r: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6W8g_info" {
     block_c6W8g_info:
         const _c6W8g;
         const 0;
         const 4294967326;
         const S6PH7_srt+584;
 },
 _c6W8n() //  []
         { []
         }
     {offset
       c6W8n: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Foldable.$fFoldable:+:_$cminimum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6W8z: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6W8D; else goto c6W8C;
       c6W8D: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cminimum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6W8C: // global
           I64[Hp - 48] = g1_s6PeY_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s6Pf7_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cminimum_info" {
     Data.Foldable.$fFoldable:+:_$cminimum_info:
         const Data.Foldable.$fFoldable:+:_$cminimum_entry;
         const 0;
         const 4503612512272398;
         const 12884901911;
         const S6PH7_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.60410657 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cmaximum_closure" {
     Data.Foldable.$fFoldable:+:_$cmaximum_closure:
         const Data.Foldable.$fFoldable:+:_$cmaximum_info;
         const 0;
 },
 g1_s6Pfb_entry() //  [R1]
         { []
         }
     {offset
       c6W9k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6W9l; else goto c6W9m;
       c6W9l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6W9m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g1_s6Pfb_info" {
     g1_s6Pfb_info:
         const g1_s6Pfb_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+600;
 },
 sat_s6Pfk_entry() //  [R1, R2]
         { []
         }
     {offset
       c6W9z: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6W9A; else goto c6W9B;
       c6W9A: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6W9B: // global
           I64[Sp - 32] = block_c6W9s_info;
           _s6Pf8::P64 = P64[R1 + 7];
           _s6Pf9::P64 = P64[R1 + 15];
           _s6Pfb::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s6Pf8::P64;
           P64[Sp - 16] = _s6Pf9::P64;
           P64[Sp - 8] = _s6Pfb::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6Wa8; else goto c6W9t;
       u6Wa8: // global
           call _c6W9s(R1) args: 0, res: 0, upd: 0;
       c6W9t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pfk_info" {
     sat_s6Pfk_info:
         const sat_s6Pfk_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S6PH7_srt+608;
 },
 _c6W9s() //  [R1]
         { []
         }
     {offset
       c6W9s: // global
           _s6Pfb::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6W9w; else goto c6W9x;
       c6W9w: // global
           I64[Sp + 24] = block_c6W9E_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = _s6Pfb::P64;
           P64[Sp + 8] = GHC.Base.Just_closure+1;
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
       c6W9x: // global
           I64[Sp + 24] = block_c6W9S_info;
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = _s6Pfb::P64;
           P64[Sp + 8] = GHC.Base.Just_closure+1;
           P64[Sp + 16] = P64[R1 + 6];
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6W9s_info" {
     block_c6W9s_info:
         const _c6W9s;
         const 3;
         const 4294967326;
         const S6PH7_srt+608;
 },
 _c6W9E() //  [R1]
         { []
         }
     {offset
       c6W9E: // global
           if (R1 & 7 == 1) goto u6Wa7; else goto c6W9P;
       u6Wa7: // global
           Sp = Sp + 8;
           call _c6W9Z() args: 0, res: 0, upd: 0;
       c6W9P: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6W9E_info" {
     block_c6W9E_info:
         const _c6W9E;
         const 0;
         const 4294967326;
         const S6PH7_srt+608;
 },
 _c6W9S() //  [R1]
         { []
         }
     {offset
       c6W9S: // global
           if (R1 & 7 == 1) goto u6Wa6; else goto c6Wa3;
       u6Wa6: // global
           Sp = Sp + 8;
           call _c6W9Z() args: 0, res: 0, upd: 0;
       c6Wa3: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6W9S_info" {
     block_c6W9S_info:
         const _c6W9S;
         const 0;
         const 4294967326;
         const S6PH7_srt+608;
 },
 _c6W9Z() //  []
         { []
         }
     {offset
       c6W9Z: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Foldable.$fFoldable:+:_$cmaximum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Wab: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6Waf; else goto c6Wae;
       c6Waf: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cmaximum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Wae: // global
           I64[Hp - 48] = g1_s6Pfb_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s6Pfk_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cmaximum_info" {
     Data.Foldable.$fFoldable:+:_$cmaximum_info:
         const Data.Foldable.$fFoldable:+:_$cmaximum_entry;
         const 0;
         const 1125912791744526;
         const 12884901911;
         const S6PH7_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.628378274 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cfoldr1_closure" {
     Data.Foldable.$fFoldable:+:_$cfoldr1_closure:
         const Data.Foldable.$fFoldable:+:_$cfoldr1_info;
         const 0;
 },
 sat_s6Pfv_entry() //  [R1]
         { []
         }
     {offset
       c6Wbd: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Wbe; else goto c6Wbf;
       c6Wbe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Wbf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6Wb6_info;
           _s6Pfn::P64 = P64[R1 + 16];
           _s6Pfr::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6Pfn::P64;
           P64[Sp - 24] = _s6Pfr::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6Wbm; else goto c6Wb7;
       u6Wbm: // global
           call _c6Wb6(R1) args: 0, res: 0, upd: 0;
       c6Wb7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pfv_info" {
     sat_s6Pfv_info:
         const sat_s6Pfv_entry;
         const 3;
         const 15;
 },
 _c6Wb6() //  [R1]
         { []
         }
     {offset
       c6Wb6: // global
           _s6Pfr::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6Wba; else goto c6Wbb;
       c6Wba: // global
           R1 = _s6Pfr::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c6Wbb: // global
           R3 = P64[R1 + 6];
           R2 = _s6Pfr::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Wb6_info" {
     block_c6Wb6_info:
         const _c6Wb6;
         const 2;
         const 30;
 },
 sat_s6Pfw_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Wbo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6Wbs; else goto c6Wbr;
       c6Wbs: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Wbr: // global
           _s6Pfn::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6Pfv_info;
           P64[Hp - 32] = _s6Pfn::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pfw_info" {
     sat_s6Pfw_info:
         const sat_s6Pfw_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6PfE_entry() //  [R1]
         { []
         }
     {offset
       c6WbL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6WbM; else goto c6WbN;
       c6WbM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WbN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6WbE_info;
           _s6Pfn::P64 = P64[R1 + 16];
           _s6PfA::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6Pfn::P64;
           P64[Sp - 24] = _s6PfA::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6WbU; else goto c6WbF;
       u6WbU: // global
           call _c6WbE(R1) args: 0, res: 0, upd: 0;
       c6WbF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6PfE_info" {
     sat_s6PfE_info:
         const sat_s6PfE_entry;
         const 3;
         const 15;
 },
 _c6WbE() //  [R1]
         { []
         }
     {offset
       c6WbE: // global
           _s6PfA::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6WbI; else goto c6WbJ;
       c6WbI: // global
           R1 = _s6PfA::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c6WbJ: // global
           R3 = P64[R1 + 6];
           R2 = _s6PfA::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6WbE_info" {
     block_c6WbE_info:
         const _c6WbE;
         const 2;
         const 30;
 },
 sat_s6PfF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6WbW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6Wc0; else goto c6WbZ;
       c6Wc0: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WbZ: // global
           _s6Pfn::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6PfE_info;
           P64[Hp - 32] = _s6Pfn::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PfF_info" {
     sat_s6PfF_info:
         const sat_s6PfF_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:+:_$cfoldr1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6Wc5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Wc6; else goto c6Wc7;
       c6Wc6: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cfoldr1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Wc7: // global
           I64[Sp - 32] = block_c6WaS_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6WcE; else goto c6WaT;
       u6WcE: // global
           call _c6WaS(R1) args: 0, res: 0, upd: 0;
       c6WaT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cfoldr1_info" {
     Data.Foldable.$fFoldable:+:_$cfoldr1_info:
         const Data.Foldable.$fFoldable:+:_$cfoldr1_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S6PH7_srt+752;
 },
 _c6WaS() //  [R1]
         { []
         }
     {offset
       c6WaS: // global
           _s6Pfn::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6Wc2; else goto c6Wc3;
       c6Wc2: // global
           Hp = Hp + 16;
           _s6Pfp::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6Wcp; else goto c6Wca;
       c6Wca: // global
           _s6Pfq::P64 = P64[_s6Pfp::P64 + 7];
           I64[Hp - 8] = sat_s6Pfw_info;
           P64[Hp] = _s6Pfn::P64;
           I64[Sp + 24] = block_c6Wc8_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Hp - 6;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           P64[Sp + 16] = _s6Pfq::P64;
           Sp = Sp - 8;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 8, upd: 8;
       c6Wc3: // global
           Hp = Hp + 16;
           _s6Pfp::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6Wcp; else goto c6Wco;
       c6Wcp: // global
           HpAlloc = 16;
           R1 = _s6Pfp::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Wco: // global
           _s6Pfz::P64 = P64[_s6Pfp::P64 + 6];
           I64[Hp - 8] = sat_s6PfF_info;
           P64[Hp] = _s6Pfn::P64;
           I64[Sp + 24] = block_c6Wcm_info;
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Hp - 6;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           P64[Sp + 16] = _s6Pfz::P64;
           Sp = Sp - 8;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WaS_info" {
     block_c6WaS_info:
         const _c6WaS;
         const 3;
         const 4294967326;
         const S6PH7_srt+760;
 },
 _c6Wc8() //  [R1]
         { []
         }
     {offset
       c6Wc8: // global
           if (R1 & 7 == 1) goto u6WcD; else goto c6Wcl;
       u6WcD: // global
           Sp = Sp + 8;
           call _c6Wcv() args: 0, res: 0, upd: 0;
       c6Wcl: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Wc8_info" {
     block_c6Wc8_info:
         const _c6Wc8;
         const 0;
         const 4294967326;
         const S6PH7_srt+760;
 },
 _c6Wcm() //  [R1]
         { []
         }
     {offset
       c6Wcm: // global
           if (R1 & 7 == 1) goto u6WcC; else goto c6Wcz;
       u6WcC: // global
           Sp = Sp + 8;
           call _c6Wcv() args: 0, res: 0, upd: 0;
       c6Wcz: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Wcm_info" {
     block_c6Wcm_info:
         const _c6Wcm;
         const 0;
         const 4294967326;
         const S6PH7_srt+760;
 },
 _c6Wcv() //  []
         { []
         }
     {offset
       c6Wcv: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.655289768 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cfoldl'_closure" {
     Data.Foldable.$fFoldable:+:_$cfoldl'_closure:
         const Data.Foldable.$fFoldable:+:_$cfoldl'_info;
 },
 sat_s6PfT_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6WdQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WdR; else goto c6WdS;
       c6WdR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WdS: // global
           I64[Sp - 16] = block_c6WdO_info;
           _s6PfQ::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6PfQ::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PfT_info" {
     sat_s6PfT_info:
         const sat_s6PfT_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c6WdO() //  [R1]
         { []
         }
     {offset
       c6WdO: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WdO_info" {
     block_c6WdO_info:
         const _c6WdO;
         const 1;
         const 30;
 },
 sat_s6PfZ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6We3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6We4; else goto c6We5;
       c6We4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6We5: // global
           I64[Sp - 16] = block_c6We1_info;
           _s6PfW::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6PfW::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PfZ_info" {
     sat_s6PfZ_info:
         const sat_s6PfZ_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c6We1() //  [R1]
         { []
         }
     {offset
       c6We1: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6We1_info" {
     block_c6We1_info:
         const _c6We1;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldable:+:_$cfoldl'_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c6Web: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Wec; else goto c6Wed;
       c6Wec: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cfoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Wed: // global
           I64[Sp - 40] = block_c6WdE_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6Wek; else goto c6WdF;
       u6Wek: // global
           call _c6WdE(R1) args: 0, res: 0, upd: 0;
       c6WdF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cfoldl'_info" {
     Data.Foldable.$fFoldable:+:_$cfoldl'_info:
         const Data.Foldable.$fFoldable:+:_$cfoldl'_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c6WdE() //  [R1]
         { []
         }
     {offset
       c6WdE: // global
           _s6PfK::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6We8; else goto c6We9;
       c6We8: // global
           Hp = Hp + 16;
           _s6PfN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6Wej; else goto c6Wef;
       c6Wef: // global
           _s6PfO::P64 = P64[_s6PfN::P64 + 7];
           I64[Hp - 8] = sat_s6PfT_info;
           P64[Hp] = _s6PfK::P64;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = Hp - 5;
           P64[Sp + 16] = GHC.Base.id_closure+1;
           P64[Sp + 24] = _s6PfO::P64;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
       c6We9: // global
           Hp = Hp + 16;
           _s6PfN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6Wej; else goto c6Wei;
       c6Wej: // global
           HpAlloc = 16;
           R1 = _s6PfN::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Wei: // global
           _s6PfU::P64 = P64[_s6PfN::P64 + 6];
           I64[Hp - 8] = sat_s6PfZ_info;
           P64[Hp] = _s6PfK::P64;
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = Hp - 5;
           P64[Sp + 16] = GHC.Base.id_closure+1;
           P64[Sp + 24] = _s6PfU::P64;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WdE_info" {
     block_c6WdE_info:
         const _c6WdE;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.668918439 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$clength_closure" {
     Data.Foldable.$fFoldable:+:_$clength_closure:
         const Data.Foldable.$fFoldable:+:_$clength_info;
 },
 Data.Foldable.$fFoldable:+:_$clength_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6WeQ: // global
           R6 = R4;
           R5 = Data.Foldable.$fFoldable:*:4_closure+1;
           R4 = Data.Foldable.$fFoldable:*:5_closure+2;
           R3 = R3;
           R2 = R2;
           call Data.Foldable.$fFoldable:+:_$cfoldl'_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$clength_info" {
     Data.Foldable.$fFoldable:+:_$clength_info:
         const Data.Foldable.$fFoldable:+:_$clength_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.675057692 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cfoldl_closure" {
     Data.Foldable.$fFoldable:+:_$cfoldl_closure:
         const Data.Foldable.$fFoldable:+:_$cfoldl_info;
         const 0;
 },
 f2_s6Pg8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Wf6: // global
           _s6Pga::P64 = R3;
           R3 = R2;
           R2 = _s6Pga::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f2_s6Pg8_info" {
     f2_s6Pg8_info:
         const f2_s6Pg8_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:+:_$cfoldl_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c6Wfg: // global
           _s6Pg7::P64 = R6;
           _s6Pg6::P64 = R5;
           _s6Pg5::P64 = R4;
           _s6Pg4::P64 = R3;
           _s6Pg3::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6Wfh; else goto c6Wfi;
       c6Wfi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Wfk; else goto c6Wfj;
       c6Wfk: // global
           HpAlloc = 16;
           goto c6Wfh;
       c6Wfh: // global
           R6 = _s6Pg7::P64;
           R5 = _s6Pg6::P64;
           R4 = _s6Pg5::P64;
           R3 = _s6Pg4::P64;
           R2 = _s6Pg3::P64;
           R1 = Data.Foldable.$fFoldable:+:_$cfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Wfj: // global
           I64[Hp - 8] = f2_s6Pg8_info;
           P64[Hp] = _s6Pg5::P64;
           I64[Sp - 40] = block_c6Wf9_info;
           R1 = _s6Pg7::P64;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = _s6Pg3::P64;
           P64[Sp - 16] = _s6Pg4::P64;
           P64[Sp - 8] = _s6Pg6::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6Wfr; else goto c6Wfa;
       u6Wfr: // global
           call _c6Wf9(R1) args: 0, res: 0, upd: 0;
       c6Wfa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cfoldl_info" {
     Data.Foldable.$fFoldable:+:_$cfoldl_info:
         const Data.Foldable.$fFoldable:+:_$cfoldl_entry;
         const 0;
         const 281479271677966;
         const 21474836505;
         const S6PH7_srt+640;
 },
 _c6Wf9() //  [R1]
         { []
         }
     {offset
       c6Wf9: // global
           _c6Wf1::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6Wfd; else goto c6Wfe;
       c6Wfd: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp + 16] = _c6Wf1::P64;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
       c6Wfe: // global
           R2 = P64[Sp + 24];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp + 16] = _c6Wf1::P64;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Wf9_info" {
     block_c6Wf9_info:
         const _c6Wf9;
         const 4;
         const 4294967326;
         const S6PH7_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.689935865 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cfoldl1_closure" {
     Data.Foldable.$fFoldable:+:_$cfoldl1_closure:
         const Data.Foldable.$fFoldable:+:_$cfoldl1_info;
         const 0;
 },
 sat_s6Pgo_entry() //  [R1]
         { []
         }
     {offset
       c6Wg8: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Wg9; else goto c6Wga;
       c6Wg9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Wga: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6Wg1_info;
           _s6Pgg::P64 = P64[R1 + 16];
           _s6Pgk::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6Pgg::P64;
           P64[Sp - 24] = _s6Pgk::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6Wgh; else goto c6Wg2;
       u6Wgh: // global
           call _c6Wg1(R1) args: 0, res: 0, upd: 0;
       c6Wg2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pgo_info" {
     sat_s6Pgo_info:
         const sat_s6Pgo_entry;
         const 3;
         const 15;
 },
 _c6Wg1() //  [R1]
         { []
         }
     {offset
       c6Wg1: // global
           _s6Pgk::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6Wg5; else goto c6Wg6;
       c6Wg5: // global
           R1 = _s6Pgk::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c6Wg6: // global
           R3 = _s6Pgk::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Wg1_info" {
     block_c6Wg1_info:
         const _c6Wg1;
         const 2;
         const 30;
 },
 sat_s6Pgp_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Wgj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6Wgn; else goto c6Wgm;
       c6Wgn: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Wgm: // global
           _s6Pgg::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6Pgo_info;
           P64[Hp - 32] = _s6Pgg::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pgp_info" {
     sat_s6Pgp_info:
         const sat_s6Pgp_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Pgx_entry() //  [R1]
         { []
         }
     {offset
       c6WgG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6WgH; else goto c6WgI;
       c6WgH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WgI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6Wgz_info;
           _s6Pgg::P64 = P64[R1 + 16];
           _s6Pgt::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6Pgg::P64;
           P64[Sp - 24] = _s6Pgt::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6WgP; else goto c6WgA;
       u6WgP: // global
           call _c6Wgz(R1) args: 0, res: 0, upd: 0;
       c6WgA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pgx_info" {
     sat_s6Pgx_info:
         const sat_s6Pgx_entry;
         const 3;
         const 15;
 },
 _c6Wgz() //  [R1]
         { []
         }
     {offset
       c6Wgz: // global
           _s6Pgt::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6WgD; else goto c6WgE;
       c6WgD: // global
           R1 = _s6Pgt::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c6WgE: // global
           R3 = _s6Pgt::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Wgz_info" {
     block_c6Wgz_info:
         const _c6Wgz;
         const 2;
         const 30;
 },
 sat_s6Pgy_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6WgR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6WgV; else goto c6WgU;
       c6WgV: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WgU: // global
           _s6Pgg::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6Pgx_info;
           P64[Hp - 32] = _s6Pgg::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pgy_info" {
     sat_s6Pgy_info:
         const sat_s6Pgy_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 section ""relreadonly" . u6WhC_srtd" {
     u6WhC_srtd:
         const S6PH7_srt+456;
         const 41;
         const 1099520016385;
 },
 Data.Foldable.$fFoldable:+:_$cfoldl1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6Wh0: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6Wh1; else goto c6Wh2;
       c6Wh1: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cfoldl1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Wh2: // global
           I64[Sp - 32] = block_c6WfN_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6Whz; else goto c6WfO;
       u6Whz: // global
           call _c6WfN(R1) args: 0, res: 0, upd: 0;
       c6WfO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cfoldl1_info" {
     Data.Foldable.$fFoldable:+:_$cfoldl1_info:
         const Data.Foldable.$fFoldable:+:_$cfoldl1_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u6WhC_srtd;
 },
 _c6WfN() //  [R1]
         { []
         }
     {offset
       c6WfN: // global
           _s6Pgg::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6WgX; else goto c6WgY;
       c6WgX: // global
           Hp = Hp + 16;
           _s6Pgi::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6Whk; else goto c6Wh5;
       c6Wh5: // global
           _s6Pgj::P64 = P64[_s6Pgi::P64 + 7];
           I64[Hp - 8] = sat_s6Pgp_info;
           P64[Hp] = _s6Pgg::P64;
           I64[Sp + 24] = block_c6Wh3_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_pppp_info;
           P64[Sp - 8] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp] = Hp - 6;
           P64[Sp + 8] = _s6Pgj::P64;
           P64[Sp + 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
       c6WgY: // global
           Hp = Hp + 16;
           _s6Pgi::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6Whk; else goto c6Whj;
       c6Whk: // global
           HpAlloc = 16;
           R1 = _s6Pgi::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Whj: // global
           _s6Pgs::P64 = P64[_s6Pgi::P64 + 6];
           I64[Hp - 8] = sat_s6Pgy_info;
           P64[Hp] = _s6Pgg::P64;
           I64[Sp + 24] = block_c6Whh_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pppp_info;
           P64[Sp - 8] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp] = Hp - 6;
           P64[Sp + 8] = _s6Pgs::P64;
           P64[Sp + 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WfN_info" {
     block_c6WfN_info:
         const _c6WfN;
         const 3;
         const 36028801313931294;
         const S6PH7_srt+456;
 },
 _c6Wh3() //  [R1]
         { []
         }
     {offset
       c6Wh3: // global
           if (R1 & 7 == 1) goto u6Why; else goto c6Whg;
       u6Why: // global
           Sp = Sp + 8;
           call _c6Whq() args: 0, res: 0, upd: 0;
       c6Whg: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Wh3_info" {
     block_c6Wh3_info:
         const _c6Wh3;
         const 0;
         const 4294967326;
         const S6PH7_srt+784;
 },
 _c6Whh() //  [R1]
         { []
         }
     {offset
       c6Whh: // global
           if (R1 & 7 == 1) goto u6Whx; else goto c6Whu;
       u6Whx: // global
           Sp = Sp + 8;
           call _c6Whq() args: 0, res: 0, upd: 0;
       c6Whu: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Whh_info" {
     block_c6Whh_info:
         const _c6Whh;
         const 0;
         const 4294967326;
         const S6PH7_srt+784;
 },
 _c6Whq() //  []
         { []
         }
     {offset
       c6Whq: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.717796076 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cfoldr'_closure" {
     Data.Foldable.$fFoldable:+:_$cfoldr'_closure:
         const Data.Foldable.$fFoldable:+:_$cfoldr'_info;
         const 0;
 },
 sat_s6PgM_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6WiN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WiO; else goto c6WiP;
       c6WiO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WiP: // global
           I64[Sp - 16] = block_c6WiL_info;
           _s6PgJ::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6PgJ::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PgM_info" {
     sat_s6PgM_info:
         const sat_s6PgM_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c6WiL() //  [R1]
         { []
         }
     {offset
       c6WiL: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WiL_info" {
     block_c6WiL_info:
         const _c6WiL;
         const 1;
         const 30;
 },
 sat_s6PgS_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6Wj0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Wj1; else goto c6Wj2;
       c6Wj1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Wj2: // global
           I64[Sp - 16] = block_c6WiY_info;
           _s6PgP::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6PgP::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PgS_info" {
     sat_s6PgS_info:
         const sat_s6PgS_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c6WiY() //  [R1]
         { []
         }
     {offset
       c6WiY: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WiY_info" {
     block_c6WiY_info:
         const _c6WiY;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldable:+:_$cfoldr'_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c6Wj8: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6Wj9; else goto c6Wja;
       c6Wj9: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cfoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Wja: // global
           I64[Sp - 40] = block_c6WiB_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6Wjh; else goto c6WiC;
       u6Wjh: // global
           call _c6WiB(R1) args: 0, res: 0, upd: 0;
       c6WiC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cfoldr'_info" {
     Data.Foldable.$fFoldable:+:_$cfoldr'_info:
         const Data.Foldable.$fFoldable:+:_$cfoldr'_entry;
         const 0;
         const 2251804108652558;
         const 21474836505;
         const S6PH7_srt+640;
 },
 _c6WiB() //  [R1]
         { []
         }
     {offset
       c6WiB: // global
           _s6PgD::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6Wj5; else goto c6Wj6;
       c6Wj5: // global
           Hp = Hp + 16;
           _s6PgG::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6Wjg; else goto c6Wjc;
       c6Wjc: // global
           _s6PgH::P64 = P64[_s6PgG::P64 + 7];
           I64[Hp - 8] = sat_s6PgM_info;
           P64[Hp] = _s6PgD::P64;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppppp_info;
           P64[Sp] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp + 8] = Hp - 5;
           P64[Sp + 16] = _s6PgH::P64;
           P64[Sp + 24] = GHC.Base.id_closure+1;
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
       c6Wj6: // global
           Hp = Hp + 16;
           _s6PgG::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c6Wjg; else goto c6Wjf;
       c6Wjg: // global
           HpAlloc = 16;
           R1 = _s6PgG::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Wjf: // global
           _s6PgN::P64 = P64[_s6PgG::P64 + 6];
           I64[Hp - 8] = sat_s6PgS_info;
           P64[Hp] = _s6PgD::P64;
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_ppppp_info;
           P64[Sp] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp + 8] = Hp - 5;
           P64[Sp + 16] = _s6PgN::P64;
           P64[Sp + 24] = GHC.Base.id_closure+1;
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WiB_info" {
     block_c6WiB_info:
         const _c6WiB;
         const 4;
         const 4294967326;
         const S6PH7_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.73238231 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cfold_closure" {
     Data.Foldable.$fFoldable:+:_$cfold_closure:
         const Data.Foldable.$fFoldable:+:_$cfold_info;
 },
 Data.Foldable.$fFoldable:+:_$cfold_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6WjU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6WjV; else goto c6WjW;
       c6WjV: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cfold_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WjW: // global
           I64[Sp - 32] = block_c6WjN_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6Wk3; else goto c6WjO;
       u6Wk3: // global
           call _c6WjN(R1) args: 0, res: 0, upd: 0;
       c6WjO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cfold_info" {
     Data.Foldable.$fFoldable:+:_$cfold_info:
         const Data.Foldable.$fFoldable:+:_$cfold_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c6WjN() //  [R1]
         { []
         }
     {offset
       c6WjN: // global
           _s6PgV::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6WjR; else goto c6WjS;
       c6WjR: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _s6PgV::P64;
           P64[Sp + 16] = GHC.Base.id_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       c6WjS: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _s6PgV::P64;
           P64[Sp + 16] = GHC.Base.id_closure+1;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WjN_info" {
     block_c6WjN_info:
         const _c6WjN;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.742193683 UTC

[section ""data" . Data.Foldable.$fFoldable:+:1_closure" {
     Data.Foldable.$fFoldable:+:1_closure:
         const Data.Foldable.$fFoldable:+:1_info;
         const 0;
 },
 $dMonoid_s6Ph3_entry() //  [R1]
         { []
         }
     {offset
       c6Wkp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Wkq; else goto c6Wkr;
       c6Wkq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Wkr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6Ph3_info" {
     $dMonoid_s6Ph3_info:
         const $dMonoid_s6Ph3_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+696;
 },
 sat_s6Ph8_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WkE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6WkF; else goto c6WkG;
       c6WkF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WkG: // global
           I64[Sp - 32] = block_c6Wkx_info;
           _s6Ph0::P64 = P64[R1 + 7];
           _s6Ph1::P64 = P64[R1 + 15];
           _s6Ph3::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s6Ph0::P64;
           P64[Sp - 16] = _s6Ph1::P64;
           P64[Sp - 8] = _s6Ph3::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6WkN; else goto c6Wky;
       u6WkN: // global
           call _c6Wkx(R1) args: 0, res: 0, upd: 0;
       c6Wky: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Ph8_info" {
     sat_s6Ph8_info:
         const sat_s6Ph8_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c6Wkx() //  [R1]
         { []
         }
     {offset
       c6Wkx: // global
           _s6Ph3::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6WkB; else goto c6WkC;
       c6WkB: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _s6Ph3::P64;
           P64[Sp + 16] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       c6WkC: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _s6Ph3::P64;
           P64[Sp + 16] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Wkx_info" {
     block_c6Wkx_info:
         const _c6Wkx;
         const 3;
         const 30;
 },
 Data.Foldable.$fFoldable:+:1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6WkO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6WkS; else goto c6WkR;
       c6WkS: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WkR: // global
           I64[Hp - 48] = $dMonoid_s6Ph3_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s6Ph8_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:1_info" {
     Data.Foldable.$fFoldable:+:1_info:
         const Data.Foldable.$fFoldable:+:1_entry;
         const 0;
         const 35188667056142;
         const 12884901911;
         const S6PH7_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.753190985 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$ctoList_closure" {
     Data.Foldable.$fFoldable:+:_$ctoList_closure:
         const Data.Foldable.$fFoldable:+:_$ctoList_info;
 },
 Data.Foldable.$fFoldable:+:_$ctoList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Wlq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Wlr; else goto c6Wls;
       c6Wlr: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$ctoList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Wls: // global
           I64[Sp - 24] = block_c6Wlj_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6Wlz; else goto c6Wlk;
       u6Wlz: // global
           call _c6Wlj(R1) args: 0, res: 0, upd: 0;
       c6Wlk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$ctoList_info" {
     Data.Foldable.$fFoldable:+:_$ctoList_info:
         const Data.Foldable.$fFoldable:+:_$ctoList_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Wlj() //  [R1]
         { []
         }
     {offset
       c6Wlj: // global
           if (R1 & 7 == 1) goto c6Wln; else goto c6Wlo;
       c6Wln: // global
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = GHC.Types.:_closure+2;
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 8;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
       c6Wlo: // global
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = GHC.Types.:_closure+2;
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           P64[Sp + 16] = P64[R1 + 6];
           Sp = Sp - 8;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Wlj_info" {
     block_c6Wlj_info:
         const _c6Wlj;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.764702971 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_closure" {
     Data.Foldable.$fFoldable:+:_closure:
         const Data.Foldable.$fFoldable:+:_info;
         const 0;
 },
 sat_s6Phw_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WlW: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:+:1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Phw_info" {
     sat_s6Phw_info:
         const sat_s6Phw_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+800;
 },
 sat_s6Phv_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Wm4: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:+:2_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Phv_info" {
     sat_s6Phv_info:
         const sat_s6Phv_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+728;
 },
 sat_s6Phu_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Wmc: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:+:_$cminimum_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Phu_info" {
     sat_s6Phu_info:
         const sat_s6Phu_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+736;
 },
 sat_s6Pht_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Wmk: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:+:_$cmaximum_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pht_info" {
     sat_s6Pht_info:
         const sat_s6Pht_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+744;
 },
 sat_s6Phs_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Wms: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:+:_$celem_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Phs_info" {
     sat_s6Phs_info:
         const sat_s6Phs_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6PH7_srt+720;
 },
 sat_s6Phr_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WmA: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:+:_$clength_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Phr_info" {
     sat_s6Phr_info:
         const sat_s6Phr_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6Phq_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WmI: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:+:_$cnull_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Phq_info" {
     sat_s6Phq_info:
         const sat_s6Phq_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6Php_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WmQ: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:+:_$ctoList_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Php_info" {
     sat_s6Php_info:
         const sat_s6Php_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6Pho_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6WmY: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:+:_$cfoldl1_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pho_info" {
     sat_s6Pho_info:
         const sat_s6Pho_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6PH7_srt+776;
 },
 sat_s6Phn_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Wn6: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:+:_$cfoldr1_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Phn_info" {
     sat_s6Phn_info:
         const sat_s6Phn_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6PH7_srt+752;
 },
 sat_s6Phm_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6Wne: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:+:_$cfoldl'_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Phm_info" {
     sat_s6Phm_info:
         const sat_s6Phm_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6Phl_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6Wnm: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:+:_$cfoldl_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Phl_info" {
     sat_s6Phl_info:
         const sat_s6Phl_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const S6PH7_srt+768;
 },
 sat_s6Phk_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6Wnu: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:+:_$cfoldr'_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Phk_info" {
     sat_s6Phk_info:
         const sat_s6Phk_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const S6PH7_srt+792;
 },
 sat_s6Phj_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6WnC: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:+:_$cfoldr_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Phj_info" {
     sat_s6Phj_info:
         const sat_s6Phj_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6Phi_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6WnK: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:+:_$cfoldMap_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Phi_info" {
     sat_s6Phi_info:
         const sat_s6Phi_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6Phh_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6WnS: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:+:_$cfold_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Phh_info" {
     sat_s6Phh_info:
         const sat_s6Phh_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:+:_entry() //  [R2, R3]
         { []
         }
     {offset
       c6WnW: // global
           Hp = Hp + 520;
           if (Hp > HpLim) (likely: False) goto c6Wo0; else goto c6WnZ;
       c6Wo0: // global
           HpAlloc = 520;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WnZ: // global
           I64[Hp - 512] = sat_s6Phw_info;
           P64[Hp - 504] = R2;
           P64[Hp - 496] = R3;
           I64[Hp - 488] = sat_s6Phv_info;
           P64[Hp - 480] = R2;
           P64[Hp - 472] = R3;
           I64[Hp - 464] = sat_s6Phu_info;
           P64[Hp - 456] = R2;
           P64[Hp - 448] = R3;
           I64[Hp - 440] = sat_s6Pht_info;
           P64[Hp - 432] = R2;
           P64[Hp - 424] = R3;
           I64[Hp - 416] = sat_s6Phs_info;
           P64[Hp - 408] = R2;
           P64[Hp - 400] = R3;
           I64[Hp - 392] = sat_s6Phr_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           I64[Hp - 368] = sat_s6Phq_info;
           P64[Hp - 360] = R2;
           P64[Hp - 352] = R3;
           I64[Hp - 344] = sat_s6Php_info;
           P64[Hp - 336] = R2;
           P64[Hp - 328] = R3;
           I64[Hp - 320] = sat_s6Pho_info;
           P64[Hp - 312] = R2;
           P64[Hp - 304] = R3;
           I64[Hp - 296] = sat_s6Phn_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           I64[Hp - 272] = sat_s6Phm_info;
           P64[Hp - 264] = R2;
           P64[Hp - 256] = R3;
           I64[Hp - 248] = sat_s6Phl_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           I64[Hp - 224] = sat_s6Phk_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           I64[Hp - 200] = sat_s6Phj_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_s6Phi_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_s6Phh_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = Hp - 150;
           P64[Hp - 112] = Hp - 173;
           P64[Hp - 104] = Hp - 197;
           P64[Hp - 96] = Hp - 221;
           P64[Hp - 88] = Hp - 245;
           P64[Hp - 80] = Hp - 269;
           P64[Hp - 72] = Hp - 294;
           P64[Hp - 64] = Hp - 318;
           P64[Hp - 56] = Hp - 343;
           P64[Hp - 48] = Hp - 367;
           P64[Hp - 40] = Hp - 391;
           P64[Hp - 32] = Hp - 414;
           P64[Hp - 24] = Hp - 439;
           P64[Hp - 16] = Hp - 463;
           P64[Hp - 8] = Hp - 487;
           P64[Hp] = Hp - 511;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_info" {
     Data.Foldable.$fFoldable:+:_info:
         const Data.Foldable.$fFoldable:+:_entry;
         const 0;
         const 16350940495886;
         const 8589934607;
         const S6PH7_srt+720;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.795288605 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$celem_closure" {
     Data.Foldable.$fFoldableM1_$celem_closure:
         const Data.Foldable.$fFoldableM1_$celem_info;
         const 0;
 },
 f1_s6PhA_entry() //  [R1]
         { []
         }
     {offset
       c6Wpg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Wph; else goto c6Wpi;
       c6Wph: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Wpi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s6PhA_info" {
     f1_s6PhA_info:
         const f1_s6PhA_entry;
         const 2;
         const 18;
 },
 sat_s6PhC_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Wpo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Wpp; else goto c6Wpq;
       c6Wpp: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Wpq: // global
           _s6PhB::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = _s6PhB::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PhC_info" {
     sat_s6PhC_info:
         const sat_s6PhC_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+816;
 },
 Data.Foldable.$fFoldableM1_$celem_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Wpr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6Wpv; else goto c6Wpu;
       c6Wpv: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_$celem_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Wpu: // global
           I64[Hp - 48] = f1_s6PhA_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s6PhC_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$celem_info" {
     Data.Foldable.$fFoldableM1_$celem_info:
         const Data.Foldable.$fFoldableM1_$celem_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6PH7_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.804083148 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$csum_closure" {
     Data.Foldable.$fFoldableM1_$csum_closure:
         const Data.Foldable.$fFoldableM1_$csum_info;
         const 0;
 },
 $dMonoid_s6PhF_entry() //  [R1]
         { []
         }
     {offset
       c6WpU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WpV; else goto c6WpW;
       c6WpV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WpW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6PhF_info" {
     $dMonoid_s6PhF_info:
         const $dMonoid_s6PhF_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+832;
 },
 sat_s6PhH_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Wq2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Wq3; else goto c6Wq4;
       c6Wq3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Wq4: // global
           _s6PhG::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp - 8] = _s6PhG::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PhH_info" {
     sat_s6PhH_info:
         const sat_s6PhH_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Foldable.$fFoldableM1_$csum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Wq5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6Wq9; else goto c6Wq8;
       c6Wq9: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_$csum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Wq8: // global
           I64[Hp - 40] = $dMonoid_s6PhF_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s6PhH_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$csum_info" {
     Data.Foldable.$fFoldableM1_$csum_info:
         const Data.Foldable.$fFoldableM1_$csum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+832;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.812211857 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cminimum_closure" {
     Data.Foldable.$fFoldableM1_$cminimum_closure:
         const Data.Foldable.$fFoldableM1_$cminimum_info;
         const 0;
 },
 $dMonoid_s6PhK_entry() //  [R1]
         { []
         }
     {offset
       c6Wqx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Wqy; else goto c6Wqz;
       c6Wqy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Wqz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6PhK_info" {
     $dMonoid_s6PhK_info:
         const $dMonoid_s6PhK_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+848;
 },
 sat_s6PhO_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WqL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6WqM; else goto c6WqN;
       c6WqM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WqN: // global
           I64[Sp - 8] = block_c6WqF_info;
           _s6PhL::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           P64[Sp - 16] = _s6PhL::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PhO_info" {
     sat_s6PhO_info:
         const sat_s6PhO_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+856;
 },
 _c6WqF() //  [R1]
         { []
         }
     {offset
       c6WqF: // global
           if (R1 & 7 == 1) goto c6WqI; else goto c6WqJ;
       c6WqI: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6WqJ: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WqF_info" {
     block_c6WqF_info:
         const _c6WqF;
         const 0;
         const 4294967326;
         const S6PH7_srt+856;
 },
 Data.Foldable.$fFoldableM1_$cminimum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6WqU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6WqY; else goto c6WqX;
       c6WqY: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_$cminimum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WqX: // global
           I64[Hp - 40] = $dMonoid_s6PhK_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s6PhO_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cminimum_info" {
     Data.Foldable.$fFoldableM1_$cminimum_info:
         const Data.Foldable.$fFoldableM1_$cminimum_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S6PH7_srt+848;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.822751743 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cmaximum_closure" {
     Data.Foldable.$fFoldableM1_$cmaximum_closure:
         const Data.Foldable.$fFoldableM1_$cmaximum_info;
         const 0;
 },
 $dMonoid_s6PhR_entry() //  [R1]
         { []
         }
     {offset
       c6Wrr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Wrs; else goto c6Wrt;
       c6Wrs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Wrt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6PhR_info" {
     $dMonoid_s6PhR_info:
         const $dMonoid_s6PhR_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+872;
 },
 sat_s6PhV_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WrF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6WrG; else goto c6WrH;
       c6WrG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WrH: // global
           I64[Sp - 8] = block_c6Wrz_info;
           _s6PhS::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           P64[Sp - 16] = _s6PhS::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PhV_info" {
     sat_s6PhV_info:
         const sat_s6PhV_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+880;
 },
 _c6Wrz() //  [R1]
         { []
         }
     {offset
       c6Wrz: // global
           if (R1 & 7 == 1) goto c6WrC; else goto c6WrD;
       c6WrC: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6WrD: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Wrz_info" {
     block_c6Wrz_info:
         const _c6Wrz;
         const 0;
         const 4294967326;
         const S6PH7_srt+880;
 },
 Data.Foldable.$fFoldableM1_$cmaximum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6WrO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6WrS; else goto c6WrR;
       c6WrS: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_$cmaximum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WrR: // global
           I64[Hp - 40] = $dMonoid_s6PhR_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s6PhV_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cmaximum_info" {
     Data.Foldable.$fFoldableM1_$cmaximum_info:
         const Data.Foldable.$fFoldableM1_$cmaximum_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S6PH7_srt+872;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.834222399 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cfoldr1_closure" {
     Data.Foldable.$fFoldableM1_$cfoldr1_closure:
         const Data.Foldable.$fFoldableM1_$cfoldr1_info;
         const 0;
 },
 sat_s6Pi3_entry() //  [R1]
         { []
         }
     {offset
       c6Wsx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Wsy; else goto c6Wsz;
       c6Wsy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Wsz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6Wsq_info;
           _s6PhX::P64 = P64[R1 + 16];
           _s6PhZ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6PhX::P64;
           P64[Sp - 24] = _s6PhZ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6WsG; else goto c6Wsr;
       u6WsG: // global
           call _c6Wsq(R1) args: 0, res: 0, upd: 0;
       c6Wsr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pi3_info" {
     sat_s6Pi3_info:
         const sat_s6Pi3_entry;
         const 3;
         const 15;
 },
 _c6Wsq() //  [R1]
         { []
         }
     {offset
       c6Wsq: // global
           _s6PhZ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6Wsu; else goto c6Wsv;
       c6Wsu: // global
           R1 = _s6PhZ::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c6Wsv: // global
           R3 = P64[R1 + 6];
           R2 = _s6PhZ::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Wsq_info" {
     block_c6Wsq_info:
         const _c6Wsq;
         const 2;
         const 30;
 },
 sat_s6Pi4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6WsI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6WsM; else goto c6WsL;
       c6WsM: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WsL: // global
           _s6PhX::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6Pi3_info;
           P64[Hp - 32] = _s6PhX::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pi4_info" {
     sat_s6Pi4_info:
         const sat_s6Pi4_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldableM1_$cfoldr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6WsT: // global
           _s6PhY::P64 = R4;
           _s6PhX::P64 = R3;
           _s6PhW::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6WsU; else goto c6WsV;
       c6WsV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6WsX; else goto c6WsW;
       c6WsX: // global
           HpAlloc = 16;
           goto c6WsU;
       c6WsU: // global
           R4 = _s6PhY::P64;
           R3 = _s6PhX::P64;
           R2 = _s6PhW::P64;
           R1 = Data.Foldable.$fFoldableM1_$cfoldr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WsW: // global
           I64[Hp - 8] = sat_s6Pi4_info;
           P64[Hp] = _s6PhX::P64;
           I64[Sp - 8] = block_c6WsN_info;
           R2 = _s6PhW::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _s6PhY::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cfoldr1_info" {
     Data.Foldable.$fFoldableM1_$cfoldr1_info:
         const Data.Foldable.$fFoldableM1_$cfoldr1_entry;
         const 0;
         const 562954248388622;
         const 12884901911;
         const S6PH7_srt+760;
 },
 _c6WsN() //  [R1]
         { []
         }
     {offset
       c6WsN: // global
           if (R1 & 7 == 1) goto c6WsQ; else goto c6WsR;
       c6WsQ: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6WsR: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WsN_info" {
     block_c6WsN_info:
         const _c6WsN;
         const 0;
         const 4294967326;
         const S6PH7_srt+760;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.846114571 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cfoldl'_closure" {
     Data.Foldable.$fFoldableM1_$cfoldl'_closure:
         const Data.Foldable.$fFoldableM1_$cfoldl'_info;
 },
 sat_s6Pif_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6WtF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WtG; else goto c6WtH;
       c6WtG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WtH: // global
           I64[Sp - 16] = block_c6WtD_info;
           _s6Pic::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6Pic::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pif_info" {
     sat_s6Pif_info:
         const sat_s6Pif_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c6WtD() //  [R1]
         { []
         }
     {offset
       c6WtD: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WtD_info" {
     block_c6WtD_info:
         const _c6WtD;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableM1_$cfoldl'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6WtJ: // global
           _s6Pia::P64 = R5;
           _s6Pi9::P64 = R4;
           _s6Pi8::P64 = R3;
           _s6Pi7::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6WtK; else goto c6WtL;
       c6WtL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6WtN; else goto c6WtM;
       c6WtN: // global
           HpAlloc = 16;
           goto c6WtK;
       c6WtK: // global
           R5 = _s6Pia::P64;
           R4 = _s6Pi9::P64;
           R3 = _s6Pi8::P64;
           R2 = _s6Pi7::P64;
           R1 = Data.Foldable.$fFoldableM1_$cfoldl'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WtM: // global
           I64[Hp - 8] = sat_s6Pif_info;
           P64[Hp] = _s6Pi8::P64;
           R2 = _s6Pi7::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 5;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = _s6Pia::P64;
           P64[Sp - 8] = _s6Pi9::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cfoldl'_info" {
     Data.Foldable.$fFoldableM1_$cfoldl'_info:
         const Data.Foldable.$fFoldableM1_$cfoldl'_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.854135237 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$clength_closure" {
     Data.Foldable.$fFoldableM1_$clength_closure:
         const Data.Foldable.$fFoldableM1_$clength_info;
 },
 Data.Foldable.$fFoldableM1_$clength_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Wu5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Wu6; else goto c6Wu7;
       c6Wu6: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_$clength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Wu7: // global
           R2 = R2;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldableM2_closure+3;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$clength_info" {
     Data.Foldable.$fFoldableM1_$clength_info:
         const Data.Foldable.$fFoldableM1_$clength_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.858424617 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cfoldl_closure" {
     Data.Foldable.$fFoldableM1_$cfoldl_closure:
         const Data.Foldable.$fFoldableM1_$cfoldl_info;
         const 0;
 },
 sat_s6Pio_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Wum: // global
           _s6Pin::P64 = R3;
           R3 = R2;
           R2 = _s6Pin::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pio_info" {
     sat_s6Pio_info:
         const sat_s6Pio_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldableM1_$cfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6Wup: // global
           _s6Pil::P64 = R5;
           _s6Pik::P64 = R4;
           _s6Pij::P64 = R3;
           _s6Pii::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6Wuq; else goto c6Wur;
       c6Wur: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Wut; else goto c6Wus;
       c6Wut: // global
           HpAlloc = 16;
           goto c6Wuq;
       c6Wuq: // global
           R5 = _s6Pil::P64;
           R4 = _s6Pik::P64;
           R3 = _s6Pij::P64;
           R2 = _s6Pii::P64;
           R1 = Data.Foldable.$fFoldableM1_$cfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Wus: // global
           I64[Hp - 8] = sat_s6Pio_info;
           P64[Hp] = _s6Pij::P64;
           R2 = _s6Pii::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = _s6Pil::P64;
           P64[Sp - 8] = _s6Pik::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cfoldl_info" {
     Data.Foldable.$fFoldableM1_$cfoldl_info:
         const Data.Foldable.$fFoldableM1_$cfoldl_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S6PH7_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.864456805 UTC

[section ""data" . Data.Foldable.$fFoldableM3_closure" {
     Data.Foldable.$fFoldableM3_closure:
         const Data.Foldable.$fFoldableM3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableM3_entry() //  [R1]
         { []
         }
     {offset
       c6WuJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WuK; else goto c6WuL;
       c6WuK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WuL: // global
           (_c6WuG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6WuG::I64 == 0) goto c6WuI; else goto c6WuH;
       c6WuI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6WuH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6WuG::I64;
           R2 = Data.Semigroup.Internal.$fMonoidEndo_closure;
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidDual_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM3_info" {
     Data.Foldable.$fFoldableM3_info:
         const Data.Foldable.$fFoldableM3_entry;
         const 0;
         const 4294967317;
         const S6PH7_srt+920;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.873682413 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cfoldl1_closure" {
     Data.Foldable.$fFoldableM1_$cfoldl1_closure:
         const Data.Foldable.$fFoldableM1_$cfoldl1_info;
         const 0;
 },
 sat_s6Piw_entry() //  [R1]
         { []
         }
     {offset
       c6Wvd: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Wve; else goto c6Wvf;
       c6Wve: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Wvf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6Wv6_info;
           _s6Piq::P64 = P64[R1 + 16];
           _s6Pis::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6Piq::P64;
           P64[Sp - 24] = _s6Pis::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6Wvm; else goto c6Wv7;
       u6Wvm: // global
           call _c6Wv6(R1) args: 0, res: 0, upd: 0;
       c6Wv7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Piw_info" {
     sat_s6Piw_info:
         const sat_s6Piw_entry;
         const 3;
         const 15;
 },
 _c6Wv6() //  [R1]
         { []
         }
     {offset
       c6Wv6: // global
           _s6Pis::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6Wva; else goto c6Wvb;
       c6Wva: // global
           R1 = _s6Pis::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c6Wvb: // global
           R3 = _s6Pis::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Wv6_info" {
     block_c6Wv6_info:
         const _c6Wv6;
         const 2;
         const 30;
 },
 sat_s6Pix_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Wvo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6Wvs; else goto c6Wvr;
       c6Wvs: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Wvr: // global
           _s6Piq::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6Piw_info;
           P64[Hp - 32] = _s6Piq::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pix_info" {
     sat_s6Pix_info:
         const sat_s6Pix_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldableM1_$cfoldl1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Wvz: // global
           _s6Pir::P64 = R4;
           _s6Piq::P64 = R3;
           _s6Pip::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c6WvA; else goto c6WvB;
       c6WvB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6WvD; else goto c6WvC;
       c6WvD: // global
           HpAlloc = 16;
           goto c6WvA;
       c6WvA: // global
           R4 = _s6Pir::P64;
           R3 = _s6Piq::P64;
           R2 = _s6Pip::P64;
           R1 = Data.Foldable.$fFoldableM1_$cfoldl1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WvC: // global
           I64[Hp - 8] = sat_s6Pix_info;
           P64[Hp] = _s6Piq::P64;
           I64[Sp - 8] = block_c6Wvt_info;
           R2 = _s6Pip::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           P64[Sp - 40] = Data.Foldable.$fFoldableM3_closure;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = _s6Pir::P64;
           P64[Sp - 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cfoldl1_info" {
     Data.Foldable.$fFoldableM1_$cfoldl1_info:
         const Data.Foldable.$fFoldableM1_$cfoldl1_entry;
         const 0;
         const 3377704015495182;
         const 12884901911;
         const S6PH7_srt+784;
 },
 _c6Wvt() //  [R1]
         { []
         }
     {offset
       c6Wvt: // global
           if (R1 & 7 == 1) goto c6Wvw; else goto c6Wvx;
       c6Wvw: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Wvx: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Wvt_info" {
     block_c6Wvt_info:
         const _c6Wvt;
         const 0;
         const 4294967326;
         const S6PH7_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.889577015 UTC

[section ""data" . Data.Foldable.$fFoldableM4_closure" {
     Data.Foldable.$fFoldableM4_closure:
         const Data.Foldable.$fFoldableM4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableM4_entry() //  [R1]
         { []
         }
     {offset
       c6Wwg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Wwh; else goto c6Wwi;
       c6Wwh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Wwi: // global
           (_c6Wwd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6Wwd::I64 == 0) goto c6Wwf; else goto c6Wwe;
       c6Wwf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6Wwe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6Wwd::I64;
           R2 = Data.Semigroup.Internal.$fMonoidEndo_closure;
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidDual_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM4_info" {
     Data.Foldable.$fFoldableM4_info:
         const Data.Foldable.$fFoldableM4_entry;
         const 0;
         const 4294967317;
         const S6PH7_srt+920;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.895943725 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cfoldr'_closure" {
     Data.Foldable.$fFoldableM1_$cfoldr'_closure:
         const Data.Foldable.$fFoldableM1_$cfoldr'_info;
         const 0;
 },
 sat_s6PiI_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6WwB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WwC; else goto c6WwD;
       c6WwC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WwD: // global
           I64[Sp - 16] = block_c6Wwz_info;
           _s6PiF::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6PiF::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PiI_info" {
     sat_s6PiI_info:
         const sat_s6PiI_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c6Wwz() //  [R1]
         { []
         }
     {offset
       c6Wwz: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Wwz_info" {
     block_c6Wwz_info:
         const _c6Wwz;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableM1_$cfoldr'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6WwF: // global
           _s6PiD::P64 = R5;
           _s6PiC::P64 = R4;
           _s6PiB::P64 = R3;
           _s6PiA::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c6WwG; else goto c6WwH;
       c6WwH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6WwJ; else goto c6WwI;
       c6WwJ: // global
           HpAlloc = 16;
           goto c6WwG;
       c6WwG: // global
           R5 = _s6PiD::P64;
           R4 = _s6PiC::P64;
           R3 = _s6PiB::P64;
           R2 = _s6PiA::P64;
           R1 = Data.Foldable.$fFoldableM1_$cfoldr'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WwI: // global
           I64[Hp - 8] = sat_s6PiI_info;
           P64[Hp] = _s6PiB::P64;
           R2 = _s6PiA::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Foldable.$fFoldableM4_closure;
           P64[Sp - 32] = Hp - 5;
           P64[Sp - 24] = _s6PiD::P64;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = _s6PiC::P64;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cfoldr'_info" {
     Data.Foldable.$fFoldableM1_$cfoldr'_info:
         const Data.Foldable.$fFoldableM1_$cfoldr'_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S6PH7_srt+944;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.903468506 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cfold_closure" {
     Data.Foldable.$fFoldableM1_$cfold_closure:
         const Data.Foldable.$fFoldableM1_$cfold_info;
 },
 Data.Foldable.$fFoldableM1_$cfold_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Wx1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Wx2; else goto c6Wx3;
       c6Wx2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_$cfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Wx3: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cfold_info" {
     Data.Foldable.$fFoldableM1_$cfold_info:
         const Data.Foldable.$fFoldableM1_$cfold_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.908387287 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cproduct_closure" {
     Data.Foldable.$fFoldableM1_$cproduct_closure:
         const Data.Foldable.$fFoldableM1_$cproduct_info;
         const 0;
 },
 $dMonoid_s6PiO_entry() //  [R1]
         { []
         }
     {offset
       c6Wxh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Wxi; else goto c6Wxj;
       c6Wxi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Wxj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6PiO_info" {
     $dMonoid_s6PiO_info:
         const $dMonoid_s6PiO_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+960;
 },
 sat_s6PiQ_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Wxp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Wxq; else goto c6Wxr;
       c6Wxq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Wxr: // global
           _s6PiP::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp - 8] = _s6PiP::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PiQ_info" {
     sat_s6PiQ_info:
         const sat_s6PiQ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Foldable.$fFoldableM1_$cproduct_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Wxs: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6Wxw; else goto c6Wxv;
       c6Wxw: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_$cproduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Wxv: // global
           I64[Hp - 40] = $dMonoid_s6PiO_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s6PiQ_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cproduct_info" {
     Data.Foldable.$fFoldableM1_$cproduct_info:
         const Data.Foldable.$fFoldableM1_$cproduct_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.916511319 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$ctoList_closure" {
     Data.Foldable.$fFoldableM1_$ctoList_closure:
         const Data.Foldable.$fFoldableM1_$ctoList_info;
 },
 Data.Foldable.$fFoldableM1_$ctoList_entry() //  [R2, R3]
         { []
         }
     {offset
       c6WxQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6WxR; else goto c6WxS;
       c6WxR: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_$ctoList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WxS: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$ctoList_info" {
     Data.Foldable.$fFoldableM1_$ctoList_info:
         const Data.Foldable.$fFoldableM1_$ctoList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.9258572 UTC

[section ""data" . Data.Foldable.$fFoldableM1_closure" {
     Data.Foldable.$fFoldableM1_closure:
         const Data.Foldable.$fFoldableM1_info;
         const 0;
 },
 sat_s6Pjg_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Wy7: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableM1_$cproduct_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pjg_info" {
     sat_s6Pjg_info:
         const sat_s6Pjg_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6PH7_srt+968;
 },
 sat_s6Pjf_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Wyf: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableM1_$csum_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pjf_info" {
     sat_s6Pjf_info:
         const sat_s6Pjf_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6PH7_srt+840;
 },
 sat_s6Pje_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Wyn: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableM1_$cminimum_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pje_info" {
     sat_s6Pje_info:
         const sat_s6Pje_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6PH7_srt+864;
 },
 sat_s6Pjd_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Wyv: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableM1_$cmaximum_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pjd_info" {
     sat_s6Pjd_info:
         const sat_s6Pjd_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6PH7_srt+888;
 },
 sat_s6Pjc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6WyD: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldableM1_$celem_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pjc_info" {
     sat_s6Pjc_info:
         const sat_s6Pjc_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6PH7_srt+824;
 },
 sat_s6Pjb_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WyL: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableM1_$clength_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pjb_info" {
     sat_s6Pjb_info:
         const sat_s6Pjb_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6Pja_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WyT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WyU; else goto c6WyV;
       c6WyU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WyV: // global
           _s6Pj9::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s6Pj9::P64;
           Sp = Sp - 16;
           call Data.Foldable.null_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pja_info" {
     sat_s6Pja_info:
         const sat_s6Pja_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6Pj8_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Wz1: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableM1_$ctoList_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pj8_info" {
     sat_s6Pj8_info:
         const sat_s6Pj8_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6Pj7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Wz9: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldableM1_$cfoldl1_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pj7_info" {
     sat_s6Pj7_info:
         const sat_s6Pj7_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6PH7_srt+928;
 },
 sat_s6Pj6_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Wzh: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldableM1_$cfoldr1_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pj6_info" {
     sat_s6Pj6_info:
         const sat_s6Pj6_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6PH7_srt+896;
 },
 sat_s6Pj5_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6Wzp: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldableM1_$cfoldl'_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pj5_info" {
     sat_s6Pj5_info:
         const sat_s6Pj5_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s6Pj4_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6Wzx: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldableM1_$cfoldl_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pj4_info" {
     sat_s6Pj4_info:
         const sat_s6Pj4_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const S6PH7_srt+904;
 },
 sat_s6Pj3_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6WzF: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldableM1_$cfoldr'_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pj3_info" {
     sat_s6Pj3_info:
         const sat_s6Pj3_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const S6PH7_srt+944;
 },
 sat_s6Pj2_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6WzN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6WzO; else goto c6WzP;
       c6WzO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WzP: // global
           _s6PiZ::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _s6PiZ::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pj2_info" {
     sat_s6Pj2_info:
         const sat_s6Pj2_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s6PiY_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6WzV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6WzW; else goto c6WzX;
       c6WzW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WzX: // global
           _s6PiV::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _s6PiV::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PiY_info" {
     sat_s6PiY_info:
         const sat_s6PiY_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s6PiU_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6WA3: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldableM1_$cfold_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PiU_info" {
     sat_s6PiU_info:
         const sat_s6PiU_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldableM1_entry() //  [R2]
         { []
         }
     {offset
       c6WA7: // global
           Hp = Hp + 392;
           if (Hp > HpLim) (likely: False) goto c6WAb; else goto c6WAa;
       c6WAb: // global
           HpAlloc = 392;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WAa: // global
           I64[Hp - 384] = sat_s6Pjg_info;
           P64[Hp - 376] = R2;
           I64[Hp - 368] = sat_s6Pjf_info;
           P64[Hp - 360] = R2;
           I64[Hp - 352] = sat_s6Pje_info;
           P64[Hp - 344] = R2;
           I64[Hp - 336] = sat_s6Pjd_info;
           P64[Hp - 328] = R2;
           I64[Hp - 320] = sat_s6Pjc_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_s6Pjb_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_s6Pja_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_s6Pj8_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_s6Pj7_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_s6Pj6_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_s6Pj5_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s6Pj4_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_s6Pj3_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s6Pj2_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s6PiY_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_s6PiU_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = Hp - 142;
           P64[Hp - 112] = Hp - 157;
           P64[Hp - 104] = Hp - 173;
           P64[Hp - 96] = Hp - 189;
           P64[Hp - 88] = Hp - 205;
           P64[Hp - 80] = Hp - 221;
           P64[Hp - 72] = Hp - 238;
           P64[Hp - 64] = Hp - 254;
           P64[Hp - 56] = Hp - 271;
           P64[Hp - 48] = Hp - 287;
           P64[Hp - 40] = Hp - 303;
           P64[Hp - 32] = Hp - 318;
           P64[Hp - 24] = Hp - 335;
           P64[Hp - 16] = Hp - 351;
           P64[Hp - 8] = Hp - 367;
           P64[Hp] = Hp - 383;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_info" {
     Data.Foldable.$fFoldableM1_info:
         const Data.Foldable.$fFoldableM1_entry;
         const 0;
         const 3561477076156430;
         const 4294967301;
         const S6PH7_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.955055451 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$celem_closure" {
     Data.Foldable.$fFoldableK1_$celem_closure:
         const Data.Foldable.$fFoldableK1_$celem_info;
 },
 Data.Foldable.$fFoldableK1_$celem_entry() //  []
         { []
         }
     {offset
       c6WBq: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$celem_info" {
     Data.Foldable.$fFoldableK1_$celem_info:
         const Data.Foldable.$fFoldableK1_$celem_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.958414607 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$csum_closure" {
     Data.Foldable.$fFoldableK1_$csum_closure:
         const Data.Foldable.$fFoldableK1_$csum_info;
         const 0;
 },
 Data.Foldable.$fFoldableK1_$csum_entry() //  [R2]
         { []
         }
     {offset
       c6WBC: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$csum_info" {
     Data.Foldable.$fFoldableK1_$csum_info:
         const Data.Foldable.$fFoldableK1_$csum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.961803077 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cminimum_closure" {
     Data.Foldable.$fFoldableK1_$cminimum_closure:
         const Data.Foldable.$fFoldableK1_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableK1_$cminimum_entry() //  []
         { []
         }
     {offset
       c6WBN: // global
           R2 = Data.Foldable.$fFoldableK2_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cminimum_info" {
     Data.Foldable.$fFoldableK1_$cminimum_info:
         const Data.Foldable.$fFoldableK1_$cminimum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+992;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.965358549 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cmaximum_closure" {
     Data.Foldable.$fFoldableK1_$cmaximum_closure:
         const Data.Foldable.$fFoldableK1_$cmaximum_info;
         const 0;
 },
 section ""relreadonly" . u6WC1_srtd" {
     u6WC1_srtd:
         const S6PH7_srt+232;
         const 97;
         const 1;
         const 4294967296;
 },
 Data.Foldable.$fFoldableK1_$cmaximum_entry() //  []
         { []
         }
     {offset
       c6WBY: // global
           R2 = Data.Foldable.$fFoldableK4_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cmaximum_info" {
     Data.Foldable.$fFoldableK1_$cmaximum_info:
         const Data.Foldable.$fFoldableK1_$cmaximum_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u6WC1_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.970618073 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cfoldl_closure" {
     Data.Foldable.$fFoldableK1_$cfoldl_closure:
         const Data.Foldable.$fFoldableK1_$cfoldl_info;
 },
 Data.Foldable.$fFoldableK1_$cfoldl_entry() //  [R3]
         { []
         }
     {offset
       c6WCb: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cfoldl_info" {
     Data.Foldable.$fFoldableK1_$cfoldl_info:
         const Data.Foldable.$fFoldableK1_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.974252045 UTC

[section ""data" . Data.Foldable.$fFoldableK6_closure" {
     Data.Foldable.$fFoldableK6_closure:
         const Data.Foldable.$fFoldableK6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableK6_entry() //  [R1]
         { []
         }
     {offset
       c6WCo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WCp; else goto c6WCq;
       c6WCp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WCq: // global
           (_c6WCl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6WCl::I64 == 0) goto c6WCn; else goto c6WCm;
       c6WCn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6WCm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6WCl::I64;
           R2 = Data.Foldable.$fFoldableK7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK6_info" {
     Data.Foldable.$fFoldableK6_info:
         const Data.Foldable.$fFoldableK6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.978145492 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cfoldl1_closure" {
     Data.Foldable.$fFoldableK1_$cfoldl1_closure:
         const Data.Foldable.$fFoldableK1_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableK1_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c6WCC: // global
           R2 = Data.Foldable.$fFoldableK6_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cfoldl1_info" {
     Data.Foldable.$fFoldableK1_$cfoldl1_info:
         const Data.Foldable.$fFoldableK1_$cfoldl1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.982061268 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cfoldr'_closure" {
     Data.Foldable.$fFoldableK1_$cfoldr'_closure:
         const Data.Foldable.$fFoldableK1_$cfoldr'_info;
 },
 Data.Foldable.$fFoldableK1_$cfoldr'_entry() //  [R3]
         { []
         }
     {offset
       c6WCN: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cfoldr'_info" {
     Data.Foldable.$fFoldableK1_$cfoldr'_info:
         const Data.Foldable.$fFoldableK1_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.98542686 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$clength_closure" {
     Data.Foldable.$fFoldableK1_$clength_closure:
         const Data.Foldable.$fFoldableK1_$clength_info;
 },
 Data.Foldable.$fFoldableK1_$clength_entry() //  []
         { []
         }
     {offset
       c6WCY: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$clength_info" {
     Data.Foldable.$fFoldableK1_$clength_info:
         const Data.Foldable.$fFoldableK1_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.989099543 UTC

[section ""data" . Data.Foldable.$fFoldableK8_closure" {
     Data.Foldable.$fFoldableK8_closure:
         const Data.Foldable.$fFoldableK8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableK8_entry() //  [R1]
         { []
         }
     {offset
       c6WDc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WDd; else goto c6WDe;
       c6WDd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WDe: // global
           (_c6WD9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6WD9::I64 == 0) goto c6WDb; else goto c6WDa;
       c6WDb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6WDa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6WD9::I64;
           R2 = Data.Foldable.$fFoldableK9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK8_info" {
     Data.Foldable.$fFoldableK8_info:
         const Data.Foldable.$fFoldableK8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.992983963 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cfoldr1_closure" {
     Data.Foldable.$fFoldableK1_$cfoldr1_closure:
         const Data.Foldable.$fFoldableK1_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableK1_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c6WDq: // global
           R2 = Data.Foldable.$fFoldableK8_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cfoldr1_info" {
     Data.Foldable.$fFoldableK1_$cfoldr1_info:
         const Data.Foldable.$fFoldableK1_$cfoldr1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S6PH7_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:05.996771153 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cnull_closure" {
     Data.Foldable.$fFoldableK1_$cnull_closure:
         const Data.Foldable.$fFoldableK1_$cnull_info;
 },
 Data.Foldable.$fFoldableK1_$cnull_entry() //  []
         { []
         }
     {offset
       c6WDB: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cnull_info" {
     Data.Foldable.$fFoldableK1_$cnull_info:
         const Data.Foldable.$fFoldableK1_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.000647567 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cfold_closure" {
     Data.Foldable.$fFoldableK1_$cfold_closure:
         const Data.Foldable.$fFoldableK1_$cfold_info;
 },
 Data.Foldable.$fFoldableK1_$cfold_entry() //  [R2]
         { []
         }
     {offset
       c6WDN: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cfold_info" {
     Data.Foldable.$fFoldableK1_$cfold_info:
         const Data.Foldable.$fFoldableK1_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.003708745 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cproduct_closure" {
     Data.Foldable.$fFoldableK1_$cproduct_closure:
         const Data.Foldable.$fFoldableK1_$cproduct_info;
         const 0;
 },
 Data.Foldable.$fFoldableK1_$cproduct_entry() //  [R2]
         { []
         }
     {offset
       c6WDY: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cproduct_info" {
     Data.Foldable.$fFoldableK1_$cproduct_info:
         const Data.Foldable.$fFoldableK1_$cproduct_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.007302283 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$ctoList_closure" {
     Data.Foldable.$fFoldableK1_$ctoList_closure:
         const Data.Foldable.$fFoldableK1_$ctoList_info;
 },
 Data.Foldable.$fFoldableK1_$ctoList_entry() //  []
         { []
         }
     {offset
       c6WE9: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$ctoList_info" {
     Data.Foldable.$fFoldableK1_$ctoList_info:
         const Data.Foldable.$fFoldableK1_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.010513288 UTC

[section ""data" . Data.Foldable.$fFoldableK1_closure" {
     Data.Foldable.$fFoldableK1_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableK1_$cfold_closure+2;
         const Data.Foldable.$fFoldableK1_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableK1_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableK1_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableK1_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableK1_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableK1_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableK1_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableK1_$ctoList_closure+1;
         const Data.Foldable.$fFoldableK1_$cnull_closure+1;
         const Data.Foldable.$fFoldableK1_$clength_closure+1;
         const Data.Foldable.$fFoldableK1_$celem_closure+3;
         const Data.Foldable.$fFoldableK1_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableK1_$cminimum_closure+2;
         const Data.Foldable.$fFoldableK1_$csum_closure+2;
         const Data.Foldable.$fFoldableK1_$cproduct_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.013958606 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$celem_closure" {
     Data.Foldable.$fFoldableRec1_$celem_closure:
         const Data.Foldable.$fFoldableRec1_$celem_info;
         const 0;
 },
 f1_s6PjK_entry() //  [R1]
         { []
         }
     {offset
       c6WEq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6WEr; else goto c6WEs;
       c6WEr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WEs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s6PjK_info" {
     f1_s6PjK_info:
         const f1_s6PjK_entry;
         const 2;
         const 18;
 },
 sat_s6PjM_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WEy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6WEz; else goto c6WEA;
       c6WEz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WEA: // global
           _s6PjL::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = _s6PjL::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PjM_info" {
     sat_s6PjM_info:
         const sat_s6PjM_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+816;
 },
 Data.Foldable.$fFoldableRec1_$celem_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6WEB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6WEF; else goto c6WEE;
       c6WEF: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_$celem_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WEE: // global
           I64[Hp - 48] = f1_s6PjK_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s6PjM_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$celem_info" {
     Data.Foldable.$fFoldableRec1_$celem_info:
         const Data.Foldable.$fFoldableRec1_$celem_entry;
         const 0;
         const 576460756598390798;
         const 12884901911;
         const S6PH7_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.022787982 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$csum_closure" {
     Data.Foldable.$fFoldableRec1_$csum_closure:
         const Data.Foldable.$fFoldableRec1_$csum_info;
         const 0;
 },
 $dMonoid_s6PjP_entry() //  [R1]
         { []
         }
     {offset
       c6WF4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WF5; else goto c6WF6;
       c6WF5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WF6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6PjP_info" {
     $dMonoid_s6PjP_info:
         const $dMonoid_s6PjP_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+832;
 },
 sat_s6PjR_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WFc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6WFd; else goto c6WFe;
       c6WFd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WFe: // global
           _s6PjQ::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp - 8] = _s6PjQ::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PjR_info" {
     sat_s6PjR_info:
         const sat_s6PjR_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Foldable.$fFoldableRec1_$csum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6WFf: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6WFj; else goto c6WFi;
       c6WFj: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_$csum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WFi: // global
           I64[Hp - 40] = $dMonoid_s6PjP_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s6PjR_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$csum_info" {
     Data.Foldable.$fFoldableRec1_$csum_info:
         const Data.Foldable.$fFoldableRec1_$csum_entry;
         const 0;
         const 288230380446679054;
         const 8589934607;
         const S6PH7_srt+832;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.032076174 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cminimum_closure" {
     Data.Foldable.$fFoldableRec1_$cminimum_closure:
         const Data.Foldable.$fFoldableRec1_$cminimum_info;
         const 0;
 },
 $dMonoid_s6PjU_entry() //  [R1]
         { []
         }
     {offset
       c6WFH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WFI; else goto c6WFJ;
       c6WFI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WFJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6PjU_info" {
     $dMonoid_s6PjU_info:
         const $dMonoid_s6PjU_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+848;
 },
 sat_s6PjY_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WFV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6WFW; else goto c6WFX;
       c6WFW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WFX: // global
           I64[Sp - 8] = block_c6WFP_info;
           _s6PjV::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           P64[Sp - 16] = _s6PjV::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PjY_info" {
     sat_s6PjY_info:
         const sat_s6PjY_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+856;
 },
 _c6WFP() //  [R1]
         { []
         }
     {offset
       c6WFP: // global
           if (R1 & 7 == 1) goto c6WFS; else goto c6WFT;
       c6WFS: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6WFT: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WFP_info" {
     block_c6WFP_info:
         const _c6WFP;
         const 0;
         const 4294967326;
         const S6PH7_srt+856;
 },
 Data.Foldable.$fFoldableRec1_$cminimum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6WG4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6WG8; else goto c6WG7;
       c6WG8: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_$cminimum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WG7: // global
           I64[Hp - 40] = $dMonoid_s6PjU_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s6PjY_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cminimum_info" {
     Data.Foldable.$fFoldableRec1_$cminimum_info:
         const Data.Foldable.$fFoldableRec1_$cminimum_entry;
         const 0;
         const 144115200960757774;
         const 8589934607;
         const S6PH7_srt+848;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.04268029 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cmaximum_closure" {
     Data.Foldable.$fFoldableRec1_$cmaximum_closure:
         const Data.Foldable.$fFoldableRec1_$cmaximum_info;
         const 0;
 },
 $dMonoid_s6Pk1_entry() //  [R1]
         { []
         }
     {offset
       c6WGB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WGC; else goto c6WGD;
       c6WGC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WGD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6Pk1_info" {
     $dMonoid_s6Pk1_info:
         const $dMonoid_s6Pk1_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+872;
 },
 sat_s6Pk5_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WGP: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6WGQ; else goto c6WGR;
       c6WGQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WGR: // global
           I64[Sp - 8] = block_c6WGJ_info;
           _s6Pk2::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           P64[Sp - 16] = _s6Pk2::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pk5_info" {
     sat_s6Pk5_info:
         const sat_s6Pk5_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+880;
 },
 _c6WGJ() //  [R1]
         { []
         }
     {offset
       c6WGJ: // global
           if (R1 & 7 == 1) goto c6WGM; else goto c6WGN;
       c6WGM: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6WGN: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WGJ_info" {
     block_c6WGJ_info:
         const _c6WGJ;
         const 0;
         const 4294967326;
         const S6PH7_srt+880;
 },
 Data.Foldable.$fFoldableRec1_$cmaximum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6WGY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6WH2; else goto c6WH1;
       c6WH2: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_$cmaximum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WH1: // global
           I64[Hp - 40] = $dMonoid_s6Pk1_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s6Pk5_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cmaximum_info" {
     Data.Foldable.$fFoldableRec1_$cmaximum_info:
         const Data.Foldable.$fFoldableRec1_$cmaximum_entry;
         const 0;
         const 36028809903865870;
         const 8589934607;
         const S6PH7_srt+872;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.052449947 UTC

[section ""data" . Data.Foldable.$fFoldable:.:3_closure" {
     Data.Foldable.$fFoldable:.:3_closure:
         const Data.Foldable.$fFoldable:.:3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldable:.:3_entry() //  [R1]
         { []
         }
     {offset
       c6WHt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WHu; else goto c6WHv;
       c6WHu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WHv: // global
           (_c6WHq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6WHq::I64 == 0) goto c6WHs; else goto c6WHr;
       c6WHs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6WHr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6WHq::I64;
           R2 = Data.Foldable.$fFoldableK8_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:3_info" {
     Data.Foldable.$fFoldable:.:3_info:
         const Data.Foldable.$fFoldable:.:3_entry;
         const 0;
         const 21474836501;
         const S6PH7_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.06113326 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cfoldr1_closure" {
     Data.Foldable.$fFoldableRec1_$cfoldr1_closure:
         const Data.Foldable.$fFoldableRec1_$cfoldr1_info;
         const 0;
 },
 sat_s6Pkd_entry() //  [R1]
         { []
         }
     {offset
       c6WHX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6WHY; else goto c6WHZ;
       c6WHY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WHZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6WHQ_info;
           _s6Pk7::P64 = P64[R1 + 16];
           _s6Pk9::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6Pk7::P64;
           P64[Sp - 24] = _s6Pk9::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6WI6; else goto c6WHR;
       u6WI6: // global
           call _c6WHQ(R1) args: 0, res: 0, upd: 0;
       c6WHR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pkd_info" {
     sat_s6Pkd_info:
         const sat_s6Pkd_entry;
         const 3;
         const 15;
 },
 _c6WHQ() //  [R1]
         { []
         }
     {offset
       c6WHQ: // global
           _s6Pk9::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6WHU; else goto c6WHV;
       c6WHU: // global
           R1 = _s6Pk9::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c6WHV: // global
           R3 = P64[R1 + 6];
           R2 = _s6Pk9::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6WHQ_info" {
     block_c6WHQ_info:
         const _c6WHQ;
         const 2;
         const 30;
 },
 sat_s6Pke_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6WI8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6WIc; else goto c6WIb;
       c6WIc: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WIb: // global
           _s6Pk7::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6Pkd_info;
           P64[Hp - 32] = _s6Pk7::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pke_info" {
     sat_s6Pke_info:
         const sat_s6Pke_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldableRec1_$cfoldr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6WIj: // global
           _s6Pk8::P64 = R4;
           _s6Pk7::P64 = R3;
           _s6Pk6::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6WIk; else goto c6WIl;
       c6WIl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6WIn; else goto c6WIm;
       c6WIn: // global
           HpAlloc = 16;
           goto c6WIk;
       c6WIk: // global
           R4 = _s6Pk8::P64;
           R3 = _s6Pk7::P64;
           R2 = _s6Pk6::P64;
           R1 = Data.Foldable.$fFoldableRec1_$cfoldr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WIm: // global
           I64[Hp - 8] = sat_s6Pke_info;
           P64[Hp] = _s6Pk7::P64;
           I64[Sp - 8] = block_c6WId_info;
           R2 = _s6Pk6::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _s6Pk8::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cfoldr1_info" {
     Data.Foldable.$fFoldableRec1_$cfoldr1_info:
         const Data.Foldable.$fFoldableRec1_$cfoldr1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6PH7_srt+1064;
 },
 _c6WId() //  [R1]
         { []
         }
     {offset
       c6WId: // global
           if (R1 & 7 == 1) goto c6WIg; else goto c6WIh;
       c6WIg: // global
           R1 = Data.Foldable.$fFoldable:.:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6WIh: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WId_info" {
     block_c6WId_info:
         const _c6WId;
         const 0;
         const 4294967326;
         const S6PH7_srt+1064;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.076910683 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cfoldl'_closure" {
     Data.Foldable.$fFoldableRec1_$cfoldl'_closure:
         const Data.Foldable.$fFoldableRec1_$cfoldl'_info;
 },
 sat_s6Pkp_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6WJ5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WJ6; else goto c6WJ7;
       c6WJ6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WJ7: // global
           I64[Sp - 16] = block_c6WJ3_info;
           _s6Pkm::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6Pkm::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pkp_info" {
     sat_s6Pkp_info:
         const sat_s6Pkp_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c6WJ3() //  [R1]
         { []
         }
     {offset
       c6WJ3: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WJ3_info" {
     block_c6WJ3_info:
         const _c6WJ3;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableRec1_$cfoldl'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6WJ9: // global
           _s6Pkk::P64 = R5;
           _s6Pkj::P64 = R4;
           _s6Pki::P64 = R3;
           _s6Pkh::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6WJa; else goto c6WJb;
       c6WJb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6WJd; else goto c6WJc;
       c6WJd: // global
           HpAlloc = 16;
           goto c6WJa;
       c6WJa: // global
           R5 = _s6Pkk::P64;
           R4 = _s6Pkj::P64;
           R3 = _s6Pki::P64;
           R2 = _s6Pkh::P64;
           R1 = Data.Foldable.$fFoldableRec1_$cfoldl'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WJc: // global
           I64[Hp - 8] = sat_s6Pkp_info;
           P64[Hp] = _s6Pki::P64;
           R2 = _s6Pkh::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 5;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = _s6Pkk::P64;
           P64[Sp - 8] = _s6Pkj::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cfoldl'_info" {
     Data.Foldable.$fFoldableRec1_$cfoldl'_info:
         const Data.Foldable.$fFoldableRec1_$cfoldl'_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.087047009 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$clength_closure" {
     Data.Foldable.$fFoldableRec1_$clength_closure:
         const Data.Foldable.$fFoldableRec1_$clength_info;
 },
 Data.Foldable.$fFoldableRec1_$clength_entry() //  [R2, R3]
         { []
         }
     {offset
       c6WJv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6WJw; else goto c6WJx;
       c6WJw: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_$clength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WJx: // global
           R2 = R2;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldableM2_closure+3;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$clength_info" {
     Data.Foldable.$fFoldableRec1_$clength_info:
         const Data.Foldable.$fFoldableRec1_$clength_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.092224523 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cfoldl_closure" {
     Data.Foldable.$fFoldableRec1_$cfoldl_closure:
         const Data.Foldable.$fFoldableRec1_$cfoldl_info;
         const 0;
 },
 sat_s6Pky_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6WJM: // global
           _s6Pkx::P64 = R3;
           R3 = R2;
           R2 = _s6Pkx::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pky_info" {
     sat_s6Pky_info:
         const sat_s6Pky_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldableRec1_$cfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6WJP: // global
           _s6Pkv::P64 = R5;
           _s6Pku::P64 = R4;
           _s6Pkt::P64 = R3;
           _s6Pks::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6WJQ; else goto c6WJR;
       c6WJR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6WJT; else goto c6WJS;
       c6WJT: // global
           HpAlloc = 16;
           goto c6WJQ;
       c6WJQ: // global
           R5 = _s6Pkv::P64;
           R4 = _s6Pku::P64;
           R3 = _s6Pkt::P64;
           R2 = _s6Pks::P64;
           R1 = Data.Foldable.$fFoldableRec1_$cfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WJS: // global
           I64[Hp - 8] = sat_s6Pky_info;
           P64[Hp] = _s6Pkt::P64;
           R2 = _s6Pks::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = _s6Pkv::P64;
           P64[Sp - 8] = _s6Pku::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cfoldl_info" {
     Data.Foldable.$fFoldableRec1_$cfoldl_info:
         const Data.Foldable.$fFoldableRec1_$cfoldl_entry;
         const 0;
         const 9007203549708302;
         const 17179869208;
         const S6PH7_srt+912;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.098381648 UTC

[section ""data" . Data.Foldable.$fFoldable:.:2_closure" {
     Data.Foldable.$fFoldable:.:2_closure:
         const Data.Foldable.$fFoldable:.:2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldable:.:2_entry() //  [R1]
         { []
         }
     {offset
       c6WK9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WKa; else goto c6WKb;
       c6WKa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WKb: // global
           (_c6WK6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6WK6::I64 == 0) goto c6WK8; else goto c6WK7;
       c6WK8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6WK7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6WK6::I64;
           R2 = Data.Foldable.$fFoldableK6_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:2_info" {
     Data.Foldable.$fFoldable:.:2_info:
         const Data.Foldable.$fFoldable:.:2_entry;
         const 0;
         const 12884901909;
         const S6PH7_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.104338056 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cfoldl1_closure" {
     Data.Foldable.$fFoldableRec1_$cfoldl1_closure:
         const Data.Foldable.$fFoldableRec1_$cfoldl1_info;
         const 0;
 },
 sat_s6PkG_entry() //  [R1]
         { []
         }
     {offset
       c6WKD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6WKE; else goto c6WKF;
       c6WKE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WKF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6WKw_info;
           _s6PkA::P64 = P64[R1 + 16];
           _s6PkC::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6PkA::P64;
           P64[Sp - 24] = _s6PkC::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6WKM; else goto c6WKx;
       u6WKM: // global
           call _c6WKw(R1) args: 0, res: 0, upd: 0;
       c6WKx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6PkG_info" {
     sat_s6PkG_info:
         const sat_s6PkG_entry;
         const 3;
         const 15;
 },
 _c6WKw() //  [R1]
         { []
         }
     {offset
       c6WKw: // global
           _s6PkC::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6WKA; else goto c6WKB;
       c6WKA: // global
           R1 = _s6PkC::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c6WKB: // global
           R3 = _s6PkC::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6WKw_info" {
     block_c6WKw_info:
         const _c6WKw;
         const 2;
         const 30;
 },
 sat_s6PkH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6WKO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6WKS; else goto c6WKR;
       c6WKS: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WKR: // global
           _s6PkA::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6PkG_info;
           P64[Hp - 32] = _s6PkA::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PkH_info" {
     sat_s6PkH_info:
         const sat_s6PkH_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldableRec1_$cfoldl1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6WKZ: // global
           _s6PkB::P64 = R4;
           _s6PkA::P64 = R3;
           _s6Pkz::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c6WL0; else goto c6WL1;
       c6WL1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6WL3; else goto c6WL2;
       c6WL3: // global
           HpAlloc = 16;
           goto c6WL0;
       c6WL0: // global
           R4 = _s6PkB::P64;
           R3 = _s6PkA::P64;
           R2 = _s6Pkz::P64;
           R1 = Data.Foldable.$fFoldableRec1_$cfoldl1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WL2: // global
           I64[Hp - 8] = sat_s6PkH_info;
           P64[Hp] = _s6PkA::P64;
           I64[Sp - 8] = block_c6WKT_info;
           R2 = _s6Pkz::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           P64[Sp - 40] = Data.Foldable.$fFoldableM3_closure;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = _s6PkB::P64;
           P64[Sp - 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cfoldl1_info" {
     Data.Foldable.$fFoldableRec1_$cfoldl1_info:
         const Data.Foldable.$fFoldableRec1_$cfoldl1_entry;
         const 0;
         const 6755403736023054;
         const 12884901911;
         const S6PH7_srt+936;
 },
 _c6WKT() //  [R1]
         { []
         }
     {offset
       c6WKT: // global
           if (R1 & 7 == 1) goto c6WKW; else goto c6WKX;
       c6WKW: // global
           R1 = Data.Foldable.$fFoldable:.:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6WKX: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WKT_info" {
     block_c6WKT_info:
         const _c6WKT;
         const 0;
         const 4294967326;
         const S6PH7_srt+1088;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.116528687 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cfoldr'_closure" {
     Data.Foldable.$fFoldableRec1_$cfoldr'_closure:
         const Data.Foldable.$fFoldableRec1_$cfoldr'_info;
         const 0;
 },
 sat_s6PkS_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6WLL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WLM; else goto c6WLN;
       c6WLM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WLN: // global
           I64[Sp - 16] = block_c6WLJ_info;
           _s6PkP::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6PkP::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PkS_info" {
     sat_s6PkS_info:
         const sat_s6PkS_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c6WLJ() //  [R1]
         { []
         }
     {offset
       c6WLJ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WLJ_info" {
     block_c6WLJ_info:
         const _c6WLJ;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableRec1_$cfoldr'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6WLP: // global
           _s6PkN::P64 = R5;
           _s6PkM::P64 = R4;
           _s6PkL::P64 = R3;
           _s6PkK::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c6WLQ; else goto c6WLR;
       c6WLR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6WLT; else goto c6WLS;
       c6WLT: // global
           HpAlloc = 16;
           goto c6WLQ;
       c6WLQ: // global
           R5 = _s6PkN::P64;
           R4 = _s6PkM::P64;
           R3 = _s6PkL::P64;
           R2 = _s6PkK::P64;
           R1 = Data.Foldable.$fFoldableRec1_$cfoldr'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WLS: // global
           I64[Hp - 8] = sat_s6PkS_info;
           P64[Hp] = _s6PkL::P64;
           R2 = _s6PkK::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Foldable.$fFoldableM4_closure;
           P64[Sp - 32] = Hp - 5;
           P64[Sp - 24] = _s6PkN::P64;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = _s6PkM::P64;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cfoldr'_info" {
     Data.Foldable.$fFoldableRec1_$cfoldr'_info:
         const Data.Foldable.$fFoldableRec1_$cfoldr'_entry;
         const 0;
         const 2251804108652558;
         const 17179869208;
         const S6PH7_srt+952;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.125077293 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cfold_closure" {
     Data.Foldable.$fFoldableRec1_$cfold_closure:
         const Data.Foldable.$fFoldableRec1_$cfold_info;
 },
 Data.Foldable.$fFoldableRec1_$cfold_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6WMb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6WMc; else goto c6WMd;
       c6WMc: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_$cfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WMd: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cfold_info" {
     Data.Foldable.$fFoldableRec1_$cfold_info:
         const Data.Foldable.$fFoldableRec1_$cfold_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.129913648 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cproduct_closure" {
     Data.Foldable.$fFoldableRec1_$cproduct_closure:
         const Data.Foldable.$fFoldableRec1_$cproduct_info;
         const 0;
 },
 $dMonoid_s6PkY_entry() //  [R1]
         { []
         }
     {offset
       c6WMr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WMs; else goto c6WMt;
       c6WMs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WMt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6PkY_info" {
     $dMonoid_s6PkY_info:
         const $dMonoid_s6PkY_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+960;
 },
 sat_s6Pl0_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WMz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6WMA; else goto c6WMB;
       c6WMA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WMB: // global
           _s6PkZ::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp - 8] = _s6PkZ::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pl0_info" {
     sat_s6Pl0_info:
         const sat_s6Pl0_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Foldable.$fFoldableRec1_$cproduct_entry() //  [R2, R3]
         { []
         }
     {offset
       c6WMC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6WMG; else goto c6WMF;
       c6WMG: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_$cproduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WMF: // global
           I64[Hp - 40] = $dMonoid_s6PkY_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s6Pl0_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cproduct_info" {
     Data.Foldable.$fFoldableRec1_$cproduct_info:
         const Data.Foldable.$fFoldableRec1_$cproduct_entry;
         const 0;
         const 2251804108652558;
         const 8589934607;
         const S6PH7_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.137739051 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$ctoList_closure" {
     Data.Foldable.$fFoldableRec1_$ctoList_closure:
         const Data.Foldable.$fFoldableRec1_$ctoList_info;
 },
 Data.Foldable.$fFoldableRec1_$ctoList_entry() //  [R2, R3]
         { []
         }
     {offset
       c6WN0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6WN1; else goto c6WN2;
       c6WN1: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_$ctoList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WN2: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$ctoList_info" {
     Data.Foldable.$fFoldableRec1_$ctoList_info:
         const Data.Foldable.$fFoldableRec1_$ctoList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.147989931 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_closure" {
     Data.Foldable.$fFoldableRec1_closure:
         const Data.Foldable.$fFoldableRec1_info;
         const 0;
 },
 sat_s6Plq_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WNh: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableRec1_$cproduct_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Plq_info" {
     sat_s6Plq_info:
         const sat_s6Plq_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6PH7_srt+1112;
 },
 sat_s6Plp_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WNp: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableRec1_$csum_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Plp_info" {
     sat_s6Plp_info:
         const sat_s6Plp_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6PH7_srt+1040;
 },
 sat_s6Plo_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WNx: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableRec1_$cminimum_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Plo_info" {
     sat_s6Plo_info:
         const sat_s6Plo_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6PH7_srt+1048;
 },
 sat_s6Pln_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WNF: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableRec1_$cmaximum_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pln_info" {
     sat_s6Pln_info:
         const sat_s6Pln_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6PH7_srt+1056;
 },
 sat_s6Plm_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6WNN: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldableRec1_$celem_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Plm_info" {
     sat_s6Plm_info:
         const sat_s6Plm_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6PH7_srt+1032;
 },
 sat_s6Pll_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WNV: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableRec1_$clength_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pll_info" {
     sat_s6Pll_info:
         const sat_s6Pll_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6Plk_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WO3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WO4; else goto c6WO5;
       c6WO4: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WO5: // global
           _s6Plj::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s6Plj::P64;
           Sp = Sp - 16;
           call Data.Foldable.null_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Plk_info" {
     sat_s6Plk_info:
         const sat_s6Plk_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6Pli_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WOb: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableRec1_$ctoList_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pli_info" {
     sat_s6Pli_info:
         const sat_s6Pli_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6Plh_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6WOj: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldableRec1_$cfoldl1_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Plh_info" {
     sat_s6Plh_info:
         const sat_s6Plh_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6PH7_srt+1096;
 },
 sat_s6Plg_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6WOr: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldableRec1_$cfoldr1_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Plg_info" {
     sat_s6Plg_info:
         const sat_s6Plg_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6PH7_srt+1072;
 },
 sat_s6Plf_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6WOz: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldableRec1_$cfoldl'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Plf_info" {
     sat_s6Plf_info:
         const sat_s6Plf_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s6Ple_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6WOH: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldableRec1_$cfoldl_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Ple_info" {
     sat_s6Ple_info:
         const sat_s6Ple_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const S6PH7_srt+1080;
 },
 sat_s6Pld_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6WOP: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldableRec1_$cfoldr'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pld_info" {
     sat_s6Pld_info:
         const sat_s6Pld_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const S6PH7_srt+1104;
 },
 sat_s6Plc_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6WOX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6WOY; else goto c6WOZ;
       c6WOY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WOZ: // global
           _s6Pl9::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _s6Pl9::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Plc_info" {
     sat_s6Plc_info:
         const sat_s6Plc_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s6Pl8_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6WP5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6WP6; else goto c6WP7;
       c6WP6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WP7: // global
           _s6Pl5::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _s6Pl5::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pl8_info" {
     sat_s6Pl8_info:
         const sat_s6Pl8_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s6Pl4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6WPd: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldableRec1_$cfold_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pl4_info" {
     sat_s6Pl4_info:
         const sat_s6Pl4_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldableRec1_entry() //  [R2]
         { []
         }
     {offset
       c6WPh: // global
           Hp = Hp + 392;
           if (Hp > HpLim) (likely: False) goto c6WPl; else goto c6WPk;
       c6WPl: // global
           HpAlloc = 392;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WPk: // global
           I64[Hp - 384] = sat_s6Plq_info;
           P64[Hp - 376] = R2;
           I64[Hp - 368] = sat_s6Plp_info;
           P64[Hp - 360] = R2;
           I64[Hp - 352] = sat_s6Plo_info;
           P64[Hp - 344] = R2;
           I64[Hp - 336] = sat_s6Pln_info;
           P64[Hp - 328] = R2;
           I64[Hp - 320] = sat_s6Plm_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_s6Pll_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_s6Plk_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_s6Pli_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_s6Plh_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_s6Plg_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_s6Plf_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s6Ple_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_s6Pld_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s6Plc_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s6Pl8_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_s6Pl4_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = Hp - 142;
           P64[Hp - 112] = Hp - 157;
           P64[Hp - 104] = Hp - 173;
           P64[Hp - 96] = Hp - 189;
           P64[Hp - 88] = Hp - 205;
           P64[Hp - 80] = Hp - 221;
           P64[Hp - 72] = Hp - 238;
           P64[Hp - 64] = Hp - 254;
           P64[Hp - 56] = Hp - 271;
           P64[Hp - 48] = Hp - 287;
           P64[Hp - 40] = Hp - 303;
           P64[Hp - 32] = Hp - 318;
           P64[Hp - 24] = Hp - 335;
           P64[Hp - 16] = Hp - 351;
           P64[Hp - 8] = Hp - 367;
           P64[Hp] = Hp - 383;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_info" {
     Data.Foldable.$fFoldableRec1_info:
         const Data.Foldable.$fFoldableRec1_entry;
         const 0;
         const 16969415786510;
         const 4294967301;
         const S6PH7_srt+1032;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.177920152 UTC

[section ""data" . Data.Foldable.$fFoldablePar1_$celem_closure" {
     Data.Foldable.$fFoldablePar1_$celem_closure:
         const Data.Foldable.$fFoldablePar1_$celem_info;
 },
 f_s6Plt_entry() //  [R1]
         { []
         }
     {offset
       c6WQE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6WQF; else goto c6WQG;
       c6WQF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WQG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6Plt_info" {
     f_s6Plt_info:
         const f_s6Plt_entry;
         const 2;
         const 18;
 },
 sat_s6Plv_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WQM: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Plv_info" {
     sat_s6Plv_info:
         const sat_s6Plv_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Foldable.$fFoldablePar1_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       c6WQP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6WQT; else goto c6WQS;
       c6WQT: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldablePar1_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WQS: // global
           I64[Hp - 40] = f_s6Plt_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6Plv_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar1_$celem_info" {
     Data.Foldable.$fFoldablePar1_$celem_info:
         const Data.Foldable.$fFoldablePar1_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.184500348 UTC

[section ""data" . Data.Foldable.$fFoldablePar2_closure" {
     Data.Foldable.$fFoldablePar2_closure:
         const Data.Foldable.$fFoldablePar2_info;
 },
 Data.Foldable.$fFoldablePar2_entry() //  [R3]
         { []
         }
     {offset
       c6WRc: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar2_info" {
     Data.Foldable.$fFoldablePar2_info:
         const Data.Foldable.$fFoldablePar2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.187821966 UTC

[section ""data" . Data.Foldable.$fFoldablePar3_closure" {
     Data.Foldable.$fFoldablePar3_closure:
         const Data.Foldable.$fFoldablePar3_info;
 },
 Data.Foldable.$fFoldablePar3_entry() //  [R3]
         { []
         }
     {offset
       c6WRn: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar3_info" {
     Data.Foldable.$fFoldablePar3_info:
         const Data.Foldable.$fFoldablePar3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.191135433 UTC

[section ""data" . Data.Foldable.$fFoldablePar4_closure" {
     Data.Foldable.$fFoldablePar4_closure:
         const Data.Foldable.$fFoldablePar4_info;
 },
 Data.Foldable.$fFoldablePar4_entry() //  [R3]
         { []
         }
     {offset
       c6WRy: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar4_info" {
     Data.Foldable.$fFoldablePar4_info:
         const Data.Foldable.$fFoldablePar4_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.194339898 UTC

[section ""data" . Data.Foldable.$fFoldablePar1_$cfoldl'_closure" {
     Data.Foldable.$fFoldablePar1_$cfoldl'_closure:
         const Data.Foldable.$fFoldablePar1_$cfoldl'_info;
 },
 Data.Foldable.$fFoldablePar1_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6WRJ: // global
           _s6PlD::P64 = R3;
           R3 = R4;
           _s6PlC::P64 = R2;
           R2 = _s6PlD::P64;
           R1 = _s6PlC::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar1_$cfoldl'_info" {
     Data.Foldable.$fFoldablePar1_$cfoldl'_info:
         const Data.Foldable.$fFoldablePar1_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.19778092 UTC

[section ""data" . Data.Foldable.$fFoldablePar1_$clength_closure" {
     Data.Foldable.$fFoldablePar1_$clength_closure:
         const Data.Foldable.$fFoldablePar1_$clength_info;
 },
 Data.Foldable.$fFoldablePar1_$clength_entry() //  []
         { []
         }
     {offset
       c6WRU: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar1_$clength_info" {
     Data.Foldable.$fFoldablePar1_$clength_info:
         const Data.Foldable.$fFoldablePar1_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.202580192 UTC

[section ""data" . Data.Foldable.$fFoldablePar5_closure" {
     Data.Foldable.$fFoldablePar5_closure:
         const Data.Foldable.$fFoldablePar5_info;
 },
 Data.Foldable.$fFoldablePar5_entry() //  [R3]
         { []
         }
     {offset
       c6WS6: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar5_info" {
     Data.Foldable.$fFoldablePar5_info:
         const Data.Foldable.$fFoldablePar5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.206027998 UTC

[section ""data" . Data.Foldable.$fFoldablePar1_$ctoList_closure" {
     Data.Foldable.$fFoldablePar1_$ctoList_closure:
         const Data.Foldable.$fFoldablePar1_$ctoList_info;
 },
 Data.Foldable.$fFoldablePar1_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6WSi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6WSm; else goto c6WSl;
       c6WSm: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Foldable.$fFoldablePar1_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WSl: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar1_$ctoList_info" {
     Data.Foldable.$fFoldablePar1_$ctoList_info:
         const Data.Foldable.$fFoldablePar1_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.209489577 UTC

[section ""data" . Data.Foldable.$fFoldablePar1_closure" {
     Data.Foldable.$fFoldablePar1_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldablePar5_closure+2;
         const Data.Foldable.$fFoldablePar1_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldablePar1_$cfoldr_closure+3;
         const Data.Foldable.$fFoldablePar1_$cfoldr_closure+3;
         const Data.Foldable.$fFoldablePar1_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldablePar1_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldablePar4_closure+2;
         const Data.Foldable.$fFoldablePar4_closure+2;
         const Data.Foldable.$fFoldablePar1_$ctoList_closure+1;
         const Data.Foldable.$fFoldablePar1_$cnull_closure+1;
         const Data.Foldable.$fFoldablePar1_$clength_closure+1;
         const Data.Foldable.$fFoldablePar1_$celem_closure+2;
         const Data.Foldable.$fFoldablePar3_closure+2;
         const Data.Foldable.$fFoldablePar3_closure+2;
         const Data.Foldable.$fFoldablePar2_closure+2;
         const Data.Foldable.$fFoldablePar2_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.211676734 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$celem_closure" {
     Data.Foldable.$fFoldableV1_$celem_closure:
         const Data.Foldable.$fFoldableV1_$celem_info;
 },
 Data.Foldable.$fFoldableV1_$celem_entry() //  []
         { []
         }
     {offset
       c6WSx: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$celem_info" {
     Data.Foldable.$fFoldableV1_$celem_info:
         const Data.Foldable.$fFoldableV1_$celem_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.215219858 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$csum_closure" {
     Data.Foldable.$fFoldableV1_$csum_closure:
         const Data.Foldable.$fFoldableV1_$csum_info;
         const 0;
 },
 Data.Foldable.$fFoldableV1_$csum_entry() //  [R2]
         { []
         }
     {offset
       c6WSJ: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$csum_info" {
     Data.Foldable.$fFoldableV1_$csum_info:
         const Data.Foldable.$fFoldableV1_$csum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.218995574 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cminimum_closure" {
     Data.Foldable.$fFoldableV1_$cminimum_closure:
         const Data.Foldable.$fFoldableV1_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableV1_$cminimum_entry() //  []
         { []
         }
     {offset
       c6WSU: // global
           R2 = Data.Foldable.$fFoldableK2_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cminimum_info" {
     Data.Foldable.$fFoldableV1_$cminimum_info:
         const Data.Foldable.$fFoldableV1_$cminimum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+992;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.222502717 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cmaximum_closure" {
     Data.Foldable.$fFoldableV1_$cmaximum_closure:
         const Data.Foldable.$fFoldableV1_$cmaximum_info;
         const 0;
 },
 section ""relreadonly" . u6WT8_srtd" {
     u6WT8_srtd:
         const S6PH7_srt+232;
         const 97;
         const 1;
         const 4294967296;
 },
 Data.Foldable.$fFoldableV1_$cmaximum_entry() //  []
         { []
         }
     {offset
       c6WT5: // global
           R2 = Data.Foldable.$fFoldableK4_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cmaximum_info" {
     Data.Foldable.$fFoldableV1_$cmaximum_info:
         const Data.Foldable.$fFoldableV1_$cmaximum_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u6WT8_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.227118979 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cfoldl_closure" {
     Data.Foldable.$fFoldableV1_$cfoldl_closure:
         const Data.Foldable.$fFoldableV1_$cfoldl_info;
 },
 Data.Foldable.$fFoldableV1_$cfoldl_entry() //  [R3]
         { []
         }
     {offset
       c6WTi: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cfoldl_info" {
     Data.Foldable.$fFoldableV1_$cfoldl_info:
         const Data.Foldable.$fFoldableV1_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.23064528 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cfoldl1_closure" {
     Data.Foldable.$fFoldableV1_$cfoldl1_closure:
         const Data.Foldable.$fFoldableV1_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableV1_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c6WTt: // global
           R2 = Data.Foldable.$fFoldableK6_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cfoldl1_info" {
     Data.Foldable.$fFoldableV1_$cfoldl1_info:
         const Data.Foldable.$fFoldableV1_$cfoldl1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.233899761 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cfoldr'_closure" {
     Data.Foldable.$fFoldableV1_$cfoldr'_closure:
         const Data.Foldable.$fFoldableV1_$cfoldr'_info;
 },
 Data.Foldable.$fFoldableV1_$cfoldr'_entry() //  [R3]
         { []
         }
     {offset
       c6WTE: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cfoldr'_info" {
     Data.Foldable.$fFoldableV1_$cfoldr'_info:
         const Data.Foldable.$fFoldableV1_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.237194218 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$clength_closure" {
     Data.Foldable.$fFoldableV1_$clength_closure:
         const Data.Foldable.$fFoldableV1_$clength_info;
 },
 Data.Foldable.$fFoldableV1_$clength_entry() //  []
         { []
         }
     {offset
       c6WTP: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$clength_info" {
     Data.Foldable.$fFoldableV1_$clength_info:
         const Data.Foldable.$fFoldableV1_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.240831408 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cfoldr1_closure" {
     Data.Foldable.$fFoldableV1_$cfoldr1_closure:
         const Data.Foldable.$fFoldableV1_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableV1_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c6WU1: // global
           R2 = Data.Foldable.$fFoldableK8_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cfoldr1_info" {
     Data.Foldable.$fFoldableV1_$cfoldr1_info:
         const Data.Foldable.$fFoldableV1_$cfoldr1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S6PH7_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.244240272 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cnull_closure" {
     Data.Foldable.$fFoldableV1_$cnull_closure:
         const Data.Foldable.$fFoldableV1_$cnull_info;
 },
 Data.Foldable.$fFoldableV1_$cnull_entry() //  []
         { []
         }
     {offset
       c6WUc: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cnull_info" {
     Data.Foldable.$fFoldableV1_$cnull_info:
         const Data.Foldable.$fFoldableV1_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.248230226 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cfold_closure" {
     Data.Foldable.$fFoldableV1_$cfold_closure:
         const Data.Foldable.$fFoldableV1_$cfold_info;
 },
 Data.Foldable.$fFoldableV1_$cfold_entry() //  [R2]
         { []
         }
     {offset
       c6WUo: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cfold_info" {
     Data.Foldable.$fFoldableV1_$cfold_info:
         const Data.Foldable.$fFoldableV1_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.252311815 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cproduct_closure" {
     Data.Foldable.$fFoldableV1_$cproduct_closure:
         const Data.Foldable.$fFoldableV1_$cproduct_info;
         const 0;
 },
 Data.Foldable.$fFoldableV1_$cproduct_entry() //  [R2]
         { []
         }
     {offset
       c6WUz: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cproduct_info" {
     Data.Foldable.$fFoldableV1_$cproduct_info:
         const Data.Foldable.$fFoldableV1_$cproduct_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.255763672 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$ctoList_closure" {
     Data.Foldable.$fFoldableV1_$ctoList_closure:
         const Data.Foldable.$fFoldableV1_$ctoList_info;
 },
 Data.Foldable.$fFoldableV1_$ctoList_entry() //  []
         { []
         }
     {offset
       c6WUK: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$ctoList_info" {
     Data.Foldable.$fFoldableV1_$ctoList_info:
         const Data.Foldable.$fFoldableV1_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.259009668 UTC

[section ""data" . Data.Foldable.$fFoldableV1_closure" {
     Data.Foldable.$fFoldableV1_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableV1_$cfold_closure+2;
         const Data.Foldable.$fFoldableV1_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableV1_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableV1_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableV1_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableV1_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableV1_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableV1_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableV1_$ctoList_closure+1;
         const Data.Foldable.$fFoldableV1_$cnull_closure+1;
         const Data.Foldable.$fFoldableV1_$clength_closure+1;
         const Data.Foldable.$fFoldableV1_$celem_closure+3;
         const Data.Foldable.$fFoldableV1_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableV1_$cminimum_closure+2;
         const Data.Foldable.$fFoldableV1_$csum_closure+2;
         const Data.Foldable.$fFoldableV1_$cproduct_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.265114057 UTC

[section ""data" . Data.Foldable.$fFoldableArray_$cfoldMap_closure" {
     Data.Foldable.$fFoldableArray_$cfoldMap_closure:
         const Data.Foldable.$fFoldableArray_$cfoldMap_info;
 },
 w1_s6Pmh_entry() //  [R1]
         { []
         }
     {offset
       c6WV6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WV7; else goto c6WV8;
       c6WV7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WV8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w1_s6Pmh_info" {
     w1_s6Pmh_info:
         const w1_s6Pmh_entry;
         const 1;
         const 16;
 },
 sat_s6Pmq_entry() //  [R1]
         { []
         }
     {offset
       c6WVn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WVo; else goto c6WVp;
       c6WVo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WVp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_s6Pmi_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pmq_info" {
     sat_s6Pmq_info:
         const sat_s6Pmq_entry;
         const 4294967297;
         const 19;
 },
 sat_s6Pmn_entry() //  [R1]
         { []
         }
     {offset
       c6WVy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WVz; else goto c6WVA;
       c6WVz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WVA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pmn_info" {
     sat_s6Pmn_info:
         const sat_s6Pmn_entry;
         const 4294967297;
         const 19;
 },
 sat_s6Pmo_entry() //  [R1]
         { []
         }
     {offset
       c6WVB: // global
           _s6Pmo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6WVC; else goto c6WVD;
       c6WVD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6WVF; else goto c6WVE;
       c6WVF: // global
           HpAlloc = 32;
           goto c6WVC;
       c6WVC: // global
           R1 = _s6Pmo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WVE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6Pmo::P64;
           _s6Pma::P64 = P64[_s6Pmo::P64 + 16];
           _s6Pmg::P64 = P64[_s6Pmo::P64 + 24];
           _s6Pmj::I64 = I64[_s6Pmo::P64 + 32];
           I64[Hp - 24] = sat_s6Pmn_info;
           P64[Hp - 8] = _s6Pmg::P64;
           I64[Hp] = _s6Pmj::I64;
           R2 = Hp - 24;
           R1 = _s6Pma::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pmo_info" {
     sat_s6Pmo_info:
         const sat_s6Pmo_entry;
         const 4294967298;
         const 15;
 },
 $wgo_s6Pmi_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WVJ: // global
           _s6Pmj::I64 = R2;
           _s6Pmi::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c6WVK; else goto c6WVL;
       c6WVL: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6WVN; else goto c6WVM;
       c6WVN: // global
           HpAlloc = 72;
           goto c6WVK;
       c6WVK: // global
           R2 = _s6Pmj::I64;
           R1 = _s6Pmi::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WVM: // global
           if (_s6Pmj::I64 == I64[_s6Pmi::P64 + 39]) goto c6WVI; else goto c6WVH;
       c6WVI: // global
           _s6Pmh::P64 = P64[_s6Pmi::P64 + 31];
           Hp = Hp - 72;
           R1 = _s6Pmh::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6WVH: // global
           _s6Pm9::P64 = P64[_s6Pmi::P64 + 7];
           _s6Pma::P64 = P64[_s6Pmi::P64 + 15];
           _s6Pmg::P64 = P64[_s6Pmi::P64 + 23];
           I64[Hp - 64] = sat_s6Pmq_info;
           P64[Hp - 48] = _s6Pmi::P64;
           I64[Hp - 40] = _s6Pmj::I64;
           I64[Hp - 32] = sat_s6Pmo_info;
           P64[Hp - 16] = _s6Pma::P64;
           P64[Hp - 8] = _s6Pmg::P64;
           I64[Hp] = _s6Pmj::I64;
           R2 = _s6Pm9::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s6Pmi_info" {
     $wgo_s6Pmi_info:
         const $wgo_s6Pmi_entry;
         const 4294967300;
         const 8;
         const 4294967300;
 },
 Data.Foldable.$fFoldableArray_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6WVO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6WVP; else goto c6WVQ;
       c6WVP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableArray_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WVQ: // global
           I64[Sp - 24] = block_c6WUX_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6WVU; else goto c6WUY;
       u6WVU: // global
           call _c6WUX(R1) args: 0, res: 0, upd: 0;
       c6WUY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableArray_$cfoldMap_info" {
     Data.Foldable.$fFoldableArray_$cfoldMap_info:
         const Data.Foldable.$fFoldableArray_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6WUX() //  [R1]
         { []
         }
     {offset
       c6WUX: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6WVT; else goto c6WVS;
       c6WVT: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6WVS: // global
           _s6Pmg::P64 = P64[R1 + 23];
           _s6Pmf::I64 = I64[R1 + 31];
           I64[Hp - 64] = w1_s6Pmh_info;
           _s6Pm9::P64 = P64[Sp + 8];
           P64[Hp - 48] = _s6Pm9::P64;
           I64[Hp - 40] = $wgo_s6Pmi_info;
           P64[Hp - 32] = _s6Pm9::P64;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _s6Pmg::P64;
           P64[Hp - 8] = Hp - 64;
           I64[Hp] = _s6Pmf::I64;
           R2 = 0;
           R1 = Hp - 39;
           Sp = Sp + 24;
           call $wgo_s6Pmi_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WUX_info" {
     block_c6WUX_info:
         const _c6WUX;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.285936721 UTC

[section ""data" . Data.Foldable.$fFoldableArray1_closure" {
     Data.Foldable.$fFoldableArray1_closure:
         const Data.Foldable.$fFoldableArray1_info;
         const 0;
 },
 w1_s6Pms_entry() //  [R1]
         { []
         }
     {offset
       c6WWD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6WWE; else goto c6WWF;
       c6WWE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WWF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidProduct1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w1_s6Pms_info" {
     w1_s6Pms_info:
         const w1_s6Pms_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+1128;
 },
 sat_s6PmG_entry() //  [R1]
         { []
         }
     {offset
       c6WX4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WX5; else goto c6WX6;
       c6WX5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WX6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_s6Pmz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6PmG_info" {
     sat_s6PmG_info:
         const sat_s6PmG_entry;
         const 4294967297;
         const 19;
 },
 sat_s6PmE_entry() //  [R1]
         { []
         }
     {offset
       c6WXb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WXc; else goto c6WXd;
       c6WXc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WXd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6PmE_info" {
     sat_s6PmE_info:
         const sat_s6PmE_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s6Pmz_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WXh: // global
           _s6PmA::I64 = R2;
           _s6Pmz::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c6WXi; else goto c6WXj;
       c6WXj: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6WXl; else goto c6WXk;
       c6WXl: // global
           HpAlloc = 64;
           goto c6WXi;
       c6WXi: // global
           R2 = _s6PmA::I64;
           R1 = _s6Pmz::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WXk: // global
           if (_s6PmA::I64 == I64[_s6Pmz::P64 + 31]) goto c6WXg; else goto c6WXf;
       c6WXg: // global
           _s6Pms::P64 = P64[_s6Pmz::P64 + 15];
           Hp = Hp - 64;
           R1 = _s6Pms::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6WXf: // global
           _s6Pmr::P64 = P64[_s6Pmz::P64 + 7];
           _s6Pmy::P64 = P64[_s6Pmz::P64 + 23];
           I64[Hp - 56] = sat_s6PmG_info;
           P64[Hp - 40] = _s6Pmz::P64;
           I64[Hp - 32] = _s6PmA::I64;
           I64[Hp - 24] = sat_s6PmE_info;
           P64[Hp - 8] = _s6Pmy::P64;
           I64[Hp] = _s6PmA::I64;
           R2 = _s6Pmr::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s6Pmz_info" {
     $wgo_s6Pmz_info:
         const $wgo_s6Pmz_entry;
         const 4294967299;
         const 8;
         const 4294967300;
 },
 sat_s6PmH_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WXm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6WXn; else goto c6WXo;
       c6WXn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WXo: // global
           I64[Sp - 24] = block_c6WWL_info;
           _s6Pmr::P64 = P64[R1 + 7];
           _s6Pms::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s6Pmr::P64;
           P64[Sp - 8] = _s6Pms::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6WXs; else goto c6WWM;
       u6WXs: // global
           call _c6WWL(R1) args: 0, res: 0, upd: 0;
       c6WWM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PmH_info" {
     sat_s6PmH_info:
         const sat_s6PmH_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c6WWL() //  [R1]
         { []
         }
     {offset
       c6WWL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6WXr; else goto c6WXq;
       c6WXr: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6WXq: // global
           _s6Pmy::P64 = P64[R1 + 23];
           _s6Pmx::I64 = I64[R1 + 31];
           I64[Hp - 32] = $wgo_s6Pmz_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s6Pmy::P64;
           I64[Hp] = _s6Pmx::I64;
           R2 = 0;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call $wgo_s6Pmz_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WWL_info" {
     block_c6WWL_info:
         const _c6WWL;
         const 2;
         const 30;
 },
 Data.Foldable.$fFoldableArray1_entry() //  [R2]
         { []
         }
     {offset
       c6WXt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6WXx; else goto c6WXw;
       c6WXx: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableArray1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WXw: // global
           I64[Hp - 40] = w1_s6Pms_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s6PmH_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableArray1_info" {
     Data.Foldable.$fFoldableArray1_info:
         const Data.Foldable.$fFoldableArray1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6PH7_srt+1128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.302811991 UTC

[section ""data" . Data.Foldable.$w$cfold_closure" {
     Data.Foldable.$w$cfold_closure:
         const Data.Foldable.$w$cfold_info;
 },
 w1_s6PmL_entry() //  [R1]
         { []
         }
     {offset
       c6WYh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WYi; else goto c6WYj;
       c6WYi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WYj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w1_s6PmL_info" {
     w1_s6PmL_info:
         const w1_s6PmL_entry;
         const 1;
         const 16;
 },
 sat_s6PmT_entry() //  [R1]
         { []
         }
     {offset
       c6WYy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WYz; else goto c6WYA;
       c6WYz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WYA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_s6PmM_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6PmT_info" {
     sat_s6PmT_info:
         const sat_s6PmT_entry;
         const 4294967297;
         const 19;
 },
 sat_s6PmR_entry() //  [R1]
         { []
         }
     {offset
       c6WYF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WYG; else goto c6WYH;
       c6WYG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6WYH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6PmR_info" {
     sat_s6PmR_info:
         const sat_s6PmR_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s6PmM_entry() //  [R1, R2]
         { []
         }
     {offset
       c6WYL: // global
           _s6PmN::I64 = R2;
           _s6PmM::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c6WYM; else goto c6WYN;
       c6WYN: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6WYP; else goto c6WYO;
       c6WYP: // global
           HpAlloc = 64;
           goto c6WYM;
       c6WYM: // global
           R2 = _s6PmN::I64;
           R1 = _s6PmM::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6WYO: // global
           if (_s6PmN::I64 == I64[_s6PmM::P64 + 31]) goto c6WYK; else goto c6WYJ;
       c6WYK: // global
           _s6PmL::P64 = P64[_s6PmM::P64 + 23];
           Hp = Hp - 64;
           R1 = _s6PmL::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6WYJ: // global
           _s6PmI::P64 = P64[_s6PmM::P64 + 7];
           _s6PmK::P64 = P64[_s6PmM::P64 + 15];
           I64[Hp - 56] = sat_s6PmT_info;
           P64[Hp - 40] = _s6PmM::P64;
           I64[Hp - 32] = _s6PmN::I64;
           I64[Hp - 24] = sat_s6PmR_info;
           P64[Hp - 8] = _s6PmK::P64;
           I64[Hp] = _s6PmN::I64;
           R2 = _s6PmI::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s6PmM_info" {
     $wgo_s6PmM_info:
         const $wgo_s6PmM_entry;
         const 4294967299;
         const 8;
         const 4294967300;
 },
 Data.Foldable.$w$cfold_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6WYQ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6WYU; else goto c6WYT;
       c6WYU: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$w$cfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WYT: // global
           I64[Hp - 56] = w1_s6PmL_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = $wgo_s6PmM_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = Hp - 56;
           I64[Hp] = R3;
           R2 = 0;
           R1 = Hp - 31;
           call $wgo_s6PmM_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfold_info" {
     Data.Foldable.$w$cfold_info:
         const Data.Foldable.$w$cfold_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.314987022 UTC

[section ""data" . Data.Foldable.$fFoldableArray_$cfold_closure" {
     Data.Foldable.$fFoldableArray_$cfold_closure:
         const Data.Foldable.$fFoldableArray_$cfold_info;
 },
 Data.Foldable.$fFoldableArray_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c6WZs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WZt; else goto c6WZu;
       c6WZt: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableArray_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6WZu: // global
           I64[Sp - 16] = block_c6WZp_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6WZy; else goto c6WZq;
       u6WZy: // global
           call _c6WZp(R1) args: 0, res: 0, upd: 0;
       c6WZq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableArray_$cfold_info" {
     Data.Foldable.$fFoldableArray_$cfold_info:
         const Data.Foldable.$fFoldableArray_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6WZp() //  [R1]
         { []
         }
     {offset
       c6WZp: // global
           R4 = P64[R1 + 23];
           R3 = I64[R1 + 31];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Foldable.$w$cfold_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6WZp_info" {
     block_c6WZp_info:
         const _c6WZp;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.322961893 UTC

[section ""data" . Data.Foldable.$w$cmaximum_closure" {
     Data.Foldable.$w$cmaximum_closure:
         const Data.Foldable.$w$cmaximum_info;
         const 0;
 },
 x_s6Pn7_entry() //  [R1]
         { []
         }
     {offset
       c6WZY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6WZZ; else goto c6X00;
       c6WZZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6X00: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . x_s6Pn7_info" {
     x_s6Pn7_info:
         const x_s6Pn7_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s6Pn4_entry() //  [R1, R2]
         { []
         }
     {offset
       c6X04: // global
           _s6Pn5::I64 = R2;
           _s6Pn4::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto c6X05; else goto c6X06;
       c6X06: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6X08; else goto c6X07;
       c6X08: // global
           HpAlloc = 32;
           goto c6X05;
       c6X05: // global
           R2 = _s6Pn5::I64;
           R1 = _s6Pn4::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6X07: // global
           if (_s6Pn5::I64 == I64[_s6Pn4::P64 + 23]) goto c6X03; else goto c6X02;
       c6X03: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6X02: // global
           _s6Pn1::P64 = P64[_s6Pn4::P64 + 7];
           _s6Pn3::P64 = P64[_s6Pn4::P64 + 15];
           I64[Hp - 24] = x_s6Pn7_info;
           P64[Hp - 8] = _s6Pn3::P64;
           I64[Hp] = _s6Pn5::I64;
           I64[Sp - 24] = block_c6X0c_info;
           R2 = _s6Pn5::I64 + 1;
           R1 = _s6Pn4::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _s6Pn1::P64;
           Sp = Sp - 24;
           call $wgo_s6Pn4_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s6Pn4_info" {
     $wgo_s6Pn4_info:
         const $wgo_s6Pn4_entry;
         const 4294967298;
         const 8;
         const 4294967300;
 },
 _c6X0c() //  [R1]
         { []
         }
     {offset
       c6X0c: // global
           _c6WZU::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6X0i; else goto c6X0q;
       c6X0i: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6X0l; else goto c6X0k;
       c6X0l: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6X0k: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _c6WZU::P64;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6X0q: // global
           I64[Sp] = block_c6X0o_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _c6WZU::P64;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 16] = R1;
           Sp = Sp - 24;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6X0c_info" {
     block_c6X0c_info:
         const _c6X0c;
         const 2;
         const 30;
 },
 _c6X0o() //  [R1]
         { []
         }
     {offset
       c6X0o: // global
           if (R1 & 7 == 1) goto c6X0w; else goto c6X0A;
       c6X0w: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c6X0A: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6X0D; else goto c6X0C;
       c6X0D: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6X0C: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6X0o_info" {
     block_c6X0o_info:
         const _c6X0o;
         const 2;
         const 30;
 },
 Data.Foldable.$w$cmaximum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6X0M: // global
           _s6Pn3::P64 = R4;
           _s6Pn2::I64 = R3;
           _s6Pn1::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c6X0N; else goto c6X0O;
       c6X0O: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6X0Q; else goto c6X0P;
       c6X0Q: // global
           HpAlloc = 32;
           goto c6X0N;
       c6X0N: // global
           R4 = _s6Pn3::P64;
           R3 = _s6Pn2::I64;
           R2 = _s6Pn1::P64;
           R1 = Data.Foldable.$w$cmaximum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6X0P: // global
           I64[Hp - 24] = $wgo_s6Pn4_info;
           P64[Hp - 16] = _s6Pn1::P64;
           P64[Hp - 8] = _s6Pn3::P64;
           I64[Hp] = _s6Pn2::I64;
           I64[Sp - 8] = block_c6X0G_info;
           R2 = 0;
           R1 = Hp - 23;
           Sp = Sp - 8;
           call $wgo_s6Pn4_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cmaximum_info" {
     Data.Foldable.$w$cmaximum_info:
         const Data.Foldable.$w$cmaximum_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const S6PH7_srt+1144;
 },
 _c6X0G() //  [R1]
         { []
         }
     {offset
       c6X0G: // global
           if (R1 & 7 == 1) goto c6X0J; else goto c6X0K;
       c6X0J: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6X0K: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6X0G_info" {
     block_c6X0G_info:
         const _c6X0G;
         const 0;
         const 4294967326;
         const S6PH7_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.337356771 UTC

[section ""data" . Data.Foldable.$fFoldableArray_$cmaximum_closure" {
     Data.Foldable.$fFoldableArray_$cmaximum_closure:
         const Data.Foldable.$fFoldableArray_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableArray_$cmaximum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6X1G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6X1H; else goto c6X1I;
       c6X1H: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableArray_$cmaximum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6X1I: // global
           I64[Sp - 16] = block_c6X1D_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6X1M; else goto c6X1E;
       u6X1M: // global
           call _c6X1D(R1) args: 0, res: 0, upd: 0;
       c6X1E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableArray_$cmaximum_info" {
     Data.Foldable.$fFoldableArray_$cmaximum_info:
         const Data.Foldable.$fFoldableArray_$cmaximum_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S6PH7_srt+1144;
 },
 _c6X1D() //  [R1]
         { []
         }
     {offset
       c6X1D: // global
           R4 = P64[R1 + 23];
           R3 = I64[R1 + 31];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Foldable.$w$cmaximum_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6X1D_info" {
     block_c6X1D_info:
         const _c6X1D;
         const 1;
         const 4294967326;
         const S6PH7_srt+1144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.345853194 UTC

[section ""data" . Data.Foldable.$w$cminimum_closure" {
     Data.Foldable.$w$cminimum_closure:
         const Data.Foldable.$w$cminimum_info;
         const 0;
 },
 x_s6Pnt_entry() //  [R1]
         { []
         }
     {offset
       c6X2c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6X2d; else goto c6X2e;
       c6X2d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6X2e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . x_s6Pnt_info" {
     x_s6Pnt_info:
         const x_s6Pnt_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s6Pnq_entry() //  [R1, R2]
         { []
         }
     {offset
       c6X2i: // global
           _s6Pnr::I64 = R2;
           _s6Pnq::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto c6X2j; else goto c6X2k;
       c6X2k: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6X2m; else goto c6X2l;
       c6X2m: // global
           HpAlloc = 32;
           goto c6X2j;
       c6X2j: // global
           R2 = _s6Pnr::I64;
           R1 = _s6Pnq::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6X2l: // global
           if (_s6Pnr::I64 == I64[_s6Pnq::P64 + 23]) goto c6X2h; else goto c6X2g;
       c6X2h: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6X2g: // global
           _s6Pnn::P64 = P64[_s6Pnq::P64 + 7];
           _s6Pnp::P64 = P64[_s6Pnq::P64 + 15];
           I64[Hp - 24] = x_s6Pnt_info;
           P64[Hp - 8] = _s6Pnp::P64;
           I64[Hp] = _s6Pnr::I64;
           I64[Sp - 24] = block_c6X2q_info;
           R2 = _s6Pnr::I64 + 1;
           R1 = _s6Pnq::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _s6Pnn::P64;
           Sp = Sp - 24;
           call $wgo_s6Pnq_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s6Pnq_info" {
     $wgo_s6Pnq_info:
         const $wgo_s6Pnq_entry;
         const 4294967298;
         const 8;
         const 4294967300;
 },
 _c6X2q() //  [R1]
         { []
         }
     {offset
       c6X2q: // global
           _c6X28::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6X2w; else goto c6X2E;
       c6X2w: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6X2z; else goto c6X2y;
       c6X2z: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6X2y: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _c6X28::P64;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6X2E: // global
           I64[Sp] = block_c6X2C_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _c6X28::P64;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 16] = R1;
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6X2q_info" {
     block_c6X2q_info:
         const _c6X2q;
         const 2;
         const 30;
 },
 _c6X2C() //  [R1]
         { []
         }
     {offset
       c6X2C: // global
           if (R1 & 7 == 1) goto c6X2K; else goto c6X2O;
       c6X2K: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c6X2O: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6X2R; else goto c6X2Q;
       c6X2R: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6X2Q: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6X2C_info" {
     block_c6X2C_info:
         const _c6X2C;
         const 2;
         const 30;
 },
 Data.Foldable.$w$cminimum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6X30: // global
           _s6Pnp::P64 = R4;
           _s6Pno::I64 = R3;
           _s6Pnn::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c6X31; else goto c6X32;
       c6X32: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6X34; else goto c6X33;
       c6X34: // global
           HpAlloc = 32;
           goto c6X31;
       c6X31: // global
           R4 = _s6Pnp::P64;
           R3 = _s6Pno::I64;
           R2 = _s6Pnn::P64;
           R1 = Data.Foldable.$w$cminimum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6X33: // global
           I64[Hp - 24] = $wgo_s6Pnq_info;
           P64[Hp - 16] = _s6Pnn::P64;
           P64[Hp - 8] = _s6Pnp::P64;
           I64[Hp] = _s6Pno::I64;
           I64[Sp - 8] = block_c6X2U_info;
           R2 = 0;
           R1 = Hp - 23;
           Sp = Sp - 8;
           call $wgo_s6Pnq_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cminimum_info" {
     Data.Foldable.$w$cminimum_info:
         const Data.Foldable.$w$cminimum_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const S6PH7_srt+1168;
 },
 _c6X2U() //  [R1]
         { []
         }
     {offset
       c6X2U: // global
           if (R1 & 7 == 1) goto c6X2X; else goto c6X2Y;
       c6X2X: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6X2Y: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6X2U_info" {
     block_c6X2U_info:
         const _c6X2U;
         const 0;
         const 4294967326;
         const S6PH7_srt+1176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.35976776 UTC

[section ""data" . Data.Foldable.$fFoldableArray_$cminimum_closure" {
     Data.Foldable.$fFoldableArray_$cminimum_closure:
         const Data.Foldable.$fFoldableArray_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableArray_$cminimum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6X3U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6X3V; else goto c6X3W;
       c6X3V: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableArray_$cminimum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6X3W: // global
           I64[Sp - 16] = block_c6X3R_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6X40; else goto c6X3S;
       u6X40: // global
           call _c6X3R(R1) args: 0, res: 0, upd: 0;
       c6X3S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableArray_$cminimum_info" {
     Data.Foldable.$fFoldableArray_$cminimum_info:
         const Data.Foldable.$fFoldableArray_$cminimum_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S6PH7_srt+1168;
 },
 _c6X3R() //  [R1]
         { []
         }
     {offset
       c6X3R: // global
           R4 = P64[R1 + 23];
           R3 = I64[R1 + 31];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Foldable.$w$cminimum_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6X3R_info" {
     block_c6X3R_info:
         const _c6X3R;
         const 1;
         const 4294967326;
         const S6PH7_srt+1168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.368936296 UTC

[section ""data" . Data.Foldable.$fFoldableArray2_closure" {
     Data.Foldable.$fFoldableArray2_closure:
         const Data.Foldable.$fFoldableArray2_info;
         const 0;
 },
 w1_s6PnK_entry() //  [R1]
         { []
         }
     {offset
       c6X4i: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6X4j; else goto c6X4k;
       c6X4j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6X4k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w1_s6PnK_info" {
     w1_s6PnK_info:
         const w1_s6PnK_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+1192;
 },
 sat_s6PnY_entry() //  [R1]
         { []
         }
     {offset
       c6X4J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6X4K; else goto c6X4L;
       c6X4K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6X4L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_s6PnR_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6PnY_info" {
     sat_s6PnY_info:
         const sat_s6PnY_entry;
         const 4294967297;
         const 19;
 },
 sat_s6PnW_entry() //  [R1]
         { []
         }
     {offset
       c6X4Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6X4R; else goto c6X4S;
       c6X4R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6X4S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6PnW_info" {
     sat_s6PnW_info:
         const sat_s6PnW_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s6PnR_entry() //  [R1, R2]
         { []
         }
     {offset
       c6X4W: // global
           _s6PnS::I64 = R2;
           _s6PnR::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c6X4X; else goto c6X4Y;
       c6X4Y: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6X50; else goto c6X4Z;
       c6X50: // global
           HpAlloc = 64;
           goto c6X4X;
       c6X4X: // global
           R2 = _s6PnS::I64;
           R1 = _s6PnR::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6X4Z: // global
           if (_s6PnS::I64 == I64[_s6PnR::P64 + 31]) goto c6X4V; else goto c6X4U;
       c6X4V: // global
           _s6PnK::P64 = P64[_s6PnR::P64 + 15];
           Hp = Hp - 64;
           R1 = _s6PnK::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6X4U: // global
           _s6PnJ::P64 = P64[_s6PnR::P64 + 7];
           _s6PnQ::P64 = P64[_s6PnR::P64 + 23];
           I64[Hp - 56] = sat_s6PnY_info;
           P64[Hp - 40] = _s6PnR::P64;
           I64[Hp - 32] = _s6PnS::I64;
           I64[Hp - 24] = sat_s6PnW_info;
           P64[Hp - 8] = _s6PnQ::P64;
           I64[Hp] = _s6PnS::I64;
           R2 = _s6PnJ::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s6PnR_info" {
     $wgo_s6PnR_info:
         const $wgo_s6PnR_entry;
         const 4294967299;
         const 8;
         const 4294967300;
 },
 sat_s6PnZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c6X51: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6X52; else goto c6X53;
       c6X52: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6X53: // global
           I64[Sp - 24] = block_c6X4q_info;
           _s6PnJ::P64 = P64[R1 + 7];
           _s6PnK::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s6PnJ::P64;
           P64[Sp - 8] = _s6PnK::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6X57; else goto c6X4r;
       u6X57: // global
           call _c6X4q(R1) args: 0, res: 0, upd: 0;
       c6X4r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PnZ_info" {
     sat_s6PnZ_info:
         const sat_s6PnZ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c6X4q() //  [R1]
         { []
         }
     {offset
       c6X4q: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6X56; else goto c6X55;
       c6X56: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6X55: // global
           _s6PnQ::P64 = P64[R1 + 23];
           _s6PnP::I64 = I64[R1 + 31];
           I64[Hp - 32] = $wgo_s6PnR_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s6PnQ::P64;
           I64[Hp] = _s6PnP::I64;
           R2 = 0;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call $wgo_s6PnR_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6X4q_info" {
     block_c6X4q_info:
         const _c6X4q;
         const 2;
         const 30;
 },
 Data.Foldable.$fFoldableArray2_entry() //  [R2]
         { []
         }
     {offset
       c6X58: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6X5c; else goto c6X5b;
       c6X5c: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableArray2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6X5b: // global
           I64[Hp - 40] = w1_s6PnK_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s6PnZ_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableArray2_info" {
     Data.Foldable.$fFoldableArray2_info:
         const Data.Foldable.$fFoldableArray2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6PH7_srt+1192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.386609354 UTC

[section ""data" . Data.Foldable.$fFoldableArray_$celem_closure" {
     Data.Foldable.$fFoldableArray_$celem_closure:
         const Data.Foldable.$fFoldableArray_$celem_info;
 },
 f_s6Po2_entry() //  [R1]
         { []
         }
     {offset
       c6X5W: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6X5X; else goto c6X5Y;
       c6X5X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6X5Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6Po2_info" {
     f_s6Po2_info:
         const f_s6Po2_entry;
         const 2;
         const 18;
 },
 sat_s6Poe_entry() //  [R1]
         { []
         }
     {offset
       c6X6l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6X6m; else goto c6X6n;
       c6X6m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6X6n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Poe_info" {
     sat_s6Poe_info:
         const sat_s6Poe_entry;
         const 4294967297;
         const 19;
 },
 sat_s6Poh_entry() //  [R1, R2]
         { []
         }
     {offset
       c6X6o: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6X6p; else goto c6X6q;
       c6X6p: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6X6q: // global
           I64[Sp - 16] = block_c6X64_info;
           _s6Po2::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s6Po2::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6X6Q; else goto c6X65;
       u6X6Q: // global
           call _c6X64(R1) args: 0, res: 0, upd: 0;
       c6X65: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Poh_info" {
     sat_s6Poh_info:
         const sat_s6Poh_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c6X64() //  [R1]
         { []
         }
     {offset
       c6X64: // global
           P64[Sp - 16] = P64[R1 + 23];
           I64[Sp - 8] = 0;
           I64[Sp] = I64[R1 + 31];
           Sp = Sp - 16;
           call _c6X6c() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6X64_info" {
     block_c6X64_info:
         const _c6X64;
         const 1;
         const 30;
 },
 _c6X6c() //  []
         { []
         }
     {offset
       c6X6c: // global
           Hp = Hp + 32;
           _s6Poa::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c6X6u; else goto c6X6t;
       c6X6u: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_c6X6b_info;
           R1 = _s6Poa::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c6X6t: // global
           if (_s6Poa::I64 == I64[Sp + 16]) goto c6X6I; else goto c6X6x;
       c6X6I: // global
           Hp = Hp - 32;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6X6x: // global
           I64[Hp - 24] = sat_s6Poe_info;
           P64[Hp - 8] = P64[Sp];
           I64[Hp] = _s6Poa::I64;
           I64[Sp - 8] = block_c6X6v_info;
           R2 = Hp - 24;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6X6b() //  [R1]
         { []
         }
     {offset
       c6X6b: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c6X6c() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6X6b_info" {
     block_c6X6b_info:
         const _c6X6b;
         const 388;
         const 30;
 },
 _c6X6v() //  [R1]
         { []
         }
     {offset
       c6X6v: // global
           if (R1 & 7 == 1) goto c6X6D; else goto c6X6H;
       c6X6D: // global
           I64[Sp + 16] = I64[Sp + 16] + 1;
           Sp = Sp + 8;
           call _c6X6c() args: 0, res: 0, upd: 0;
       c6X6H: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6X6v_info" {
     block_c6X6v_info:
         const _c6X6v;
         const 388;
         const 30;
 },
 Data.Foldable.$fFoldableArray_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       c6X6S: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6X6W; else goto c6X6V;
       c6X6W: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableArray_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6X6V: // global
           I64[Hp - 40] = f_s6Po2_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6Poh_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableArray_$celem_info" {
     Data.Foldable.$fFoldableArray_$celem_info:
         const Data.Foldable.$fFoldableArray_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.401931776 UTC

[section ""data" . Data.Foldable.$fFoldableArray_closure" {
     Data.Foldable.$fFoldableArray_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableArray_$cfold_closure+2;
         const Data.Foldable.$fFoldableArray_$cfoldMap_closure+3;
         const GHC.Arr.foldrElems_closure+3;
         const GHC.Arr.foldrElems'_closure+3;
         const GHC.Arr.foldlElems_closure+3;
         const GHC.Arr.foldlElems'_closure+3;
         const GHC.Arr.foldr1Elems_closure+2;
         const GHC.Arr.foldl1Elems_closure+2;
         const GHC.Arr.elems_closure+1;
         const Data.Foldable.$fFoldableArray_$cnull_closure+1;
         const GHC.Arr.numElements_closure+1;
         const Data.Foldable.$fFoldableArray_$celem_closure+2;
         const Data.Foldable.$fFoldableArray_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableArray_$cminimum_closure+2;
         const Data.Foldable.$fFoldableArray2_closure+1;
         const Data.Foldable.$fFoldableArray1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.405656809 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$celem_closure" {
     Data.Foldable.$fFoldable(,)_$celem_closure:
         const Data.Foldable.$fFoldable(,)_$celem_info;
 },
 f_s6Pok_entry() //  [R1]
         { []
         }
     {offset
       c6X7K: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6X7L; else goto c6X7M;
       c6X7L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6X7M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6Pok_info" {
     f_s6Pok_info:
         const f_s6Pok_entry;
         const 2;
         const 18;
 },
 sat_s6Pop_entry() //  [R1, R2]
         { []
         }
     {offset
       c6X7V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6X7W; else goto c6X7X;
       c6X7W: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6X7X: // global
           I64[Sp - 16] = block_c6X7S_info;
           _s6Pok::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s6Pok::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6X81; else goto c6X7T;
       u6X81: // global
           call _c6X7S(R1) args: 0, res: 0, upd: 0;
       c6X7T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pop_info" {
     sat_s6Pop_info:
         const sat_s6Pop_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c6X7S() //  [R1]
         { []
         }
     {offset
       c6X7S: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6X7S_info" {
     block_c6X7S_info:
         const _c6X7S;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldable(,)_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       c6X82: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6X86; else goto c6X85;
       c6X86: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6X85: // global
           I64[Hp - 40] = f_s6Pok_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6Pop_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$celem_info" {
     Data.Foldable.$fFoldable(,)_$celem_info:
         const Data.Foldable.$fFoldable(,)_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.415104561 UTC

[section ""data" . Data.Foldable.$fFoldable(,)2_closure" {
     Data.Foldable.$fFoldable(,)2_closure:
         const Data.Foldable.$fFoldable(,)2_info;
 },
 Data.Foldable.$fFoldable(,)2_entry() //  [R2, R3]
         { []
         }
     {offset
       c6X8x: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6X8y; else goto c6X8z;
       c6X8y: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6X8z: // global
           I64[Sp - 8] = block_c6X8u_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6X8D; else goto c6X8v;
       u6X8D: // global
           call _c6X8u(R1) args: 0, res: 0, upd: 0;
       c6X8v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)2_info" {
     Data.Foldable.$fFoldable(,)2_info:
         const Data.Foldable.$fFoldable(,)2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6X8u() //  [R1]
         { []
         }
     {offset
       c6X8u: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6X8u_info" {
     block_c6X8u_info:
         const _c6X8u;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.421920978 UTC

[section ""data" . Data.Foldable.$fFoldable(,)3_closure" {
     Data.Foldable.$fFoldable(,)3_closure:
         const Data.Foldable.$fFoldable(,)3_info;
 },
 Data.Foldable.$fFoldable(,)3_entry() //  [R2]
         { []
         }
     {offset
       c6X8U: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6X8V; else goto c6X8W;
       c6X8V: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6X8W: // global
           I64[Sp - 8] = block_c6X8R_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6X90; else goto c6X8S;
       u6X90: // global
           call _c6X8R(R1) args: 0, res: 0, upd: 0;
       c6X8S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)3_info" {
     Data.Foldable.$fFoldable(,)3_info:
         const Data.Foldable.$fFoldable(,)3_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6X8R() //  [R1]
         { []
         }
     {offset
       c6X8R: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6X8R_info" {
     block_c6X8R_info:
         const _c6X8R;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.426943211 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$cminimum_closure" {
     Data.Foldable.$fFoldable(,)_$cminimum_closure:
         const Data.Foldable.$fFoldable(,)_$cminimum_info;
 },
 Data.Foldable.$fFoldable(,)_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c6X9e: // global
           R2 = R3;
           call Data.Foldable.$fFoldable(,)3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$cminimum_info" {
     Data.Foldable.$fFoldable(,)_$cminimum_info:
         const Data.Foldable.$fFoldable(,)_$cminimum_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.430756017 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$cnull_closure" {
     Data.Foldable.$fFoldable(,)_$cnull_closure:
         const Data.Foldable.$fFoldable(,)_$cnull_info;
 },
 Data.Foldable.$fFoldable(,)_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6X9s: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6X9t; else goto c6X9u;
       c6X9t: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6X9u: // global
           I64[Sp - 8] = block_c6X9p_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6X9y; else goto c6X9q;
       u6X9y: // global
           call _c6X9p() args: 0, res: 0, upd: 0;
       c6X9q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$cnull_info" {
     Data.Foldable.$fFoldable(,)_$cnull_info:
         const Data.Foldable.$fFoldable(,)_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6X9p() //  []
         { []
         }
     {offset
       c6X9p: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6X9p_info" {
     block_c6X9p_info:
         const _c6X9p;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.436092269 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$cfoldr1_closure" {
     Data.Foldable.$fFoldable(,)_$cfoldr1_closure:
         const Data.Foldable.$fFoldable(,)_$cfoldr1_info;
 },
 Data.Foldable.$fFoldable(,)_$cfoldr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6X9Q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6X9R; else goto c6X9S;
       c6X9R: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$cfoldr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6X9S: // global
           I64[Sp - 8] = block_c6X9N_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6X9W; else goto c6X9O;
       u6X9W: // global
           call _c6X9N(R1) args: 0, res: 0, upd: 0;
       c6X9O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$cfoldr1_info" {
     Data.Foldable.$fFoldable(,)_$cfoldr1_info:
         const Data.Foldable.$fFoldable(,)_$cfoldr1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6X9N() //  [R1]
         { []
         }
     {offset
       c6X9N: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6X9N_info" {
     block_c6X9N_info:
         const _c6X9N;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.441972925 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$cfoldl'_closure" {
     Data.Foldable.$fFoldable(,)_$cfoldl'_closure:
         const Data.Foldable.$fFoldable(,)_$cfoldl'_info;
 },
 Data.Foldable.$fFoldable(,)_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Xad: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Xae; else goto c6Xaf;
       c6Xae: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Xaf: // global
           I64[Sp - 24] = block_c6Xaa_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6Xaj; else goto c6Xab;
       u6Xaj: // global
           call _c6Xaa(R1) args: 0, res: 0, upd: 0;
       c6Xab: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$cfoldl'_info" {
     Data.Foldable.$fFoldable(,)_$cfoldl'_info:
         const Data.Foldable.$fFoldable(,)_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Xaa() //  [R1]
         { []
         }
     {offset
       c6Xaa: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xaa_info" {
     block_c6Xaa_info:
         const _c6Xaa;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.448351422 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$clength_closure" {
     Data.Foldable.$fFoldable(,)_$clength_closure:
         const Data.Foldable.$fFoldable(,)_$clength_info;
 },
 Data.Foldable.$fFoldable(,)_$clength_entry() //  [R2]
         { []
         }
     {offset
       c6XaA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XaB; else goto c6XaC;
       c6XaB: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XaC: // global
           I64[Sp - 8] = block_c6Xax_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XaG; else goto c6Xay;
       u6XaG: // global
           call _c6Xax() args: 0, res: 0, upd: 0;
       c6Xay: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$clength_info" {
     Data.Foldable.$fFoldable(,)_$clength_info:
         const Data.Foldable.$fFoldable(,)_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Xax() //  []
         { []
         }
     {offset
       c6Xax: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xax_info" {
     block_c6Xax_info:
         const _c6Xax;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.454529121 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$cfold_closure" {
     Data.Foldable.$fFoldable(,)_$cfold_closure:
         const Data.Foldable.$fFoldable(,)_$cfold_info;
 },
 Data.Foldable.$fFoldable(,)_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XaY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XaZ; else goto c6Xb0;
       c6XaZ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Xb0: // global
           I64[Sp - 8] = block_c6XaV_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Xb4; else goto c6XaW;
       u6Xb4: // global
           call _c6XaV(R1) args: 0, res: 0, upd: 0;
       c6XaW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$cfold_info" {
     Data.Foldable.$fFoldable(,)_$cfold_info:
         const Data.Foldable.$fFoldable(,)_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6XaV() //  [R1]
         { []
         }
     {offset
       c6XaV: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XaV_info" {
     block_c6XaV_info:
         const _c6XaV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.459985743 UTC

[section ""data" . Data.Foldable.$fFoldable(,)1_closure" {
     Data.Foldable.$fFoldable(,)1_closure:
         const Data.Foldable.$fFoldable(,)1_info;
 },
 Data.Foldable.$fFoldable(,)1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Xbl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Xbm; else goto c6Xbn;
       c6Xbm: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Xbn: // global
           I64[Sp - 8] = block_c6Xbi_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Xbr; else goto c6Xbj;
       u6Xbr: // global
           call _c6Xbi(R1) args: 0, res: 0, upd: 0;
       c6Xbj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)1_info" {
     Data.Foldable.$fFoldable(,)1_info:
         const Data.Foldable.$fFoldable(,)1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6Xbi() //  [R1]
         { []
         }
     {offset
       c6Xbi: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xbi_info" {
     block_c6Xbi_info:
         const _c6Xbi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.466100728 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$ctoList_closure" {
     Data.Foldable.$fFoldable(,)_$ctoList_closure:
         const Data.Foldable.$fFoldable(,)_$ctoList_info;
 },
 Data.Foldable.$fFoldable(,)_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6XbI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XbM; else goto c6XbN;
       c6XbM: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XbN: // global
           I64[Sp - 8] = block_c6XbF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XbR; else goto c6XbG;
       u6XbR: // global
           call _c6XbF(R1) args: 0, res: 0, upd: 0;
       c6XbG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$ctoList_info" {
     Data.Foldable.$fFoldable(,)_$ctoList_info:
         const Data.Foldable.$fFoldable(,)_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6XbF() //  [R1]
         { []
         }
     {offset
       c6XbF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6XbQ; else goto c6XbP;
       c6XbQ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6XbP: // global
           _s6Pp6::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s6Pp6::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XbF_info" {
     block_c6XbF_info:
         const _c6XbF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.471541799 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_closure" {
     Data.Foldable.$fFoldable(,)_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldable(,)_$cfold_closure+2;
         const Data.Foldable.$fFoldable(,)_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldable(,)_$cfoldr_closure+3;
         const Data.Foldable.$fFoldable(,)_$cfoldr_closure+3;
         const Data.Foldable.$fFoldable(,)_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldable(,)_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldable(,)_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldable(,)_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldable(,)_$ctoList_closure+1;
         const Data.Foldable.$fFoldable(,)_$cnull_closure+1;
         const Data.Foldable.$fFoldable(,)_$clength_closure+1;
         const Data.Foldable.$fFoldable(,)_$celem_closure+2;
         const Data.Foldable.$fFoldable(,)_$cminimum_closure+2;
         const Data.Foldable.$fFoldable(,)_$cminimum_closure+2;
         const Data.Foldable.$fFoldable(,)2_closure+2;
         const Data.Foldable.$fFoldable(,)1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.476048738 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$celem_closure" {
     Data.Foldable.$fFoldableEither_$celem_closure:
         const Data.Foldable.$fFoldableEither_$celem_info;
 },
 ds_s6Pp9_entry() //  [R1]
         { []
         }
     {offset
       c6Xcb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Xcc; else goto c6Xcd;
       c6Xcc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Xcd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s6Pp9_info" {
     ds_s6Pp9_info:
         const ds_s6Pp9_entry;
         const 2;
         const 18;
 },
 sat_s6Ppe_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Xcq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Xcr; else goto c6Xcs;
       c6Xcr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Xcs: // global
           I64[Sp - 16] = block_c6Xcj_info;
           _s6Pp9::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s6Pp9::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6Xcz; else goto c6Xck;
       u6Xcz: // global
           call _c6Xcj(R1) args: 0, res: 0, upd: 0;
       c6Xck: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Ppe_info" {
     sat_s6Ppe_info:
         const sat_s6Ppe_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c6Xcj() //  [R1]
         { []
         }
     {offset
       c6Xcj: // global
           if (R1 & 7 == 1) goto c6Xcn; else goto c6Xco;
       c6Xcn: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Xco: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xcj_info" {
     block_c6Xcj_info:
         const _c6Xcj;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableEither_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XcA: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6XcE; else goto c6XcD;
       c6XcE: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XcD: // global
           I64[Hp - 40] = ds_s6Pp9_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6Ppe_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$celem_info" {
     Data.Foldable.$fFoldableEither_$celem_info:
         const Data.Foldable.$fFoldableEither_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.485774833 UTC

[section ""data" . Data.Foldable.$fFoldableEither2_closure" {
     Data.Foldable.$fFoldableEither2_closure:
         const Data.Foldable.$fFoldableEither2_info;
         const 0;
 },
 Data.Foldable.$fFoldableEither2_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Xdc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Xdd; else goto c6Xde;
       c6Xdd: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Xde: // global
           I64[Sp - 16] = block_c6Xd5_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6Xdl; else goto c6Xd6;
       u6Xdl: // global
           call _c6Xd5(R1) args: 0, res: 0, upd: 0;
       c6Xd6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither2_info" {
     Data.Foldable.$fFoldableEither2_info:
         const Data.Foldable.$fFoldableEither2_entry;
         const 0;
         const 1152921508901814286;
         const 8589934607;
         const S6PH7_srt+984;
 },
 _c6Xd5() //  [R1]
         { []
         }
     {offset
       c6Xd5: // global
           if (R1 & 7 == 1) goto c6Xd9; else goto c6Xda;
       c6Xd9: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
       c6Xda: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xd5_info" {
     block_c6Xd5_info:
         const _c6Xd5;
         const 1;
         const 4294967326;
         const S6PH7_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.491685506 UTC

[section ""data" . Data.Foldable.$fFoldableEither3_closure" {
     Data.Foldable.$fFoldableEither3_closure:
         const Data.Foldable.$fFoldableEither3_info;
         const 0;
 },
 Data.Foldable.$fFoldableEither3_entry() //  [R2]
         { []
         }
     {offset
       c6XdI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XdJ; else goto c6XdK;
       c6XdJ: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XdK: // global
           I64[Sp - 8] = block_c6XdB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XdR; else goto c6XdC;
       u6XdR: // global
           call _c6XdB(R1) args: 0, res: 0, upd: 0;
       c6XdC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither3_info" {
     Data.Foldable.$fFoldableEither3_info:
         const Data.Foldable.$fFoldableEither3_entry;
         const 0;
         const 141733920782;
         const 4294967301;
         const S6PH7_srt+1176;
 },
 _c6XdB() //  [R1]
         { []
         }
     {offset
       c6XdB: // global
           if (R1 & 7 == 1) goto c6XdF; else goto c6XdG;
       c6XdF: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XdG: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XdB_info" {
     block_c6XdB_info:
         const _c6XdB;
         const 0;
         const 4294967326;
         const S6PH7_srt+1176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.497088223 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$cminimum_closure" {
     Data.Foldable.$fFoldableEither_$cminimum_closure:
         const Data.Foldable.$fFoldableEither_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableEither_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c6Xe7: // global
           R2 = R3;
           call Data.Foldable.$fFoldableEither3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$cminimum_info" {
     Data.Foldable.$fFoldableEither_$cminimum_info:
         const Data.Foldable.$fFoldableEither_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.501928246 UTC

[section ""data" . Data.Foldable.$fFoldableEither4_closure" {
     Data.Foldable.$fFoldableEither4_closure:
         const Data.Foldable.$fFoldableEither4_info;
         const 0;
 },
 Data.Foldable.$fFoldableEither4_entry() //  [R2]
         { []
         }
     {offset
       c6Xep: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Xeq; else goto c6Xer;
       c6Xeq: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Xer: // global
           I64[Sp - 8] = block_c6Xei_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Xey; else goto c6Xej;
       u6Xey: // global
           call _c6Xei(R1) args: 0, res: 0, upd: 0;
       c6Xej: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither4_info" {
     Data.Foldable.$fFoldableEither4_info:
         const Data.Foldable.$fFoldableEither4_entry;
         const 0;
         const 2203318222862;
         const 4294967301;
         const S6PH7_srt+1152;
 },
 _c6Xei() //  [R1]
         { []
         }
     {offset
       c6Xei: // global
           if (R1 & 7 == 1) goto c6Xem; else goto c6Xen;
       c6Xem: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Xen: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xei_info" {
     block_c6Xei_info:
         const _c6Xei;
         const 0;
         const 4294967326;
         const S6PH7_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.507267731 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$cmaximum_closure" {
     Data.Foldable.$fFoldableEither_$cmaximum_closure:
         const Data.Foldable.$fFoldableEither_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableEither_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c6XeO: // global
           R2 = R3;
           call Data.Foldable.$fFoldableEither4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$cmaximum_info" {
     Data.Foldable.$fFoldableEither_$cmaximum_info:
         const Data.Foldable.$fFoldableEither_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+1224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.511483582 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$cfoldr1_closure" {
     Data.Foldable.$fFoldableEither_$cfoldr1_closure:
         const Data.Foldable.$fFoldableEither_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableEither_$cfoldr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Xf6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Xf7; else goto c6Xf8;
       c6Xf7: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$cfoldr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Xf8: // global
           I64[Sp - 8] = block_c6XeZ_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Xff; else goto c6Xf0;
       u6Xff: // global
           call _c6XeZ(R1) args: 0, res: 0, upd: 0;
       c6Xf0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$cfoldr1_info" {
     Data.Foldable.$fFoldableEither_$cfoldr1_info:
         const Data.Foldable.$fFoldableEither_$cfoldr1_entry;
         const 0;
         const 9007203549708302;
         const 8589934607;
         const S6PH7_srt+1064;
 },
 _c6XeZ() //  [R1]
         { []
         }
     {offset
       c6XeZ: // global
           if (R1 & 7 == 1) goto c6Xf3; else goto c6Xf4;
       c6Xf3: // global
           R1 = Data.Foldable.$fFoldable:.:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Xf4: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XeZ_info" {
     block_c6XeZ_info:
         const _c6XeZ;
         const 0;
         const 4294967326;
         const S6PH7_srt+1064;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.517306922 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$cfoldl'_closure" {
     Data.Foldable.$fFoldableEither_$cfoldl'_closure:
         const Data.Foldable.$fFoldableEither_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableEither_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6XfC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6XfD; else goto c6XfE;
       c6XfD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XfE: // global
           I64[Sp - 24] = block_c6Xfv_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6XfL; else goto c6Xfw;
       u6XfL: // global
           call _c6Xfv(R1) args: 0, res: 0, upd: 0;
       c6Xfw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$cfoldl'_info" {
     Data.Foldable.$fFoldableEither_$cfoldl'_info:
         const Data.Foldable.$fFoldableEither_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Xfv() //  [R1]
         { []
         }
     {offset
       c6Xfv: // global
           _s6PpA::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6Xfz; else goto c6XfA;
       c6Xfz: // global
           R1 = _s6PpA::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XfA: // global
           R3 = P64[R1 + 6];
           R2 = _s6PpA::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xfv_info" {
     block_c6Xfv_info:
         const _c6Xfv;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.523144188 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$cfoldl1_closure" {
     Data.Foldable.$fFoldableEither_$cfoldl1_closure:
         const Data.Foldable.$fFoldableEither_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableEither_$cfoldl1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Xg8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Xg9; else goto c6Xga;
       c6Xg9: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$cfoldl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Xga: // global
           I64[Sp - 8] = block_c6Xg1_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Xgh; else goto c6Xg2;
       u6Xgh: // global
           call _c6Xg1(R1) args: 0, res: 0, upd: 0;
       c6Xg2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$cfoldl1_info" {
     Data.Foldable.$fFoldableEither_$cfoldl1_info:
         const Data.Foldable.$fFoldableEither_$cfoldl1_entry;
         const 0;
         const 2251804108652558;
         const 8589934607;
         const S6PH7_srt+1088;
 },
 _c6Xg1() //  [R1]
         { []
         }
     {offset
       c6Xg1: // global
           if (R1 & 7 == 1) goto c6Xg5; else goto c6Xg6;
       c6Xg5: // global
           R1 = Data.Foldable.$fFoldable:.:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Xg6: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xg1_info" {
     block_c6Xg1_info:
         const _c6Xg1;
         const 0;
         const 4294967326;
         const S6PH7_srt+1088;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.530019179 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$cfold_closure" {
     Data.Foldable.$fFoldableEither_$cfold_closure:
         const Data.Foldable.$fFoldableEither_$cfold_info;
 },
 Data.Foldable.$fFoldableEither_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XgE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XgF; else goto c6XgG;
       c6XgF: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XgG: // global
           I64[Sp - 16] = block_c6Xgx_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6XgN; else goto c6Xgy;
       u6XgN: // global
           call _c6Xgx(R1) args: 0, res: 0, upd: 0;
       c6Xgy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$cfold_info" {
     Data.Foldable.$fFoldableEither_$cfold_info:
         const Data.Foldable.$fFoldableEither_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6Xgx() //  [R1]
         { []
         }
     {offset
       c6Xgx: // global
           if (R1 & 7 == 1) goto c6XgB; else goto c6XgC;
       c6XgB: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c6XgC: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xgx_info" {
     block_c6Xgx_info:
         const _c6Xgx;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.536008818 UTC

[section ""data" . Data.Foldable.$fFoldableEither1_closure" {
     Data.Foldable.$fFoldableEither1_closure:
         const Data.Foldable.$fFoldableEither1_info;
         const 0;
 },
 Data.Foldable.$fFoldableEither1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Xha: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Xhb; else goto c6Xhc;
       c6Xhb: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Xhc: // global
           I64[Sp - 16] = block_c6Xh3_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6Xhj; else goto c6Xh4;
       u6Xhj: // global
           call _c6Xh3(R1) args: 0, res: 0, upd: 0;
       c6Xh4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither1_info" {
     Data.Foldable.$fFoldableEither1_info:
         const Data.Foldable.$fFoldableEither1_entry;
         const 0;
         const 1152921508901814286;
         const 8589934607;
         const S6PH7_srt+1024;
 },
 _c6Xh3() //  [R1]
         { []
         }
     {offset
       c6Xh3: // global
           if (R1 & 7 == 1) goto c6Xh7; else goto c6Xh8;
       c6Xh7: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
       c6Xh8: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xh3_info" {
     block_c6Xh3_info:
         const _c6Xh3;
         const 1;
         const 4294967326;
         const S6PH7_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.54250462 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$ctoList_closure" {
     Data.Foldable.$fFoldableEither_$ctoList_closure:
         const Data.Foldable.$fFoldableEither_$ctoList_info;
 },
 Data.Foldable.$fFoldableEither_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6XhG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XhH; else goto c6XhI;
       c6XhH: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XhI: // global
           I64[Sp - 8] = block_c6Xhz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XhS; else goto c6XhA;
       u6XhS: // global
           call _c6Xhz(R1) args: 0, res: 0, upd: 0;
       c6XhA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$ctoList_info" {
     Data.Foldable.$fFoldableEither_$ctoList_info:
         const Data.Foldable.$fFoldableEither_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Xhz() //  [R1]
         { []
         }
     {offset
       c6Xhz: // global
           if (R1 & 7 == 1) goto c6XhD; else goto c6XhE;
       c6XhD: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6XhE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6XhR; else goto c6XhQ;
       c6XhR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6XhQ: // global
           _s6PpX::P64 = P64[R1 + 6];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s6PpX::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xhz_info" {
     block_c6Xhz_info:
         const _c6Xhz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.547982669 UTC

[section ""data" . Data.Foldable.$fFoldableEither_closure" {
     Data.Foldable.$fFoldableEither_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableEither_$cfold_closure+2;
         const Data.Foldable.$fFoldableEither_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableEither_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableEither_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableEither_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableEither_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableEither_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableEither_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableEither_$ctoList_closure+1;
         const Data.Either.isLeft_closure+1;
         const Data.Foldable.$fFoldableEither_$clength_closure+1;
         const Data.Foldable.$fFoldableEither_$celem_closure+2;
         const Data.Foldable.$fFoldableEither_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableEither_$cminimum_closure+2;
         const Data.Foldable.$fFoldableEither2_closure+2;
         const Data.Foldable.$fFoldableEither1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.553713584 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$celem_closure" {
     Data.Foldable.$fFoldableNonEmpty_$celem_closure:
         const Data.Foldable.$fFoldableNonEmpty_$celem_info;
 },
 f_s6Pq0_entry() //  [R1]
         { []
         }
     {offset
       c6Xif: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Xig; else goto c6Xih;
       c6Xig: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Xih: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6Pq0_info" {
     f_s6Pq0_info:
         const f_s6Pq0_entry;
         const 2;
         const 18;
 },
 sat_s6Pqg_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Xiu: // global
           _s6Pq1::P64 = R2;
           _s6Pqg::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c6Xiv; else goto c6Xiw;
       c6Xiw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Xiy; else goto c6Xix;
       c6Xiy: // global
           HpAlloc = 24;
           goto c6Xiv;
       c6Xiv: // global
           R2 = _s6Pq1::P64;
           R1 = _s6Pqg::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Xix: // global
           _s6Pq0::P64 = P64[_s6Pqg::P64 + 7];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s6Pq1::P64;
           I64[Sp - 24] = block_c6Xio_info;
           R2 = Hp - 16;
           R1 = _s6Pq0::P64;
           P64[Sp - 16] = _s6Pq0::P64;
           P64[Sp - 8] = _s6Pq1::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pqg_info" {
     sat_s6Pqg_info:
         const sat_s6Pqg_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c6Xio() //  [R1]
         { []
         }
     {offset
       c6Xio: // global
           if (R1 & 7 == 1) goto c6Xir; else goto u6Xjg;
       c6Xir: // global
           I64[Sp] = block_c6XiB_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u6Xjk; else goto c6XiD;
       u6Xjk: // global
           call _c6XiB(R1) args: 0, res: 0, upd: 0;
       c6XiD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u6Xjg: // global
           Sp = Sp + 24;
           call _c6Xis() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6Xio_info" {
     block_c6Xio_info:
         const _c6Xio;
         const 2;
         const 30;
 },
 _c6XiB() //  [R1]
         { []
         }
     {offset
       c6XiB: // global
           P64[Sp + 16] = P64[R1 + 15];
           Sp = Sp + 8;
           call _c6XiL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6XiB_info" {
     block_c6XiB_info:
         const _c6XiB;
         const 130;
         const 30;
 },
 _c6XiL() //  []
         { []
         }
     {offset
       c6XiL: // global
           I64[Sp - 8] = block_c6XiN_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Xjn; else goto c6XiP;
       u6Xjn: // global
           call _c6XiN(R1) args: 0, res: 0, upd: 0;
       c6XiP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6XiN() //  [R1]
         { []
         }
     {offset
       c6XiN: // global
           if (R1 & 7 == 1) goto c6XiV; else goto c6Xj0;
       c6XiV: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Xj0: // global
           I64[Sp] = block_c6XiY_info;
           R2 = P64[R1 + 6];
           _s6Pqe::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 16] = _s6Pqe::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XiN_info" {
     block_c6XiN_info:
         const _c6XiN;
         const 130;
         const 30;
 },
 _c6XiY() //  [R1]
         { []
         }
     {offset
       c6XiY: // global
           if (R1 & 7 == 1) goto c6Xj6; else goto u6Xji;
       c6Xj6: // global
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp + 8;
           call _c6XiL() args: 0, res: 0, upd: 0;
       u6Xji: // global
           Sp = Sp + 24;
           call _c6Xis() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6XiY_info" {
     block_c6XiY_info:
         const _c6XiY;
         const 2;
         const 30;
 },
 _c6Xis() //  []
         { []
         }
     {offset
       c6Xis: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Foldable.$fFoldableNonEmpty_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Xjq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6Xju; else goto c6Xjt;
       c6Xju: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Xjt: // global
           I64[Hp - 40] = f_s6Pq0_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6Pqg_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$celem_info" {
     Data.Foldable.$fFoldableNonEmpty_$celem_info:
         const Data.Foldable.$fFoldableNonEmpty_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.574876935 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$csum_closure" {
     Data.Foldable.$fFoldableNonEmpty_$csum_closure:
         const Data.Foldable.$fFoldableNonEmpty_$csum_info;
         const 0;
 },
 z_s6Pqq_entry() //  [R1]
         { []
         }
     {offset
       c6Xkt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Xku; else goto c6Xkv;
       c6Xku: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Xkv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6Pqq_info" {
     z_s6Pqq_info:
         const z_s6Pqq_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+1192;
 },
 go_s6Pqr_entry() //  [R1, R2]
         { []
         }
     {offset
       c6XkI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6XkJ; else goto c6XkK;
       c6XkJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XkK: // global
           I64[Sp - 32] = block_c6XkB_info;
           _s6Pqr::P64 = R1;
           _s6Pqh::P64 = P64[R1 + 7];
           _s6Pqq::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s6Pqh::P64;
           P64[Sp - 16] = _s6Pqq::P64;
           P64[Sp - 8] = _s6Pqr::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6XkU; else goto c6XkC;
       u6XkU: // global
           call _c6XkB(R1) args: 0, res: 0, upd: 0;
       c6XkC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6Pqr_info" {
     go_s6Pqr_info:
         const go_s6Pqr_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c6XkB() //  [R1]
         { []
         }
     {offset
       c6XkB: // global
           if (R1 & 7 == 1) goto c6XkF; else goto c6XkG;
       c6XkF: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XkG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6XkS; else goto c6XkR;
       c6XkS: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6XkR: // global
           _s6Pqu::P64 = P64[R1 + 6];
           _s6Pqv::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s6Pqv::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6Pqu::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XkB_info" {
     block_c6XkB_info:
         const _c6XkB;
         const 3;
         const 30;
 },
 sat_s6Pqx_entry() //  [R1]
         { []
         }
     {offset
       c6XkV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6XkW; else goto c6XkX;
       c6XkW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6XkX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6Xkk_info;
           _s6Pqh::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s6Pqh::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6Xl1; else goto c6Xkl;
       u6Xl1: // global
           call _c6Xkk(R1) args: 0, res: 0, upd: 0;
       c6Xkl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pqx_info" {
     sat_s6Pqx_info:
         const sat_s6Pqx_entry;
         const 2;
         const 4294967314;
         const S6PH7_srt+1192;
 },
 _c6Xkk() //  [R1]
         { []
         }
     {offset
       c6Xkk: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6Xl0; else goto c6XkZ;
       c6Xl0: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6XkZ: // global
           _s6Pqp::P64 = P64[R1 + 15];
           I64[Hp - 40] = z_s6Pqq_info;
           _s6Pqh::P64 = P64[Sp + 8];
           P64[Hp - 24] = _s6Pqh::P64;
           I64[Hp - 16] = go_s6Pqr_info;
           P64[Hp - 8] = _s6Pqh::P64;
           P64[Hp] = Hp - 40;
           R2 = _s6Pqp::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call go_s6Pqr_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Xkk_info" {
     block_c6Xkk_info:
         const _c6Xkk;
         const 1;
         const 4294967326;
         const S6PH7_srt+1192;
 },
 Data.Foldable.$fFoldableNonEmpty_$csum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Xl3: // global
           _s6Pqi::P64 = R3;
           _s6Pqh::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6Xl4; else goto c6Xl5;
       c6Xl5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6Xl7; else goto c6Xl6;
       c6Xl7: // global
           HpAlloc = 56;
           goto c6Xl4;
       c6Xl4: // global
           R3 = _s6Pqi::P64;
           R2 = _s6Pqh::P64;
           R1 = Data.Foldable.$fFoldableNonEmpty_$csum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Xl6: // global
           I64[Hp - 48] = sat_s6Pqx_info;
           P64[Hp - 32] = _s6Pqh::P64;
           P64[Hp - 24] = _s6Pqi::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s6Pqi::P64;
           R2 = _s6Pqh::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$csum_info" {
     Data.Foldable.$fFoldableNonEmpty_$csum_info:
         const Data.Foldable.$fFoldableNonEmpty_$csum_entry;
         const 0;
         const 1103806595086;
         const 8589934607;
         const S6PH7_srt+1192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.592228334 UTC

[section ""data" . Data.Foldable.$w$cminimum1_closure" {
     Data.Foldable.$w$cminimum1_closure:
         const Data.Foldable.$w$cminimum1_info;
 },
 go_s6PqB_entry() //  [R1, R2]
         { []
         }
     {offset
       c6XlU: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6XlV; else goto c6XlW;
       c6XlV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XlW: // global
           I64[Sp - 24] = block_c6XlN_info;
           _s6PqB::P64 = R1;
           _s6Pqy::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s6Pqy::P64;
           P64[Sp - 8] = _s6PqB::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6Xmx; else goto c6XlO;
       u6Xmx: // global
           call _c6XlN(R1) args: 0, res: 0, upd: 0;
       c6XlO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6PqB_info" {
     go_s6PqB_info:
         const go_s6PqB_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c6XlN() //  [R1]
         { []
         }
     {offset
       c6XlN: // global
           if (R1 & 7 == 1) goto c6XlR; else goto c6XlS;
       c6XlR: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6XlS: // global
           I64[Sp] = block_c6Xm2_info;
           R2 = P64[R1 + 14];
           _s6PqE::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s6PqE::P64;
           call go_s6PqB_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XlN_info" {
     block_c6XlN_info:
         const _c6XlN;
         const 2;
         const 30;
 },
 _c6Xm2() //  [R1]
         { []
         }
     {offset
       c6Xm2: // global
           _s6PqE::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6Xm9; else goto c6Xmh;
       c6Xm9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Xmc; else goto c6Xmb;
       c6Xmc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Xmb: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s6PqE::P64;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Xmh: // global
           I64[Sp] = block_c6Xmf_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s6PqE::P64;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 8] = R1;
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xm2_info" {
     block_c6Xm2_info:
         const _c6Xm2;
         const 2;
         const 30;
 },
 _c6Xmf() //  [R1]
         { []
         }
     {offset
       c6Xmf: // global
           if (R1 & 7 == 1) goto c6Xmn; else goto c6Xmr;
       c6Xmn: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c6Xmr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Xmu; else goto c6Xmt;
       c6Xmu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Xmt: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xmf_info" {
     block_c6Xmf_info:
         const _c6Xmf;
         const 2;
         const 30;
 },
 Data.Foldable.$w$cminimum1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6XmE: // global
           _s6PqA::P64 = R4;
           _s6Pqz::P64 = R3;
           _s6Pqy::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c6XmF; else goto c6XmG;
       c6XmG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6XmI; else goto c6XmH;
       c6XmI: // global
           HpAlloc = 16;
           goto c6XmF;
       c6XmF: // global
           R4 = _s6PqA::P64;
           R3 = _s6Pqz::P64;
           R2 = _s6Pqy::P64;
           R1 = Data.Foldable.$w$cminimum1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XmH: // global
           I64[Hp - 8] = go_s6PqB_info;
           P64[Hp] = _s6Pqy::P64;
           I64[Sp - 24] = block_c6Xmy_info;
           R2 = _s6PqA::P64;
           R1 = Hp - 7;
           P64[Sp - 16] = _s6Pqy::P64;
           P64[Sp - 8] = _s6Pqz::P64;
           Sp = Sp - 24;
           call go_s6PqB_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cminimum1_info" {
     Data.Foldable.$w$cminimum1_info:
         const Data.Foldable.$w$cminimum1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Xmy() //  [R1]
         { []
         }
     {offset
       c6Xmy: // global
           if (R1 & 7 == 1) goto u6Xn1; else goto c6XmC;
       u6Xn1: // global
           Sp = Sp + 16;
           call _c6XmZ() args: 0, res: 0, upd: 0;
       c6XmC: // global
           I64[Sp] = block_c6XmO_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 16];
           _s6PqK::P64 = P64[R1 + 6];
           P64[Sp - 8] = _s6PqK::P64;
           P64[Sp + 8] = _s6PqK::P64;
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xmy_info" {
     block_c6Xmy_info:
         const _c6Xmy;
         const 2;
         const 30;
 },
 _c6XmO() //  [R1]
         { []
         }
     {offset
       c6XmO: // global
           if (R1 & 7 == 1) goto c6XmV; else goto u6Xn2;
       c6XmV: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       u6Xn2: // global
           Sp = Sp + 16;
           call _c6XmZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6XmO_info" {
     block_c6XmO_info:
         const _c6XmO;
         const 2;
         const 30;
 },
 _c6XmZ() //  []
         { []
         }
     {offset
       c6XmZ: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.607640557 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cminimum_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cminimum_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cminimum_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$cminimum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XnV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XnW; else goto c6XnX;
       c6XnW: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cminimum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XnX: // global
           I64[Sp - 16] = block_c6XnS_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6Xo1; else goto c6XnT;
       u6Xo1: // global
           call _c6XnS(R1) args: 0, res: 0, upd: 0;
       c6XnT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cminimum_info" {
     Data.Foldable.$fFoldableNonEmpty_$cminimum_info:
         const Data.Foldable.$fFoldableNonEmpty_$cminimum_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6XnS() //  [R1]
         { []
         }
     {offset
       c6XnS: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Foldable.$w$cminimum1_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XnS_info" {
     block_c6XnS_info:
         const _c6XnS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.617172143 UTC

[section ""data" . Data.Foldable.$w$cmaximum1_closure" {
     Data.Foldable.$w$cmaximum1_closure:
         const Data.Foldable.$w$cmaximum1_info;
 },
 go_s6PqU_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Xor: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6Xos; else goto c6Xot;
       c6Xos: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Xot: // global
           I64[Sp - 24] = block_c6Xok_info;
           _s6PqU::P64 = R1;
           _s6PqR::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s6PqR::P64;
           P64[Sp - 8] = _s6PqU::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6Xp4; else goto c6Xol;
       u6Xp4: // global
           call _c6Xok(R1) args: 0, res: 0, upd: 0;
       c6Xol: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6PqU_info" {
     go_s6PqU_info:
         const go_s6PqU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c6Xok() //  [R1]
         { []
         }
     {offset
       c6Xok: // global
           if (R1 & 7 == 1) goto c6Xoo; else goto c6Xop;
       c6Xoo: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Xop: // global
           I64[Sp] = block_c6Xoz_info;
           R2 = P64[R1 + 14];
           _s6PqX::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s6PqX::P64;
           call go_s6PqU_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xok_info" {
     block_c6Xok_info:
         const _c6Xok;
         const 2;
         const 30;
 },
 _c6Xoz() //  [R1]
         { []
         }
     {offset
       c6Xoz: // global
           _s6PqX::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6XoG; else goto c6XoO;
       c6XoG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6XoJ; else goto c6XoI;
       c6XoJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6XoI: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s6PqX::P64;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6XoO: // global
           I64[Sp] = block_c6XoM_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s6PqX::P64;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 8] = R1;
           Sp = Sp - 24;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xoz_info" {
     block_c6Xoz_info:
         const _c6Xoz;
         const 2;
         const 30;
 },
 _c6XoM() //  [R1]
         { []
         }
     {offset
       c6XoM: // global
           if (R1 & 7 == 1) goto c6XoU; else goto c6XoY;
       c6XoU: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c6XoY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Xp1; else goto c6Xp0;
       c6Xp1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Xp0: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XoM_info" {
     block_c6XoM_info:
         const _c6XoM;
         const 2;
         const 30;
 },
 Data.Foldable.$w$cmaximum1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Xpb: // global
           _s6PqT::P64 = R4;
           _s6PqS::P64 = R3;
           _s6PqR::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c6Xpc; else goto c6Xpd;
       c6Xpd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Xpf; else goto c6Xpe;
       c6Xpf: // global
           HpAlloc = 16;
           goto c6Xpc;
       c6Xpc: // global
           R4 = _s6PqT::P64;
           R3 = _s6PqS::P64;
           R2 = _s6PqR::P64;
           R1 = Data.Foldable.$w$cmaximum1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Xpe: // global
           I64[Hp - 8] = go_s6PqU_info;
           P64[Hp] = _s6PqR::P64;
           I64[Sp - 24] = block_c6Xp5_info;
           R2 = _s6PqT::P64;
           R1 = Hp - 7;
           P64[Sp - 16] = _s6PqR::P64;
           P64[Sp - 8] = _s6PqS::P64;
           Sp = Sp - 24;
           call go_s6PqU_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cmaximum1_info" {
     Data.Foldable.$w$cmaximum1_info:
         const Data.Foldable.$w$cmaximum1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Xp5() //  [R1]
         { []
         }
     {offset
       c6Xp5: // global
           if (R1 & 7 == 1) goto u6Xpy; else goto c6Xp9;
       u6Xpy: // global
           Sp = Sp + 16;
           call _c6Xpw() args: 0, res: 0, upd: 0;
       c6Xp9: // global
           I64[Sp] = block_c6Xpl_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 16];
           _s6Pr3::P64 = P64[R1 + 6];
           P64[Sp - 8] = _s6Pr3::P64;
           P64[Sp + 8] = _s6Pr3::P64;
           Sp = Sp - 24;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xp5_info" {
     block_c6Xp5_info:
         const _c6Xp5;
         const 2;
         const 30;
 },
 _c6Xpl() //  [R1]
         { []
         }
     {offset
       c6Xpl: // global
           if (R1 & 7 == 1) goto c6Xps; else goto u6Xpz;
       c6Xps: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       u6Xpz: // global
           Sp = Sp + 16;
           call _c6Xpw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6Xpl_info" {
     block_c6Xpl_info:
         const _c6Xpl;
         const 2;
         const 30;
 },
 _c6Xpw() //  []
         { []
         }
     {offset
       c6Xpw: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.633089908 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cmaximum_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cmaximum_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cmaximum_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$cmaximum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Xqs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Xqt; else goto c6Xqu;
       c6Xqt: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cmaximum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Xqu: // global
           I64[Sp - 16] = block_c6Xqp_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6Xqy; else goto c6Xqq;
       u6Xqy: // global
           call _c6Xqp(R1) args: 0, res: 0, upd: 0;
       c6Xqq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cmaximum_info" {
     Data.Foldable.$fFoldableNonEmpty_$cmaximum_info:
         const Data.Foldable.$fFoldableNonEmpty_$cmaximum_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6Xqp() //  [R1]
         { []
         }
     {offset
       c6Xqp: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Foldable.$w$cmaximum1_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xqp_info" {
     block_c6Xqp_info:
         const _c6Xqp;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.638396384 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cnull_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cnull_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cnull_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$cnull_entry() //  []
         { []
         }
     {offset
       c6XqM: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cnull_info" {
     Data.Foldable.$fFoldableNonEmpty_$cnull_info:
         const Data.Foldable.$fFoldableNonEmpty_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.645341934 UTC

[section ""data" . Data.Foldable.$w$cfoldr2_closure" {
     Data.Foldable.$w$cfoldr2_closure:
         const Data.Foldable.$w$cfoldr2_info;
 },
 sat_s6Prl_entry() //  [R1]
         { []
         }
     {offset
       c6Xrj: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Xrk; else goto c6Xrl;
       c6Xrk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Xrl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6Xrd_info;
           R2 = P64[R1 + 40];
           _s6Prb::P64 = P64[R1 + 16];
           _s6Prh::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s6Prb::P64;
           P64[Sp - 24] = _s6Prh::P64;
           Sp = Sp - 40;
           call go_s6Pre_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Prl_info" {
     sat_s6Prl_info:
         const sat_s6Prl_entry;
         const 4;
         const 15;
 },
 _c6Xrd() //  [R1]
         { []
         }
     {offset
       c6Xrd: // global
           _s6Prh::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6Xrg; else goto c6Xrh;
       c6Xrg: // global
           R1 = _s6Prh::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c6Xrh: // global
           R3 = P64[R1 + 6];
           R2 = _s6Prh::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Xrd_info" {
     block_c6Xrd_info:
         const _c6Xrd;
         const 2;
         const 30;
 },
 go_s6Pre_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Xrw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Xrx; else goto c6Xry;
       c6Xrx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Xry: // global
           I64[Sp - 24] = block_c6Xr3_info;
           _s6Pre::P64 = R1;
           _s6Prb::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s6Prb::P64;
           P64[Sp - 8] = _s6Pre::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6XrF; else goto c6Xr4;
       u6XrF: // global
           call _c6Xr3(R1) args: 0, res: 0, upd: 0;
       c6Xr4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6Pre_info" {
     go_s6Pre_info:
         const go_s6Pre_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c6Xr3() //  [R1]
         { []
         }
     {offset
       c6Xr3: // global
           if (R1 & 7 == 1) goto c6Xrt; else goto c6Xru;
       c6Xrt: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Xru: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6XrE; else goto c6XrD;
       c6XrE: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6XrD: // global
           _s6Prh::P64 = P64[R1 + 6];
           _s6Pri::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_s6Prl_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s6Prh::P64;
           P64[Hp - 16] = _s6Pri::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 56;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xr3_info" {
     block_c6Xr3_info:
         const _c6Xr3;
         const 2;
         const 30;
 },
 Data.Foldable.$w$cfoldr2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6XrM: // global
           _s6Prd::P64 = R4;
           _s6Prc::P64 = R3;
           _s6Prb::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6XrN; else goto c6XrO;
       c6XrO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6XrQ; else goto c6XrP;
       c6XrQ: // global
           HpAlloc = 16;
           goto c6XrN;
       c6XrN: // global
           R4 = _s6Prd::P64;
           R3 = _s6Prc::P64;
           R2 = _s6Prb::P64;
           R1 = Data.Foldable.$w$cfoldr2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XrP: // global
           I64[Hp - 8] = go_s6Pre_info;
           P64[Hp] = _s6Prb::P64;
           I64[Sp - 24] = block_c6XrG_info;
           R2 = _s6Prd::P64;
           R1 = Hp - 7;
           P64[Sp - 16] = _s6Prb::P64;
           P64[Sp - 8] = _s6Prc::P64;
           Sp = Sp - 24;
           call go_s6Pre_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldr2_info" {
     Data.Foldable.$w$cfoldr2_info:
         const Data.Foldable.$w$cfoldr2_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6XrG() //  [R1]
         { []
         }
     {offset
       c6XrG: // global
           _s6Prc::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6XrJ; else goto c6XrK;
       c6XrJ: // global
           R1 = _s6Prc::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XrK: // global
           R3 = P64[R1 + 6];
           R2 = _s6Prc::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XrG_info" {
     block_c6XrG_info:
         const _c6XrG;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.658809847 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfoldr1_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldr1_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr1_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfoldr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XsC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XsD; else goto c6XsE;
       c6XsD: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfoldr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XsE: // global
           I64[Sp - 16] = block_c6Xsz_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6XsI; else goto c6XsA;
       u6XsI: // global
           call _c6Xsz(R1) args: 0, res: 0, upd: 0;
       c6XsA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfoldr1_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldr1_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6Xsz() //  [R1]
         { []
         }
     {offset
       c6Xsz: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Foldable.$w$cfoldr2_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xsz_info" {
     block_c6Xsz_info:
         const _c6Xsz;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.665416549 UTC

[section ""data" . Data.Foldable.$w$cfoldl'1_closure" {
     Data.Foldable.$w$cfoldl'1_closure:
         const Data.Foldable.$w$cfoldl'1_info;
 },
 Data.Foldable.$w$cfoldl'1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6Xt0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Xt1; else goto c6Xt2;
       c6Xt1: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$w$cfoldl'1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Xt2: // global
           I64[Sp - 24] = block_c6XsW_info;
           _s6Pru::P64 = R3;
           R3 = R4;
           _s6Prt::P64 = R2;
           R2 = _s6Pru::P64;
           R1 = _s6Prt::P64;
           P64[Sp - 16] = _s6Prt::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldl'1_info" {
     Data.Foldable.$w$cfoldl'1_info:
         const Data.Foldable.$w$cfoldl'1_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c6XsW() //  [R1]
         { []
         }
     {offset
       c6XsW: // global
           P64[Sp] = R1;
           P64[Sp + 16] = P64[Sp + 16];
           call _c6Xt5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6XsW_info" {
     block_c6XsW_info:
         const _c6XsW;
         const 2;
         const 30;
 },
 _c6Xt5() //  []
         { []
         }
     {offset
       c6Xt5: // global
           I64[Sp - 8] = block_c6Xt7_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Xtr; else goto c6Xt9;
       u6Xtr: // global
           call _c6Xt7(R1) args: 0, res: 0, upd: 0;
       c6Xt9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6Xt7() //  [R1]
         { []
         }
     {offset
       c6Xt7: // global
           _s6PrA::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6Xtf; else goto c6Xtk;
       c6Xtf: // global
           R1 = _s6PrA::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Xtk: // global
           I64[Sp + 8] = block_c6Xti_info;
           R3 = P64[R1 + 6];
           R2 = _s6PrA::P64;
           _s6PrD::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp + 24] = _s6PrD::P64;
           Sp = Sp + 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xt7_info" {
     block_c6Xt7_info:
         const _c6Xt7;
         const 259;
         const 30;
 },
 _c6Xti() //  [R1]
         { []
         }
     {offset
       c6Xti: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp] = R1;
           call _c6Xt5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6Xti_info" {
     block_c6Xti_info:
         const _c6Xti;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.675930644 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfoldl'_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldl'_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6XtV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6XtW; else goto c6XtX;
       c6XtW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XtX: // global
           I64[Sp - 24] = block_c6XtS_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6Xu1; else goto c6XtT;
       u6Xu1: // global
           call _c6XtS(R1) args: 0, res: 0, upd: 0;
       c6XtT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfoldl'_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldl'_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6XtS() //  [R1]
         { []
         }
     {offset
       c6XtS: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Foldable.$w$cfoldl'1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XtS_info" {
     block_c6XtS_info:
         const _c6XtS;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.683645614 UTC

[section ""data" . Data.Foldable.$w$cfoldr'1_closure" {
     Data.Foldable.$w$cfoldr'1_closure:
         const Data.Foldable.$w$cfoldr'1_info;
 },
 sat_s6Ps0_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Xuw: // global
           R3 = R2;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Ps0_info" {
     sat_s6Ps0_info:
         const sat_s6Ps0_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6PrY_entry() //  [R1, R2]
         { []
         }
     {offset
       c6XuF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XuG; else goto c6XuH;
       c6XuG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XuH: // global
           I64[Sp - 16] = block_c6XuD_info;
           R3 = R2;
           R2 = P64[R1 + 23];
           _s6PrR::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s6PrR::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PrY_info" {
     sat_s6PrY_info:
         const sat_s6PrY_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c6XuD() //  [R1]
         { []
         }
     {offset
       c6XuD: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XuD_info" {
     block_c6XuD_info:
         const _c6XuD;
         const 1;
         const 30;
 },
 Data.Foldable.$w$cfoldr'1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6XuJ: // global
           _s6PrO::P64 = R5;
           _s6PrN::P64 = R4;
           _s6PrM::P64 = R3;
           _s6PrL::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6XuK; else goto c6XuL;
       c6XuL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6XuN; else goto c6XuM;
       c6XuN: // global
           HpAlloc = 24;
           goto c6XuK;
       c6XuK: // global
           R5 = _s6PrO::P64;
           R4 = _s6PrN::P64;
           R3 = _s6PrM::P64;
           R2 = _s6PrL::P64;
           R1 = Data.Foldable.$w$cfoldr'1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XuM: // global
           I64[Hp - 16] = sat_s6Ps0_info;
           P64[Hp - 8] = _s6PrL::P64;
           P64[Hp] = _s6PrN::P64;
           P64[Sp - 32] = _s6PrL::P64;
           P64[Sp - 24] = _s6PrO::P64;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = _s6PrM::P64;
           Sp = Sp - 32;
           call _c6Xuk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldr'1_info" {
     Data.Foldable.$w$cfoldr'1_info:
         const Data.Foldable.$w$cfoldr'1_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c6Xuk() //  []
         { []
         }
     {offset
       c6Xuk: // global
           I64[Sp - 8] = block_c6Xum_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Xv0; else goto c6Xun;
       u6Xv0: // global
           call _c6Xum(R1) args: 0, res: 0, upd: 0;
       c6Xun: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6Xum() //  [R1]
         { []
         }
     {offset
       c6Xum: // global
           _s6PrR::P64 = P64[Sp + 24];
           _s6PrS::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c6XuS; else goto c6XuT;
       c6XuS: // global
           R2 = _s6PrS::P64;
           R1 = _s6PrR::P64;
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c6XuT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6XuW; else goto c6XuV;
       c6XuW: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6XuV: // global
           _s6PrU::P64 = P64[R1 + 6];
           _s6PrV::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_s6PrY_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s6PrR::P64;
           P64[Hp] = _s6PrU::P64;
           P64[Sp + 16] = _s6PrV::P64;
           P64[Sp + 24] = Hp - 23;
           P64[Sp + 32] = _s6PrS::P64;
           Sp = Sp + 8;
           call _c6Xuk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6Xum_info" {
     block_c6Xum_info:
         const _c6Xum;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.696296971 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfoldr'_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldr'_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr'_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6XvA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6XvB; else goto c6XvC;
       c6XvB: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfoldr'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XvC: // global
           I64[Sp - 24] = block_c6Xvx_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6XvG; else goto c6Xvy;
       u6XvG: // global
           call _c6Xvx(R1) args: 0, res: 0, upd: 0;
       c6Xvy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfoldr'_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldr'_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Xvx() //  [R1]
         { []
         }
     {offset
       c6Xvx: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Foldable.$w$cfoldr'1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xvx_info" {
     block_c6Xvx_info:
         const _c6Xvx;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.704675692 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cproduct_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cproduct_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cproduct_info;
         const 0;
 },
 z_s6Psg_entry() //  [R1]
         { []
         }
     {offset
       c6Xw7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Xw8; else goto c6Xw9;
       c6Xw8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Xw9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidProduct1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6Psg_info" {
     z_s6Psg_info:
         const z_s6Psg_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+1128;
 },
 go_s6Psh_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Xwm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Xwn; else goto c6Xwo;
       c6Xwn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Xwo: // global
           I64[Sp - 32] = block_c6Xwf_info;
           _s6Psh::P64 = R1;
           _s6Ps7::P64 = P64[R1 + 7];
           _s6Psg::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s6Ps7::P64;
           P64[Sp - 16] = _s6Psg::P64;
           P64[Sp - 8] = _s6Psh::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6Xwy; else goto c6Xwg;
       u6Xwy: // global
           call _c6Xwf(R1) args: 0, res: 0, upd: 0;
       c6Xwg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6Psh_info" {
     go_s6Psh_info:
         const go_s6Psh_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c6Xwf() //  [R1]
         { []
         }
     {offset
       c6Xwf: // global
           if (R1 & 7 == 1) goto c6Xwj; else goto c6Xwk;
       c6Xwj: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Xwk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Xww; else goto c6Xwv;
       c6Xww: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Xwv: // global
           _s6Psk::P64 = P64[R1 + 6];
           _s6Psl::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s6Psl::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6Psk::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xwf_info" {
     block_c6Xwf_info:
         const _c6Xwf;
         const 3;
         const 30;
 },
 sat_s6Psn_entry() //  [R1]
         { []
         }
     {offset
       c6Xwz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6XwA; else goto c6XwB;
       c6XwA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6XwB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6XvY_info;
           _s6Ps7::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s6Ps7::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6XwF; else goto c6XvZ;
       u6XwF: // global
           call _c6XvY(R1) args: 0, res: 0, upd: 0;
       c6XvZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Psn_info" {
     sat_s6Psn_info:
         const sat_s6Psn_entry;
         const 2;
         const 4294967314;
         const S6PH7_srt+1128;
 },
 _c6XvY() //  [R1]
         { []
         }
     {offset
       c6XvY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6XwE; else goto c6XwD;
       c6XwE: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6XwD: // global
           _s6Psf::P64 = P64[R1 + 15];
           I64[Hp - 40] = z_s6Psg_info;
           _s6Ps7::P64 = P64[Sp + 8];
           P64[Hp - 24] = _s6Ps7::P64;
           I64[Hp - 16] = go_s6Psh_info;
           P64[Hp - 8] = _s6Ps7::P64;
           P64[Hp] = Hp - 40;
           R2 = _s6Psf::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call go_s6Psh_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6XvY_info" {
     block_c6XvY_info:
         const _c6XvY;
         const 1;
         const 4294967326;
         const S6PH7_srt+1128;
 },
 Data.Foldable.$fFoldableNonEmpty_$cproduct_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XwH: // global
           _s6Ps8::P64 = R3;
           _s6Ps7::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6XwI; else goto c6XwJ;
       c6XwJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6XwL; else goto c6XwK;
       c6XwL: // global
           HpAlloc = 56;
           goto c6XwI;
       c6XwI: // global
           R3 = _s6Ps8::P64;
           R2 = _s6Ps7::P64;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cproduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XwK: // global
           I64[Hp - 48] = sat_s6Psn_info;
           P64[Hp - 32] = _s6Ps7::P64;
           P64[Hp - 24] = _s6Ps8::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s6Ps8::P64;
           R2 = _s6Ps7::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 24;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cproduct_info" {
     Data.Foldable.$fFoldableNonEmpty_$cproduct_info:
         const Data.Foldable.$fFoldableNonEmpty_$cproduct_entry;
         const 0;
         const 562954248388622;
         const 8589934607;
         const S6PH7_srt+1128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.717571719 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_closure" {
     Data.Foldable.$fFoldableNonEmpty_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableNonEmpty_$cfold_closure+2;
         const Data.Foldable.$fFoldableNonEmpty_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableNonEmpty_$ctoList_closure+1;
         const Data.Foldable.$fFoldableNonEmpty_$cnull_closure+1;
         const Data.Foldable.$fFoldableNonEmpty_$clength_closure+1;
         const Data.Foldable.$fFoldableNonEmpty_$celem_closure+2;
         const Data.Foldable.$fFoldableNonEmpty_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableNonEmpty_$cminimum_closure+2;
         const Data.Foldable.$fFoldableNonEmpty_$csum_closure+2;
         const Data.Foldable.$fFoldableNonEmpty_$cproduct_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.721576348 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$celem_closure" {
     Data.Foldable.$fFoldableMaybe_$celem_closure:
         const Data.Foldable.$fFoldableMaybe_$celem_info;
 },
 eta1_s6Psq_entry() //  [R1]
         { []
         }
     {offset
       c6Xxr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Xxs; else goto c6Xxt;
       c6Xxs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Xxt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . eta1_s6Psq_info" {
     eta1_s6Psq_info:
         const eta1_s6Psq_entry;
         const 2;
         const 18;
 },
 sat_s6Psu_entry() //  [R1, R2]
         { []
         }
     {offset
       c6XxG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XxH; else goto c6XxI;
       c6XxH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XxI: // global
           I64[Sp - 16] = block_c6Xxz_info;
           _s6Psq::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s6Psq::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6XxP; else goto c6XxA;
       u6XxP: // global
           call _c6Xxz(R1) args: 0, res: 0, upd: 0;
       c6XxA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Psu_info" {
     sat_s6Psu_info:
         const sat_s6Psu_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c6Xxz() //  [R1]
         { []
         }
     {offset
       c6Xxz: // global
           if (R1 & 7 == 1) goto c6XxD; else goto c6XxE;
       c6XxD: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6XxE: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xxz_info" {
     block_c6Xxz_info:
         const _c6Xxz;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableMaybe_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XxQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6XxU; else goto c6XxT;
       c6XxU: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XxT: // global
           I64[Hp - 40] = eta1_s6Psq_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6Psu_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$celem_info" {
     Data.Foldable.$fFoldableMaybe_$celem_info:
         const Data.Foldable.$fFoldableMaybe_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.731584466 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe2_closure" {
     Data.Foldable.$fFoldableMaybe2_closure:
         const Data.Foldable.$fFoldableMaybe2_info;
         const 0;
 },
 Data.Foldable.$fFoldableMaybe2_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Xys: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Xyt; else goto c6Xyu;
       c6Xyt: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Xyu: // global
           I64[Sp - 16] = block_c6Xyl_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6XyB; else goto c6Xym;
       u6XyB: // global
           call _c6Xyl(R1) args: 0, res: 0, upd: 0;
       c6Xym: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe2_info" {
     Data.Foldable.$fFoldableMaybe2_info:
         const Data.Foldable.$fFoldableMaybe2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+1272;
 },
 _c6Xyl() //  [R1]
         { []
         }
     {offset
       c6Xyl: // global
           if (R1 & 7 == 1) goto c6Xyp; else goto c6Xyq;
       c6Xyp: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
       c6Xyq: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xyl_info" {
     block_c6Xyl_info:
         const _c6Xyl;
         const 1;
         const 4294967326;
         const S6PH7_srt+1280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.737632868 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe3_closure" {
     Data.Foldable.$fFoldableMaybe3_closure:
         const Data.Foldable.$fFoldableMaybe3_info;
         const 0;
 },
 Data.Foldable.$fFoldableMaybe3_entry() //  [R2]
         { []
         }
     {offset
       c6XyY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XyZ; else goto c6Xz0;
       c6XyZ: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Xz0: // global
           I64[Sp - 8] = block_c6XyR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Xz7; else goto c6XyS;
       u6Xz7: // global
           call _c6XyR(R1) args: 0, res: 0, upd: 0;
       c6XyS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe3_info" {
     Data.Foldable.$fFoldableMaybe3_info:
         const Data.Foldable.$fFoldableMaybe3_entry;
         const 0;
         const 70373039144974;
         const 4294967301;
         const S6PH7_srt+1176;
 },
 _c6XyR() //  [R1]
         { []
         }
     {offset
       c6XyR: // global
           if (R1 & 7 == 1) goto c6XyV; else goto c6XyW;
       c6XyV: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XyW: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XyR_info" {
     block_c6XyR_info:
         const _c6XyR;
         const 0;
         const 4294967326;
         const S6PH7_srt+1176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.742780832 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cminimum_closure" {
     Data.Foldable.$fFoldableMaybe_$cminimum_closure:
         const Data.Foldable.$fFoldableMaybe_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableMaybe_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c6Xzn: // global
           R2 = R3;
           call Data.Foldable.$fFoldableMaybe3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cminimum_info" {
     Data.Foldable.$fFoldableMaybe_$cminimum_info:
         const Data.Foldable.$fFoldableMaybe_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+1288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.747141415 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe4_closure" {
     Data.Foldable.$fFoldableMaybe4_closure:
         const Data.Foldable.$fFoldableMaybe4_info;
         const 0;
 },
 Data.Foldable.$fFoldableMaybe4_entry() //  [R2]
         { []
         }
     {offset
       c6XzF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XzG; else goto c6XzH;
       c6XzG: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XzH: // global
           I64[Sp - 8] = block_c6Xzy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XzO; else goto c6Xzz;
       u6XzO: // global
           call _c6Xzy(R1) args: 0, res: 0, upd: 0;
       c6Xzz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe4_info" {
     Data.Foldable.$fFoldableMaybe4_info:
         const Data.Foldable.$fFoldableMaybe4_entry;
         const 0;
         const 1125904201809934;
         const 4294967301;
         const S6PH7_srt+1152;
 },
 _c6Xzy() //  [R1]
         { []
         }
     {offset
       c6Xzy: // global
           if (R1 & 7 == 1) goto c6XzC; else goto c6XzD;
       c6XzC: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XzD: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Xzy_info" {
     block_c6Xzy_info:
         const _c6Xzy;
         const 0;
         const 4294967326;
         const S6PH7_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.755249263 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cmaximum_closure" {
     Data.Foldable.$fFoldableMaybe_$cmaximum_closure:
         const Data.Foldable.$fFoldableMaybe_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableMaybe_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c6XA4: // global
           R2 = R3;
           call Data.Foldable.$fFoldableMaybe4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cmaximum_info" {
     Data.Foldable.$fFoldableMaybe_$cmaximum_info:
         const Data.Foldable.$fFoldableMaybe_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+1296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.76048551 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cnull_closure" {
     Data.Foldable.$fFoldableMaybe_$cnull_closure:
         const Data.Foldable.$fFoldableMaybe_$cnull_info;
 },
 Data.Foldable.$fFoldableMaybe_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6XAm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XAn; else goto c6XAo;
       c6XAn: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XAo: // global
           I64[Sp - 8] = block_c6XAf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XAv; else goto c6XAg;
       u6XAv: // global
           call _c6XAf(R1) args: 0, res: 0, upd: 0;
       c6XAg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cnull_info" {
     Data.Foldable.$fFoldableMaybe_$cnull_info:
         const Data.Foldable.$fFoldableMaybe_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6XAf() //  [R1]
         { []
         }
     {offset
       c6XAf: // global
           if (R1 & 7 == 1) goto c6XAj; else goto c6XAk;
       c6XAj: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6XAk: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XAf_info" {
     block_c6XAf_info:
         const _c6XAf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.767074014 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cfoldl1_closure" {
     Data.Foldable.$fFoldableMaybe_$cfoldl1_closure:
         const Data.Foldable.$fFoldableMaybe_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableMaybe_$cfoldl1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XAU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XAV; else goto c6XAW;
       c6XAV: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$cfoldl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XAW: // global
           I64[Sp - 8] = block_c6XAN_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XB3; else goto c6XAO;
       u6XB3: // global
           call _c6XAN(R1) args: 0, res: 0, upd: 0;
       c6XAO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cfoldl1_info" {
     Data.Foldable.$fFoldableMaybe_$cfoldl1_info:
         const Data.Foldable.$fFoldableMaybe_$cfoldl1_entry;
         const 0;
         const 576460756598390798;
         const 8589934607;
         const S6PH7_srt+1088;
 },
 _c6XAN() //  [R1]
         { []
         }
     {offset
       c6XAN: // global
           if (R1 & 7 == 1) goto c6XAR; else goto c6XAS;
       c6XAR: // global
           R1 = Data.Foldable.$fFoldable:.:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XAS: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XAN_info" {
     block_c6XAN_info:
         const _c6XAN;
         const 0;
         const 4294967326;
         const S6PH7_srt+1088;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.773001818 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cfoldr1_closure" {
     Data.Foldable.$fFoldableMaybe_$cfoldr1_closure:
         const Data.Foldable.$fFoldableMaybe_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableMaybe_$cfoldr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XBq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XBr; else goto c6XBs;
       c6XBr: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$cfoldr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XBs: // global
           I64[Sp - 8] = block_c6XBj_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XBz; else goto c6XBk;
       u6XBz: // global
           call _c6XBj(R1) args: 0, res: 0, upd: 0;
       c6XBk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cfoldr1_info" {
     Data.Foldable.$fFoldableMaybe_$cfoldr1_info:
         const Data.Foldable.$fFoldableMaybe_$cfoldr1_entry;
         const 0;
         const 9223372041149743118;
         const 8589934607;
         const S6PH7_srt+1064;
 },
 _c6XBj() //  [R1]
         { []
         }
     {offset
       c6XBj: // global
           if (R1 & 7 == 1) goto c6XBn; else goto c6XBo;
       c6XBn: // global
           R1 = Data.Foldable.$fFoldable:.:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XBo: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XBj_info" {
     block_c6XBj_info:
         const _c6XBj;
         const 0;
         const 4294967326;
         const S6PH7_srt+1064;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.779094305 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$clength_closure" {
     Data.Foldable.$fFoldableMaybe_$clength_closure:
         const Data.Foldable.$fFoldableMaybe_$clength_info;
 },
 Data.Foldable.$fFoldableMaybe_$clength_entry() //  [R2]
         { []
         }
     {offset
       c6XBW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XBX; else goto c6XBY;
       c6XBX: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XBY: // global
           I64[Sp - 8] = block_c6XBP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XC5; else goto c6XBQ;
       u6XC5: // global
           call _c6XBP(R1) args: 0, res: 0, upd: 0;
       c6XBQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$clength_info" {
     Data.Foldable.$fFoldableMaybe_$clength_info:
         const Data.Foldable.$fFoldableMaybe_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6XBP() //  [R1]
         { []
         }
     {offset
       c6XBP: // global
           if (R1 & 7 == 1) goto c6XBT; else goto c6XBU;
       c6XBT: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6XBU: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XBP_info" {
     block_c6XBP_info:
         const _c6XBP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.785641798 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cfold_closure" {
     Data.Foldable.$fFoldableMaybe_$cfold_closure:
         const Data.Foldable.$fFoldableMaybe_$cfold_info;
 },
 Data.Foldable.$fFoldableMaybe_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XCu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XCv; else goto c6XCw;
       c6XCv: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XCw: // global
           I64[Sp - 16] = block_c6XCn_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6XCD; else goto c6XCo;
       u6XCD: // global
           call _c6XCn(R1) args: 0, res: 0, upd: 0;
       c6XCo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cfold_info" {
     Data.Foldable.$fFoldableMaybe_$cfold_info:
         const Data.Foldable.$fFoldableMaybe_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6XCn() //  [R1]
         { []
         }
     {offset
       c6XCn: // global
           if (R1 & 7 == 1) goto c6XCr; else goto c6XCs;
       c6XCr: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c6XCs: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XCn_info" {
     block_c6XCn_info:
         const _c6XCn;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.791382739 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe1_closure" {
     Data.Foldable.$fFoldableMaybe1_closure:
         const Data.Foldable.$fFoldableMaybe1_info;
         const 0;
 },
 Data.Foldable.$fFoldableMaybe1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XD0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XD1; else goto c6XD2;
       c6XD1: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XD2: // global
           I64[Sp - 16] = block_c6XCT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6XD9; else goto c6XCU;
       u6XD9: // global
           call _c6XCT(R1) args: 0, res: 0, upd: 0;
       c6XCU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe1_info" {
     Data.Foldable.$fFoldableMaybe1_info:
         const Data.Foldable.$fFoldableMaybe1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+1320;
 },
 _c6XCT() //  [R1]
         { []
         }
     {offset
       c6XCT: // global
           if (R1 & 7 == 1) goto c6XCX; else goto c6XCY;
       c6XCX: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
       c6XCY: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XCT_info" {
     block_c6XCT_info:
         const _c6XCT;
         const 1;
         const 4294967326;
         const S6PH7_srt+1328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.797665691 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$ctoList_closure" {
     Data.Foldable.$fFoldableMaybe_$ctoList_closure:
         const Data.Foldable.$fFoldableMaybe_$ctoList_info;
 },
 Data.Foldable.$fFoldableMaybe_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6XDw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XDx; else goto c6XDy;
       c6XDx: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XDy: // global
           I64[Sp - 8] = block_c6XDp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XDI; else goto c6XDq;
       u6XDI: // global
           call _c6XDp(R1) args: 0, res: 0, upd: 0;
       c6XDq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$ctoList_info" {
     Data.Foldable.$fFoldableMaybe_$ctoList_info:
         const Data.Foldable.$fFoldableMaybe_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6XDp() //  [R1]
         { []
         }
     {offset
       c6XDp: // global
           if (R1 & 7 == 1) goto c6XDt; else goto c6XDu;
       c6XDt: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6XDu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6XDH; else goto c6XDG;
       c6XDH: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6XDG: // global
           _s6Pt5::P64 = P64[R1 + 6];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s6Pt5::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XDp_info" {
     block_c6XDp_info:
         const _c6XDp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.803102361 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_closure" {
     Data.Foldable.$fFoldableMaybe_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableMaybe_$cfold_closure+2;
         const Data.Foldable.$fFoldableMaybe_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableMaybe_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableMaybe_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableMaybe_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableMaybe_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableMaybe_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableMaybe_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableMaybe_$ctoList_closure+1;
         const Data.Foldable.$fFoldableMaybe_$cnull_closure+1;
         const Data.Foldable.$fFoldableMaybe_$clength_closure+1;
         const Data.Foldable.$fFoldableMaybe_$celem_closure+2;
         const Data.Foldable.$fFoldableMaybe_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableMaybe_$cminimum_closure+2;
         const Data.Foldable.$fFoldableMaybe2_closure+2;
         const Data.Foldable.$fFoldableMaybe1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.806823822 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cfoldMap_closure" {
     Data.Foldable.$fFoldableLast_$cfoldMap_closure:
         const Data.Foldable.$fFoldableLast_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableLast_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6XE8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6XE9; else goto c6XEa;
       c6XE9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XEa: // global
           I64[Sp - 24] = block_c6XE1_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6XEh; else goto c6XE2;
       u6XEh: // global
           call _c6XE1(R1) args: 0, res: 0, upd: 0;
       c6XE2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cfoldMap_info" {
     Data.Foldable.$fFoldableLast_$cfoldMap_info:
         const Data.Foldable.$fFoldableLast_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6XE1() //  [R1]
         { []
         }
     {offset
       c6XE1: // global
           if (R1 & 7 == 1) goto c6XE5; else goto c6XE6;
       c6XE5: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c6XE6: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XE1_info" {
     block_c6XE1_info:
         const _c6XE1;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.813064497 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cfold_closure" {
     Data.Foldable.$fFoldableLast_$cfold_closure:
         const Data.Foldable.$fFoldableLast_$cfold_info;
 },
 Data.Foldable.$fFoldableLast_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XEE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XEF; else goto c6XEG;
       c6XEF: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XEG: // global
           I64[Sp - 16] = block_c6XEx_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6XEN; else goto c6XEy;
       u6XEN: // global
           call _c6XEx(R1) args: 0, res: 0, upd: 0;
       c6XEy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cfold_info" {
     Data.Foldable.$fFoldableLast_$cfold_info:
         const Data.Foldable.$fFoldableLast_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6XEx() //  [R1]
         { []
         }
     {offset
       c6XEx: // global
           if (R1 & 7 == 1) goto c6XEB; else goto c6XEC;
       c6XEB: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c6XEC: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XEx_info" {
     block_c6XEx_info:
         const _c6XEx;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.818861357 UTC

[section ""data" . Data.Foldable.$fFoldableLast2_closure" {
     Data.Foldable.$fFoldableLast2_closure:
         const Data.Foldable.$fFoldableLast2_info;
         const 0;
 },
 Data.Foldable.$fFoldableLast2_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XFa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XFb; else goto c6XFc;
       c6XFb: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XFc: // global
           I64[Sp - 16] = block_c6XF3_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6XFj; else goto c6XF4;
       u6XFj: // global
           call _c6XF3(R1) args: 0, res: 0, upd: 0;
       c6XF4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast2_info" {
     Data.Foldable.$fFoldableLast2_info:
         const Data.Foldable.$fFoldableLast2_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const S6PH7_srt+1280;
 },
 _c6XF3() //  [R1]
         { []
         }
     {offset
       c6XF3: // global
           if (R1 & 7 == 1) goto c6XF7; else goto c6XF8;
       c6XF7: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
       c6XF8: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XF3_info" {
     block_c6XF3_info:
         const _c6XF3;
         const 1;
         const 4294967326;
         const S6PH7_srt+1280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.824790194 UTC

[section ""data" . Data.Foldable.$fFoldableLast3_closure" {
     Data.Foldable.$fFoldableLast3_closure:
         const Data.Foldable.$fFoldableLast3_info;
         const 0;
 },
 Data.Foldable.$fFoldableLast3_entry() //  [R2]
         { []
         }
     {offset
       c6XFG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XFH; else goto c6XFI;
       c6XFH: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XFI: // global
           I64[Sp - 8] = block_c6XFz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XFP; else goto c6XFA;
       u6XFP: // global
           call _c6XFz(R1) args: 0, res: 0, upd: 0;
       c6XFA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast3_info" {
     Data.Foldable.$fFoldableLast3_info:
         const Data.Foldable.$fFoldableLast3_entry;
         const 0;
         const 9007203549708302;
         const 4294967301;
         const S6PH7_srt+1176;
 },
 _c6XFz() //  [R1]
         { []
         }
     {offset
       c6XFz: // global
           if (R1 & 7 == 1) goto c6XFD; else goto c6XFE;
       c6XFD: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XFE: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XFz_info" {
     block_c6XFz_info:
         const _c6XFz;
         const 0;
         const 4294967326;
         const S6PH7_srt+1176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.830555555 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cminimum_closure" {
     Data.Foldable.$fFoldableLast_$cminimum_closure:
         const Data.Foldable.$fFoldableLast_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableLast_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c6XG5: // global
           R2 = R3;
           call Data.Foldable.$fFoldableLast3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cminimum_info" {
     Data.Foldable.$fFoldableLast_$cminimum_info:
         const Data.Foldable.$fFoldableLast_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+1344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.835432109 UTC

[section ""data" . Data.Foldable.$fFoldableLast4_closure" {
     Data.Foldable.$fFoldableLast4_closure:
         const Data.Foldable.$fFoldableLast4_info;
         const 0;
 },
 Data.Foldable.$fFoldableLast4_entry() //  [R2]
         { []
         }
     {offset
       c6XGn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XGo; else goto c6XGp;
       c6XGo: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XGp: // global
           I64[Sp - 8] = block_c6XGg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XGw; else goto c6XGh;
       u6XGw: // global
           call _c6XGg(R1) args: 0, res: 0, upd: 0;
       c6XGh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast4_info" {
     Data.Foldable.$fFoldableLast4_info:
         const Data.Foldable.$fFoldableLast4_entry;
         const 0;
         const 144115192370823182;
         const 4294967301;
         const S6PH7_srt+1152;
 },
 _c6XGg() //  [R1]
         { []
         }
     {offset
       c6XGg: // global
           if (R1 & 7 == 1) goto c6XGk; else goto c6XGl;
       c6XGk: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XGl: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XGg_info" {
     block_c6XGg_info:
         const _c6XGg;
         const 0;
         const 4294967326;
         const S6PH7_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.840621775 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cmaximum_closure" {
     Data.Foldable.$fFoldableLast_$cmaximum_closure:
         const Data.Foldable.$fFoldableLast_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableLast_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c6XGM: // global
           R2 = R3;
           call Data.Foldable.$fFoldableLast4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cmaximum_info" {
     Data.Foldable.$fFoldableLast_$cmaximum_info:
         const Data.Foldable.$fFoldableLast_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+1352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.845415673 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$celem_closure" {
     Data.Foldable.$fFoldableLast_$celem_closure:
         const Data.Foldable.$fFoldableLast_$celem_info;
 },
 f_s6Ptt_entry() //  [R1]
         { []
         }
     {offset
       c6XH1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6XH2; else goto c6XH3;
       c6XH2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6XH3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6Ptt_info" {
     f_s6Ptt_info:
         const f_s6Ptt_entry;
         const 2;
         const 18;
 },
 sat_s6Ptx_entry() //  [R1, R2]
         { []
         }
     {offset
       c6XHg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XHh; else goto c6XHi;
       c6XHh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XHi: // global
           I64[Sp - 16] = block_c6XH9_info;
           _s6Ptt::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s6Ptt::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6XHp; else goto c6XHa;
       u6XHp: // global
           call _c6XH9(R1) args: 0, res: 0, upd: 0;
       c6XHa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Ptx_info" {
     sat_s6Ptx_info:
         const sat_s6Ptx_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c6XH9() //  [R1]
         { []
         }
     {offset
       c6XH9: // global
           if (R1 & 7 == 1) goto c6XHd; else goto c6XHe;
       c6XHd: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6XHe: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XH9_info" {
     block_c6XH9_info:
         const _c6XH9;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableLast_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XHq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6XHu; else goto c6XHt;
       c6XHu: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XHt: // global
           I64[Hp - 40] = f_s6Ptt_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6Ptx_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$celem_info" {
     Data.Foldable.$fFoldableLast_$celem_info:
         const Data.Foldable.$fFoldableLast_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.855204756 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cfoldl_closure" {
     Data.Foldable.$fFoldableLast_$cfoldl_closure:
         const Data.Foldable.$fFoldableLast_$cfoldl_info;
 },
 Data.Foldable.$fFoldableLast_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6XI2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6XI3; else goto c6XI4;
       c6XI3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$cfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XI4: // global
           I64[Sp - 24] = block_c6XHV_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6XIb; else goto c6XHW;
       u6XIb: // global
           call _c6XHV(R1) args: 0, res: 0, upd: 0;
       c6XHW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cfoldl_info" {
     Data.Foldable.$fFoldableLast_$cfoldl_info:
         const Data.Foldable.$fFoldableLast_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6XHV() //  [R1]
         { []
         }
     {offset
       c6XHV: // global
           _s6Ptz::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6XHZ; else goto c6XI0;
       c6XHZ: // global
           R1 = _s6Ptz::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XI0: // global
           R3 = P64[R1 + 6];
           R2 = _s6Ptz::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XHV_info" {
     block_c6XHV_info:
         const _c6XHV;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.86177075 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cfoldl1_closure" {
     Data.Foldable.$fFoldableLast_$cfoldl1_closure:
         const Data.Foldable.$fFoldableLast_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableLast_$cfoldl1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XIy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XIz; else goto c6XIA;
       c6XIz: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$cfoldl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XIA: // global
           I64[Sp - 8] = block_c6XIr_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XIH; else goto c6XIs;
       u6XIH: // global
           call _c6XIr(R1) args: 0, res: 0, upd: 0;
       c6XIs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cfoldl1_info" {
     Data.Foldable.$fFoldableLast_$cfoldl1_info:
         const Data.Foldable.$fFoldableLast_$cfoldl1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+1360;
 },
 _c6XIr() //  [R1]
         { []
         }
     {offset
       c6XIr: // global
           if (R1 & 7 == 1) goto c6XIv; else goto c6XIw;
       c6XIv: // global
           R1 = Data.Foldable.$fFoldable:.:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XIw: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XIr_info" {
     block_c6XIr_info:
         const _c6XIr;
         const 0;
         const 4294967326;
         const S6PH7_srt+1368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.867890898 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cfoldr'_closure" {
     Data.Foldable.$fFoldableLast_$cfoldr'_closure:
         const Data.Foldable.$fFoldableLast_$cfoldr'_info;
 },
 Data.Foldable.$fFoldableLast_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6XJ4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6XJ5; else goto c6XJ6;
       c6XJ5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$cfoldr'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XJ6: // global
           I64[Sp - 24] = block_c6XIX_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6XJd; else goto c6XIY;
       u6XJd: // global
           call _c6XIX(R1) args: 0, res: 0, upd: 0;
       c6XIY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cfoldr'_info" {
     Data.Foldable.$fFoldableLast_$cfoldr'_info:
         const Data.Foldable.$fFoldableLast_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6XIX() //  [R1]
         { []
         }
     {offset
       c6XIX: // global
           _s6PtI::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6XJ1; else goto c6XJ2;
       c6XJ1: // global
           R1 = _s6PtI::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XJ2: // global
           R3 = _s6PtI::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XIX_info" {
     block_c6XIX_info:
         const _c6XIX;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.873813413 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$clength_closure" {
     Data.Foldable.$fFoldableLast_$clength_closure:
         const Data.Foldable.$fFoldableLast_$clength_info;
 },
 Data.Foldable.$fFoldableLast_$clength_entry() //  [R2]
         { []
         }
     {offset
       c6XJA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XJB; else goto c6XJC;
       c6XJB: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XJC: // global
           I64[Sp - 8] = block_c6XJt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XJJ; else goto c6XJu;
       u6XJJ: // global
           call _c6XJt(R1) args: 0, res: 0, upd: 0;
       c6XJu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$clength_info" {
     Data.Foldable.$fFoldableLast_$clength_info:
         const Data.Foldable.$fFoldableLast_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6XJt() //  [R1]
         { []
         }
     {offset
       c6XJt: // global
           if (R1 & 7 == 1) goto c6XJx; else goto c6XJy;
       c6XJx: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6XJy: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XJt_info" {
     block_c6XJt_info:
         const _c6XJt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.879950521 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cfoldr1_closure" {
     Data.Foldable.$fFoldableLast_$cfoldr1_closure:
         const Data.Foldable.$fFoldableLast_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableLast_$cfoldr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XK8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XK9; else goto c6XKa;
       c6XK9: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$cfoldr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XKa: // global
           I64[Sp - 8] = block_c6XK1_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XKh; else goto c6XK2;
       u6XKh: // global
           call _c6XK1(R1) args: 0, res: 0, upd: 0;
       c6XK2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cfoldr1_info" {
     Data.Foldable.$fFoldableLast_$cfoldr1_info:
         const Data.Foldable.$fFoldableLast_$cfoldr1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+1376;
 },
 _c6XK1() //  [R1]
         { []
         }
     {offset
       c6XK1: // global
           if (R1 & 7 == 1) goto c6XK5; else goto c6XK6;
       c6XK5: // global
           R1 = Data.Foldable.$fFoldable:.:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XK6: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XK1_info" {
     block_c6XK1_info:
         const _c6XK1;
         const 0;
         const 4294967326;
         const S6PH7_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.886501992 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cnull_closure" {
     Data.Foldable.$fFoldableLast_$cnull_closure:
         const Data.Foldable.$fFoldableLast_$cnull_info;
 },
 Data.Foldable.$fFoldableLast_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6XKE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XKF; else goto c6XKG;
       c6XKF: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XKG: // global
           I64[Sp - 8] = block_c6XKx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XKN; else goto c6XKy;
       u6XKN: // global
           call _c6XKx(R1) args: 0, res: 0, upd: 0;
       c6XKy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cnull_info" {
     Data.Foldable.$fFoldableLast_$cnull_info:
         const Data.Foldable.$fFoldableLast_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6XKx() //  [R1]
         { []
         }
     {offset
       c6XKx: // global
           if (R1 & 7 == 1) goto c6XKB; else goto c6XKC;
       c6XKB: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6XKC: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XKx_info" {
     block_c6XKx_info:
         const _c6XKx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.892459445 UTC

[section ""data" . Data.Foldable.$fFoldableLast1_closure" {
     Data.Foldable.$fFoldableLast1_closure:
         const Data.Foldable.$fFoldableLast1_info;
         const 0;
 },
 Data.Foldable.$fFoldableLast1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XLc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XLd; else goto c6XLe;
       c6XLd: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XLe: // global
           I64[Sp - 16] = block_c6XL5_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6XLl; else goto c6XL6;
       u6XLl: // global
           call _c6XL5(R1) args: 0, res: 0, upd: 0;
       c6XL6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast1_info" {
     Data.Foldable.$fFoldableLast1_info:
         const Data.Foldable.$fFoldableLast1_entry;
         const 0;
         const 1103806595086;
         const 8589934607;
         const S6PH7_srt+1328;
 },
 _c6XL5() //  [R1]
         { []
         }
     {offset
       c6XL5: // global
           if (R1 & 7 == 1) goto c6XL9; else goto c6XLa;
       c6XL9: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
       c6XLa: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XL5_info" {
     block_c6XL5_info:
         const _c6XL5;
         const 1;
         const 4294967326;
         const S6PH7_srt+1328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.898554824 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$ctoList_closure" {
     Data.Foldable.$fFoldableLast_$ctoList_closure:
         const Data.Foldable.$fFoldableLast_$ctoList_info;
 },
 Data.Foldable.$fFoldableLast_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6XLI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XLJ; else goto c6XLK;
       c6XLJ: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XLK: // global
           I64[Sp - 8] = block_c6XLB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XLU; else goto c6XLC;
       u6XLU: // global
           call _c6XLB(R1) args: 0, res: 0, upd: 0;
       c6XLC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$ctoList_info" {
     Data.Foldable.$fFoldableLast_$ctoList_info:
         const Data.Foldable.$fFoldableLast_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6XLB() //  [R1]
         { []
         }
     {offset
       c6XLB: // global
           if (R1 & 7 == 1) goto c6XLF; else goto c6XLG;
       c6XLF: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6XLG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6XLT; else goto c6XLS;
       c6XLT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6XLS: // global
           _s6Pu2::P64 = P64[R1 + 6];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s6Pu2::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XLB_info" {
     block_c6XLB_info:
         const _c6XLB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.904013158 UTC

[section ""data" . Data.Foldable.$fFoldableLast_closure" {
     Data.Foldable.$fFoldableLast_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableLast_$cfold_closure+2;
         const Data.Foldable.$fFoldableLast_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableLast_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableLast_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableLast_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableLast_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableLast_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableLast_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableLast_$ctoList_closure+1;
         const Data.Foldable.$fFoldableLast_$cnull_closure+1;
         const Data.Foldable.$fFoldableLast_$clength_closure+1;
         const Data.Foldable.$fFoldableLast_$celem_closure+2;
         const Data.Foldable.$fFoldableLast_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableLast_$cminimum_closure+2;
         const Data.Foldable.$fFoldableLast2_closure+2;
         const Data.Foldable.$fFoldableLast1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.907063395 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cfoldMap_closure" {
     Data.Foldable.$fFoldableFirst_$cfoldMap_closure:
         const Data.Foldable.$fFoldableFirst_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableFirst_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6XMk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6XMl; else goto c6XMm;
       c6XMl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XMm: // global
           I64[Sp - 24] = block_c6XMd_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6XMt; else goto c6XMe;
       u6XMt: // global
           call _c6XMd(R1) args: 0, res: 0, upd: 0;
       c6XMe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cfoldMap_info" {
     Data.Foldable.$fFoldableFirst_$cfoldMap_info:
         const Data.Foldable.$fFoldableFirst_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6XMd() //  [R1]
         { []
         }
     {offset
       c6XMd: // global
           if (R1 & 7 == 1) goto c6XMh; else goto c6XMi;
       c6XMh: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c6XMi: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XMd_info" {
     block_c6XMd_info:
         const _c6XMd;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.913749927 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cfold_closure" {
     Data.Foldable.$fFoldableFirst_$cfold_closure:
         const Data.Foldable.$fFoldableFirst_$cfold_info;
 },
 Data.Foldable.$fFoldableFirst_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XMQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XMR; else goto c6XMS;
       c6XMR: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XMS: // global
           I64[Sp - 16] = block_c6XMJ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6XMZ; else goto c6XMK;
       u6XMZ: // global
           call _c6XMJ(R1) args: 0, res: 0, upd: 0;
       c6XMK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cfold_info" {
     Data.Foldable.$fFoldableFirst_$cfold_info:
         const Data.Foldable.$fFoldableFirst_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6XMJ() //  [R1]
         { []
         }
     {offset
       c6XMJ: // global
           if (R1 & 7 == 1) goto c6XMN; else goto c6XMO;
       c6XMN: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c6XMO: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XMJ_info" {
     block_c6XMJ_info:
         const _c6XMJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.919677301 UTC

[section ""data" . Data.Foldable.$fFoldableFirst2_closure" {
     Data.Foldable.$fFoldableFirst2_closure:
         const Data.Foldable.$fFoldableFirst2_info;
         const 0;
 },
 Data.Foldable.$fFoldableFirst2_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XNm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XNn; else goto c6XNo;
       c6XNn: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XNo: // global
           I64[Sp - 16] = block_c6XNf_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6XNv; else goto c6XNg;
       u6XNv: // global
           call _c6XNf(R1) args: 0, res: 0, upd: 0;
       c6XNg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst2_info" {
     Data.Foldable.$fFoldableFirst2_info:
         const Data.Foldable.$fFoldableFirst2_entry;
         const 0;
         const 140741783322638;
         const 8589934607;
         const S6PH7_srt+1280;
 },
 _c6XNf() //  [R1]
         { []
         }
     {offset
       c6XNf: // global
           if (R1 & 7 == 1) goto c6XNj; else goto c6XNk;
       c6XNj: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
       c6XNk: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XNf_info" {
     block_c6XNf_info:
         const _c6XNf;
         const 1;
         const 4294967326;
         const S6PH7_srt+1280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.925277418 UTC

[section ""data" . Data.Foldable.$fFoldableFirst3_closure" {
     Data.Foldable.$fFoldableFirst3_closure:
         const Data.Foldable.$fFoldableFirst3_info;
         const 0;
 },
 Data.Foldable.$fFoldableFirst3_entry() //  [R2]
         { []
         }
     {offset
       c6XNS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XNT; else goto c6XNU;
       c6XNT: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XNU: // global
           I64[Sp - 8] = block_c6XNL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XO1; else goto c6XNM;
       u6XO1: // global
           call _c6XNL(R1) args: 0, res: 0, upd: 0;
       c6XNM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst3_info" {
     Data.Foldable.$fFoldableFirst3_info:
         const Data.Foldable.$fFoldableFirst3_entry;
         const 0;
         const 2305843013508661262;
         const 4294967301;
         const S6PH7_srt+1176;
 },
 _c6XNL() //  [R1]
         { []
         }
     {offset
       c6XNL: // global
           if (R1 & 7 == 1) goto c6XNP; else goto c6XNQ;
       c6XNP: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XNQ: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XNL_info" {
     block_c6XNL_info:
         const _c6XNL;
         const 0;
         const 4294967326;
         const S6PH7_srt+1176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.930519943 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cminimum_closure" {
     Data.Foldable.$fFoldableFirst_$cminimum_closure:
         const Data.Foldable.$fFoldableFirst_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableFirst_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c6XOh: // global
           R2 = R3;
           call Data.Foldable.$fFoldableFirst3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cminimum_info" {
     Data.Foldable.$fFoldableFirst_$cminimum_info:
         const Data.Foldable.$fFoldableFirst_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+1408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.934368858 UTC

[section ""data" . Data.Foldable.$fFoldableFirst4_closure" {
     Data.Foldable.$fFoldableFirst4_closure:
         const Data.Foldable.$fFoldableFirst4_info;
         const 0;
 },
 Data.Foldable.$fFoldableFirst4_entry() //  [R2]
         { []
         }
     {offset
       c6XOz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XOA; else goto c6XOB;
       c6XOA: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XOB: // global
           I64[Sp - 8] = block_c6XOs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XOI; else goto c6XOt;
       u6XOI: // global
           call _c6XOs(R1) args: 0, res: 0, upd: 0;
       c6XOt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst4_info" {
     Data.Foldable.$fFoldableFirst4_info:
         const Data.Foldable.$fFoldableFirst4_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6PH7_srt+1416;
 },
 _c6XOs() //  [R1]
         { []
         }
     {offset
       c6XOs: // global
           if (R1 & 7 == 1) goto c6XOw; else goto c6XOx;
       c6XOw: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XOx: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XOs_info" {
     block_c6XOs_info:
         const _c6XOs;
         const 0;
         const 4294967326;
         const S6PH7_srt+1424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.940299548 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cmaximum_closure" {
     Data.Foldable.$fFoldableFirst_$cmaximum_closure:
         const Data.Foldable.$fFoldableFirst_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableFirst_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c6XOY: // global
           R2 = R3;
           call Data.Foldable.$fFoldableFirst4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cmaximum_info" {
     Data.Foldable.$fFoldableFirst_$cmaximum_info:
         const Data.Foldable.$fFoldableFirst_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+1416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.945235813 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$celem_closure" {
     Data.Foldable.$fFoldableFirst_$celem_closure:
         const Data.Foldable.$fFoldableFirst_$celem_info;
 },
 f_s6Puq_entry() //  [R1]
         { []
         }
     {offset
       c6XPd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6XPe; else goto c6XPf;
       c6XPe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6XPf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6Puq_info" {
     f_s6Puq_info:
         const f_s6Puq_entry;
         const 2;
         const 18;
 },
 sat_s6Puu_entry() //  [R1, R2]
         { []
         }
     {offset
       c6XPs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XPt; else goto c6XPu;
       c6XPt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XPu: // global
           I64[Sp - 16] = block_c6XPl_info;
           _s6Puq::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s6Puq::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6XPB; else goto c6XPm;
       u6XPB: // global
           call _c6XPl(R1) args: 0, res: 0, upd: 0;
       c6XPm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Puu_info" {
     sat_s6Puu_info:
         const sat_s6Puu_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c6XPl() //  [R1]
         { []
         }
     {offset
       c6XPl: // global
           if (R1 & 7 == 1) goto c6XPp; else goto c6XPq;
       c6XPp: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6XPq: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XPl_info" {
     block_c6XPl_info:
         const _c6XPl;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableFirst_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XPC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6XPG; else goto c6XPF;
       c6XPG: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XPF: // global
           I64[Hp - 40] = f_s6Puq_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6Puu_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$celem_info" {
     Data.Foldable.$fFoldableFirst_$celem_info:
         const Data.Foldable.$fFoldableFirst_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.954684079 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cfoldl_closure" {
     Data.Foldable.$fFoldableFirst_$cfoldl_closure:
         const Data.Foldable.$fFoldableFirst_$cfoldl_info;
 },
 Data.Foldable.$fFoldableFirst_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6XQe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6XQf; else goto c6XQg;
       c6XQf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$cfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XQg: // global
           I64[Sp - 24] = block_c6XQ7_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6XQn; else goto c6XQ8;
       u6XQn: // global
           call _c6XQ7(R1) args: 0, res: 0, upd: 0;
       c6XQ8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cfoldl_info" {
     Data.Foldable.$fFoldableFirst_$cfoldl_info:
         const Data.Foldable.$fFoldableFirst_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6XQ7() //  [R1]
         { []
         }
     {offset
       c6XQ7: // global
           _s6Puw::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6XQb; else goto c6XQc;
       c6XQb: // global
           R1 = _s6Puw::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XQc: // global
           R3 = P64[R1 + 6];
           R2 = _s6Puw::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XQ7_info" {
     block_c6XQ7_info:
         const _c6XQ7;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.960675696 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cfoldl1_closure" {
     Data.Foldable.$fFoldableFirst_$cfoldl1_closure:
         const Data.Foldable.$fFoldableFirst_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableFirst_$cfoldl1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XQK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XQL; else goto c6XQM;
       c6XQL: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$cfoldl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XQM: // global
           I64[Sp - 8] = block_c6XQD_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XQT; else goto c6XQE;
       u6XQT: // global
           call _c6XQD(R1) args: 0, res: 0, upd: 0;
       c6XQE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cfoldl1_info" {
     Data.Foldable.$fFoldableFirst_$cfoldl1_info:
         const Data.Foldable.$fFoldableFirst_$cfoldl1_entry;
         const 0;
         const 1103806595086;
         const 8589934607;
         const S6PH7_srt+1368;
 },
 _c6XQD() //  [R1]
         { []
         }
     {offset
       c6XQD: // global
           if (R1 & 7 == 1) goto c6XQH; else goto c6XQI;
       c6XQH: // global
           R1 = Data.Foldable.$fFoldable:.:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XQI: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XQD_info" {
     block_c6XQD_info:
         const _c6XQD;
         const 0;
         const 4294967326;
         const S6PH7_srt+1368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.967990287 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cfoldr'_closure" {
     Data.Foldable.$fFoldableFirst_$cfoldr'_closure:
         const Data.Foldable.$fFoldableFirst_$cfoldr'_info;
 },
 Data.Foldable.$fFoldableFirst_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6XRg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6XRh; else goto c6XRi;
       c6XRh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$cfoldr'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XRi: // global
           I64[Sp - 24] = block_c6XR9_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6XRp; else goto c6XRa;
       u6XRp: // global
           call _c6XR9(R1) args: 0, res: 0, upd: 0;
       c6XRa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cfoldr'_info" {
     Data.Foldable.$fFoldableFirst_$cfoldr'_info:
         const Data.Foldable.$fFoldableFirst_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6XR9() //  [R1]
         { []
         }
     {offset
       c6XR9: // global
           _s6PuF::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6XRd; else goto c6XRe;
       c6XRd: // global
           R1 = _s6PuF::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XRe: // global
           R3 = _s6PuF::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XR9_info" {
     block_c6XR9_info:
         const _c6XR9;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.974295906 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$clength_closure" {
     Data.Foldable.$fFoldableFirst_$clength_closure:
         const Data.Foldable.$fFoldableFirst_$clength_info;
 },
 Data.Foldable.$fFoldableFirst_$clength_entry() //  [R2]
         { []
         }
     {offset
       c6XRM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XRN; else goto c6XRO;
       c6XRN: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XRO: // global
           I64[Sp - 8] = block_c6XRF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XRV; else goto c6XRG;
       u6XRV: // global
           call _c6XRF(R1) args: 0, res: 0, upd: 0;
       c6XRG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$clength_info" {
     Data.Foldable.$fFoldableFirst_$clength_info:
         const Data.Foldable.$fFoldableFirst_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6XRF() //  [R1]
         { []
         }
     {offset
       c6XRF: // global
           if (R1 & 7 == 1) goto c6XRJ; else goto c6XRK;
       c6XRJ: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6XRK: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XRF_info" {
     block_c6XRF_info:
         const _c6XRF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.979914389 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cfoldr1_closure" {
     Data.Foldable.$fFoldableFirst_$cfoldr1_closure:
         const Data.Foldable.$fFoldableFirst_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableFirst_$cfoldr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XSk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XSl; else goto c6XSm;
       c6XSl: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$cfoldr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XSm: // global
           I64[Sp - 8] = block_c6XSd_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XSt; else goto c6XSe;
       u6XSt: // global
           call _c6XSd(R1) args: 0, res: 0, upd: 0;
       c6XSe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cfoldr1_info" {
     Data.Foldable.$fFoldableFirst_$cfoldr1_info:
         const Data.Foldable.$fFoldableFirst_$cfoldr1_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const S6PH7_srt+1384;
 },
 _c6XSd() //  [R1]
         { []
         }
     {offset
       c6XSd: // global
           if (R1 & 7 == 1) goto c6XSh; else goto c6XSi;
       c6XSh: // global
           R1 = Data.Foldable.$fFoldable:.:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XSi: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XSd_info" {
     block_c6XSd_info:
         const _c6XSd;
         const 0;
         const 4294967326;
         const S6PH7_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.985651186 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cnull_closure" {
     Data.Foldable.$fFoldableFirst_$cnull_closure:
         const Data.Foldable.$fFoldableFirst_$cnull_info;
 },
 Data.Foldable.$fFoldableFirst_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6XSQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XSR; else goto c6XSS;
       c6XSR: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XSS: // global
           I64[Sp - 8] = block_c6XSJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XSZ; else goto c6XSK;
       u6XSZ: // global
           call _c6XSJ(R1) args: 0, res: 0, upd: 0;
       c6XSK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cnull_info" {
     Data.Foldable.$fFoldableFirst_$cnull_info:
         const Data.Foldable.$fFoldableFirst_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6XSJ() //  [R1]
         { []
         }
     {offset
       c6XSJ: // global
           if (R1 & 7 == 1) goto c6XSN; else goto c6XSO;
       c6XSN: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6XSO: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XSJ_info" {
     block_c6XSJ_info:
         const _c6XSJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.992397582 UTC

[section ""data" . Data.Foldable.$fFoldableFirst1_closure" {
     Data.Foldable.$fFoldableFirst1_closure:
         const Data.Foldable.$fFoldableFirst1_info;
         const 0;
 },
 Data.Foldable.$fFoldableFirst1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XTo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XTp; else goto c6XTq;
       c6XTp: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XTq: // global
           I64[Sp - 16] = block_c6XTh_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6XTx; else goto c6XTi;
       u6XTx: // global
           call _c6XTh(R1) args: 0, res: 0, upd: 0;
       c6XTi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst1_info" {
     Data.Foldable.$fFoldableFirst1_info:
         const Data.Foldable.$fFoldableFirst1_entry;
         const 0;
         const 140741783322638;
         const 8589934607;
         const S6PH7_srt+1328;
 },
 _c6XTh() //  [R1]
         { []
         }
     {offset
       c6XTh: // global
           if (R1 & 7 == 1) goto c6XTl; else goto c6XTm;
       c6XTl: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
       c6XTm: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XTh_info" {
     block_c6XTh_info:
         const _c6XTh;
         const 1;
         const 4294967326;
         const S6PH7_srt+1328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:06.998379963 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$ctoList_closure" {
     Data.Foldable.$fFoldableFirst_$ctoList_closure:
         const Data.Foldable.$fFoldableFirst_$ctoList_info;
 },
 Data.Foldable.$fFoldableFirst_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6XTU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6XTV; else goto c6XTW;
       c6XTV: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XTW: // global
           I64[Sp - 8] = block_c6XTN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6XU6; else goto c6XTO;
       u6XU6: // global
           call _c6XTN(R1) args: 0, res: 0, upd: 0;
       c6XTO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$ctoList_info" {
     Data.Foldable.$fFoldableFirst_$ctoList_info:
         const Data.Foldable.$fFoldableFirst_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6XTN() //  [R1]
         { []
         }
     {offset
       c6XTN: // global
           if (R1 & 7 == 1) goto c6XTR; else goto c6XTS;
       c6XTR: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6XTS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6XU5; else goto c6XU4;
       c6XU5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6XU4: // global
           _s6PuZ::P64 = P64[R1 + 6];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s6PuZ::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XTN_info" {
     block_c6XTN_info:
         const _c6XTN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.003424417 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_closure" {
     Data.Foldable.$fFoldableFirst_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableFirst_$cfold_closure+2;
         const Data.Foldable.$fFoldableFirst_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableFirst_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableFirst_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableFirst_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableFirst_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableFirst_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableFirst_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableFirst_$ctoList_closure+1;
         const Data.Foldable.$fFoldableFirst_$cnull_closure+1;
         const Data.Foldable.$fFoldableFirst_$clength_closure+1;
         const Data.Foldable.$fFoldableFirst_$celem_closure+2;
         const Data.Foldable.$fFoldableFirst_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableFirst_$cminimum_closure+2;
         const Data.Foldable.$fFoldableFirst2_closure+2;
         const Data.Foldable.$fFoldableFirst1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.005895227 UTC

[section ""data" . Data.Foldable.all1_closure" {
     Data.Foldable.all1_closure:
         const Data.Foldable.all1_info;
         const 0;
 },
 Data.Foldable.all1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XUp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6XUq; else goto c6XUr;
       c6XUq: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.all1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XUr: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Semigroup.Internal.$fMonoidAll_closure;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call Data.Foldable.foldMap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.all1_info" {
     Data.Foldable.all1_info:
         const Data.Foldable.all1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+1456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.009855684 UTC

[section ""data" . Data.Foldable.all_closure" {
     Data.Foldable.all_closure:
         const Data.Foldable.all_info;
         const 0;
 },
 Data.Foldable.all_entry() //  [R2, R3]
         { []
         }
     {offset
       c6XUB: // global
           R3 = R3;
           R2 = R2;
           call Data.Foldable.all1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.all_info" {
     Data.Foldable.all_info:
         const Data.Foldable.all_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6PH7_srt+1456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.013955385 UTC

[section ""data" . Data.Foldable.$fFoldable:.:1_closure" {
     Data.Foldable.$fFoldable:.:1_closure:
         const Data.Foldable.$fFoldable:.:1_info;
         const 0;
 },
 sat_s6Pv5_entry() //  [R1]
         { []
         }
     {offset
       c6XUQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XUR; else goto c6XUS;
       c6XUR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6XUS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Foldable.null_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pv5_info" {
     sat_s6Pv5_info:
         const sat_s6Pv5_entry;
         const 1;
         const 16;
 },
 Data.Foldable.$fFoldable:.:1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6XUT: // global
           _s6Pv4::P64 = R4;
           _s6Pv3::P64 = R3;
           _s6Pv2::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c6XUU; else goto c6XUV;
       c6XUV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6XUX; else goto c6XUW;
       c6XUX: // global
           HpAlloc = 24;
           goto c6XUU;
       c6XUU: // global
           R4 = _s6Pv4::P64;
           R3 = _s6Pv3::P64;
           R2 = _s6Pv2::P64;
           R1 = Data.Foldable.$fFoldable:.:1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XUW: // global
           I64[Hp - 16] = sat_s6Pv5_info;
           P64[Hp] = _s6Pv3::P64;
           R2 = _s6Pv2::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAll_closure;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _s6Pv4::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:1_info" {
     Data.Foldable.$fFoldable:.:1_info:
         const Data.Foldable.$fFoldable:.:1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6PH7_srt+1464;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.021029902 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cfold_closure" {
     Data.Foldable.$fFoldable:.:_$cfold_closure:
         const Data.Foldable.$fFoldable:.:_$cfold_info;
 },
 sat_s6Pva_entry() //  [R1]
         { []
         }
     {offset
       c6XVg: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6XVh; else goto c6XVi;
       c6XVh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6XVi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.id_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pva_info" {
     sat_s6Pva_info:
         const sat_s6Pva_entry;
         const 2;
         const 18;
 },
 Data.Foldable.$fFoldable:.:_$cfold_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6XVj: // global
           _s6Pv9::P64 = R5;
           _s6Pv8::P64 = R4;
           _s6Pv7::P64 = R3;
           _s6Pv6::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c6XVk; else goto c6XVl;
       c6XVl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6XVn; else goto c6XVm;
       c6XVn: // global
           HpAlloc = 32;
           goto c6XVk;
       c6XVk: // global
           R5 = _s6Pv9::P64;
           R4 = _s6Pv8::P64;
           R3 = _s6Pv7::P64;
           R2 = _s6Pv6::P64;
           R1 = Data.Foldable.$fFoldable:.:_$cfold_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XVm: // global
           I64[Hp - 24] = sat_s6Pva_info;
           P64[Hp - 8] = _s6Pv7::P64;
           P64[Hp] = _s6Pv8::P64;
           R2 = _s6Pv6::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _s6Pv8::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _s6Pv9::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cfold_info" {
     Data.Foldable.$fFoldable:.:_$cfold_info:
         const Data.Foldable.$fFoldable:.:_$cfold_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.028497155 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$csum_closure" {
     Data.Foldable.$fFoldable:.:_$csum_closure:
         const Data.Foldable.$fFoldable:.:_$csum_info;
         const 0;
 },
 $dMonoid_s6Pve_entry() //  [R1]
         { []
         }
     {offset
       c6XVH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XVI; else goto c6XVJ;
       c6XVI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6XVJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6Pve_info" {
     $dMonoid_s6Pve_info:
         const $dMonoid_s6Pve_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+1480;
 },
 lvl1_s6Pvf_entry() //  [R1]
         { []
         }
     {offset
       c6XVO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6XVP; else goto c6XVQ;
       c6XVP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6XVQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Foldable.$fFoldable:*:1_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_s6Pvf_info" {
     lvl1_s6Pvf_info:
         const lvl1_s6Pvf_entry;
         const 2;
         const 18;
 },
 sat_s6Pvh_entry() //  [R1, R2]
         { []
         }
     {offset
       c6XVW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6XVX; else goto c6XVY;
       c6XVX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XVY: // global
           _s6Pvg::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _s6Pvg::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pvh_info" {
     sat_s6Pvh_info:
         const sat_s6Pvh_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Data.Foldable.$fFoldable:.:_$csum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6XVZ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c6XW3; else goto c6XW2;
       c6XW3: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:.:_$csum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XW2: // global
           I64[Hp - 80] = $dMonoid_s6Pve_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl1_s6Pvf_info;
           P64[Hp - 40] = R3;
           _c6XVD::P64 = Hp - 80;
           P64[Hp - 32] = _c6XVD::P64;
           I64[Hp - 24] = sat_s6Pvh_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _c6XVD::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$csum_info" {
     Data.Foldable.$fFoldable:.:_$csum_info:
         const Data.Foldable.$fFoldable:.:_$csum_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6PH7_srt+1480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.039278043 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cminimum_closure" {
     Data.Foldable.$fFoldable:.:_$cminimum_closure:
         const Data.Foldable.$fFoldable:.:_$cminimum_info;
         const 0;
 },
 $dMonoid_s6Pvl_entry() //  [R1]
         { []
         }
     {offset
       c6XWx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XWy; else goto c6XWz;
       c6XWy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6XWz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6Pvl_info" {
     $dMonoid_s6Pvl_info:
         const $dMonoid_s6Pvl_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+1496;
 },
 lvl1_s6Pvm_entry() //  [R1]
         { []
         }
     {offset
       c6XWE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6XWF; else goto c6XWG;
       c6XWF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6XWG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_s6Pvm_info" {
     lvl1_s6Pvm_info:
         const lvl1_s6Pvm_entry;
         const 2;
         const 18;
 },
 sat_s6Pvq_entry() //  [R1, R2]
         { []
         }
     {offset
       c6XWS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6XWT; else goto c6XWU;
       c6XWT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XWU: // global
           I64[Sp - 8] = block_c6XWM_info;
           _s6Pvn::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = P64[R1 + 23];
           P64[Sp - 16] = _s6Pvn::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pvq_info" {
     sat_s6Pvq_info:
         const sat_s6Pvq_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S6PH7_srt+1504;
 },
 _c6XWM() //  [R1]
         { []
         }
     {offset
       c6XWM: // global
           if (R1 & 7 == 1) goto c6XWP; else goto c6XWQ;
       c6XWP: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XWQ: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XWM_info" {
     block_c6XWM_info:
         const _c6XWM;
         const 0;
         const 4294967326;
         const S6PH7_srt+1504;
 },
 Data.Foldable.$fFoldable:.:_$cminimum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6XX1: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c6XX5; else goto c6XX4;
       c6XX5: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:.:_$cminimum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XX4: // global
           I64[Hp - 80] = $dMonoid_s6Pvl_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl1_s6Pvm_info;
           P64[Hp - 40] = R3;
           _c6XWt::P64 = Hp - 80;
           P64[Hp - 32] = _c6XWt::P64;
           I64[Hp - 24] = sat_s6Pvq_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _c6XWt::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cminimum_info" {
     Data.Foldable.$fFoldable:.:_$cminimum_info:
         const Data.Foldable.$fFoldable:.:_$cminimum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S6PH7_srt+1496;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.052098793 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cmaximum_closure" {
     Data.Foldable.$fFoldable:.:_$cmaximum_closure:
         const Data.Foldable.$fFoldable:.:_$cmaximum_info;
         const 0;
 },
 $dMonoid_s6Pvu_entry() //  [R1]
         { []
         }
     {offset
       c6XXE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6XXF; else goto c6XXG;
       c6XXF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6XXG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6Pvu_info" {
     $dMonoid_s6Pvu_info:
         const $dMonoid_s6Pvu_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+1520;
 },
 lvl1_s6Pvv_entry() //  [R1]
         { []
         }
     {offset
       c6XXL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6XXM; else goto c6XXN;
       c6XXM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6XXN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_s6Pvv_info" {
     lvl1_s6Pvv_info:
         const lvl1_s6Pvv_entry;
         const 2;
         const 18;
 },
 sat_s6Pvz_entry() //  [R1, R2]
         { []
         }
     {offset
       c6XXZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6XY0; else goto c6XY1;
       c6XY0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XY1: // global
           I64[Sp - 8] = block_c6XXT_info;
           _s6Pvw::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = P64[R1 + 23];
           P64[Sp - 16] = _s6Pvw::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pvz_info" {
     sat_s6Pvz_info:
         const sat_s6Pvz_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S6PH7_srt+1424;
 },
 _c6XXT() //  [R1]
         { []
         }
     {offset
       c6XXT: // global
           if (R1 & 7 == 1) goto c6XXW; else goto c6XXX;
       c6XXW: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6XXX: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6XXT_info" {
     block_c6XXT_info:
         const _c6XXT;
         const 0;
         const 4294967326;
         const S6PH7_srt+1424;
 },
 Data.Foldable.$fFoldable:.:_$cmaximum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6XY8: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c6XYc; else goto c6XYb;
       c6XYc: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:.:_$cmaximum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XYb: // global
           I64[Hp - 80] = $dMonoid_s6Pvu_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl1_s6Pvv_info;
           P64[Hp - 40] = R3;
           _c6XXA::P64 = Hp - 80;
           P64[Hp - 32] = _c6XXA::P64;
           I64[Hp - 24] = sat_s6Pvz_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _c6XXA::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cmaximum_info" {
     Data.Foldable.$fFoldable:.:_$cmaximum_info:
         const Data.Foldable.$fFoldable:.:_$cmaximum_entry;
         const 0;
         const 52780853100558;
         const 12884901911;
         const S6PH7_srt+1424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.064316574 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$celem_closure" {
     Data.Foldable.$fFoldable:.:_$celem_closure:
         const Data.Foldable.$fFoldable:.:_$celem_info;
         const 0;
 },
 sat_s6PvF_entry() //  [R1]
         { []
         }
     {offset
       c6XYP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6XYQ; else goto c6XYR;
       c6XYQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6XYR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6PvF_info" {
     sat_s6PvF_info:
         const sat_s6PvF_entry;
         const 2;
         const 18;
 },
 lvl1_s6PvE_entry() //  [R1]
         { []
         }
     {offset
       c6XYS: // global
           _s6PvE::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6XYT; else goto c6XYU;
       c6XYU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6XYW; else goto c6XYV;
       c6XYW: // global
           HpAlloc = 32;
           goto c6XYT;
       c6XYT: // global
           R1 = _s6PvE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6XYV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6PvE::P64;
           _s6PvB::P64 = P64[_s6PvE::P64 + 16];
           _s6PvC::P64 = P64[_s6PvE::P64 + 24];
           _s6PvD::P64 = P64[_s6PvE::P64 + 32];
           I64[Hp - 24] = sat_s6PvF_info;
           P64[Hp - 8] = _s6PvC::P64;
           P64[Hp] = _s6PvD::P64;
           R2 = _s6PvB::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_s6PvE_info" {
     lvl1_s6PvE_info:
         const lvl1_s6PvE_entry;
         const 3;
         const 4294967311;
         const S6PH7_srt+1536;
 },
 sat_s6PvH_entry() //  [R1, R2]
         { []
         }
     {offset
       c6XZ2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6XZ3; else goto c6XZ4;
       c6XZ3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6XZ4: // global
           _s6PvG::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = _s6PvG::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PvH_info" {
     sat_s6PvH_info:
         const sat_s6PvH_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+1536;
 },
 Data.Foldable.$fFoldable:.:_$celem_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6XZ5: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6XZ9; else goto c6XZ8;
       c6XZ9: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:.:_$celem_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6XZ8: // global
           I64[Hp - 56] = lvl1_s6PvE_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = sat_s6PvH_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$celem_info" {
     Data.Foldable.$fFoldable:.:_$celem_info:
         const Data.Foldable.$fFoldable:.:_$celem_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S6PH7_srt+1536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.076952254 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cfoldr1_closure" {
     Data.Foldable.$fFoldable:.:_$cfoldr1_closure:
         const Data.Foldable.$fFoldable:.:_$cfoldr1_info;
         const 0;
 },
 sat_s6PvR_entry() //  [R1]
         { []
         }
     {offset
       c6XZP: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6XZQ; else goto c6XZR;
       c6XZQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6XZR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6XZI_info;
           _s6PvK::P64 = P64[R1 + 16];
           _s6PvN::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6PvK::P64;
           P64[Sp - 24] = _s6PvN::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6XZY; else goto c6XZJ;
       u6XZY: // global
           call _c6XZI(R1) args: 0, res: 0, upd: 0;
       c6XZJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6PvR_info" {
     sat_s6PvR_info:
         const sat_s6PvR_entry;
         const 3;
         const 15;
 },
 _c6XZI() //  [R1]
         { []
         }
     {offset
       c6XZI: // global
           _s6PvN::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6XZM; else goto c6XZN;
       c6XZM: // global
           R1 = _s6PvN::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c6XZN: // global
           R3 = P64[R1 + 6];
           R2 = _s6PvN::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6XZI_info" {
     block_c6XZI_info:
         const _c6XZI;
         const 2;
         const 30;
 },
 f2_s6PvM_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Y00: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6Y04; else goto c6Y03;
       c6Y04: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Y03: // global
           _s6PvK::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6PvR_info;
           P64[Hp - 32] = _s6PvK::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f2_s6PvM_info" {
     f2_s6PvM_info:
         const f2_s6PvM_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6PvU_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Y0a: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Y0b; else goto c6Y0c;
       c6Y0b: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Y0c: // global
           _s6PvS::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 14];
           P64[Sp - 16] = R3;
           P64[Sp - 8] = _s6PvS::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PvU_info" {
     sat_s6PvU_info:
         const sat_s6PvU_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:.:_$cfoldr1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6Y0j: // global
           _s6PvL::P64 = R5;
           _s6PvK::P64 = R4;
           _s6PvJ::P64 = R3;
           _s6PvI::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6Y0k; else goto c6Y0l;
       c6Y0l: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6Y0n; else goto c6Y0m;
       c6Y0n: // global
           HpAlloc = 40;
           goto c6Y0k;
       c6Y0k: // global
           R5 = _s6PvL::P64;
           R4 = _s6PvK::P64;
           R3 = _s6PvJ::P64;
           R2 = _s6PvI::P64;
           R1 = Data.Foldable.$fFoldable:.:_$cfoldr1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Y0m: // global
           I64[Hp - 32] = f2_s6PvM_info;
           P64[Hp - 24] = _s6PvK::P64;
           I64[Hp - 16] = sat_s6PvU_info;
           P64[Hp - 8] = _s6PvJ::P64;
           P64[Hp] = Hp - 30;
           I64[Sp - 8] = block_c6Y0d_info;
           R2 = _s6PvI::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 14;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _s6PvL::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cfoldr1_info" {
     Data.Foldable.$fFoldable:.:_$cfoldr1_info:
         const Data.Foldable.$fFoldable:.:_$cfoldr1_entry;
         const 0;
         const 9007203549708302;
         const 17179869208;
         const S6PH7_srt+1384;
 },
 _c6Y0d() //  [R1]
         { []
         }
     {offset
       c6Y0d: // global
           if (R1 & 7 == 1) goto c6Y0g; else goto c6Y0h;
       c6Y0g: // global
           R1 = Data.Foldable.$fFoldable:.:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Y0h: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Y0d_info" {
     block_c6Y0d_info:
         const _c6Y0d;
         const 0;
         const 4294967326;
         const S6PH7_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.090868394 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cfoldl'_closure" {
     Data.Foldable.$fFoldable:.:_$cfoldl'_closure:
         const Data.Foldable.$fFoldable:.:_$cfoldl'_info;
 },
 f2_s6Pw2_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6Y1b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Y1c; else goto c6Y1d;
       c6Y1c: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Y1d: // global
           I64[Sp - 16] = block_c6Y19_info;
           _s6Pw4::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6Pw4::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . f2_s6Pw2_info" {
     f2_s6Pw2_info:
         const f2_s6Pw2_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c6Y19() //  [R1]
         { []
         }
     {offset
       c6Y19: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Y19_info" {
     block_c6Y19_info:
         const _c6Y19;
         const 1;
         const 30;
 },
 sat_s6Pw9_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Y1k: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Y1l; else goto c6Y1m;
       c6Y1l: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Y1m: // global
           _s6Pw7::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 14];
           P64[Sp - 16] = R3;
           P64[Sp - 8] = _s6Pw7::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pw9_info" {
     sat_s6Pw9_info:
         const sat_s6Pw9_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:.:_$cfoldl'_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c6Y1n: // global
           _s6Pw1::P64 = R6;
           _s6Pw0::P64 = R5;
           _s6PvZ::P64 = R4;
           _s6PvY::P64 = R3;
           _s6PvX::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6Y1o; else goto c6Y1p;
       c6Y1p: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6Y1r; else goto c6Y1q;
       c6Y1r: // global
           HpAlloc = 40;
           goto c6Y1o;
       c6Y1o: // global
           R6 = _s6Pw1::P64;
           R5 = _s6Pw0::P64;
           R4 = _s6PvZ::P64;
           R3 = _s6PvY::P64;
           R2 = _s6PvX::P64;
           R1 = Data.Foldable.$fFoldable:.:_$cfoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Y1q: // global
           I64[Hp - 32] = f2_s6Pw2_info;
           P64[Hp - 24] = _s6PvZ::P64;
           I64[Hp - 16] = sat_s6Pw9_info;
           P64[Hp - 8] = _s6PvY::P64;
           P64[Hp] = Hp - 29;
           R2 = _s6PvX::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 14;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = _s6Pw1::P64;
           P64[Sp - 8] = _s6Pw0::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cfoldl'_info" {
     Data.Foldable.$fFoldable:.:_$cfoldl'_info:
         const Data.Foldable.$fFoldable:.:_$cfoldl'_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.10049368 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$clength_closure" {
     Data.Foldable.$fFoldable:.:_$clength_closure:
         const Data.Foldable.$fFoldable:.:_$clength_info;
 },
 Data.Foldable.$fFoldable:.:_$clength_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Y1P: // global
           R6 = R4;
           R5 = Data.Foldable.$fFoldable:*:4_closure+1;
           R4 = Data.Foldable.$fFoldable:*:5_closure+2;
           R3 = R3;
           R2 = R2;
           call Data.Foldable.$fFoldable:.:_$cfoldl'_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$clength_info" {
     Data.Foldable.$fFoldable:.:_$clength_info:
         const Data.Foldable.$fFoldable:.:_$clength_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.105536771 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cfoldl_closure" {
     Data.Foldable.$fFoldable:.:_$cfoldl_closure:
         const Data.Foldable.$fFoldable:.:_$cfoldl_info;
         const 0;
 },
 sat_s6Pwk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Y29: // global
           _s6Pwj::P64 = R3;
           R3 = R2;
           R2 = _s6Pwj::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pwk_info" {
     sat_s6Pwk_info:
         const sat_s6Pwk_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Pwl_entry() //  [R1]
         { []
         }
     {offset
       c6Y2c: // global
           _s6Pwl::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6Y2d; else goto c6Y2e;
       c6Y2e: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Y2g; else goto c6Y2f;
       c6Y2g: // global
           HpAlloc = 16;
           goto c6Y2d;
       c6Y2d: // global
           R1 = _s6Pwl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Y2f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6Pwl::P64;
           _s6Pwe::P64 = P64[_s6Pwl::P64 + 16];
           _s6Pwf::P64 = P64[_s6Pwl::P64 + 24];
           I64[Hp - 8] = sat_s6Pwk_info;
           P64[Hp] = _s6Pwf::P64;
           R2 = _s6Pwe::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 24] = Hp - 6;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pwl_info" {
     sat_s6Pwl_info:
         const sat_s6Pwl_entry;
         const 2;
         const 4294967314;
         const S6PH7_srt+1560;
 },
 Data.Foldable.$fFoldable:.:_$cfoldl_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c6Y2h: // global
           _s6Pwh::P64 = R6;
           _s6Pwg::P64 = R5;
           _s6Pwf::P64 = R4;
           _s6Pwe::P64 = R3;
           _s6Pwd::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6Y2i; else goto c6Y2j;
       c6Y2j: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Y2l; else goto c6Y2k;
       c6Y2l: // global
           HpAlloc = 32;
           goto c6Y2i;
       c6Y2i: // global
           R6 = _s6Pwh::P64;
           R5 = _s6Pwg::P64;
           R4 = _s6Pwf::P64;
           R3 = _s6Pwe::P64;
           R2 = _s6Pwd::P64;
           R1 = Data.Foldable.$fFoldable:.:_$cfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Y2k: // global
           I64[Hp - 24] = sat_s6Pwl_info;
           P64[Hp - 8] = _s6Pwe::P64;
           P64[Hp] = _s6Pwf::P64;
           R2 = _s6Pwd::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = _s6Pwh::P64;
           P64[Sp - 8] = _s6Pwg::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cfoldl_info" {
     Data.Foldable.$fFoldable:.:_$cfoldl_info:
         const Data.Foldable.$fFoldable:.:_$cfoldl_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const S6PH7_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.115468921 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cfoldl1_closure" {
     Data.Foldable.$fFoldable:.:_$cfoldl1_closure:
         const Data.Foldable.$fFoldable:.:_$cfoldl1_info;
         const 0;
 },
 sat_s6Pwu_entry() //  [R1]
         { []
         }
     {offset
       c6Y2Y: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Y2Z; else goto c6Y30;
       c6Y2Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Y30: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6Y2R_info;
           _s6Pwo::P64 = P64[R1 + 16];
           _s6Pwq::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6Pwo::P64;
           P64[Sp - 24] = _s6Pwq::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6Y37; else goto c6Y2S;
       u6Y37: // global
           call _c6Y2R(R1) args: 0, res: 0, upd: 0;
       c6Y2S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pwu_info" {
     sat_s6Pwu_info:
         const sat_s6Pwu_entry;
         const 3;
         const 15;
 },
 _c6Y2R() //  [R1]
         { []
         }
     {offset
       c6Y2R: // global
           _s6Pwq::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6Y2V; else goto c6Y2W;
       c6Y2V: // global
           R1 = _s6Pwq::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c6Y2W: // global
           R3 = _s6Pwq::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Y2R_info" {
     block_c6Y2R_info:
         const _c6Y2R;
         const 2;
         const 30;
 },
 sat_s6Pwv_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Y39: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6Y3d; else goto c6Y3c;
       c6Y3d: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Y3c: // global
           _s6Pwo::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6Pwu_info;
           P64[Hp - 32] = _s6Pwo::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pwv_info" {
     sat_s6Pwv_info:
         const sat_s6Pwv_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Pww_entry() //  [R1]
         { []
         }
     {offset
       c6Y3e: // global
           _s6Pww::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6Y3f; else goto c6Y3g;
       c6Y3g: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Y3i; else goto c6Y3h;
       c6Y3i: // global
           HpAlloc = 16;
           goto c6Y3f;
       c6Y3f: // global
           R1 = _s6Pww::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Y3h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6Pww::P64;
           _s6Pwn::P64 = P64[_s6Pww::P64 + 16];
           _s6Pwo::P64 = P64[_s6Pww::P64 + 24];
           I64[Hp - 8] = sat_s6Pwv_info;
           P64[Hp] = _s6Pwo::P64;
           R2 = _s6Pwn::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 24] = Hp - 6;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Pww_info" {
     sat_s6Pww_info:
         const sat_s6Pww_entry;
         const 2;
         const 4294967314;
         const S6PH7_srt+1560;
 },
 Data.Foldable.$fFoldable:.:_$cfoldl1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6Y3p: // global
           _s6Pwp::P64 = R5;
           _s6Pwo::P64 = R4;
           _s6Pwn::P64 = R3;
           _s6Pwm::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c6Y3q; else goto c6Y3r;
       c6Y3r: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Y3t; else goto c6Y3s;
       c6Y3t: // global
           HpAlloc = 32;
           goto c6Y3q;
       c6Y3q: // global
           R5 = _s6Pwp::P64;
           R4 = _s6Pwo::P64;
           R3 = _s6Pwn::P64;
           R2 = _s6Pwm::P64;
           R1 = Data.Foldable.$fFoldable:.:_$cfoldl1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Y3s: // global
           I64[Hp - 24] = sat_s6Pww_info;
           P64[Hp - 8] = _s6Pwn::P64;
           P64[Hp] = _s6Pwo::P64;
           I64[Sp - 8] = block_c6Y3j_info;
           R2 = _s6Pwm::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           P64[Sp - 40] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _s6Pwp::P64;
           P64[Sp - 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cfoldl1_info" {
     Data.Foldable.$fFoldable:.:_$cfoldl1_info:
         const Data.Foldable.$fFoldable:.:_$cfoldl1_entry;
         const 0;
         const 360287974484606990;
         const 17179869208;
         const S6PH7_srt+1368;
 },
 _c6Y3j() //  [R1]
         { []
         }
     {offset
       c6Y3j: // global
           if (R1 & 7 == 1) goto c6Y3m; else goto c6Y3n;
       c6Y3m: // global
           R1 = Data.Foldable.$fFoldable:.:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Y3n: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Y3j_info" {
     block_c6Y3j_info:
         const _c6Y3j;
         const 0;
         const 4294967326;
         const S6PH7_srt+1368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.130781389 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cfoldr'_closure" {
     Data.Foldable.$fFoldable:.:_$cfoldr'_closure:
         const Data.Foldable.$fFoldable:.:_$cfoldr'_info;
         const 0;
 },
 sat_s6PwI_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6Y4k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Y4l; else goto c6Y4m;
       c6Y4l: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Y4m: // global
           I64[Sp - 16] = block_c6Y4i_info;
           _s6PwF::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6PwF::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PwI_info" {
     sat_s6PwI_info:
         const sat_s6PwI_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c6Y4i() //  [R1]
         { []
         }
     {offset
       c6Y4i: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Y4i_info" {
     block_c6Y4i_info:
         const _c6Y4i;
         const 1;
         const 30;
 },
 sat_s6PwJ_entry() //  [R1]
         { []
         }
     {offset
       c6Y4o: // global
           _s6PwJ::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6Y4p; else goto c6Y4q;
       c6Y4q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Y4s; else goto c6Y4r;
       c6Y4s: // global
           HpAlloc = 16;
           goto c6Y4p;
       c6Y4p: // global
           R1 = _s6PwJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Y4r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6PwJ::P64;
           _s6PwA::P64 = P64[_s6PwJ::P64 + 16];
           _s6PwB::P64 = P64[_s6PwJ::P64 + 24];
           I64[Hp - 8] = sat_s6PwI_info;
           P64[Hp] = _s6PwB::P64;
           R2 = _s6PwA::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 24] = Hp - 5;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6PwJ_info" {
     sat_s6PwJ_info:
         const sat_s6PwJ_entry;
         const 2;
         const 4294967314;
         const S6PH7_srt+1560;
 },
 Data.Foldable.$fFoldable:.:_$cfoldr'_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c6Y4t: // global
           _s6PwD::P64 = R6;
           _s6PwC::P64 = R5;
           _s6PwB::P64 = R4;
           _s6PwA::P64 = R3;
           _s6Pwz::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c6Y4u; else goto c6Y4v;
       c6Y4v: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Y4x; else goto c6Y4w;
       c6Y4x: // global
           HpAlloc = 32;
           goto c6Y4u;
       c6Y4u: // global
           R6 = _s6PwD::P64;
           R5 = _s6PwC::P64;
           R4 = _s6PwB::P64;
           R3 = _s6PwA::P64;
           R2 = _s6Pwz::P64;
           R1 = Data.Foldable.$fFoldable:.:_$cfoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Y4w: // global
           I64[Hp - 24] = sat_s6PwJ_info;
           P64[Hp - 8] = _s6PwA::P64;
           P64[Hp] = _s6PwB::P64;
           R2 = _s6Pwz::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _s6PwD::P64;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = _s6PwC::P64;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cfoldr'_info" {
     Data.Foldable.$fFoldable:.:_$cfoldr'_info:
         const Data.Foldable.$fFoldable:.:_$cfoldr'_entry;
         const 0;
         const 38654705678;
         const 21474836505;
         const S6PH7_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.141161502 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cproduct_closure" {
     Data.Foldable.$fFoldable:.:_$cproduct_closure:
         const Data.Foldable.$fFoldable:.:_$cproduct_info;
         const 0;
 },
 $dMonoid_s6PwN_entry() //  [R1]
         { []
         }
     {offset
       c6Y4Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Y4Z; else goto c6Y50;
       c6Y4Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Y50: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6PwN_info" {
     $dMonoid_s6PwN_info:
         const $dMonoid_s6PwN_entry;
         const 1;
         const 4294967312;
         const S6PH7_srt+1592;
 },
 lvl1_s6PwO_entry() //  [R1]
         { []
         }
     {offset
       c6Y55: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Y56; else goto c6Y57;
       c6Y56: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Y57: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Foldable.$fFoldable:*:1_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_s6PwO_info" {
     lvl1_s6PwO_info:
         const lvl1_s6PwO_entry;
         const 2;
         const 18;
 },
 sat_s6PwQ_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Y5d: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Y5e; else goto c6Y5f;
       c6Y5e: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Y5f: // global
           _s6PwP::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _s6PwP::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PwQ_info" {
     sat_s6PwQ_info:
         const sat_s6PwQ_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Data.Foldable.$fFoldable:.:_$cproduct_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Y5g: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c6Y5k; else goto c6Y5j;
       c6Y5k: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:.:_$cproduct_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Y5j: // global
           I64[Hp - 80] = $dMonoid_s6PwN_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl1_s6PwO_info;
           P64[Hp - 40] = R3;
           _c6Y4U::P64 = Hp - 80;
           P64[Hp - 32] = _c6Y4U::P64;
           I64[Hp - 24] = sat_s6PwQ_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _c6Y4U::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cproduct_info" {
     Data.Foldable.$fFoldable:.:_$cproduct_info:
         const Data.Foldable.$fFoldable:.:_$cproduct_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6PH7_srt+1592;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.151114836 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$ctoList_closure" {
     Data.Foldable.$fFoldable:.:_$ctoList_closure:
         const Data.Foldable.$fFoldable:.:_$ctoList_info;
 },
 sat_s6PwW_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Y5P: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Y5Q; else goto c6Y5R;
       c6Y5Q: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Y5R: // global
           _s6PwU::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = _s6PwU::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PwW_info" {
     sat_s6PwW_info:
         const sat_s6PwW_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:.:_$ctoList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Y5S: // global
           _s6PwT::P64 = R4;
           _s6PwS::P64 = R3;
           _s6PwR::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c6Y5T; else goto c6Y5U;
       c6Y5U: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Y5W; else goto c6Y5V;
       c6Y5W: // global
           HpAlloc = 16;
           goto c6Y5T;
       c6Y5T: // global
           R4 = _s6PwT::P64;
           R3 = _s6PwS::P64;
           R2 = _s6PwR::P64;
           R1 = Data.Foldable.$fFoldable:.:_$ctoList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Y5V: // global
           I64[Hp - 8] = sat_s6PwW_info;
           P64[Hp] = _s6PwS::P64;
           R2 = _s6PwR::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           P64[Sp - 8] = _s6PwT::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$ctoList_info" {
     Data.Foldable.$fFoldable:.:_$ctoList_info:
         const Data.Foldable.$fFoldable:.:_$ctoList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.163641001 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_closure" {
     Data.Foldable.$fFoldable:.:_closure:
         const Data.Foldable.$fFoldable:.:_info;
         const 0;
 },
 sat_s6Pxe_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Y6g: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:.:_$cproduct_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pxe_info" {
     sat_s6Pxe_info:
         const sat_s6Pxe_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+1600;
 },
 sat_s6Pxd_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Y6o: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:.:_$csum_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pxd_info" {
     sat_s6Pxd_info:
         const sat_s6Pxd_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+1488;
 },
 sat_s6Pxc_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Y6w: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:.:_$cminimum_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pxc_info" {
     sat_s6Pxc_info:
         const sat_s6Pxc_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+1512;
 },
 sat_s6Pxb_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Y6E: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:.:_$cmaximum_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pxb_info" {
     sat_s6Pxb_info:
         const sat_s6Pxb_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+1528;
 },
 sat_s6Pxa_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Y6M: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:.:_$celem_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pxa_info" {
     sat_s6Pxa_info:
         const sat_s6Pxa_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6PH7_srt+1544;
 },
 sat_s6Px9_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Y6U: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:.:_$clength_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Px9_info" {
     sat_s6Px9_info:
         const sat_s6Px9_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6Px8_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Y72: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:.:1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Px8_info" {
     sat_s6Px8_info:
         const sat_s6Px8_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6PH7_srt+1472;
 },
 sat_s6Px7_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Y7a: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:.:_$ctoList_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Px7_info" {
     sat_s6Px7_info:
         const sat_s6Px7_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6Px6_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Y7i: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:.:_$cfoldl1_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Px6_info" {
     sat_s6Px6_info:
         const sat_s6Px6_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6PH7_srt+1576;
 },
 sat_s6Px5_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Y7q: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:.:_$cfoldr1_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Px5_info" {
     sat_s6Px5_info:
         const sat_s6Px5_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6PH7_srt+1552;
 },
 sat_s6Px4_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6Y7y: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:.:_$cfoldl'_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Px4_info" {
     sat_s6Px4_info:
         const sat_s6Px4_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6Px3_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6Y7G: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:.:_$cfoldl_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Px3_info" {
     sat_s6Px3_info:
         const sat_s6Px3_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const S6PH7_srt+1568;
 },
 sat_s6Px2_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6Y7O: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:.:_$cfoldr'_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Px2_info" {
     sat_s6Px2_info:
         const sat_s6Px2_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const S6PH7_srt+1584;
 },
 sat_s6Px1_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6Y7W: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:.:_$cfoldr_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Px1_info" {
     sat_s6Px1_info:
         const sat_s6Px1_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6Px0_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6Y84: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:.:_$cfoldMap_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Px0_info" {
     sat_s6Px0_info:
         const sat_s6Px0_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6PwZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Y8c: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:.:_$cfold_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PwZ_info" {
     sat_s6PwZ_info:
         const sat_s6PwZ_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:.:_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Y8g: // global
           Hp = Hp + 520;
           if (Hp > HpLim) (likely: False) goto c6Y8k; else goto c6Y8j;
       c6Y8k: // global
           HpAlloc = 520;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:.:_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Y8j: // global
           I64[Hp - 512] = sat_s6Pxe_info;
           P64[Hp - 504] = R2;
           P64[Hp - 496] = R3;
           I64[Hp - 488] = sat_s6Pxd_info;
           P64[Hp - 480] = R2;
           P64[Hp - 472] = R3;
           I64[Hp - 464] = sat_s6Pxc_info;
           P64[Hp - 456] = R2;
           P64[Hp - 448] = R3;
           I64[Hp - 440] = sat_s6Pxb_info;
           P64[Hp - 432] = R2;
           P64[Hp - 424] = R3;
           I64[Hp - 416] = sat_s6Pxa_info;
           P64[Hp - 408] = R2;
           P64[Hp - 400] = R3;
           I64[Hp - 392] = sat_s6Px9_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           I64[Hp - 368] = sat_s6Px8_info;
           P64[Hp - 360] = R2;
           P64[Hp - 352] = R3;
           I64[Hp - 344] = sat_s6Px7_info;
           P64[Hp - 336] = R2;
           P64[Hp - 328] = R3;
           I64[Hp - 320] = sat_s6Px6_info;
           P64[Hp - 312] = R2;
           P64[Hp - 304] = R3;
           I64[Hp - 296] = sat_s6Px5_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           I64[Hp - 272] = sat_s6Px4_info;
           P64[Hp - 264] = R2;
           P64[Hp - 256] = R3;
           I64[Hp - 248] = sat_s6Px3_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           I64[Hp - 224] = sat_s6Px2_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           I64[Hp - 200] = sat_s6Px1_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_s6Px0_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_s6PwZ_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = Hp - 150;
           P64[Hp - 112] = Hp - 173;
           P64[Hp - 104] = Hp - 197;
           P64[Hp - 96] = Hp - 221;
           P64[Hp - 88] = Hp - 245;
           P64[Hp - 80] = Hp - 269;
           P64[Hp - 72] = Hp - 294;
           P64[Hp - 64] = Hp - 318;
           P64[Hp - 56] = Hp - 343;
           P64[Hp - 48] = Hp - 367;
           P64[Hp - 40] = Hp - 391;
           P64[Hp - 32] = Hp - 414;
           P64[Hp - 24] = Hp - 439;
           P64[Hp - 16] = Hp - 463;
           P64[Hp - 8] = Hp - 487;
           P64[Hp] = Hp - 511;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_info" {
     Data.Foldable.$fFoldable:.:_info:
         const Data.Foldable.$fFoldable:.:_entry;
         const 0;
         const 974875971813390;
         const 8589934607;
         const S6PH7_srt+1472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.193910108 UTC

[section ""data" . Data.Foldable.maximumBy_closure" {
     Data.Foldable.maximumBy_closure:
         const Data.Foldable.maximumBy_info;
 },
 sat_s6Pxk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Y9H: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Y9I; else goto c6Y9J;
       c6Y9I: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Y9J: // global
           I64[Sp - 24] = block_c6Y9B_info;
           _s6Pxi::P64 = R3;
           R3 = R3;
           _s6Pxh::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 6];
           P64[Sp - 16] = _s6Pxh::P64;
           P64[Sp - 8] = _s6Pxi::P64;
           Sp = Sp - 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pxk_info" {
     sat_s6Pxk_info:
         const sat_s6Pxk_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c6Y9B() //  [R1]
         { []
         }
     {offset
       c6Y9B: // global
           if (R1 & 7 == 3) goto c6Y9F; else goto c6Y9E;
       c6Y9F: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Y9E: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Y9B_info" {
     block_c6Y9B_info:
         const _c6Y9B;
         const 2;
         const 30;
 },
 Data.Foldable.maximumBy_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Y9Q: // global
           _s6Pxg::P64 = R3;
           _s6Pxf::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c6Y9R; else goto c6Y9S;
       c6Y9S: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Y9U; else goto c6Y9T;
       c6Y9U: // global
           HpAlloc = 16;
           goto c6Y9R;
       c6Y9R: // global
           R3 = _s6Pxg::P64;
           R2 = _s6Pxf::P64;
           R1 = Data.Foldable.maximumBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Y9T: // global
           I64[Hp - 8] = sat_s6Pxk_info;
           P64[Hp] = _s6Pxg::P64;
           R2 = _s6Pxf::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 6;
           Sp = Sp - 16;
           call Data.Foldable.foldl1_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.maximumBy_info" {
     Data.Foldable.maximumBy_info:
         const Data.Foldable.maximumBy_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.202377149 UTC

[section ""data" . Data.Foldable.minimumBy_closure" {
     Data.Foldable.minimumBy_closure:
         const Data.Foldable.minimumBy_info;
 },
 sat_s6Pxq_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Yap: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Yaq; else goto c6Yar;
       c6Yaq: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Yar: // global
           I64[Sp - 24] = block_c6Yaj_info;
           _s6Pxo::P64 = R3;
           R3 = R3;
           _s6Pxn::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 6];
           P64[Sp - 16] = _s6Pxn::P64;
           P64[Sp - 8] = _s6Pxo::P64;
           Sp = Sp - 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pxq_info" {
     sat_s6Pxq_info:
         const sat_s6Pxq_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c6Yaj() //  [R1]
         { []
         }
     {offset
       c6Yaj: // global
           if (R1 & 7 == 3) goto c6Yan; else goto c6Yam;
       c6Yan: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Yam: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Yaj_info" {
     block_c6Yaj_info:
         const _c6Yaj;
         const 2;
         const 30;
 },
 Data.Foldable.minimumBy_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Yay: // global
           _s6Pxm::P64 = R3;
           _s6Pxl::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c6Yaz; else goto c6YaA;
       c6YaA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6YaC; else goto c6YaB;
       c6YaC: // global
           HpAlloc = 16;
           goto c6Yaz;
       c6Yaz: // global
           R3 = _s6Pxm::P64;
           R2 = _s6Pxl::P64;
           R1 = Data.Foldable.minimumBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6YaB: // global
           I64[Hp - 8] = sat_s6Pxq_info;
           P64[Hp] = _s6Pxm::P64;
           R2 = _s6Pxl::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 6;
           Sp = Sp - 16;
           call Data.Foldable.foldl1_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.minimumBy_info" {
     Data.Foldable.minimumBy_info:
         const Data.Foldable.minimumBy_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.21176792 UTC

[section ""data" . Data.Foldable.notElem_closure" {
     Data.Foldable.notElem_closure:
         const Data.Foldable.notElem_info;
 },
 g_s6Pxu_entry() //  [R1]
         { []
         }
     {offset
       c6Yb0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Yb1; else goto c6Yb2;
       c6Yb1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Yb2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Foldable.elem_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s6Pxu_info" {
     g_s6Pxu_info:
         const g_s6Pxu_entry;
         const 3;
         const 15;
 },
 sat_s6Pxx_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Ybe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Ybf; else goto c6Ybg;
       c6Ybf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Ybg: // global
           I64[Sp - 8] = block_c6Yb8_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Pxx_info" {
     sat_s6Pxx_info:
         const sat_s6Pxx_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c6Yb8() //  [R1]
         { []
         }
     {offset
       c6Yb8: // global
           if (R1 & 7 == 1) goto c6Ybb; else goto c6Ybc;
       c6Ybb: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Ybc: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Yb8_info" {
     block_c6Yb8_info:
         const _c6Yb8;
         const 0;
         const 30;
 },
 Data.Foldable.notElem_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Ybn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6Ybr; else goto c6Ybq;
       c6Ybr: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.notElem_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Ybq: // global
           I64[Hp - 48] = g_s6Pxu_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s6Pxx_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.notElem_info" {
     Data.Foldable.notElem_info:
         const Data.Foldable.notElem_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.222711441 UTC

[section ""data" . Data.Foldable.find_closure" {
     Data.Foldable.find_closure:
         const Data.Foldable.find_info;
         const 0;
 },
 sat_s6PxD_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Yc8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Yc9; else goto c6Yca;
       c6Yc9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Yca: // global
           I64[Sp - 16] = block_c6Yc2_info;
           _s6PxB::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s6PxB::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PxD_info" {
     sat_s6PxD_info:
         const sat_s6PxD_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c6Yc2() //  [R1]
         { []
         }
     {offset
       c6Yc2: // global
           if (R1 & 7 == 1) goto c6Yc5; else goto c6Yc6;
       c6Yc5: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Yc6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Ycj; else goto c6Yci;
       c6Ycj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Yci: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Yc2_info" {
     block_c6Yc2_info:
         const _c6Yc2;
         const 1;
         const 30;
 },
 g_s6PxA_entry() //  [R1]
         { []
         }
     {offset
       c6Yck: // global
           _s6PxA::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6Ycl; else goto c6Ycm;
       c6Ycm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Yco; else goto c6Ycn;
       c6Yco: // global
           HpAlloc = 16;
           goto c6Ycl;
       c6Ycl: // global
           R1 = _s6PxA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Ycn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6PxA::P64;
           _s6Pxy::P64 = P64[_s6PxA::P64 + 16];
           _s6Pxz::P64 = P64[_s6PxA::P64 + 24];
           I64[Hp - 8] = sat_s6PxD_info;
           P64[Hp] = _s6Pxz::P64;
           R2 = _s6Pxy::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Monoid.$fMonoidFirst_closure;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s6PxA_info" {
     g_s6PxA_info:
         const g_s6PxA_entry;
         const 2;
         const 4294967314;
         const S6PH7_srt+1616;
 },
 sat_s6PxF_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Ycu: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6PxF_info" {
     sat_s6PxF_info:
         const sat_s6PxF_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Foldable.find_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Ycx: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6YcB; else goto c6YcA;
       c6YcB: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.find_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6YcA: // global
           I64[Hp - 40] = g_s6PxA_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6PxF_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.find_info" {
     Data.Foldable.find_info:
         const Data.Foldable.find_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6PH7_srt+1616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.233042996 UTC

[section ""cstring" . Data.Foldable.$trModule4_bytes" {
     Data.Foldable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.235666118 UTC

[section ""data" . Data.Foldable.$trModule3_closure" {
     Data.Foldable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Foldable.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.237343018 UTC

[section ""cstring" . Data.Foldable.$trModule2_bytes" {
     Data.Foldable.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,111,108,100,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.238964203 UTC

[section ""data" . Data.Foldable.$trModule1_closure" {
     Data.Foldable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Foldable.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.24067292 UTC

[section ""data" . Data.Foldable.$trModule_closure" {
     Data.Foldable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Foldable.$trModule3_closure+1;
         const Data.Foldable.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.242414185 UTC

[section ""data" . $krep_r6OSX_closure" {
     $krep_r6OSX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.244158375 UTC

[section ""data" . Data.Foldable.$tcFoldable1_closure" {
     Data.Foldable.$tcFoldable1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*Arr*_closure;
         const $krep_r6OSX_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.245954634 UTC

[section ""cstring" . Data.Foldable.$tcFoldable3_bytes" {
     Data.Foldable.$tcFoldable3_bytes:
         I8[] [70,111,108,100,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.247656201 UTC

[section ""data" . Data.Foldable.$tcFoldable2_closure" {
     Data.Foldable.$tcFoldable2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Foldable.$tcFoldable3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.250100516 UTC

[section ""data" . Data.Foldable.$tcFoldable_closure" {
     Data.Foldable.$tcFoldable_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Foldable.$trModule_closure+1;
         const Data.Foldable.$tcFoldable2_closure+1;
         const Data.Foldable.$tcFoldable1_closure+4;
         const 1610127274683713266;
         const 5928938033451775936;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.254496462 UTC

[section ""data" . Data.Foldable.C:Foldable_closure" {
     Data.Foldable.C:Foldable_closure:
         const Data.Foldable.C:Foldable_info;
 },
 Data.Foldable.C:Foldable_slow() //  [R1]
         { []
         }
     {offset
       c6Ydd: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Foldable.C:Foldable_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 96, res: 0, upd: 8;
     }
 },
 Data.Foldable.C:Foldable_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c6Ydi: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c6Ydm; else goto c6Ydl;
       c6Ydm: // global
           HpAlloc = 136;
           R1 = Data.Foldable.C:Foldable_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       c6Ydl: // global
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           P64[Hp - 80] = P64[Sp];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 64];
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 80];
           R1 = Hp - 127;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.C:Foldable_info" {
     Data.Foldable.C:Foldable_info:
         const Data.Foldable.C:Foldable_entry;
         const 0;
         const 14;
         const 68719476736;
         const 0;
         const 16;
         const Data.Foldable.C:Foldable_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.262212954 UTC

[section ""cstring" . i6Unl_str" {
     i6Unl_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,111,108,100,97,98,108,101,46,67,58,70,111,108,100,97,98,108,101]
 },
 Data.Foldable.C:Foldable_con_entry() //  [R1]
         { []
         }
     {offset
       c6YdF: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.C:Foldable_con_info" {
     Data.Foldable.C:Foldable_con_info:
         const Data.Foldable.C:Foldable_con_entry;
         const 16;
         const 1;
         const i6Unl_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:07.266551432 UTC

[section ""relreadonly" . S6PH7_srt" {
     S6PH7_srt:
         const sat_s6OZs_closure;
         const Data.Foldable.$fFoldableProxy_$cproduct_closure;
         const Data.Foldable.$fFoldableProxy1_closure;
         const Data.Foldable.$fFoldableProxy_$csum_closure;
         const Data.Foldable.$fFoldableProxy2_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Foldable.$fFoldableProxy3_closure;
         const Data.Foldable.$fFoldableProxy5_closure;
         const Data.Foldable.$fFoldableU1_$cproduct_closure;
         const Data.Foldable.$fFoldableU1_$csum_closure;
         const Data.Foldable.$fFoldableU2_closure;
         const Data.Foldable.$fFoldableU4_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const $dmproduct1_r6OSR_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const $dmsum1_r6OSS_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
         const poly_d_r6OST_closure;
         const Data.Foldable.$dmminimum_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const poly_d1_r6OSU_closure;
         const Data.Foldable.$dmmaximum_closure;
         const Data.Foldable.$dmfoldl1_closure;
         const Data.Foldable.$fFoldable:*:6_closure;
         const Data.Foldable.$dmfoldr1_closure;
         const Data.Foldable.$fFoldable:*:8_closure;
         const Data.Semigroup.Internal.$fMonoidEndo_closure;
         const Data.Foldable.$dmfoldl_closure;
         const Data.Foldable.$fFoldable:*:7_closure;
         const Data.Foldable.$fFoldableK4_closure;
         const Data.Foldable.$fFoldableK2_closure;
         const Data.Foldable.$dmfoldr_closure;
         const Data.Semigroup.Internal.$fMonoidAll_closure;
         const Data.Foldable.and1_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Foldable.or1_closure;
         const Data.Foldable.any1_closure;
         const $dmelem1_r6OSW_closure;
         const Data.Semigroup.Internal.$fMonoidSum2_closure;
         const Data.Foldable.$fFoldableURec8_closure;
         const Data.Foldable.$fFoldable:*:2_closure;
         const Data.Foldable.$fFoldableURec9_closure;
         const Data.Foldable.$fFoldable:*:3_closure;
         const Data.Foldable.$fFoldableURec10_closure;
         const Data.Semigroup.Internal.$fMonoidProduct2_closure;
         const Data.Foldable.$fFoldableURec7_closure;
         const Data.Foldable.$fFoldableURec13_closure;
         const Data.Foldable.$fFoldableURec14_closure;
         const Data.Foldable.$fFoldableURec15_closure;
         const Data.Foldable.$fFoldableURec12_closure;
         const Data.Foldable.$fFoldableURec18_closure;
         const Data.Foldable.$fFoldableURec19_closure;
         const Data.Foldable.$fFoldableURec20_closure;
         const Data.Foldable.$fFoldableURec17_closure;
         const Data.Foldable.$fFoldableURec23_closure;
         const Data.Foldable.$fFoldableURec24_closure;
         const Data.Foldable.$fFoldableURec25_closure;
         const Data.Foldable.$fFoldable:*:6_closure;
         const Data.Foldable.$fFoldableURec22_closure;
         const Data.Foldable.$fFoldableURec28_closure;
         const Data.Foldable.$fFoldableURec29_closure;
         const Data.Foldable.$fFoldableURec30_closure;
         const Data.Foldable.$fFoldable:*:8_closure;
         const Data.Foldable.$fFoldableURec27_closure;
         const Data.Foldable.$fFoldableURec33_closure;
         const Data.Foldable.$fFoldableURec34_closure;
         const Data.Foldable.$fFoldableURec35_closure;
         const Data.Foldable.$fFoldableURec32_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Foldable.$fFoldable:*:_$celem_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const Data.Foldable.$fFoldable:*:_$csum_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
         const Data.Foldable.$fFoldable:*:2_closure;
         const Data.Foldable.$fFoldable:*:_$cminimum_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const Data.Foldable.$fFoldable:*:3_closure;
         const Data.Foldable.$fFoldable:*:_$cmaximum_closure;
         const Data.Foldable.$w$cfoldr1_closure;
         const Data.Foldable.$fFoldable:*:_$cfoldr1_closure;
         const Data.Foldable.$fFoldable:*:7_closure;
         const Data.Foldable.$w$cfoldl_closure;
         const Data.Foldable.$fFoldable:*:_$cfoldl_closure;
         const Data.Foldable.$w$cfoldl1_closure;
         const Data.Foldable.$fFoldable:*:_$cfoldl1_closure;
         const Data.Foldable.$w$cfoldr'_closure;
         const Data.Foldable.$fFoldable:*:_$cfoldr'_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const Data.Foldable.$fFoldable:*:_$cproduct_closure;
         const Data.Foldable.$fFoldable:*:_closure;
         const Data.Foldable.$fFoldable:+:_$celem_closure;
         const Data.Foldable.$fFoldable:+:2_closure;
         const Data.Foldable.$fFoldable:+:_$cminimum_closure;
         const Data.Foldable.$fFoldable:+:_$cmaximum_closure;
         const Data.Foldable.$fFoldable:+:_$cfoldr1_closure;
         const Data.Foldable.$fFoldable:*:8_closure;
         const Data.Foldable.$fFoldable:+:_$cfoldl_closure;
         const Data.Foldable.$fFoldable:+:_$cfoldl1_closure;
         const Data.Foldable.$fFoldable:*:6_closure;
         const Data.Foldable.$fFoldable:+:_$cfoldr'_closure;
         const Data.Foldable.$fFoldable:+:1_closure;
         const Data.Foldable.$fFoldable:+:_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Foldable.$fFoldableM1_$celem_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const Data.Foldable.$fFoldableM1_$csum_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
         const Data.Foldable.$fFoldable:*:2_closure;
         const Data.Foldable.$fFoldableM1_$cminimum_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const Data.Foldable.$fFoldable:*:3_closure;
         const Data.Foldable.$fFoldableM1_$cmaximum_closure;
         const Data.Foldable.$fFoldableM1_$cfoldr1_closure;
         const Data.Foldable.$fFoldableM1_$cfoldl_closure;
         const Data.Foldable.$fFoldable:*:7_closure;
         const Data.Semigroup.Internal.$fMonoidEndo_closure;
         const Data.Foldable.$fFoldableM1_$cfoldl1_closure;
         const Data.Foldable.$fFoldableM3_closure;
         const Data.Foldable.$fFoldableM1_$cfoldr'_closure;
         const Data.Foldable.$fFoldableM4_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const Data.Foldable.$fFoldableM1_$cproduct_closure;
         const Data.Foldable.$fFoldableM1_closure;
         const Data.Semigroup.Internal.$fMonoidSum2_closure;
         const Data.Foldable.$fFoldableK2_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Foldable.$fFoldableK6_closure;
         const Data.Foldable.$fFoldableK8_closure;
         const Data.Semigroup.Internal.$fMonoidProduct2_closure;
         const Data.Foldable.$fFoldableRec1_$celem_closure;
         const Data.Foldable.$fFoldableRec1_$csum_closure;
         const Data.Foldable.$fFoldableRec1_$cminimum_closure;
         const Data.Foldable.$fFoldableRec1_$cmaximum_closure;
         const Data.Foldable.$fFoldable:.:3_closure;
         const Data.Foldable.$fFoldableRec1_$cfoldr1_closure;
         const Data.Foldable.$fFoldableRec1_$cfoldl_closure;
         const Data.Foldable.$fFoldable:.:2_closure;
         const Data.Foldable.$fFoldableRec1_$cfoldl1_closure;
         const Data.Foldable.$fFoldableRec1_$cfoldr'_closure;
         const Data.Foldable.$fFoldableRec1_$cproduct_closure;
         const Data.Foldable.$fFoldableRec1_closure;
         const Data.Semigroup.Internal.$fMonoidProduct1_closure;
         const Data.Foldable.$fFoldableArray1_closure;
         const Data.Foldable.$w$cmaximum_closure;
         const Data.Foldable.$fFoldable:*:3_closure;
         const Data.Foldable.$fFoldableArray_$cmaximum_closure;
         const Data.Foldable.$w$cminimum_closure;
         const Data.Foldable.$fFoldable:*:2_closure;
         const Data.Foldable.$fFoldableArray_$cminimum_closure;
         const Data.Semigroup.Internal.$fMonoidSum1_closure;
         const Data.Foldable.$fFoldableArray2_closure;
         const Data.Foldable.$fFoldableEither2_closure;
         const Data.Foldable.$fFoldableEither3_closure;
         const Data.Foldable.$fFoldableEither4_closure;
         const Data.Foldable.$fFoldableEither_$cfoldr1_closure;
         const Data.Foldable.$fFoldableEither_$cfoldl1_closure;
         const Data.Foldable.$fFoldableEither1_closure;
         const Data.Foldable.$fFoldableNonEmpty_$csum_closure;
         const Data.Foldable.$fFoldableNonEmpty_$cproduct_closure;
         const Data.Foldable.$fFoldableMaybe2_closure;
         const Data.Semigroup.Internal.$fMonoidSum2_closure;
         const Data.Foldable.$fFoldableMaybe3_closure;
         const Data.Foldable.$fFoldableMaybe4_closure;
         const Data.Foldable.$fFoldableMaybe_$cfoldl1_closure;
         const Data.Foldable.$fFoldableMaybe_$cfoldr1_closure;
         const Data.Foldable.$fFoldableMaybe1_closure;
         const Data.Semigroup.Internal.$fMonoidProduct2_closure;
         const Data.Foldable.$fFoldableLast2_closure;
         const Data.Foldable.$fFoldableLast3_closure;
         const Data.Foldable.$fFoldableLast4_closure;
         const Data.Foldable.$fFoldableLast_$cfoldl1_closure;
         const Data.Foldable.$fFoldable:.:2_closure;
         const Data.Foldable.$fFoldableLast_$cfoldr1_closure;
         const Data.Foldable.$fFoldable:.:3_closure;
         const Data.Foldable.$fFoldableLast1_closure;
         const Data.Foldable.$fFoldableFirst2_closure;
         const Data.Foldable.$fFoldableFirst3_closure;
         const Data.Foldable.$fFoldableFirst4_closure;
         const Data.Foldable.$fFoldable:*:3_closure;
         const Data.Foldable.$fFoldableFirst_$cfoldl1_closure;
         const Data.Foldable.$fFoldableFirst_$cfoldr1_closure;
         const Data.Foldable.$fFoldableFirst1_closure;
         const Data.Foldable.all1_closure;
         const Data.Semigroup.Internal.$fMonoidAll_closure;
         const Data.Foldable.$fFoldable:.:1_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const Data.Foldable.$fFoldable:.:_$csum_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
         const Data.Foldable.$fFoldable:*:2_closure;
         const Data.Foldable.$fFoldable:.:_$cminimum_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const Data.Foldable.$fFoldable:.:_$cmaximum_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Foldable.$fFoldable:.:_$celem_closure;
         const Data.Foldable.$fFoldable:.:_$cfoldr1_closure;
         const Data.Foldable.$fFoldable:*:7_closure;
         const Data.Foldable.$fFoldable:.:_$cfoldl_closure;
         const Data.Foldable.$fFoldable:.:_$cfoldl1_closure;
         const Data.Foldable.$fFoldable:.:_$cfoldr'_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const Data.Foldable.$fFoldable:.:_$cproduct_closure;
         const Data.Foldable.$fFoldable:.:_closure;
         const Data.Monoid.$fMonoidFirst_closure;
         const Data.Foldable.find_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.308985402 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:02:16.31087706 UTC

[section ""data" . Data.Foldable.fold_closure" {
     Data.Foldable.fold_closure:
         const Data.Foldable.fold_info;
 },
 Data.Foldable.fold_entry() //  [R2]
         { []
         }
     {offset
       c6YSA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6YSB; else goto c6YSC;
       c6YSB: // global
           R2 = R2;
           R1 = Data.Foldable.fold_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6YSC: // global
           I64[Sp - 8] = block_c6YSx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6YSG; else goto c6YSy;
       u6YSG: // global
           call _c6YSx(R1) args: 0, res: 0, upd: 0;
       c6YSy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.fold_info" {
     Data.Foldable.fold_info:
         const Data.Foldable.fold_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6YSx() //  [R1]
         { []
         }
     {offset
       c6YSx: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YSx_info" {
     block_c6YSx_info:
         const _c6YSx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.316419593 UTC

[section ""data" . Data.Foldable.foldMap_closure" {
     Data.Foldable.foldMap_closure:
         const Data.Foldable.foldMap_info;
 },
 Data.Foldable.foldMap_entry() //  [R2]
         { []
         }
     {offset
       c6YSY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6YSZ; else goto c6YT0;
       c6YSZ: // global
           R2 = R2;
           R1 = Data.Foldable.foldMap_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6YT0: // global
           I64[Sp - 8] = block_c6YSV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6YT4; else goto c6YSW;
       u6YT4: // global
           call _c6YSV(R1) args: 0, res: 0, upd: 0;
       c6YSW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldMap_info" {
     Data.Foldable.foldMap_info:
         const Data.Foldable.foldMap_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6YSV() //  [R1]
         { []
         }
     {offset
       c6YSV: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YSV_info" {
     block_c6YSV_info:
         const _c6YSV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.32190115 UTC

[section ""data" . Data.Foldable.foldr_closure" {
     Data.Foldable.foldr_closure:
         const Data.Foldable.foldr_info;
 },
 Data.Foldable.foldr_entry() //  [R2]
         { []
         }
     {offset
       c6YTm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6YTn; else goto c6YTo;
       c6YTn: // global
           R2 = R2;
           R1 = Data.Foldable.foldr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6YTo: // global
           I64[Sp - 8] = block_c6YTj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6YTs; else goto c6YTk;
       u6YTs: // global
           call _c6YTj(R1) args: 0, res: 0, upd: 0;
       c6YTk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldr_info" {
     Data.Foldable.foldr_info:
         const Data.Foldable.foldr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6YTj() //  [R1]
         { []
         }
     {offset
       c6YTj: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YTj_info" {
     block_c6YTj_info:
         const _c6YTj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.339598586 UTC

[section ""data" . Data.Foldable.foldr'_closure" {
     Data.Foldable.foldr'_closure:
         const Data.Foldable.foldr'_info;
 },
 Data.Foldable.foldr'_entry() //  [R2]
         { []
         }
     {offset
       c6YTK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6YTL; else goto c6YTM;
       c6YTL: // global
           R2 = R2;
           R1 = Data.Foldable.foldr'_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6YTM: // global
           I64[Sp - 8] = block_c6YTH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6YTQ; else goto c6YTI;
       u6YTQ: // global
           call _c6YTH(R1) args: 0, res: 0, upd: 0;
       c6YTI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldr'_info" {
     Data.Foldable.foldr'_info:
         const Data.Foldable.foldr'_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6YTH() //  [R1]
         { []
         }
     {offset
       c6YTH: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YTH_info" {
     block_c6YTH_info:
         const _c6YTH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.344928017 UTC

[section ""data" . Data.Foldable.foldl_closure" {
     Data.Foldable.foldl_closure:
         const Data.Foldable.foldl_info;
 },
 Data.Foldable.foldl_entry() //  [R2]
         { []
         }
     {offset
       c6YU8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6YU9; else goto c6YUa;
       c6YU9: // global
           R2 = R2;
           R1 = Data.Foldable.foldl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6YUa: // global
           I64[Sp - 8] = block_c6YU5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6YUe; else goto c6YU6;
       u6YUe: // global
           call _c6YU5(R1) args: 0, res: 0, upd: 0;
       c6YU6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldl_info" {
     Data.Foldable.foldl_info:
         const Data.Foldable.foldl_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6YU5() //  [R1]
         { []
         }
     {offset
       c6YU5: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YU5_info" {
     block_c6YU5_info:
         const _c6YU5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.350110633 UTC

[section ""data" . Data.Foldable.foldl'_closure" {
     Data.Foldable.foldl'_closure:
         const Data.Foldable.foldl'_info;
 },
 Data.Foldable.foldl'_entry() //  [R2]
         { []
         }
     {offset
       c6YUw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6YUx; else goto c6YUy;
       c6YUx: // global
           R2 = R2;
           R1 = Data.Foldable.foldl'_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6YUy: // global
           I64[Sp - 8] = block_c6YUt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6YUC; else goto c6YUu;
       u6YUC: // global
           call _c6YUt(R1) args: 0, res: 0, upd: 0;
       c6YUu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldl'_info" {
     Data.Foldable.foldl'_info:
         const Data.Foldable.foldl'_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6YUt() //  [R1]
         { []
         }
     {offset
       c6YUt: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YUt_info" {
     block_c6YUt_info:
         const _c6YUt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.355494928 UTC

[section ""data" . Data.Foldable.foldr1_closure" {
     Data.Foldable.foldr1_closure:
         const Data.Foldable.foldr1_info;
 },
 Data.Foldable.foldr1_entry() //  [R2]
         { []
         }
     {offset
       c6YUU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6YUV; else goto c6YUW;
       c6YUV: // global
           R2 = R2;
           R1 = Data.Foldable.foldr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6YUW: // global
           I64[Sp - 8] = block_c6YUR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6YV0; else goto c6YUS;
       u6YV0: // global
           call _c6YUR(R1) args: 0, res: 0, upd: 0;
       c6YUS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldr1_info" {
     Data.Foldable.foldr1_info:
         const Data.Foldable.foldr1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6YUR() //  [R1]
         { []
         }
     {offset
       c6YUR: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YUR_info" {
     block_c6YUR_info:
         const _c6YUR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.360660636 UTC

[section ""data" . Data.Foldable.foldl1_closure" {
     Data.Foldable.foldl1_closure:
         const Data.Foldable.foldl1_info;
 },
 Data.Foldable.foldl1_entry() //  [R2]
         { []
         }
     {offset
       c6YVi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6YVj; else goto c6YVk;
       c6YVj: // global
           R2 = R2;
           R1 = Data.Foldable.foldl1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6YVk: // global
           I64[Sp - 8] = block_c6YVf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6YVo; else goto c6YVg;
       u6YVo: // global
           call _c6YVf(R1) args: 0, res: 0, upd: 0;
       c6YVg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldl1_info" {
     Data.Foldable.foldl1_info:
         const Data.Foldable.foldl1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6YVf() //  [R1]
         { []
         }
     {offset
       c6YVf: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YVf_info" {
     block_c6YVf_info:
         const _c6YVf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.366013531 UTC

[section ""data" . Data.Foldable.toList_closure" {
     Data.Foldable.toList_closure:
         const Data.Foldable.toList_info;
 },
 Data.Foldable.toList_entry() //  [R2]
         { []
         }
     {offset
       c6YVG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6YVH; else goto c6YVI;
       c6YVH: // global
           R2 = R2;
           R1 = Data.Foldable.toList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6YVI: // global
           I64[Sp - 8] = block_c6YVD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6YVM; else goto c6YVE;
       u6YVM: // global
           call _c6YVD(R1) args: 0, res: 0, upd: 0;
       c6YVE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.toList_info" {
     Data.Foldable.toList_info:
         const Data.Foldable.toList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6YVD() //  [R1]
         { []
         }
     {offset
       c6YVD: // global
           R1 = P64[R1 + 71];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YVD_info" {
     block_c6YVD_info:
         const _c6YVD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.37200803 UTC

[section ""data" . Data.Foldable.null_closure" {
     Data.Foldable.null_closure:
         const Data.Foldable.null_info;
 },
 Data.Foldable.null_entry() //  [R2]
         { []
         }
     {offset
       c6YW4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6YW5; else goto c6YW6;
       c6YW5: // global
           R2 = R2;
           R1 = Data.Foldable.null_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6YW6: // global
           I64[Sp - 8] = block_c6YW1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6YWa; else goto c6YW2;
       u6YWa: // global
           call _c6YW1(R1) args: 0, res: 0, upd: 0;
       c6YW2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.null_info" {
     Data.Foldable.null_info:
         const Data.Foldable.null_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6YW1() //  [R1]
         { []
         }
     {offset
       c6YW1: // global
           R1 = P64[R1 + 79];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YW1_info" {
     block_c6YW1_info:
         const _c6YW1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.377888001 UTC

[section ""data" . Data.Foldable.length_closure" {
     Data.Foldable.length_closure:
         const Data.Foldable.length_info;
 },
 Data.Foldable.length_entry() //  [R2]
         { []
         }
     {offset
       c6YWs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6YWt; else goto c6YWu;
       c6YWt: // global
           R2 = R2;
           R1 = Data.Foldable.length_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6YWu: // global
           I64[Sp - 8] = block_c6YWp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6YWy; else goto c6YWq;
       u6YWy: // global
           call _c6YWp(R1) args: 0, res: 0, upd: 0;
       c6YWq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.length_info" {
     Data.Foldable.length_info:
         const Data.Foldable.length_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6YWp() //  [R1]
         { []
         }
     {offset
       c6YWp: // global
           R1 = P64[R1 + 87];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YWp_info" {
     block_c6YWp_info:
         const _c6YWp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.383424545 UTC

[section ""data" . Data.Foldable.elem_closure" {
     Data.Foldable.elem_closure:
         const Data.Foldable.elem_info;
 },
 Data.Foldable.elem_entry() //  [R2]
         { []
         }
     {offset
       c6YWQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6YWR; else goto c6YWS;
       c6YWR: // global
           R2 = R2;
           R1 = Data.Foldable.elem_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6YWS: // global
           I64[Sp - 8] = block_c6YWN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6YWW; else goto c6YWO;
       u6YWW: // global
           call _c6YWN(R1) args: 0, res: 0, upd: 0;
       c6YWO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.elem_info" {
     Data.Foldable.elem_info:
         const Data.Foldable.elem_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6YWN() //  [R1]
         { []
         }
     {offset
       c6YWN: // global
           R1 = P64[R1 + 95];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YWN_info" {
     block_c6YWN_info:
         const _c6YWN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.388759204 UTC

[section ""data" . Data.Foldable.maximum_closure" {
     Data.Foldable.maximum_closure:
         const Data.Foldable.maximum_info;
 },
 Data.Foldable.maximum_entry() //  [R2]
         { []
         }
     {offset
       c6YXe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6YXf; else goto c6YXg;
       c6YXf: // global
           R2 = R2;
           R1 = Data.Foldable.maximum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6YXg: // global
           I64[Sp - 8] = block_c6YXb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6YXk; else goto c6YXc;
       u6YXk: // global
           call _c6YXb(R1) args: 0, res: 0, upd: 0;
       c6YXc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.maximum_info" {
     Data.Foldable.maximum_info:
         const Data.Foldable.maximum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6YXb() //  [R1]
         { []
         }
     {offset
       c6YXb: // global
           R1 = P64[R1 + 103];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YXb_info" {
     block_c6YXb_info:
         const _c6YXb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.394432805 UTC

[section ""data" . Data.Foldable.minimum_closure" {
     Data.Foldable.minimum_closure:
         const Data.Foldable.minimum_info;
 },
 Data.Foldable.minimum_entry() //  [R2]
         { []
         }
     {offset
       c6YXC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6YXD; else goto c6YXE;
       c6YXD: // global
           R2 = R2;
           R1 = Data.Foldable.minimum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6YXE: // global
           I64[Sp - 8] = block_c6YXz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6YXI; else goto c6YXA;
       u6YXI: // global
           call _c6YXz(R1) args: 0, res: 0, upd: 0;
       c6YXA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.minimum_info" {
     Data.Foldable.minimum_info:
         const Data.Foldable.minimum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6YXz() //  [R1]
         { []
         }
     {offset
       c6YXz: // global
           R1 = P64[R1 + 111];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YXz_info" {
     block_c6YXz_info:
         const _c6YXz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.399790768 UTC

[section ""data" . Data.Foldable.sum_closure" {
     Data.Foldable.sum_closure:
         const Data.Foldable.sum_info;
 },
 Data.Foldable.sum_entry() //  [R2]
         { []
         }
     {offset
       c6YY0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6YY1; else goto c6YY2;
       c6YY1: // global
           R2 = R2;
           R1 = Data.Foldable.sum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6YY2: // global
           I64[Sp - 8] = block_c6YXX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6YY6; else goto c6YXY;
       u6YY6: // global
           call _c6YXX(R1) args: 0, res: 0, upd: 0;
       c6YXY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.sum_info" {
     Data.Foldable.sum_info:
         const Data.Foldable.sum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6YXX() //  [R1]
         { []
         }
     {offset
       c6YXX: // global
           R1 = P64[R1 + 119];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YXX_info" {
     block_c6YXX_info:
         const _c6YXX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.405956626 UTC

[section ""data" . Data.Foldable.product_closure" {
     Data.Foldable.product_closure:
         const Data.Foldable.product_info;
 },
 Data.Foldable.product_entry() //  [R2]
         { []
         }
     {offset
       c6YYo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6YYp; else goto c6YYq;
       c6YYp: // global
           R2 = R2;
           R1 = Data.Foldable.product_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6YYq: // global
           I64[Sp - 8] = block_c6YYl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6YYu; else goto c6YYm;
       u6YYu: // global
           call _c6YYl(R1) args: 0, res: 0, upd: 0;
       c6YYm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.product_info" {
     Data.Foldable.product_info:
         const Data.Foldable.product_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6YYl() //  [R1]
         { []
         }
     {offset
       c6YYl: // global
           R1 = P64[R1 + 127];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YYl_info" {
     block_c6YYl_info:
         const _c6YYl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.41148744 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cfoldl_closure" {
     Data.Foldable.$fFoldableMaybe_$cfoldl_closure:
         const Data.Foldable.$fFoldableMaybe_$cfoldl_info;
 },
 Data.Foldable.$fFoldableMaybe_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6YYQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6YYR; else goto c6YYS;
       c6YYR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$cfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6YYS: // global
           I64[Sp - 24] = block_c6YYJ_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6YYZ; else goto c6YYK;
       u6YYZ: // global
           call _c6YYJ(R1) args: 0, res: 0, upd: 0;
       c6YYK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cfoldl_info" {
     Data.Foldable.$fFoldableMaybe_$cfoldl_info:
         const Data.Foldable.$fFoldableMaybe_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6YYJ() //  [R1]
         { []
         }
     {offset
       c6YYJ: // global
           _s6Yir::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6YYN; else goto c6YYO;
       c6YYN: // global
           R1 = _s6Yir::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6YYO: // global
           R3 = P64[R1 + 6];
           R2 = _s6Yir::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YYJ_info" {
     block_c6YYJ_info:
         const _c6YYJ;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.417700054 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cfoldr_closure" {
     Data.Foldable.$fFoldableMaybe_$cfoldr_closure:
         const Data.Foldable.$fFoldableMaybe_$cfoldr_info;
 },
 Data.Foldable.$fFoldableMaybe_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6YZn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6YZo; else goto c6YZp;
       c6YZo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6YZp: // global
           I64[Sp - 24] = block_c6YZg_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6YZw; else goto c6YZh;
       u6YZw: // global
           call _c6YZg(R1) args: 0, res: 0, upd: 0;
       c6YZh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cfoldr_info" {
     Data.Foldable.$fFoldableMaybe_$cfoldr_info:
         const Data.Foldable.$fFoldableMaybe_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6YZg() //  [R1]
         { []
         }
     {offset
       c6YZg: // global
           _s6Yiw::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6YZk; else goto c6YZl;
       c6YZk: // global
           R1 = _s6Yiw::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6YZl: // global
           R3 = _s6Yiw::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YZg_info" {
     block_c6YZg_info:
         const _c6YZg;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.42360991 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cfoldMap_closure" {
     Data.Foldable.$fFoldableMaybe_$cfoldMap_closure:
         const Data.Foldable.$fFoldableMaybe_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableMaybe_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6YZU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6YZV; else goto c6YZW;
       c6YZV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6YZW: // global
           I64[Sp - 24] = block_c6YZN_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6Z03; else goto c6YZO;
       u6Z03: // global
           call _c6YZN(R1) args: 0, res: 0, upd: 0;
       c6YZO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cfoldMap_info" {
     Data.Foldable.$fFoldableMaybe_$cfoldMap_info:
         const Data.Foldable.$fFoldableMaybe_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6YZN() //  [R1]
         { []
         }
     {offset
       c6YZN: // global
           if (R1 & 7 == 1) goto c6YZR; else goto c6YZS;
       c6YZR: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c6YZS: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6YZN_info" {
     block_c6YZN_info:
         const _c6YZN;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.42973438 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$clength_closure" {
     Data.Foldable.$fFoldableNonEmpty_$clength_closure:
         const Data.Foldable.$fFoldableNonEmpty_$clength_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$clength_entry() //  [R2]
         { []
         }
     {offset
       c6Z0n: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Z0y; else goto c6Z0z;
       c6Z0y: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Z0z: // global
           I64[Sp - 8] = block_c6Z0k_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Z0E; else goto c6Z0l;
       u6Z0E: // global
           call _c6Z0k(R1) args: 0, res: 0, upd: 0;
       c6Z0l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$clength_info" {
     Data.Foldable.$fFoldableNonEmpty_$clength_info:
         const Data.Foldable.$fFoldableNonEmpty_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Z0k() //  [R1]
         { []
         }
     {offset
       c6Z0k: // global
           I64[Sp] = block_c6Z0q_info;
           R3 = 0;
           R2 = P64[R1 + 15];
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Z0k_info" {
     block_c6Z0k_info:
         const _c6Z0k;
         const 0;
         const 30;
 },
 _c6Z0q() //  [R1]
         { []
         }
     {offset
       c6Z0q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6Z0D; else goto c6Z0C;
       c6Z0D: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c6Z0C: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1 + 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Z0q_info" {
     block_c6Z0q_info:
         const _c6Z0q;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.436828364 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$ctoList_closure" {
     Data.Foldable.$fFoldableNonEmpty_$ctoList_closure:
         const Data.Foldable.$fFoldableNonEmpty_$ctoList_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6Z13: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6Z17; else goto c6Z16;
       c6Z17: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Z16: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$ctoList_info" {
     Data.Foldable.$fFoldableNonEmpty_$ctoList_info:
         const Data.Foldable.$fFoldableNonEmpty_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.44302116 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfoldl1_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldl1_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl1_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfoldl1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Z1D: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Z1E; else goto c6Z1F;
       c6Z1E: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfoldl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Z1F: // global
           I64[Sp - 16] = block_c6Z1m_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6Z1W; else goto c6Z1n;
       u6Z1W: // global
           call _c6Z1m(R1) args: 0, res: 0, upd: 0;
       c6Z1n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfoldl1_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldl1_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6Z1m() //  [R1]
         { []
         }
     {offset
       c6Z1m: // global
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call _c6Z1u() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6Z1m_info" {
     block_c6Z1m_info:
         const _c6Z1m;
         const 1;
         const 30;
 },
 _c6Z1u() //  []
         { []
         }
     {offset
       c6Z1u: // global
           I64[Sp - 8] = block_c6Z1w_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Z1U; else goto c6Z1x;
       u6Z1U: // global
           call _c6Z1w(R1) args: 0, res: 0, upd: 0;
       c6Z1x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6Z1w() //  [R1]
         { []
         }
     {offset
       c6Z1w: // global
           _s6Yj1::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c6Z1L; else goto c6Z1M;
       c6Z1L: // global
           R1 = _s6Yj1::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Z1M: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6Z1P; else goto c6Z1O;
       c6Z1P: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Z1O: // global
           _s6Yj3::P64 = P64[R1 + 6];
           _s6Yj4::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s6Yj1::P64;
           P64[Hp] = _s6Yj3::P64;
           P64[Sp + 16] = _s6Yj4::P64;
           P64[Sp + 8] = Hp - 32;
           Sp = Sp + 8;
           call _c6Z1u() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6Z1w_info" {
     block_c6Z1w_info:
         const _c6Z1w;
         const 131;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.45241323 UTC

[section ""data" . Data.Foldable.$w$cfoldl2_closure" {
     Data.Foldable.$w$cfoldl2_closure:
         const Data.Foldable.$w$cfoldl2_info;
 },
 Data.Foldable.$w$cfoldl2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6Z2C: // global
           _s6Yj9::P64 = R5;
           _s6Yj8::P64 = R4;
           _s6Yj7::P64 = R3;
           _s6Yj6::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c6Z2D; else goto c6Z2E;
       c6Z2E: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6Z2G; else goto c6Z2F;
       c6Z2G: // global
           HpAlloc = 40;
           goto c6Z2D;
       c6Z2D: // global
           R5 = _s6Yj9::P64;
           R4 = _s6Yj8::P64;
           R3 = _s6Yj7::P64;
           R2 = _s6Yj6::P64;
           R1 = Data.Foldable.$w$cfoldl2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Z2F: // global
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s6Yj6::P64;
           P64[Hp - 8] = _s6Yj7::P64;
           P64[Hp] = _s6Yj8::P64;
           P64[Sp - 24] = _s6Yj6::P64;
           P64[Sp - 16] = _s6Yj9::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 24;
           call _c6Z2t() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldl2_info" {
     Data.Foldable.$w$cfoldl2_info:
         const Data.Foldable.$w$cfoldl2_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c6Z2t() //  []
         { []
         }
     {offset
       c6Z2t: // global
           I64[Sp - 8] = block_c6Z2v_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Z2T; else goto c6Z2w;
       u6Z2T: // global
           call _c6Z2v(R1) args: 0, res: 0, upd: 0;
       c6Z2w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6Z2v() //  [R1]
         { []
         }
     {offset
       c6Z2v: // global
           _s6Yjc::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c6Z2L; else goto c6Z2M;
       c6Z2L: // global
           R1 = _s6Yjc::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Z2M: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6Z2P; else goto c6Z2O;
       c6Z2P: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Z2O: // global
           _s6Yje::P64 = P64[R1 + 6];
           _s6Yjf::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s6Yjc::P64;
           P64[Hp] = _s6Yje::P64;
           P64[Sp + 16] = _s6Yjf::P64;
           P64[Sp + 24] = Hp - 32;
           Sp = Sp + 8;
           call _c6Z2t() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6Z2v_info" {
     block_c6Z2v_info:
         const _c6Z2v;
         const 131;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.459546356 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfoldl_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldl_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Z3m: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Z3n; else goto c6Z3o;
       c6Z3n: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Z3o: // global
           I64[Sp - 24] = block_c6Z3j_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6Z3s; else goto c6Z3k;
       u6Z3s: // global
           call _c6Z3j(R1) args: 0, res: 0, upd: 0;
       c6Z3k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfoldl_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldl_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Z3j() //  [R1]
         { []
         }
     {offset
       c6Z3j: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Foldable.$w$cfoldl2_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Z3j_info" {
     block_c6Z3j_info:
         const _c6Z3j;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.467332025 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfoldr_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldr_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr_info;
 },
 go_s6Yjy_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Z42: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Z43; else goto c6Z44;
       c6Z43: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Z44: // global
           I64[Sp - 32] = block_c6Z3V_info;
           _s6Yjy::P64 = R1;
           _s6Yjo::P64 = P64[R1 + 7];
           _s6Yjp::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s6Yjo::P64;
           P64[Sp - 16] = _s6Yjp::P64;
           P64[Sp - 8] = _s6Yjy::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6Z4e; else goto c6Z3W;
       u6Z4e: // global
           call _c6Z3V(R1) args: 0, res: 0, upd: 0;
       c6Z3W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6Yjy_info" {
     go_s6Yjy_info:
         const go_s6Yjy_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c6Z3V() //  [R1]
         { []
         }
     {offset
       c6Z3V: // global
           if (R1 & 7 == 1) goto c6Z3Z; else goto c6Z40;
       c6Z3Z: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Z40: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6Z4d; else goto c6Z4c;
       c6Z4d: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Z4c: // global
           _s6YjB::P64 = P64[R1 + 6];
           _s6YjC::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s6YjC::P64;
           R3 = Hp - 24;
           R2 = _s6YjB::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Z3V_info" {
     block_c6Z3V_info:
         const _c6Z3V;
         const 3;
         const 30;
 },
 sat_s6YjE_entry() //  [R1]
         { []
         }
     {offset
       c6Z4f: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Z4g; else goto c6Z4h;
       c6Z4g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Z4h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6Z3L_info;
           _s6Yjo::P64 = P64[R1 + 16];
           _s6Yjp::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6Yjo::P64;
           P64[Sp - 24] = _s6Yjp::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6Z4l; else goto c6Z3M;
       u6Z4l: // global
           call _c6Z3L(R1) args: 0, res: 0, upd: 0;
       c6Z3M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YjE_info" {
     sat_s6YjE_info:
         const sat_s6YjE_entry;
         const 3;
         const 15;
 },
 _c6Z3L() //  [R1]
         { []
         }
     {offset
       c6Z3L: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Z4k; else goto c6Z4j;
       c6Z4k: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6Z4j: // global
           _s6Yjx::P64 = P64[R1 + 15];
           I64[Hp - 16] = go_s6Yjy_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = _s6Yjx::P64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go_s6Yjy_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6Z3L_info" {
     block_c6Z3L_info:
         const _c6Z3L;
         const 2;
         const 30;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Z4n: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6Z4r; else goto c6Z4q;
       c6Z4r: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Z4q: // global
           I64[Hp - 56] = sat_s6YjE_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = R4;
           R3 = Hp - 56;
           _s6Yjo::P64 = R2;
           R2 = Hp - 16;
           R1 = _s6Yjo::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfoldr_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldr_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.479023789 UTC

[section ""data" . Data.Foldable.$fFoldable:*:4_closure" {
     Data.Foldable.$fFoldable:*:4_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.480785767 UTC

[section ""data" . Data.Foldable.$fFoldableDual3_closure" {
     Data.Foldable.$fFoldableDual3_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.483421945 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$clength_closure" {
     Data.Foldable.$fFoldableEither_$clength_closure:
         const Data.Foldable.$fFoldableEither_$clength_info;
 },
 Data.Foldable.$fFoldableEither_$clength_entry() //  [R2]
         { []
         }
     {offset
       c6Z5b: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Z5c; else goto c6Z5d;
       c6Z5c: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Z5d: // global
           I64[Sp - 8] = block_c6Z54_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Z5k; else goto c6Z55;
       u6Z5k: // global
           call _c6Z54(R1) args: 0, res: 0, upd: 0;
       c6Z55: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$clength_info" {
     Data.Foldable.$fFoldableEither_$clength_info:
         const Data.Foldable.$fFoldableEither_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Z54() //  [R1]
         { []
         }
     {offset
       c6Z54: // global
           if (R1 & 7 == 1) goto c6Z58; else goto c6Z59;
       c6Z58: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Z59: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Z54_info" {
     block_c6Z54_info:
         const _c6Z54;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.489277572 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$cfoldr_closure" {
     Data.Foldable.$fFoldableEither_$cfoldr_closure:
         const Data.Foldable.$fFoldableEither_$cfoldr_info;
 },
 Data.Foldable.$fFoldableEither_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Z5K: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Z5L; else goto c6Z5M;
       c6Z5L: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Z5M: // global
           I64[Sp - 24] = block_c6Z5D_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6Z5T; else goto c6Z5E;
       u6Z5T: // global
           call _c6Z5D(R1) args: 0, res: 0, upd: 0;
       c6Z5E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$cfoldr_info" {
     Data.Foldable.$fFoldableEither_$cfoldr_info:
         const Data.Foldable.$fFoldableEither_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Z5D() //  [R1]
         { []
         }
     {offset
       c6Z5D: // global
           _s6YjK::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6Z5H; else goto c6Z5I;
       c6Z5H: // global
           R1 = _s6YjK::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Z5I: // global
           R3 = _s6YjK::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Z5D_info" {
     block_c6Z5D_info:
         const _c6Z5D;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.49582479 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$cfoldMap_closure" {
     Data.Foldable.$fFoldableEither_$cfoldMap_closure:
         const Data.Foldable.$fFoldableEither_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableEither_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Z6h: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Z6i; else goto c6Z6j;
       c6Z6i: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Z6j: // global
           I64[Sp - 24] = block_c6Z6a_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6Z6q; else goto c6Z6b;
       u6Z6q: // global
           call _c6Z6a(R1) args: 0, res: 0, upd: 0;
       c6Z6b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$cfoldMap_info" {
     Data.Foldable.$fFoldableEither_$cfoldMap_info:
         const Data.Foldable.$fFoldableEither_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Z6a() //  [R1]
         { []
         }
     {offset
       c6Z6a: // global
           if (R1 & 7 == 1) goto c6Z6e; else goto c6Z6f;
       c6Z6e: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c6Z6f: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Z6a_info" {
     block_c6Z6a_info:
         const _c6Z6a;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.501541151 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$cfoldr_closure" {
     Data.Foldable.$fFoldable(,)_$cfoldr_closure:
         const Data.Foldable.$fFoldable(,)_$cfoldr_info;
 },
 Data.Foldable.$fFoldable(,)_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Z6K: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Z6L; else goto c6Z6M;
       c6Z6L: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Z6M: // global
           I64[Sp - 24] = block_c6Z6H_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6Z6Q; else goto c6Z6I;
       u6Z6Q: // global
           call _c6Z6H(R1) args: 0, res: 0, upd: 0;
       c6Z6I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$cfoldr_info" {
     Data.Foldable.$fFoldable(,)_$cfoldr_info:
         const Data.Foldable.$fFoldable(,)_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Z6H() //  [R1]
         { []
         }
     {offset
       c6Z6H: // global
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Z6H_info" {
     block_c6Z6H_info:
         const _c6Z6H;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.507538766 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$cfoldMap_closure" {
     Data.Foldable.$fFoldable(,)_$cfoldMap_closure:
         const Data.Foldable.$fFoldable(,)_$cfoldMap_info;
 },
 Data.Foldable.$fFoldable(,)_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Z78: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Z79; else goto c6Z7a;
       c6Z79: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Z7a: // global
           I64[Sp - 16] = block_c6Z75_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u6Z7e; else goto c6Z76;
       u6Z7e: // global
           call _c6Z75(R1) args: 0, res: 0, upd: 0;
       c6Z76: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$cfoldMap_info" {
     Data.Foldable.$fFoldable(,)_$cfoldMap_info:
         const Data.Foldable.$fFoldable(,)_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Z75() //  [R1]
         { []
         }
     {offset
       c6Z75: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Z75_info" {
     block_c6Z75_info:
         const _c6Z75;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.513308306 UTC

[section ""data" . Data.Foldable.$fFoldableArray_$cnull_closure" {
     Data.Foldable.$fFoldableArray_$cnull_closure:
         const Data.Foldable.$fFoldableArray_$cnull_info;
 },
 Data.Foldable.$fFoldableArray_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6Z7w: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Z7x; else goto c6Z7y;
       c6Z7x: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableArray_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Z7y: // global
           I64[Sp - 8] = block_c6Z7t_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6Z7G; else goto c6Z7u;
       u6Z7G: // global
           call _c6Z7t(R1) args: 0, res: 0, upd: 0;
       c6Z7u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableArray_$cnull_info" {
     Data.Foldable.$fFoldableArray_$cnull_info:
         const Data.Foldable.$fFoldableArray_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Z7t() //  [R1]
         { []
         }
     {offset
       c6Z7t: // global
           if (I64[R1 + 31] == 0) goto c6Z7F; else goto c6Z7E;
       c6Z7F: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6Z7E: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Z7t_info" {
     block_c6Z7t_info:
         const _c6Z7t;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.518870359 UTC

[section ""data" . sat_s6Yke_closure" {
     sat_s6Yke_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.520596366 UTC

[section ""data" . sat_s6Ykf_closure" {
     sat_s6Ykf_closure:
         const :_con_info;
         const sat_s6Yke_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.523256377 UTC

[section ""data" . Data.Foldable.$fFoldableProxy1_closure" {
     Data.Foldable.$fFoldableProxy1_closure:
         const Data.Foldable.$fFoldableProxy1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableProxy1_entry() //  [R1]
         { []
         }
     {offset
       c6Z83: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Z84; else goto c6Z85;
       c6Z84: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Z85: // global
           (_c6Z80::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6Z80::I64 == 0) goto c6Z82; else goto c6Z81;
       c6Z82: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6Z81: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6Z80::I64;
           R3 = sat_s6Ykf_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy1_info" {
     Data.Foldable.$fFoldableProxy1_info:
         const Data.Foldable.$fFoldableProxy1_entry;
         const 0;
         const 4294967317;
         const S6Z86_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.527356806 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cproduct_closure" {
     Data.Foldable.$fFoldableProxy_$cproduct_closure:
         const Data.Foldable.$fFoldableProxy_$cproduct_info;
         const 0;
 },
 Data.Foldable.$fFoldableProxy_$cproduct_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Z8k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Z8l; else goto c6Z8m;
       c6Z8l: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableProxy_$cproduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Z8m: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Foldable.$fFoldableProxy1_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cproduct_info" {
     Data.Foldable.$fFoldableProxy_$cproduct_info:
         const Data.Foldable.$fFoldableProxy_$cproduct_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.531379535 UTC

[section ""data" . Data.Foldable.$fFoldableProxy2_closure" {
     Data.Foldable.$fFoldableProxy2_closure:
         const Data.Foldable.$fFoldableProxy2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableProxy2_entry() //  [R1]
         { []
         }
     {offset
       c6Z8A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Z8B; else goto c6Z8C;
       c6Z8B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Z8C: // global
           (_c6Z8x::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6Z8x::I64 == 0) goto c6Z8z; else goto c6Z8y;
       c6Z8z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6Z8y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6Z8x::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy2_info" {
     Data.Foldable.$fFoldableProxy2_info:
         const Data.Foldable.$fFoldableProxy2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.535882533 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$csum_closure" {
     Data.Foldable.$fFoldableProxy_$csum_closure:
         const Data.Foldable.$fFoldableProxy_$csum_info;
         const 0;
 },
 Data.Foldable.$fFoldableProxy_$csum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Z8R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Z8S; else goto c6Z8T;
       c6Z8S: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableProxy_$csum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Z8T: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Foldable.$fFoldableProxy2_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$csum_info" {
     Data.Foldable.$fFoldableProxy_$csum_info:
         const Data.Foldable.$fFoldableProxy_$csum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.539641203 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$celem_closure" {
     Data.Foldable.$fFoldableProxy_$celem_closure:
         const Data.Foldable.$fFoldableProxy_$celem_info;
 },
 Data.Foldable.$fFoldableProxy_$celem_entry() //  []
         { []
         }
     {offset
       c6Z95: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$celem_info" {
     Data.Foldable.$fFoldableProxy_$celem_info:
         const Data.Foldable.$fFoldableProxy_$celem_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.543215178 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$clength_closure" {
     Data.Foldable.$fFoldableProxy_$clength_closure:
         const Data.Foldable.$fFoldableProxy_$clength_info;
 },
 Data.Foldable.$fFoldableProxy_$clength_entry() //  []
         { []
         }
     {offset
       c6Z9i: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$clength_info" {
     Data.Foldable.$fFoldableProxy_$clength_info:
         const Data.Foldable.$fFoldableProxy_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.546946721 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cnull_closure" {
     Data.Foldable.$fFoldableProxy_$cnull_closure:
         const Data.Foldable.$fFoldableProxy_$cnull_info;
 },
 Data.Foldable.$fFoldableProxy_$cnull_entry() //  []
         { []
         }
     {offset
       c6Z9u: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cnull_info" {
     Data.Foldable.$fFoldableProxy_$cnull_info:
         const Data.Foldable.$fFoldableProxy_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.550595578 UTC

[section ""cstring" . Data.Foldable.$fFoldableProxy4_bytes" {
     Data.Foldable.$fFoldableProxy4_bytes:
         I8[] [102,111,108,100,108,49,58,32,80,114,111,120,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.552763442 UTC

[section ""data" . Data.Foldable.$fFoldableProxy3_closure" {
     Data.Foldable.$fFoldableProxy3_closure:
         const Data.Foldable.$fFoldableProxy3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableProxy3_entry() //  [R1]
         { []
         }
     {offset
       c6Z9K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Z9L; else goto c6Z9M;
       c6Z9L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Z9M: // global
           (_c6Z9H::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6Z9H::I64 == 0) goto c6Z9J; else goto c6Z9I;
       c6Z9J: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6Z9I: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6Z9H::I64;
           R2 = Data.Foldable.$fFoldableProxy4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy3_info" {
     Data.Foldable.$fFoldableProxy3_info:
         const Data.Foldable.$fFoldableProxy3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.556647661 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cfoldl1_closure" {
     Data.Foldable.$fFoldableProxy_$cfoldl1_closure:
         const Data.Foldable.$fFoldableProxy_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableProxy_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c6Z9Z: // global
           R2 = Data.Foldable.$fFoldableProxy3_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cfoldl1_info" {
     Data.Foldable.$fFoldableProxy_$cfoldl1_info:
         const Data.Foldable.$fFoldableProxy_$cfoldl1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.560097581 UTC

[section ""cstring" . Data.Foldable.$fFoldableProxy6_bytes" {
     Data.Foldable.$fFoldableProxy6_bytes:
         I8[] [102,111,108,100,114,49,58,32,80,114,111,120,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.562357294 UTC

[section ""data" . Data.Foldable.$fFoldableProxy5_closure" {
     Data.Foldable.$fFoldableProxy5_closure:
         const Data.Foldable.$fFoldableProxy5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableProxy5_entry() //  [R1]
         { []
         }
     {offset
       c6Zad: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Zae; else goto c6Zaf;
       c6Zae: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Zaf: // global
           (_c6Zaa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6Zaa::I64 == 0) goto c6Zac; else goto c6Zab;
       c6Zac: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6Zab: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6Zaa::I64;
           R2 = Data.Foldable.$fFoldableProxy6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy5_info" {
     Data.Foldable.$fFoldableProxy5_info:
         const Data.Foldable.$fFoldableProxy5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.566305474 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cfoldr1_closure" {
     Data.Foldable.$fFoldableProxy_$cfoldr1_closure:
         const Data.Foldable.$fFoldableProxy_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableProxy_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c6Zas: // global
           R2 = Data.Foldable.$fFoldableProxy5_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cfoldr1_info" {
     Data.Foldable.$fFoldableProxy_$cfoldr1_info:
         const Data.Foldable.$fFoldableProxy_$cfoldr1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S6Z86_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.569995999 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cfoldl_closure" {
     Data.Foldable.$fFoldableProxy_$cfoldl_closure:
         const Data.Foldable.$fFoldableProxy_$cfoldl_info;
 },
 Data.Foldable.$fFoldableProxy_$cfoldl_entry() //  [R3]
         { []
         }
     {offset
       c6ZaD: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cfoldl_info" {
     Data.Foldable.$fFoldableProxy_$cfoldl_info:
         const Data.Foldable.$fFoldableProxy_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.573360457 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cfoldr_closure" {
     Data.Foldable.$fFoldableProxy_$cfoldr_closure:
         const Data.Foldable.$fFoldableProxy_$cfoldr_info;
 },
 Data.Foldable.$fFoldableProxy_$cfoldr_entry() //  [R3]
         { []
         }
     {offset
       c6ZaO: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cfoldr_info" {
     Data.Foldable.$fFoldableProxy_$cfoldr_info:
         const Data.Foldable.$fFoldableProxy_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.576839457 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cfoldMap_closure" {
     Data.Foldable.$fFoldableProxy_$cfoldMap_closure:
         const Data.Foldable.$fFoldableProxy_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableProxy_$cfoldMap_entry() //  [R2]
         { []
         }
     {offset
       c6ZaZ: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cfoldMap_info" {
     Data.Foldable.$fFoldableProxy_$cfoldMap_info:
         const Data.Foldable.$fFoldableProxy_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.58081813 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cfold_closure" {
     Data.Foldable.$fFoldableProxy_$cfold_closure:
         const Data.Foldable.$fFoldableProxy_$cfold_info;
 },
 Data.Foldable.$fFoldableProxy_$cfold_entry() //  [R2]
         { []
         }
     {offset
       c6Zba: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cfold_info" {
     Data.Foldable.$fFoldableProxy_$cfold_info:
         const Data.Foldable.$fFoldableProxy_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.584314974 UTC

[section ""data" . Data.Foldable.$fFoldableDual1_closure" {
     Data.Foldable.$fFoldableDual1_closure:
         const Data.Foldable.$fFoldableDual1_info;
 },
 Data.Foldable.$fFoldableDual1_entry() //  [R3]
         { []
         }
     {offset
       c6Zbl: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Dual2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual1_info" {
     Data.Foldable.$fFoldableDual1_info:
         const Data.Foldable.$fFoldableDual1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.587611943 UTC

[section ""data" . Data.Foldable.$fFoldableDual2_closure" {
     Data.Foldable.$fFoldableDual2_closure:
         const Data.Foldable.$fFoldableDual2_info;
 },
 Data.Foldable.$fFoldableDual2_entry() //  [R3]
         { []
         }
     {offset
       c6Zbw: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Dual2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual2_info" {
     Data.Foldable.$fFoldableDual2_info:
         const Data.Foldable.$fFoldableDual2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.59103145 UTC

[section ""data" . Data.Foldable.$fFoldableDual_$clength_closure" {
     Data.Foldable.$fFoldableDual_$clength_closure:
         const Data.Foldable.$fFoldableDual_$clength_info;
 },
 Data.Foldable.$fFoldableDual_$clength_entry() //  []
         { []
         }
     {offset
       c6ZbH: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual_$clength_info" {
     Data.Foldable.$fFoldableDual_$clength_info:
         const Data.Foldable.$fFoldableDual_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.594771669 UTC

[section ""data" . Data.Foldable.$fFoldableDual_$cnull_closure" {
     Data.Foldable.$fFoldableDual_$cnull_closure:
         const Data.Foldable.$fFoldableDual_$cnull_info;
 },
 Data.Foldable.$fFoldableDual_$cnull_entry() //  []
         { []
         }
     {offset
       c6ZbT: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual_$cnull_info" {
     Data.Foldable.$fFoldableDual_$cnull_info:
         const Data.Foldable.$fFoldableDual_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.598320854 UTC

[section ""data" . Data.Foldable.$fFoldableDual_$ctoList_closure" {
     Data.Foldable.$fFoldableDual_$ctoList_closure:
         const Data.Foldable.$fFoldableDual_$ctoList_info;
 },
 Data.Foldable.$fFoldableDual_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6Zc7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Zcb; else goto c6Zca;
       c6Zcb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableDual_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Zca: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual_$ctoList_info" {
     Data.Foldable.$fFoldableDual_$ctoList_info:
         const Data.Foldable.$fFoldableDual_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.601979588 UTC

[section ""data" . Data.Foldable.$fFoldableDual4_closure" {
     Data.Foldable.$fFoldableDual4_closure:
         const Data.Foldable.$fFoldableDual4_info;
 },
 Data.Foldable.$fFoldableDual4_entry() //  [R3]
         { []
         }
     {offset
       c6Zco: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Dual2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual4_info" {
     Data.Foldable.$fFoldableDual4_info:
         const Data.Foldable.$fFoldableDual4_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.60574338 UTC

[section ""data" . Data.Foldable.$fFoldableDual5_closure" {
     Data.Foldable.$fFoldableDual5_closure:
         const Data.Foldable.$fFoldableDual5_info;
 },
 Data.Foldable.$fFoldableDual5_entry() //  [R2]
         { []
         }
     {offset
       c6Zcz: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual5_info" {
     Data.Foldable.$fFoldableDual5_info:
         const Data.Foldable.$fFoldableDual5_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.609668203 UTC

[section ""data" . Data.Foldable.$fFoldableDual_$cfoldr_closure" {
     Data.Foldable.$fFoldableDual_$cfoldr_closure:
         const Data.Foldable.$fFoldableDual_$cfoldr_info;
 },
 Data.Foldable.$fFoldableDual_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZcK: // global
           R3 = R3;
           _s6YkL::P64 = R2;
           R2 = R4;
           R1 = _s6YkL::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual_$cfoldr_info" {
     Data.Foldable.$fFoldableDual_$cfoldr_info:
         const Data.Foldable.$fFoldableDual_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.613104286 UTC

[section ""data" . Data.Foldable.$fFoldableDual6_closure" {
     Data.Foldable.$fFoldableDual6_closure:
         const Data.Foldable.$fFoldableDual6_info;
 },
 Data.Foldable.$fFoldableDual6_entry() //  [R3]
         { []
         }
     {offset
       c6ZcV: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual6_info" {
     Data.Foldable.$fFoldableDual6_info:
         const Data.Foldable.$fFoldableDual6_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.61643502 UTC

[section ""data" . Data.Foldable.$fFoldableSum1_closure" {
     Data.Foldable.$fFoldableSum1_closure:
         const Data.Foldable.$fFoldableSum1_info;
 },
 Data.Foldable.$fFoldableSum1_entry() //  [R3]
         { []
         }
     {offset
       c6Zd6: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Sum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableSum1_info" {
     Data.Foldable.$fFoldableSum1_info:
         const Data.Foldable.$fFoldableSum1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.620133783 UTC

[section ""data" . Data.Foldable.$fFoldableSum2_closure" {
     Data.Foldable.$fFoldableSum2_closure:
         const Data.Foldable.$fFoldableSum2_info;
 },
 Data.Foldable.$fFoldableSum2_entry() //  [R3]
         { []
         }
     {offset
       c6Zdh: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Sum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableSum2_info" {
     Data.Foldable.$fFoldableSum2_info:
         const Data.Foldable.$fFoldableSum2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.623570328 UTC

[section ""data" . Data.Foldable.$fFoldableSum_$clength_closure" {
     Data.Foldable.$fFoldableSum_$clength_closure:
         const Data.Foldable.$fFoldableSum_$clength_info;
 },
 Data.Foldable.$fFoldableSum_$clength_entry() //  []
         { []
         }
     {offset
       c6Zds: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableSum_$clength_info" {
     Data.Foldable.$fFoldableSum_$clength_info:
         const Data.Foldable.$fFoldableSum_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.626995787 UTC

[section ""data" . Data.Foldable.$fFoldableSum_$cnull_closure" {
     Data.Foldable.$fFoldableSum_$cnull_closure:
         const Data.Foldable.$fFoldableSum_$cnull_info;
 },
 Data.Foldable.$fFoldableSum_$cnull_entry() //  []
         { []
         }
     {offset
       c6ZdE: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableSum_$cnull_info" {
     Data.Foldable.$fFoldableSum_$cnull_info:
         const Data.Foldable.$fFoldableSum_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.631026084 UTC

[section ""data" . Data.Foldable.$fFoldableSum_$ctoList_closure" {
     Data.Foldable.$fFoldableSum_$ctoList_closure:
         const Data.Foldable.$fFoldableSum_$ctoList_info;
 },
 Data.Foldable.$fFoldableSum_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6ZdS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6ZdW; else goto c6ZdV;
       c6ZdW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableSum_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ZdV: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableSum_$ctoList_info" {
     Data.Foldable.$fFoldableSum_$ctoList_info:
         const Data.Foldable.$fFoldableSum_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.634820177 UTC

[section ""data" . Data.Foldable.$fFoldableSum3_closure" {
     Data.Foldable.$fFoldableSum3_closure:
         const Data.Foldable.$fFoldableSum3_info;
 },
 Data.Foldable.$fFoldableSum3_entry() //  [R3]
         { []
         }
     {offset
       c6Ze9: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Sum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableSum3_info" {
     Data.Foldable.$fFoldableSum3_info:
         const Data.Foldable.$fFoldableSum3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.638292628 UTC

[section ""data" . Data.Foldable.$fFoldableSum_$cfoldr_closure" {
     Data.Foldable.$fFoldableSum_$cfoldr_closure:
         const Data.Foldable.$fFoldableSum_$cfoldr_info;
 },
 Data.Foldable.$fFoldableSum_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Zek: // global
           R3 = R3;
           _s6YkW::P64 = R2;
           R2 = R4;
           R1 = _s6YkW::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableSum_$cfoldr_info" {
     Data.Foldable.$fFoldableSum_$cfoldr_info:
         const Data.Foldable.$fFoldableSum_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.642737833 UTC

[section ""data" . Data.Foldable.$fFoldableProduct1_closure" {
     Data.Foldable.$fFoldableProduct1_closure:
         const Data.Foldable.$fFoldableProduct1_info;
 },
 Data.Foldable.$fFoldableProduct1_entry() //  [R3]
         { []
         }
     {offset
       c6Zev: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Product2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProduct1_info" {
     Data.Foldable.$fFoldableProduct1_info:
         const Data.Foldable.$fFoldableProduct1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.646056895 UTC

[section ""data" . Data.Foldable.$fFoldableProduct2_closure" {
     Data.Foldable.$fFoldableProduct2_closure:
         const Data.Foldable.$fFoldableProduct2_info;
 },
 Data.Foldable.$fFoldableProduct2_entry() //  [R3]
         { []
         }
     {offset
       c6ZeG: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Product2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProduct2_info" {
     Data.Foldable.$fFoldableProduct2_info:
         const Data.Foldable.$fFoldableProduct2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.64941068 UTC

[section ""data" . Data.Foldable.$fFoldableProduct_$clength_closure" {
     Data.Foldable.$fFoldableProduct_$clength_closure:
         const Data.Foldable.$fFoldableProduct_$clength_info;
 },
 Data.Foldable.$fFoldableProduct_$clength_entry() //  []
         { []
         }
     {offset
       c6ZeR: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProduct_$clength_info" {
     Data.Foldable.$fFoldableProduct_$clength_info:
         const Data.Foldable.$fFoldableProduct_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.652707755 UTC

[section ""data" . Data.Foldable.$fFoldableProduct_$cnull_closure" {
     Data.Foldable.$fFoldableProduct_$cnull_closure:
         const Data.Foldable.$fFoldableProduct_$cnull_info;
 },
 Data.Foldable.$fFoldableProduct_$cnull_entry() //  []
         { []
         }
     {offset
       c6Zf3: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProduct_$cnull_info" {
     Data.Foldable.$fFoldableProduct_$cnull_info:
         const Data.Foldable.$fFoldableProduct_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.656324046 UTC

[section ""data" . Data.Foldable.$fFoldableProduct_$ctoList_closure" {
     Data.Foldable.$fFoldableProduct_$ctoList_closure:
         const Data.Foldable.$fFoldableProduct_$ctoList_info;
 },
 Data.Foldable.$fFoldableProduct_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c6Zfh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Zfl; else goto c6Zfk;
       c6Zfl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableProduct_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Zfk: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProduct_$ctoList_info" {
     Data.Foldable.$fFoldableProduct_$ctoList_info:
         const Data.Foldable.$fFoldableProduct_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.659954185 UTC

[section ""data" . Data.Foldable.$fFoldableProduct3_closure" {
     Data.Foldable.$fFoldableProduct3_closure:
         const Data.Foldable.$fFoldableProduct3_info;
 },
 Data.Foldable.$fFoldableProduct3_entry() //  [R3]
         { []
         }
     {offset
       c6Zfy: // global
           R2 = R3;
           call Data.Semigroup.Internal.$fGeneric1Product2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProduct3_info" {
     Data.Foldable.$fFoldableProduct3_info:
         const Data.Foldable.$fFoldableProduct3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.663245584 UTC

[section ""data" . Data.Foldable.$fFoldableProduct_$cfoldr_closure" {
     Data.Foldable.$fFoldableProduct_$cfoldr_closure:
         const Data.Foldable.$fFoldableProduct_$cfoldr_info;
 },
 Data.Foldable.$fFoldableProduct_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZfJ: // global
           R3 = R3;
           _s6Yl5::P64 = R2;
           R2 = R4;
           R1 = _s6Yl5::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProduct_$cfoldr_info" {
     Data.Foldable.$fFoldableProduct_$cfoldr_info:
         const Data.Foldable.$fFoldableProduct_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.667224567 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cproduct_closure" {
     Data.Foldable.$fFoldableU1_$cproduct_closure:
         const Data.Foldable.$fFoldableU1_$cproduct_info;
         const 0;
 },
 Data.Foldable.$fFoldableU1_$cproduct_entry() //  [R2, R3]
         { []
         }
     {offset
       c6ZfU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZfV; else goto c6ZfW;
       c6ZfV: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableU1_$cproduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZfW: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Foldable.$fFoldableProxy1_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cproduct_info" {
     Data.Foldable.$fFoldableU1_$cproduct_info:
         const Data.Foldable.$fFoldableU1_$cproduct_entry;
         const 0;
         const 279172874254;
         const 8589934607;
         const S6Z86_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.67106525 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$csum_closure" {
     Data.Foldable.$fFoldableU1_$csum_closure:
         const Data.Foldable.$fFoldableU1_$csum_info;
         const 0;
 },
 Data.Foldable.$fFoldableU1_$csum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Zg8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Zg9; else goto c6Zga;
       c6Zg9: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableU1_$csum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Zga: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Foldable.$fFoldableProxy2_closure;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$csum_info" {
     Data.Foldable.$fFoldableU1_$csum_info:
         const Data.Foldable.$fFoldableU1_$csum_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const S6Z86_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.675483182 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$celem_closure" {
     Data.Foldable.$fFoldableU1_$celem_closure:
         const Data.Foldable.$fFoldableU1_$celem_info;
 },
 Data.Foldable.$fFoldableU1_$celem_entry() //  []
         { []
         }
     {offset
       c6Zgm: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$celem_info" {
     Data.Foldable.$fFoldableU1_$celem_info:
         const Data.Foldable.$fFoldableU1_$celem_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.678729558 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$clength_closure" {
     Data.Foldable.$fFoldableU1_$clength_closure:
         const Data.Foldable.$fFoldableU1_$clength_info;
 },
 Data.Foldable.$fFoldableU1_$clength_entry() //  []
         { []
         }
     {offset
       c6Zgz: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$clength_info" {
     Data.Foldable.$fFoldableU1_$clength_info:
         const Data.Foldable.$fFoldableU1_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.681949751 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cnull_closure" {
     Data.Foldable.$fFoldableU1_$cnull_closure:
         const Data.Foldable.$fFoldableU1_$cnull_info;
 },
 Data.Foldable.$fFoldableU1_$cnull_entry() //  []
         { []
         }
     {offset
       c6ZgL: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cnull_info" {
     Data.Foldable.$fFoldableU1_$cnull_info:
         const Data.Foldable.$fFoldableU1_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.685009456 UTC

[section ""cstring" . Data.Foldable.$fFoldableU3_bytes" {
     Data.Foldable.$fFoldableU3_bytes:
         I8[] [102,111,108,100,108,49,58,32,85,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.687266979 UTC

[section ""data" . Data.Foldable.$fFoldableU2_closure" {
     Data.Foldable.$fFoldableU2_closure:
         const Data.Foldable.$fFoldableU2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableU2_entry() //  [R1]
         { []
         }
     {offset
       c6Zh1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Zh2; else goto c6Zh3;
       c6Zh2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Zh3: // global
           (_c6ZgY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6ZgY::I64 == 0) goto c6Zh0; else goto c6ZgZ;
       c6Zh0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6ZgZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6ZgY::I64;
           R2 = Data.Foldable.$fFoldableU3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU2_info" {
     Data.Foldable.$fFoldableU2_info:
         const Data.Foldable.$fFoldableU2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.69158643 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cfoldl1_closure" {
     Data.Foldable.$fFoldableU1_$cfoldl1_closure:
         const Data.Foldable.$fFoldableU1_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableU1_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c6Zhg: // global
           R2 = Data.Foldable.$fFoldableU2_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cfoldl1_info" {
     Data.Foldable.$fFoldableU1_$cfoldl1_info:
         const Data.Foldable.$fFoldableU1_$cfoldl1_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const S6Z86_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.694579184 UTC

[section ""cstring" . Data.Foldable.$fFoldableU5_bytes" {
     Data.Foldable.$fFoldableU5_bytes:
         I8[] [102,111,108,100,114,49,58,32,85,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.696771205 UTC

[section ""data" . Data.Foldable.$fFoldableU4_closure" {
     Data.Foldable.$fFoldableU4_closure:
         const Data.Foldable.$fFoldableU4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableU4_entry() //  [R1]
         { []
         }
     {offset
       c6Zhu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Zhv; else goto c6Zhw;
       c6Zhv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Zhw: // global
           (_c6Zhr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6Zhr::I64 == 0) goto c6Zht; else goto c6Zhs;
       c6Zht: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6Zhs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6Zhr::I64;
           R2 = Data.Foldable.$fFoldableU5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU4_info" {
     Data.Foldable.$fFoldableU4_info:
         const Data.Foldable.$fFoldableU4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.700710346 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cfoldr1_closure" {
     Data.Foldable.$fFoldableU1_$cfoldr1_closure:
         const Data.Foldable.$fFoldableU1_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableU1_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c6ZhJ: // global
           R2 = Data.Foldable.$fFoldableU4_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cfoldr1_info" {
     Data.Foldable.$fFoldableU1_$cfoldr1_info:
         const Data.Foldable.$fFoldableU1_$cfoldr1_entry;
         const 0;
         const 279172874254;
         const 8589934607;
         const S6Z86_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.705083961 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cfoldl_closure" {
     Data.Foldable.$fFoldableU1_$cfoldl_closure:
         const Data.Foldable.$fFoldableU1_$cfoldl_info;
 },
 Data.Foldable.$fFoldableU1_$cfoldl_entry() //  [R3]
         { []
         }
     {offset
       c6ZhU: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cfoldl_info" {
     Data.Foldable.$fFoldableU1_$cfoldl_info:
         const Data.Foldable.$fFoldableU1_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.708334407 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cfoldr_closure" {
     Data.Foldable.$fFoldableU1_$cfoldr_closure:
         const Data.Foldable.$fFoldableU1_$cfoldr_info;
 },
 Data.Foldable.$fFoldableU1_$cfoldr_entry() //  [R3]
         { []
         }
     {offset
       c6Zi5: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cfoldr_info" {
     Data.Foldable.$fFoldableU1_$cfoldr_info:
         const Data.Foldable.$fFoldableU1_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.711652375 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cfoldMap_closure" {
     Data.Foldable.$fFoldableU1_$cfoldMap_closure:
         const Data.Foldable.$fFoldableU1_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableU1_$cfoldMap_entry() //  [R2]
         { []
         }
     {offset
       c6Zig: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cfoldMap_info" {
     Data.Foldable.$fFoldableU1_$cfoldMap_info:
         const Data.Foldable.$fFoldableU1_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.715288832 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cfold_closure" {
     Data.Foldable.$fFoldableU1_$cfold_closure:
         const Data.Foldable.$fFoldableU1_$cfold_info;
 },
 Data.Foldable.$fFoldableU1_$cfold_entry() //  [R2]
         { []
         }
     {offset
       c6Zir: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cfold_info" {
     Data.Foldable.$fFoldableU1_$cfold_info:
         const Data.Foldable.$fFoldableU1_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.718609992 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cfoldMap_closure" {
     Data.Foldable.$fFoldableV1_$cfoldMap_closure:
         const Data.Foldable.$fFoldableV1_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableV1_$cfoldMap_entry() //  [R2]
         { []
         }
     {offset
       c6ZiC: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cfoldMap_info" {
     Data.Foldable.$fFoldableV1_$cfoldMap_info:
         const Data.Foldable.$fFoldableV1_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.721953895 UTC

[section ""data" . Data.Foldable.$fFoldablePar1_$cnull_closure" {
     Data.Foldable.$fFoldablePar1_$cnull_closure:
         const Data.Foldable.$fFoldablePar1_$cnull_info;
 },
 Data.Foldable.$fFoldablePar1_$cnull_entry() //  []
         { []
         }
     {offset
       c6ZiN: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar1_$cnull_info" {
     Data.Foldable.$fFoldablePar1_$cnull_info:
         const Data.Foldable.$fFoldablePar1_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.725795246 UTC

[section ""data" . Data.Foldable.$fFoldablePar1_$cfoldr_closure" {
     Data.Foldable.$fFoldablePar1_$cfoldr_closure:
         const Data.Foldable.$fFoldablePar1_$cfoldr_info;
 },
 Data.Foldable.$fFoldablePar1_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Zj0: // global
           R3 = R3;
           _s6YlA::P64 = R2;
           R2 = R4;
           R1 = _s6YlA::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar1_$cfoldr_info" {
     Data.Foldable.$fFoldablePar1_$cfoldr_info:
         const Data.Foldable.$fFoldablePar1_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.729339813 UTC

[section ""data" . Data.Foldable.$fFoldablePar1_$cfoldMap_closure" {
     Data.Foldable.$fFoldablePar1_$cfoldMap_closure:
         const Data.Foldable.$fFoldablePar1_$cfoldMap_info;
 },
 Data.Foldable.$fFoldablePar1_$cfoldMap_entry() //  [R3, R4]
         { []
         }
     {offset
       c6Zjb: // global
           R2 = R4;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar1_$cfoldMap_info" {
     Data.Foldable.$fFoldablePar1_$cfoldMap_info:
         const Data.Foldable.$fFoldablePar1_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.733286271 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cfoldMap_closure" {
     Data.Foldable.$fFoldableK1_$cfoldMap_closure:
         const Data.Foldable.$fFoldableK1_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableK1_$cfoldMap_entry() //  [R2]
         { []
         }
     {offset
       c6Zjm: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cfoldMap_info" {
     Data.Foldable.$fFoldableK1_$cfoldMap_info:
         const Data.Foldable.$fFoldableK1_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.737789512 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cnull_closure" {
     Data.Foldable.$fFoldable:+:_$cnull_closure:
         const Data.Foldable.$fFoldable:+:_$cnull_info;
 },
 Data.Foldable.$fFoldable:+:_$cnull_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZjE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZjF; else goto c6ZjG;
       c6ZjF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cnull_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZjG: // global
           I64[Sp - 24] = block_c6Zjx_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6ZjN; else goto c6Zjy;
       u6ZjN: // global
           call _c6Zjx(R1) args: 0, res: 0, upd: 0;
       c6Zjy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cnull_info" {
     Data.Foldable.$fFoldable:+:_$cnull_info:
         const Data.Foldable.$fFoldable:+:_$cnull_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Zjx() //  [R1]
         { []
         }
     {offset
       c6Zjx: // global
           if (R1 & 7 == 1) goto c6ZjB; else goto c6ZjC;
       c6ZjB: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Foldable.null_entry(R2) args: 24, res: 0, upd: 8;
       c6ZjC: // global
           R2 = P64[Sp + 16];
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = P64[R1 + 6];
           Sp = Sp + 8;
           call Data.Foldable.null_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Zjx_info" {
     block_c6Zjx_info:
         const _c6Zjx;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.744045427 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cfoldr_closure" {
     Data.Foldable.$fFoldable:+:_$cfoldr_closure:
         const Data.Foldable.$fFoldable:+:_$cfoldr_info;
 },
 Data.Foldable.$fFoldable:+:_$cfoldr_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c6Zkf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Zkg; else goto c6Zkh;
       c6Zkg: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cfoldr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Zkh: // global
           I64[Sp - 40] = block_c6Zk8_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6Zko; else goto c6Zk9;
       u6Zko: // global
           call _c6Zk8(R1) args: 0, res: 0, upd: 0;
       c6Zk9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cfoldr_info" {
     Data.Foldable.$fFoldable:+:_$cfoldr_info:
         const Data.Foldable.$fFoldable:+:_$cfoldr_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c6Zk8() //  [R1]
         { []
         }
     {offset
       c6Zk8: // global
           _s6YlR::P64 = P64[Sp + 24];
           _s6YlS::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c6Zkc; else goto c6Zkd;
       c6Zkc: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = _s6YlR::P64;
           P64[Sp + 24] = _s6YlS::P64;
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
       c6Zkd: // global
           R2 = P64[Sp + 16];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = _s6YlR::P64;
           P64[Sp + 24] = _s6YlS::P64;
           P64[Sp + 32] = P64[R1 + 6];
           Sp = Sp + 8;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Zk8_info" {
     block_c6Zk8_info:
         const _c6Zk8;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.75056531 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cfoldMap_closure" {
     Data.Foldable.$fFoldable:+:_$cfoldMap_closure:
         const Data.Foldable.$fFoldable:+:_$cfoldMap_info;
 },
 Data.Foldable.$fFoldable:+:_$cfoldMap_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       c6ZkQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6ZkR; else goto c6ZkS;
       c6ZkR: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cfoldMap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZkS: // global
           I64[Sp - 40] = block_c6ZkJ_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6ZkZ; else goto c6ZkK;
       u6ZkZ: // global
           call _c6ZkJ(R1) args: 0, res: 0, upd: 0;
       c6ZkK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cfoldMap_info" {
     Data.Foldable.$fFoldable:+:_$cfoldMap_info:
         const Data.Foldable.$fFoldable:+:_$cfoldMap_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c6ZkJ() //  [R1]
         { []
         }
     {offset
       c6ZkJ: // global
           _s6YlZ::P64 = P64[Sp + 24];
           _s6Ym0::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c6ZkN; else goto c6ZkO;
       c6ZkN: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = _s6YlZ::P64;
           P64[Sp + 24] = _s6Ym0::P64;
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       c6ZkO: // global
           R2 = P64[Sp + 16];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = _s6YlZ::P64;
           P64[Sp + 24] = _s6Ym0::P64;
           P64[Sp + 32] = P64[R1 + 6];
           Sp = Sp + 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZkJ_info" {
     block_c6ZkJ_info:
         const _c6ZkJ;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.756974284 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cnull_closure" {
     Data.Foldable.$fFoldable:*:_$cnull_closure:
         const Data.Foldable.$fFoldable:*:_$cnull_info;
 },
 Data.Foldable.$fFoldable:*:_$cnull_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Zln: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Zlo; else goto c6Zlp;
       c6Zlo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cnull_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Zlp: // global
           I64[Sp - 24] = block_c6Zlk_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u6ZlF; else goto c6Zll;
       u6ZlF: // global
           call _c6Zlk(R1) args: 0, res: 0, upd: 0;
       c6Zll: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cnull_info" {
     Data.Foldable.$fFoldable:*:_$cnull_info:
         const Data.Foldable.$fFoldable:*:_$cnull_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Zlk() //  [R1]
         { []
         }
     {offset
       c6Zlk: // global
           I64[Sp] = block_c6Zls_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           Sp = Sp - 16;
           call Data.Foldable.null_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Zlk_info" {
     block_c6Zlk_info:
         const _c6Zlk;
         const 2;
         const 30;
 },
 _c6Zls() //  [R1]
         { []
         }
     {offset
       c6Zls: // global
           if (R1 & 7 == 1) goto c6Zlz; else goto c6ZlD;
       c6Zlz: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c6ZlD: // global
           R2 = P64[Sp + 16];
           _s6Yma::P64 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = _s6Yma::P64;
           Sp = Sp + 8;
           call Data.Foldable.null_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Zls_info" {
     block_c6Zls_info:
         const _c6Zls;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.766178344 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cfoldr_closure" {
     Data.Foldable.$fFoldable:*:_$cfoldr_closure:
         const Data.Foldable.$fFoldable:*:_$cfoldr_info;
 },
 sat_s6Ymk_entry() //  [R1]
         { []
         }
     {offset
       c6Zmf: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6Zmg; else goto c6Zmh;
       c6Zmg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Zmh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Foldable.foldr_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Ymk_info" {
     sat_s6Ymk_info:
         const sat_s6Ymk_entry;
         const 4;
         const 15;
 },
 Data.Foldable.$fFoldable:*:_$cfoldr_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c6Zmi: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6Zmj; else goto c6Zmk;
       c6Zmj: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cfoldr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Zmk: // global
           I64[Sp - 40] = block_c6Zm6_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6Zmo; else goto c6Zm7;
       u6Zmo: // global
           call _c6Zm6(R1) args: 0, res: 0, upd: 0;
       c6Zm7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cfoldr_info" {
     Data.Foldable.$fFoldable:*:_$cfoldr_info:
         const Data.Foldable.$fFoldable:*:_$cfoldr_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c6Zm6() //  [R1]
         { []
         }
     {offset
       c6Zm6: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6Zmn; else goto c6Zmm;
       c6Zmn: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6Zmm: // global
           _s6Ymi::P64 = P64[R1 + 7];
           _s6Ymj::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_s6Ymk_info;
           P64[Hp - 24] = P64[Sp + 16];
           _s6Yme::P64 = P64[Sp + 24];
           P64[Hp - 16] = _s6Yme::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _s6Ymj::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = _s6Yme::P64;
           P64[Sp + 24] = Hp - 40;
           P64[Sp + 32] = _s6Ymi::P64;
           Sp = Sp + 8;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Zm6_info" {
     block_c6Zm6_info:
         const _c6Zm6;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.775675554 UTC

[section ""data" . Data.Foldable.$w$cfoldMap_closure" {
     Data.Foldable.$w$cfoldMap_closure:
         const Data.Foldable.$w$cfoldMap_info;
 },
 sat_s6Yms_entry() //  [R1]
         { []
         }
     {offset
       c6ZmV: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6ZmW; else goto c6ZmX;
       c6ZmW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZmX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Yms_info" {
     sat_s6Yms_info:
         const sat_s6Yms_entry;
         const 4;
         const 15;
 },
 sat_s6Ymr_entry() //  [R1]
         { []
         }
     {offset
       c6Zn2: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c6Zn3; else goto c6Zn4;
       c6Zn3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Zn4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Ymr_info" {
     sat_s6Ymr_info:
         const sat_s6Ymr_entry;
         const 4;
         const 15;
 },
 Data.Foldable.$w$cfoldMap_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c6Zn5: // global
           _s6Ymp::P64 = R6;
           _s6Ymo::P64 = R5;
           _s6Ymn::P64 = R4;
           _s6Ymm::P64 = R3;
           _s6Yml::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c6Zn6; else goto c6Zn7;
       c6Zn7: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c6Zn9; else goto c6Zn8;
       c6Zn9: // global
           HpAlloc = 96;
           goto c6Zn6;
       c6Zn6: // global
           R6 = _s6Ymp::P64;
           R5 = _s6Ymo::P64;
           R4 = _s6Ymn::P64;
           R3 = _s6Ymm::P64;
           R2 = _s6Yml::P64;
           R1 = Data.Foldable.$w$cfoldMap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c6Zn8: // global
           I64[Hp - 88] = sat_s6Yms_info;
           P64[Hp - 72] = _s6Ymm::P64;
           P64[Hp - 64] = _s6Ymn::P64;
           P64[Hp - 56] = _s6Ymo::P64;
           P64[Hp - 48] = P64[Sp];
           I64[Hp - 40] = sat_s6Ymr_info;
           P64[Hp - 24] = _s6Yml::P64;
           P64[Hp - 16] = _s6Ymn::P64;
           P64[Hp - 8] = _s6Ymo::P64;
           P64[Hp] = _s6Ymp::P64;
           R2 = _s6Ymn::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = Hp - 40;
           P64[Sp] = Hp - 88;
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldMap_info" {
     Data.Foldable.$w$cfoldMap_info:
         const Data.Foldable.$w$cfoldMap_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.783887515 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cfoldMap_closure" {
     Data.Foldable.$fFoldable:*:_$cfoldMap_closure:
         const Data.Foldable.$fFoldable:*:_$cfoldMap_info;
 },
 Data.Foldable.$fFoldable:*:_$cfoldMap_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       c6ZnK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6ZnL; else goto c6ZnM;
       c6ZnL: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cfoldMap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZnM: // global
           I64[Sp - 40] = block_c6ZnH_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6ZnQ; else goto c6ZnI;
       u6ZnQ: // global
           call _c6ZnH(R1) args: 0, res: 0, upd: 0;
       c6ZnI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cfoldMap_info" {
     Data.Foldable.$fFoldable:*:_$cfoldMap_info:
         const Data.Foldable.$fFoldable:*:_$cfoldMap_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c6ZnH() //  [R1]
         { []
         }
     {offset
       c6ZnH: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Foldable.$w$cfoldMap_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZnH_info" {
     block_c6ZnH_info:
         const _c6ZnH;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.790064801 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cfoldr_closure" {
     Data.Foldable.$fFoldable:.:_$cfoldr_closure:
         const Data.Foldable.$fFoldable:.:_$cfoldr_info;
 },
 sat_s6YmI_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6Zob: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6Zoc; else goto c6Zod;
       c6Zoc: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Zod: // global
           _s6YmG::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 14];
           P64[Sp - 16] = R3;
           P64[Sp - 8] = _s6YmG::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YmI_info" {
     sat_s6YmI_info:
         const sat_s6YmI_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:.:_$cfoldr_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c6Zoe: // global
           _s6YmF::P64 = R6;
           _s6YmE::P64 = R5;
           _s6YmD::P64 = R4;
           _s6YmC::P64 = R3;
           _s6YmB::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c6Zof; else goto c6Zog;
       c6Zog: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Zoi; else goto c6Zoh;
       c6Zoi: // global
           HpAlloc = 24;
           goto c6Zof;
       c6Zof: // global
           R6 = _s6YmF::P64;
           R5 = _s6YmE::P64;
           R4 = _s6YmD::P64;
           R3 = _s6YmC::P64;
           R2 = _s6YmB::P64;
           R1 = Data.Foldable.$fFoldable:.:_$cfoldr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Zoh: // global
           I64[Hp - 16] = sat_s6YmI_info;
           P64[Hp - 8] = _s6YmC::P64;
           P64[Hp] = _s6YmD::P64;
           R2 = _s6YmB::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 14;
           P64[Sp - 16] = _s6YmE::P64;
           P64[Sp - 8] = _s6YmF::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cfoldr_info" {
     Data.Foldable.$fFoldable:.:_$cfoldr_info:
         const Data.Foldable.$fFoldable:.:_$cfoldr_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.796637642 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cfoldMap_closure" {
     Data.Foldable.$fFoldable:.:_$cfoldMap_closure:
         const Data.Foldable.$fFoldable:.:_$cfoldMap_info;
 },
 sat_s6YmO_entry() //  [R1]
         { []
         }
     {offset
       c6ZoF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6ZoG; else goto c6ZoH;
       c6ZoG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZoH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YmO_info" {
     sat_s6YmO_info:
         const sat_s6YmO_entry;
         const 3;
         const 15;
 },
 Data.Foldable.$fFoldable:.:_$cfoldMap_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       c6ZoI: // global
           _s6YmN::P64 = R6;
           _s6YmM::P64 = R5;
           _s6YmL::P64 = R4;
           _s6YmK::P64 = R3;
           _s6YmJ::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c6ZoJ; else goto c6ZoK;
       c6ZoK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6ZoM; else goto c6ZoL;
       c6ZoM: // global
           HpAlloc = 40;
           goto c6ZoJ;
       c6ZoJ: // global
           R6 = _s6YmN::P64;
           R5 = _s6YmM::P64;
           R4 = _s6YmL::P64;
           R3 = _s6YmK::P64;
           R2 = _s6YmJ::P64;
           R1 = Data.Foldable.$fFoldable:.:_$cfoldMap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZoL: // global
           I64[Hp - 32] = sat_s6YmO_info;
           P64[Hp - 16] = _s6YmK::P64;
           P64[Hp - 8] = _s6YmL::P64;
           P64[Hp] = _s6YmM::P64;
           R2 = _s6YmJ::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _s6YmL::P64;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _s6YmN::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cfoldMap_info" {
     Data.Foldable.$fFoldable:.:_$cfoldMap_info:
         const Data.Foldable.$fFoldable:.:_$cfoldMap_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.802577379 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cnull_closure" {
     Data.Foldable.$fFoldableURec4_$cnull_closure:
         const Data.Foldable.$fFoldableURec4_$cnull_info;
 },
 Data.Foldable.$fFoldableURec4_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6Zp9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Zpa; else goto c6Zpb;
       c6Zpa: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec4_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Zpb: // global
           I64[Sp - 8] = block_c6Zp7_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cnull_info" {
     Data.Foldable.$fFoldableURec4_$cnull_info:
         const Data.Foldable.$fFoldableURec4_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Zp7() //  []
         { []
         }
     {offset
       c6Zp7: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Zp7_info" {
     block_c6Zp7_info:
         const _c6Zp7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.808585439 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cfoldr_closure" {
     Data.Foldable.$fFoldableURec4_$cfoldr_closure:
         const Data.Foldable.$fFoldableURec4_$cfoldr_info;
 },
 Data.Foldable.$fFoldableURec4_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Zpw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Zpx; else goto c6Zpy;
       c6Zpx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec4_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Zpy: // global
           I64[Sp - 16] = block_c6Zpu_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cfoldr_info" {
     Data.Foldable.$fFoldableURec4_$cfoldr_info:
         const Data.Foldable.$fFoldableURec4_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Zpu() //  []
         { []
         }
     {offset
       c6Zpu: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Zpu_info" {
     block_c6Zpu_info:
         const _c6Zpu;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.813973445 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cfoldMap_closure" {
     Data.Foldable.$fFoldableURec4_$cfoldMap_closure:
         const Data.Foldable.$fFoldableURec4_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableURec4_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZpR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZpS; else goto c6ZpT;
       c6ZpS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec4_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZpT: // global
           I64[Sp - 16] = block_c6ZpP_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cfoldMap_info" {
     Data.Foldable.$fFoldableURec4_$cfoldMap_info:
         const Data.Foldable.$fFoldableURec4_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6ZpP() //  []
         { []
         }
     {offset
       c6ZpP: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZpP_info" {
     block_c6ZpP_info:
         const _c6ZpP;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.819178958 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cnull_closure" {
     Data.Foldable.$fFoldableURec3_$cnull_closure:
         const Data.Foldable.$fFoldableURec3_$cnull_info;
 },
 Data.Foldable.$fFoldableURec3_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6Zqc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Zqd; else goto c6Zqe;
       c6Zqd: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec3_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Zqe: // global
           I64[Sp - 8] = block_c6Zqa_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cnull_info" {
     Data.Foldable.$fFoldableURec3_$cnull_info:
         const Data.Foldable.$fFoldableURec3_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Zqa() //  []
         { []
         }
     {offset
       c6Zqa: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Zqa_info" {
     block_c6Zqa_info:
         const _c6Zqa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.825182929 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cfoldr_closure" {
     Data.Foldable.$fFoldableURec3_$cfoldr_closure:
         const Data.Foldable.$fFoldableURec3_$cfoldr_info;
 },
 Data.Foldable.$fFoldableURec3_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Zqz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZqA; else goto c6ZqB;
       c6ZqA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec3_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZqB: // global
           I64[Sp - 16] = block_c6Zqx_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cfoldr_info" {
     Data.Foldable.$fFoldableURec3_$cfoldr_info:
         const Data.Foldable.$fFoldableURec3_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Zqx() //  []
         { []
         }
     {offset
       c6Zqx: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Zqx_info" {
     block_c6Zqx_info:
         const _c6Zqx;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.830616679 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cfoldMap_closure" {
     Data.Foldable.$fFoldableURec3_$cfoldMap_closure:
         const Data.Foldable.$fFoldableURec3_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableURec3_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZqU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZqV; else goto c6ZqW;
       c6ZqV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec3_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZqW: // global
           I64[Sp - 16] = block_c6ZqS_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cfoldMap_info" {
     Data.Foldable.$fFoldableURec3_$cfoldMap_info:
         const Data.Foldable.$fFoldableURec3_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6ZqS() //  []
         { []
         }
     {offset
       c6ZqS: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZqS_info" {
     block_c6ZqS_info:
         const _c6ZqS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.835929631 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cnull_closure" {
     Data.Foldable.$fFoldableURec2_$cnull_closure:
         const Data.Foldable.$fFoldableURec2_$cnull_info;
 },
 Data.Foldable.$fFoldableURec2_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6Zrf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Zrg; else goto c6Zrh;
       c6Zrg: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec2_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Zrh: // global
           I64[Sp - 8] = block_c6Zrd_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cnull_info" {
     Data.Foldable.$fFoldableURec2_$cnull_info:
         const Data.Foldable.$fFoldableURec2_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Zrd() //  []
         { []
         }
     {offset
       c6Zrd: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Zrd_info" {
     block_c6Zrd_info:
         const _c6Zrd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.841939825 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cfoldr_closure" {
     Data.Foldable.$fFoldableURec2_$cfoldr_closure:
         const Data.Foldable.$fFoldableURec2_$cfoldr_info;
 },
 Data.Foldable.$fFoldableURec2_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZrC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZrD; else goto c6ZrE;
       c6ZrD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec2_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZrE: // global
           I64[Sp - 16] = block_c6ZrA_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cfoldr_info" {
     Data.Foldable.$fFoldableURec2_$cfoldr_info:
         const Data.Foldable.$fFoldableURec2_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6ZrA() //  []
         { []
         }
     {offset
       c6ZrA: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZrA_info" {
     block_c6ZrA_info:
         const _c6ZrA;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.847557623 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cfoldMap_closure" {
     Data.Foldable.$fFoldableURec2_$cfoldMap_closure:
         const Data.Foldable.$fFoldableURec2_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableURec2_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZrX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZrY; else goto c6ZrZ;
       c6ZrY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec2_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZrZ: // global
           I64[Sp - 16] = block_c6ZrV_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cfoldMap_info" {
     Data.Foldable.$fFoldableURec2_$cfoldMap_info:
         const Data.Foldable.$fFoldableURec2_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6ZrV() //  []
         { []
         }
     {offset
       c6ZrV: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZrV_info" {
     block_c6ZrV_info:
         const _c6ZrV;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.852764604 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cnull_closure" {
     Data.Foldable.$fFoldableURec1_$cnull_closure:
         const Data.Foldable.$fFoldableURec1_$cnull_info;
 },
 Data.Foldable.$fFoldableURec1_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6Zsi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Zsj; else goto c6Zsk;
       c6Zsj: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec1_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Zsk: // global
           I64[Sp - 8] = block_c6Zsg_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cnull_info" {
     Data.Foldable.$fFoldableURec1_$cnull_info:
         const Data.Foldable.$fFoldableURec1_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Zsg() //  []
         { []
         }
     {offset
       c6Zsg: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Zsg_info" {
     block_c6Zsg_info:
         const _c6Zsg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.858335596 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cfoldr_closure" {
     Data.Foldable.$fFoldableURec1_$cfoldr_closure:
         const Data.Foldable.$fFoldableURec1_$cfoldr_info;
 },
 Data.Foldable.$fFoldableURec1_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZsF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZsG; else goto c6ZsH;
       c6ZsG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec1_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZsH: // global
           I64[Sp - 16] = block_c6ZsD_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cfoldr_info" {
     Data.Foldable.$fFoldableURec1_$cfoldr_info:
         const Data.Foldable.$fFoldableURec1_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6ZsD() //  []
         { []
         }
     {offset
       c6ZsD: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZsD_info" {
     block_c6ZsD_info:
         const _c6ZsD;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.863568313 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cfoldMap_closure" {
     Data.Foldable.$fFoldableURec1_$cfoldMap_closure:
         const Data.Foldable.$fFoldableURec1_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableURec1_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Zt0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Zt1; else goto c6Zt2;
       c6Zt1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec1_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Zt2: // global
           I64[Sp - 16] = block_c6ZsY_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cfoldMap_info" {
     Data.Foldable.$fFoldableURec1_$cfoldMap_info:
         const Data.Foldable.$fFoldableURec1_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6ZsY() //  []
         { []
         }
     {offset
       c6ZsY: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZsY_info" {
     block_c6ZsY_info:
         const _c6ZsY;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.868804957 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cnull_closure" {
     Data.Foldable.$fFoldableURec0_$cnull_closure:
         const Data.Foldable.$fFoldableURec0_$cnull_info;
 },
 Data.Foldable.$fFoldableURec0_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6Ztl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Ztm; else goto c6Ztn;
       c6Ztm: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec0_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Ztn: // global
           I64[Sp - 8] = block_c6Ztj_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cnull_info" {
     Data.Foldable.$fFoldableURec0_$cnull_info:
         const Data.Foldable.$fFoldableURec0_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Ztj() //  []
         { []
         }
     {offset
       c6Ztj: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Ztj_info" {
     block_c6Ztj_info:
         const _c6Ztj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.875155446 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cfoldr_closure" {
     Data.Foldable.$fFoldableURec0_$cfoldr_closure:
         const Data.Foldable.$fFoldableURec0_$cfoldr_info;
 },
 Data.Foldable.$fFoldableURec0_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZtI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZtJ; else goto c6ZtK;
       c6ZtJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec0_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZtK: // global
           I64[Sp - 16] = block_c6ZtG_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cfoldr_info" {
     Data.Foldable.$fFoldableURec0_$cfoldr_info:
         const Data.Foldable.$fFoldableURec0_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6ZtG() //  []
         { []
         }
     {offset
       c6ZtG: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZtG_info" {
     block_c6ZtG_info:
         const _c6ZtG;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.880469471 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cfoldMap_closure" {
     Data.Foldable.$fFoldableURec0_$cfoldMap_closure:
         const Data.Foldable.$fFoldableURec0_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableURec0_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Zu3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Zu4; else goto c6Zu5;
       c6Zu4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec0_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Zu5: // global
           I64[Sp - 16] = block_c6Zu1_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cfoldMap_info" {
     Data.Foldable.$fFoldableURec0_$cfoldMap_info:
         const Data.Foldable.$fFoldableURec0_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Zu1() //  []
         { []
         }
     {offset
       c6Zu1: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Zu1_info" {
     block_c6Zu1_info:
         const _c6Zu1;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.886156995 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cnull_closure" {
     Data.Foldable.$fFoldableURec_$cnull_closure:
         const Data.Foldable.$fFoldableURec_$cnull_info;
 },
 Data.Foldable.$fFoldableURec_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c6Zuo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Zup; else goto c6Zuq;
       c6Zup: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Zuq: // global
           I64[Sp - 8] = block_c6Zum_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cnull_info" {
     Data.Foldable.$fFoldableURec_$cnull_info:
         const Data.Foldable.$fFoldableURec_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c6Zum() //  []
         { []
         }
     {offset
       c6Zum: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Zum_info" {
     block_c6Zum_info:
         const _c6Zum;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.891470589 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cfoldr_closure" {
     Data.Foldable.$fFoldableURec_$cfoldr_closure:
         const Data.Foldable.$fFoldableURec_$cfoldr_info;
 },
 Data.Foldable.$fFoldableURec_$cfoldr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZuL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZuM; else goto c6ZuN;
       c6ZuM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec_$cfoldr_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZuN: // global
           I64[Sp - 16] = block_c6ZuJ_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cfoldr_info" {
     Data.Foldable.$fFoldableURec_$cfoldr_info:
         const Data.Foldable.$fFoldableURec_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6ZuJ() //  []
         { []
         }
     {offset
       c6ZuJ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZuJ_info" {
     block_c6ZuJ_info:
         const _c6ZuJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.896948087 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cfoldMap_closure" {
     Data.Foldable.$fFoldableURec_$cfoldMap_closure:
         const Data.Foldable.$fFoldableURec_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableURec_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6Zv6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Zv7; else goto c6Zv8;
       c6Zv7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Zv8: // global
           I64[Sp - 16] = block_c6Zv4_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cfoldMap_info" {
     Data.Foldable.$fFoldableURec_$cfoldMap_info:
         const Data.Foldable.$fFoldableURec_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6Zv4() //  []
         { []
         }
     {offset
       c6Zv4: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Zv4_info" {
     block_c6Zv4_info:
         const _c6Zv4;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.901856866 UTC

[section ""data" . Data.Foldable.$fFoldable:*:1_closure" {
     Data.Foldable.$fFoldable:*:1_closure:
         const Data.Foldable.$fFoldable:*:1_info;
 },
 Data.Foldable.$fFoldable:*:1_entry() //  [R2]
         { []
         }
     {offset
       c6Zvp: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:1_info" {
     Data.Foldable.$fFoldable:*:1_info:
         const Data.Foldable.$fFoldable:*:1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.905955798 UTC

[section ""data" . $dmproduct1_r6OSR_closure" {
     $dmproduct1_r6OSR_closure:
         const $dmproduct1_r6OSR_info;
         const 0;
 },
 sat_s6Yo8_entry() //  [R1]
         { []
         }
     {offset
       c6ZvE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZvF; else goto c6ZvG;
       c6ZvF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZvG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Yo8_info" {
     sat_s6Yo8_info:
         const sat_s6Yo8_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+96;
 },
 $dmproduct1_r6OSR_entry() //  [R2, R3]
         { []
         }
     {offset
       c6ZvH: // global
           _s6Yo7::P64 = R3;
           _s6Yo6::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZvI; else goto c6ZvJ;
       c6ZvJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6ZvL; else goto c6ZvK;
       c6ZvL: // global
           HpAlloc = 24;
           goto c6ZvI;
       c6ZvI: // global
           R3 = _s6Yo7::P64;
           R2 = _s6Yo6::P64;
           R1 = $dmproduct1_r6OSR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZvK: // global
           I64[Hp - 16] = sat_s6Yo8_info;
           P64[Hp] = _s6Yo7::P64;
           R2 = _s6Yo6::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Data.Foldable.$fFoldable:*:1_closure+1;
           Sp = Sp - 24;
           call Data.Foldable.foldMap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmproduct1_r6OSR_info" {
     $dmproduct1_r6OSR_info:
         const $dmproduct1_r6OSR_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.912293597 UTC

[section ""data" . Data.Foldable.$dmproduct_closure" {
     Data.Foldable.$dmproduct_closure:
         const Data.Foldable.$dmproduct_info;
         const 0;
 },
 Data.Foldable.$dmproduct_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Zw4: // global
           R3 = R3;
           R2 = R2;
           call $dmproduct1_r6OSR_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmproduct_info" {
     Data.Foldable.$dmproduct_info:
         const Data.Foldable.$dmproduct_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.9162117 UTC

[section ""data" . $dmsum1_r6OSS_closure" {
     $dmsum1_r6OSS_closure:
         const $dmsum1_r6OSS_info;
         const 0;
 },
 sat_s6Yob_entry() //  [R1]
         { []
         }
     {offset
       c6Zwj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Zwk; else goto c6Zwl;
       c6Zwk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Zwl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Yob_info" {
     sat_s6Yob_info:
         const sat_s6Yob_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+112;
 },
 $dmsum1_r6OSS_entry() //  [R2, R3]
         { []
         }
     {offset
       c6Zwm: // global
           _s6Yoa::P64 = R3;
           _s6Yo9::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6Zwn; else goto c6Zwo;
       c6Zwo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Zwq; else goto c6Zwp;
       c6Zwq: // global
           HpAlloc = 24;
           goto c6Zwn;
       c6Zwn: // global
           R3 = _s6Yoa::P64;
           R2 = _s6Yo9::P64;
           R1 = $dmsum1_r6OSS_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6Zwp: // global
           I64[Hp - 16] = sat_s6Yob_info;
           P64[Hp] = _s6Yoa::P64;
           R2 = _s6Yo9::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Data.Foldable.$fFoldable:*:1_closure+1;
           Sp = Sp - 24;
           call Data.Foldable.foldMap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmsum1_r6OSS_info" {
     $dmsum1_r6OSS_info:
         const $dmsum1_r6OSS_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.921552675 UTC

[section ""data" . Data.Foldable.$dmsum_closure" {
     Data.Foldable.$dmsum_closure:
         const Data.Foldable.$dmsum_info;
         const 0;
 },
 Data.Foldable.$dmsum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6ZwJ: // global
           R3 = R3;
           R2 = R2;
           call $dmsum1_r6OSS_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmsum_info" {
     Data.Foldable.$dmsum_info:
         const Data.Foldable.$dmsum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.924477497 UTC

[section ""cstring" . Data.Foldable.$fFoldableK3_bytes" {
     Data.Foldable.$fFoldableK3_bytes:
         I8[] [109,105,110,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.927240261 UTC

[section ""data" . poly_d_r6OST_closure" {
     poly_d_r6OST_closure:
         const poly_d_r6OST_info;
         const 0;
         const 0;
         const 0;
 },
 poly_d_r6OST_entry() //  [R1]
         { []
         }
     {offset
       c6ZwZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6Zx0; else goto c6Zx1;
       c6Zx0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Zx1: // global
           (_c6ZwU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6ZwU::I64 == 0) goto c6ZwW; else goto c6ZwV;
       c6ZwW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6ZwV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6ZwU::I64;
           I64[Sp - 24] = block_c6ZwX_info;
           R2 = Data.Foldable.$fFoldableK3_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . poly_d_r6OST_info" {
     poly_d_r6OST_info:
         const poly_d_r6OST_entry;
         const 0;
         const 4294967317;
         const S6Z86_srt+40;
 },
 _c6ZwX() //  [R1]
         { []
         }
     {offset
       c6ZwX: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6ZwX_info" {
     block_c6ZwX_info:
         const _c6ZwX;
         const 0;
         const 4294967326;
         const S6Z86_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.934329709 UTC

[section ""data" . Data.Foldable.$dmminimum_closure" {
     Data.Foldable.$dmminimum_closure:
         const Data.Foldable.$dmminimum_info;
         const 0;
 },
 sat_s6Yog_entry() //  [R1]
         { []
         }
     {offset
       c6Zxt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Zxu; else goto c6Zxv;
       c6Zxu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Zxv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Yog_info" {
     sat_s6Yog_info:
         const sat_s6Yog_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+128;
 },
 g_s6Yof_entry() //  [R1]
         { []
         }
     {offset
       c6Zxw: // global
           _s6Yof::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6Zxx; else goto c6Zxy;
       c6Zxy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6ZxA; else goto c6Zxz;
       c6ZxA: // global
           HpAlloc = 24;
           goto c6Zxx;
       c6Zxx: // global
           R1 = _s6Yof::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Zxz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6Yof::P64;
           _s6Yod::P64 = P64[_s6Yof::P64 + 16];
           _s6Yoe::P64 = P64[_s6Yof::P64 + 24];
           I64[Hp - 16] = sat_s6Yog_info;
           P64[Hp] = _s6Yoe::P64;
           R2 = _s6Yod::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s6Yof_info" {
     g_s6Yof_info:
         const g_s6Yof_entry;
         const 2;
         const 4294967314;
         const S6Z86_srt+128;
 },
 sat_s6Yok_entry() //  [R1, R2]
         { []
         }
     {offset
       c6ZxM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6ZxN; else goto c6ZxO;
       c6ZxN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ZxO: // global
           I64[Sp - 8] = block_c6ZxG_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yok_info" {
     sat_s6Yok_info:
         const sat_s6Yok_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Z86_srt+136;
 },
 _c6ZxG() //  [R1]
         { []
         }
     {offset
       c6ZxG: // global
           if (R1 & 7 == 1) goto c6ZxJ; else goto c6ZxK;
       c6ZxJ: // global
           R1 = poly_d_r6OST_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6ZxK: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZxG_info" {
     block_c6ZxG_info:
         const _c6ZxG;
         const 0;
         const 4294967326;
         const S6Z86_srt+136;
 },
 Data.Foldable.$dmminimum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6ZxV: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6ZxZ; else goto c6ZxY;
       c6ZxZ: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$dmminimum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZxY: // global
           I64[Hp - 40] = g_s6Yof_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6Yok_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmminimum_info" {
     Data.Foldable.$dmminimum_info:
         const Data.Foldable.$dmminimum_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S6Z86_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.944934241 UTC

[section ""cstring" . Data.Foldable.$fFoldableK5_bytes" {
     Data.Foldable.$fFoldableK5_bytes:
         I8[] [109,97,120,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.947850229 UTC

[section ""data" . poly_d1_r6OSU_closure" {
     poly_d1_r6OSU_closure:
         const poly_d1_r6OSU_info;
         const 0;
         const 0;
         const 0;
 },
 poly_d1_r6OSU_entry() //  [R1]
         { []
         }
     {offset
       c6ZyG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZyH; else goto c6ZyI;
       c6ZyH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZyI: // global
           (_c6ZyB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6ZyB::I64 == 0) goto c6ZyD; else goto c6ZyC;
       c6ZyD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6ZyC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6ZyB::I64;
           I64[Sp - 24] = block_c6ZyE_info;
           R2 = Data.Foldable.$fFoldableK5_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . poly_d1_r6OSU_info" {
     poly_d1_r6OSU_info:
         const poly_d1_r6OSU_entry;
         const 0;
         const 4294967317;
         const S6Z86_srt+40;
 },
 _c6ZyE() //  [R1]
         { []
         }
     {offset
       c6ZyE: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6ZyE_info" {
     block_c6ZyE_info:
         const _c6ZyE;
         const 0;
         const 4294967326;
         const S6Z86_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.954784061 UTC

[section ""data" . Data.Foldable.$dmmaximum_closure" {
     Data.Foldable.$dmmaximum_closure:
         const Data.Foldable.$dmmaximum_info;
         const 0;
 },
 sat_s6Yop_entry() //  [R1]
         { []
         }
     {offset
       c6Zza: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6Zzb; else goto c6Zzc;
       c6Zzb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Zzc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Yop_info" {
     sat_s6Yop_info:
         const sat_s6Yop_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+152;
 },
 g_s6Yoo_entry() //  [R1]
         { []
         }
     {offset
       c6Zzd: // global
           _s6Yoo::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c6Zze; else goto c6Zzf;
       c6Zzf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6Zzh; else goto c6Zzg;
       c6Zzh: // global
           HpAlloc = 24;
           goto c6Zze;
       c6Zze: // global
           R1 = _s6Yoo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6Zzg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6Yoo::P64;
           _s6Yom::P64 = P64[_s6Yoo::P64 + 16];
           _s6Yon::P64 = P64[_s6Yoo::P64 + 24];
           I64[Hp - 16] = sat_s6Yop_info;
           P64[Hp] = _s6Yon::P64;
           R2 = _s6Yom::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s6Yoo_info" {
     g_s6Yoo_info:
         const g_s6Yoo_entry;
         const 2;
         const 4294967314;
         const S6Z86_srt+152;
 },
 sat_s6Yot_entry() //  [R1, R2]
         { []
         }
     {offset
       c6Zzt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6Zzu; else goto c6Zzv;
       c6Zzu: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6Zzv: // global
           I64[Sp - 8] = block_c6Zzn_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yot_info" {
     sat_s6Yot_info:
         const sat_s6Yot_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Z86_srt+160;
 },
 _c6Zzn() //  [R1]
         { []
         }
     {offset
       c6Zzn: // global
           if (R1 & 7 == 1) goto c6Zzq; else goto c6Zzr;
       c6Zzq: // global
           R1 = poly_d1_r6OSU_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6Zzr: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6Zzn_info" {
     block_c6Zzn_info:
         const _c6Zzn;
         const 0;
         const 4294967326;
         const S6Z86_srt+160;
 },
 Data.Foldable.$dmmaximum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6ZzC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6ZzG; else goto c6ZzF;
       c6ZzG: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$dmmaximum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZzF: // global
           I64[Hp - 40] = g_s6Yoo_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6Yot_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmmaximum_info" {
     Data.Foldable.$dmmaximum_info:
         const Data.Foldable.$dmmaximum_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S6Z86_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.965934698 UTC

[section ""data" . Data.Foldable.$fFoldable:*:5_closure" {
     Data.Foldable.$fFoldable:*:5_closure:
         const Data.Foldable.$fFoldable:*:5_info;
 },
 Data.Foldable.$fFoldable:*:5_entry() //  [R2, R3]
         { []
         }
     {offset
       c6ZAl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c6ZAs; else goto c6ZAt;
       c6ZAs: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZAt: // global
           I64[Sp - 8] = block_c6ZAi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6ZAx; else goto c6ZAj;
       u6ZAx: // global
           call _c6ZAi(R1) args: 0, res: 0, upd: 0;
       c6ZAj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:5_info" {
     Data.Foldable.$fFoldable:*:5_info:
         const Data.Foldable.$fFoldable:*:5_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c6ZAi() //  [R1]
         { []
         }
     {offset
       c6ZAi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6ZAw; else goto c6ZAv;
       c6ZAw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6ZAv: // global
           _s6Yoy::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s6Yoy::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZAi_info" {
     block_c6ZAi_info:
         const _c6ZAi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.971299187 UTC

[section ""data" . Data.Foldable.$dmlength_closure" {
     Data.Foldable.$dmlength_closure:
         const Data.Foldable.$dmlength_info;
 },
 Data.Foldable.$dmlength_entry() //  [R2]
         { []
         }
     {offset
       c6ZAP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZAQ; else goto c6ZAR;
       c6ZAQ: // global
           R2 = R2;
           R1 = Data.Foldable.$dmlength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ZAR: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Foldable.$fFoldable:*:5_closure+2;
           P64[Sp - 8] = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp - 24;
           call Data.Foldable.foldl'_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmlength_info" {
     Data.Foldable.$dmlength_info:
         const Data.Foldable.$dmlength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.975307894 UTC

[section ""data" . lvl_r6OSV_closure" {
     lvl_r6OSV_closure:
         const lvl_r6OSV_info;
 },
 lvl_r6OSV_entry() //  []
         { []
         }
     {offset
       c6ZB4: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl_r6OSV_info" {
     lvl_r6OSV_info:
         const lvl_r6OSV_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.979149481 UTC

[section ""data" . Data.Foldable.$dmnull_closure" {
     Data.Foldable.$dmnull_closure:
         const Data.Foldable.$dmnull_info;
 },
 Data.Foldable.$dmnull_entry() //  [R2]
         { []
         }
     {offset
       c6ZBh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZBi; else goto c6ZBj;
       c6ZBi: // global
           R2 = R2;
           R1 = Data.Foldable.$dmnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ZBj: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = lvl_r6OSV_closure+2;
           P64[Sp - 8] = GHC.Types.True_closure+2;
           Sp = Sp - 24;
           call Data.Foldable.foldr_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmnull_info" {
     Data.Foldable.$dmnull_info:
         const Data.Foldable.$dmnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.983878524 UTC

[section ""data" . Data.Foldable.$dmtoList_closure" {
     Data.Foldable.$dmtoList_closure:
         const Data.Foldable.$dmtoList_info;
 },
 Data.Foldable.$dmtoList_entry() //  [R2, R3]
         { []
         }
     {offset
       c6ZBx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6ZBy; else goto c6ZBz;
       c6ZBy: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$dmtoList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZBz: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmtoList_info" {
     Data.Foldable.$dmtoList_info:
         const Data.Foldable.$dmtoList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.987261966 UTC

[section ""cstring" . Data.Foldable.$fFoldableK7_bytes" {
     Data.Foldable.$fFoldableK7_bytes:
         I8[] [102,111,108,100,108,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.990137754 UTC

[section ""data" . Data.Foldable.$fFoldable:*:6_closure" {
     Data.Foldable.$fFoldable:*:6_closure:
         const Data.Foldable.$fFoldable:*:6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldable:*:6_entry() //  [R1]
         { []
         }
     {offset
       c6ZBT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZBU; else goto c6ZBV;
       c6ZBU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZBV: // global
           (_c6ZBO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6ZBO::I64 == 0) goto c6ZBQ; else goto c6ZBP;
       c6ZBQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6ZBP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6ZBO::I64;
           I64[Sp - 24] = block_c6ZBR_info;
           R2 = Data.Foldable.$fFoldableK7_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:6_info" {
     Data.Foldable.$fFoldable:*:6_info:
         const Data.Foldable.$fFoldable:*:6_entry;
         const 0;
         const 4294967317;
         const S6Z86_srt+40;
 },
 _c6ZBR() //  [R1]
         { []
         }
     {offset
       c6ZBR: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6ZBR_info" {
     block_c6ZBR_info:
         const _c6ZBR;
         const 0;
         const 4294967326;
         const S6Z86_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:16.997757417 UTC

[section ""data" . Data.Foldable.$dmfoldl1_closure" {
     Data.Foldable.$dmfoldl1_closure:
         const Data.Foldable.$dmfoldl1_info;
         const 0;
 },
 sat_s6YoN_entry() //  [R1]
         { []
         }
     {offset
       c6ZCv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6ZCw; else goto c6ZCx;
       c6ZCw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZCx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6ZCo_info;
           _s6YoH::P64 = P64[R1 + 16];
           _s6YoK::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s6YoH::P64;
           P64[Sp - 24] = _s6YoK::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6ZCE; else goto c6ZCp;
       u6ZCE: // global
           call _c6ZCo(R1) args: 0, res: 0, upd: 0;
       c6ZCp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YoN_info" {
     sat_s6YoN_info:
         const sat_s6YoN_entry;
         const 3;
         const 15;
 },
 _c6ZCo() //  [R1]
         { []
         }
     {offset
       c6ZCo: // global
           _s6YoK::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6ZCs; else goto c6ZCt;
       c6ZCs: // global
           R1 = _s6YoK::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c6ZCt: // global
           R3 = _s6YoK::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6ZCo_info" {
     block_c6ZCo_info:
         const _c6ZCo;
         const 2;
         const 30;
 },
 sat_s6YoO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6ZCG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6ZCK; else goto c6ZCJ;
       c6ZCK: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZCJ: // global
           _s6YoH::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6YoN_info;
           P64[Hp - 32] = _s6YoH::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YoO_info" {
     sat_s6YoO_info:
         const sat_s6YoO_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$dmfoldl1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZCR: // global
           _s6YoI::P64 = R4;
           _s6YoH::P64 = R3;
           _s6YoG::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6ZCS; else goto c6ZCT;
       c6ZCT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6ZCV; else goto c6ZCU;
       c6ZCV: // global
           HpAlloc = 16;
           goto c6ZCS;
       c6ZCS: // global
           R4 = _s6YoI::P64;
           R3 = _s6YoH::P64;
           R2 = _s6YoG::P64;
           R1 = Data.Foldable.$dmfoldl1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZCU: // global
           I64[Hp - 8] = sat_s6YoO_info;
           P64[Hp] = _s6YoH::P64;
           I64[Sp - 8] = block_c6ZCL_info;
           R2 = _s6YoG::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _s6YoI::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldl_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmfoldl1_info" {
     Data.Foldable.$dmfoldl1_info:
         const Data.Foldable.$dmfoldl1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6Z86_srt+176;
 },
 _c6ZCL() //  [R1]
         { []
         }
     {offset
       c6ZCL: // global
           if (R1 & 7 == 1) goto c6ZCO; else goto c6ZCP;
       c6ZCO: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6ZCP: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZCL_info" {
     block_c6ZCL_info:
         const _c6ZCL;
         const 0;
         const 4294967326;
         const S6Z86_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.008058432 UTC

[section ""cstring" . Data.Foldable.$fFoldableK9_bytes" {
     Data.Foldable.$fFoldableK9_bytes:
         I8[] [102,111,108,100,114,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.01062361 UTC

[section ""data" . Data.Foldable.$fFoldable:*:8_closure" {
     Data.Foldable.$fFoldable:*:8_closure:
         const Data.Foldable.$fFoldable:*:8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldable:*:8_entry() //  [R1]
         { []
         }
     {offset
       c6ZDK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZDL; else goto c6ZDM;
       c6ZDL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZDM: // global
           (_c6ZDF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6ZDF::I64 == 0) goto c6ZDH; else goto c6ZDG;
       c6ZDH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6ZDG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6ZDF::I64;
           I64[Sp - 24] = block_c6ZDI_info;
           R2 = Data.Foldable.$fFoldableK9_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:8_info" {
     Data.Foldable.$fFoldable:*:8_info:
         const Data.Foldable.$fFoldable:*:8_entry;
         const 0;
         const 4294967317;
         const S6Z86_srt+40;
 },
 _c6ZDI() //  [R1]
         { []
         }
     {offset
       c6ZDI: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6ZDI_info" {
     block_c6ZDI_info:
         const _c6ZDI;
         const 0;
         const 4294967326;
         const S6Z86_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.018421855 UTC

[section ""data" . Data.Foldable.$dmfoldr1_closure" {
     Data.Foldable.$dmfoldr1_closure:
         const Data.Foldable.$dmfoldr1_info;
         const 0;
 },
 sat_s6YoZ_entry() //  [R1]
         { []
         }
     {offset
       c6ZEm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6ZEn; else goto c6ZEo;
       c6ZEn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZEo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6ZEf_info;
           _s6YoT::P64 = P64[R1 + 16];
           _s6YoV::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6YoT::P64;
           P64[Sp - 24] = _s6YoV::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6ZEv; else goto c6ZEg;
       u6ZEv: // global
           call _c6ZEf(R1) args: 0, res: 0, upd: 0;
       c6ZEg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YoZ_info" {
     sat_s6YoZ_info:
         const sat_s6YoZ_entry;
         const 3;
         const 15;
 },
 _c6ZEf() //  [R1]
         { []
         }
     {offset
       c6ZEf: // global
           _s6YoV::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c6ZEj; else goto c6ZEk;
       c6ZEj: // global
           R1 = _s6YoV::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c6ZEk: // global
           R3 = P64[R1 + 6];
           R2 = _s6YoV::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6ZEf_info" {
     block_c6ZEf_info:
         const _c6ZEf;
         const 2;
         const 30;
 },
 sat_s6Yp0_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6ZEx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6ZEB; else goto c6ZEA;
       c6ZEB: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZEA: // global
           _s6YoT::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6YoZ_info;
           P64[Hp - 32] = _s6YoT::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yp0_info" {
     sat_s6Yp0_info:
         const sat_s6Yp0_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$dmfoldr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZEI: // global
           _s6YoU::P64 = R4;
           _s6YoT::P64 = R3;
           _s6YoS::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6ZEJ; else goto c6ZEK;
       c6ZEK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6ZEM; else goto c6ZEL;
       c6ZEM: // global
           HpAlloc = 16;
           goto c6ZEJ;
       c6ZEJ: // global
           R4 = _s6YoU::P64;
           R3 = _s6YoT::P64;
           R2 = _s6YoS::P64;
           R1 = Data.Foldable.$dmfoldr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZEL: // global
           I64[Hp - 8] = sat_s6Yp0_info;
           P64[Hp] = _s6YoT::P64;
           I64[Sp - 8] = block_c6ZEC_info;
           R2 = _s6YoS::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _s6YoU::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmfoldr1_info" {
     Data.Foldable.$dmfoldr1_info:
         const Data.Foldable.$dmfoldr1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6Z86_srt+192;
 },
 _c6ZEC() //  [R1]
         { []
         }
     {offset
       c6ZEC: // global
           if (R1 & 7 == 1) goto c6ZEF; else goto c6ZEG;
       c6ZEF: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6ZEG: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZEC_info" {
     block_c6ZEC_info:
         const _c6ZEC;
         const 0;
         const 4294967326;
         const S6Z86_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.030831243 UTC

[section ""data" . Data.Foldable.$dmfoldl'_closure" {
     Data.Foldable.$dmfoldl'_closure:
         const Data.Foldable.$dmfoldl'_info;
 },
 sat_s6Ypb_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6ZFD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZFE; else goto c6ZFF;
       c6ZFE: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZFF: // global
           I64[Sp - 16] = block_c6ZFB_info;
           _s6Yp8::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6Yp8::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Ypb_info" {
     sat_s6Ypb_info:
         const sat_s6Ypb_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c6ZFB() //  [R1]
         { []
         }
     {offset
       c6ZFB: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZFB_info" {
     block_c6ZFB_info:
         const _c6ZFB;
         const 1;
         const 30;
 },
 Data.Foldable.$dmfoldl'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6ZFH: // global
           _s6Yp6::P64 = R5;
           _s6Yp5::P64 = R4;
           _s6Yp4::P64 = R3;
           _s6Yp3::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6ZFI; else goto c6ZFJ;
       c6ZFJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6ZFL; else goto c6ZFK;
       c6ZFL: // global
           HpAlloc = 16;
           goto c6ZFI;
       c6ZFI: // global
           R5 = _s6Yp6::P64;
           R4 = _s6Yp5::P64;
           R3 = _s6Yp4::P64;
           R2 = _s6Yp3::P64;
           R1 = Data.Foldable.$dmfoldl'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZFK: // global
           I64[Hp - 8] = sat_s6Ypb_info;
           P64[Hp] = _s6Yp4::P64;
           R2 = _s6Yp3::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 5;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = _s6Yp6::P64;
           P64[Sp - 8] = _s6Yp5::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmfoldl'_info" {
     Data.Foldable.$dmfoldl'_info:
         const Data.Foldable.$dmfoldl'_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.038094809 UTC

[section ""data" . Data.Foldable.$fFoldable:*:7_closure" {
     Data.Foldable.$fFoldable:*:7_closure:
         const Data.Foldable.$fFoldable:*:7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldable:*:7_entry() //  [R1]
         { []
         }
     {offset
       c6ZGa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZGb; else goto c6ZGc;
       c6ZGb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZGc: // global
           (_c6ZG7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6ZG7::I64 == 0) goto c6ZG9; else goto c6ZG8;
       c6ZG9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6ZG8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6ZG7::I64;
           R2 = Data.Semigroup.Internal.$fMonoidEndo_closure;
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidDual_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:7_info" {
     Data.Foldable.$fFoldable:*:7_info:
         const Data.Foldable.$fFoldable:*:7_entry;
         const 0;
         const 4294967317;
         const S6Z86_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.042641891 UTC

[section ""data" . Data.Foldable.$dmfoldl_closure" {
     Data.Foldable.$dmfoldl_closure:
         const Data.Foldable.$dmfoldl_info;
         const 0;
 },
 sat_s6Ypi_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6ZGu: // global
           _s6Yph::P64 = R3;
           R3 = R2;
           R2 = _s6Yph::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Ypi_info" {
     sat_s6Ypi_info:
         const sat_s6Ypi_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$dmfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6ZGx: // global
           _s6Ypf::P64 = R5;
           _s6Ype::P64 = R4;
           _s6Ypd::P64 = R3;
           _s6Ypc::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6ZGy; else goto c6ZGz;
       c6ZGz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6ZGB; else goto c6ZGA;
       c6ZGB: // global
           HpAlloc = 16;
           goto c6ZGy;
       c6ZGy: // global
           R5 = _s6Ypf::P64;
           R4 = _s6Ype::P64;
           R3 = _s6Ypd::P64;
           R2 = _s6Ypc::P64;
           R1 = Data.Foldable.$dmfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZGA: // global
           I64[Hp - 8] = sat_s6Ypi_info;
           P64[Hp] = _s6Ypd::P64;
           R2 = _s6Ypc::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = _s6Ypf::P64;
           P64[Sp - 8] = _s6Ype::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmfoldl_info" {
     Data.Foldable.$dmfoldl_info:
         const Data.Foldable.$dmfoldl_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S6Z86_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.049174077 UTC

[section ""data" . Data.Foldable.$dmfoldr'_closure" {
     Data.Foldable.$dmfoldr'_closure:
         const Data.Foldable.$dmfoldr'_info;
 },
 sat_s6Ypr_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6ZGZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZH0; else goto c6ZH1;
       c6ZH0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZH1: // global
           I64[Sp - 16] = block_c6ZGX_info;
           _s6Ypo::P64 = R3;
           R3 = R4;
           _s6Ypn::P64 = R2;
           R2 = _s6Ypo::P64;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6Ypn::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Ypr_info" {
     sat_s6Ypr_info:
         const sat_s6Ypr_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c6ZGX() //  [R1]
         { []
         }
     {offset
       c6ZGX: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZGX_info" {
     block_c6ZGX_info:
         const _c6ZGX;
         const 1;
         const 30;
 },
 Data.Foldable.$dmfoldr'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6ZH3: // global
           _s6Ypm::P64 = R5;
           _s6Ypl::P64 = R4;
           _s6Ypk::P64 = R3;
           _s6Ypj::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6ZH4; else goto c6ZH5;
       c6ZH5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6ZH7; else goto c6ZH6;
       c6ZH7: // global
           HpAlloc = 16;
           goto c6ZH4;
       c6ZH4: // global
           R5 = _s6Ypm::P64;
           R4 = _s6Ypl::P64;
           R3 = _s6Ypk::P64;
           R2 = _s6Ypj::P64;
           R1 = Data.Foldable.$dmfoldr'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZH6: // global
           I64[Hp - 8] = sat_s6Ypr_info;
           P64[Hp] = _s6Ypk::P64;
           R2 = _s6Ypj::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 5;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = _s6Ypm::P64;
           P64[Sp - 8] = _s6Ypl::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldl_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmfoldr'_info" {
     Data.Foldable.$dmfoldr'_info:
         const Data.Foldable.$dmfoldr'_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.05715645 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cfoldr'_closure" {
     Data.Foldable.$fFoldableU1_$cfoldr'_closure:
         const Data.Foldable.$fFoldableU1_$cfoldr'_info;
 },
 Data.Foldable.$fFoldableU1_$cfoldr'_entry() //  [R3]
         { []
         }
     {offset
       c6ZHu: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cfoldr'_info" {
     Data.Foldable.$fFoldableU1_$cfoldr'_info:
         const Data.Foldable.$fFoldableU1_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.060727079 UTC

[section ""data" . Data.Foldable.$fFoldableK4_closure" {
     Data.Foldable.$fFoldableK4_closure:
         const Data.Foldable.$fFoldableK4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableK4_entry() //  [R1]
         { []
         }
     {offset
       c6ZHH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZHI; else goto c6ZHJ;
       c6ZHI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZHJ: // global
           (_c6ZHE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6ZHE::I64 == 0) goto c6ZHG; else goto c6ZHF;
       c6ZHG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6ZHF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6ZHE::I64;
           R2 = Data.Foldable.$fFoldableK5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK4_info" {
     Data.Foldable.$fFoldableK4_info:
         const Data.Foldable.$fFoldableK4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.064463098 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cmaximum_closure" {
     Data.Foldable.$fFoldableU1_$cmaximum_closure:
         const Data.Foldable.$fFoldableU1_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableU1_$cmaximum_entry() //  []
         { []
         }
     {offset
       c6ZHW: // global
           R2 = Data.Foldable.$fFoldableK4_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cmaximum_info" {
     Data.Foldable.$fFoldableU1_$cmaximum_info:
         const Data.Foldable.$fFoldableU1_$cmaximum_entry;
         const 0;
         const 72057598332895246;
         const 8589934607;
         const S6Z86_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.067938204 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cfoldl'_closure" {
     Data.Foldable.$fFoldableU1_$cfoldl'_closure:
         const Data.Foldable.$fFoldableU1_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableU1_$cfoldl'_entry() //  [R3]
         { []
         }
     {offset
       c6ZI7: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cfoldl'_info" {
     Data.Foldable.$fFoldableU1_$cfoldl'_info:
         const Data.Foldable.$fFoldableU1_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.071541765 UTC

[section ""data" . Data.Foldable.$fFoldableK2_closure" {
     Data.Foldable.$fFoldableK2_closure:
         const Data.Foldable.$fFoldableK2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableK2_entry() //  [R1]
         { []
         }
     {offset
       c6ZIk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZIl; else goto c6ZIm;
       c6ZIl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZIm: // global
           (_c6ZIh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c6ZIh::I64 == 0) goto c6ZIj; else goto c6ZIi;
       c6ZIj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c6ZIi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c6ZIh::I64;
           R2 = Data.Foldable.$fFoldableK3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK2_info" {
     Data.Foldable.$fFoldableK2_info:
         const Data.Foldable.$fFoldableK2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.075394666 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$cminimum_closure" {
     Data.Foldable.$fFoldableU1_$cminimum_closure:
         const Data.Foldable.$fFoldableU1_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableU1_$cminimum_entry() //  []
         { []
         }
     {offset
       c6ZIz: // global
           R2 = Data.Foldable.$fFoldableK2_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$cminimum_info" {
     Data.Foldable.$fFoldableU1_$cminimum_info:
         const Data.Foldable.$fFoldableU1_$cminimum_entry;
         const 0;
         const 144115192370823182;
         const 8589934607;
         const S6Z86_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.078752242 UTC

[section ""data" . Data.Foldable.$fFoldableU1_$ctoList_closure" {
     Data.Foldable.$fFoldableU1_$ctoList_closure:
         const Data.Foldable.$fFoldableU1_$ctoList_info;
 },
 Data.Foldable.$fFoldableU1_$ctoList_entry() //  []
         { []
         }
     {offset
       c6ZIK: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableU1_$ctoList_info" {
     Data.Foldable.$fFoldableU1_$ctoList_info:
         const Data.Foldable.$fFoldableU1_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.081966804 UTC

[section ""data" . Data.Foldable.$fFoldableU1_closure" {
     Data.Foldable.$fFoldableU1_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableU1_$cfold_closure+2;
         const Data.Foldable.$fFoldableU1_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableU1_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableU1_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableU1_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableU1_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableU1_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableU1_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableU1_$ctoList_closure+1;
         const Data.Foldable.$fFoldableU1_$cnull_closure+1;
         const Data.Foldable.$fFoldableU1_$clength_closure+1;
         const Data.Foldable.$fFoldableU1_$celem_closure+3;
         const Data.Foldable.$fFoldableU1_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableU1_$cminimum_closure+2;
         const Data.Foldable.$fFoldableU1_$csum_closure+2;
         const Data.Foldable.$fFoldableU1_$cproduct_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.084109926 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cfoldr'_closure" {
     Data.Foldable.$fFoldableProxy_$cfoldr'_closure:
         const Data.Foldable.$fFoldableProxy_$cfoldr'_info;
 },
 Data.Foldable.$fFoldableProxy_$cfoldr'_entry() //  [R3]
         { []
         }
     {offset
       c6ZIY: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cfoldr'_info" {
     Data.Foldable.$fFoldableProxy_$cfoldr'_info:
         const Data.Foldable.$fFoldableProxy_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.088224882 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cmaximum_closure" {
     Data.Foldable.$fFoldableProxy_$cmaximum_closure:
         const Data.Foldable.$fFoldableProxy_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableProxy_$cmaximum_entry() //  []
         { []
         }
     {offset
       c6ZJ9: // global
           R2 = Data.Foldable.$fFoldableK4_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cmaximum_info" {
     Data.Foldable.$fFoldableProxy_$cmaximum_info:
         const Data.Foldable.$fFoldableProxy_$cmaximum_entry;
         const 0;
         const 72057598332895246;
         const 8589934607;
         const S6Z86_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.091496001 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cfoldl'_closure" {
     Data.Foldable.$fFoldableProxy_$cfoldl'_closure:
         const Data.Foldable.$fFoldableProxy_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableProxy_$cfoldl'_entry() //  [R3]
         { []
         }
     {offset
       c6ZJk: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cfoldl'_info" {
     Data.Foldable.$fFoldableProxy_$cfoldl'_info:
         const Data.Foldable.$fFoldableProxy_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.094726688 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$cminimum_closure" {
     Data.Foldable.$fFoldableProxy_$cminimum_closure:
         const Data.Foldable.$fFoldableProxy_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableProxy_$cminimum_entry() //  []
         { []
         }
     {offset
       c6ZJv: // global
           R2 = Data.Foldable.$fFoldableK2_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$cminimum_info" {
     Data.Foldable.$fFoldableProxy_$cminimum_info:
         const Data.Foldable.$fFoldableProxy_$cminimum_entry;
         const 0;
         const 144115192370823182;
         const 8589934607;
         const S6Z86_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.098393148 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_$ctoList_closure" {
     Data.Foldable.$fFoldableProxy_$ctoList_closure:
         const Data.Foldable.$fFoldableProxy_$ctoList_info;
 },
 Data.Foldable.$fFoldableProxy_$ctoList_entry() //  []
         { []
         }
     {offset
       c6ZJG: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableProxy_$ctoList_info" {
     Data.Foldable.$fFoldableProxy_$ctoList_info:
         const Data.Foldable.$fFoldableProxy_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.101633391 UTC

[section ""data" . Data.Foldable.$fFoldableProxy_closure" {
     Data.Foldable.$fFoldableProxy_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableProxy_$cfold_closure+2;
         const Data.Foldable.$fFoldableProxy_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableProxy_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableProxy_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableProxy_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableProxy_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableProxy_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableProxy_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableProxy_$ctoList_closure+1;
         const Data.Foldable.$fFoldableProxy_$cnull_closure+1;
         const Data.Foldable.$fFoldableProxy_$clength_closure+1;
         const Data.Foldable.$fFoldableProxy_$celem_closure+3;
         const Data.Foldable.$fFoldableProxy_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableProxy_$cminimum_closure+2;
         const Data.Foldable.$fFoldableProxy_$csum_closure+2;
         const Data.Foldable.$fFoldableProxy_$cproduct_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.104047582 UTC

[section ""data" . Data.Foldable.$dmfoldr_closure" {
     Data.Foldable.$dmfoldr_closure:
         const Data.Foldable.$dmfoldr_info;
         const 0;
 },
 Data.Foldable.$dmfoldr_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6ZJU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6ZJV; else goto c6ZJW;
       c6ZJV: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$dmfoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZJW: // global
           R2 = R2;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmfoldr_info" {
     Data.Foldable.$dmfoldr_info:
         const Data.Foldable.$dmfoldr_entry;
         const 0;
         const 141733920782;
         const 17179869208;
         const S6Z86_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.108896114 UTC

[section ""data" . Data.Foldable.$dmfoldMap_closure" {
     Data.Foldable.$dmfoldMap_closure:
         const Data.Foldable.$dmfoldMap_info;
 },
 sat_s6YpY_entry() //  [R1]
         { []
         }
     {offset
       c6ZKc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZKd; else goto c6ZKe;
       c6ZKd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZKe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YpY_info" {
     sat_s6YpY_info:
         const sat_s6YpY_entry;
         const 1;
         const 16;
 },
 sat_s6YpX_entry() //  [R1, R2]
         { []
         }
     {offset
       c6ZKl: // global
           _s6YpV::P64 = R2;
           _s6YpX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZKm; else goto c6ZKn;
       c6ZKn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6ZKp; else goto c6ZKo;
       c6ZKp: // global
           HpAlloc = 32;
           goto c6ZKm;
       c6ZKm: // global
           R2 = _s6YpV::P64;
           R1 = _s6YpX::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ZKo: // global
           _s6YpT::P64 = P64[_s6YpX::P64 + 7];
           _s6YpU::P64 = P64[_s6YpX::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s6YpU::P64;
           P64[Hp] = _s6YpV::P64;
           R2 = _s6YpT::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YpX_info" {
     sat_s6YpX_info:
         const sat_s6YpX_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Foldable.$dmfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZKq: // global
           _s6YpU::P64 = R4;
           _s6YpT::P64 = R3;
           _s6YpS::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZKr; else goto c6ZKs;
       c6ZKs: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6ZKu; else goto c6ZKt;
       c6ZKu: // global
           HpAlloc = 48;
           goto c6ZKr;
       c6ZKr: // global
           R4 = _s6YpU::P64;
           R3 = _s6YpT::P64;
           R2 = _s6YpS::P64;
           R1 = Data.Foldable.$dmfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZKt: // global
           I64[Hp - 40] = sat_s6YpY_info;
           P64[Hp - 24] = _s6YpT::P64;
           I64[Hp - 16] = sat_s6YpX_info;
           P64[Hp - 8] = _s6YpT::P64;
           P64[Hp] = _s6YpU::P64;
           R2 = _s6YpS::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Foldable.foldr_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmfoldMap_info" {
     Data.Foldable.$dmfoldMap_info:
         const Data.Foldable.$dmfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.116727922 UTC

[section ""data" . Data.Foldable.$dmfold_closure" {
     Data.Foldable.$dmfold_closure:
         const Data.Foldable.$dmfold_info;
 },
 Data.Foldable.$dmfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c6ZKV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZKW; else goto c6ZKX;
       c6ZKW: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$dmfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZKX: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = GHC.Base.id_closure+1;
           Sp = Sp - 24;
           call Data.Foldable.foldMap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmfold_info" {
     Data.Foldable.$dmfold_info:
         const Data.Foldable.$dmfold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.120388271 UTC

[section ""data" . Data.Foldable.$fFoldableDual7_closure" {
     Data.Foldable.$fFoldableDual7_closure:
         const Data.Foldable.$fFoldableDual7_info;
 },
 Data.Foldable.$fFoldableDual7_entry() //  [R3]
         { []
         }
     {offset
       c6ZLa: // global
           R2 = R3;
           call GHC.Base.id_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableDual7_info" {
     Data.Foldable.$fFoldableDual7_info:
         const Data.Foldable.$fFoldableDual7_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.124296316 UTC

[section ""data" . Data.Foldable.$fFoldableProduct_closure" {
     Data.Foldable.$fFoldableProduct_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableDual7_closure+2;
         const Data.Foldable.$fFoldableDual6_closure+2;
         const Data.Foldable.$fFoldableProduct_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableProduct_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableDual5_closure+1;
         const Data.Foldable.$fFoldableDual5_closure+1;
         const Data.Foldable.$fFoldableProduct3_closure+2;
         const Data.Foldable.$fFoldableProduct3_closure+2;
         const Data.Foldable.$fFoldableProduct_$ctoList_closure+1;
         const Data.Foldable.$fFoldableProduct_$cnull_closure+1;
         const Data.Foldable.$fFoldableProduct_$clength_closure+1;
         const GHC.Classes.==_closure+1;
         const Data.Foldable.$fFoldableProduct2_closure+2;
         const Data.Foldable.$fFoldableProduct2_closure+2;
         const Data.Foldable.$fFoldableProduct1_closure+2;
         const Data.Foldable.$fFoldableProduct1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.126231272 UTC

[section ""data" . Data.Foldable.$fFoldableSum_closure" {
     Data.Foldable.$fFoldableSum_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableDual7_closure+2;
         const Data.Foldable.$fFoldableDual6_closure+2;
         const Data.Foldable.$fFoldableSum_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableSum_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableDual5_closure+1;
         const Data.Foldable.$fFoldableDual5_closure+1;
         const Data.Foldable.$fFoldableSum3_closure+2;
         const Data.Foldable.$fFoldableSum3_closure+2;
         const Data.Foldable.$fFoldableSum_$ctoList_closure+1;
         const Data.Foldable.$fFoldableSum_$cnull_closure+1;
         const Data.Foldable.$fFoldableSum_$clength_closure+1;
         const GHC.Classes.==_closure+1;
         const Data.Foldable.$fFoldableSum2_closure+2;
         const Data.Foldable.$fFoldableSum2_closure+2;
         const Data.Foldable.$fFoldableSum1_closure+2;
         const Data.Foldable.$fFoldableSum1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.128244404 UTC

[section ""data" . Data.Foldable.$fFoldableDual_closure" {
     Data.Foldable.$fFoldableDual_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableDual7_closure+2;
         const Data.Foldable.$fFoldableDual6_closure+2;
         const Data.Foldable.$fFoldableDual_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableDual_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableDual5_closure+1;
         const Data.Foldable.$fFoldableDual5_closure+1;
         const Data.Foldable.$fFoldableDual4_closure+2;
         const Data.Foldable.$fFoldableDual4_closure+2;
         const Data.Foldable.$fFoldableDual_$ctoList_closure+1;
         const Data.Foldable.$fFoldableDual_$cnull_closure+1;
         const Data.Foldable.$fFoldableDual_$clength_closure+1;
         const GHC.Classes.==_closure+1;
         const Data.Foldable.$fFoldableDual2_closure+2;
         const Data.Foldable.$fFoldableDual2_closure+2;
         const Data.Foldable.$fFoldableDual1_closure+2;
         const Data.Foldable.$fFoldableDual1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.132566436 UTC

[section ""data" . Data.Foldable.$fFoldable[]_$cfoldr'_closure" {
     Data.Foldable.$fFoldable[]_$cfoldr'_closure:
         const Data.Foldable.$fFoldable[]_$cfoldr'_info;
 },
 sat_s6Yqe_entry() //  [R1, R2]
         { []
         }
     {offset
       c6ZLG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZLH; else goto c6ZLI;
       c6ZLH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ZLI: // global
           I64[Sp - 16] = block_c6ZLE_info;
           R3 = R2;
           R2 = P64[R1 + 23];
           _s6Yq7::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s6Yq7::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yqe_info" {
     sat_s6Yqe_info:
         const sat_s6Yqe_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c6ZLE() //  [R1]
         { []
         }
     {offset
       c6ZLE: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZLE_info" {
     block_c6ZLE_info:
         const _c6ZLE;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldable[]_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZLK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6ZLL; else goto c6ZLM;
       c6ZLL: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable[]_$cfoldr'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZLM: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           call _c6ZLr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable[]_$cfoldr'_info" {
     Data.Foldable.$fFoldable[]_$cfoldr'_info:
         const Data.Foldable.$fFoldable[]_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c6ZLr() //  []
         { []
         }
     {offset
       c6ZLr: // global
           I64[Sp - 8] = block_c6ZLt_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u6ZLZ; else goto c6ZLu;
       u6ZLZ: // global
           call _c6ZLt(R1) args: 0, res: 0, upd: 0;
       c6ZLu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c6ZLt() //  [R1]
         { []
         }
     {offset
       c6ZLt: // global
           _s6Yq7::P64 = P64[Sp + 24];
           _s6Yq8::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c6ZLR; else goto c6ZLS;
       c6ZLR: // global
           R2 = _s6Yq8::P64;
           R1 = _s6Yq7::P64;
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c6ZLS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6ZLV; else goto c6ZLU;
       c6ZLV: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6ZLU: // global
           _s6Yqa::P64 = P64[R1 + 6];
           _s6Yqb::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_s6Yqe_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s6Yq7::P64;
           P64[Hp] = _s6Yqa::P64;
           P64[Sp + 16] = _s6Yqb::P64;
           P64[Sp + 24] = Hp - 23;
           P64[Sp + 32] = _s6Yq8::P64;
           Sp = Sp + 8;
           call _c6ZLr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c6ZLt_info" {
     block_c6ZLt_info:
         const _c6ZLt;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.143881517 UTC

[section ""data" . Data.Foldable.$fFoldable[]_$cfoldMap_closure" {
     Data.Foldable.$fFoldable[]_$cfoldMap_closure:
         const Data.Foldable.$fFoldable[]_$cfoldMap_info;
 },
 z_s6Yqi_entry() //  [R1]
         { []
         }
     {offset
       c6ZMB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZMC; else goto c6ZMD;
       c6ZMC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZMD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6Yqi_info" {
     z_s6Yqi_info:
         const z_s6Yqi_entry;
         const 1;
         const 16;
 },
 go_s6Yqj_entry() //  [R1, R2]
         { []
         }
     {offset
       c6ZMQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6ZMR; else goto c6ZMS;
       c6ZMR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ZMS: // global
           I64[Sp - 40] = block_c6ZMJ_info;
           _s6Yqj::P64 = R1;
           _s6Yqf::P64 = P64[R1 + 7];
           _s6Yqg::P64 = P64[R1 + 15];
           _s6Yqi::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _s6Yqf::P64;
           P64[Sp - 24] = _s6Yqg::P64;
           P64[Sp - 16] = _s6Yqi::P64;
           P64[Sp - 8] = _s6Yqj::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6ZN3; else goto c6ZMK;
       u6ZN3: // global
           call _c6ZMJ(R1) args: 0, res: 0, upd: 0;
       c6ZMK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6Yqj_info" {
     go_s6Yqj_info:
         const go_s6Yqj_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c6ZMJ() //  [R1]
         { []
         }
     {offset
       c6ZMJ: // global
           if (R1 & 7 == 1) goto c6ZMN; else goto c6ZMO;
       c6ZMN: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6ZMO: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6ZN0; else goto c6ZMZ;
       c6ZN0: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6ZMZ: // global
           _s6Yqm::P64 = P64[R1 + 6];
           _s6Yqn::P64 = P64[R1 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _s6Yqn::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s6Yqm::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 32] = Hp - 56;
           Sp = Sp + 16;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZMJ_info" {
     block_c6ZMJ_info:
         const _c6ZMJ;
         const 4;
         const 30;
 },
 Data.Foldable.$fFoldable[]_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZN4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6ZN8; else goto c6ZN7;
       c6ZN8: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable[]_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZN7: // global
           I64[Hp - 48] = z_s6Yqi_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = go_s6Yqj_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R2 = R4;
           R1 = Hp - 23;
           call go_s6Yqj_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable[]_$cfoldMap_info" {
     Data.Foldable.$fFoldable[]_$cfoldMap_info:
         const Data.Foldable.$fFoldable[]_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.155249983 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfold1_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfold1_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfold1_info;
 },
 z_s6Yqs_entry() //  [R1]
         { []
         }
     {offset
       c6ZNL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZNM; else goto c6ZNN;
       c6ZNM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZNN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6Yqs_info" {
     z_s6Yqs_info:
         const z_s6Yqs_entry;
         const 1;
         const 16;
 },
 go_s6Yqt_entry() //  [R1, R2]
         { []
         }
     {offset
       c6ZO0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6ZO1; else goto c6ZO2;
       c6ZO1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ZO2: // global
           I64[Sp - 32] = block_c6ZNT_info;
           _s6Yqt::P64 = R1;
           _s6Yqq::P64 = P64[R1 + 7];
           _s6Yqs::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s6Yqq::P64;
           P64[Sp - 16] = _s6Yqs::P64;
           P64[Sp - 8] = _s6Yqt::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6ZOc; else goto c6ZNU;
       u6ZOc: // global
           call _c6ZNT(R1) args: 0, res: 0, upd: 0;
       c6ZNU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6Yqt_info" {
     go_s6Yqt_info:
         const go_s6Yqt_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c6ZNT() //  [R1]
         { []
         }
     {offset
       c6ZNT: // global
           if (R1 & 7 == 1) goto c6ZNX; else goto c6ZNY;
       c6ZNX: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6ZNY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6ZOa; else goto c6ZO9;
       c6ZOa: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6ZO9: // global
           _s6Yqw::P64 = P64[R1 + 6];
           _s6Yqx::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s6Yqx::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6Yqw::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZNT_info" {
     block_c6ZNT_info:
         const _c6ZNT;
         const 3;
         const 30;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfold1_entry() //  [R2, R3]
         { []
         }
     {offset
       c6ZOd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6ZOh; else goto c6ZOg;
       c6ZOh: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfold1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZOg: // global
           I64[Hp - 40] = z_s6Yqs_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_s6Yqt_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R2 = R3;
           R1 = Hp - 15;
           call go_s6Yqt_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfold1_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfold1_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfold1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.164887946 UTC

[section ""data" . Data.Foldable.$fFoldable[]_closure" {
     Data.Foldable.$fFoldable[]_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableNonEmpty_$cfold1_closure+2;
         const Data.Foldable.$fFoldable[]_$cfoldMap_closure+3;
         const GHC.Base.foldr_closure+3;
         const Data.Foldable.$fFoldable[]_$cfoldr'_closure+3;
         const GHC.List.foldl_closure+3;
         const GHC.List.foldl'_closure+3;
         const GHC.List.foldr1_closure+2;
         const GHC.List.foldl1_closure+2;
         const GHC.Base.id_closure+1;
         const GHC.List.null_closure+1;
         const GHC.List.length_closure+1;
         const GHC.List.elem_closure+3;
         const GHC.List.maximum_closure+2;
         const GHC.List.minimum_closure+2;
         const GHC.List.sum_closure+1;
         const GHC.List.product_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.168167283 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfold_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfold_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfold_info;
 },
 sat_s6YqI_entry() //  [R1]
         { []
         }
     {offset
       c6ZOV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6ZOW; else goto c6ZOX;
       c6ZOW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZOX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c6ZOS_info;
           _s6Yqz::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s6Yqz::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u6ZP1; else goto c6ZOT;
       u6ZP1: // global
           call _c6ZOS(R1) args: 0, res: 0, upd: 0;
       c6ZOT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YqI_info" {
     sat_s6YqI_info:
         const sat_s6YqI_entry;
         const 2;
         const 18;
 },
 _c6ZOS() //  [R1]
         { []
         }
     {offset
       c6ZOS: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Foldable.$fFoldableNonEmpty_$cfold1_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6ZOS_info" {
     block_c6ZOS_info:
         const _c6ZOS;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c6ZP3: // global
           _s6YqA::P64 = R3;
           _s6Yqz::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZP4; else goto c6ZP5;
       c6ZP5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6ZP7; else goto c6ZP6;
       c6ZP7: // global
           HpAlloc = 56;
           goto c6ZP4;
       c6ZP4: // global
           R3 = _s6YqA::P64;
           R2 = _s6Yqz::P64;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZP6: // global
           I64[Hp - 48] = sat_s6YqI_info;
           P64[Hp - 32] = _s6Yqz::P64;
           P64[Hp - 24] = _s6YqA::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s6YqA::P64;
           R2 = _s6Yqz::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfold_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfold_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.178634115 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfoldMap_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldMap_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldMap_info;
 },
 z_s6YqU_entry() //  [R1]
         { []
         }
     {offset
       c6ZPJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZPK; else goto c6ZPL;
       c6ZPK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZPL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6YqU_info" {
     z_s6YqU_info:
         const z_s6YqU_entry;
         const 1;
         const 16;
 },
 go_s6YqV_entry() //  [R1, R2]
         { []
         }
     {offset
       c6ZPY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6ZPZ; else goto c6ZQ0;
       c6ZPZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ZQ0: // global
           I64[Sp - 40] = block_c6ZPR_info;
           _s6YqV::P64 = R1;
           _s6YqJ::P64 = P64[R1 + 7];
           _s6YqK::P64 = P64[R1 + 15];
           _s6YqU::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _s6YqJ::P64;
           P64[Sp - 24] = _s6YqK::P64;
           P64[Sp - 16] = _s6YqU::P64;
           P64[Sp - 8] = _s6YqV::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6ZQb; else goto c6ZPS;
       u6ZQb: // global
           call _c6ZPR(R1) args: 0, res: 0, upd: 0;
       c6ZPS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6YqV_info" {
     go_s6YqV_info:
         const go_s6YqV_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c6ZPR() //  [R1]
         { []
         }
     {offset
       c6ZPR: // global
           if (R1 & 7 == 1) goto c6ZPV; else goto c6ZPW;
       c6ZPV: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c6ZPW: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c6ZQ8; else goto c6ZQ7;
       c6ZQ8: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c6ZQ7: // global
           _s6YqY::P64 = P64[R1 + 6];
           _s6YqZ::P64 = P64[R1 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _s6YqZ::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s6YqY::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 32] = Hp - 56;
           Sp = Sp + 16;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZPR_info" {
     block_c6ZPR_info:
         const _c6ZPR;
         const 4;
         const 30;
 },
 sat_s6Yr2_entry() //  [R1]
         { []
         }
     {offset
       c6ZQc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c6ZQd; else goto c6ZQe;
       c6ZQd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZQe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c6ZPA_info;
           _s6YqJ::P64 = P64[R1 + 16];
           _s6YqK::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6YqJ::P64;
           P64[Sp - 24] = _s6YqK::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u6ZQi; else goto c6ZPB;
       u6ZQi: // global
           call _c6ZPA(R1) args: 0, res: 0, upd: 0;
       c6ZPB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Yr2_info" {
     sat_s6Yr2_info:
         const sat_s6Yr2_entry;
         const 3;
         const 15;
 },
 _c6ZPA() //  [R1]
         { []
         }
     {offset
       c6ZPA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c6ZQh; else goto c6ZQg;
       c6ZQh: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c6ZQg: // global
           _s6YqT::P64 = P64[R1 + 15];
           I64[Hp - 48] = z_s6YqU_info;
           _s6YqJ::P64 = P64[Sp + 8];
           P64[Hp - 32] = _s6YqJ::P64;
           I64[Hp - 24] = go_s6YqV_info;
           P64[Hp - 16] = _s6YqJ::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 48;
           R2 = _s6YqT::P64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call go_s6YqV_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c6ZPA_info" {
     block_c6ZPA_info:
         const _c6ZPA;
         const 2;
         const 30;
 },
 sat_s6YqQ_entry() //  [R1]
         { []
         }
     {offset
       c6ZQo: // global
           _s6YqQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZQp; else goto c6ZQq;
       c6ZQq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c6ZQs; else goto c6ZQr;
       c6ZQs: // global
           HpAlloc = 24;
           goto c6ZQp;
       c6ZQp: // global
           R1 = _s6YqQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZQr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6YqQ::P64;
           _s6YqK::P64 = P64[_s6YqQ::P64 + 16];
           _s6YqL::P64 = P64[_s6YqQ::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s6YqL::P64;
           R2 = Hp - 16;
           R1 = _s6YqK::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YqQ_info" {
     sat_s6YqQ_info:
         const sat_s6YqQ_entry;
         const 2;
         const 18;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZQt: // global
           _s6YqL::P64 = R4;
           _s6YqK::P64 = R3;
           _s6YqJ::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZQu; else goto c6ZQv;
       c6ZQv: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6ZQx; else goto c6ZQw;
       c6ZQx: // global
           HpAlloc = 72;
           goto c6ZQu;
       c6ZQu: // global
           R4 = _s6YqL::P64;
           R3 = _s6YqK::P64;
           R2 = _s6YqJ::P64;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZQw: // global
           I64[Hp - 64] = sat_s6Yr2_info;
           P64[Hp - 48] = _s6YqJ::P64;
           P64[Hp - 40] = _s6YqK::P64;
           P64[Hp - 32] = _s6YqL::P64;
           I64[Hp - 24] = sat_s6YqQ_info;
           P64[Hp - 8] = _s6YqK::P64;
           P64[Hp] = _s6YqL::P64;
           R2 = _s6YqJ::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfoldMap_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldMap_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.195061023 UTC

[section ""data" . Data.Foldable.foldrM_closure" {
     Data.Foldable.foldrM_closure:
         const Data.Foldable.foldrM_info;
 },
 sat_s6Yrd_entry() //  [R1]
         { []
         }
     {offset
       c6ZRx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZRy; else goto c6ZRz;
       c6ZRy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZRz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Yrd_info" {
     sat_s6Yrd_info:
         const sat_s6Yrd_entry;
         const 1;
         const 16;
 },
 sat_s6Yrc_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6ZRG: // global
           _s6Yra::P64 = R4;
           _s6Yr9::P64 = R3;
           _s6Yr8::P64 = R2;
           _s6Yrc::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZRH; else goto c6ZRI;
       c6ZRI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6ZRK; else goto c6ZRJ;
       c6ZRK: // global
           HpAlloc = 40;
           goto c6ZRH;
       c6ZRH: // global
           R4 = _s6Yra::P64;
           R3 = _s6Yr9::P64;
           R2 = _s6Yr8::P64;
           R1 = _s6Yrc::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZRJ: // global
           _s6Yr4::P64 = P64[_s6Yrc::P64 + 5];
           _s6Yr5::P64 = P64[_s6Yrc::P64 + 13];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s6Yr5::P64;
           P64[Hp - 8] = _s6Yr9::P64;
           P64[Hp] = _s6Yra::P64;
           R2 = _s6Yr4::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _s6Yr8::P64;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yrc_info" {
     sat_s6Yrc_info:
         const sat_s6Yrc_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 Data.Foldable.foldrM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c6ZRL: // global
           _s6Yr7::P64 = R6;
           _s6Yr6::P64 = R5;
           _s6Yr5::P64 = R4;
           _s6Yr4::P64 = R3;
           _s6Yr3::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6ZRM; else goto c6ZRN;
       c6ZRN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6ZRP; else goto c6ZRO;
       c6ZRP: // global
           HpAlloc = 48;
           goto c6ZRM;
       c6ZRM: // global
           R6 = _s6Yr7::P64;
           R5 = _s6Yr6::P64;
           R4 = _s6Yr5::P64;
           R3 = _s6Yr4::P64;
           R2 = _s6Yr3::P64;
           R1 = Data.Foldable.foldrM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZRO: // global
           I64[Hp - 40] = sat_s6Yrd_info;
           P64[Hp - 24] = _s6Yr4::P64;
           I64[Hp - 16] = sat_s6Yrc_info;
           P64[Hp - 8] = _s6Yr4::P64;
           P64[Hp] = _s6Yr5::P64;
           R2 = _s6Yr3::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 13;
           P64[Sp - 24] = Hp - 40;
           P64[Sp - 16] = _s6Yr7::P64;
           P64[Sp - 8] = _s6Yr6::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldl_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldrM_info" {
     Data.Foldable.foldrM_info:
         const Data.Foldable.foldrM_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.204334666 UTC

[section ""data" . Data.Foldable.foldlM_closure" {
     Data.Foldable.foldlM_closure:
         const Data.Foldable.foldlM_info;
 },
 sat_s6Yro_entry() //  [R1]
         { []
         }
     {offset
       c6ZSk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZSl; else goto c6ZSm;
       c6ZSl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZSm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Yro_info" {
     sat_s6Yro_info:
         const sat_s6Yro_entry;
         const 1;
         const 16;
 },
 sat_s6Yrn_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c6ZSt: // global
           _s6Yrl::P64 = R4;
           _s6Yrk::P64 = R3;
           _s6Yrj::P64 = R2;
           _s6Yrn::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZSu; else goto c6ZSv;
       c6ZSv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c6ZSx; else goto c6ZSw;
       c6ZSx: // global
           HpAlloc = 40;
           goto c6ZSu;
       c6ZSu: // global
           R4 = _s6Yrl::P64;
           R3 = _s6Yrk::P64;
           R2 = _s6Yrj::P64;
           R1 = _s6Yrn::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZSw: // global
           _s6Yrf::P64 = P64[_s6Yrn::P64 + 5];
           _s6Yrg::P64 = P64[_s6Yrn::P64 + 13];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s6Yrg::P64;
           P64[Hp - 8] = _s6Yrl::P64;
           P64[Hp] = _s6Yrj::P64;
           R2 = _s6Yrf::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _s6Yrk::P64;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yrn_info" {
     sat_s6Yrn_info:
         const sat_s6Yrn_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 Data.Foldable.foldlM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c6ZSy: // global
           _s6Yri::P64 = R6;
           _s6Yrh::P64 = R5;
           _s6Yrg::P64 = R4;
           _s6Yrf::P64 = R3;
           _s6Yre::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c6ZSz; else goto c6ZSA;
       c6ZSA: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6ZSC; else goto c6ZSB;
       c6ZSC: // global
           HpAlloc = 48;
           goto c6ZSz;
       c6ZSz: // global
           R6 = _s6Yri::P64;
           R5 = _s6Yrh::P64;
           R4 = _s6Yrg::P64;
           R3 = _s6Yrf::P64;
           R2 = _s6Yre::P64;
           R1 = Data.Foldable.foldlM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZSB: // global
           I64[Hp - 40] = sat_s6Yro_info;
           P64[Hp - 24] = _s6Yrf::P64;
           I64[Hp - 16] = sat_s6Yrn_info;
           P64[Hp - 8] = _s6Yrf::P64;
           P64[Hp] = _s6Yrg::P64;
           R2 = _s6Yre::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 13;
           P64[Sp - 24] = Hp - 40;
           P64[Sp - 16] = _s6Yri::P64;
           P64[Sp - 8] = _s6Yrh::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.foldlM_info" {
     Data.Foldable.foldlM_info:
         const Data.Foldable.foldlM_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.213639515 UTC

[section ""data" . Data.Foldable.traverse__closure" {
     Data.Foldable.traverse__closure:
         const Data.Foldable.traverse__info;
 },
 sat_s6Yrv_entry() //  [R1]
         { []
         }
     {offset
       c6ZT7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6ZT8; else goto c6ZT9;
       c6ZT8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZT9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Tuple.()_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Yrv_info" {
     sat_s6Yrv_info:
         const sat_s6Yrv_entry;
         const 1;
         const 16;
 },
 sat_s6Yru_entry() //  [R1, R2]
         { []
         }
     {offset
       c6ZTg: // global
           _s6Yrs::P64 = R2;
           _s6Yru::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZTh; else goto c6ZTi;
       c6ZTi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6ZTk; else goto c6ZTj;
       c6ZTk: // global
           HpAlloc = 32;
           goto c6ZTh;
       c6ZTh: // global
           R2 = _s6Yrs::P64;
           R1 = _s6Yru::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ZTj: // global
           _s6Yrq::P64 = P64[_s6Yru::P64 + 7];
           _s6Yrr::P64 = P64[_s6Yru::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s6Yrr::P64;
           P64[Hp] = _s6Yrs::P64;
           R2 = _s6Yrq::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.*>_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yru_info" {
     sat_s6Yru_info:
         const sat_s6Yru_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Foldable.traverse__entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZTl: // global
           _s6Yrr::P64 = R4;
           _s6Yrq::P64 = R3;
           _s6Yrp::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZTm; else goto c6ZTn;
       c6ZTn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6ZTp; else goto c6ZTo;
       c6ZTp: // global
           HpAlloc = 48;
           goto c6ZTm;
       c6ZTm: // global
           R4 = _s6Yrr::P64;
           R3 = _s6Yrq::P64;
           R2 = _s6Yrp::P64;
           R1 = Data.Foldable.traverse__closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZTo: // global
           I64[Hp - 40] = sat_s6Yrv_info;
           P64[Hp - 24] = _s6Yrq::P64;
           I64[Hp - 16] = sat_s6Yru_info;
           P64[Hp - 8] = _s6Yrq::P64;
           P64[Hp] = _s6Yrr::P64;
           R2 = _s6Yrp::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Foldable.foldr_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.traverse__info" {
     Data.Foldable.traverse__info:
         const Data.Foldable.traverse__entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.221415924 UTC

[section ""data" . Data.Foldable.for__closure" {
     Data.Foldable.for__closure:
         const Data.Foldable.for__info;
 },
 Data.Foldable.for__entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6ZTT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZTU; else goto c6ZTV;
       c6ZTU: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.for__closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZTV: // global
           _s6Yry::P64 = R4;
           R4 = R5;
           R3 = R3;
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s6Yry::P64;
           Sp = Sp - 16;
           call Data.Foldable.traverse__entry(R4,
                                              R3,
                                              R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.for__info" {
     Data.Foldable.for__info:
         const Data.Foldable.for__entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.226309813 UTC

[section ""data" . Data.Foldable.mapM__closure" {
     Data.Foldable.mapM__closure:
         const Data.Foldable.mapM__info;
 },
 sat_s6YrG_entry() //  [R1]
         { []
         }
     {offset
       c6ZUa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6ZUb; else goto c6ZUc;
       c6ZUb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZUc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Tuple.()_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YrG_info" {
     sat_s6YrG_info:
         const sat_s6YrG_entry;
         const 1;
         const 16;
 },
 sat_s6YrF_entry() //  [R1, R2]
         { []
         }
     {offset
       c6ZUj: // global
           _s6YrD::P64 = R2;
           _s6YrF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZUk; else goto c6ZUl;
       c6ZUl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c6ZUn; else goto c6ZUm;
       c6ZUn: // global
           HpAlloc = 32;
           goto c6ZUk;
       c6ZUk: // global
           R2 = _s6YrD::P64;
           R1 = _s6YrF::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ZUm: // global
           _s6YrB::P64 = P64[_s6YrF::P64 + 7];
           _s6YrC::P64 = P64[_s6YrF::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s6YrC::P64;
           P64[Hp] = _s6YrD::P64;
           R2 = _s6YrB::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.>>_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YrF_info" {
     sat_s6YrF_info:
         const sat_s6YrF_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Foldable.mapM__entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZUo: // global
           _s6YrC::P64 = R4;
           _s6YrB::P64 = R3;
           _s6YrA::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZUp; else goto c6ZUq;
       c6ZUq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6ZUs; else goto c6ZUr;
       c6ZUs: // global
           HpAlloc = 48;
           goto c6ZUp;
       c6ZUp: // global
           R4 = _s6YrC::P64;
           R3 = _s6YrB::P64;
           R2 = _s6YrA::P64;
           R1 = Data.Foldable.mapM__closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZUr: // global
           I64[Hp - 40] = sat_s6YrG_info;
           P64[Hp - 24] = _s6YrB::P64;
           I64[Hp - 16] = sat_s6YrF_info;
           P64[Hp - 8] = _s6YrB::P64;
           P64[Hp] = _s6YrC::P64;
           R2 = _s6YrA::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Foldable.foldr_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.mapM__info" {
     Data.Foldable.mapM__info:
         const Data.Foldable.mapM__entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.234251972 UTC

[section ""data" . Data.Foldable.forM__closure" {
     Data.Foldable.forM__closure:
         const Data.Foldable.forM__info;
 },
 Data.Foldable.forM__entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c6ZUW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZUX; else goto c6ZUY;
       c6ZUX: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.forM__closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZUY: // global
           _s6YrJ::P64 = R4;
           R4 = R5;
           R3 = R3;
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s6YrJ::P64;
           Sp = Sp - 16;
           call Data.Foldable.mapM__entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.forM__info" {
     Data.Foldable.forM__info:
         const Data.Foldable.forM__entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.239563176 UTC

[section ""data" . Data.Foldable.sequenceA__closure" {
     Data.Foldable.sequenceA__closure:
         const Data.Foldable.sequenceA__info;
 },
 sat_s6YrO_entry() //  [R1]
         { []
         }
     {offset
       c6ZVd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6ZVe; else goto c6ZVf;
       c6ZVe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZVf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Tuple.()_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YrO_info" {
     sat_s6YrO_info:
         const sat_s6YrO_entry;
         const 1;
         const 16;
 },
 sat_s6YrN_entry() //  [R1]
         { []
         }
     {offset
       c6ZVk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZVl; else goto c6ZVm;
       c6ZVl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZVm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.*>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YrN_info" {
     sat_s6YrN_info:
         const sat_s6YrN_entry;
         const 1;
         const 16;
 },
 Data.Foldable.sequenceA__entry() //  [R2, R3]
         { []
         }
     {offset
       c6ZVn: // global
           _s6YrM::P64 = R3;
           _s6YrL::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZVo; else goto c6ZVp;
       c6ZVp: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6ZVr; else goto c6ZVq;
       c6ZVr: // global
           HpAlloc = 48;
           goto c6ZVo;
       c6ZVo: // global
           R3 = _s6YrM::P64;
           R2 = _s6YrL::P64;
           R1 = Data.Foldable.sequenceA__closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZVq: // global
           I64[Hp - 40] = sat_s6YrO_info;
           P64[Hp - 24] = _s6YrM::P64;
           I64[Hp - 16] = sat_s6YrN_info;
           P64[Hp] = _s6YrM::P64;
           R2 = _s6YrL::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Foldable.foldr_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.sequenceA__info" {
     Data.Foldable.sequenceA__info:
         const Data.Foldable.sequenceA__entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.247460111 UTC

[section ""data" . Data.Foldable.sequence__closure" {
     Data.Foldable.sequence__closure:
         const Data.Foldable.sequence__info;
 },
 sat_s6YrS_entry() //  [R1]
         { []
         }
     {offset
       c6ZVX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6ZVY; else goto c6ZVZ;
       c6ZVY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZVZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Tuple.()_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YrS_info" {
     sat_s6YrS_info:
         const sat_s6YrS_entry;
         const 1;
         const 16;
 },
 sat_s6YrR_entry() //  [R1]
         { []
         }
     {offset
       c6ZW4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZW5; else goto c6ZW6;
       c6ZW5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZW6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.>>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YrR_info" {
     sat_s6YrR_info:
         const sat_s6YrR_entry;
         const 1;
         const 16;
 },
 Data.Foldable.sequence__entry() //  [R2, R3]
         { []
         }
     {offset
       c6ZW7: // global
           _s6YrQ::P64 = R3;
           _s6YrP::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZW8; else goto c6ZW9;
       c6ZW9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6ZWb; else goto c6ZWa;
       c6ZWb: // global
           HpAlloc = 48;
           goto c6ZW8;
       c6ZW8: // global
           R3 = _s6YrQ::P64;
           R2 = _s6YrP::P64;
           R1 = Data.Foldable.sequence__closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZWa: // global
           I64[Hp - 40] = sat_s6YrS_info;
           P64[Hp - 24] = _s6YrQ::P64;
           I64[Hp - 16] = sat_s6YrR_info;
           P64[Hp] = _s6YrQ::P64;
           R2 = _s6YrP::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Foldable.foldr_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.sequence__info" {
     Data.Foldable.sequence__info:
         const Data.Foldable.sequence__entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.255557979 UTC

[section ""data" . Data.Foldable.asum_closure" {
     Data.Foldable.asum_closure:
         const Data.Foldable.asum_info;
 },
 sat_s6YrW_entry() //  [R1]
         { []
         }
     {offset
       c6ZWH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZWI; else goto c6ZWJ;
       c6ZWI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZWJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YrW_info" {
     sat_s6YrW_info:
         const sat_s6YrW_entry;
         const 1;
         const 16;
 },
 sat_s6YrV_entry() //  [R1]
         { []
         }
     {offset
       c6ZWO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZWP; else goto c6ZWQ;
       c6ZWP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZWQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<|>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YrV_info" {
     sat_s6YrV_info:
         const sat_s6YrV_entry;
         const 1;
         const 16;
 },
 Data.Foldable.asum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6ZWR: // global
           _s6YrU::P64 = R3;
           _s6YrT::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZWS; else goto c6ZWT;
       c6ZWT: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c6ZWV; else goto c6ZWU;
       c6ZWV: // global
           HpAlloc = 48;
           goto c6ZWS;
       c6ZWS: // global
           R3 = _s6YrU::P64;
           R2 = _s6YrT::P64;
           R1 = Data.Foldable.asum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZWU: // global
           I64[Hp - 40] = sat_s6YrW_info;
           P64[Hp - 24] = _s6YrU::P64;
           I64[Hp - 16] = sat_s6YrV_info;
           P64[Hp] = _s6YrU::P64;
           R2 = _s6YrT::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Foldable.foldr_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.asum_info" {
     Data.Foldable.asum_info:
         const Data.Foldable.asum_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.26385789 UTC

[section ""data" . Data.Foldable.msum_closure" {
     Data.Foldable.msum_closure:
         const Data.Foldable.msum_info;
 },
 $dAlternative_s6YrZ_entry() //  [R1]
         { []
         }
     {offset
       c6ZXo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZXp; else goto c6ZXq;
       c6ZXp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZXq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dAlternative_s6YrZ_info" {
     $dAlternative_s6YrZ_info:
         const $dAlternative_s6YrZ_entry;
         const 1;
         const 16;
 },
 sat_s6Ys1_entry() //  [R1]
         { []
         }
     {offset
       c6ZXv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZXw; else goto c6ZXx;
       c6ZXw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZXx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Ys1_info" {
     sat_s6Ys1_info:
         const sat_s6Ys1_entry;
         const 1;
         const 16;
 },
 sat_s6Ys0_entry() //  [R1]
         { []
         }
     {offset
       c6ZXC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZXD; else goto c6ZXE;
       c6ZXD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c6ZXE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<|>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Ys0_info" {
     sat_s6Ys0_info:
         const sat_s6Ys0_entry;
         const 1;
         const 16;
 },
 Data.Foldable.msum_entry() //  [R2, R3]
         { []
         }
     {offset
       c6ZXF: // global
           _s6YrY::P64 = R3;
           _s6YrX::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZXG; else goto c6ZXH;
       c6ZXH: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c6ZXJ; else goto c6ZXI;
       c6ZXJ: // global
           HpAlloc = 72;
           goto c6ZXG;
       c6ZXG: // global
           R3 = _s6YrY::P64;
           R2 = _s6YrX::P64;
           R1 = Data.Foldable.msum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZXI: // global
           I64[Hp - 64] = $dAlternative_s6YrZ_info;
           P64[Hp - 48] = _s6YrY::P64;
           I64[Hp - 40] = sat_s6Ys1_info;
           _c6ZXk::P64 = Hp - 64;
           P64[Hp - 24] = _c6ZXk::P64;
           I64[Hp - 16] = sat_s6Ys0_info;
           P64[Hp] = _c6ZXk::P64;
           R2 = _s6YrX::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Foldable.foldr_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.msum_info" {
     Data.Foldable.msum_info:
         const Data.Foldable.msum_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.273827122 UTC

[section ""data" . Data.Foldable.concat_closure" {
     Data.Foldable.concat_closure:
         const Data.Foldable.concat_info;
 },
 Data.Foldable.concat_entry() //  [R2, R3]
         { []
         }
     {offset
       c6ZYe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c6ZYf; else goto c6ZYg;
       c6ZYf: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.concat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZYg: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Base.++_closure+2;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.concat_info" {
     Data.Foldable.concat_info:
         const Data.Foldable.concat_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.278433906 UTC

[section ""data" . Data.Foldable.concatMap_closure" {
     Data.Foldable.concatMap_closure:
         const Data.Foldable.concatMap_info;
 },
 sat_s6Ysa_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c6ZYC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c6ZYD; else goto c6ZYE;
       c6ZYD: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZYE: // global
           I64[Sp - 16] = block_c6ZYA_info;
           R2 = R2;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Ysa_info" {
     sat_s6Ysa_info:
         const sat_s6Ysa_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c6ZYA() //  [R1]
         { []
         }
     {offset
       c6ZYA: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c6ZYA_info" {
     block_c6ZYA_info:
         const _c6ZYA;
         const 1;
         const 30;
 },
 Data.Foldable.concatMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c6ZYI: // global
           _s6Ys6::P64 = R4;
           _s6Ys5::P64 = R3;
           _s6Ys4::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c6ZYJ; else goto c6ZYK;
       c6ZYK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c6ZYM; else goto c6ZYL;
       c6ZYM: // global
           HpAlloc = 16;
           goto c6ZYJ;
       c6ZYJ: // global
           R4 = _s6Ys6::P64;
           R3 = _s6Ys5::P64;
           R2 = _s6Ys4::P64;
           R1 = Data.Foldable.concatMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c6ZYL: // global
           I64[Hp - 8] = sat_s6Ysa_info;
           P64[Hp] = _s6Ys5::P64;
           R2 = _s6Ys4::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           P64[Sp - 8] = _s6Ys6::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.concatMap_info" {
     Data.Foldable.concatMap_info:
         const Data.Foldable.concatMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.285146121 UTC

[section ""data" . Data.Foldable.and2_closure" {
     Data.Foldable.and2_closure:
         const Data.Foldable.and2_info;
 },
 Data.Foldable.and2_entry() //  [R2]
         { []
         }
     {offset
       c6ZZ9: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.and2_info" {
     Data.Foldable.and2_info:
         const Data.Foldable.and2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.288588701 UTC

[section ""data" . Data.Foldable.and1_closure" {
     Data.Foldable.and1_closure:
         const Data.Foldable.and1_info;
         const 0;
 },
 Data.Foldable.and1_entry() //  [R2]
         { []
         }
     {offset
       c6ZZm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZZn; else goto c6ZZo;
       c6ZZn: // global
           R2 = R2;
           R1 = Data.Foldable.and1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ZZo: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Semigroup.Internal.$fMonoidAll_closure;
           P64[Sp - 8] = Data.Foldable.and2_closure+1;
           Sp = Sp - 24;
           call Data.Foldable.foldMap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.and1_info" {
     Data.Foldable.and1_info:
         const Data.Foldable.and1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Z86_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.292685695 UTC

[section ""data" . Data.Foldable.and_closure" {
     Data.Foldable.and_closure:
         const Data.Foldable.and_info;
         const 0;
 },
 Data.Foldable.and_entry() //  [R2]
         { []
         }
     {offset
       c6ZZB: // global
           R2 = R2;
           call Data.Foldable.and1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.and_info" {
     Data.Foldable.and_info:
         const Data.Foldable.and_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Z86_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.296063986 UTC

[section ""data" . Data.Foldable.or1_closure" {
     Data.Foldable.or1_closure:
         const Data.Foldable.or1_info;
         const 0;
 },
 Data.Foldable.or1_entry() //  [R2]
         { []
         }
     {offset
       c6ZZM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c6ZZN; else goto c6ZZO;
       c6ZZN: // global
           R2 = R2;
           R1 = Data.Foldable.or1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c6ZZO: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 8] = Data.Foldable.and2_closure+1;
           Sp = Sp - 24;
           call Data.Foldable.foldMap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.or1_info" {
     Data.Foldable.or1_info:
         const Data.Foldable.or1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Z86_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.299793954 UTC

[section ""data" . Data.Foldable.or_closure" {
     Data.Foldable.or_closure:
         const Data.Foldable.or_info;
         const 0;
 },
 Data.Foldable.or_entry() //  [R2]
         { []
         }
     {offset
       c7001: // global
           R2 = R2;
           call Data.Foldable.or1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.or_info" {
     Data.Foldable.or_info:
         const Data.Foldable.or_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Z86_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.303303784 UTC

[section ""data" . Data.Foldable.any1_closure" {
     Data.Foldable.any1_closure:
         const Data.Foldable.any1_info;
         const 0;
 },
 Data.Foldable.any1_entry() //  [R2, R3]
         { []
         }
     {offset
       c700c: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c700d; else goto c700e;
       c700d: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.any1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c700e: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call Data.Foldable.foldMap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.any1_info" {
     Data.Foldable.any1_info:
         const Data.Foldable.any1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S6Z86_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.307999231 UTC

[section ""data" . Data.Foldable.any_closure" {
     Data.Foldable.any_closure:
         const Data.Foldable.any_info;
         const 0;
 },
 Data.Foldable.any_entry() //  [R2, R3]
         { []
         }
     {offset
       c700q: // global
           R3 = R3;
           R2 = R2;
           call Data.Foldable.any1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.any_info" {
     Data.Foldable.any_info:
         const Data.Foldable.any_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.311905427 UTC

[section ""data" . $dmelem1_r6OSW_closure" {
     $dmelem1_r6OSW_closure:
         const $dmelem1_r6OSW_info;
         const 0;
 },
 sat_s6Ysj_entry() //  [R1]
         { []
         }
     {offset
       c700F: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c700G; else goto c700H;
       c700G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c700H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Ysj_info" {
     sat_s6Ysj_info:
         const sat_s6Ysj_entry;
         const 2;
         const 18;
 },
 $dmelem1_r6OSW_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c700I: // global
           _s6Ysi::P64 = R4;
           _s6Ysh::P64 = R3;
           _s6Ysg::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c700J; else goto c700K;
       c700K: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c700M; else goto c700L;
       c700M: // global
           HpAlloc = 32;
           goto c700J;
       c700J: // global
           R4 = _s6Ysi::P64;
           R3 = _s6Ysh::P64;
           R2 = _s6Ysg::P64;
           R1 = $dmelem1_r6OSW_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c700L: // global
           I64[Hp - 24] = sat_s6Ysj_info;
           P64[Hp - 8] = _s6Ysh::P64;
           P64[Hp] = _s6Ysi::P64;
           R2 = _s6Ysg::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call Data.Foldable.foldMap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmelem1_r6OSW_info" {
     $dmelem1_r6OSW_info:
         const $dmelem1_r6OSW_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const S6Z86_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.31758039 UTC

[section ""data" . Data.Foldable.$dmelem_closure" {
     Data.Foldable.$dmelem_closure:
         const Data.Foldable.$dmelem_info;
         const 0;
 },
 Data.Foldable.$dmelem_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7017: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmelem1_r6OSW_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$dmelem_info" {
     Data.Foldable.$dmelem_info:
         const Data.Foldable.$dmelem_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S6Z86_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.321068023 UTC

[section ""data" . Data.Foldable.$fFoldableURec11_closure" {
     Data.Foldable.$fFoldableURec11_closure:
         const Data.Foldable.$fFoldableURec11_info;
 },
 Data.Foldable.$fFoldableURec11_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c701k: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c701l; else goto c701m;
       c701l: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec11_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c701m: // global
           I64[Sp - 8] = block_c701i_info;
           R1 = R4;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec11_info" {
     Data.Foldable.$fFoldableURec11_info:
         const Data.Foldable.$fFoldableURec11_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c701i() //  []
         { []
         }
     {offset
       c701i: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c701i_info" {
     block_c701i_info:
         const _c701i;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.326333689 UTC

[section ""data" . Data.Foldable.$fFoldableURec8_closure" {
     Data.Foldable.$fFoldableURec8_closure:
         const Data.Foldable.$fFoldableURec8_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec8_entry() //  [R2, R3]
         { []
         }
     {offset
       c701H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c701I; else goto c701J;
       c701I: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec8_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c701J: // global
           I64[Sp - 16] = block_c701F_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec8_info" {
     Data.Foldable.$fFoldableURec8_info:
         const Data.Foldable.$fFoldableURec8_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+304;
 },
 _c701F() //  []
         { []
         }
     {offset
       c701F: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c701F_info" {
     block_c701F_info:
         const _c701F;
         const 1;
         const 4294967326;
         const S6Z86_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.331370977 UTC

[section ""data" . Data.Foldable.$fFoldable:*:2_closure" {
     Data.Foldable.$fFoldable:*:2_closure:
         const Data.Foldable.$fFoldable:*:2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldable:*:2_entry() //  [R1]
         { []
         }
     {offset
       c7022: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7023; else goto c7024;
       c7023: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7024: // global
           (_c701Z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c701Z::I64 == 0) goto c7021; else goto c7020;
       c7021: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7020: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c701Z::I64;
           R2 = Data.Foldable.$fFoldableK2_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:2_info" {
     Data.Foldable.$fFoldable:*:2_info:
         const Data.Foldable.$fFoldable:*:2_entry;
         const 0;
         const 144115192370823189;
         const S6Z86_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.335467295 UTC

[section ""data" . Data.Foldable.$fFoldableURec9_closure" {
     Data.Foldable.$fFoldableURec9_closure:
         const Data.Foldable.$fFoldableURec9_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec9_entry() //  []
         { []
         }
     {offset
       c702h: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec9_info" {
     Data.Foldable.$fFoldableURec9_info:
         const Data.Foldable.$fFoldableURec9_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Z86_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.339425397 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cminimum_closure" {
     Data.Foldable.$fFoldableURec_$cminimum_closure:
         const Data.Foldable.$fFoldableURec_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c702s: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec9_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cminimum_info" {
     Data.Foldable.$fFoldableURec_$cminimum_info:
         const Data.Foldable.$fFoldableURec_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.343046356 UTC

[section ""data" . Data.Foldable.$fFoldable:*:3_closure" {
     Data.Foldable.$fFoldable:*:3_closure:
         const Data.Foldable.$fFoldable:*:3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldable:*:3_entry() //  [R1]
         { []
         }
     {offset
       c702F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c702G; else goto c702H;
       c702G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c702H: // global
           (_c702C::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c702C::I64 == 0) goto c702E; else goto c702D;
       c702E: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c702D: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c702C::I64;
           R2 = Data.Foldable.$fFoldableK4_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:3_info" {
     Data.Foldable.$fFoldable:*:3_info:
         const Data.Foldable.$fFoldable:*:3_entry;
         const 0;
         const 72057598332895253;
         const S6Z86_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.347038809 UTC

[section ""data" . Data.Foldable.$fFoldableURec10_closure" {
     Data.Foldable.$fFoldableURec10_closure:
         const Data.Foldable.$fFoldableURec10_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec10_entry() //  []
         { []
         }
     {offset
       c702U: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec10_info" {
     Data.Foldable.$fFoldableURec10_info:
         const Data.Foldable.$fFoldableURec10_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Z86_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.350325147 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cmaximum_closure" {
     Data.Foldable.$fFoldableURec_$cmaximum_closure:
         const Data.Foldable.$fFoldableURec_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c7035: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec10_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cmaximum_info" {
     Data.Foldable.$fFoldableURec_$cmaximum_info:
         const Data.Foldable.$fFoldableURec_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.353928034 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cfoldr1_closure" {
     Data.Foldable.$fFoldableURec_$cfoldr1_closure:
         const Data.Foldable.$fFoldableURec_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c703g: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cfoldr1_info" {
     Data.Foldable.$fFoldableURec_$cfoldr1_info:
         const Data.Foldable.$fFoldableURec_$cfoldr1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.357619277 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cfoldl'_closure" {
     Data.Foldable.$fFoldableURec_$cfoldl'_closure:
         const Data.Foldable.$fFoldableURec_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableURec_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c703t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c703u; else goto c703v;
       c703u: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c703v: // global
           I64[Sp - 16] = block_c703r_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cfoldl'_info" {
     Data.Foldable.$fFoldableURec_$cfoldl'_info:
         const Data.Foldable.$fFoldableURec_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c703r() //  []
         { []
         }
     {offset
       c703r: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c703r_info" {
     block_c703r_info:
         const _c703r;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.362914913 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$clength_closure" {
     Data.Foldable.$fFoldableURec_$clength_closure:
         const Data.Foldable.$fFoldableURec_$clength_info;
 },
 Data.Foldable.$fFoldableURec_$clength_entry() //  [R2]
         { []
         }
     {offset
       c703O: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c703P; else goto c703Q;
       c703P: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c703Q: // global
           I64[Sp - 8] = block_c703M_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$clength_info" {
     Data.Foldable.$fFoldableURec_$clength_info:
         const Data.Foldable.$fFoldableURec_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c703M() //  []
         { []
         }
     {offset
       c703M: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c703M_info" {
     block_c703M_info:
         const _c703M;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.367933853 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cfoldl1_closure" {
     Data.Foldable.$fFoldableURec_$cfoldl1_closure:
         const Data.Foldable.$fFoldableURec_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c7048: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cfoldl1_info" {
     Data.Foldable.$fFoldableURec_$cfoldl1_info:
         const Data.Foldable.$fFoldableURec_$cfoldl1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.372177591 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$cfold_closure" {
     Data.Foldable.$fFoldableURec_$cfold_closure:
         const Data.Foldable.$fFoldableURec_$cfold_info;
 },
 Data.Foldable.$fFoldableURec_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c704l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c704m; else goto c704n;
       c704m: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c704n: // global
           I64[Sp - 16] = block_c704j_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$cfold_info" {
     Data.Foldable.$fFoldableURec_$cfold_info:
         const Data.Foldable.$fFoldableURec_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c704j() //  []
         { []
         }
     {offset
       c704j: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c704j_info" {
     block_c704j_info:
         const _c704j;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.377909081 UTC

[section ""data" . Data.Foldable.$fFoldableURec7_closure" {
     Data.Foldable.$fFoldableURec7_closure:
         const Data.Foldable.$fFoldableURec7_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec7_entry() //  [R2, R3]
         { []
         }
     {offset
       c704G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c704H; else goto c704I;
       c704H: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec7_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c704I: // global
           I64[Sp - 16] = block_c704E_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec7_info" {
     Data.Foldable.$fFoldableURec7_info:
         const Data.Foldable.$fFoldableURec7_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+352;
 },
 _c704E() //  []
         { []
         }
     {offset
       c704E: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c704E_info" {
     block_c704E_info:
         const _c704E;
         const 1;
         const 4294967326;
         const S6Z86_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.383497036 UTC

[section ""data" . Data.Foldable.$fFoldableURec_$ctoList_closure" {
     Data.Foldable.$fFoldableURec_$ctoList_closure:
         const Data.Foldable.$fFoldableURec_$ctoList_info;
 },
 Data.Foldable.$fFoldableURec_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c7051: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7052; else goto c7053;
       c7052: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7053: // global
           I64[Sp - 8] = block_c704Z_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec_$ctoList_info" {
     Data.Foldable.$fFoldableURec_$ctoList_info:
         const Data.Foldable.$fFoldableURec_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c704Z() //  []
         { []
         }
     {offset
       c704Z: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c704Z_info" {
     block_c704Z_info:
         const _c704Z;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.38830791 UTC

[section ""data" . Data.Foldable.$fFoldableURec_closure" {
     Data.Foldable.$fFoldableURec_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableURec_$cfold_closure+2;
         const Data.Foldable.$fFoldableURec_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableURec_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableURec_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableURec_$ctoList_closure+1;
         const Data.Foldable.$fFoldableURec_$cnull_closure+1;
         const Data.Foldable.$fFoldableURec_$clength_closure+1;
         const Data.Foldable.$fFoldableURec11_closure+3;
         const Data.Foldable.$fFoldableURec_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableURec_$cminimum_closure+2;
         const Data.Foldable.$fFoldableURec8_closure+2;
         const Data.Foldable.$fFoldableURec7_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.390919656 UTC

[section ""data" . Data.Foldable.$fFoldableURec16_closure" {
     Data.Foldable.$fFoldableURec16_closure:
         const Data.Foldable.$fFoldableURec16_info;
 },
 Data.Foldable.$fFoldableURec16_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c705p: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c705q; else goto c705r;
       c705q: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec16_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c705r: // global
           I64[Sp - 8] = block_c705n_info;
           R1 = R4;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec16_info" {
     Data.Foldable.$fFoldableURec16_info:
         const Data.Foldable.$fFoldableURec16_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c705n() //  []
         { []
         }
     {offset
       c705n: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c705n_info" {
     block_c705n_info:
         const _c705n;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.396501051 UTC

[section ""data" . Data.Foldable.$fFoldableURec13_closure" {
     Data.Foldable.$fFoldableURec13_closure:
         const Data.Foldable.$fFoldableURec13_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec13_entry() //  [R2, R3]
         { []
         }
     {offset
       c705M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c705N; else goto c705O;
       c705N: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec13_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c705O: // global
           I64[Sp - 16] = block_c705K_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec13_info" {
     Data.Foldable.$fFoldableURec13_info:
         const Data.Foldable.$fFoldableURec13_entry;
         const 0;
         const 1103806595086;
         const 8589934607;
         const S6Z86_srt+304;
 },
 _c705K() //  []
         { []
         }
     {offset
       c705K: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c705K_info" {
     block_c705K_info:
         const _c705K;
         const 1;
         const 4294967326;
         const S6Z86_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.401521355 UTC

[section ""data" . Data.Foldable.$fFoldableURec14_closure" {
     Data.Foldable.$fFoldableURec14_closure:
         const Data.Foldable.$fFoldableURec14_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec14_entry() //  []
         { []
         }
     {offset
       c7065: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec14_info" {
     Data.Foldable.$fFoldableURec14_info:
         const Data.Foldable.$fFoldableURec14_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Z86_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.405839469 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cminimum_closure" {
     Data.Foldable.$fFoldableURec0_$cminimum_closure:
         const Data.Foldable.$fFoldableURec0_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec0_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c706g: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec14_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cminimum_info" {
     Data.Foldable.$fFoldableURec0_$cminimum_info:
         const Data.Foldable.$fFoldableURec0_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.409124222 UTC

[section ""data" . Data.Foldable.$fFoldableURec15_closure" {
     Data.Foldable.$fFoldableURec15_closure:
         const Data.Foldable.$fFoldableURec15_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec15_entry() //  []
         { []
         }
     {offset
       c706r: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec15_info" {
     Data.Foldable.$fFoldableURec15_info:
         const Data.Foldable.$fFoldableURec15_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Z86_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.412396087 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cmaximum_closure" {
     Data.Foldable.$fFoldableURec0_$cmaximum_closure:
         const Data.Foldable.$fFoldableURec0_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec0_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c706C: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec15_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cmaximum_info" {
     Data.Foldable.$fFoldableURec0_$cmaximum_info:
         const Data.Foldable.$fFoldableURec0_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.415641871 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cfoldr1_closure" {
     Data.Foldable.$fFoldableURec0_$cfoldr1_closure:
         const Data.Foldable.$fFoldableURec0_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec0_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c706N: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cfoldr1_info" {
     Data.Foldable.$fFoldableURec0_$cfoldr1_info:
         const Data.Foldable.$fFoldableURec0_$cfoldr1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.419336744 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cfoldl'_closure" {
     Data.Foldable.$fFoldableURec0_$cfoldl'_closure:
         const Data.Foldable.$fFoldableURec0_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableURec0_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7070: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7071; else goto c7072;
       c7071: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec0_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7072: // global
           I64[Sp - 16] = block_c706Y_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cfoldl'_info" {
     Data.Foldable.$fFoldableURec0_$cfoldl'_info:
         const Data.Foldable.$fFoldableURec0_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c706Y() //  []
         { []
         }
     {offset
       c706Y: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c706Y_info" {
     block_c706Y_info:
         const _c706Y;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.424819779 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$clength_closure" {
     Data.Foldable.$fFoldableURec0_$clength_closure:
         const Data.Foldable.$fFoldableURec0_$clength_info;
 },
 Data.Foldable.$fFoldableURec0_$clength_entry() //  [R2]
         { []
         }
     {offset
       c707l: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c707m; else goto c707n;
       c707m: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec0_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c707n: // global
           I64[Sp - 8] = block_c707j_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$clength_info" {
     Data.Foldable.$fFoldableURec0_$clength_info:
         const Data.Foldable.$fFoldableURec0_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c707j() //  []
         { []
         }
     {offset
       c707j: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c707j_info" {
     block_c707j_info:
         const _c707j;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.429757288 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cfoldl1_closure" {
     Data.Foldable.$fFoldableURec0_$cfoldl1_closure:
         const Data.Foldable.$fFoldableURec0_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec0_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c707F: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cfoldl1_info" {
     Data.Foldable.$fFoldableURec0_$cfoldl1_info:
         const Data.Foldable.$fFoldableURec0_$cfoldl1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.433459999 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$cfold_closure" {
     Data.Foldable.$fFoldableURec0_$cfold_closure:
         const Data.Foldable.$fFoldableURec0_$cfold_info;
 },
 Data.Foldable.$fFoldableURec0_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c707S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c707T; else goto c707U;
       c707T: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec0_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c707U: // global
           I64[Sp - 16] = block_c707Q_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$cfold_info" {
     Data.Foldable.$fFoldableURec0_$cfold_info:
         const Data.Foldable.$fFoldableURec0_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c707Q() //  []
         { []
         }
     {offset
       c707Q: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c707Q_info" {
     block_c707Q_info:
         const _c707Q;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.440048757 UTC

[section ""data" . Data.Foldable.$fFoldableURec12_closure" {
     Data.Foldable.$fFoldableURec12_closure:
         const Data.Foldable.$fFoldableURec12_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec12_entry() //  [R2, R3]
         { []
         }
     {offset
       c708d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c708e; else goto c708f;
       c708e: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec12_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c708f: // global
           I64[Sp - 16] = block_c708b_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec12_info" {
     Data.Foldable.$fFoldableURec12_info:
         const Data.Foldable.$fFoldableURec12_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const S6Z86_srt+352;
 },
 _c708b() //  []
         { []
         }
     {offset
       c708b: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c708b_info" {
     block_c708b_info:
         const _c708b;
         const 1;
         const 4294967326;
         const S6Z86_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.44587014 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_$ctoList_closure" {
     Data.Foldable.$fFoldableURec0_$ctoList_closure:
         const Data.Foldable.$fFoldableURec0_$ctoList_info;
 },
 Data.Foldable.$fFoldableURec0_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c708y: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c708z; else goto c708A;
       c708z: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec0_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c708A: // global
           I64[Sp - 8] = block_c708w_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec0_$ctoList_info" {
     Data.Foldable.$fFoldableURec0_$ctoList_info:
         const Data.Foldable.$fFoldableURec0_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c708w() //  []
         { []
         }
     {offset
       c708w: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c708w_info" {
     block_c708w_info:
         const _c708w;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.450907666 UTC

[section ""data" . Data.Foldable.$fFoldableURec0_closure" {
     Data.Foldable.$fFoldableURec0_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableURec0_$cfold_closure+2;
         const Data.Foldable.$fFoldableURec0_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableURec0_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec0_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec0_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec0_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec0_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableURec0_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableURec0_$ctoList_closure+1;
         const Data.Foldable.$fFoldableURec0_$cnull_closure+1;
         const Data.Foldable.$fFoldableURec0_$clength_closure+1;
         const Data.Foldable.$fFoldableURec16_closure+3;
         const Data.Foldable.$fFoldableURec0_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableURec0_$cminimum_closure+2;
         const Data.Foldable.$fFoldableURec13_closure+2;
         const Data.Foldable.$fFoldableURec12_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.453871337 UTC

[section ""data" . Data.Foldable.$fFoldableURec21_closure" {
     Data.Foldable.$fFoldableURec21_closure:
         const Data.Foldable.$fFoldableURec21_info;
 },
 Data.Foldable.$fFoldableURec21_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c708W: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c708X; else goto c708Y;
       c708X: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec21_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c708Y: // global
           I64[Sp - 8] = block_c708U_info;
           R1 = R4;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec21_info" {
     Data.Foldable.$fFoldableURec21_info:
         const Data.Foldable.$fFoldableURec21_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c708U() //  []
         { []
         }
     {offset
       c708U: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c708U_info" {
     block_c708U_info:
         const _c708U;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.45978309 UTC

[section ""data" . Data.Foldable.$fFoldableURec18_closure" {
     Data.Foldable.$fFoldableURec18_closure:
         const Data.Foldable.$fFoldableURec18_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec18_entry() //  [R2, R3]
         { []
         }
     {offset
       c709j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c709k; else goto c709l;
       c709k: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec18_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c709l: // global
           I64[Sp - 16] = block_c709h_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec18_info" {
     Data.Foldable.$fFoldableURec18_info:
         const Data.Foldable.$fFoldableURec18_entry;
         const 0;
         const 17596481011726;
         const 8589934607;
         const S6Z86_srt+304;
 },
 _c709h() //  []
         { []
         }
     {offset
       c709h: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c709h_info" {
     block_c709h_info:
         const _c709h;
         const 1;
         const 4294967326;
         const S6Z86_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.465122547 UTC

[section ""data" . Data.Foldable.$fFoldableURec19_closure" {
     Data.Foldable.$fFoldableURec19_closure:
         const Data.Foldable.$fFoldableURec19_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec19_entry() //  []
         { []
         }
     {offset
       c709C: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec19_info" {
     Data.Foldable.$fFoldableURec19_info:
         const Data.Foldable.$fFoldableURec19_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Z86_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.468922852 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cminimum_closure" {
     Data.Foldable.$fFoldableURec1_$cminimum_closure:
         const Data.Foldable.$fFoldableURec1_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec1_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c709N: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec19_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cminimum_info" {
     Data.Foldable.$fFoldableURec1_$cminimum_info:
         const Data.Foldable.$fFoldableURec1_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.473842622 UTC

[section ""data" . Data.Foldable.$fFoldableURec20_closure" {
     Data.Foldable.$fFoldableURec20_closure:
         const Data.Foldable.$fFoldableURec20_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec20_entry() //  []
         { []
         }
     {offset
       c709Y: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec20_info" {
     Data.Foldable.$fFoldableURec20_info:
         const Data.Foldable.$fFoldableURec20_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Z86_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.477403149 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cmaximum_closure" {
     Data.Foldable.$fFoldableURec1_$cmaximum_closure:
         const Data.Foldable.$fFoldableURec1_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec1_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c70a9: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec20_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cmaximum_info" {
     Data.Foldable.$fFoldableURec1_$cmaximum_info:
         const Data.Foldable.$fFoldableURec1_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.481139964 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cfoldr1_closure" {
     Data.Foldable.$fFoldableURec1_$cfoldr1_closure:
         const Data.Foldable.$fFoldableURec1_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec1_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c70ak: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cfoldr1_info" {
     Data.Foldable.$fFoldableURec1_$cfoldr1_info:
         const Data.Foldable.$fFoldableURec1_$cfoldr1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.485139741 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cfoldl'_closure" {
     Data.Foldable.$fFoldableURec1_$cfoldl'_closure:
         const Data.Foldable.$fFoldableURec1_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableURec1_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70ax: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70ay; else goto c70az;
       c70ay: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec1_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70az: // global
           I64[Sp - 16] = block_c70av_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cfoldl'_info" {
     Data.Foldable.$fFoldableURec1_$cfoldl'_info:
         const Data.Foldable.$fFoldableURec1_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c70av() //  []
         { []
         }
     {offset
       c70av: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70av_info" {
     block_c70av_info:
         const _c70av;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.490716991 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$clength_closure" {
     Data.Foldable.$fFoldableURec1_$clength_closure:
         const Data.Foldable.$fFoldableURec1_$clength_info;
 },
 Data.Foldable.$fFoldableURec1_$clength_entry() //  [R2]
         { []
         }
     {offset
       c70aS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c70aT; else goto c70aU;
       c70aT: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec1_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c70aU: // global
           I64[Sp - 8] = block_c70aQ_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$clength_info" {
     Data.Foldable.$fFoldableURec1_$clength_info:
         const Data.Foldable.$fFoldableURec1_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c70aQ() //  []
         { []
         }
     {offset
       c70aQ: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70aQ_info" {
     block_c70aQ_info:
         const _c70aQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.496571765 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cfoldl1_closure" {
     Data.Foldable.$fFoldableURec1_$cfoldl1_closure:
         const Data.Foldable.$fFoldableURec1_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec1_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c70bc: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cfoldl1_info" {
     Data.Foldable.$fFoldableURec1_$cfoldl1_info:
         const Data.Foldable.$fFoldableURec1_$cfoldl1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.500601631 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$cfold_closure" {
     Data.Foldable.$fFoldableURec1_$cfold_closure:
         const Data.Foldable.$fFoldableURec1_$cfold_info;
 },
 Data.Foldable.$fFoldableURec1_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c70bp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70bq; else goto c70br;
       c70bq: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec1_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70br: // global
           I64[Sp - 16] = block_c70bn_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$cfold_info" {
     Data.Foldable.$fFoldableURec1_$cfold_info:
         const Data.Foldable.$fFoldableURec1_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c70bn() //  []
         { []
         }
     {offset
       c70bn: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70bn_info" {
     block_c70bn_info:
         const _c70bn;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.509811769 UTC

[section ""data" . Data.Foldable.$fFoldableURec17_closure" {
     Data.Foldable.$fFoldableURec17_closure:
         const Data.Foldable.$fFoldableURec17_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec17_entry() //  [R2, R3]
         { []
         }
     {offset
       c70bK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70bL; else goto c70bM;
       c70bL: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec17_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70bM: // global
           I64[Sp - 16] = block_c70bI_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec17_info" {
     Data.Foldable.$fFoldableURec17_info:
         const Data.Foldable.$fFoldableURec17_entry;
         const 0;
         const 2203318222862;
         const 8589934607;
         const S6Z86_srt+352;
 },
 _c70bI() //  []
         { []
         }
     {offset
       c70bI: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70bI_info" {
     block_c70bI_info:
         const _c70bI;
         const 1;
         const 4294967326;
         const S6Z86_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.517653651 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_$ctoList_closure" {
     Data.Foldable.$fFoldableURec1_$ctoList_closure:
         const Data.Foldable.$fFoldableURec1_$ctoList_info;
 },
 Data.Foldable.$fFoldableURec1_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c70c5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c70c6; else goto c70c7;
       c70c6: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec1_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c70c7: // global
           I64[Sp - 8] = block_c70c3_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec1_$ctoList_info" {
     Data.Foldable.$fFoldableURec1_$ctoList_info:
         const Data.Foldable.$fFoldableURec1_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c70c3() //  []
         { []
         }
     {offset
       c70c3: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70c3_info" {
     block_c70c3_info:
         const _c70c3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.52466414 UTC

[section ""data" . Data.Foldable.$fFoldableURec1_closure" {
     Data.Foldable.$fFoldableURec1_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableURec1_$cfold_closure+2;
         const Data.Foldable.$fFoldableURec1_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableURec1_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec1_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec1_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec1_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec1_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableURec1_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableURec1_$ctoList_closure+1;
         const Data.Foldable.$fFoldableURec1_$cnull_closure+1;
         const Data.Foldable.$fFoldableURec1_$clength_closure+1;
         const Data.Foldable.$fFoldableURec21_closure+3;
         const Data.Foldable.$fFoldableURec1_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableURec1_$cminimum_closure+2;
         const Data.Foldable.$fFoldableURec18_closure+2;
         const Data.Foldable.$fFoldableURec17_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.528569992 UTC

[section ""data" . Data.Foldable.$fFoldableURec26_closure" {
     Data.Foldable.$fFoldableURec26_closure:
         const Data.Foldable.$fFoldableURec26_info;
 },
 Data.Foldable.$fFoldableURec26_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70ct: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c70cu; else goto c70cv;
       c70cu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec26_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70cv: // global
           I64[Sp - 8] = block_c70cr_info;
           R1 = R4;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec26_info" {
     Data.Foldable.$fFoldableURec26_info:
         const Data.Foldable.$fFoldableURec26_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c70cr() //  []
         { []
         }
     {offset
       c70cr: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70cr_info" {
     block_c70cr_info:
         const _c70cr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.536287793 UTC

[section ""data" . Data.Foldable.$fFoldableURec23_closure" {
     Data.Foldable.$fFoldableURec23_closure:
         const Data.Foldable.$fFoldableURec23_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec23_entry() //  [R2, R3]
         { []
         }
     {offset
       c70cQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70cR; else goto c70cS;
       c70cR: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec23_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70cS: // global
           I64[Sp - 16] = block_c70cO_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec23_info" {
     Data.Foldable.$fFoldableURec23_info:
         const Data.Foldable.$fFoldableURec23_entry;
         const 0;
         const 281479271677966;
         const 8589934607;
         const S6Z86_srt+304;
 },
 _c70cO() //  []
         { []
         }
     {offset
       c70cO: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70cO_info" {
     block_c70cO_info:
         const _c70cO;
         const 1;
         const 4294967326;
         const S6Z86_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.541942333 UTC

[section ""data" . Data.Foldable.$fFoldableURec24_closure" {
     Data.Foldable.$fFoldableURec24_closure:
         const Data.Foldable.$fFoldableURec24_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec24_entry() //  []
         { []
         }
     {offset
       c70d9: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec24_info" {
     Data.Foldable.$fFoldableURec24_info:
         const Data.Foldable.$fFoldableURec24_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Z86_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.545539557 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cminimum_closure" {
     Data.Foldable.$fFoldableURec2_$cminimum_closure:
         const Data.Foldable.$fFoldableURec2_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec2_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c70dk: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec24_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cminimum_info" {
     Data.Foldable.$fFoldableURec2_$cminimum_info:
         const Data.Foldable.$fFoldableURec2_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.549618147 UTC

[section ""data" . Data.Foldable.$fFoldableURec25_closure" {
     Data.Foldable.$fFoldableURec25_closure:
         const Data.Foldable.$fFoldableURec25_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec25_entry() //  []
         { []
         }
     {offset
       c70dv: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec25_info" {
     Data.Foldable.$fFoldableURec25_info:
         const Data.Foldable.$fFoldableURec25_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Z86_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.553783337 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cmaximum_closure" {
     Data.Foldable.$fFoldableURec2_$cmaximum_closure:
         const Data.Foldable.$fFoldableURec2_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec2_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c70dG: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec25_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cmaximum_info" {
     Data.Foldable.$fFoldableURec2_$cmaximum_info:
         const Data.Foldable.$fFoldableURec2_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.557299243 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cfoldr1_closure" {
     Data.Foldable.$fFoldableURec2_$cfoldr1_closure:
         const Data.Foldable.$fFoldableURec2_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec2_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c70dR: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cfoldr1_info" {
     Data.Foldable.$fFoldableURec2_$cfoldr1_info:
         const Data.Foldable.$fFoldableURec2_$cfoldr1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.561363267 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cfoldl'_closure" {
     Data.Foldable.$fFoldableURec2_$cfoldl'_closure:
         const Data.Foldable.$fFoldableURec2_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableURec2_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70e4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70e5; else goto c70e6;
       c70e5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec2_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70e6: // global
           I64[Sp - 16] = block_c70e2_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cfoldl'_info" {
     Data.Foldable.$fFoldableURec2_$cfoldl'_info:
         const Data.Foldable.$fFoldableURec2_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c70e2() //  []
         { []
         }
     {offset
       c70e2: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70e2_info" {
     block_c70e2_info:
         const _c70e2;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.567244073 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$clength_closure" {
     Data.Foldable.$fFoldableURec2_$clength_closure:
         const Data.Foldable.$fFoldableURec2_$clength_info;
 },
 Data.Foldable.$fFoldableURec2_$clength_entry() //  [R2]
         { []
         }
     {offset
       c70ep: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c70eq; else goto c70er;
       c70eq: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec2_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c70er: // global
           I64[Sp - 8] = block_c70en_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$clength_info" {
     Data.Foldable.$fFoldableURec2_$clength_info:
         const Data.Foldable.$fFoldableURec2_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c70en() //  []
         { []
         }
     {offset
       c70en: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70en_info" {
     block_c70en_info:
         const _c70en;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.572635672 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cfoldl1_closure" {
     Data.Foldable.$fFoldableURec2_$cfoldl1_closure:
         const Data.Foldable.$fFoldableURec2_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec2_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c70eJ: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cfoldl1_info" {
     Data.Foldable.$fFoldableURec2_$cfoldl1_info:
         const Data.Foldable.$fFoldableURec2_$cfoldl1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.576634804 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$cfold_closure" {
     Data.Foldable.$fFoldableURec2_$cfold_closure:
         const Data.Foldable.$fFoldableURec2_$cfold_info;
 },
 Data.Foldable.$fFoldableURec2_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c70eW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70eX; else goto c70eY;
       c70eX: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec2_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70eY: // global
           I64[Sp - 16] = block_c70eU_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$cfold_info" {
     Data.Foldable.$fFoldableURec2_$cfold_info:
         const Data.Foldable.$fFoldableURec2_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c70eU() //  []
         { []
         }
     {offset
       c70eU: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70eU_info" {
     block_c70eU_info:
         const _c70eU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.582944542 UTC

[section ""data" . Data.Foldable.$fFoldableURec22_closure" {
     Data.Foldable.$fFoldableURec22_closure:
         const Data.Foldable.$fFoldableURec22_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec22_entry() //  [R2, R3]
         { []
         }
     {offset
       c70fh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70fi; else goto c70fj;
       c70fi: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec22_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70fj: // global
           I64[Sp - 16] = block_c70ff_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec22_info" {
     Data.Foldable.$fFoldableURec22_info:
         const Data.Foldable.$fFoldableURec22_entry;
         const 0;
         const 70373039144974;
         const 8589934607;
         const S6Z86_srt+352;
 },
 _c70ff() //  []
         { []
         }
     {offset
       c70ff: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70ff_info" {
     block_c70ff_info:
         const _c70ff;
         const 1;
         const 4294967326;
         const S6Z86_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.589845349 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_$ctoList_closure" {
     Data.Foldable.$fFoldableURec2_$ctoList_closure:
         const Data.Foldable.$fFoldableURec2_$ctoList_info;
 },
 Data.Foldable.$fFoldableURec2_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c70fC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c70fD; else goto c70fE;
       c70fD: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec2_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c70fE: // global
           I64[Sp - 8] = block_c70fA_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec2_$ctoList_info" {
     Data.Foldable.$fFoldableURec2_$ctoList_info:
         const Data.Foldable.$fFoldableURec2_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c70fA() //  []
         { []
         }
     {offset
       c70fA: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70fA_info" {
     block_c70fA_info:
         const _c70fA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.595063002 UTC

[section ""data" . Data.Foldable.$fFoldableURec2_closure" {
     Data.Foldable.$fFoldableURec2_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableURec2_$cfold_closure+2;
         const Data.Foldable.$fFoldableURec2_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableURec2_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec2_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec2_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec2_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec2_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableURec2_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableURec2_$ctoList_closure+1;
         const Data.Foldable.$fFoldableURec2_$cnull_closure+1;
         const Data.Foldable.$fFoldableURec2_$clength_closure+1;
         const Data.Foldable.$fFoldableURec26_closure+3;
         const Data.Foldable.$fFoldableURec2_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableURec2_$cminimum_closure+2;
         const Data.Foldable.$fFoldableURec23_closure+2;
         const Data.Foldable.$fFoldableURec22_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.598232246 UTC

[section ""data" . Data.Foldable.$fFoldableURec31_closure" {
     Data.Foldable.$fFoldableURec31_closure:
         const Data.Foldable.$fFoldableURec31_info;
 },
 Data.Foldable.$fFoldableURec31_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70g0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c70g1; else goto c70g2;
       c70g1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec31_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70g2: // global
           I64[Sp - 8] = block_c70fY_info;
           R1 = R4;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec31_info" {
     Data.Foldable.$fFoldableURec31_info:
         const Data.Foldable.$fFoldableURec31_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c70fY() //  []
         { []
         }
     {offset
       c70fY: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70fY_info" {
     block_c70fY_info:
         const _c70fY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.604227403 UTC

[section ""data" . Data.Foldable.$fFoldableURec28_closure" {
     Data.Foldable.$fFoldableURec28_closure:
         const Data.Foldable.$fFoldableURec28_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec28_entry() //  [R2, R3]
         { []
         }
     {offset
       c70gn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70go; else goto c70gp;
       c70go: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec28_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70gp: // global
           I64[Sp - 16] = block_c70gl_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec28_info" {
     Data.Foldable.$fFoldableURec28_info:
         const Data.Foldable.$fFoldableURec28_entry;
         const 0;
         const 9007203549708302;
         const 8589934607;
         const S6Z86_srt+304;
 },
 _c70gl() //  []
         { []
         }
     {offset
       c70gl: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70gl_info" {
     block_c70gl_info:
         const _c70gl;
         const 1;
         const 4294967326;
         const S6Z86_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.609560679 UTC

[section ""data" . Data.Foldable.$fFoldableURec29_closure" {
     Data.Foldable.$fFoldableURec29_closure:
         const Data.Foldable.$fFoldableURec29_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec29_entry() //  []
         { []
         }
     {offset
       c70gG: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec29_info" {
     Data.Foldable.$fFoldableURec29_info:
         const Data.Foldable.$fFoldableURec29_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Z86_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.61299495 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cminimum_closure" {
     Data.Foldable.$fFoldableURec3_$cminimum_closure:
         const Data.Foldable.$fFoldableURec3_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec3_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c70gR: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec29_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cminimum_info" {
     Data.Foldable.$fFoldableURec3_$cminimum_info:
         const Data.Foldable.$fFoldableURec3_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.616484614 UTC

[section ""data" . Data.Foldable.$fFoldableURec30_closure" {
     Data.Foldable.$fFoldableURec30_closure:
         const Data.Foldable.$fFoldableURec30_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec30_entry() //  []
         { []
         }
     {offset
       c70h2: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec30_info" {
     Data.Foldable.$fFoldableURec30_info:
         const Data.Foldable.$fFoldableURec30_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Z86_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.620797993 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cmaximum_closure" {
     Data.Foldable.$fFoldableURec3_$cmaximum_closure:
         const Data.Foldable.$fFoldableURec3_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec3_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c70hd: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec30_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cmaximum_info" {
     Data.Foldable.$fFoldableURec3_$cmaximum_info:
         const Data.Foldable.$fFoldableURec3_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.624213463 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cfoldr1_closure" {
     Data.Foldable.$fFoldableURec3_$cfoldr1_closure:
         const Data.Foldable.$fFoldableURec3_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec3_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c70ho: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cfoldr1_info" {
     Data.Foldable.$fFoldableURec3_$cfoldr1_info:
         const Data.Foldable.$fFoldableURec3_$cfoldr1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+496;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.627970161 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cfoldl'_closure" {
     Data.Foldable.$fFoldableURec3_$cfoldl'_closure:
         const Data.Foldable.$fFoldableURec3_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableURec3_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70hB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70hC; else goto c70hD;
       c70hC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec3_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70hD: // global
           I64[Sp - 16] = block_c70hz_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cfoldl'_info" {
     Data.Foldable.$fFoldableURec3_$cfoldl'_info:
         const Data.Foldable.$fFoldableURec3_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c70hz() //  []
         { []
         }
     {offset
       c70hz: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70hz_info" {
     block_c70hz_info:
         const _c70hz;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.634895628 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$clength_closure" {
     Data.Foldable.$fFoldableURec3_$clength_closure:
         const Data.Foldable.$fFoldableURec3_$clength_info;
 },
 Data.Foldable.$fFoldableURec3_$clength_entry() //  [R2]
         { []
         }
     {offset
       c70hW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c70hX; else goto c70hY;
       c70hX: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec3_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c70hY: // global
           I64[Sp - 8] = block_c70hU_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$clength_info" {
     Data.Foldable.$fFoldableURec3_$clength_info:
         const Data.Foldable.$fFoldableURec3_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c70hU() //  []
         { []
         }
     {offset
       c70hU: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70hU_info" {
     block_c70hU_info:
         const _c70hU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.640290496 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cfoldl1_closure" {
     Data.Foldable.$fFoldableURec3_$cfoldl1_closure:
         const Data.Foldable.$fFoldableURec3_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec3_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c70ig: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cfoldl1_info" {
     Data.Foldable.$fFoldableURec3_$cfoldl1_info:
         const Data.Foldable.$fFoldableURec3_$cfoldl1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.644009545 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$cfold_closure" {
     Data.Foldable.$fFoldableURec3_$cfold_closure:
         const Data.Foldable.$fFoldableURec3_$cfold_info;
 },
 Data.Foldable.$fFoldableURec3_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c70it: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70iu; else goto c70iv;
       c70iu: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec3_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70iv: // global
           I64[Sp - 16] = block_c70ir_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$cfold_info" {
     Data.Foldable.$fFoldableURec3_$cfold_info:
         const Data.Foldable.$fFoldableURec3_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c70ir() //  []
         { []
         }
     {offset
       c70ir: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70ir_info" {
     block_c70ir_info:
         const _c70ir;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.649980155 UTC

[section ""data" . Data.Foldable.$fFoldableURec27_closure" {
     Data.Foldable.$fFoldableURec27_closure:
         const Data.Foldable.$fFoldableURec27_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec27_entry() //  [R2, R3]
         { []
         }
     {offset
       c70iO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70iP; else goto c70iQ;
       c70iP: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec27_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70iQ: // global
           I64[Sp - 16] = block_c70iM_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec27_info" {
     Data.Foldable.$fFoldableURec27_info:
         const Data.Foldable.$fFoldableURec27_entry;
         const 0;
         const 2251804108652558;
         const 8589934607;
         const S6Z86_srt+352;
 },
 _c70iM() //  []
         { []
         }
     {offset
       c70iM: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70iM_info" {
     block_c70iM_info:
         const _c70iM;
         const 1;
         const 4294967326;
         const S6Z86_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.656233408 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_$ctoList_closure" {
     Data.Foldable.$fFoldableURec3_$ctoList_closure:
         const Data.Foldable.$fFoldableURec3_$ctoList_info;
 },
 Data.Foldable.$fFoldableURec3_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c70j9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c70ja; else goto c70jb;
       c70ja: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec3_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c70jb: // global
           I64[Sp - 8] = block_c70j7_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec3_$ctoList_info" {
     Data.Foldable.$fFoldableURec3_$ctoList_info:
         const Data.Foldable.$fFoldableURec3_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c70j7() //  []
         { []
         }
     {offset
       c70j7: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70j7_info" {
     block_c70j7_info:
         const _c70j7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.661029976 UTC

[section ""data" . Data.Foldable.$fFoldableURec3_closure" {
     Data.Foldable.$fFoldableURec3_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableURec3_$cfold_closure+2;
         const Data.Foldable.$fFoldableURec3_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableURec3_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec3_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec3_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec3_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec3_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableURec3_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableURec3_$ctoList_closure+1;
         const Data.Foldable.$fFoldableURec3_$cnull_closure+1;
         const Data.Foldable.$fFoldableURec3_$clength_closure+1;
         const Data.Foldable.$fFoldableURec31_closure+3;
         const Data.Foldable.$fFoldableURec3_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableURec3_$cminimum_closure+2;
         const Data.Foldable.$fFoldableURec28_closure+2;
         const Data.Foldable.$fFoldableURec27_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.663700634 UTC

[section ""data" . Data.Foldable.$fFoldableURec36_closure" {
     Data.Foldable.$fFoldableURec36_closure:
         const Data.Foldable.$fFoldableURec36_info;
 },
 Data.Foldable.$fFoldableURec36_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70jx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c70jy; else goto c70jz;
       c70jy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec36_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70jz: // global
           I64[Sp - 8] = block_c70jv_info;
           R1 = R4;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec36_info" {
     Data.Foldable.$fFoldableURec36_info:
         const Data.Foldable.$fFoldableURec36_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c70jv() //  []
         { []
         }
     {offset
       c70jv: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70jv_info" {
     block_c70jv_info:
         const _c70jv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.66954385 UTC

[section ""data" . Data.Foldable.$fFoldableURec33_closure" {
     Data.Foldable.$fFoldableURec33_closure:
         const Data.Foldable.$fFoldableURec33_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec33_entry() //  [R2, R3]
         { []
         }
     {offset
       c70jU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70jV; else goto c70jW;
       c70jV: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec33_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70jW: // global
           I64[Sp - 16] = block_c70jS_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec33_info" {
     Data.Foldable.$fFoldableURec33_info:
         const Data.Foldable.$fFoldableURec33_entry;
         const 0;
         const 288230380446679054;
         const 8589934607;
         const S6Z86_srt+304;
 },
 _c70jS() //  []
         { []
         }
     {offset
       c70jS: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70jS_info" {
     block_c70jS_info:
         const _c70jS;
         const 1;
         const 4294967326;
         const S6Z86_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.674489637 UTC

[section ""data" . Data.Foldable.$fFoldableURec34_closure" {
     Data.Foldable.$fFoldableURec34_closure:
         const Data.Foldable.$fFoldableURec34_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec34_entry() //  []
         { []
         }
     {offset
       c70kd: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec34_info" {
     Data.Foldable.$fFoldableURec34_info:
         const Data.Foldable.$fFoldableURec34_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Z86_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.677775373 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cminimum_closure" {
     Data.Foldable.$fFoldableURec4_$cminimum_closure:
         const Data.Foldable.$fFoldableURec4_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec4_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c70ko: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec34_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cminimum_info" {
     Data.Foldable.$fFoldableURec4_$cminimum_info:
         const Data.Foldable.$fFoldableURec4_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.68110249 UTC

[section ""data" . Data.Foldable.$fFoldableURec35_closure" {
     Data.Foldable.$fFoldableURec35_closure:
         const Data.Foldable.$fFoldableURec35_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec35_entry() //  []
         { []
         }
     {offset
       c70kz: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec35_info" {
     Data.Foldable.$fFoldableURec35_info:
         const Data.Foldable.$fFoldableURec35_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S6Z86_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.684581652 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cmaximum_closure" {
     Data.Foldable.$fFoldableURec4_$cmaximum_closure:
         const Data.Foldable.$fFoldableURec4_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec4_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c70kK: // global
           R2 = R3;
           call Data.Foldable.$fFoldableURec35_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cmaximum_info" {
     Data.Foldable.$fFoldableURec4_$cmaximum_info:
         const Data.Foldable.$fFoldableURec4_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.688575906 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cfoldr1_closure" {
     Data.Foldable.$fFoldableURec4_$cfoldr1_closure:
         const Data.Foldable.$fFoldableURec4_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec4_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c70kV: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cfoldr1_info" {
     Data.Foldable.$fFoldableURec4_$cfoldr1_info:
         const Data.Foldable.$fFoldableURec4_$cfoldr1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+496;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.692725682 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cfoldl'_closure" {
     Data.Foldable.$fFoldableURec4_$cfoldl'_closure:
         const Data.Foldable.$fFoldableURec4_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableURec4_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70l8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70l9; else goto c70la;
       c70l9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec4_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70la: // global
           I64[Sp - 16] = block_c70l6_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cfoldl'_info" {
     Data.Foldable.$fFoldableURec4_$cfoldl'_info:
         const Data.Foldable.$fFoldableURec4_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c70l6() //  []
         { []
         }
     {offset
       c70l6: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70l6_info" {
     block_c70l6_info:
         const _c70l6;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.698031771 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$clength_closure" {
     Data.Foldable.$fFoldableURec4_$clength_closure:
         const Data.Foldable.$fFoldableURec4_$clength_info;
 },
 Data.Foldable.$fFoldableURec4_$clength_entry() //  [R2]
         { []
         }
     {offset
       c70lt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c70lu; else goto c70lv;
       c70lu: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec4_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c70lv: // global
           I64[Sp - 8] = block_c70lr_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$clength_info" {
     Data.Foldable.$fFoldableURec4_$clength_info:
         const Data.Foldable.$fFoldableURec4_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c70lr() //  []
         { []
         }
     {offset
       c70lr: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70lr_info" {
     block_c70lr_info:
         const _c70lr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.703135121 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cfoldl1_closure" {
     Data.Foldable.$fFoldableURec4_$cfoldl1_closure:
         const Data.Foldable.$fFoldableURec4_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec4_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c70lN: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cfoldl1_info" {
     Data.Foldable.$fFoldableURec4_$cfoldl1_info:
         const Data.Foldable.$fFoldableURec4_$cfoldl1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.706981317 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$cfold_closure" {
     Data.Foldable.$fFoldableURec4_$cfold_closure:
         const Data.Foldable.$fFoldableURec4_$cfold_info;
 },
 Data.Foldable.$fFoldableURec4_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c70m0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70m1; else goto c70m2;
       c70m1: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec4_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70m2: // global
           I64[Sp - 16] = block_c70lY_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$cfold_info" {
     Data.Foldable.$fFoldableURec4_$cfold_info:
         const Data.Foldable.$fFoldableURec4_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c70lY() //  []
         { []
         }
     {offset
       c70lY: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70lY_info" {
     block_c70lY_info:
         const _c70lY;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.713212803 UTC

[section ""data" . Data.Foldable.$fFoldableURec32_closure" {
     Data.Foldable.$fFoldableURec32_closure:
         const Data.Foldable.$fFoldableURec32_info;
         const 0;
 },
 Data.Foldable.$fFoldableURec32_entry() //  [R2, R3]
         { []
         }
     {offset
       c70ml: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70mm; else goto c70mn;
       c70mm: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec32_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70mn: // global
           I64[Sp - 16] = block_c70mj_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec32_info" {
     Data.Foldable.$fFoldableURec32_info:
         const Data.Foldable.$fFoldableURec32_entry;
         const 0;
         const 36028801313931278;
         const 8589934607;
         const S6Z86_srt+352;
 },
 _c70mj() //  []
         { []
         }
     {offset
       c70mj: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70mj_info" {
     block_c70mj_info:
         const _c70mj;
         const 1;
         const 4294967326;
         const S6Z86_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.718944665 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_$ctoList_closure" {
     Data.Foldable.$fFoldableURec4_$ctoList_closure:
         const Data.Foldable.$fFoldableURec4_$ctoList_info;
 },
 Data.Foldable.$fFoldableURec4_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c70mG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c70mH; else goto c70mI;
       c70mH: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableURec4_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c70mI: // global
           I64[Sp - 8] = block_c70mE_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableURec4_$ctoList_info" {
     Data.Foldable.$fFoldableURec4_$ctoList_info:
         const Data.Foldable.$fFoldableURec4_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c70mE() //  []
         { []
         }
     {offset
       c70mE: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70mE_info" {
     block_c70mE_info:
         const _c70mE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.724637339 UTC

[section ""data" . Data.Foldable.$fFoldableURec4_closure" {
     Data.Foldable.$fFoldableURec4_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableURec4_$cfold_closure+2;
         const Data.Foldable.$fFoldableURec4_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableURec4_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec4_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableURec4_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec4_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableURec4_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableURec4_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableURec4_$ctoList_closure+1;
         const Data.Foldable.$fFoldableURec4_$cnull_closure+1;
         const Data.Foldable.$fFoldableURec4_$clength_closure+1;
         const Data.Foldable.$fFoldableURec36_closure+3;
         const Data.Foldable.$fFoldableURec4_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableURec4_$cminimum_closure+2;
         const Data.Foldable.$fFoldableURec33_closure+2;
         const Data.Foldable.$fFoldableURec32_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.729524252 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$celem_closure" {
     Data.Foldable.$fFoldable:*:_$celem_closure:
         const Data.Foldable.$fFoldable:*:_$celem_info;
         const 0;
 },
 f1_s6Yw4_entry() //  [R1]
         { []
         }
     {offset
       c70n6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c70n7; else goto c70n8;
       c70n7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70n8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s6Yw4_info" {
     f1_s6Yw4_info:
         const f1_s6Yw4_entry;
         const 2;
         const 18;
 },
 sat_s6Ywa_entry() //  [R1, R2]
         { []
         }
     {offset
       c70nh: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c70ni; else goto c70nj;
       c70ni: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c70nj: // global
           I64[Sp - 32] = block_c70ne_info;
           _s6Yw0::P64 = P64[R1 + 7];
           _s6Yw1::P64 = P64[R1 + 15];
           _s6Yw4::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s6Yw0::P64;
           P64[Sp - 16] = _s6Yw1::P64;
           P64[Sp - 8] = _s6Yw4::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u70nz; else goto c70nf;
       u70nz: // global
           call _c70ne(R1) args: 0, res: 0, upd: 0;
       c70nf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Ywa_info" {
     sat_s6Ywa_info:
         const sat_s6Ywa_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S6Z86_srt+544;
 },
 _c70ne() //  [R1]
         { []
         }
     {offset
       c70ne: // global
           I64[Sp] = block_c70nm_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c70ne_info" {
     block_c70ne_info:
         const _c70ne;
         const 3;
         const 4294967326;
         const S6Z86_srt+544;
 },
 _c70nm() //  [R1]
         { []
         }
     {offset
       c70nm: // global
           if (R1 & 7 == 1) goto c70nt; else goto c70nx;
       c70nt: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           _s6Yw8::P64 = P64[Sp + 8];
           P64[Sp + 8] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = _s6Yw8::P64;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       c70nx: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70nm_info" {
     block_c70nm_info:
         const _c70nm;
         const 3;
         const 4294967326;
         const S6Z86_srt+544;
 },
 Data.Foldable.$fFoldable:*:_$celem_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c70nA: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c70nE; else goto c70nD;
       c70nE: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$celem_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70nD: // global
           I64[Hp - 56] = f1_s6Yw4_info;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           I64[Hp - 24] = sat_s6Ywa_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$celem_info" {
     Data.Foldable.$fFoldable:*:_$celem_info:
         const Data.Foldable.$fFoldable:*:_$celem_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S6Z86_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.743655853 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$csum_closure" {
     Data.Foldable.$fFoldable:*:_$csum_closure:
         const Data.Foldable.$fFoldable:*:_$csum_info;
         const 0;
 },
 $dMonoid_s6Ywe_entry() //  [R1]
         { []
         }
     {offset
       c70or: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70os; else goto c70ot;
       c70os: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70ot: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6Ywe_info" {
     $dMonoid_s6Ywe_info:
         const $dMonoid_s6Ywe_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+560;
 },
 sat_s6Ywk_entry() //  [R1]
         { []
         }
     {offset
       c70oI: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c70oJ; else goto c70oK;
       c70oJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70oK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Ywk_info" {
     sat_s6Ywk_info:
         const sat_s6Ywk_entry;
         const 3;
         const 15;
 },
 sat_s6Ywj_entry() //  [R1]
         { []
         }
     {offset
       c70oP: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c70oQ; else goto c70oR;
       c70oQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70oR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Ywj_info" {
     sat_s6Ywj_info:
         const sat_s6Ywj_entry;
         const 3;
         const 15;
 },
 sat_s6Ywl_entry() //  [R1, R2]
         { []
         }
     {offset
       c70oS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c70oT; else goto c70oU;
       c70oT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c70oU: // global
           I64[Sp - 40] = block_c70oz_info;
           _s6Ywb::P64 = P64[R1 + 7];
           _s6Ywc::P64 = P64[R1 + 15];
           _s6Ywd::P64 = P64[R1 + 23];
           _s6Ywe::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s6Ywb::P64;
           P64[Sp - 24] = _s6Ywc::P64;
           P64[Sp - 16] = _s6Ywd::P64;
           P64[Sp - 8] = _s6Ywe::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u70oY; else goto c70oA;
       u70oY: // global
           call _c70oz(R1) args: 0, res: 0, upd: 0;
       c70oA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Ywl_info" {
     sat_s6Ywl_info:
         const sat_s6Ywl_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c70oz() //  [R1]
         { []
         }
     {offset
       c70oz: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c70oX; else goto c70oW;
       c70oX: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c70oW: // global
           _s6Ywh::P64 = P64[R1 + 7];
           _s6Ywi::P64 = P64[R1 + 15];
           I64[Hp - 72] = sat_s6Ywk_info;
           P64[Hp - 56] = P64[Sp + 16];
           _s6Ywe::P64 = P64[Sp + 32];
           P64[Hp - 48] = _s6Ywe::P64;
           P64[Hp - 40] = _s6Ywi::P64;
           I64[Hp - 32] = sat_s6Ywj_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s6Ywe::P64;
           P64[Hp] = _s6Ywh::P64;
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 72;
           Sp = Sp + 16;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70oz_info" {
     block_c70oz_info:
         const _c70oz;
         const 4;
         const 30;
 },
 Data.Foldable.$fFoldable:*:_$csum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70oZ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c70p3; else goto c70p2;
       c70p3: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$csum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70p2: // global
           I64[Hp - 56] = $dMonoid_s6Ywe_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_s6Ywl_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$csum_info" {
     Data.Foldable.$fFoldable:*:_$csum_info:
         const Data.Foldable.$fFoldable:*:_$csum_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6Z86_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.761059823 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cminimum_closure" {
     Data.Foldable.$fFoldable:*:_$cminimum_closure:
         const Data.Foldable.$fFoldable:*:_$cminimum_info;
         const 0;
 },
 $dMonoid_s6Ywp_entry() //  [R1]
         { []
         }
     {offset
       c70pX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70pY; else goto c70pZ;
       c70pY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70pZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6Ywp_info" {
     $dMonoid_s6Ywp_info:
         const $dMonoid_s6Ywp_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+576;
 },
 sat_s6YwB_entry() //  [R1, R2]
         { []
         }
     {offset
       c70q8: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c70q9; else goto c70qa;
       c70q9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c70qa: // global
           I64[Sp - 40] = block_c70q5_info;
           _s6Ywm::P64 = P64[R1 + 7];
           _s6Ywn::P64 = P64[R1 + 15];
           _s6Ywo::P64 = P64[R1 + 23];
           _s6Ywp::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s6Ywm::P64;
           P64[Sp - 24] = _s6Ywn::P64;
           P64[Sp - 16] = _s6Ywo::P64;
           P64[Sp - 8] = _s6Ywp::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u70r2; else goto c70q6;
       u70r2: // global
           call _c70q5(R1) args: 0, res: 0, upd: 0;
       c70q6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YwB_info" {
     sat_s6YwB_info:
         const sat_s6YwB_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S6Z86_srt+584;
 },
 _c70q5() //  [R1]
         { []
         }
     {offset
       c70q5: // global
           I64[Sp] = block_c70qd_info;
           R2 = P64[Sp + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[Sp + 32];
           P64[Sp - 16] = GHC.Base.Just_closure+1;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c70q5_info" {
     block_c70q5_info:
         const _c70q5;
         const 4;
         const 4294967326;
         const S6Z86_srt+584;
 },
 _c70qd() //  [R1]
         { []
         }
     {offset
       c70qd: // global
           _s6Ywm::P64 = P64[Sp + 8];
           _s6Ywp::P64 = P64[Sp + 32];
           _s6Yws::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c70ql; else goto c70qA;
       c70ql: // global
           I64[Sp + 32] = block_c70qi_info;
           R2 = _s6Ywm::P64;
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _s6Ywp::P64;
           P64[Sp + 16] = GHC.Base.Just_closure+1;
           P64[Sp + 24] = _s6Yws::P64;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
       c70qA: // global
           I64[Sp + 16] = block_c70qy_info;
           R2 = _s6Ywm::P64;
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = _s6Ywp::P64;
           P64[Sp] = GHC.Base.Just_closure+1;
           P64[Sp + 8] = _s6Yws::P64;
           P64[Sp + 32] = P64[R1 + 6];
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c70qd_info" {
     block_c70qd_info:
         const _c70qd;
         const 4;
         const 4294967326;
         const S6Z86_srt+584;
 },
 _c70qi() //  [R1]
         { []
         }
     {offset
       c70qi: // global
           if (R1 & 7 == 1) goto c70qr; else goto c70qv;
       c70qr: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c70qv: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70qi_info" {
     block_c70qi_info:
         const _c70qi;
         const 0;
         const 4294967326;
         const S6Z86_srt+584;
 },
 _c70qy() //  [R1]
         { []
         }
     {offset
       c70qy: // global
           if (R1 & 7 == 1) goto u70r0; else goto c70qL;
       u70r0: // global
           Sp = Sp + 16;
           call _c70qR() args: 0, res: 0, upd: 0;
       c70qL: // global
           I64[Sp] = block_c70qJ_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           _s6Ywz::P64 = P64[R1 + 6];
           P64[Sp - 16] = _s6Ywz::P64;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp + 8] = _s6Ywz::P64;
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c70qy_info" {
     block_c70qy_info:
         const _c70qy;
         const 2;
         const 30;
 },
 _c70qJ() //  [R1]
         { []
         }
     {offset
       c70qJ: // global
           if (R1 & 7 == 1) goto u70r1; else goto c70qV;
       u70r1: // global
           Sp = Sp + 16;
           call _c70qR() args: 0, res: 0, upd: 0;
       c70qV: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70qJ_info" {
     block_c70qJ_info:
         const _c70qJ;
         const 2;
         const 30;
 },
 _c70qR() //  []
         { []
         }
     {offset
       c70qR: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Foldable.$fFoldable:*:_$cminimum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70r5: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c70r9; else goto c70r8;
       c70r9: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cminimum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70r8: // global
           I64[Hp - 56] = $dMonoid_s6Ywp_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_s6YwB_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cminimum_info" {
     Data.Foldable.$fFoldable:*:_$cminimum_info:
         const Data.Foldable.$fFoldable:*:_$cminimum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S6Z86_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.780935909 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cmaximum_closure" {
     Data.Foldable.$fFoldable:*:_$cmaximum_closure:
         const Data.Foldable.$fFoldable:*:_$cmaximum_info;
         const 0;
 },
 $dMonoid_s6YwF_entry() //  [R1]
         { []
         }
     {offset
       c70sj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70sk; else goto c70sl;
       c70sk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70sl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6YwF_info" {
     $dMonoid_s6YwF_info:
         const $dMonoid_s6YwF_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+600;
 },
 sat_s6YwR_entry() //  [R1, R2]
         { []
         }
     {offset
       c70su: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c70sv; else goto c70sw;
       c70sv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c70sw: // global
           I64[Sp - 40] = block_c70sr_info;
           _s6YwC::P64 = P64[R1 + 7];
           _s6YwD::P64 = P64[R1 + 15];
           _s6YwE::P64 = P64[R1 + 23];
           _s6YwF::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s6YwC::P64;
           P64[Sp - 24] = _s6YwD::P64;
           P64[Sp - 16] = _s6YwE::P64;
           P64[Sp - 8] = _s6YwF::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u70to; else goto c70ss;
       u70to: // global
           call _c70sr(R1) args: 0, res: 0, upd: 0;
       c70ss: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YwR_info" {
     sat_s6YwR_info:
         const sat_s6YwR_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S6Z86_srt+608;
 },
 _c70sr() //  [R1]
         { []
         }
     {offset
       c70sr: // global
           I64[Sp] = block_c70sz_info;
           R2 = P64[Sp + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[Sp + 32];
           P64[Sp - 16] = GHC.Base.Just_closure+1;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c70sr_info" {
     block_c70sr_info:
         const _c70sr;
         const 4;
         const 4294967326;
         const S6Z86_srt+608;
 },
 _c70sz() //  [R1]
         { []
         }
     {offset
       c70sz: // global
           _s6YwC::P64 = P64[Sp + 8];
           _s6YwF::P64 = P64[Sp + 32];
           _s6YwI::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c70sH; else goto c70sW;
       c70sH: // global
           I64[Sp + 32] = block_c70sE_info;
           R2 = _s6YwC::P64;
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _s6YwF::P64;
           P64[Sp + 16] = GHC.Base.Just_closure+1;
           P64[Sp + 24] = _s6YwI::P64;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
       c70sW: // global
           I64[Sp + 16] = block_c70sU_info;
           R2 = _s6YwC::P64;
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = _s6YwF::P64;
           P64[Sp] = GHC.Base.Just_closure+1;
           P64[Sp + 8] = _s6YwI::P64;
           P64[Sp + 32] = P64[R1 + 6];
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c70sz_info" {
     block_c70sz_info:
         const _c70sz;
         const 4;
         const 4294967326;
         const S6Z86_srt+608;
 },
 _c70sE() //  [R1]
         { []
         }
     {offset
       c70sE: // global
           if (R1 & 7 == 1) goto c70sN; else goto c70sR;
       c70sN: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c70sR: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70sE_info" {
     block_c70sE_info:
         const _c70sE;
         const 0;
         const 4294967326;
         const S6Z86_srt+608;
 },
 _c70sU() //  [R1]
         { []
         }
     {offset
       c70sU: // global
           if (R1 & 7 == 1) goto u70tm; else goto c70t7;
       u70tm: // global
           Sp = Sp + 16;
           call _c70td() args: 0, res: 0, upd: 0;
       c70t7: // global
           I64[Sp] = block_c70t5_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           _s6YwP::P64 = P64[R1 + 6];
           P64[Sp - 16] = _s6YwP::P64;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp + 8] = _s6YwP::P64;
           Sp = Sp - 24;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c70sU_info" {
     block_c70sU_info:
         const _c70sU;
         const 2;
         const 30;
 },
 _c70t5() //  [R1]
         { []
         }
     {offset
       c70t5: // global
           if (R1 & 7 == 1) goto u70tn; else goto c70th;
       u70tn: // global
           Sp = Sp + 16;
           call _c70td() args: 0, res: 0, upd: 0;
       c70th: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70t5_info" {
     block_c70t5_info:
         const _c70t5;
         const 2;
         const 30;
 },
 _c70td() //  []
         { []
         }
     {offset
       c70td: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Foldable.$fFoldable:*:_$cmaximum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70tr: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c70tv; else goto c70tu;
       c70tv: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cmaximum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70tu: // global
           I64[Hp - 56] = $dMonoid_s6YwF_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_s6YwR_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cmaximum_info" {
     Data.Foldable.$fFoldable:*:_$cmaximum_info:
         const Data.Foldable.$fFoldable:*:_$cmaximum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S6Z86_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.804512908 UTC

[section ""data" . Data.Foldable.$w$cfoldr1_closure" {
     Data.Foldable.$w$cfoldr1_closure:
         const Data.Foldable.$w$cfoldr1_info;
         const 0;
 },
 sat_s6Yx2_entry() //  [R1]
         { []
         }
     {offset
       c70uR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c70uS; else goto c70uT;
       c70uS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70uT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c70uK_info;
           _s6YwU::P64 = P64[R1 + 16];
           _s6YwY::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6YwU::P64;
           P64[Sp - 24] = _s6YwY::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u70v0; else goto c70uL;
       u70v0: // global
           call _c70uK(R1) args: 0, res: 0, upd: 0;
       c70uL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Yx2_info" {
     sat_s6Yx2_info:
         const sat_s6Yx2_entry;
         const 3;
         const 15;
 },
 _c70uK() //  [R1]
         { []
         }
     {offset
       c70uK: // global
           _s6YwY::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c70uO; else goto c70uP;
       c70uO: // global
           R1 = _s6YwY::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c70uP: // global
           R3 = P64[R1 + 6];
           R2 = _s6YwY::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c70uK_info" {
     block_c70uK_info:
         const _c70uK;
         const 2;
         const 30;
 },
 f1_s6YwX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c70v2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c70v6; else goto c70v5;
       c70v6: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70v5: // global
           _s6YwU::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6Yx2_info;
           P64[Hp - 32] = _s6YwU::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f1_s6YwX_info" {
     f1_s6YwX_info:
         const f1_s6YwX_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Yx3_entry() //  [R1]
         { []
         }
     {offset
       c70vb: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c70vc; else goto c70vd;
       c70vc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70vd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = GHC.Base.Nothing_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 48;
           call Data.Foldable.foldr_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Yx3_info" {
     sat_s6Yx3_info:
         const sat_s6Yx3_entry;
         const 3;
         const 15;
 },
 Data.Foldable.$w$cfoldr1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c70vk: // global
           _s6YwW::P64 = R6;
           _s6YwV::P64 = R5;
           _s6YwU::P64 = R4;
           _s6YwT::P64 = R3;
           _s6YwS::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c70vl; else goto c70vm;
       c70vm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c70vo; else goto c70vn;
       c70vo: // global
           HpAlloc = 56;
           goto c70vl;
       c70vl: // global
           R6 = _s6YwW::P64;
           R5 = _s6YwV::P64;
           R4 = _s6YwU::P64;
           R3 = _s6YwT::P64;
           R2 = _s6YwS::P64;
           R1 = Data.Foldable.$w$cfoldr1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70vn: // global
           I64[Hp - 48] = f1_s6YwX_info;
           P64[Hp - 40] = _s6YwU::P64;
           I64[Hp - 32] = sat_s6Yx3_info;
           P64[Hp - 16] = _s6YwT::P64;
           P64[Hp - 8] = _s6YwW::P64;
           _c70uB::P64 = Hp - 46;
           P64[Hp] = _c70uB::P64;
           I64[Sp - 8] = block_c70ve_info;
           R2 = _s6YwS::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = _c70uB::P64;
           P64[Sp - 24] = Hp - 32;
           P64[Sp - 16] = _s6YwV::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldr1_info" {
     Data.Foldable.$w$cfoldr1_info:
         const Data.Foldable.$w$cfoldr1_entry;
         const 0;
         const 281479271677966;
         const 21474836505;
         const S6Z86_srt+496;
 },
 _c70ve() //  [R1]
         { []
         }
     {offset
       c70ve: // global
           if (R1 & 7 == 1) goto c70vh; else goto c70vi;
       c70vh: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c70vi: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70ve_info" {
     block_c70ve_info:
         const _c70ve;
         const 0;
         const 4294967326;
         const S6Z86_srt+496;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.819099931 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cfoldr1_closure" {
     Data.Foldable.$fFoldable:*:_$cfoldr1_closure:
         const Data.Foldable.$fFoldable:*:_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldable:*:_$cfoldr1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c70wk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c70wl; else goto c70wm;
       c70wl: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cfoldr1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70wm: // global
           I64[Sp - 32] = block_c70wh_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u70wq; else goto c70wi;
       u70wq: // global
           call _c70wh(R1) args: 0, res: 0, upd: 0;
       c70wi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cfoldr1_info" {
     Data.Foldable.$fFoldable:*:_$cfoldr1_info:
         const Data.Foldable.$fFoldable:*:_$cfoldr1_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S6Z86_srt+624;
 },
 _c70wh() //  [R1]
         { []
         }
     {offset
       c70wh: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Foldable.$w$cfoldr1_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70wh_info" {
     block_c70wh_info:
         const _c70wh;
         const 3;
         const 4294967326;
         const S6Z86_srt+624;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.827011776 UTC

[section ""data" . Data.Foldable.$w$cfoldl'_closure" {
     Data.Foldable.$w$cfoldl'_closure:
         const Data.Foldable.$w$cfoldl'_info;
 },
 f1_s6Yxj_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c70wM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70wN; else goto c70wO;
       c70wN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70wO: // global
           I64[Sp - 16] = block_c70wK_info;
           _s6Yxl::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6Yxl::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . f1_s6Yxj_info" {
     f1_s6Yxj_info:
         const f1_s6Yxj_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c70wK() //  [R1]
         { []
         }
     {offset
       c70wK: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70wK_info" {
     block_c70wK_info:
         const _c70wK;
         const 1;
         const 30;
 },
 sat_s6Yxo_entry() //  [R1]
         { []
         }
     {offset
       c70wU: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c70wV; else goto c70wW;
       c70wV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70wW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = GHC.Base.id_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 48;
           call Data.Foldable.foldr_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Yxo_info" {
     sat_s6Yxo_info:
         const sat_s6Yxo_entry;
         const 3;
         const 15;
 },
 Data.Foldable.$w$cfoldl'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c70wX: // global
           _s6Yxh::P64 = R6;
           _s6Yxg::P64 = R5;
           _s6Yxf::P64 = R4;
           _s6Yxe::P64 = R3;
           _s6Yxd::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c70wY; else goto c70wZ;
       c70wZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c70x1; else goto c70x0;
       c70x1: // global
           HpAlloc = 56;
           goto c70wY;
       c70wY: // global
           R6 = _s6Yxh::P64;
           R5 = _s6Yxg::P64;
           R4 = _s6Yxf::P64;
           R3 = _s6Yxe::P64;
           R2 = _s6Yxd::P64;
           R1 = Data.Foldable.$w$cfoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c70x0: // global
           I64[Hp - 48] = f1_s6Yxj_info;
           P64[Hp - 40] = _s6Yxf::P64;
           I64[Hp - 32] = sat_s6Yxo_info;
           P64[Hp - 16] = _s6Yxe::P64;
           P64[Hp - 8] = P64[Sp];
           _c70wF::P64 = Hp - 45;
           P64[Hp] = _c70wF::P64;
           R2 = _s6Yxd::P64;
           I64[Sp - 32] = stg_ap_pppp_info;
           P64[Sp - 24] = _c70wF::P64;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _s6Yxh::P64;
           P64[Sp] = _s6Yxg::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldl'_info" {
     Data.Foldable.$w$cfoldl'_info:
         const Data.Foldable.$w$cfoldl'_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.838290403 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cfoldl'_closure" {
     Data.Foldable.$fFoldable:*:_$cfoldl'_closure:
         const Data.Foldable.$fFoldable:*:_$cfoldl'_info;
 },
 Data.Foldable.$fFoldable:*:_$cfoldl'_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c70xB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c70xC; else goto c70xD;
       c70xC: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cfoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70xD: // global
           I64[Sp - 40] = block_c70xy_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u70xH; else goto c70xz;
       u70xH: // global
           call _c70xy(R1) args: 0, res: 0, upd: 0;
       c70xz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cfoldl'_info" {
     Data.Foldable.$fFoldable:*:_$cfoldl'_info:
         const Data.Foldable.$fFoldable:*:_$cfoldl'_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c70xy() //  [R1]
         { []
         }
     {offset
       c70xy: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Foldable.$w$cfoldl'_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70xy_info" {
     block_c70xy_info:
         const _c70xy;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.846260423 UTC

[section ""data" . Data.Foldable.$fFoldableM2_closure" {
     Data.Foldable.$fFoldableM2_closure:
         const Data.Foldable.$fFoldableM2_info;
 },
 Data.Foldable.$fFoldableM2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70y0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70y7; else goto c70y8;
       c70y7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70y8: // global
           I64[Sp - 16] = block_c70xX_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u70yc; else goto c70xY;
       u70yc: // global
           call _c70xX(R1) args: 0, res: 0, upd: 0;
       c70xY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM2_info" {
     Data.Foldable.$fFoldableM2_info:
         const Data.Foldable.$fFoldableM2_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c70xX() //  [R1]
         { []
         }
     {offset
       c70xX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c70yb; else goto c70ya;
       c70yb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c70ya: // global
           _s6YxC::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s6YxC::I64;
           R2 = Hp - 7;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70xX_info" {
     block_c70xX_info:
         const _c70xX;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.853102093 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$clength_closure" {
     Data.Foldable.$fFoldable:*:_$clength_closure:
         const Data.Foldable.$fFoldable:*:_$clength_info;
 },
 sat_s6YxK_entry() //  [R1]
         { []
         }
     {offset
       c70yC: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c70yD; else goto c70yE;
       c70yD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70yE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Foldable.$fFoldableM2_closure+3;
           P64[Sp - 32] = GHC.Base.id_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 48;
           call Data.Foldable.foldr_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YxK_info" {
     sat_s6YxK_info:
         const sat_s6YxK_entry;
         const 2;
         const 18;
 },
 Data.Foldable.$fFoldable:*:_$clength_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70yF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c70yG; else goto c70yH;
       c70yG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$clength_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70yH: // global
           I64[Sp - 24] = block_c70yt_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u70yL; else goto c70yu;
       u70yL: // global
           call _c70yt(R1) args: 0, res: 0, upd: 0;
       c70yu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$clength_info" {
     Data.Foldable.$fFoldable:*:_$clength_info:
         const Data.Foldable.$fFoldable:*:_$clength_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c70yt() //  [R1]
         { []
         }
     {offset
       c70yt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c70yK; else goto c70yJ;
       c70yK: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c70yJ: // global
           _s6YxI::P64 = P64[R1 + 7];
           _s6YxJ::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s6YxK_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s6YxJ::P64;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_pppp_info;
           P64[Sp - 8] = Data.Foldable.$fFoldableM2_closure+3;
           P64[Sp] = Hp - 24;
           P64[Sp + 8] = _s6YxI::P64;
           P64[Sp + 16] = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp - 16;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70yt_info" {
     block_c70yt_info:
         const _c70yt;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.86177063 UTC

[section ""data" . Data.Foldable.$w$cfoldl_closure" {
     Data.Foldable.$w$cfoldl_closure:
         const Data.Foldable.$w$cfoldl_info;
         const 0;
 },
 f1_s6YxR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c70zl: // global
           _s6YxT::P64 = R3;
           R3 = R2;
           R2 = _s6YxT::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f1_s6YxR_info" {
     f1_s6YxR_info:
         const f1_s6YxR_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6YxU_entry() //  [R1]
         { []
         }
     {offset
       c70zs: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c70zt; else goto c70zu;
       c70zt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70zu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YxU_info" {
     sat_s6YxU_info:
         const sat_s6YxU_entry;
         const 4;
         const 4294967311;
         const S6Z86_srt+640;
 },
 Data.Foldable.$w$cfoldl_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c70zv: // global
           _s6YxP::P64 = R6;
           _s6YxO::P64 = R5;
           _s6YxN::P64 = R4;
           _s6YxM::P64 = R3;
           _s6YxL::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c70zw; else goto c70zx;
       c70zx: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c70zz; else goto c70zy;
       c70zz: // global
           HpAlloc = 64;
           goto c70zw;
       c70zw: // global
           R6 = _s6YxP::P64;
           R5 = _s6YxO::P64;
           R4 = _s6YxN::P64;
           R3 = _s6YxM::P64;
           R2 = _s6YxL::P64;
           R1 = Data.Foldable.$w$cfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c70zy: // global
           I64[Hp - 56] = f1_s6YxR_info;
           P64[Hp - 48] = _s6YxN::P64;
           I64[Hp - 40] = sat_s6YxU_info;
           P64[Hp - 24] = _s6YxL::P64;
           P64[Hp - 16] = _s6YxO::P64;
           P64[Hp - 8] = _s6YxP::P64;
           _c70zg::P64 = Hp - 54;
           P64[Hp] = _c70zg::P64;
           R2 = _s6YxM::P64;
           I64[Sp - 32] = stg_ap_pppp_info;
           P64[Sp - 24] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 16] = _c70zg::P64;
           P64[Sp - 8] = P64[Sp];
           P64[Sp] = Hp - 40;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldl_info" {
     Data.Foldable.$w$cfoldl_info:
         const Data.Foldable.$w$cfoldl_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const S6Z86_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.870101659 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cfoldl_closure" {
     Data.Foldable.$fFoldable:*:_$cfoldl_closure:
         const Data.Foldable.$fFoldable:*:_$cfoldl_info;
         const 0;
 },
 Data.Foldable.$fFoldable:*:_$cfoldl_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c70A5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c70A6; else goto c70A7;
       c70A6: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70A7: // global
           I64[Sp - 40] = block_c70A2_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u70Ab; else goto c70A3;
       u70Ab: // global
           call _c70A2(R1) args: 0, res: 0, upd: 0;
       c70A3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cfoldl_info" {
     Data.Foldable.$fFoldable:*:_$cfoldl_info:
         const Data.Foldable.$fFoldable:*:_$cfoldl_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const S6Z86_srt+648;
 },
 _c70A2() //  [R1]
         { []
         }
     {offset
       c70A2: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Foldable.$w$cfoldl_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70A2_info" {
     block_c70A2_info:
         const _c70A2;
         const 4;
         const 4294967326;
         const S6Z86_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.878279752 UTC

[section ""data" . Data.Foldable.$w$cfoldl1_closure" {
     Data.Foldable.$w$cfoldl1_closure:
         const Data.Foldable.$w$cfoldl1_info;
         const 0;
 },
 sat_s6Yyd_entry() //  [R1]
         { []
         }
     {offset
       c70AH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c70AI; else goto c70AJ;
       c70AI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70AJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c70AA_info;
           _s6Yy5::P64 = P64[R1 + 16];
           _s6Yy9::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6Yy5::P64;
           P64[Sp - 24] = _s6Yy9::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u70AQ; else goto c70AB;
       u70AQ: // global
           call _c70AA(R1) args: 0, res: 0, upd: 0;
       c70AB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Yyd_info" {
     sat_s6Yyd_info:
         const sat_s6Yyd_entry;
         const 3;
         const 15;
 },
 _c70AA() //  [R1]
         { []
         }
     {offset
       c70AA: // global
           _s6Yy9::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c70AE; else goto c70AF;
       c70AE: // global
           R1 = _s6Yy9::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c70AF: // global
           R3 = _s6Yy9::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c70AA_info" {
     block_c70AA_info:
         const _c70AA;
         const 2;
         const 30;
 },
 f1_s6Yy8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c70AS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c70AW; else goto c70AV;
       c70AW: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70AV: // global
           _s6Yy5::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6Yyd_info;
           P64[Hp - 32] = _s6Yy5::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f1_s6Yy8_info" {
     f1_s6Yy8_info:
         const f1_s6Yy8_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6Yye_entry() //  [R1]
         { []
         }
     {offset
       c70B1: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c70B2; else goto c70B3;
       c70B2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70B3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Yye_info" {
     sat_s6Yye_info:
         const sat_s6Yye_entry;
         const 3;
         const 4294967311;
         const S6Z86_srt+640;
 },
 Data.Foldable.$w$cfoldl1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c70Ba: // global
           _s6Yy7::P64 = R6;
           _s6Yy6::P64 = R5;
           _s6Yy5::P64 = R4;
           _s6Yy4::P64 = R3;
           _s6Yy3::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c70Bb; else goto c70Bc;
       c70Bc: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c70Be; else goto c70Bd;
       c70Be: // global
           HpAlloc = 56;
           goto c70Bb;
       c70Bb: // global
           R6 = _s6Yy7::P64;
           R5 = _s6Yy6::P64;
           R4 = _s6Yy5::P64;
           R3 = _s6Yy4::P64;
           R2 = _s6Yy3::P64;
           R1 = Data.Foldable.$w$cfoldl1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70Bd: // global
           I64[Hp - 48] = f1_s6Yy8_info;
           P64[Hp - 40] = _s6Yy5::P64;
           I64[Hp - 32] = sat_s6Yye_info;
           P64[Hp - 16] = _s6Yy3::P64;
           P64[Hp - 8] = _s6Yy6::P64;
           _c70Ar::P64 = Hp - 46;
           P64[Hp] = _c70Ar::P64;
           I64[Sp - 8] = block_c70B4_info;
           R2 = _s6Yy4::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           P64[Sp - 40] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 32] = _c70Ar::P64;
           P64[Sp - 24] = _s6Yy7::P64;
           P64[Sp - 16] = Hp - 32;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldl1_info" {
     Data.Foldable.$w$cfoldl1_info:
         const Data.Foldable.$w$cfoldl1_entry;
         const 0;
         const 324259177465643022;
         const 21474836505;
         const S6Z86_srt+456;
 },
 _c70B4() //  [R1]
         { []
         }
     {offset
       c70B4: // global
           if (R1 & 7 == 1) goto c70B7; else goto c70B8;
       c70B7: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c70B8: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70B4_info" {
     block_c70B4_info:
         const _c70B4;
         const 0;
         const 4294967326;
         const S6Z86_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.8937688 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cfoldl1_closure" {
     Data.Foldable.$fFoldable:*:_$cfoldl1_closure:
         const Data.Foldable.$fFoldable:*:_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldable:*:_$cfoldl1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c70Cc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c70Cd; else goto c70Ce;
       c70Cd: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cfoldl1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70Ce: // global
           I64[Sp - 32] = block_c70C9_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u70Ci; else goto c70Ca;
       u70Ci: // global
           call _c70C9(R1) args: 0, res: 0, upd: 0;
       c70Ca: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cfoldl1_info" {
     Data.Foldable.$fFoldable:*:_$cfoldl1_info:
         const Data.Foldable.$fFoldable:*:_$cfoldl1_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S6Z86_srt+664;
 },
 _c70C9() //  [R1]
         { []
         }
     {offset
       c70C9: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Foldable.$w$cfoldl1_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70C9_info" {
     block_c70C9_info:
         const _c70C9;
         const 3;
         const 4294967326;
         const S6Z86_srt+664;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.901148052 UTC

[section ""data" . Data.Foldable.$w$cfoldr'_closure" {
     Data.Foldable.$w$cfoldr'_closure:
         const Data.Foldable.$w$cfoldr'_info;
         const 0;
 },
 f1_s6Yyu_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c70CE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70CF; else goto c70CG;
       c70CF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70CG: // global
           I64[Sp - 16] = block_c70CC_info;
           _s6Yyw::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6Yyw::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . f1_s6Yyu_info" {
     f1_s6Yyu_info:
         const f1_s6Yyu_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c70CC() //  [R1]
         { []
         }
     {offset
       c70CC: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70CC_info" {
     block_c70CC_info:
         const _c70CC;
         const 1;
         const 30;
 },
 sat_s6Yyz_entry() //  [R1]
         { []
         }
     {offset
       c70CM: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c70CN; else goto c70CO;
       c70CN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70CO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.id_closure+1;
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Yyz_info" {
     sat_s6Yyz_info:
         const sat_s6Yyz_entry;
         const 3;
         const 4294967311;
         const S6Z86_srt+640;
 },
 Data.Foldable.$w$cfoldr'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c70CP: // global
           _s6Yys::P64 = R6;
           _s6Yyr::P64 = R5;
           _s6Yyq::P64 = R4;
           _s6Yyp::P64 = R3;
           _s6Yyo::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c70CQ; else goto c70CR;
       c70CR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c70CT; else goto c70CS;
       c70CT: // global
           HpAlloc = 56;
           goto c70CQ;
       c70CQ: // global
           R6 = _s6Yys::P64;
           R5 = _s6Yyr::P64;
           R4 = _s6Yyq::P64;
           R3 = _s6Yyp::P64;
           R2 = _s6Yyo::P64;
           R1 = Data.Foldable.$w$cfoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c70CS: // global
           I64[Hp - 48] = f1_s6Yyu_info;
           P64[Hp - 40] = _s6Yyq::P64;
           I64[Hp - 32] = sat_s6Yyz_info;
           P64[Hp - 16] = _s6Yyo::P64;
           P64[Hp - 8] = _s6Yys::P64;
           _c70Cx::P64 = Hp - 45;
           P64[Hp] = _c70Cx::P64;
           R2 = _s6Yyp::P64;
           I64[Sp - 40] = stg_ap_ppppp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 24] = _c70Cx::P64;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = Hp - 32;
           P64[Sp] = _s6Yyr::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldr'_info" {
     Data.Foldable.$w$cfoldr'_info:
         const Data.Foldable.$w$cfoldr'_entry;
         const 0;
         const 141733920782;
         const 25769803802;
         const S6Z86_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.912060121 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cfoldr'_closure" {
     Data.Foldable.$fFoldable:*:_$cfoldr'_closure:
         const Data.Foldable.$fFoldable:*:_$cfoldr'_info;
         const 0;
 },
 Data.Foldable.$fFoldable:*:_$cfoldr'_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c70Dv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c70Dw; else goto c70Dx;
       c70Dw: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cfoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70Dx: // global
           I64[Sp - 40] = block_c70Ds_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u70DB; else goto c70Dt;
       u70DB: // global
           call _c70Ds(R1) args: 0, res: 0, upd: 0;
       c70Dt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cfoldr'_info" {
     Data.Foldable.$fFoldable:*:_$cfoldr'_info:
         const Data.Foldable.$fFoldable:*:_$cfoldr'_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const S6Z86_srt+680;
 },
 _c70Ds() //  [R1]
         { []
         }
     {offset
       c70Ds: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Foldable.$w$cfoldr'_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70Ds_info" {
     block_c70Ds_info:
         const _c70Ds;
         const 4;
         const 4294967326;
         const S6Z86_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.919025375 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cfold_closure" {
     Data.Foldable.$fFoldable:*:_$cfold_closure:
         const Data.Foldable.$fFoldable:*:_$cfold_info;
 },
 Data.Foldable.$fFoldable:*:_$cfold_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c70DU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c70DV; else goto c70DW;
       c70DV: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cfold_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70DW: // global
           I64[Sp - 32] = block_c70DR_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u70E0; else goto c70DS;
       u70E0: // global
           call _c70DR(R1) args: 0, res: 0, upd: 0;
       c70DS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cfold_info" {
     Data.Foldable.$fFoldable:*:_$cfold_info:
         const Data.Foldable.$fFoldable:*:_$cfold_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c70DR() //  [R1]
         { []
         }
     {offset
       c70DR: // global
           R6 = P64[R1 + 7];
           R5 = GHC.Base.id_closure+1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp + 24;
           call Data.Foldable.$w$cfoldMap_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70DR_info" {
     block_c70DR_info:
         const _c70DR;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.928591466 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$cproduct_closure" {
     Data.Foldable.$fFoldable:*:_$cproduct_closure:
         const Data.Foldable.$fFoldable:*:_$cproduct_info;
         const 0;
 },
 $dMonoid_s6YyS_entry() //  [R1]
         { []
         }
     {offset
       c70El: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70Em; else goto c70En;
       c70Em: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70En: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6YyS_info" {
     $dMonoid_s6YyS_info:
         const $dMonoid_s6YyS_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+696;
 },
 sat_s6YyY_entry() //  [R1]
         { []
         }
     {offset
       c70EC: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c70ED; else goto c70EE;
       c70ED: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70EE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YyY_info" {
     sat_s6YyY_info:
         const sat_s6YyY_entry;
         const 3;
         const 15;
 },
 sat_s6YyX_entry() //  [R1]
         { []
         }
     {offset
       c70EJ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c70EK; else goto c70EL;
       c70EK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70EL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YyX_info" {
     sat_s6YyX_info:
         const sat_s6YyX_entry;
         const 3;
         const 15;
 },
 sat_s6YyZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c70EM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c70EN; else goto c70EO;
       c70EN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c70EO: // global
           I64[Sp - 40] = block_c70Et_info;
           _s6YyP::P64 = P64[R1 + 7];
           _s6YyQ::P64 = P64[R1 + 15];
           _s6YyR::P64 = P64[R1 + 23];
           _s6YyS::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s6YyP::P64;
           P64[Sp - 24] = _s6YyQ::P64;
           P64[Sp - 16] = _s6YyR::P64;
           P64[Sp - 8] = _s6YyS::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u70ES; else goto c70Eu;
       u70ES: // global
           call _c70Et(R1) args: 0, res: 0, upd: 0;
       c70Eu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YyZ_info" {
     sat_s6YyZ_info:
         const sat_s6YyZ_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c70Et() //  [R1]
         { []
         }
     {offset
       c70Et: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c70ER; else goto c70EQ;
       c70ER: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c70EQ: // global
           _s6YyV::P64 = P64[R1 + 7];
           _s6YyW::P64 = P64[R1 + 15];
           I64[Hp - 72] = sat_s6YyY_info;
           P64[Hp - 56] = P64[Sp + 16];
           _s6YyS::P64 = P64[Sp + 32];
           P64[Hp - 48] = _s6YyS::P64;
           P64[Hp - 40] = _s6YyW::P64;
           I64[Hp - 32] = sat_s6YyX_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s6YyS::P64;
           P64[Hp] = _s6YyV::P64;
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 72;
           Sp = Sp + 16;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70Et_info" {
     block_c70Et_info:
         const _c70Et;
         const 4;
         const 30;
 },
 Data.Foldable.$fFoldable:*:_$cproduct_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70ET: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c70EX; else goto c70EW;
       c70EX: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$cproduct_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70EW: // global
           I64[Hp - 56] = $dMonoid_s6YyS_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_s6YyZ_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$cproduct_info" {
     Data.Foldable.$fFoldable:*:_$cproduct_info:
         const Data.Foldable.$fFoldable:*:_$cproduct_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6Z86_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.943186743 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_$ctoList_closure" {
     Data.Foldable.$fFoldable:*:_$ctoList_closure:
         const Data.Foldable.$fFoldable:*:_$ctoList_info;
 },
 sat_s6Yz6_entry() //  [R1]
         { []
         }
     {offset
       c70FW: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c70FX; else goto c70FY;
       c70FX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70FY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = GHC.Types.:_closure+2;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 48;
           call Data.Foldable.foldr_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6Yz6_info" {
     sat_s6Yz6_info:
         const sat_s6Yz6_entry;
         const 2;
         const 18;
 },
 Data.Foldable.$fFoldable:*:_$ctoList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70FZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c70G0; else goto c70G1;
       c70G0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_$ctoList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70G1: // global
           I64[Sp - 24] = block_c70FN_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u70G5; else goto c70FO;
       u70G5: // global
           call _c70FN(R1) args: 0, res: 0, upd: 0;
       c70FO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_$ctoList_info" {
     Data.Foldable.$fFoldable:*:_$ctoList_info:
         const Data.Foldable.$fFoldable:*:_$ctoList_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c70FN() //  [R1]
         { []
         }
     {offset
       c70FN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c70G4; else goto c70G3;
       c70G4: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c70G3: // global
           _s6Yz4::P64 = P64[R1 + 7];
           _s6Yz5::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s6Yz6_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s6Yz5::P64;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = GHC.Types.:_closure+2;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = _s6Yz4::P64;
           Sp = Sp - 8;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70FN_info" {
     block_c70FN_info:
         const _c70FN;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.956244692 UTC

[section ""data" . Data.Foldable.$fFoldable:*:_closure" {
     Data.Foldable.$fFoldable:*:_closure:
         const Data.Foldable.$fFoldable:*:_info;
         const 0;
 },
 sat_s6Yzo_entry() //  [R1, R2]
         { []
         }
     {offset
       c70GG: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:*:_$cproduct_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yzo_info" {
     sat_s6Yzo_info:
         const sat_s6Yzo_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+704;
 },
 sat_s6Yzn_entry() //  [R1, R2]
         { []
         }
     {offset
       c70GO: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:*:_$csum_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yzn_info" {
     sat_s6Yzn_info:
         const sat_s6Yzn_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+568;
 },
 sat_s6Yzm_entry() //  [R1, R2]
         { []
         }
     {offset
       c70GW: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:*:_$cminimum_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yzm_info" {
     sat_s6Yzm_info:
         const sat_s6Yzm_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+592;
 },
 sat_s6Yzl_entry() //  [R1, R2]
         { []
         }
     {offset
       c70H4: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:*:_$cmaximum_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yzl_info" {
     sat_s6Yzl_info:
         const sat_s6Yzl_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+616;
 },
 sat_s6Yzk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c70Hc: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:*:_$celem_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yzk_info" {
     sat_s6Yzk_info:
         const sat_s6Yzk_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6Z86_srt+552;
 },
 sat_s6Yzj_entry() //  [R1, R2]
         { []
         }
     {offset
       c70Hk: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:*:_$clength_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yzj_info" {
     sat_s6Yzj_info:
         const sat_s6Yzj_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6Yzi_entry() //  [R1, R2]
         { []
         }
     {offset
       c70Hs: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:*:_$cnull_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yzi_info" {
     sat_s6Yzi_info:
         const sat_s6Yzi_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6Yzh_entry() //  [R1, R2]
         { []
         }
     {offset
       c70HA: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:*:_$ctoList_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yzh_info" {
     sat_s6Yzh_info:
         const sat_s6Yzh_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6Yzg_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c70HI: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:*:_$cfoldl1_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yzg_info" {
     sat_s6Yzg_info:
         const sat_s6Yzg_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6Z86_srt+672;
 },
 sat_s6Yzf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c70HQ: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:*:_$cfoldr1_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yzf_info" {
     sat_s6Yzf_info:
         const sat_s6Yzf_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6Z86_srt+632;
 },
 sat_s6Yze_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c70HY: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:*:_$cfoldl'_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yze_info" {
     sat_s6Yze_info:
         const sat_s6Yze_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6Yzd_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c70I6: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:*:_$cfoldl_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yzd_info" {
     sat_s6Yzd_info:
         const sat_s6Yzd_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const S6Z86_srt+656;
 },
 sat_s6Yzc_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c70Ie: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:*:_$cfoldr'_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yzc_info" {
     sat_s6Yzc_info:
         const sat_s6Yzc_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const S6Z86_srt+688;
 },
 sat_s6Yzb_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c70Im: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:*:_$cfoldr_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yzb_info" {
     sat_s6Yzb_info:
         const sat_s6Yzb_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6Yza_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c70Iu: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:*:_$cfoldMap_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yza_info" {
     sat_s6Yza_info:
         const sat_s6Yza_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6Yz9_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c70IC: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:*:_$cfold_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yz9_info" {
     sat_s6Yz9_info:
         const sat_s6Yz9_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:*:_entry() //  [R2, R3]
         { []
         }
     {offset
       c70IG: // global
           Hp = Hp + 520;
           if (Hp > HpLim) (likely: False) goto c70IK; else goto c70IJ;
       c70IK: // global
           HpAlloc = 520;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:*:_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70IJ: // global
           I64[Hp - 512] = sat_s6Yzo_info;
           P64[Hp - 504] = R2;
           P64[Hp - 496] = R3;
           I64[Hp - 488] = sat_s6Yzn_info;
           P64[Hp - 480] = R2;
           P64[Hp - 472] = R3;
           I64[Hp - 464] = sat_s6Yzm_info;
           P64[Hp - 456] = R2;
           P64[Hp - 448] = R3;
           I64[Hp - 440] = sat_s6Yzl_info;
           P64[Hp - 432] = R2;
           P64[Hp - 424] = R3;
           I64[Hp - 416] = sat_s6Yzk_info;
           P64[Hp - 408] = R2;
           P64[Hp - 400] = R3;
           I64[Hp - 392] = sat_s6Yzj_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           I64[Hp - 368] = sat_s6Yzi_info;
           P64[Hp - 360] = R2;
           P64[Hp - 352] = R3;
           I64[Hp - 344] = sat_s6Yzh_info;
           P64[Hp - 336] = R2;
           P64[Hp - 328] = R3;
           I64[Hp - 320] = sat_s6Yzg_info;
           P64[Hp - 312] = R2;
           P64[Hp - 304] = R3;
           I64[Hp - 296] = sat_s6Yzf_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           I64[Hp - 272] = sat_s6Yze_info;
           P64[Hp - 264] = R2;
           P64[Hp - 256] = R3;
           I64[Hp - 248] = sat_s6Yzd_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           I64[Hp - 224] = sat_s6Yzc_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           I64[Hp - 200] = sat_s6Yzb_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_s6Yza_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_s6Yz9_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = Hp - 150;
           P64[Hp - 112] = Hp - 173;
           P64[Hp - 104] = Hp - 197;
           P64[Hp - 96] = Hp - 221;
           P64[Hp - 88] = Hp - 245;
           P64[Hp - 80] = Hp - 269;
           P64[Hp - 72] = Hp - 294;
           P64[Hp - 64] = Hp - 318;
           P64[Hp - 56] = Hp - 343;
           P64[Hp - 48] = Hp - 367;
           P64[Hp - 40] = Hp - 391;
           P64[Hp - 32] = Hp - 414;
           P64[Hp - 24] = Hp - 439;
           P64[Hp - 16] = Hp - 463;
           P64[Hp - 8] = Hp - 487;
           P64[Hp] = Hp - 511;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:*:_info" {
     Data.Foldable.$fFoldable:*:_info:
         const Data.Foldable.$fFoldable:*:_entry;
         const 0;
         const 7499927726850062;
         const 8589934607;
         const S6Z86_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:17.988793468 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$celem_closure" {
     Data.Foldable.$fFoldable:+:_$celem_closure:
         const Data.Foldable.$fFoldable:+:_$celem_info;
         const 0;
 },
 f1_s6Yzt_entry() //  [R1]
         { []
         }
     {offset
       c70Kh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c70Ki; else goto c70Kj;
       c70Ki: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70Kj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s6Yzt_info" {
     f1_s6Yzt_info:
         const f1_s6Yzt_entry;
         const 2;
         const 18;
 },
 sat_s6Yzy_entry() //  [R1, R2]
         { []
         }
     {offset
       c70Kw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c70Kx; else goto c70Ky;
       c70Kx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c70Ky: // global
           I64[Sp - 32] = block_c70Kp_info;
           _s6Yzp::P64 = P64[R1 + 7];
           _s6Yzq::P64 = P64[R1 + 15];
           _s6Yzt::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s6Yzp::P64;
           P64[Sp - 16] = _s6Yzq::P64;
           P64[Sp - 8] = _s6Yzt::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u70KF; else goto c70Kq;
       u70KF: // global
           call _c70Kp(R1) args: 0, res: 0, upd: 0;
       c70Kq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6Yzy_info" {
     sat_s6Yzy_info:
         const sat_s6Yzy_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S6Z86_srt+544;
 },
 _c70Kp() //  [R1]
         { []
         }
     {offset
       c70Kp: // global
           _s6Yzt::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c70Kt; else goto c70Ku;
       c70Kt: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp + 16] = _s6Yzt::P64;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       c70Ku: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp + 16] = _s6Yzt::P64;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70Kp_info" {
     block_c70Kp_info:
         const _c70Kp;
         const 3;
         const 4294967326;
         const S6Z86_srt+544;
 },
 Data.Foldable.$fFoldable:+:_$celem_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c70KG: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c70KK; else goto c70KJ;
       c70KK: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$celem_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70KJ: // global
           I64[Hp - 56] = f1_s6Yzt_info;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           I64[Hp - 24] = sat_s6Yzy_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$celem_info" {
     Data.Foldable.$fFoldable:+:_$celem_info:
         const Data.Foldable.$fFoldable:+:_$celem_entry;
         const 0;
         const 18014402804449294;
         const 17179869208;
         const S6Z86_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.001569064 UTC

[section ""data" . Data.Foldable.$fFoldable:+:2_closure" {
     Data.Foldable.$fFoldable:+:2_closure:
         const Data.Foldable.$fFoldable:+:2_info;
         const 0;
 },
 $dMonoid_s6YzC_entry() //  [R1]
         { []
         }
     {offset
       c70Lp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70Lq; else goto c70Lr;
       c70Lq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70Lr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6YzC_info" {
     $dMonoid_s6YzC_info:
         const $dMonoid_s6YzC_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+560;
 },
 sat_s6YzH_entry() //  [R1, R2]
         { []
         }
     {offset
       c70LE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c70LF; else goto c70LG;
       c70LF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c70LG: // global
           I64[Sp - 32] = block_c70Lx_info;
           _s6Yzz::P64 = P64[R1 + 7];
           _s6YzA::P64 = P64[R1 + 15];
           _s6YzC::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s6Yzz::P64;
           P64[Sp - 16] = _s6YzA::P64;
           P64[Sp - 8] = _s6YzC::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u70LN; else goto c70Ly;
       u70LN: // global
           call _c70Lx(R1) args: 0, res: 0, upd: 0;
       c70Ly: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YzH_info" {
     sat_s6YzH_info:
         const sat_s6YzH_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c70Lx() //  [R1]
         { []
         }
     {offset
       c70Lx: // global
           _s6YzC::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c70LB; else goto c70LC;
       c70LB: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _s6YzC::P64;
           P64[Sp + 16] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       c70LC: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _s6YzC::P64;
           P64[Sp + 16] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70Lx_info" {
     block_c70Lx_info:
         const _c70Lx;
         const 3;
         const 30;
 },
 Data.Foldable.$fFoldable:+:2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70LO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c70LS; else goto c70LR;
       c70LS: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70LR: // global
           I64[Hp - 48] = $dMonoid_s6YzC_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s6YzH_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:2_info" {
     Data.Foldable.$fFoldable:+:2_info:
         const Data.Foldable.$fFoldable:+:2_entry;
         const 0;
         const 9007203549708302;
         const 12884901911;
         const S6Z86_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.013953632 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cminimum_closure" {
     Data.Foldable.$fFoldable:+:_$cminimum_closure:
         const Data.Foldable.$fFoldable:+:_$cminimum_info;
         const 0;
 },
 g1_s6YzL_entry() //  [R1]
         { []
         }
     {offset
       c70Mv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70Mw; else goto c70Mx;
       c70Mw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70Mx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g1_s6YzL_info" {
     g1_s6YzL_info:
         const g1_s6YzL_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+576;
 },
 sat_s6YzU_entry() //  [R1, R2]
         { []
         }
     {offset
       c70MK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c70ML; else goto c70MM;
       c70ML: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c70MM: // global
           I64[Sp - 32] = block_c70MD_info;
           _s6YzI::P64 = P64[R1 + 7];
           _s6YzJ::P64 = P64[R1 + 15];
           _s6YzL::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s6YzI::P64;
           P64[Sp - 16] = _s6YzJ::P64;
           P64[Sp - 8] = _s6YzL::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u70Nj; else goto c70ME;
       u70Nj: // global
           call _c70MD(R1) args: 0, res: 0, upd: 0;
       c70ME: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YzU_info" {
     sat_s6YzU_info:
         const sat_s6YzU_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S6Z86_srt+584;
 },
 _c70MD() //  [R1]
         { []
         }
     {offset
       c70MD: // global
           _s6YzL::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c70MH; else goto c70MI;
       c70MH: // global
           I64[Sp + 24] = block_c70MP_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = _s6YzL::P64;
           P64[Sp + 8] = GHC.Base.Just_closure+1;
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
       c70MI: // global
           I64[Sp + 24] = block_c70N3_info;
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = _s6YzL::P64;
           P64[Sp + 8] = GHC.Base.Just_closure+1;
           P64[Sp + 16] = P64[R1 + 6];
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c70MD_info" {
     block_c70MD_info:
         const _c70MD;
         const 3;
         const 4294967326;
         const S6Z86_srt+584;
 },
 _c70MP() //  [R1]
         { []
         }
     {offset
       c70MP: // global
           if (R1 & 7 == 1) goto u70Ni; else goto c70N0;
       u70Ni: // global
           Sp = Sp + 8;
           call _c70Na() args: 0, res: 0, upd: 0;
       c70N0: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70MP_info" {
     block_c70MP_info:
         const _c70MP;
         const 0;
         const 4294967326;
         const S6Z86_srt+584;
 },
 _c70N3() //  [R1]
         { []
         }
     {offset
       c70N3: // global
           if (R1 & 7 == 1) goto u70Nh; else goto c70Ne;
       u70Nh: // global
           Sp = Sp + 8;
           call _c70Na() args: 0, res: 0, upd: 0;
       c70Ne: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70N3_info" {
     block_c70N3_info:
         const _c70N3;
         const 0;
         const 4294967326;
         const S6Z86_srt+584;
 },
 _c70Na() //  []
         { []
         }
     {offset
       c70Na: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Foldable.$fFoldable:+:_$cminimum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70Nm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c70Nq; else goto c70Np;
       c70Nq: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cminimum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70Np: // global
           I64[Hp - 48] = g1_s6YzL_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s6YzU_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cminimum_info" {
     Data.Foldable.$fFoldable:+:_$cminimum_info:
         const Data.Foldable.$fFoldable:+:_$cminimum_entry;
         const 0;
         const 4503612512272398;
         const 12884901911;
         const S6Z86_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.030712174 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cmaximum_closure" {
     Data.Foldable.$fFoldable:+:_$cmaximum_closure:
         const Data.Foldable.$fFoldable:+:_$cmaximum_info;
         const 0;
 },
 g1_s6YzY_entry() //  [R1]
         { []
         }
     {offset
       c70Oj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70Ok; else goto c70Ol;
       c70Ok: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70Ol: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g1_s6YzY_info" {
     g1_s6YzY_info:
         const g1_s6YzY_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+600;
 },
 sat_s6YA7_entry() //  [R1, R2]
         { []
         }
     {offset
       c70Oy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c70Oz; else goto c70OA;
       c70Oz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c70OA: // global
           I64[Sp - 32] = block_c70Or_info;
           _s6YzV::P64 = P64[R1 + 7];
           _s6YzW::P64 = P64[R1 + 15];
           _s6YzY::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s6YzV::P64;
           P64[Sp - 16] = _s6YzW::P64;
           P64[Sp - 8] = _s6YzY::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u70P7; else goto c70Os;
       u70P7: // global
           call _c70Or(R1) args: 0, res: 0, upd: 0;
       c70Os: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YA7_info" {
     sat_s6YA7_info:
         const sat_s6YA7_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S6Z86_srt+608;
 },
 _c70Or() //  [R1]
         { []
         }
     {offset
       c70Or: // global
           _s6YzY::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c70Ov; else goto c70Ow;
       c70Ov: // global
           I64[Sp + 24] = block_c70OD_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = _s6YzY::P64;
           P64[Sp + 8] = GHC.Base.Just_closure+1;
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
       c70Ow: // global
           I64[Sp + 24] = block_c70OR_info;
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = _s6YzY::P64;
           P64[Sp + 8] = GHC.Base.Just_closure+1;
           P64[Sp + 16] = P64[R1 + 6];
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c70Or_info" {
     block_c70Or_info:
         const _c70Or;
         const 3;
         const 4294967326;
         const S6Z86_srt+608;
 },
 _c70OD() //  [R1]
         { []
         }
     {offset
       c70OD: // global
           if (R1 & 7 == 1) goto u70P6; else goto c70OO;
       u70P6: // global
           Sp = Sp + 8;
           call _c70OY() args: 0, res: 0, upd: 0;
       c70OO: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70OD_info" {
     block_c70OD_info:
         const _c70OD;
         const 0;
         const 4294967326;
         const S6Z86_srt+608;
 },
 _c70OR() //  [R1]
         { []
         }
     {offset
       c70OR: // global
           if (R1 & 7 == 1) goto u70P5; else goto c70P2;
       u70P5: // global
           Sp = Sp + 8;
           call _c70OY() args: 0, res: 0, upd: 0;
       c70P2: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70OR_info" {
     block_c70OR_info:
         const _c70OR;
         const 0;
         const 4294967326;
         const S6Z86_srt+608;
 },
 _c70OY() //  []
         { []
         }
     {offset
       c70OY: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Foldable.$fFoldable:+:_$cmaximum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70Pa: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c70Pe; else goto c70Pd;
       c70Pe: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cmaximum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70Pd: // global
           I64[Hp - 48] = g1_s6YzY_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s6YA7_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cmaximum_info" {
     Data.Foldable.$fFoldable:+:_$cmaximum_info:
         const Data.Foldable.$fFoldable:+:_$cmaximum_entry;
         const 0;
         const 1125912791744526;
         const 12884901911;
         const S6Z86_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.049920919 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cfoldr1_closure" {
     Data.Foldable.$fFoldable:+:_$cfoldr1_closure:
         const Data.Foldable.$fFoldable:+:_$cfoldr1_info;
         const 0;
 },
 sat_s6YAi_entry() //  [R1]
         { []
         }
     {offset
       c70Qo: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c70Qp; else goto c70Qq;
       c70Qp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70Qq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c70Qh_info;
           _s6YAa::P64 = P64[R1 + 16];
           _s6YAe::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6YAa::P64;
           P64[Sp - 24] = _s6YAe::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u70Qx; else goto c70Qi;
       u70Qx: // global
           call _c70Qh(R1) args: 0, res: 0, upd: 0;
       c70Qi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YAi_info" {
     sat_s6YAi_info:
         const sat_s6YAi_entry;
         const 3;
         const 15;
 },
 _c70Qh() //  [R1]
         { []
         }
     {offset
       c70Qh: // global
           _s6YAe::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c70Ql; else goto c70Qm;
       c70Ql: // global
           R1 = _s6YAe::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c70Qm: // global
           R3 = P64[R1 + 6];
           R2 = _s6YAe::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c70Qh_info" {
     block_c70Qh_info:
         const _c70Qh;
         const 2;
         const 30;
 },
 sat_s6YAj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c70Qz: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c70QD; else goto c70QC;
       c70QD: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70QC: // global
           _s6YAa::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6YAi_info;
           P64[Hp - 32] = _s6YAa::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YAj_info" {
     sat_s6YAj_info:
         const sat_s6YAj_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6YAr_entry() //  [R1]
         { []
         }
     {offset
       c70QW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c70QX; else goto c70QY;
       c70QX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70QY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c70QP_info;
           _s6YAa::P64 = P64[R1 + 16];
           _s6YAn::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6YAa::P64;
           P64[Sp - 24] = _s6YAn::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u70R5; else goto c70QQ;
       u70R5: // global
           call _c70QP(R1) args: 0, res: 0, upd: 0;
       c70QQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YAr_info" {
     sat_s6YAr_info:
         const sat_s6YAr_entry;
         const 3;
         const 15;
 },
 _c70QP() //  [R1]
         { []
         }
     {offset
       c70QP: // global
           _s6YAn::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c70QT; else goto c70QU;
       c70QT: // global
           R1 = _s6YAn::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c70QU: // global
           R3 = P64[R1 + 6];
           R2 = _s6YAn::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c70QP_info" {
     block_c70QP_info:
         const _c70QP;
         const 2;
         const 30;
 },
 sat_s6YAs_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c70R7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c70Rb; else goto c70Ra;
       c70Rb: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70Ra: // global
           _s6YAa::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6YAr_info;
           P64[Hp - 32] = _s6YAa::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YAs_info" {
     sat_s6YAs_info:
         const sat_s6YAs_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:+:_$cfoldr1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c70Rg: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c70Rh; else goto c70Ri;
       c70Rh: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cfoldr1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70Ri: // global
           I64[Sp - 32] = block_c70Q3_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u70RP; else goto c70Q4;
       u70RP: // global
           call _c70Q3(R1) args: 0, res: 0, upd: 0;
       c70Q4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cfoldr1_info" {
     Data.Foldable.$fFoldable:+:_$cfoldr1_info:
         const Data.Foldable.$fFoldable:+:_$cfoldr1_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S6Z86_srt+752;
 },
 _c70Q3() //  [R1]
         { []
         }
     {offset
       c70Q3: // global
           _s6YAa::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c70Rd; else goto c70Re;
       c70Rd: // global
           Hp = Hp + 16;
           _s6YAc::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c70RA; else goto c70Rl;
       c70Rl: // global
           _s6YAd::P64 = P64[_s6YAc::P64 + 7];
           I64[Hp - 8] = sat_s6YAj_info;
           P64[Hp] = _s6YAa::P64;
           I64[Sp + 24] = block_c70Rj_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Hp - 6;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           P64[Sp + 16] = _s6YAd::P64;
           Sp = Sp - 8;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 8, upd: 8;
       c70Re: // global
           Hp = Hp + 16;
           _s6YAc::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c70RA; else goto c70Rz;
       c70RA: // global
           HpAlloc = 16;
           R1 = _s6YAc::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c70Rz: // global
           _s6YAm::P64 = P64[_s6YAc::P64 + 6];
           I64[Hp - 8] = sat_s6YAs_info;
           P64[Hp] = _s6YAa::P64;
           I64[Sp + 24] = block_c70Rx_info;
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = Hp - 6;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           P64[Sp + 16] = _s6YAm::P64;
           Sp = Sp - 8;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c70Q3_info" {
     block_c70Q3_info:
         const _c70Q3;
         const 3;
         const 4294967326;
         const S6Z86_srt+760;
 },
 _c70Rj() //  [R1]
         { []
         }
     {offset
       c70Rj: // global
           if (R1 & 7 == 1) goto u70RO; else goto c70Rw;
       u70RO: // global
           Sp = Sp + 8;
           call _c70RG() args: 0, res: 0, upd: 0;
       c70Rw: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70Rj_info" {
     block_c70Rj_info:
         const _c70Rj;
         const 0;
         const 4294967326;
         const S6Z86_srt+760;
 },
 _c70Rx() //  [R1]
         { []
         }
     {offset
       c70Rx: // global
           if (R1 & 7 == 1) goto u70RN; else goto c70RK;
       u70RN: // global
           Sp = Sp + 8;
           call _c70RG() args: 0, res: 0, upd: 0;
       c70RK: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70Rx_info" {
     block_c70Rx_info:
         const _c70Rx;
         const 0;
         const 4294967326;
         const S6Z86_srt+760;
 },
 _c70RG() //  []
         { []
         }
     {offset
       c70RG: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.074598977 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cfoldl'_closure" {
     Data.Foldable.$fFoldable:+:_$cfoldl'_closure:
         const Data.Foldable.$fFoldable:+:_$cfoldl'_info;
 },
 sat_s6YAG_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c70Tk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70Tl; else goto c70Tm;
       c70Tl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70Tm: // global
           I64[Sp - 16] = block_c70Ti_info;
           _s6YAD::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6YAD::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YAG_info" {
     sat_s6YAG_info:
         const sat_s6YAG_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c70Ti() //  [R1]
         { []
         }
     {offset
       c70Ti: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70Ti_info" {
     block_c70Ti_info:
         const _c70Ti;
         const 1;
         const 30;
 },
 sat_s6YAM_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c70Tx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70Ty; else goto c70Tz;
       c70Ty: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70Tz: // global
           I64[Sp - 16] = block_c70Tv_info;
           _s6YAJ::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6YAJ::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YAM_info" {
     sat_s6YAM_info:
         const sat_s6YAM_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c70Tv() //  [R1]
         { []
         }
     {offset
       c70Tv: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70Tv_info" {
     block_c70Tv_info:
         const _c70Tv;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldable:+:_$cfoldl'_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c70TF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c70TG; else goto c70TH;
       c70TG: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cfoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70TH: // global
           I64[Sp - 40] = block_c70T8_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u70TO; else goto c70T9;
       u70TO: // global
           call _c70T8(R1) args: 0, res: 0, upd: 0;
       c70T9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cfoldl'_info" {
     Data.Foldable.$fFoldable:+:_$cfoldl'_info:
         const Data.Foldable.$fFoldable:+:_$cfoldl'_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c70T8() //  [R1]
         { []
         }
     {offset
       c70T8: // global
           _s6YAx::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c70TC; else goto c70TD;
       c70TC: // global
           Hp = Hp + 16;
           _s6YAA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c70TN; else goto c70TJ;
       c70TJ: // global
           _s6YAB::P64 = P64[_s6YAA::P64 + 7];
           I64[Hp - 8] = sat_s6YAG_info;
           P64[Hp] = _s6YAx::P64;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = Hp - 5;
           P64[Sp + 16] = GHC.Base.id_closure+1;
           P64[Sp + 24] = _s6YAB::P64;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
       c70TD: // global
           Hp = Hp + 16;
           _s6YAA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c70TN; else goto c70TM;
       c70TN: // global
           HpAlloc = 16;
           R1 = _s6YAA::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c70TM: // global
           _s6YAH::P64 = P64[_s6YAA::P64 + 6];
           I64[Hp - 8] = sat_s6YAM_info;
           P64[Hp] = _s6YAx::P64;
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = Hp - 5;
           P64[Sp + 16] = GHC.Base.id_closure+1;
           P64[Sp + 24] = _s6YAH::P64;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70T8_info" {
     block_c70T8_info:
         const _c70T8;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.088333378 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$clength_closure" {
     Data.Foldable.$fFoldable:+:_$clength_closure:
         const Data.Foldable.$fFoldable:+:_$clength_info;
 },
 Data.Foldable.$fFoldable:+:_$clength_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c70Uv: // global
           R6 = R4;
           R5 = Data.Foldable.$fFoldable:*:4_closure+1;
           R4 = Data.Foldable.$fFoldable:*:5_closure+2;
           R3 = R3;
           R2 = R2;
           call Data.Foldable.$fFoldable:+:_$cfoldl'_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$clength_info" {
     Data.Foldable.$fFoldable:+:_$clength_info:
         const Data.Foldable.$fFoldable:+:_$clength_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.093908279 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cfoldl_closure" {
     Data.Foldable.$fFoldable:+:_$cfoldl_closure:
         const Data.Foldable.$fFoldable:+:_$cfoldl_info;
         const 0;
 },
 f2_s6YAV_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c70UL: // global
           _s6YAX::P64 = R3;
           R3 = R2;
           R2 = _s6YAX::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f2_s6YAV_info" {
     f2_s6YAV_info:
         const f2_s6YAV_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:+:_$cfoldl_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c70UV: // global
           _s6YAU::P64 = R6;
           _s6YAT::P64 = R5;
           _s6YAS::P64 = R4;
           _s6YAR::P64 = R3;
           _s6YAQ::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c70UW; else goto c70UX;
       c70UX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c70UZ; else goto c70UY;
       c70UZ: // global
           HpAlloc = 16;
           goto c70UW;
       c70UW: // global
           R6 = _s6YAU::P64;
           R5 = _s6YAT::P64;
           R4 = _s6YAS::P64;
           R3 = _s6YAR::P64;
           R2 = _s6YAQ::P64;
           R1 = Data.Foldable.$fFoldable:+:_$cfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70UY: // global
           I64[Hp - 8] = f2_s6YAV_info;
           P64[Hp] = _s6YAS::P64;
           I64[Sp - 40] = block_c70UO_info;
           R1 = _s6YAU::P64;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = _s6YAQ::P64;
           P64[Sp - 16] = _s6YAR::P64;
           P64[Sp - 8] = _s6YAT::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u70V6; else goto c70UP;
       u70V6: // global
           call _c70UO(R1) args: 0, res: 0, upd: 0;
       c70UP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cfoldl_info" {
     Data.Foldable.$fFoldable:+:_$cfoldl_info:
         const Data.Foldable.$fFoldable:+:_$cfoldl_entry;
         const 0;
         const 281479271677966;
         const 21474836505;
         const S6Z86_srt+640;
 },
 _c70UO() //  [R1]
         { []
         }
     {offset
       c70UO: // global
           _c70UG::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c70US; else goto c70UT;
       c70US: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp + 16] = _c70UG::P64;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
       c70UT: // global
           R2 = P64[Sp + 24];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp + 16] = _c70UG::P64;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70UO_info" {
     block_c70UO_info:
         const _c70UO;
         const 4;
         const 4294967326;
         const S6Z86_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.105858475 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cfoldl1_closure" {
     Data.Foldable.$fFoldable:+:_$cfoldl1_closure:
         const Data.Foldable.$fFoldable:+:_$cfoldl1_info;
         const 0;
 },
 sat_s6YBb_entry() //  [R1]
         { []
         }
     {offset
       c70VT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c70VU; else goto c70VV;
       c70VU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70VV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c70VM_info;
           _s6YB3::P64 = P64[R1 + 16];
           _s6YB7::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6YB3::P64;
           P64[Sp - 24] = _s6YB7::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u70W2; else goto c70VN;
       u70W2: // global
           call _c70VM(R1) args: 0, res: 0, upd: 0;
       c70VN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YBb_info" {
     sat_s6YBb_info:
         const sat_s6YBb_entry;
         const 3;
         const 15;
 },
 _c70VM() //  [R1]
         { []
         }
     {offset
       c70VM: // global
           _s6YB7::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c70VQ; else goto c70VR;
       c70VQ: // global
           R1 = _s6YB7::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c70VR: // global
           R3 = _s6YB7::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c70VM_info" {
     block_c70VM_info:
         const _c70VM;
         const 2;
         const 30;
 },
 sat_s6YBc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c70W4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c70W8; else goto c70W7;
       c70W8: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70W7: // global
           _s6YB3::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6YBb_info;
           P64[Hp - 32] = _s6YB3::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YBc_info" {
     sat_s6YBc_info:
         const sat_s6YBc_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6YBk_entry() //  [R1]
         { []
         }
     {offset
       c70Wr: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c70Ws; else goto c70Wt;
       c70Ws: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c70Wt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c70Wk_info;
           _s6YB3::P64 = P64[R1 + 16];
           _s6YBg::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6YB3::P64;
           P64[Sp - 24] = _s6YBg::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u70WA; else goto c70Wl;
       u70WA: // global
           call _c70Wk(R1) args: 0, res: 0, upd: 0;
       c70Wl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YBk_info" {
     sat_s6YBk_info:
         const sat_s6YBk_entry;
         const 3;
         const 15;
 },
 _c70Wk() //  [R1]
         { []
         }
     {offset
       c70Wk: // global
           _s6YBg::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c70Wo; else goto c70Wp;
       c70Wo: // global
           R1 = _s6YBg::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c70Wp: // global
           R3 = _s6YBg::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c70Wk_info" {
     block_c70Wk_info:
         const _c70Wk;
         const 2;
         const 30;
 },
 sat_s6YBl_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c70WC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c70WG; else goto c70WF;
       c70WG: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c70WF: // global
           _s6YB3::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6YBk_info;
           P64[Hp - 32] = _s6YB3::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YBl_info" {
     sat_s6YBl_info:
         const sat_s6YBl_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 section ""relreadonly" . u70Xn_srtd" {
     u70Xn_srtd:
         const S6Z86_srt+456;
         const 41;
         const 1099520016385;
 },
 Data.Foldable.$fFoldable:+:_$cfoldl1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c70WL: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c70WM; else goto c70WN;
       c70WM: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cfoldl1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70WN: // global
           I64[Sp - 32] = block_c70Vy_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u70Xk; else goto c70Vz;
       u70Xk: // global
           call _c70Vy(R1) args: 0, res: 0, upd: 0;
       c70Vz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cfoldl1_info" {
     Data.Foldable.$fFoldable:+:_$cfoldl1_info:
         const Data.Foldable.$fFoldable:+:_$cfoldl1_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u70Xn_srtd;
 },
 _c70Vy() //  [R1]
         { []
         }
     {offset
       c70Vy: // global
           _s6YB3::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c70WI; else goto c70WJ;
       c70WI: // global
           Hp = Hp + 16;
           _s6YB5::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c70X5; else goto c70WQ;
       c70WQ: // global
           _s6YB6::P64 = P64[_s6YB5::P64 + 7];
           I64[Hp - 8] = sat_s6YBc_info;
           P64[Hp] = _s6YB3::P64;
           I64[Sp + 24] = block_c70WO_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_pppp_info;
           P64[Sp - 8] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp] = Hp - 6;
           P64[Sp + 8] = _s6YB6::P64;
           P64[Sp + 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
       c70WJ: // global
           Hp = Hp + 16;
           _s6YB5::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c70X5; else goto c70X4;
       c70X5: // global
           HpAlloc = 16;
           R1 = _s6YB5::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c70X4: // global
           _s6YBf::P64 = P64[_s6YB5::P64 + 6];
           I64[Hp - 8] = sat_s6YBl_info;
           P64[Hp] = _s6YB3::P64;
           I64[Sp + 24] = block_c70X2_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pppp_info;
           P64[Sp - 8] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp] = Hp - 6;
           P64[Sp + 8] = _s6YBf::P64;
           P64[Sp + 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c70Vy_info" {
     block_c70Vy_info:
         const _c70Vy;
         const 3;
         const 36028801313931294;
         const S6Z86_srt+456;
 },
 _c70WO() //  [R1]
         { []
         }
     {offset
       c70WO: // global
           if (R1 & 7 == 1) goto u70Xj; else goto c70X1;
       u70Xj: // global
           Sp = Sp + 8;
           call _c70Xb() args: 0, res: 0, upd: 0;
       c70X1: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70WO_info" {
     block_c70WO_info:
         const _c70WO;
         const 0;
         const 4294967326;
         const S6Z86_srt+784;
 },
 _c70X2() //  [R1]
         { []
         }
     {offset
       c70X2: // global
           if (R1 & 7 == 1) goto u70Xi; else goto c70Xf;
       u70Xi: // global
           Sp = Sp + 8;
           call _c70Xb() args: 0, res: 0, upd: 0;
       c70Xf: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70X2_info" {
     block_c70X2_info:
         const _c70X2;
         const 0;
         const 4294967326;
         const S6Z86_srt+784;
 },
 _c70Xb() //  []
         { []
         }
     {offset
       c70Xb: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.131611698 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cfoldr'_closure" {
     Data.Foldable.$fFoldable:+:_$cfoldr'_closure:
         const Data.Foldable.$fFoldable:+:_$cfoldr'_info;
         const 0;
 },
 sat_s6YBz_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c70YT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70YU; else goto c70YV;
       c70YU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70YV: // global
           I64[Sp - 16] = block_c70YR_info;
           _s6YBw::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6YBw::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YBz_info" {
     sat_s6YBz_info:
         const sat_s6YBz_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c70YR() //  [R1]
         { []
         }
     {offset
       c70YR: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70YR_info" {
     block_c70YR_info:
         const _c70YR;
         const 1;
         const 30;
 },
 sat_s6YBF_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c70Z6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c70Z7; else goto c70Z8;
       c70Z7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70Z8: // global
           I64[Sp - 16] = block_c70Z4_info;
           _s6YBC::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6YBC::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YBF_info" {
     sat_s6YBF_info:
         const sat_s6YBF_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c70Z4() //  [R1]
         { []
         }
     {offset
       c70Z4: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70Z4_info" {
     block_c70Z4_info:
         const _c70Z4;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldable:+:_$cfoldr'_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c70Ze: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c70Zf; else goto c70Zg;
       c70Zf: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cfoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c70Zg: // global
           I64[Sp - 40] = block_c70YH_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u70Zn; else goto c70YI;
       u70Zn: // global
           call _c70YH(R1) args: 0, res: 0, upd: 0;
       c70YI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cfoldr'_info" {
     Data.Foldable.$fFoldable:+:_$cfoldr'_info:
         const Data.Foldable.$fFoldable:+:_$cfoldr'_entry;
         const 0;
         const 2251804108652558;
         const 21474836505;
         const S6Z86_srt+640;
 },
 _c70YH() //  [R1]
         { []
         }
     {offset
       c70YH: // global
           _s6YBq::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c70Zb; else goto c70Zc;
       c70Zb: // global
           Hp = Hp + 16;
           _s6YBt::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c70Zm; else goto c70Zi;
       c70Zi: // global
           _s6YBu::P64 = P64[_s6YBt::P64 + 7];
           I64[Hp - 8] = sat_s6YBz_info;
           P64[Hp] = _s6YBq::P64;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppppp_info;
           P64[Sp] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp + 8] = Hp - 5;
           P64[Sp + 16] = _s6YBu::P64;
           P64[Sp + 24] = GHC.Base.id_closure+1;
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
       c70Zc: // global
           Hp = Hp + 16;
           _s6YBt::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c70Zm; else goto c70Zl;
       c70Zm: // global
           HpAlloc = 16;
           R1 = _s6YBt::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c70Zl: // global
           _s6YBA::P64 = P64[_s6YBt::P64 + 6];
           I64[Hp - 8] = sat_s6YBF_info;
           P64[Hp] = _s6YBq::P64;
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_ppppp_info;
           P64[Sp] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp + 8] = Hp - 5;
           P64[Sp + 16] = _s6YBA::P64;
           P64[Sp + 24] = GHC.Base.id_closure+1;
           Sp = Sp - 8;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c70YH_info" {
     block_c70YH_info:
         const _c70YH;
         const 4;
         const 4294967326;
         const S6Z86_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.145982718 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$cfold_closure" {
     Data.Foldable.$fFoldable:+:_$cfold_closure:
         const Data.Foldable.$fFoldable:+:_$cfold_info;
 },
 Data.Foldable.$fFoldable:+:_$cfold_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c710d: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c710e; else goto c710f;
       c710e: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$cfold_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c710f: // global
           I64[Sp - 32] = block_c7106_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u710m; else goto c7107;
       u710m: // global
           call _c7106(R1) args: 0, res: 0, upd: 0;
       c7107: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$cfold_info" {
     Data.Foldable.$fFoldable:+:_$cfold_info:
         const Data.Foldable.$fFoldable:+:_$cfold_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c7106() //  [R1]
         { []
         }
     {offset
       c7106: // global
           _s6YBI::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c710a; else goto c710b;
       c710a: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _s6YBI::P64;
           P64[Sp + 16] = GHC.Base.id_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       c710b: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _s6YBI::P64;
           P64[Sp + 16] = GHC.Base.id_closure+1;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7106_info" {
     block_c7106_info:
         const _c7106;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.154502782 UTC

[section ""data" . Data.Foldable.$fFoldable:+:1_closure" {
     Data.Foldable.$fFoldable:+:1_closure:
         const Data.Foldable.$fFoldable:+:1_info;
         const 0;
 },
 $dMonoid_s6YBQ_entry() //  [R1]
         { []
         }
     {offset
       c710P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c710Q; else goto c710R;
       c710Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c710R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6YBQ_info" {
     $dMonoid_s6YBQ_info:
         const $dMonoid_s6YBQ_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+696;
 },
 sat_s6YBV_entry() //  [R1, R2]
         { []
         }
     {offset
       c7114: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7115; else goto c7116;
       c7115: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7116: // global
           I64[Sp - 32] = block_c710X_info;
           _s6YBN::P64 = P64[R1 + 7];
           _s6YBO::P64 = P64[R1 + 15];
           _s6YBQ::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s6YBN::P64;
           P64[Sp - 16] = _s6YBO::P64;
           P64[Sp - 8] = _s6YBQ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u711d; else goto c710Y;
       u711d: // global
           call _c710X(R1) args: 0, res: 0, upd: 0;
       c710Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YBV_info" {
     sat_s6YBV_info:
         const sat_s6YBV_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c710X() //  [R1]
         { []
         }
     {offset
       c710X: // global
           _s6YBQ::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c7111; else goto c7112;
       c7111: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _s6YBQ::P64;
           P64[Sp + 16] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       c7112: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _s6YBQ::P64;
           P64[Sp + 16] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp + 24] = P64[R1 + 6];
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c710X_info" {
     block_c710X_info:
         const _c710X;
         const 3;
         const 30;
 },
 Data.Foldable.$fFoldable:+:1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c711e: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c711i; else goto c711h;
       c711i: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c711h: // global
           I64[Hp - 48] = $dMonoid_s6YBQ_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s6YBV_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:1_info" {
     Data.Foldable.$fFoldable:+:1_info:
         const Data.Foldable.$fFoldable:+:1_entry;
         const 0;
         const 35188667056142;
         const 12884901911;
         const S6Z86_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.167011845 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_$ctoList_closure" {
     Data.Foldable.$fFoldable:+:_$ctoList_closure:
         const Data.Foldable.$fFoldable:+:_$ctoList_info;
 },
 Data.Foldable.$fFoldable:+:_$ctoList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c711Y: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c711Z; else goto c7120;
       c711Z: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_$ctoList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7120: // global
           I64[Sp - 24] = block_c711R_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7127; else goto c711S;
       u7127: // global
           call _c711R(R1) args: 0, res: 0, upd: 0;
       c711S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_$ctoList_info" {
     Data.Foldable.$fFoldable:+:_$ctoList_info:
         const Data.Foldable.$fFoldable:+:_$ctoList_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c711R() //  [R1]
         { []
         }
     {offset
       c711R: // global
           if (R1 & 7 == 1) goto c711V; else goto c711W;
       c711V: // global
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = GHC.Types.:_closure+2;
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 8;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
       c711W: // global
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = GHC.Types.:_closure+2;
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           P64[Sp + 16] = P64[R1 + 6];
           Sp = Sp - 8;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c711R_info" {
     block_c711R_info:
         const _c711R;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.179365153 UTC

[section ""data" . Data.Foldable.$fFoldable:+:_closure" {
     Data.Foldable.$fFoldable:+:_closure:
         const Data.Foldable.$fFoldable:+:_info;
         const 0;
 },
 sat_s6YCj_entry() //  [R1, R2]
         { []
         }
     {offset
       c712F: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:+:1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YCj_info" {
     sat_s6YCj_info:
         const sat_s6YCj_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+800;
 },
 sat_s6YCi_entry() //  [R1, R2]
         { []
         }
     {offset
       c712N: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:+:2_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YCi_info" {
     sat_s6YCi_info:
         const sat_s6YCi_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+728;
 },
 sat_s6YCh_entry() //  [R1, R2]
         { []
         }
     {offset
       c712V: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:+:_$cminimum_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YCh_info" {
     sat_s6YCh_info:
         const sat_s6YCh_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+736;
 },
 sat_s6YCg_entry() //  [R1, R2]
         { []
         }
     {offset
       c7133: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:+:_$cmaximum_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YCg_info" {
     sat_s6YCg_info:
         const sat_s6YCg_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+744;
 },
 sat_s6YCf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c713b: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:+:_$celem_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YCf_info" {
     sat_s6YCf_info:
         const sat_s6YCf_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6Z86_srt+720;
 },
 sat_s6YCe_entry() //  [R1, R2]
         { []
         }
     {offset
       c713j: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:+:_$clength_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YCe_info" {
     sat_s6YCe_info:
         const sat_s6YCe_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6YCd_entry() //  [R1, R2]
         { []
         }
     {offset
       c713r: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:+:_$cnull_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YCd_info" {
     sat_s6YCd_info:
         const sat_s6YCd_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6YCc_entry() //  [R1, R2]
         { []
         }
     {offset
       c713z: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:+:_$ctoList_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YCc_info" {
     sat_s6YCc_info:
         const sat_s6YCc_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6YCb_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c713H: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:+:_$cfoldl1_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YCb_info" {
     sat_s6YCb_info:
         const sat_s6YCb_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6Z86_srt+776;
 },
 sat_s6YCa_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c713P: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:+:_$cfoldr1_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YCa_info" {
     sat_s6YCa_info:
         const sat_s6YCa_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6Z86_srt+752;
 },
 sat_s6YC9_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c713X: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:+:_$cfoldl'_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YC9_info" {
     sat_s6YC9_info:
         const sat_s6YC9_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6YC8_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c7145: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:+:_$cfoldl_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YC8_info" {
     sat_s6YC8_info:
         const sat_s6YC8_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const S6Z86_srt+768;
 },
 sat_s6YC7_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c714d: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:+:_$cfoldr'_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YC7_info" {
     sat_s6YC7_info:
         const sat_s6YC7_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const S6Z86_srt+792;
 },
 sat_s6YC6_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c714l: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:+:_$cfoldr_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YC6_info" {
     sat_s6YC6_info:
         const sat_s6YC6_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6YC5_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c714t: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:+:_$cfoldMap_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YC5_info" {
     sat_s6YC5_info:
         const sat_s6YC5_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6YC4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c714B: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:+:_$cfold_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YC4_info" {
     sat_s6YC4_info:
         const sat_s6YC4_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:+:_entry() //  [R2, R3]
         { []
         }
     {offset
       c714F: // global
           Hp = Hp + 520;
           if (Hp > HpLim) (likely: False) goto c714J; else goto c714I;
       c714J: // global
           HpAlloc = 520;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:+:_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c714I: // global
           I64[Hp - 512] = sat_s6YCj_info;
           P64[Hp - 504] = R2;
           P64[Hp - 496] = R3;
           I64[Hp - 488] = sat_s6YCi_info;
           P64[Hp - 480] = R2;
           P64[Hp - 472] = R3;
           I64[Hp - 464] = sat_s6YCh_info;
           P64[Hp - 456] = R2;
           P64[Hp - 448] = R3;
           I64[Hp - 440] = sat_s6YCg_info;
           P64[Hp - 432] = R2;
           P64[Hp - 424] = R3;
           I64[Hp - 416] = sat_s6YCf_info;
           P64[Hp - 408] = R2;
           P64[Hp - 400] = R3;
           I64[Hp - 392] = sat_s6YCe_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           I64[Hp - 368] = sat_s6YCd_info;
           P64[Hp - 360] = R2;
           P64[Hp - 352] = R3;
           I64[Hp - 344] = sat_s6YCc_info;
           P64[Hp - 336] = R2;
           P64[Hp - 328] = R3;
           I64[Hp - 320] = sat_s6YCb_info;
           P64[Hp - 312] = R2;
           P64[Hp - 304] = R3;
           I64[Hp - 296] = sat_s6YCa_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           I64[Hp - 272] = sat_s6YC9_info;
           P64[Hp - 264] = R2;
           P64[Hp - 256] = R3;
           I64[Hp - 248] = sat_s6YC8_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           I64[Hp - 224] = sat_s6YC7_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           I64[Hp - 200] = sat_s6YC6_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_s6YC5_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_s6YC4_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = Hp - 150;
           P64[Hp - 112] = Hp - 173;
           P64[Hp - 104] = Hp - 197;
           P64[Hp - 96] = Hp - 221;
           P64[Hp - 88] = Hp - 245;
           P64[Hp - 80] = Hp - 269;
           P64[Hp - 72] = Hp - 294;
           P64[Hp - 64] = Hp - 318;
           P64[Hp - 56] = Hp - 343;
           P64[Hp - 48] = Hp - 367;
           P64[Hp - 40] = Hp - 391;
           P64[Hp - 32] = Hp - 414;
           P64[Hp - 24] = Hp - 439;
           P64[Hp - 16] = Hp - 463;
           P64[Hp - 8] = Hp - 487;
           P64[Hp] = Hp - 511;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:+:_info" {
     Data.Foldable.$fFoldable:+:_info:
         const Data.Foldable.$fFoldable:+:_entry;
         const 0;
         const 16350940495886;
         const 8589934607;
         const S6Z86_srt+720;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.211579144 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$celem_closure" {
     Data.Foldable.$fFoldableM1_$celem_closure:
         const Data.Foldable.$fFoldableM1_$celem_info;
         const 0;
 },
 f1_s6YCn_entry() //  [R1]
         { []
         }
     {offset
       c716g: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c716h; else goto c716i;
       c716h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c716i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s6YCn_info" {
     f1_s6YCn_info:
         const f1_s6YCn_entry;
         const 2;
         const 18;
 },
 sat_s6YCp_entry() //  [R1, R2]
         { []
         }
     {offset
       c716o: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c716p; else goto c716q;
       c716p: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c716q: // global
           _s6YCo::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = _s6YCo::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YCp_info" {
     sat_s6YCp_info:
         const sat_s6YCp_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+816;
 },
 Data.Foldable.$fFoldableM1_$celem_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c716r: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c716v; else goto c716u;
       c716v: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_$celem_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c716u: // global
           I64[Hp - 48] = f1_s6YCn_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s6YCp_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$celem_info" {
     Data.Foldable.$fFoldableM1_$celem_info:
         const Data.Foldable.$fFoldableM1_$celem_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6Z86_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.220615677 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$csum_closure" {
     Data.Foldable.$fFoldableM1_$csum_closure:
         const Data.Foldable.$fFoldableM1_$csum_info;
         const 0;
 },
 $dMonoid_s6YCs_entry() //  [R1]
         { []
         }
     {offset
       c7170: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7171; else goto c7172;
       c7171: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7172: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6YCs_info" {
     $dMonoid_s6YCs_info:
         const $dMonoid_s6YCs_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+832;
 },
 sat_s6YCu_entry() //  [R1, R2]
         { []
         }
     {offset
       c7178: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7179; else goto c717a;
       c7179: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c717a: // global
           _s6YCt::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp - 8] = _s6YCt::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YCu_info" {
     sat_s6YCu_info:
         const sat_s6YCu_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Foldable.$fFoldableM1_$csum_entry() //  [R2, R3]
         { []
         }
     {offset
       c717b: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c717f; else goto c717e;
       c717f: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_$csum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c717e: // global
           I64[Hp - 40] = $dMonoid_s6YCs_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s6YCu_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$csum_info" {
     Data.Foldable.$fFoldableM1_$csum_info:
         const Data.Foldable.$fFoldableM1_$csum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+832;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.230221356 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cminimum_closure" {
     Data.Foldable.$fFoldableM1_$cminimum_closure:
         const Data.Foldable.$fFoldableM1_$cminimum_info;
         const 0;
 },
 $dMonoid_s6YCx_entry() //  [R1]
         { []
         }
     {offset
       c717I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c717J; else goto c717K;
       c717J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c717K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6YCx_info" {
     $dMonoid_s6YCx_info:
         const $dMonoid_s6YCx_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+848;
 },
 sat_s6YCB_entry() //  [R1, R2]
         { []
         }
     {offset
       c717W: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c717X; else goto c717Y;
       c717X: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c717Y: // global
           I64[Sp - 8] = block_c717Q_info;
           _s6YCy::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           P64[Sp - 16] = _s6YCy::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YCB_info" {
     sat_s6YCB_info:
         const sat_s6YCB_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+856;
 },
 _c717Q() //  [R1]
         { []
         }
     {offset
       c717Q: // global
           if (R1 & 7 == 1) goto c717T; else goto c717U;
       c717T: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c717U: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c717Q_info" {
     block_c717Q_info:
         const _c717Q;
         const 0;
         const 4294967326;
         const S6Z86_srt+856;
 },
 Data.Foldable.$fFoldableM1_$cminimum_entry() //  [R2, R3]
         { []
         }
     {offset
       c7185: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7189; else goto c7188;
       c7189: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_$cminimum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7188: // global
           I64[Hp - 40] = $dMonoid_s6YCx_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s6YCB_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cminimum_info" {
     Data.Foldable.$fFoldableM1_$cminimum_info:
         const Data.Foldable.$fFoldableM1_$cminimum_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S6Z86_srt+848;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.241448841 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cmaximum_closure" {
     Data.Foldable.$fFoldableM1_$cmaximum_closure:
         const Data.Foldable.$fFoldableM1_$cmaximum_info;
         const 0;
 },
 $dMonoid_s6YCE_entry() //  [R1]
         { []
         }
     {offset
       c718J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c718K; else goto c718L;
       c718K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c718L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6YCE_info" {
     $dMonoid_s6YCE_info:
         const $dMonoid_s6YCE_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+872;
 },
 sat_s6YCI_entry() //  [R1, R2]
         { []
         }
     {offset
       c718X: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c718Y; else goto c718Z;
       c718Y: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c718Z: // global
           I64[Sp - 8] = block_c718R_info;
           _s6YCF::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           P64[Sp - 16] = _s6YCF::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YCI_info" {
     sat_s6YCI_info:
         const sat_s6YCI_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+880;
 },
 _c718R() //  [R1]
         { []
         }
     {offset
       c718R: // global
           if (R1 & 7 == 1) goto c718U; else goto c718V;
       c718U: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c718V: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c718R_info" {
     block_c718R_info:
         const _c718R;
         const 0;
         const 4294967326;
         const S6Z86_srt+880;
 },
 Data.Foldable.$fFoldableM1_$cmaximum_entry() //  [R2, R3]
         { []
         }
     {offset
       c7196: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c719a; else goto c7199;
       c719a: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_$cmaximum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7199: // global
           I64[Hp - 40] = $dMonoid_s6YCE_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s6YCI_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cmaximum_info" {
     Data.Foldable.$fFoldableM1_$cmaximum_info:
         const Data.Foldable.$fFoldableM1_$cmaximum_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S6Z86_srt+872;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.254243482 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cfoldr1_closure" {
     Data.Foldable.$fFoldableM1_$cfoldr1_closure:
         const Data.Foldable.$fFoldableM1_$cfoldr1_info;
         const 0;
 },
 sat_s6YCQ_entry() //  [R1]
         { []
         }
     {offset
       c719W: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c719X; else goto c719Y;
       c719X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c719Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c719P_info;
           _s6YCK::P64 = P64[R1 + 16];
           _s6YCM::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6YCK::P64;
           P64[Sp - 24] = _s6YCM::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u71a5; else goto c719Q;
       u71a5: // global
           call _c719P(R1) args: 0, res: 0, upd: 0;
       c719Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YCQ_info" {
     sat_s6YCQ_info:
         const sat_s6YCQ_entry;
         const 3;
         const 15;
 },
 _c719P() //  [R1]
         { []
         }
     {offset
       c719P: // global
           _s6YCM::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c719T; else goto c719U;
       c719T: // global
           R1 = _s6YCM::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c719U: // global
           R3 = P64[R1 + 6];
           R2 = _s6YCM::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c719P_info" {
     block_c719P_info:
         const _c719P;
         const 2;
         const 30;
 },
 sat_s6YCR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c71a7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c71ab; else goto c71aa;
       c71ab: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71aa: // global
           _s6YCK::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6YCQ_info;
           P64[Hp - 32] = _s6YCK::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YCR_info" {
     sat_s6YCR_info:
         const sat_s6YCR_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldableM1_$cfoldr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c71ai: // global
           _s6YCL::P64 = R4;
           _s6YCK::P64 = R3;
           _s6YCJ::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c71aj; else goto c71ak;
       c71ak: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c71am; else goto c71al;
       c71am: // global
           HpAlloc = 16;
           goto c71aj;
       c71aj: // global
           R4 = _s6YCL::P64;
           R3 = _s6YCK::P64;
           R2 = _s6YCJ::P64;
           R1 = Data.Foldable.$fFoldableM1_$cfoldr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71al: // global
           I64[Hp - 8] = sat_s6YCR_info;
           P64[Hp] = _s6YCK::P64;
           I64[Sp - 8] = block_c71ac_info;
           R2 = _s6YCJ::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _s6YCL::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cfoldr1_info" {
     Data.Foldable.$fFoldableM1_$cfoldr1_info:
         const Data.Foldable.$fFoldableM1_$cfoldr1_entry;
         const 0;
         const 562954248388622;
         const 12884901911;
         const S6Z86_srt+760;
 },
 _c71ac() //  [R1]
         { []
         }
     {offset
       c71ac: // global
           if (R1 & 7 == 1) goto c71af; else goto c71ag;
       c71af: // global
           R1 = Data.Foldable.$fFoldable:*:8_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c71ag: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71ac_info" {
     block_c71ac_info:
         const _c71ac;
         const 0;
         const 4294967326;
         const S6Z86_srt+760;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.270119067 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cfoldl'_closure" {
     Data.Foldable.$fFoldableM1_$cfoldl'_closure:
         const Data.Foldable.$fFoldableM1_$cfoldl'_info;
 },
 sat_s6YD2_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c71bd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71be; else goto c71bf;
       c71be: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71bf: // global
           I64[Sp - 16] = block_c71bb_info;
           _s6YCZ::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6YCZ::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YD2_info" {
     sat_s6YD2_info:
         const sat_s6YD2_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c71bb() //  [R1]
         { []
         }
     {offset
       c71bb: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71bb_info" {
     block_c71bb_info:
         const _c71bb;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableM1_$cfoldl'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c71bh: // global
           _s6YCX::P64 = R5;
           _s6YCW::P64 = R4;
           _s6YCV::P64 = R3;
           _s6YCU::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c71bi; else goto c71bj;
       c71bj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c71bl; else goto c71bk;
       c71bl: // global
           HpAlloc = 16;
           goto c71bi;
       c71bi: // global
           R5 = _s6YCX::P64;
           R4 = _s6YCW::P64;
           R3 = _s6YCV::P64;
           R2 = _s6YCU::P64;
           R1 = Data.Foldable.$fFoldableM1_$cfoldl'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71bk: // global
           I64[Hp - 8] = sat_s6YD2_info;
           P64[Hp] = _s6YCV::P64;
           R2 = _s6YCU::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 5;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = _s6YCX::P64;
           P64[Sp - 8] = _s6YCW::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cfoldl'_info" {
     Data.Foldable.$fFoldableM1_$cfoldl'_info:
         const Data.Foldable.$fFoldableM1_$cfoldl'_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.280197084 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$clength_closure" {
     Data.Foldable.$fFoldableM1_$clength_closure:
         const Data.Foldable.$fFoldableM1_$clength_info;
 },
 Data.Foldable.$fFoldableM1_$clength_entry() //  [R2, R3]
         { []
         }
     {offset
       c71bI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c71bJ; else goto c71bK;
       c71bJ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_$clength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71bK: // global
           R2 = R2;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldableM2_closure+3;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$clength_info" {
     Data.Foldable.$fFoldableM1_$clength_info:
         const Data.Foldable.$fFoldableM1_$clength_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.286241514 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cfoldl_closure" {
     Data.Foldable.$fFoldableM1_$cfoldl_closure:
         const Data.Foldable.$fFoldableM1_$cfoldl_info;
         const 0;
 },
 sat_s6YDb_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c71c4: // global
           _s6YDa::P64 = R3;
           R3 = R2;
           R2 = _s6YDa::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YDb_info" {
     sat_s6YDb_info:
         const sat_s6YDb_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldableM1_$cfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c71c7: // global
           _s6YD8::P64 = R5;
           _s6YD7::P64 = R4;
           _s6YD6::P64 = R3;
           _s6YD5::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c71c8; else goto c71c9;
       c71c9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c71cb; else goto c71ca;
       c71cb: // global
           HpAlloc = 16;
           goto c71c8;
       c71c8: // global
           R5 = _s6YD8::P64;
           R4 = _s6YD7::P64;
           R3 = _s6YD6::P64;
           R2 = _s6YD5::P64;
           R1 = Data.Foldable.$fFoldableM1_$cfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71ca: // global
           I64[Hp - 8] = sat_s6YDb_info;
           P64[Hp] = _s6YD6::P64;
           R2 = _s6YD5::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = _s6YD8::P64;
           P64[Sp - 8] = _s6YD7::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cfoldl_info" {
     Data.Foldable.$fFoldableM1_$cfoldl_info:
         const Data.Foldable.$fFoldableM1_$cfoldl_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S6Z86_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.294986836 UTC

[section ""data" . Data.Foldable.$fFoldableM3_closure" {
     Data.Foldable.$fFoldableM3_closure:
         const Data.Foldable.$fFoldableM3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableM3_entry() //  [R1]
         { []
         }
     {offset
       c71cu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71cv; else goto c71cw;
       c71cv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71cw: // global
           (_c71cr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c71cr::I64 == 0) goto c71ct; else goto c71cs;
       c71ct: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c71cs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c71cr::I64;
           R2 = Data.Semigroup.Internal.$fMonoidEndo_closure;
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidDual_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM3_info" {
     Data.Foldable.$fFoldableM3_info:
         const Data.Foldable.$fFoldableM3_entry;
         const 0;
         const 4294967317;
         const S6Z86_srt+920;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.30139042 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cfoldl1_closure" {
     Data.Foldable.$fFoldableM1_$cfoldl1_closure:
         const Data.Foldable.$fFoldableM1_$cfoldl1_info;
         const 0;
 },
 sat_s6YDj_entry() //  [R1]
         { []
         }
     {offset
       c71cZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c71d0; else goto c71d1;
       c71d0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71d1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c71cS_info;
           _s6YDd::P64 = P64[R1 + 16];
           _s6YDf::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6YDd::P64;
           P64[Sp - 24] = _s6YDf::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u71d8; else goto c71cT;
       u71d8: // global
           call _c71cS(R1) args: 0, res: 0, upd: 0;
       c71cT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YDj_info" {
     sat_s6YDj_info:
         const sat_s6YDj_entry;
         const 3;
         const 15;
 },
 _c71cS() //  [R1]
         { []
         }
     {offset
       c71cS: // global
           _s6YDf::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c71cW; else goto c71cX;
       c71cW: // global
           R1 = _s6YDf::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c71cX: // global
           R3 = _s6YDf::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c71cS_info" {
     block_c71cS_info:
         const _c71cS;
         const 2;
         const 30;
 },
 sat_s6YDk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c71da: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c71de; else goto c71dd;
       c71de: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71dd: // global
           _s6YDd::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6YDj_info;
           P64[Hp - 32] = _s6YDd::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YDk_info" {
     sat_s6YDk_info:
         const sat_s6YDk_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldableM1_$cfoldl1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c71dl: // global
           _s6YDe::P64 = R4;
           _s6YDd::P64 = R3;
           _s6YDc::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c71dm; else goto c71dn;
       c71dn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c71dp; else goto c71do;
       c71dp: // global
           HpAlloc = 16;
           goto c71dm;
       c71dm: // global
           R4 = _s6YDe::P64;
           R3 = _s6YDd::P64;
           R2 = _s6YDc::P64;
           R1 = Data.Foldable.$fFoldableM1_$cfoldl1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71do: // global
           I64[Hp - 8] = sat_s6YDk_info;
           P64[Hp] = _s6YDd::P64;
           I64[Sp - 8] = block_c71df_info;
           R2 = _s6YDc::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           P64[Sp - 40] = Data.Foldable.$fFoldableM3_closure;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = _s6YDe::P64;
           P64[Sp - 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cfoldl1_info" {
     Data.Foldable.$fFoldableM1_$cfoldl1_info:
         const Data.Foldable.$fFoldableM1_$cfoldl1_entry;
         const 0;
         const 3377704015495182;
         const 12884901911;
         const S6Z86_srt+784;
 },
 _c71df() //  [R1]
         { []
         }
     {offset
       c71df: // global
           if (R1 & 7 == 1) goto c71di; else goto c71dj;
       c71di: // global
           R1 = Data.Foldable.$fFoldable:*:6_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c71dj: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71df_info" {
     block_c71df_info:
         const _c71df;
         const 0;
         const 4294967326;
         const S6Z86_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.313088711 UTC

[section ""data" . Data.Foldable.$fFoldableM4_closure" {
     Data.Foldable.$fFoldableM4_closure:
         const Data.Foldable.$fFoldableM4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableM4_entry() //  [R1]
         { []
         }
     {offset
       c71ec: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71ed; else goto c71ee;
       c71ed: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71ee: // global
           (_c71e9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c71e9::I64 == 0) goto c71eb; else goto c71ea;
       c71eb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c71ea: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c71e9::I64;
           R2 = Data.Semigroup.Internal.$fMonoidEndo_closure;
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidDual_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM4_info" {
     Data.Foldable.$fFoldableM4_info:
         const Data.Foldable.$fFoldableM4_entry;
         const 0;
         const 4294967317;
         const S6Z86_srt+920;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.318239247 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cfoldr'_closure" {
     Data.Foldable.$fFoldableM1_$cfoldr'_closure:
         const Data.Foldable.$fFoldableM1_$cfoldr'_info;
         const 0;
 },
 sat_s6YDv_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c71ey: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71ez; else goto c71eA;
       c71ez: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71eA: // global
           I64[Sp - 16] = block_c71ew_info;
           _s6YDs::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6YDs::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YDv_info" {
     sat_s6YDv_info:
         const sat_s6YDv_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c71ew() //  [R1]
         { []
         }
     {offset
       c71ew: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71ew_info" {
     block_c71ew_info:
         const _c71ew;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableM1_$cfoldr'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c71eC: // global
           _s6YDq::P64 = R5;
           _s6YDp::P64 = R4;
           _s6YDo::P64 = R3;
           _s6YDn::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c71eD; else goto c71eE;
       c71eE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c71eG; else goto c71eF;
       c71eG: // global
           HpAlloc = 16;
           goto c71eD;
       c71eD: // global
           R5 = _s6YDq::P64;
           R4 = _s6YDp::P64;
           R3 = _s6YDo::P64;
           R2 = _s6YDn::P64;
           R1 = Data.Foldable.$fFoldableM1_$cfoldr'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71eF: // global
           I64[Hp - 8] = sat_s6YDv_info;
           P64[Hp] = _s6YDo::P64;
           R2 = _s6YDn::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Foldable.$fFoldableM4_closure;
           P64[Sp - 32] = Hp - 5;
           P64[Sp - 24] = _s6YDq::P64;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = _s6YDp::P64;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cfoldr'_info" {
     Data.Foldable.$fFoldableM1_$cfoldr'_info:
         const Data.Foldable.$fFoldableM1_$cfoldr'_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S6Z86_srt+944;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.325910263 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cfold_closure" {
     Data.Foldable.$fFoldableM1_$cfold_closure:
         const Data.Foldable.$fFoldableM1_$cfold_info;
 },
 Data.Foldable.$fFoldableM1_$cfold_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c71f4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71f5; else goto c71f6;
       c71f5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_$cfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71f6: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cfold_info" {
     Data.Foldable.$fFoldableM1_$cfold_info:
         const Data.Foldable.$fFoldableM1_$cfold_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.331882627 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$cproduct_closure" {
     Data.Foldable.$fFoldableM1_$cproduct_closure:
         const Data.Foldable.$fFoldableM1_$cproduct_info;
         const 0;
 },
 $dMonoid_s6YDB_entry() //  [R1]
         { []
         }
     {offset
       c71fn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71fo; else goto c71fp;
       c71fo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71fp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6YDB_info" {
     $dMonoid_s6YDB_info:
         const $dMonoid_s6YDB_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+960;
 },
 sat_s6YDD_entry() //  [R1, R2]
         { []
         }
     {offset
       c71fv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71fw; else goto c71fx;
       c71fw: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71fx: // global
           _s6YDC::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp - 8] = _s6YDC::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YDD_info" {
     sat_s6YDD_info:
         const sat_s6YDD_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Foldable.$fFoldableM1_$cproduct_entry() //  [R2, R3]
         { []
         }
     {offset
       c71fy: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c71fC; else goto c71fB;
       c71fC: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_$cproduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71fB: // global
           I64[Hp - 40] = $dMonoid_s6YDB_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s6YDD_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$cproduct_info" {
     Data.Foldable.$fFoldableM1_$cproduct_info:
         const Data.Foldable.$fFoldableM1_$cproduct_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.342939079 UTC

[section ""data" . Data.Foldable.$fFoldableM1_$ctoList_closure" {
     Data.Foldable.$fFoldableM1_$ctoList_closure:
         const Data.Foldable.$fFoldableM1_$ctoList_info;
 },
 Data.Foldable.$fFoldableM1_$ctoList_entry() //  [R2, R3]
         { []
         }
     {offset
       c71g1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71g2; else goto c71g3;
       c71g2: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_$ctoList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71g3: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_$ctoList_info" {
     Data.Foldable.$fFoldableM1_$ctoList_info:
         const Data.Foldable.$fFoldableM1_$ctoList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.355655119 UTC

[section ""data" . Data.Foldable.$fFoldableM1_closure" {
     Data.Foldable.$fFoldableM1_closure:
         const Data.Foldable.$fFoldableM1_info;
         const 0;
 },
 sat_s6YE3_entry() //  [R1, R2]
         { []
         }
     {offset
       c71gn: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableM1_$cproduct_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YE3_info" {
     sat_s6YE3_info:
         const sat_s6YE3_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Z86_srt+968;
 },
 sat_s6YE2_entry() //  [R1, R2]
         { []
         }
     {offset
       c71gv: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableM1_$csum_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YE2_info" {
     sat_s6YE2_info:
         const sat_s6YE2_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Z86_srt+840;
 },
 sat_s6YE1_entry() //  [R1, R2]
         { []
         }
     {offset
       c71gD: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableM1_$cminimum_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YE1_info" {
     sat_s6YE1_info:
         const sat_s6YE1_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Z86_srt+864;
 },
 sat_s6YE0_entry() //  [R1, R2]
         { []
         }
     {offset
       c71gL: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableM1_$cmaximum_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YE0_info" {
     sat_s6YE0_info:
         const sat_s6YE0_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Z86_srt+888;
 },
 sat_s6YDZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c71gT: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldableM1_$celem_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YDZ_info" {
     sat_s6YDZ_info:
         const sat_s6YDZ_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Z86_srt+824;
 },
 sat_s6YDY_entry() //  [R1, R2]
         { []
         }
     {offset
       c71h1: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableM1_$clength_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YDY_info" {
     sat_s6YDY_info:
         const sat_s6YDY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6YDX_entry() //  [R1, R2]
         { []
         }
     {offset
       c71h9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71ha; else goto c71hb;
       c71ha: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71hb: // global
           _s6YDW::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s6YDW::P64;
           Sp = Sp - 16;
           call Data.Foldable.null_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YDX_info" {
     sat_s6YDX_info:
         const sat_s6YDX_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6YDV_entry() //  [R1, R2]
         { []
         }
     {offset
       c71hh: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableM1_$ctoList_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YDV_info" {
     sat_s6YDV_info:
         const sat_s6YDV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6YDU_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c71hp: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldableM1_$cfoldl1_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YDU_info" {
     sat_s6YDU_info:
         const sat_s6YDU_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Z86_srt+928;
 },
 sat_s6YDT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c71hx: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldableM1_$cfoldr1_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YDT_info" {
     sat_s6YDT_info:
         const sat_s6YDT_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Z86_srt+896;
 },
 sat_s6YDS_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c71hF: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldableM1_$cfoldl'_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YDS_info" {
     sat_s6YDS_info:
         const sat_s6YDS_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s6YDR_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c71hN: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldableM1_$cfoldl_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YDR_info" {
     sat_s6YDR_info:
         const sat_s6YDR_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const S6Z86_srt+904;
 },
 sat_s6YDQ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c71hV: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldableM1_$cfoldr'_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YDQ_info" {
     sat_s6YDQ_info:
         const sat_s6YDQ_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const S6Z86_srt+944;
 },
 sat_s6YDP_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c71i3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71i4; else goto c71i5;
       c71i4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71i5: // global
           _s6YDM::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _s6YDM::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YDP_info" {
     sat_s6YDP_info:
         const sat_s6YDP_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s6YDL_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c71ib: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71ic; else goto c71id;
       c71ic: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71id: // global
           _s6YDI::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _s6YDI::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YDL_info" {
     sat_s6YDL_info:
         const sat_s6YDL_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s6YDH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c71ij: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldableM1_$cfold_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YDH_info" {
     sat_s6YDH_info:
         const sat_s6YDH_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldableM1_entry() //  [R2]
         { []
         }
     {offset
       c71in: // global
           Hp = Hp + 392;
           if (Hp > HpLim) (likely: False) goto c71ir; else goto c71iq;
       c71ir: // global
           HpAlloc = 392;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableM1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71iq: // global
           I64[Hp - 384] = sat_s6YE3_info;
           P64[Hp - 376] = R2;
           I64[Hp - 368] = sat_s6YE2_info;
           P64[Hp - 360] = R2;
           I64[Hp - 352] = sat_s6YE1_info;
           P64[Hp - 344] = R2;
           I64[Hp - 336] = sat_s6YE0_info;
           P64[Hp - 328] = R2;
           I64[Hp - 320] = sat_s6YDZ_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_s6YDY_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_s6YDX_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_s6YDV_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_s6YDU_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_s6YDT_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_s6YDS_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s6YDR_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_s6YDQ_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s6YDP_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s6YDL_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_s6YDH_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = Hp - 142;
           P64[Hp - 112] = Hp - 157;
           P64[Hp - 104] = Hp - 173;
           P64[Hp - 96] = Hp - 189;
           P64[Hp - 88] = Hp - 205;
           P64[Hp - 80] = Hp - 221;
           P64[Hp - 72] = Hp - 238;
           P64[Hp - 64] = Hp - 254;
           P64[Hp - 56] = Hp - 271;
           P64[Hp - 48] = Hp - 287;
           P64[Hp - 40] = Hp - 303;
           P64[Hp - 32] = Hp - 318;
           P64[Hp - 24] = Hp - 335;
           P64[Hp - 16] = Hp - 351;
           P64[Hp - 8] = Hp - 367;
           P64[Hp] = Hp - 383;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableM1_info" {
     Data.Foldable.$fFoldableM1_info:
         const Data.Foldable.$fFoldableM1_entry;
         const 0;
         const 3561477076156430;
         const 4294967301;
         const S6Z86_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.391727314 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$celem_closure" {
     Data.Foldable.$fFoldableK1_$celem_closure:
         const Data.Foldable.$fFoldableK1_$celem_info;
 },
 Data.Foldable.$fFoldableK1_$celem_entry() //  []
         { []
         }
     {offset
       c71k0: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$celem_info" {
     Data.Foldable.$fFoldableK1_$celem_info:
         const Data.Foldable.$fFoldableK1_$celem_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.395018559 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$csum_closure" {
     Data.Foldable.$fFoldableK1_$csum_closure:
         const Data.Foldable.$fFoldableK1_$csum_info;
         const 0;
 },
 Data.Foldable.$fFoldableK1_$csum_entry() //  [R2]
         { []
         }
     {offset
       c71kd: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$csum_info" {
     Data.Foldable.$fFoldableK1_$csum_info:
         const Data.Foldable.$fFoldableK1_$csum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.398344625 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cminimum_closure" {
     Data.Foldable.$fFoldableK1_$cminimum_closure:
         const Data.Foldable.$fFoldableK1_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableK1_$cminimum_entry() //  []
         { []
         }
     {offset
       c71ko: // global
           R2 = Data.Foldable.$fFoldableK2_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cminimum_info" {
     Data.Foldable.$fFoldableK1_$cminimum_info:
         const Data.Foldable.$fFoldableK1_$cminimum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+992;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.401704483 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cmaximum_closure" {
     Data.Foldable.$fFoldableK1_$cmaximum_closure:
         const Data.Foldable.$fFoldableK1_$cmaximum_info;
         const 0;
 },
 section ""relreadonly" . u71kC_srtd" {
     u71kC_srtd:
         const S6Z86_srt+232;
         const 97;
         const 1;
         const 4294967296;
 },
 Data.Foldable.$fFoldableK1_$cmaximum_entry() //  []
         { []
         }
     {offset
       c71kz: // global
           R2 = Data.Foldable.$fFoldableK4_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cmaximum_info" {
     Data.Foldable.$fFoldableK1_$cmaximum_info:
         const Data.Foldable.$fFoldableK1_$cmaximum_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u71kC_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.405503826 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cfoldl_closure" {
     Data.Foldable.$fFoldableK1_$cfoldl_closure:
         const Data.Foldable.$fFoldableK1_$cfoldl_info;
 },
 Data.Foldable.$fFoldableK1_$cfoldl_entry() //  [R3]
         { []
         }
     {offset
       c71kM: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cfoldl_info" {
     Data.Foldable.$fFoldableK1_$cfoldl_info:
         const Data.Foldable.$fFoldableK1_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.409054055 UTC

[section ""data" . Data.Foldable.$fFoldableK6_closure" {
     Data.Foldable.$fFoldableK6_closure:
         const Data.Foldable.$fFoldableK6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableK6_entry() //  [R1]
         { []
         }
     {offset
       c71kZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71l0; else goto c71l1;
       c71l0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71l1: // global
           (_c71kW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c71kW::I64 == 0) goto c71kY; else goto c71kX;
       c71kY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c71kX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c71kW::I64;
           R2 = Data.Foldable.$fFoldableK7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK6_info" {
     Data.Foldable.$fFoldableK6_info:
         const Data.Foldable.$fFoldableK6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.413412146 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cfoldl1_closure" {
     Data.Foldable.$fFoldableK1_$cfoldl1_closure:
         const Data.Foldable.$fFoldableK1_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableK1_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c71le: // global
           R2 = Data.Foldable.$fFoldableK6_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cfoldl1_info" {
     Data.Foldable.$fFoldableK1_$cfoldl1_info:
         const Data.Foldable.$fFoldableK1_$cfoldl1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.417343637 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cfoldr'_closure" {
     Data.Foldable.$fFoldableK1_$cfoldr'_closure:
         const Data.Foldable.$fFoldableK1_$cfoldr'_info;
 },
 Data.Foldable.$fFoldableK1_$cfoldr'_entry() //  [R3]
         { []
         }
     {offset
       c71lp: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cfoldr'_info" {
     Data.Foldable.$fFoldableK1_$cfoldr'_info:
         const Data.Foldable.$fFoldableK1_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.420553131 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$clength_closure" {
     Data.Foldable.$fFoldableK1_$clength_closure:
         const Data.Foldable.$fFoldableK1_$clength_info;
 },
 Data.Foldable.$fFoldableK1_$clength_entry() //  []
         { []
         }
     {offset
       c71lA: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$clength_info" {
     Data.Foldable.$fFoldableK1_$clength_info:
         const Data.Foldable.$fFoldableK1_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.424887216 UTC

[section ""data" . Data.Foldable.$fFoldableK8_closure" {
     Data.Foldable.$fFoldableK8_closure:
         const Data.Foldable.$fFoldableK8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldableK8_entry() //  [R1]
         { []
         }
     {offset
       c71lO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71lP; else goto c71lQ;
       c71lP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71lQ: // global
           (_c71lL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c71lL::I64 == 0) goto c71lN; else goto c71lM;
       c71lN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c71lM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c71lL::I64;
           R2 = Data.Foldable.$fFoldableK9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK8_info" {
     Data.Foldable.$fFoldableK8_info:
         const Data.Foldable.$fFoldableK8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.428965665 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cfoldr1_closure" {
     Data.Foldable.$fFoldableK1_$cfoldr1_closure:
         const Data.Foldable.$fFoldableK1_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableK1_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c71m3: // global
           R2 = Data.Foldable.$fFoldableK8_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cfoldr1_info" {
     Data.Foldable.$fFoldableK1_$cfoldr1_info:
         const Data.Foldable.$fFoldableK1_$cfoldr1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S6Z86_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.432515845 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cnull_closure" {
     Data.Foldable.$fFoldableK1_$cnull_closure:
         const Data.Foldable.$fFoldableK1_$cnull_info;
 },
 Data.Foldable.$fFoldableK1_$cnull_entry() //  []
         { []
         }
     {offset
       c71me: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cnull_info" {
     Data.Foldable.$fFoldableK1_$cnull_info:
         const Data.Foldable.$fFoldableK1_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.436117009 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cfold_closure" {
     Data.Foldable.$fFoldableK1_$cfold_closure:
         const Data.Foldable.$fFoldableK1_$cfold_info;
 },
 Data.Foldable.$fFoldableK1_$cfold_entry() //  [R2]
         { []
         }
     {offset
       c71mr: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cfold_info" {
     Data.Foldable.$fFoldableK1_$cfold_info:
         const Data.Foldable.$fFoldableK1_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.439774891 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$cproduct_closure" {
     Data.Foldable.$fFoldableK1_$cproduct_closure:
         const Data.Foldable.$fFoldableK1_$cproduct_info;
         const 0;
 },
 Data.Foldable.$fFoldableK1_$cproduct_entry() //  [R2]
         { []
         }
     {offset
       c71mC: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$cproduct_info" {
     Data.Foldable.$fFoldableK1_$cproduct_info:
         const Data.Foldable.$fFoldableK1_$cproduct_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.44333242 UTC

[section ""data" . Data.Foldable.$fFoldableK1_$ctoList_closure" {
     Data.Foldable.$fFoldableK1_$ctoList_closure:
         const Data.Foldable.$fFoldableK1_$ctoList_info;
 },
 Data.Foldable.$fFoldableK1_$ctoList_entry() //  []
         { []
         }
     {offset
       c71mN: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableK1_$ctoList_info" {
     Data.Foldable.$fFoldableK1_$ctoList_info:
         const Data.Foldable.$fFoldableK1_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.447686063 UTC

[section ""data" . Data.Foldable.$fFoldableK1_closure" {
     Data.Foldable.$fFoldableK1_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableK1_$cfold_closure+2;
         const Data.Foldable.$fFoldableK1_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableK1_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableK1_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableK1_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableK1_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableK1_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableK1_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableK1_$ctoList_closure+1;
         const Data.Foldable.$fFoldableK1_$cnull_closure+1;
         const Data.Foldable.$fFoldableK1_$clength_closure+1;
         const Data.Foldable.$fFoldableK1_$celem_closure+3;
         const Data.Foldable.$fFoldableK1_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableK1_$cminimum_closure+2;
         const Data.Foldable.$fFoldableK1_$csum_closure+2;
         const Data.Foldable.$fFoldableK1_$cproduct_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.451549949 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$celem_closure" {
     Data.Foldable.$fFoldableRec1_$celem_closure:
         const Data.Foldable.$fFoldableRec1_$celem_info;
         const 0;
 },
 f1_s6YEx_entry() //  [R1]
         { []
         }
     {offset
       c71n5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71n6; else goto c71n7;
       c71n6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71n7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s6YEx_info" {
     f1_s6YEx_info:
         const f1_s6YEx_entry;
         const 2;
         const 18;
 },
 sat_s6YEz_entry() //  [R1, R2]
         { []
         }
     {offset
       c71nd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71ne; else goto c71nf;
       c71ne: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71nf: // global
           _s6YEy::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = _s6YEy::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YEz_info" {
     sat_s6YEz_info:
         const sat_s6YEz_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+816;
 },
 Data.Foldable.$fFoldableRec1_$celem_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c71ng: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c71nk; else goto c71nj;
       c71nk: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_$celem_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71nj: // global
           I64[Hp - 48] = f1_s6YEx_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s6YEz_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$celem_info" {
     Data.Foldable.$fFoldableRec1_$celem_info:
         const Data.Foldable.$fFoldableRec1_$celem_entry;
         const 0;
         const 576460756598390798;
         const 12884901911;
         const S6Z86_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.460142992 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$csum_closure" {
     Data.Foldable.$fFoldableRec1_$csum_closure:
         const Data.Foldable.$fFoldableRec1_$csum_info;
         const 0;
 },
 $dMonoid_s6YEC_entry() //  [R1]
         { []
         }
     {offset
       c71nP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71nQ; else goto c71nR;
       c71nQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71nR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6YEC_info" {
     $dMonoid_s6YEC_info:
         const $dMonoid_s6YEC_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+832;
 },
 sat_s6YEE_entry() //  [R1, R2]
         { []
         }
     {offset
       c71nX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71nY; else goto c71nZ;
       c71nY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71nZ: // global
           _s6YED::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp - 8] = _s6YED::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YEE_info" {
     sat_s6YEE_info:
         const sat_s6YEE_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Foldable.$fFoldableRec1_$csum_entry() //  [R2, R3]
         { []
         }
     {offset
       c71o0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c71o4; else goto c71o3;
       c71o4: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_$csum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71o3: // global
           I64[Hp - 40] = $dMonoid_s6YEC_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s6YEE_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$csum_info" {
     Data.Foldable.$fFoldableRec1_$csum_info:
         const Data.Foldable.$fFoldableRec1_$csum_entry;
         const 0;
         const 288230380446679054;
         const 8589934607;
         const S6Z86_srt+832;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.469651833 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cminimum_closure" {
     Data.Foldable.$fFoldableRec1_$cminimum_closure:
         const Data.Foldable.$fFoldableRec1_$cminimum_info;
         const 0;
 },
 $dMonoid_s6YEH_entry() //  [R1]
         { []
         }
     {offset
       c71ox: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71oy; else goto c71oz;
       c71oy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71oz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6YEH_info" {
     $dMonoid_s6YEH_info:
         const $dMonoid_s6YEH_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+848;
 },
 sat_s6YEL_entry() //  [R1, R2]
         { []
         }
     {offset
       c71oL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c71oM; else goto c71oN;
       c71oM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71oN: // global
           I64[Sp - 8] = block_c71oF_info;
           _s6YEI::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           P64[Sp - 16] = _s6YEI::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YEL_info" {
     sat_s6YEL_info:
         const sat_s6YEL_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+856;
 },
 _c71oF() //  [R1]
         { []
         }
     {offset
       c71oF: // global
           if (R1 & 7 == 1) goto c71oI; else goto c71oJ;
       c71oI: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c71oJ: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71oF_info" {
     block_c71oF_info:
         const _c71oF;
         const 0;
         const 4294967326;
         const S6Z86_srt+856;
 },
 Data.Foldable.$fFoldableRec1_$cminimum_entry() //  [R2, R3]
         { []
         }
     {offset
       c71oU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c71oY; else goto c71oX;
       c71oY: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_$cminimum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71oX: // global
           I64[Hp - 40] = $dMonoid_s6YEH_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s6YEL_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cminimum_info" {
     Data.Foldable.$fFoldableRec1_$cminimum_info:
         const Data.Foldable.$fFoldableRec1_$cminimum_entry;
         const 0;
         const 144115200960757774;
         const 8589934607;
         const S6Z86_srt+848;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.480468383 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cmaximum_closure" {
     Data.Foldable.$fFoldableRec1_$cmaximum_closure:
         const Data.Foldable.$fFoldableRec1_$cmaximum_info;
         const 0;
 },
 $dMonoid_s6YEO_entry() //  [R1]
         { []
         }
     {offset
       c71py: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71pz; else goto c71pA;
       c71pz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71pA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6YEO_info" {
     $dMonoid_s6YEO_info:
         const $dMonoid_s6YEO_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+872;
 },
 sat_s6YES_entry() //  [R1, R2]
         { []
         }
     {offset
       c71pM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c71pN; else goto c71pO;
       c71pN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71pO: // global
           I64[Sp - 8] = block_c71pG_info;
           _s6YEP::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           P64[Sp - 16] = _s6YEP::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YES_info" {
     sat_s6YES_info:
         const sat_s6YES_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+880;
 },
 _c71pG() //  [R1]
         { []
         }
     {offset
       c71pG: // global
           if (R1 & 7 == 1) goto c71pJ; else goto c71pK;
       c71pJ: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c71pK: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71pG_info" {
     block_c71pG_info:
         const _c71pG;
         const 0;
         const 4294967326;
         const S6Z86_srt+880;
 },
 Data.Foldable.$fFoldableRec1_$cmaximum_entry() //  [R2, R3]
         { []
         }
     {offset
       c71pV: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c71pZ; else goto c71pY;
       c71pZ: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_$cmaximum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71pY: // global
           I64[Hp - 40] = $dMonoid_s6YEO_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s6YES_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cmaximum_info" {
     Data.Foldable.$fFoldableRec1_$cmaximum_info:
         const Data.Foldable.$fFoldableRec1_$cmaximum_entry;
         const 0;
         const 36028809903865870;
         const 8589934607;
         const S6Z86_srt+872;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.491647779 UTC

[section ""data" . Data.Foldable.$fFoldable:.:3_closure" {
     Data.Foldable.$fFoldable:.:3_closure:
         const Data.Foldable.$fFoldable:.:3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldable:.:3_entry() //  [R1]
         { []
         }
     {offset
       c71qx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71qy; else goto c71qz;
       c71qy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71qz: // global
           (_c71qu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c71qu::I64 == 0) goto c71qw; else goto c71qv;
       c71qw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c71qv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c71qu::I64;
           R2 = Data.Foldable.$fFoldableK8_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:3_info" {
     Data.Foldable.$fFoldable:.:3_info:
         const Data.Foldable.$fFoldable:.:3_entry;
         const 0;
         const 21474836501;
         const S6Z86_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.497906852 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cfoldr1_closure" {
     Data.Foldable.$fFoldableRec1_$cfoldr1_closure:
         const Data.Foldable.$fFoldableRec1_$cfoldr1_info;
         const 0;
 },
 sat_s6YF0_entry() //  [R1]
         { []
         }
     {offset
       c71r2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c71r3; else goto c71r4;
       c71r3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71r4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c71qV_info;
           _s6YEU::P64 = P64[R1 + 16];
           _s6YEW::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6YEU::P64;
           P64[Sp - 24] = _s6YEW::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u71rb; else goto c71qW;
       u71rb: // global
           call _c71qV(R1) args: 0, res: 0, upd: 0;
       c71qW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YF0_info" {
     sat_s6YF0_info:
         const sat_s6YF0_entry;
         const 3;
         const 15;
 },
 _c71qV() //  [R1]
         { []
         }
     {offset
       c71qV: // global
           _s6YEW::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c71qZ; else goto c71r0;
       c71qZ: // global
           R1 = _s6YEW::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c71r0: // global
           R3 = P64[R1 + 6];
           R2 = _s6YEW::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c71qV_info" {
     block_c71qV_info:
         const _c71qV;
         const 2;
         const 30;
 },
 sat_s6YF1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c71rd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c71rh; else goto c71rg;
       c71rh: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71rg: // global
           _s6YEU::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6YF0_info;
           P64[Hp - 32] = _s6YEU::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YF1_info" {
     sat_s6YF1_info:
         const sat_s6YF1_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldableRec1_$cfoldr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c71ro: // global
           _s6YEV::P64 = R4;
           _s6YEU::P64 = R3;
           _s6YET::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c71rp; else goto c71rq;
       c71rq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c71rs; else goto c71rr;
       c71rs: // global
           HpAlloc = 16;
           goto c71rp;
       c71rp: // global
           R4 = _s6YEV::P64;
           R3 = _s6YEU::P64;
           R2 = _s6YET::P64;
           R1 = Data.Foldable.$fFoldableRec1_$cfoldr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71rr: // global
           I64[Hp - 8] = sat_s6YF1_info;
           P64[Hp] = _s6YEU::P64;
           I64[Sp - 8] = block_c71ri_info;
           R2 = _s6YET::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _s6YEV::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cfoldr1_info" {
     Data.Foldable.$fFoldableRec1_$cfoldr1_info:
         const Data.Foldable.$fFoldableRec1_$cfoldr1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6Z86_srt+1064;
 },
 _c71ri() //  [R1]
         { []
         }
     {offset
       c71ri: // global
           if (R1 & 7 == 1) goto c71rl; else goto c71rm;
       c71rl: // global
           R1 = Data.Foldable.$fFoldable:.:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c71rm: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71ri_info" {
     block_c71ri_info:
         const _c71ri;
         const 0;
         const 4294967326;
         const S6Z86_srt+1064;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.510759409 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cfoldl'_closure" {
     Data.Foldable.$fFoldableRec1_$cfoldl'_closure:
         const Data.Foldable.$fFoldableRec1_$cfoldl'_info;
 },
 sat_s6YFc_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c71sj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71sk; else goto c71sl;
       c71sk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71sl: // global
           I64[Sp - 16] = block_c71sh_info;
           _s6YF9::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6YF9::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YFc_info" {
     sat_s6YFc_info:
         const sat_s6YFc_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c71sh() //  [R1]
         { []
         }
     {offset
       c71sh: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71sh_info" {
     block_c71sh_info:
         const _c71sh;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableRec1_$cfoldl'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c71sn: // global
           _s6YF7::P64 = R5;
           _s6YF6::P64 = R4;
           _s6YF5::P64 = R3;
           _s6YF4::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c71so; else goto c71sp;
       c71sp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c71sr; else goto c71sq;
       c71sr: // global
           HpAlloc = 16;
           goto c71so;
       c71so: // global
           R5 = _s6YF7::P64;
           R4 = _s6YF6::P64;
           R3 = _s6YF5::P64;
           R2 = _s6YF4::P64;
           R1 = Data.Foldable.$fFoldableRec1_$cfoldl'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71sq: // global
           I64[Hp - 8] = sat_s6YFc_info;
           P64[Hp] = _s6YF5::P64;
           R2 = _s6YF4::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 5;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = _s6YF7::P64;
           P64[Sp - 8] = _s6YF6::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cfoldl'_info" {
     Data.Foldable.$fFoldableRec1_$cfoldl'_info:
         const Data.Foldable.$fFoldableRec1_$cfoldl'_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.518719146 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$clength_closure" {
     Data.Foldable.$fFoldableRec1_$clength_closure:
         const Data.Foldable.$fFoldableRec1_$clength_info;
 },
 Data.Foldable.$fFoldableRec1_$clength_entry() //  [R2, R3]
         { []
         }
     {offset
       c71sO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c71sP; else goto c71sQ;
       c71sP: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_$clength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71sQ: // global
           R2 = R2;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldableM2_closure+3;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$clength_info" {
     Data.Foldable.$fFoldableRec1_$clength_info:
         const Data.Foldable.$fFoldableRec1_$clength_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.523751962 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cfoldl_closure" {
     Data.Foldable.$fFoldableRec1_$cfoldl_closure:
         const Data.Foldable.$fFoldableRec1_$cfoldl_info;
         const 0;
 },
 sat_s6YFl_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c71ta: // global
           _s6YFk::P64 = R3;
           R3 = R2;
           R2 = _s6YFk::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YFl_info" {
     sat_s6YFl_info:
         const sat_s6YFl_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldableRec1_$cfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c71td: // global
           _s6YFi::P64 = R5;
           _s6YFh::P64 = R4;
           _s6YFg::P64 = R3;
           _s6YFf::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c71te; else goto c71tf;
       c71tf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c71th; else goto c71tg;
       c71th: // global
           HpAlloc = 16;
           goto c71te;
       c71te: // global
           R5 = _s6YFi::P64;
           R4 = _s6YFh::P64;
           R3 = _s6YFg::P64;
           R2 = _s6YFf::P64;
           R1 = Data.Foldable.$fFoldableRec1_$cfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71tg: // global
           I64[Hp - 8] = sat_s6YFl_info;
           P64[Hp] = _s6YFg::P64;
           R2 = _s6YFf::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = _s6YFi::P64;
           P64[Sp - 8] = _s6YFh::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cfoldl_info" {
     Data.Foldable.$fFoldableRec1_$cfoldl_info:
         const Data.Foldable.$fFoldableRec1_$cfoldl_entry;
         const 0;
         const 9007203549708302;
         const 17179869208;
         const S6Z86_srt+912;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.530553211 UTC

[section ""data" . Data.Foldable.$fFoldable:.:2_closure" {
     Data.Foldable.$fFoldable:.:2_closure:
         const Data.Foldable.$fFoldable:.:2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Foldable.$fFoldable:.:2_entry() //  [R1]
         { []
         }
     {offset
       c71tA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71tB; else goto c71tC;
       c71tB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71tC: // global
           (_c71tx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c71tx::I64 == 0) goto c71tz; else goto c71ty;
       c71tz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c71ty: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c71tx::I64;
           R2 = Data.Foldable.$fFoldableK6_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:2_info" {
     Data.Foldable.$fFoldable:.:2_info:
         const Data.Foldable.$fFoldable:.:2_entry;
         const 0;
         const 12884901909;
         const S6Z86_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.537979173 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cfoldl1_closure" {
     Data.Foldable.$fFoldableRec1_$cfoldl1_closure:
         const Data.Foldable.$fFoldableRec1_$cfoldl1_info;
         const 0;
 },
 sat_s6YFt_entry() //  [R1]
         { []
         }
     {offset
       c71u5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c71u6; else goto c71u7;
       c71u6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71u7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c71tY_info;
           _s6YFn::P64 = P64[R1 + 16];
           _s6YFp::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6YFn::P64;
           P64[Sp - 24] = _s6YFp::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u71ue; else goto c71tZ;
       u71ue: // global
           call _c71tY(R1) args: 0, res: 0, upd: 0;
       c71tZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YFt_info" {
     sat_s6YFt_info:
         const sat_s6YFt_entry;
         const 3;
         const 15;
 },
 _c71tY() //  [R1]
         { []
         }
     {offset
       c71tY: // global
           _s6YFp::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c71u2; else goto c71u3;
       c71u2: // global
           R1 = _s6YFp::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c71u3: // global
           R3 = _s6YFp::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c71tY_info" {
     block_c71tY_info:
         const _c71tY;
         const 2;
         const 30;
 },
 sat_s6YFu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c71ug: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c71uk; else goto c71uj;
       c71uk: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71uj: // global
           _s6YFn::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6YFt_info;
           P64[Hp - 32] = _s6YFn::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YFu_info" {
     sat_s6YFu_info:
         const sat_s6YFu_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldableRec1_$cfoldl1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c71ur: // global
           _s6YFo::P64 = R4;
           _s6YFn::P64 = R3;
           _s6YFm::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c71us; else goto c71ut;
       c71ut: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c71uv; else goto c71uu;
       c71uv: // global
           HpAlloc = 16;
           goto c71us;
       c71us: // global
           R4 = _s6YFo::P64;
           R3 = _s6YFn::P64;
           R2 = _s6YFm::P64;
           R1 = Data.Foldable.$fFoldableRec1_$cfoldl1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71uu: // global
           I64[Hp - 8] = sat_s6YFu_info;
           P64[Hp] = _s6YFn::P64;
           I64[Sp - 8] = block_c71ul_info;
           R2 = _s6YFm::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           P64[Sp - 40] = Data.Foldable.$fFoldableM3_closure;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = _s6YFo::P64;
           P64[Sp - 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cfoldl1_info" {
     Data.Foldable.$fFoldableRec1_$cfoldl1_info:
         const Data.Foldable.$fFoldableRec1_$cfoldl1_entry;
         const 0;
         const 6755403736023054;
         const 12884901911;
         const S6Z86_srt+936;
 },
 _c71ul() //  [R1]
         { []
         }
     {offset
       c71ul: // global
           if (R1 & 7 == 1) goto c71uo; else goto c71up;
       c71uo: // global
           R1 = Data.Foldable.$fFoldable:.:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c71up: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71ul_info" {
     block_c71ul_info:
         const _c71ul;
         const 0;
         const 4294967326;
         const S6Z86_srt+1088;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.550792805 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cfoldr'_closure" {
     Data.Foldable.$fFoldableRec1_$cfoldr'_closure:
         const Data.Foldable.$fFoldableRec1_$cfoldr'_info;
         const 0;
 },
 sat_s6YFF_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c71vn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71vo; else goto c71vp;
       c71vo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71vp: // global
           I64[Sp - 16] = block_c71vl_info;
           _s6YFC::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6YFC::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YFF_info" {
     sat_s6YFF_info:
         const sat_s6YFF_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c71vl() //  [R1]
         { []
         }
     {offset
       c71vl: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71vl_info" {
     block_c71vl_info:
         const _c71vl;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableRec1_$cfoldr'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c71vr: // global
           _s6YFA::P64 = R5;
           _s6YFz::P64 = R4;
           _s6YFy::P64 = R3;
           _s6YFx::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c71vs; else goto c71vt;
       c71vt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c71vv; else goto c71vu;
       c71vv: // global
           HpAlloc = 16;
           goto c71vs;
       c71vs: // global
           R5 = _s6YFA::P64;
           R4 = _s6YFz::P64;
           R3 = _s6YFy::P64;
           R2 = _s6YFx::P64;
           R1 = Data.Foldable.$fFoldableRec1_$cfoldr'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71vu: // global
           I64[Hp - 8] = sat_s6YFF_info;
           P64[Hp] = _s6YFy::P64;
           R2 = _s6YFx::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Foldable.$fFoldableM4_closure;
           P64[Sp - 32] = Hp - 5;
           P64[Sp - 24] = _s6YFA::P64;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = _s6YFz::P64;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cfoldr'_info" {
     Data.Foldable.$fFoldableRec1_$cfoldr'_info:
         const Data.Foldable.$fFoldableRec1_$cfoldr'_entry;
         const 0;
         const 2251804108652558;
         const 17179869208;
         const S6Z86_srt+952;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.558943517 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cfold_closure" {
     Data.Foldable.$fFoldableRec1_$cfold_closure:
         const Data.Foldable.$fFoldableRec1_$cfold_info;
 },
 Data.Foldable.$fFoldableRec1_$cfold_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c71vT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71vU; else goto c71vV;
       c71vU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_$cfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71vV: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cfold_info" {
     Data.Foldable.$fFoldableRec1_$cfold_info:
         const Data.Foldable.$fFoldableRec1_$cfold_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.564160546 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$cproduct_closure" {
     Data.Foldable.$fFoldableRec1_$cproduct_closure:
         const Data.Foldable.$fFoldableRec1_$cproduct_info;
         const 0;
 },
 $dMonoid_s6YFL_entry() //  [R1]
         { []
         }
     {offset
       c71wc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71wd; else goto c71we;
       c71wd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71we: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6YFL_info" {
     $dMonoid_s6YFL_info:
         const $dMonoid_s6YFL_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+960;
 },
 sat_s6YFN_entry() //  [R1, R2]
         { []
         }
     {offset
       c71wk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71wl; else goto c71wm;
       c71wl: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71wm: // global
           _s6YFM::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = Data.Foldable.$fFoldable:*:1_closure+1;
           P64[Sp - 8] = _s6YFM::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YFN_info" {
     sat_s6YFN_info:
         const sat_s6YFN_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Foldable.$fFoldableRec1_$cproduct_entry() //  [R2, R3]
         { []
         }
     {offset
       c71wn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c71wr; else goto c71wq;
       c71wr: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_$cproduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71wq: // global
           I64[Hp - 40] = $dMonoid_s6YFL_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s6YFN_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$cproduct_info" {
     Data.Foldable.$fFoldableRec1_$cproduct_info:
         const Data.Foldable.$fFoldableRec1_$cproduct_entry;
         const 0;
         const 2251804108652558;
         const 8589934607;
         const S6Z86_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.572291184 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_$ctoList_closure" {
     Data.Foldable.$fFoldableRec1_$ctoList_closure:
         const Data.Foldable.$fFoldableRec1_$ctoList_info;
 },
 Data.Foldable.$fFoldableRec1_$ctoList_entry() //  [R2, R3]
         { []
         }
     {offset
       c71wQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71wR; else goto c71wS;
       c71wR: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_$ctoList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71wS: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_$ctoList_info" {
     Data.Foldable.$fFoldableRec1_$ctoList_info:
         const Data.Foldable.$fFoldableRec1_$ctoList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.583109516 UTC

[section ""data" . Data.Foldable.$fFoldableRec1_closure" {
     Data.Foldable.$fFoldableRec1_closure:
         const Data.Foldable.$fFoldableRec1_info;
         const 0;
 },
 sat_s6YGd_entry() //  [R1, R2]
         { []
         }
     {offset
       c71xc: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableRec1_$cproduct_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YGd_info" {
     sat_s6YGd_info:
         const sat_s6YGd_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Z86_srt+1112;
 },
 sat_s6YGc_entry() //  [R1, R2]
         { []
         }
     {offset
       c71xk: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableRec1_$csum_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YGc_info" {
     sat_s6YGc_info:
         const sat_s6YGc_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Z86_srt+1040;
 },
 sat_s6YGb_entry() //  [R1, R2]
         { []
         }
     {offset
       c71xs: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableRec1_$cminimum_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YGb_info" {
     sat_s6YGb_info:
         const sat_s6YGb_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Z86_srt+1048;
 },
 sat_s6YGa_entry() //  [R1, R2]
         { []
         }
     {offset
       c71xA: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableRec1_$cmaximum_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YGa_info" {
     sat_s6YGa_info:
         const sat_s6YGa_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S6Z86_srt+1056;
 },
 sat_s6YG9_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c71xI: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldableRec1_$celem_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YG9_info" {
     sat_s6YG9_info:
         const sat_s6YG9_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Z86_srt+1032;
 },
 sat_s6YG8_entry() //  [R1, R2]
         { []
         }
     {offset
       c71xQ: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableRec1_$clength_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YG8_info" {
     sat_s6YG8_info:
         const sat_s6YG8_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6YG7_entry() //  [R1, R2]
         { []
         }
     {offset
       c71xY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71xZ; else goto c71y0;
       c71xZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71y0: // global
           _s6YG6::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s6YG6::P64;
           Sp = Sp - 16;
           call Data.Foldable.null_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YG7_info" {
     sat_s6YG7_info:
         const sat_s6YG7_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6YG5_entry() //  [R1, R2]
         { []
         }
     {offset
       c71y6: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldableRec1_$ctoList_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YG5_info" {
     sat_s6YG5_info:
         const sat_s6YG5_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s6YG4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c71ye: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldableRec1_$cfoldl1_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YG4_info" {
     sat_s6YG4_info:
         const sat_s6YG4_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Z86_srt+1096;
 },
 sat_s6YG3_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c71ym: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldableRec1_$cfoldr1_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YG3_info" {
     sat_s6YG3_info:
         const sat_s6YG3_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S6Z86_srt+1072;
 },
 sat_s6YG2_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c71yu: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldableRec1_$cfoldl'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YG2_info" {
     sat_s6YG2_info:
         const sat_s6YG2_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s6YG1_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c71yC: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldableRec1_$cfoldl_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YG1_info" {
     sat_s6YG1_info:
         const sat_s6YG1_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const S6Z86_srt+1080;
 },
 sat_s6YG0_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c71yK: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldableRec1_$cfoldr'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YG0_info" {
     sat_s6YG0_info:
         const sat_s6YG0_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const S6Z86_srt+1104;
 },
 sat_s6YFZ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c71yS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71yT; else goto c71yU;
       c71yT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71yU: // global
           _s6YFW::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _s6YFW::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YFZ_info" {
     sat_s6YFZ_info:
         const sat_s6YFZ_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s6YFV_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c71z0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71z1; else goto c71z2;
       c71z1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71z2: // global
           _s6YFS::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _s6YFS::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YFV_info" {
     sat_s6YFV_info:
         const sat_s6YFV_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s6YFR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c71z8: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldableRec1_$cfold_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YFR_info" {
     sat_s6YFR_info:
         const sat_s6YFR_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldableRec1_entry() //  [R2]
         { []
         }
     {offset
       c71zc: // global
           Hp = Hp + 392;
           if (Hp > HpLim) (likely: False) goto c71zg; else goto c71zf;
       c71zg: // global
           HpAlloc = 392;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableRec1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71zf: // global
           I64[Hp - 384] = sat_s6YGd_info;
           P64[Hp - 376] = R2;
           I64[Hp - 368] = sat_s6YGc_info;
           P64[Hp - 360] = R2;
           I64[Hp - 352] = sat_s6YGb_info;
           P64[Hp - 344] = R2;
           I64[Hp - 336] = sat_s6YGa_info;
           P64[Hp - 328] = R2;
           I64[Hp - 320] = sat_s6YG9_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_s6YG8_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_s6YG7_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_s6YG5_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_s6YG4_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_s6YG3_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_s6YG2_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s6YG1_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_s6YG0_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s6YFZ_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s6YFV_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_s6YFR_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = Hp - 142;
           P64[Hp - 112] = Hp - 157;
           P64[Hp - 104] = Hp - 173;
           P64[Hp - 96] = Hp - 189;
           P64[Hp - 88] = Hp - 205;
           P64[Hp - 80] = Hp - 221;
           P64[Hp - 72] = Hp - 238;
           P64[Hp - 64] = Hp - 254;
           P64[Hp - 56] = Hp - 271;
           P64[Hp - 48] = Hp - 287;
           P64[Hp - 40] = Hp - 303;
           P64[Hp - 32] = Hp - 318;
           P64[Hp - 24] = Hp - 335;
           P64[Hp - 16] = Hp - 351;
           P64[Hp - 8] = Hp - 367;
           P64[Hp] = Hp - 383;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableRec1_info" {
     Data.Foldable.$fFoldableRec1_info:
         const Data.Foldable.$fFoldableRec1_entry;
         const 0;
         const 16969415786510;
         const 4294967301;
         const S6Z86_srt+1032;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.61715513 UTC

[section ""data" . Data.Foldable.$fFoldablePar1_$celem_closure" {
     Data.Foldable.$fFoldablePar1_$celem_closure:
         const Data.Foldable.$fFoldablePar1_$celem_info;
 },
 f_s6YGg_entry() //  [R1]
         { []
         }
     {offset
       c71AT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71AU; else goto c71AV;
       c71AU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71AV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6YGg_info" {
     f_s6YGg_info:
         const f_s6YGg_entry;
         const 2;
         const 18;
 },
 sat_s6YGi_entry() //  [R1, R2]
         { []
         }
     {offset
       c71B1: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YGi_info" {
     sat_s6YGi_info:
         const sat_s6YGi_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Foldable.$fFoldablePar1_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       c71B4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c71B8; else goto c71B7;
       c71B8: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldablePar1_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71B7: // global
           I64[Hp - 40] = f_s6YGg_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6YGi_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar1_$celem_info" {
     Data.Foldable.$fFoldablePar1_$celem_info:
         const Data.Foldable.$fFoldablePar1_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.624347009 UTC

[section ""data" . Data.Foldable.$fFoldablePar2_closure" {
     Data.Foldable.$fFoldablePar2_closure:
         const Data.Foldable.$fFoldablePar2_info;
 },
 Data.Foldable.$fFoldablePar2_entry() //  [R3]
         { []
         }
     {offset
       c71Bv: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar2_info" {
     Data.Foldable.$fFoldablePar2_info:
         const Data.Foldable.$fFoldablePar2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.628170645 UTC

[section ""data" . Data.Foldable.$fFoldablePar3_closure" {
     Data.Foldable.$fFoldablePar3_closure:
         const Data.Foldable.$fFoldablePar3_info;
 },
 Data.Foldable.$fFoldablePar3_entry() //  [R3]
         { []
         }
     {offset
       c71BG: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar3_info" {
     Data.Foldable.$fFoldablePar3_info:
         const Data.Foldable.$fFoldablePar3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.631799057 UTC

[section ""data" . Data.Foldable.$fFoldablePar4_closure" {
     Data.Foldable.$fFoldablePar4_closure:
         const Data.Foldable.$fFoldablePar4_info;
 },
 Data.Foldable.$fFoldablePar4_entry() //  [R3]
         { []
         }
     {offset
       c71BR: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar4_info" {
     Data.Foldable.$fFoldablePar4_info:
         const Data.Foldable.$fFoldablePar4_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.635577603 UTC

[section ""data" . Data.Foldable.$fFoldablePar1_$cfoldl'_closure" {
     Data.Foldable.$fFoldablePar1_$cfoldl'_closure:
         const Data.Foldable.$fFoldablePar1_$cfoldl'_info;
 },
 Data.Foldable.$fFoldablePar1_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c71C2: // global
           _s6YGq::P64 = R3;
           R3 = R4;
           _s6YGp::P64 = R2;
           R2 = _s6YGq::P64;
           R1 = _s6YGp::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar1_$cfoldl'_info" {
     Data.Foldable.$fFoldablePar1_$cfoldl'_info:
         const Data.Foldable.$fFoldablePar1_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.639225521 UTC

[section ""data" . Data.Foldable.$fFoldablePar1_$clength_closure" {
     Data.Foldable.$fFoldablePar1_$clength_closure:
         const Data.Foldable.$fFoldablePar1_$clength_info;
 },
 Data.Foldable.$fFoldablePar1_$clength_entry() //  []
         { []
         }
     {offset
       c71Cd: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar1_$clength_info" {
     Data.Foldable.$fFoldablePar1_$clength_info:
         const Data.Foldable.$fFoldablePar1_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.643154272 UTC

[section ""data" . Data.Foldable.$fFoldablePar5_closure" {
     Data.Foldable.$fFoldablePar5_closure:
         const Data.Foldable.$fFoldablePar5_info;
 },
 Data.Foldable.$fFoldablePar5_entry() //  [R3]
         { []
         }
     {offset
       c71Cp: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar5_info" {
     Data.Foldable.$fFoldablePar5_info:
         const Data.Foldable.$fFoldablePar5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.647168857 UTC

[section ""data" . Data.Foldable.$fFoldablePar1_$ctoList_closure" {
     Data.Foldable.$fFoldablePar1_$ctoList_closure:
         const Data.Foldable.$fFoldablePar1_$ctoList_info;
 },
 Data.Foldable.$fFoldablePar1_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c71CB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c71CF; else goto c71CE;
       c71CF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Foldable.$fFoldablePar1_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71CE: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldablePar1_$ctoList_info" {
     Data.Foldable.$fFoldablePar1_$ctoList_info:
         const Data.Foldable.$fFoldablePar1_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.65201797 UTC

[section ""data" . Data.Foldable.$fFoldablePar1_closure" {
     Data.Foldable.$fFoldablePar1_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldablePar5_closure+2;
         const Data.Foldable.$fFoldablePar1_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldablePar1_$cfoldr_closure+3;
         const Data.Foldable.$fFoldablePar1_$cfoldr_closure+3;
         const Data.Foldable.$fFoldablePar1_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldablePar1_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldablePar4_closure+2;
         const Data.Foldable.$fFoldablePar4_closure+2;
         const Data.Foldable.$fFoldablePar1_$ctoList_closure+1;
         const Data.Foldable.$fFoldablePar1_$cnull_closure+1;
         const Data.Foldable.$fFoldablePar1_$clength_closure+1;
         const Data.Foldable.$fFoldablePar1_$celem_closure+2;
         const Data.Foldable.$fFoldablePar3_closure+2;
         const Data.Foldable.$fFoldablePar3_closure+2;
         const Data.Foldable.$fFoldablePar2_closure+2;
         const Data.Foldable.$fFoldablePar2_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.654540488 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$celem_closure" {
     Data.Foldable.$fFoldableV1_$celem_closure:
         const Data.Foldable.$fFoldableV1_$celem_info;
 },
 Data.Foldable.$fFoldableV1_$celem_entry() //  []
         { []
         }
     {offset
       c71CT: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$celem_info" {
     Data.Foldable.$fFoldableV1_$celem_info:
         const Data.Foldable.$fFoldableV1_$celem_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.658137243 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$csum_closure" {
     Data.Foldable.$fFoldableV1_$csum_closure:
         const Data.Foldable.$fFoldableV1_$csum_info;
         const 0;
 },
 Data.Foldable.$fFoldableV1_$csum_entry() //  [R2]
         { []
         }
     {offset
       c71D6: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$csum_info" {
     Data.Foldable.$fFoldableV1_$csum_info:
         const Data.Foldable.$fFoldableV1_$csum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.661672389 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cminimum_closure" {
     Data.Foldable.$fFoldableV1_$cminimum_closure:
         const Data.Foldable.$fFoldableV1_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableV1_$cminimum_entry() //  []
         { []
         }
     {offset
       c71Dh: // global
           R2 = Data.Foldable.$fFoldableK2_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cminimum_info" {
     Data.Foldable.$fFoldableV1_$cminimum_info:
         const Data.Foldable.$fFoldableV1_$cminimum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+992;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.665403282 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cmaximum_closure" {
     Data.Foldable.$fFoldableV1_$cmaximum_closure:
         const Data.Foldable.$fFoldableV1_$cmaximum_info;
         const 0;
 },
 section ""relreadonly" . u71Dv_srtd" {
     u71Dv_srtd:
         const S6Z86_srt+232;
         const 97;
         const 1;
         const 4294967296;
 },
 Data.Foldable.$fFoldableV1_$cmaximum_entry() //  []
         { []
         }
     {offset
       c71Ds: // global
           R2 = Data.Foldable.$fFoldableK4_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cmaximum_info" {
     Data.Foldable.$fFoldableV1_$cmaximum_info:
         const Data.Foldable.$fFoldableV1_$cmaximum_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u71Dv_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.669632683 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cfoldl_closure" {
     Data.Foldable.$fFoldableV1_$cfoldl_closure:
         const Data.Foldable.$fFoldableV1_$cfoldl_info;
 },
 Data.Foldable.$fFoldableV1_$cfoldl_entry() //  [R3]
         { []
         }
     {offset
       c71DF: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cfoldl_info" {
     Data.Foldable.$fFoldableV1_$cfoldl_info:
         const Data.Foldable.$fFoldableV1_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.672990939 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cfoldl1_closure" {
     Data.Foldable.$fFoldableV1_$cfoldl1_closure:
         const Data.Foldable.$fFoldableV1_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableV1_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c71DQ: // global
           R2 = Data.Foldable.$fFoldableK6_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cfoldl1_info" {
     Data.Foldable.$fFoldableV1_$cfoldl1_info:
         const Data.Foldable.$fFoldableV1_$cfoldl1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.676297502 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cfoldr'_closure" {
     Data.Foldable.$fFoldableV1_$cfoldr'_closure:
         const Data.Foldable.$fFoldableV1_$cfoldr'_info;
 },
 Data.Foldable.$fFoldableV1_$cfoldr'_entry() //  [R3]
         { []
         }
     {offset
       c71E1: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cfoldr'_info" {
     Data.Foldable.$fFoldableV1_$cfoldr'_info:
         const Data.Foldable.$fFoldableV1_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.679684137 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$clength_closure" {
     Data.Foldable.$fFoldableV1_$clength_closure:
         const Data.Foldable.$fFoldableV1_$clength_info;
 },
 Data.Foldable.$fFoldableV1_$clength_entry() //  []
         { []
         }
     {offset
       c71Ec: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$clength_info" {
     Data.Foldable.$fFoldableV1_$clength_info:
         const Data.Foldable.$fFoldableV1_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.683845312 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cfoldr1_closure" {
     Data.Foldable.$fFoldableV1_$cfoldr1_closure:
         const Data.Foldable.$fFoldableV1_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableV1_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c71Eo: // global
           R2 = Data.Foldable.$fFoldableK8_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cfoldr1_info" {
     Data.Foldable.$fFoldableV1_$cfoldr1_info:
         const Data.Foldable.$fFoldableV1_$cfoldr1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S6Z86_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.687171481 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cnull_closure" {
     Data.Foldable.$fFoldableV1_$cnull_closure:
         const Data.Foldable.$fFoldableV1_$cnull_info;
 },
 Data.Foldable.$fFoldableV1_$cnull_entry() //  []
         { []
         }
     {offset
       c71Ez: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cnull_info" {
     Data.Foldable.$fFoldableV1_$cnull_info:
         const Data.Foldable.$fFoldableV1_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.690648699 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cfold_closure" {
     Data.Foldable.$fFoldableV1_$cfold_closure:
         const Data.Foldable.$fFoldableV1_$cfold_info;
 },
 Data.Foldable.$fFoldableV1_$cfold_entry() //  [R2]
         { []
         }
     {offset
       c71EM: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cfold_info" {
     Data.Foldable.$fFoldableV1_$cfold_info:
         const Data.Foldable.$fFoldableV1_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.694236916 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$cproduct_closure" {
     Data.Foldable.$fFoldableV1_$cproduct_closure:
         const Data.Foldable.$fFoldableV1_$cproduct_info;
         const 0;
 },
 Data.Foldable.$fFoldableV1_$cproduct_entry() //  [R2]
         { []
         }
     {offset
       c71EX: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$cproduct_info" {
     Data.Foldable.$fFoldableV1_$cproduct_info:
         const Data.Foldable.$fFoldableV1_$cproduct_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.697540448 UTC

[section ""data" . Data.Foldable.$fFoldableV1_$ctoList_closure" {
     Data.Foldable.$fFoldableV1_$ctoList_closure:
         const Data.Foldable.$fFoldableV1_$ctoList_info;
 },
 Data.Foldable.$fFoldableV1_$ctoList_entry() //  []
         { []
         }
     {offset
       c71F8: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableV1_$ctoList_info" {
     Data.Foldable.$fFoldableV1_$ctoList_info:
         const Data.Foldable.$fFoldableV1_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.700677136 UTC

[section ""data" . Data.Foldable.$fFoldableV1_closure" {
     Data.Foldable.$fFoldableV1_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableV1_$cfold_closure+2;
         const Data.Foldable.$fFoldableV1_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableV1_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableV1_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableV1_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableV1_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableV1_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableV1_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableV1_$ctoList_closure+1;
         const Data.Foldable.$fFoldableV1_$cnull_closure+1;
         const Data.Foldable.$fFoldableV1_$clength_closure+1;
         const Data.Foldable.$fFoldableV1_$celem_closure+3;
         const Data.Foldable.$fFoldableV1_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableV1_$cminimum_closure+2;
         const Data.Foldable.$fFoldableV1_$csum_closure+2;
         const Data.Foldable.$fFoldableV1_$cproduct_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.706670658 UTC

[section ""data" . Data.Foldable.$fFoldableArray_$cfoldMap_closure" {
     Data.Foldable.$fFoldableArray_$cfoldMap_closure:
         const Data.Foldable.$fFoldableArray_$cfoldMap_info;
 },
 w1_s6YH4_entry() //  [R1]
         { []
         }
     {offset
       c71Fv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71Fw; else goto c71Fx;
       c71Fw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71Fx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w1_s6YH4_info" {
     w1_s6YH4_info:
         const w1_s6YH4_entry;
         const 1;
         const 16;
 },
 sat_s6YHd_entry() //  [R1]
         { []
         }
     {offset
       c71FM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71FN; else goto c71FO;
       c71FN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71FO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_s6YH5_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YHd_info" {
     sat_s6YHd_info:
         const sat_s6YHd_entry;
         const 4294967297;
         const 19;
 },
 sat_s6YHa_entry() //  [R1]
         { []
         }
     {offset
       c71FX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71FY; else goto c71FZ;
       c71FY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71FZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YHa_info" {
     sat_s6YHa_info:
         const sat_s6YHa_entry;
         const 4294967297;
         const 19;
 },
 sat_s6YHb_entry() //  [R1]
         { []
         }
     {offset
       c71G0: // global
           _s6YHb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c71G1; else goto c71G2;
       c71G2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c71G4; else goto c71G3;
       c71G4: // global
           HpAlloc = 32;
           goto c71G1;
       c71G1: // global
           R1 = _s6YHb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71G3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6YHb::P64;
           _s6YGX::P64 = P64[_s6YHb::P64 + 16];
           _s6YH3::P64 = P64[_s6YHb::P64 + 24];
           _s6YH6::I64 = I64[_s6YHb::P64 + 32];
           I64[Hp - 24] = sat_s6YHa_info;
           P64[Hp - 8] = _s6YH3::P64;
           I64[Hp] = _s6YH6::I64;
           R2 = Hp - 24;
           R1 = _s6YGX::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YHb_info" {
     sat_s6YHb_info:
         const sat_s6YHb_entry;
         const 4294967298;
         const 15;
 },
 $wgo_s6YH5_entry() //  [R1, R2]
         { []
         }
     {offset
       c71G8: // global
           _s6YH6::I64 = R2;
           _s6YH5::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c71G9; else goto c71Ga;
       c71Ga: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c71Gc; else goto c71Gb;
       c71Gc: // global
           HpAlloc = 72;
           goto c71G9;
       c71G9: // global
           R2 = _s6YH6::I64;
           R1 = _s6YH5::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71Gb: // global
           if (_s6YH6::I64 == I64[_s6YH5::P64 + 39]) goto c71G7; else goto c71G6;
       c71G7: // global
           _s6YH4::P64 = P64[_s6YH5::P64 + 31];
           Hp = Hp - 72;
           R1 = _s6YH4::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c71G6: // global
           _s6YGW::P64 = P64[_s6YH5::P64 + 7];
           _s6YGX::P64 = P64[_s6YH5::P64 + 15];
           _s6YH3::P64 = P64[_s6YH5::P64 + 23];
           I64[Hp - 64] = sat_s6YHd_info;
           P64[Hp - 48] = _s6YH5::P64;
           I64[Hp - 40] = _s6YH6::I64;
           I64[Hp - 32] = sat_s6YHb_info;
           P64[Hp - 16] = _s6YGX::P64;
           P64[Hp - 8] = _s6YH3::P64;
           I64[Hp] = _s6YH6::I64;
           R2 = _s6YGW::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s6YH5_info" {
     $wgo_s6YH5_info:
         const $wgo_s6YH5_entry;
         const 4294967300;
         const 8;
         const 4294967300;
 },
 Data.Foldable.$fFoldableArray_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c71Gd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c71Ge; else goto c71Gf;
       c71Ge: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableArray_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71Gf: // global
           I64[Sp - 24] = block_c71Fm_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u71Gj; else goto c71Fn;
       u71Gj: // global
           call _c71Fm(R1) args: 0, res: 0, upd: 0;
       c71Fn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableArray_$cfoldMap_info" {
     Data.Foldable.$fFoldableArray_$cfoldMap_info:
         const Data.Foldable.$fFoldableArray_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c71Fm() //  [R1]
         { []
         }
     {offset
       c71Fm: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c71Gi; else goto c71Gh;
       c71Gi: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c71Gh: // global
           _s6YH3::P64 = P64[R1 + 23];
           _s6YH2::I64 = I64[R1 + 31];
           I64[Hp - 64] = w1_s6YH4_info;
           _s6YGW::P64 = P64[Sp + 8];
           P64[Hp - 48] = _s6YGW::P64;
           I64[Hp - 40] = $wgo_s6YH5_info;
           P64[Hp - 32] = _s6YGW::P64;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _s6YH3::P64;
           P64[Hp - 8] = Hp - 64;
           I64[Hp] = _s6YH2::I64;
           R2 = 0;
           R1 = Hp - 39;
           Sp = Sp + 24;
           call $wgo_s6YH5_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71Fm_info" {
     block_c71Fm_info:
         const _c71Fm;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.726498304 UTC

[section ""data" . Data.Foldable.$fFoldableArray1_closure" {
     Data.Foldable.$fFoldableArray1_closure:
         const Data.Foldable.$fFoldableArray1_info;
         const 0;
 },
 w1_s6YHf_entry() //  [R1]
         { []
         }
     {offset
       c71Hd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71He; else goto c71Hf;
       c71He: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71Hf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidProduct1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w1_s6YHf_info" {
     w1_s6YHf_info:
         const w1_s6YHf_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+1128;
 },
 sat_s6YHt_entry() //  [R1]
         { []
         }
     {offset
       c71HE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71HF; else goto c71HG;
       c71HF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71HG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_s6YHm_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YHt_info" {
     sat_s6YHt_info:
         const sat_s6YHt_entry;
         const 4294967297;
         const 19;
 },
 sat_s6YHr_entry() //  [R1]
         { []
         }
     {offset
       c71HL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71HM; else goto c71HN;
       c71HM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71HN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YHr_info" {
     sat_s6YHr_info:
         const sat_s6YHr_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s6YHm_entry() //  [R1, R2]
         { []
         }
     {offset
       c71HR: // global
           _s6YHn::I64 = R2;
           _s6YHm::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c71HS; else goto c71HT;
       c71HT: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c71HV; else goto c71HU;
       c71HV: // global
           HpAlloc = 64;
           goto c71HS;
       c71HS: // global
           R2 = _s6YHn::I64;
           R1 = _s6YHm::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71HU: // global
           if (_s6YHn::I64 == I64[_s6YHm::P64 + 31]) goto c71HQ; else goto c71HP;
       c71HQ: // global
           _s6YHf::P64 = P64[_s6YHm::P64 + 15];
           Hp = Hp - 64;
           R1 = _s6YHf::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c71HP: // global
           _s6YHe::P64 = P64[_s6YHm::P64 + 7];
           _s6YHl::P64 = P64[_s6YHm::P64 + 23];
           I64[Hp - 56] = sat_s6YHt_info;
           P64[Hp - 40] = _s6YHm::P64;
           I64[Hp - 32] = _s6YHn::I64;
           I64[Hp - 24] = sat_s6YHr_info;
           P64[Hp - 8] = _s6YHl::P64;
           I64[Hp] = _s6YHn::I64;
           R2 = _s6YHe::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s6YHm_info" {
     $wgo_s6YHm_info:
         const $wgo_s6YHm_entry;
         const 4294967299;
         const 8;
         const 4294967300;
 },
 sat_s6YHu_entry() //  [R1, R2]
         { []
         }
     {offset
       c71HW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c71HX; else goto c71HY;
       c71HX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71HY: // global
           I64[Sp - 24] = block_c71Hl_info;
           _s6YHe::P64 = P64[R1 + 7];
           _s6YHf::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s6YHe::P64;
           P64[Sp - 8] = _s6YHf::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u71I2; else goto c71Hm;
       u71I2: // global
           call _c71Hl(R1) args: 0, res: 0, upd: 0;
       c71Hm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YHu_info" {
     sat_s6YHu_info:
         const sat_s6YHu_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c71Hl() //  [R1]
         { []
         }
     {offset
       c71Hl: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c71I1; else goto c71I0;
       c71I1: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c71I0: // global
           _s6YHl::P64 = P64[R1 + 23];
           _s6YHk::I64 = I64[R1 + 31];
           I64[Hp - 32] = $wgo_s6YHm_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s6YHl::P64;
           I64[Hp] = _s6YHk::I64;
           R2 = 0;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call $wgo_s6YHm_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71Hl_info" {
     block_c71Hl_info:
         const _c71Hl;
         const 2;
         const 30;
 },
 Data.Foldable.$fFoldableArray1_entry() //  [R2]
         { []
         }
     {offset
       c71I3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c71I7; else goto c71I6;
       c71I7: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableArray1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71I6: // global
           I64[Hp - 40] = w1_s6YHf_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s6YHu_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableArray1_info" {
     Data.Foldable.$fFoldableArray1_info:
         const Data.Foldable.$fFoldableArray1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Z86_srt+1128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.744231675 UTC

[section ""data" . Data.Foldable.$w$cfold_closure" {
     Data.Foldable.$w$cfold_closure:
         const Data.Foldable.$w$cfold_info;
 },
 w1_s6YHy_entry() //  [R1]
         { []
         }
     {offset
       c71J3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71J4; else goto c71J5;
       c71J4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71J5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w1_s6YHy_info" {
     w1_s6YHy_info:
         const w1_s6YHy_entry;
         const 1;
         const 16;
 },
 sat_s6YHG_entry() //  [R1]
         { []
         }
     {offset
       c71Jk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71Jl; else goto c71Jm;
       c71Jl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71Jm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_s6YHz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YHG_info" {
     sat_s6YHG_info:
         const sat_s6YHG_entry;
         const 4294967297;
         const 19;
 },
 sat_s6YHE_entry() //  [R1]
         { []
         }
     {offset
       c71Jr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71Js; else goto c71Jt;
       c71Js: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71Jt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YHE_info" {
     sat_s6YHE_info:
         const sat_s6YHE_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s6YHz_entry() //  [R1, R2]
         { []
         }
     {offset
       c71Jx: // global
           _s6YHA::I64 = R2;
           _s6YHz::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c71Jy; else goto c71Jz;
       c71Jz: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c71JB; else goto c71JA;
       c71JB: // global
           HpAlloc = 64;
           goto c71Jy;
       c71Jy: // global
           R2 = _s6YHA::I64;
           R1 = _s6YHz::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71JA: // global
           if (_s6YHA::I64 == I64[_s6YHz::P64 + 31]) goto c71Jw; else goto c71Jv;
       c71Jw: // global
           _s6YHy::P64 = P64[_s6YHz::P64 + 23];
           Hp = Hp - 64;
           R1 = _s6YHy::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c71Jv: // global
           _s6YHv::P64 = P64[_s6YHz::P64 + 7];
           _s6YHx::P64 = P64[_s6YHz::P64 + 15];
           I64[Hp - 56] = sat_s6YHG_info;
           P64[Hp - 40] = _s6YHz::P64;
           I64[Hp - 32] = _s6YHA::I64;
           I64[Hp - 24] = sat_s6YHE_info;
           P64[Hp - 8] = _s6YHx::P64;
           I64[Hp] = _s6YHA::I64;
           R2 = _s6YHv::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s6YHz_info" {
     $wgo_s6YHz_info:
         const $wgo_s6YHz_entry;
         const 4294967299;
         const 8;
         const 4294967300;
 },
 Data.Foldable.$w$cfold_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c71JC: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c71JG; else goto c71JF;
       c71JG: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$w$cfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71JF: // global
           I64[Hp - 56] = w1_s6YHy_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = $wgo_s6YHz_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = Hp - 56;
           I64[Hp] = R3;
           R2 = 0;
           R1 = Hp - 31;
           call $wgo_s6YHz_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfold_info" {
     Data.Foldable.$w$cfold_info:
         const Data.Foldable.$w$cfold_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.756243806 UTC

[section ""data" . Data.Foldable.$fFoldableArray_$cfold_closure" {
     Data.Foldable.$fFoldableArray_$cfold_closure:
         const Data.Foldable.$fFoldableArray_$cfold_info;
 },
 Data.Foldable.$fFoldableArray_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c71Km: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71Kn; else goto c71Ko;
       c71Kn: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableArray_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71Ko: // global
           I64[Sp - 16] = block_c71Kj_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u71Ks; else goto c71Kk;
       u71Ks: // global
           call _c71Kj(R1) args: 0, res: 0, upd: 0;
       c71Kk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableArray_$cfold_info" {
     Data.Foldable.$fFoldableArray_$cfold_info:
         const Data.Foldable.$fFoldableArray_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c71Kj() //  [R1]
         { []
         }
     {offset
       c71Kj: // global
           R4 = P64[R1 + 23];
           R3 = I64[R1 + 31];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Foldable.$w$cfold_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71Kj_info" {
     block_c71Kj_info:
         const _c71Kj;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.766553747 UTC

[section ""data" . Data.Foldable.$w$cmaximum_closure" {
     Data.Foldable.$w$cmaximum_closure:
         const Data.Foldable.$w$cmaximum_info;
         const 0;
 },
 x_s6YHU_entry() //  [R1]
         { []
         }
     {offset
       c71KT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71KU; else goto c71KV;
       c71KU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71KV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . x_s6YHU_info" {
     x_s6YHU_info:
         const x_s6YHU_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s6YHR_entry() //  [R1, R2]
         { []
         }
     {offset
       c71KZ: // global
           _s6YHS::I64 = R2;
           _s6YHR::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto c71L0; else goto c71L1;
       c71L1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c71L3; else goto c71L2;
       c71L3: // global
           HpAlloc = 32;
           goto c71L0;
       c71L0: // global
           R2 = _s6YHS::I64;
           R1 = _s6YHR::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71L2: // global
           if (_s6YHS::I64 == I64[_s6YHR::P64 + 23]) goto c71KY; else goto c71KX;
       c71KY: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c71KX: // global
           _s6YHO::P64 = P64[_s6YHR::P64 + 7];
           _s6YHQ::P64 = P64[_s6YHR::P64 + 15];
           I64[Hp - 24] = x_s6YHU_info;
           P64[Hp - 8] = _s6YHQ::P64;
           I64[Hp] = _s6YHS::I64;
           I64[Sp - 24] = block_c71L7_info;
           R2 = _s6YHS::I64 + 1;
           R1 = _s6YHR::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _s6YHO::P64;
           Sp = Sp - 24;
           call $wgo_s6YHR_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s6YHR_info" {
     $wgo_s6YHR_info:
         const $wgo_s6YHR_entry;
         const 4294967298;
         const 8;
         const 4294967300;
 },
 _c71L7() //  [R1]
         { []
         }
     {offset
       c71L7: // global
           _c71KP::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c71Ld; else goto c71Ll;
       c71Ld: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c71Lg; else goto c71Lf;
       c71Lg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c71Lf: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _c71KP::P64;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c71Ll: // global
           I64[Sp] = block_c71Lj_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _c71KP::P64;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 16] = R1;
           Sp = Sp - 24;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c71L7_info" {
     block_c71L7_info:
         const _c71L7;
         const 2;
         const 30;
 },
 _c71Lj() //  [R1]
         { []
         }
     {offset
       c71Lj: // global
           if (R1 & 7 == 1) goto c71Lr; else goto c71Lv;
       c71Lr: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c71Lv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c71Ly; else goto c71Lx;
       c71Ly: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c71Lx: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71Lj_info" {
     block_c71Lj_info:
         const _c71Lj;
         const 2;
         const 30;
 },
 Data.Foldable.$w$cmaximum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c71LH: // global
           _s6YHQ::P64 = R4;
           _s6YHP::I64 = R3;
           _s6YHO::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c71LI; else goto c71LJ;
       c71LJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c71LL; else goto c71LK;
       c71LL: // global
           HpAlloc = 32;
           goto c71LI;
       c71LI: // global
           R4 = _s6YHQ::P64;
           R3 = _s6YHP::I64;
           R2 = _s6YHO::P64;
           R1 = Data.Foldable.$w$cmaximum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71LK: // global
           I64[Hp - 24] = $wgo_s6YHR_info;
           P64[Hp - 16] = _s6YHO::P64;
           P64[Hp - 8] = _s6YHQ::P64;
           I64[Hp] = _s6YHP::I64;
           I64[Sp - 8] = block_c71LB_info;
           R2 = 0;
           R1 = Hp - 23;
           Sp = Sp - 8;
           call $wgo_s6YHR_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cmaximum_info" {
     Data.Foldable.$w$cmaximum_info:
         const Data.Foldable.$w$cmaximum_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const S6Z86_srt+1144;
 },
 _c71LB() //  [R1]
         { []
         }
     {offset
       c71LB: // global
           if (R1 & 7 == 1) goto c71LE; else goto c71LF;
       c71LE: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c71LF: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71LB_info" {
     block_c71LB_info:
         const _c71LB;
         const 0;
         const 4294967326;
         const S6Z86_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.781581467 UTC

[section ""data" . Data.Foldable.$fFoldableArray_$cmaximum_closure" {
     Data.Foldable.$fFoldableArray_$cmaximum_closure:
         const Data.Foldable.$fFoldableArray_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableArray_$cmaximum_entry() //  [R2, R3]
         { []
         }
     {offset
       c71ML: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71MM; else goto c71MN;
       c71MM: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableArray_$cmaximum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71MN: // global
           I64[Sp - 16] = block_c71MI_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u71MR; else goto c71MJ;
       u71MR: // global
           call _c71MI(R1) args: 0, res: 0, upd: 0;
       c71MJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableArray_$cmaximum_info" {
     Data.Foldable.$fFoldableArray_$cmaximum_info:
         const Data.Foldable.$fFoldableArray_$cmaximum_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S6Z86_srt+1144;
 },
 _c71MI() //  [R1]
         { []
         }
     {offset
       c71MI: // global
           R4 = P64[R1 + 23];
           R3 = I64[R1 + 31];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Foldable.$w$cmaximum_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71MI_info" {
     block_c71MI_info:
         const _c71MI;
         const 1;
         const 4294967326;
         const S6Z86_srt+1144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.790663128 UTC

[section ""data" . Data.Foldable.$w$cminimum_closure" {
     Data.Foldable.$w$cminimum_closure:
         const Data.Foldable.$w$cminimum_info;
         const 0;
 },
 x_s6YIg_entry() //  [R1]
         { []
         }
     {offset
       c71Ni: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71Nj; else goto c71Nk;
       c71Nj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71Nk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . x_s6YIg_info" {
     x_s6YIg_info:
         const x_s6YIg_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s6YId_entry() //  [R1, R2]
         { []
         }
     {offset
       c71No: // global
           _s6YIe::I64 = R2;
           _s6YId::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto c71Np; else goto c71Nq;
       c71Nq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c71Ns; else goto c71Nr;
       c71Ns: // global
           HpAlloc = 32;
           goto c71Np;
       c71Np: // global
           R2 = _s6YIe::I64;
           R1 = _s6YId::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71Nr: // global
           if (_s6YIe::I64 == I64[_s6YId::P64 + 23]) goto c71Nn; else goto c71Nm;
       c71Nn: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c71Nm: // global
           _s6YIa::P64 = P64[_s6YId::P64 + 7];
           _s6YIc::P64 = P64[_s6YId::P64 + 15];
           I64[Hp - 24] = x_s6YIg_info;
           P64[Hp - 8] = _s6YIc::P64;
           I64[Hp] = _s6YIe::I64;
           I64[Sp - 24] = block_c71Nw_info;
           R2 = _s6YIe::I64 + 1;
           R1 = _s6YId::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _s6YIa::P64;
           Sp = Sp - 24;
           call $wgo_s6YId_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s6YId_info" {
     $wgo_s6YId_info:
         const $wgo_s6YId_entry;
         const 4294967298;
         const 8;
         const 4294967300;
 },
 _c71Nw() //  [R1]
         { []
         }
     {offset
       c71Nw: // global
           _c71Ne::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c71NC; else goto c71NK;
       c71NC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c71NF; else goto c71NE;
       c71NF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c71NE: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _c71Ne::P64;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c71NK: // global
           I64[Sp] = block_c71NI_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _c71Ne::P64;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 16] = R1;
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c71Nw_info" {
     block_c71Nw_info:
         const _c71Nw;
         const 2;
         const 30;
 },
 _c71NI() //  [R1]
         { []
         }
     {offset
       c71NI: // global
           if (R1 & 7 == 1) goto c71NQ; else goto c71NU;
       c71NQ: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c71NU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c71NX; else goto c71NW;
       c71NX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c71NW: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71NI_info" {
     block_c71NI_info:
         const _c71NI;
         const 2;
         const 30;
 },
 Data.Foldable.$w$cminimum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c71O6: // global
           _s6YIc::P64 = R4;
           _s6YIb::I64 = R3;
           _s6YIa::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c71O7; else goto c71O8;
       c71O8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c71Oa; else goto c71O9;
       c71Oa: // global
           HpAlloc = 32;
           goto c71O7;
       c71O7: // global
           R4 = _s6YIc::P64;
           R3 = _s6YIb::I64;
           R2 = _s6YIa::P64;
           R1 = Data.Foldable.$w$cminimum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71O9: // global
           I64[Hp - 24] = $wgo_s6YId_info;
           P64[Hp - 16] = _s6YIa::P64;
           P64[Hp - 8] = _s6YIc::P64;
           I64[Hp] = _s6YIb::I64;
           I64[Sp - 8] = block_c71O0_info;
           R2 = 0;
           R1 = Hp - 23;
           Sp = Sp - 8;
           call $wgo_s6YId_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cminimum_info" {
     Data.Foldable.$w$cminimum_info:
         const Data.Foldable.$w$cminimum_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const S6Z86_srt+1168;
 },
 _c71O0() //  [R1]
         { []
         }
     {offset
       c71O0: // global
           if (R1 & 7 == 1) goto c71O3; else goto c71O4;
       c71O3: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c71O4: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71O0_info" {
     block_c71O0_info:
         const _c71O0;
         const 0;
         const 4294967326;
         const S6Z86_srt+1176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.806854316 UTC

[section ""data" . Data.Foldable.$fFoldableArray_$cminimum_closure" {
     Data.Foldable.$fFoldableArray_$cminimum_closure:
         const Data.Foldable.$fFoldableArray_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableArray_$cminimum_entry() //  [R2, R3]
         { []
         }
     {offset
       c71Pa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71Pb; else goto c71Pc;
       c71Pb: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableArray_$cminimum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71Pc: // global
           I64[Sp - 16] = block_c71P7_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u71Pg; else goto c71P8;
       u71Pg: // global
           call _c71P7(R1) args: 0, res: 0, upd: 0;
       c71P8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableArray_$cminimum_info" {
     Data.Foldable.$fFoldableArray_$cminimum_info:
         const Data.Foldable.$fFoldableArray_$cminimum_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S6Z86_srt+1168;
 },
 _c71P7() //  [R1]
         { []
         }
     {offset
       c71P7: // global
           R4 = P64[R1 + 23];
           R3 = I64[R1 + 31];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Foldable.$w$cminimum_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71P7_info" {
     block_c71P7_info:
         const _c71P7;
         const 1;
         const 4294967326;
         const S6Z86_srt+1168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.81583972 UTC

[section ""data" . Data.Foldable.$fFoldableArray2_closure" {
     Data.Foldable.$fFoldableArray2_closure:
         const Data.Foldable.$fFoldableArray2_info;
         const 0;
 },
 w1_s6YIx_entry() //  [R1]
         { []
         }
     {offset
       c71Pz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71PA; else goto c71PB;
       c71PA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71PB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w1_s6YIx_info" {
     w1_s6YIx_info:
         const w1_s6YIx_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+1192;
 },
 sat_s6YIL_entry() //  [R1]
         { []
         }
     {offset
       c71Q0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71Q1; else goto c71Q2;
       c71Q1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71Q2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_s6YIE_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YIL_info" {
     sat_s6YIL_info:
         const sat_s6YIL_entry;
         const 4294967297;
         const 19;
 },
 sat_s6YIJ_entry() //  [R1]
         { []
         }
     {offset
       c71Q7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71Q8; else goto c71Q9;
       c71Q8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71Q9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YIJ_info" {
     sat_s6YIJ_info:
         const sat_s6YIJ_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s6YIE_entry() //  [R1, R2]
         { []
         }
     {offset
       c71Qd: // global
           _s6YIF::I64 = R2;
           _s6YIE::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c71Qe; else goto c71Qf;
       c71Qf: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c71Qh; else goto c71Qg;
       c71Qh: // global
           HpAlloc = 64;
           goto c71Qe;
       c71Qe: // global
           R2 = _s6YIF::I64;
           R1 = _s6YIE::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71Qg: // global
           if (_s6YIF::I64 == I64[_s6YIE::P64 + 31]) goto c71Qc; else goto c71Qb;
       c71Qc: // global
           _s6YIx::P64 = P64[_s6YIE::P64 + 15];
           Hp = Hp - 64;
           R1 = _s6YIx::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c71Qb: // global
           _s6YIw::P64 = P64[_s6YIE::P64 + 7];
           _s6YID::P64 = P64[_s6YIE::P64 + 23];
           I64[Hp - 56] = sat_s6YIL_info;
           P64[Hp - 40] = _s6YIE::P64;
           I64[Hp - 32] = _s6YIF::I64;
           I64[Hp - 24] = sat_s6YIJ_info;
           P64[Hp - 8] = _s6YID::P64;
           I64[Hp] = _s6YIF::I64;
           R2 = _s6YIw::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s6YIE_info" {
     $wgo_s6YIE_info:
         const $wgo_s6YIE_entry;
         const 4294967299;
         const 8;
         const 4294967300;
 },
 sat_s6YIM_entry() //  [R1, R2]
         { []
         }
     {offset
       c71Qi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c71Qj; else goto c71Qk;
       c71Qj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71Qk: // global
           I64[Sp - 24] = block_c71PH_info;
           _s6YIw::P64 = P64[R1 + 7];
           _s6YIx::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s6YIw::P64;
           P64[Sp - 8] = _s6YIx::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u71Qo; else goto c71PI;
       u71Qo: // global
           call _c71PH(R1) args: 0, res: 0, upd: 0;
       c71PI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YIM_info" {
     sat_s6YIM_info:
         const sat_s6YIM_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c71PH() //  [R1]
         { []
         }
     {offset
       c71PH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c71Qn; else goto c71Qm;
       c71Qn: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c71Qm: // global
           _s6YID::P64 = P64[R1 + 23];
           _s6YIC::I64 = I64[R1 + 31];
           I64[Hp - 32] = $wgo_s6YIE_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s6YID::P64;
           I64[Hp] = _s6YIC::I64;
           R2 = 0;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call $wgo_s6YIE_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71PH_info" {
     block_c71PH_info:
         const _c71PH;
         const 2;
         const 30;
 },
 Data.Foldable.$fFoldableArray2_entry() //  [R2]
         { []
         }
     {offset
       c71Qp: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c71Qt; else goto c71Qs;
       c71Qt: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableArray2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71Qs: // global
           I64[Hp - 40] = w1_s6YIx_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s6YIM_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableArray2_info" {
     Data.Foldable.$fFoldableArray2_info:
         const Data.Foldable.$fFoldableArray2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Z86_srt+1192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.834588935 UTC

[section ""data" . Data.Foldable.$fFoldableArray_$celem_closure" {
     Data.Foldable.$fFoldableArray_$celem_closure:
         const Data.Foldable.$fFoldableArray_$celem_info;
 },
 f_s6YIP_entry() //  [R1]
         { []
         }
     {offset
       c71Rp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71Rq; else goto c71Rr;
       c71Rq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71Rr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6YIP_info" {
     f_s6YIP_info:
         const f_s6YIP_entry;
         const 2;
         const 18;
 },
 sat_s6YJ1_entry() //  [R1]
         { []
         }
     {offset
       c71RO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71RP; else goto c71RQ;
       c71RP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71RQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YJ1_info" {
     sat_s6YJ1_info:
         const sat_s6YJ1_entry;
         const 4294967297;
         const 19;
 },
 sat_s6YJ4_entry() //  [R1, R2]
         { []
         }
     {offset
       c71RR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c71RS; else goto c71RT;
       c71RS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71RT: // global
           I64[Sp - 16] = block_c71Rx_info;
           _s6YIP::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s6YIP::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u71Sj; else goto c71Ry;
       u71Sj: // global
           call _c71Rx(R1) args: 0, res: 0, upd: 0;
       c71Ry: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YJ4_info" {
     sat_s6YJ4_info:
         const sat_s6YJ4_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c71Rx() //  [R1]
         { []
         }
     {offset
       c71Rx: // global
           P64[Sp - 16] = P64[R1 + 23];
           I64[Sp - 8] = 0;
           I64[Sp] = I64[R1 + 31];
           Sp = Sp - 16;
           call _c71RF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c71Rx_info" {
     block_c71Rx_info:
         const _c71Rx;
         const 1;
         const 30;
 },
 _c71RF() //  []
         { []
         }
     {offset
       c71RF: // global
           Hp = Hp + 32;
           _s6YIX::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c71RX; else goto c71RW;
       c71RX: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_c71RE_info;
           R1 = _s6YIX::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c71RW: // global
           if (_s6YIX::I64 == I64[Sp + 16]) goto c71Sb; else goto c71S0;
       c71Sb: // global
           Hp = Hp - 32;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c71S0: // global
           I64[Hp - 24] = sat_s6YJ1_info;
           P64[Hp - 8] = P64[Sp];
           I64[Hp] = _s6YIX::I64;
           I64[Sp - 8] = block_c71RY_info;
           R2 = Hp - 24;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c71RE() //  [R1]
         { []
         }
     {offset
       c71RE: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c71RF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c71RE_info" {
     block_c71RE_info:
         const _c71RE;
         const 388;
         const 30;
 },
 _c71RY() //  [R1]
         { []
         }
     {offset
       c71RY: // global
           if (R1 & 7 == 1) goto c71S6; else goto c71Sa;
       c71S6: // global
           I64[Sp + 16] = I64[Sp + 16] + 1;
           Sp = Sp + 8;
           call _c71RF() args: 0, res: 0, upd: 0;
       c71Sa: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71RY_info" {
     block_c71RY_info:
         const _c71RY;
         const 388;
         const 30;
 },
 Data.Foldable.$fFoldableArray_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       c71Sl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c71Sp; else goto c71So;
       c71Sp: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableArray_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71So: // global
           I64[Hp - 40] = f_s6YIP_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6YJ4_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableArray_$celem_info" {
     Data.Foldable.$fFoldableArray_$celem_info:
         const Data.Foldable.$fFoldableArray_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.851371653 UTC

[section ""data" . Data.Foldable.$fFoldableArray_closure" {
     Data.Foldable.$fFoldableArray_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableArray_$cfold_closure+2;
         const Data.Foldable.$fFoldableArray_$cfoldMap_closure+3;
         const GHC.Arr.foldrElems_closure+3;
         const GHC.Arr.foldrElems'_closure+3;
         const GHC.Arr.foldlElems_closure+3;
         const GHC.Arr.foldlElems'_closure+3;
         const GHC.Arr.foldr1Elems_closure+2;
         const GHC.Arr.foldl1Elems_closure+2;
         const GHC.Arr.elems_closure+1;
         const Data.Foldable.$fFoldableArray_$cnull_closure+1;
         const GHC.Arr.numElements_closure+1;
         const Data.Foldable.$fFoldableArray_$celem_closure+2;
         const Data.Foldable.$fFoldableArray_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableArray_$cminimum_closure+2;
         const Data.Foldable.$fFoldableArray2_closure+1;
         const Data.Foldable.$fFoldableArray1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.855370804 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$celem_closure" {
     Data.Foldable.$fFoldable(,)_$celem_closure:
         const Data.Foldable.$fFoldable(,)_$celem_info;
 },
 f_s6YJ7_entry() //  [R1]
         { []
         }
     {offset
       c71To: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71Tp; else goto c71Tq;
       c71Tp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71Tq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6YJ7_info" {
     f_s6YJ7_info:
         const f_s6YJ7_entry;
         const 2;
         const 18;
 },
 sat_s6YJc_entry() //  [R1, R2]
         { []
         }
     {offset
       c71Tz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71TA; else goto c71TB;
       c71TA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71TB: // global
           I64[Sp - 16] = block_c71Tw_info;
           _s6YJ7::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s6YJ7::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u71TF; else goto c71Tx;
       u71TF: // global
           call _c71Tw(R1) args: 0, res: 0, upd: 0;
       c71Tx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YJc_info" {
     sat_s6YJc_info:
         const sat_s6YJc_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c71Tw() //  [R1]
         { []
         }
     {offset
       c71Tw: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71Tw_info" {
     block_c71Tw_info:
         const _c71Tw;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldable(,)_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       c71TG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c71TK; else goto c71TJ;
       c71TK: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71TJ: // global
           I64[Hp - 40] = f_s6YJ7_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6YJc_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$celem_info" {
     Data.Foldable.$fFoldable(,)_$celem_info:
         const Data.Foldable.$fFoldable(,)_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.865389307 UTC

[section ""data" . Data.Foldable.$fFoldable(,)2_closure" {
     Data.Foldable.$fFoldable(,)2_closure:
         const Data.Foldable.$fFoldable(,)2_info;
 },
 Data.Foldable.$fFoldable(,)2_entry() //  [R2, R3]
         { []
         }
     {offset
       c71Ug: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c71Uh; else goto c71Ui;
       c71Uh: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71Ui: // global
           I64[Sp - 8] = block_c71Ud_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u71Um; else goto c71Ue;
       u71Um: // global
           call _c71Ud(R1) args: 0, res: 0, upd: 0;
       c71Ue: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)2_info" {
     Data.Foldable.$fFoldable(,)2_info:
         const Data.Foldable.$fFoldable(,)2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c71Ud() //  [R1]
         { []
         }
     {offset
       c71Ud: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71Ud_info" {
     block_c71Ud_info:
         const _c71Ud;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.871438804 UTC

[section ""data" . Data.Foldable.$fFoldable(,)3_closure" {
     Data.Foldable.$fFoldable(,)3_closure:
         const Data.Foldable.$fFoldable(,)3_info;
 },
 Data.Foldable.$fFoldable(,)3_entry() //  [R2]
         { []
         }
     {offset
       c71UE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c71UF; else goto c71UG;
       c71UF: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71UG: // global
           I64[Sp - 8] = block_c71UB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u71UK; else goto c71UC;
       u71UK: // global
           call _c71UB(R1) args: 0, res: 0, upd: 0;
       c71UC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)3_info" {
     Data.Foldable.$fFoldable(,)3_info:
         const Data.Foldable.$fFoldable(,)3_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c71UB() //  [R1]
         { []
         }
     {offset
       c71UB: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71UB_info" {
     block_c71UB_info:
         const _c71UB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.876946951 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$cminimum_closure" {
     Data.Foldable.$fFoldable(,)_$cminimum_closure:
         const Data.Foldable.$fFoldable(,)_$cminimum_info;
 },
 Data.Foldable.$fFoldable(,)_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c71UZ: // global
           R2 = R3;
           call Data.Foldable.$fFoldable(,)3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$cminimum_info" {
     Data.Foldable.$fFoldable(,)_$cminimum_info:
         const Data.Foldable.$fFoldable(,)_$cminimum_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.881064114 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$cnull_closure" {
     Data.Foldable.$fFoldable(,)_$cnull_closure:
         const Data.Foldable.$fFoldable(,)_$cnull_info;
 },
 Data.Foldable.$fFoldable(,)_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c71Vd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c71Ve; else goto c71Vf;
       c71Ve: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71Vf: // global
           I64[Sp - 8] = block_c71Va_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u71Vj; else goto c71Vb;
       u71Vj: // global
           call _c71Va() args: 0, res: 0, upd: 0;
       c71Vb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$cnull_info" {
     Data.Foldable.$fFoldable(,)_$cnull_info:
         const Data.Foldable.$fFoldable(,)_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c71Va() //  []
         { []
         }
     {offset
       c71Va: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71Va_info" {
     block_c71Va_info:
         const _c71Va;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.888162413 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$cfoldr1_closure" {
     Data.Foldable.$fFoldable(,)_$cfoldr1_closure:
         const Data.Foldable.$fFoldable(,)_$cfoldr1_info;
 },
 Data.Foldable.$fFoldable(,)_$cfoldr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c71VD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c71VE; else goto c71VF;
       c71VE: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$cfoldr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71VF: // global
           I64[Sp - 8] = block_c71VA_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u71VJ; else goto c71VB;
       u71VJ: // global
           call _c71VA(R1) args: 0, res: 0, upd: 0;
       c71VB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$cfoldr1_info" {
     Data.Foldable.$fFoldable(,)_$cfoldr1_info:
         const Data.Foldable.$fFoldable(,)_$cfoldr1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c71VA() //  [R1]
         { []
         }
     {offset
       c71VA: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71VA_info" {
     block_c71VA_info:
         const _c71VA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.894437412 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$cfoldl'_closure" {
     Data.Foldable.$fFoldable(,)_$cfoldl'_closure:
         const Data.Foldable.$fFoldable(,)_$cfoldl'_info;
 },
 Data.Foldable.$fFoldable(,)_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c71W1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c71W2; else goto c71W3;
       c71W2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c71W3: // global
           I64[Sp - 24] = block_c71VY_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u71W7; else goto c71VZ;
       u71W7: // global
           call _c71VY(R1) args: 0, res: 0, upd: 0;
       c71VZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$cfoldl'_info" {
     Data.Foldable.$fFoldable(,)_$cfoldl'_info:
         const Data.Foldable.$fFoldable(,)_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c71VY() //  [R1]
         { []
         }
     {offset
       c71VY: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71VY_info" {
     block_c71VY_info:
         const _c71VY;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.900719429 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$clength_closure" {
     Data.Foldable.$fFoldable(,)_$clength_closure:
         const Data.Foldable.$fFoldable(,)_$clength_info;
 },
 Data.Foldable.$fFoldable(,)_$clength_entry() //  [R2]
         { []
         }
     {offset
       c71Wp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c71Wq; else goto c71Wr;
       c71Wq: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71Wr: // global
           I64[Sp - 8] = block_c71Wm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u71Wv; else goto c71Wn;
       u71Wv: // global
           call _c71Wm() args: 0, res: 0, upd: 0;
       c71Wn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$clength_info" {
     Data.Foldable.$fFoldable(,)_$clength_info:
         const Data.Foldable.$fFoldable(,)_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c71Wm() //  []
         { []
         }
     {offset
       c71Wm: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71Wm_info" {
     block_c71Wm_info:
         const _c71Wm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.906598417 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$cfold_closure" {
     Data.Foldable.$fFoldable(,)_$cfold_closure:
         const Data.Foldable.$fFoldable(,)_$cfold_info;
 },
 Data.Foldable.$fFoldable(,)_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c71WO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c71WP; else goto c71WQ;
       c71WP: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71WQ: // global
           I64[Sp - 8] = block_c71WL_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u71WU; else goto c71WM;
       u71WU: // global
           call _c71WL(R1) args: 0, res: 0, upd: 0;
       c71WM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$cfold_info" {
     Data.Foldable.$fFoldable(,)_$cfold_info:
         const Data.Foldable.$fFoldable(,)_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c71WL() //  [R1]
         { []
         }
     {offset
       c71WL: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71WL_info" {
     block_c71WL_info:
         const _c71WL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.913059326 UTC

[section ""data" . Data.Foldable.$fFoldable(,)1_closure" {
     Data.Foldable.$fFoldable(,)1_closure:
         const Data.Foldable.$fFoldable(,)1_info;
 },
 Data.Foldable.$fFoldable(,)1_entry() //  [R2, R3]
         { []
         }
     {offset
       c71Xc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c71Xd; else goto c71Xe;
       c71Xd: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71Xe: // global
           I64[Sp - 8] = block_c71X9_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u71Xi; else goto c71Xa;
       u71Xi: // global
           call _c71X9(R1) args: 0, res: 0, upd: 0;
       c71Xa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)1_info" {
     Data.Foldable.$fFoldable(,)1_info:
         const Data.Foldable.$fFoldable(,)1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c71X9() //  [R1]
         { []
         }
     {offset
       c71X9: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71X9_info" {
     block_c71X9_info:
         const _c71X9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.919336202 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_$ctoList_closure" {
     Data.Foldable.$fFoldable(,)_$ctoList_closure:
         const Data.Foldable.$fFoldable(,)_$ctoList_info;
 },
 Data.Foldable.$fFoldable(,)_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c71XA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c71XE; else goto c71XF;
       c71XE: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldable(,)_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71XF: // global
           I64[Sp - 8] = block_c71Xx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u71XJ; else goto c71Xy;
       u71XJ: // global
           call _c71Xx(R1) args: 0, res: 0, upd: 0;
       c71Xy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable(,)_$ctoList_info" {
     Data.Foldable.$fFoldable(,)_$ctoList_info:
         const Data.Foldable.$fFoldable(,)_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c71Xx() //  [R1]
         { []
         }
     {offset
       c71Xx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c71XI; else goto c71XH;
       c71XI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c71XH: // global
           _s6YJT::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s6YJT::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71Xx_info" {
     block_c71Xx_info:
         const _c71Xx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.926463961 UTC

[section ""data" . Data.Foldable.$fFoldable(,)_closure" {
     Data.Foldable.$fFoldable(,)_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldable(,)_$cfold_closure+2;
         const Data.Foldable.$fFoldable(,)_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldable(,)_$cfoldr_closure+3;
         const Data.Foldable.$fFoldable(,)_$cfoldr_closure+3;
         const Data.Foldable.$fFoldable(,)_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldable(,)_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldable(,)_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldable(,)_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldable(,)_$ctoList_closure+1;
         const Data.Foldable.$fFoldable(,)_$cnull_closure+1;
         const Data.Foldable.$fFoldable(,)_$clength_closure+1;
         const Data.Foldable.$fFoldable(,)_$celem_closure+2;
         const Data.Foldable.$fFoldable(,)_$cminimum_closure+2;
         const Data.Foldable.$fFoldable(,)_$cminimum_closure+2;
         const Data.Foldable.$fFoldable(,)2_closure+2;
         const Data.Foldable.$fFoldable(,)1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.93054918 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$celem_closure" {
     Data.Foldable.$fFoldableEither_$celem_closure:
         const Data.Foldable.$fFoldableEither_$celem_info;
 },
 ds_s6YJW_entry() //  [R1]
         { []
         }
     {offset
       c71Y7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c71Y8; else goto c71Y9;
       c71Y8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c71Y9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s6YJW_info" {
     ds_s6YJW_info:
         const ds_s6YJW_entry;
         const 2;
         const 18;
 },
 sat_s6YK1_entry() //  [R1, R2]
         { []
         }
     {offset
       c71Ym: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71Yn; else goto c71Yo;
       c71Yn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71Yo: // global
           I64[Sp - 16] = block_c71Yf_info;
           _s6YJW::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s6YJW::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u71Yv; else goto c71Yg;
       u71Yv: // global
           call _c71Yf(R1) args: 0, res: 0, upd: 0;
       c71Yg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YK1_info" {
     sat_s6YK1_info:
         const sat_s6YK1_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c71Yf() //  [R1]
         { []
         }
     {offset
       c71Yf: // global
           if (R1 & 7 == 1) goto c71Yj; else goto c71Yk;
       c71Yj: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c71Yk: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71Yf_info" {
     block_c71Yf_info:
         const _c71Yf;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableEither_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       c71Yw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c71YA; else goto c71Yz;
       c71YA: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71Yz: // global
           I64[Hp - 40] = ds_s6YJW_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6YK1_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$celem_info" {
     Data.Foldable.$fFoldableEither_$celem_info:
         const Data.Foldable.$fFoldableEither_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.940904242 UTC

[section ""data" . Data.Foldable.$fFoldableEither2_closure" {
     Data.Foldable.$fFoldableEither2_closure:
         const Data.Foldable.$fFoldableEither2_info;
         const 0;
 },
 Data.Foldable.$fFoldableEither2_entry() //  [R2, R3]
         { []
         }
     {offset
       c71Ze: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c71Zf; else goto c71Zg;
       c71Zf: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c71Zg: // global
           I64[Sp - 16] = block_c71Z7_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u71Zn; else goto c71Z8;
       u71Zn: // global
           call _c71Z7(R1) args: 0, res: 0, upd: 0;
       c71Z8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither2_info" {
     Data.Foldable.$fFoldableEither2_info:
         const Data.Foldable.$fFoldableEither2_entry;
         const 0;
         const 1152921508901814286;
         const 8589934607;
         const S6Z86_srt+984;
 },
 _c71Z7() //  [R1]
         { []
         }
     {offset
       c71Z7: // global
           if (R1 & 7 == 1) goto c71Zb; else goto c71Zc;
       c71Zb: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
       c71Zc: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71Z7_info" {
     block_c71Z7_info:
         const _c71Z7;
         const 1;
         const 4294967326;
         const S6Z86_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.946746693 UTC

[section ""data" . Data.Foldable.$fFoldableEither3_closure" {
     Data.Foldable.$fFoldableEither3_closure:
         const Data.Foldable.$fFoldableEither3_info;
         const 0;
 },
 Data.Foldable.$fFoldableEither3_entry() //  [R2]
         { []
         }
     {offset
       c71ZL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c71ZM; else goto c71ZN;
       c71ZM: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c71ZN: // global
           I64[Sp - 8] = block_c71ZE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u71ZU; else goto c71ZF;
       u71ZU: // global
           call _c71ZE(R1) args: 0, res: 0, upd: 0;
       c71ZF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither3_info" {
     Data.Foldable.$fFoldableEither3_info:
         const Data.Foldable.$fFoldableEither3_entry;
         const 0;
         const 141733920782;
         const 4294967301;
         const S6Z86_srt+1176;
 },
 _c71ZE() //  [R1]
         { []
         }
     {offset
       c71ZE: // global
           if (R1 & 7 == 1) goto c71ZI; else goto c71ZJ;
       c71ZI: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c71ZJ: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c71ZE_info" {
     block_c71ZE_info:
         const _c71ZE;
         const 0;
         const 4294967326;
         const S6Z86_srt+1176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.951865877 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$cminimum_closure" {
     Data.Foldable.$fFoldableEither_$cminimum_closure:
         const Data.Foldable.$fFoldableEither_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableEither_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c720b: // global
           R2 = R3;
           call Data.Foldable.$fFoldableEither3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$cminimum_info" {
     Data.Foldable.$fFoldableEither_$cminimum_info:
         const Data.Foldable.$fFoldableEither_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.955725233 UTC

[section ""data" . Data.Foldable.$fFoldableEither4_closure" {
     Data.Foldable.$fFoldableEither4_closure:
         const Data.Foldable.$fFoldableEither4_info;
         const 0;
 },
 Data.Foldable.$fFoldableEither4_entry() //  [R2]
         { []
         }
     {offset
       c720t: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c720u; else goto c720v;
       c720u: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c720v: // global
           I64[Sp - 8] = block_c720m_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u720C; else goto c720n;
       u720C: // global
           call _c720m(R1) args: 0, res: 0, upd: 0;
       c720n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither4_info" {
     Data.Foldable.$fFoldableEither4_info:
         const Data.Foldable.$fFoldableEither4_entry;
         const 0;
         const 2203318222862;
         const 4294967301;
         const S6Z86_srt+1152;
 },
 _c720m() //  [R1]
         { []
         }
     {offset
       c720m: // global
           if (R1 & 7 == 1) goto c720q; else goto c720r;
       c720q: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c720r: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c720m_info" {
     block_c720m_info:
         const _c720m;
         const 0;
         const 4294967326;
         const S6Z86_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.962029394 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$cmaximum_closure" {
     Data.Foldable.$fFoldableEither_$cmaximum_closure:
         const Data.Foldable.$fFoldableEither_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableEither_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c720T: // global
           R2 = R3;
           call Data.Foldable.$fFoldableEither4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$cmaximum_info" {
     Data.Foldable.$fFoldableEither_$cmaximum_info:
         const Data.Foldable.$fFoldableEither_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+1224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.966501163 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$cfoldr1_closure" {
     Data.Foldable.$fFoldableEither_$cfoldr1_closure:
         const Data.Foldable.$fFoldableEither_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableEither_$cfoldr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c721b: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c721c; else goto c721d;
       c721c: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$cfoldr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c721d: // global
           I64[Sp - 8] = block_c7214_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u721k; else goto c7215;
       u721k: // global
           call _c7214(R1) args: 0, res: 0, upd: 0;
       c7215: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$cfoldr1_info" {
     Data.Foldable.$fFoldableEither_$cfoldr1_info:
         const Data.Foldable.$fFoldableEither_$cfoldr1_entry;
         const 0;
         const 9007203549708302;
         const 8589934607;
         const S6Z86_srt+1064;
 },
 _c7214() //  [R1]
         { []
         }
     {offset
       c7214: // global
           if (R1 & 7 == 1) goto c7218; else goto c7219;
       c7218: // global
           R1 = Data.Foldable.$fFoldable:.:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7219: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7214_info" {
     block_c7214_info:
         const _c7214;
         const 0;
         const 4294967326;
         const S6Z86_srt+1064;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.972813328 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$cfoldl'_closure" {
     Data.Foldable.$fFoldableEither_$cfoldl'_closure:
         const Data.Foldable.$fFoldableEither_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableEither_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c721I: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c721J; else goto c721K;
       c721J: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c721K: // global
           I64[Sp - 24] = block_c721B_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u721R; else goto c721C;
       u721R: // global
           call _c721B(R1) args: 0, res: 0, upd: 0;
       c721C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$cfoldl'_info" {
     Data.Foldable.$fFoldableEither_$cfoldl'_info:
         const Data.Foldable.$fFoldableEither_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c721B() //  [R1]
         { []
         }
     {offset
       c721B: // global
           _s6YKn::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c721F; else goto c721G;
       c721F: // global
           R1 = _s6YKn::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c721G: // global
           R3 = P64[R1 + 6];
           R2 = _s6YKn::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c721B_info" {
     block_c721B_info:
         const _c721B;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.979051703 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$cfoldl1_closure" {
     Data.Foldable.$fFoldableEither_$cfoldl1_closure:
         const Data.Foldable.$fFoldableEither_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableEither_$cfoldl1_entry() //  [R2, R3]
         { []
         }
     {offset
       c722f: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c722g; else goto c722h;
       c722g: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$cfoldl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c722h: // global
           I64[Sp - 8] = block_c7228_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u722o; else goto c7229;
       u722o: // global
           call _c7228(R1) args: 0, res: 0, upd: 0;
       c7229: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$cfoldl1_info" {
     Data.Foldable.$fFoldableEither_$cfoldl1_info:
         const Data.Foldable.$fFoldableEither_$cfoldl1_entry;
         const 0;
         const 2251804108652558;
         const 8589934607;
         const S6Z86_srt+1088;
 },
 _c7228() //  [R1]
         { []
         }
     {offset
       c7228: // global
           if (R1 & 7 == 1) goto c722c; else goto c722d;
       c722c: // global
           R1 = Data.Foldable.$fFoldable:.:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c722d: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7228_info" {
     block_c7228_info:
         const _c7228;
         const 0;
         const 4294967326;
         const S6Z86_srt+1088;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.985277128 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$cfold_closure" {
     Data.Foldable.$fFoldableEither_$cfold_closure:
         const Data.Foldable.$fFoldableEither_$cfold_info;
 },
 Data.Foldable.$fFoldableEither_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c722M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c722N; else goto c722O;
       c722N: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c722O: // global
           I64[Sp - 16] = block_c722F_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u722V; else goto c722G;
       u722V: // global
           call _c722F(R1) args: 0, res: 0, upd: 0;
       c722G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$cfold_info" {
     Data.Foldable.$fFoldableEither_$cfold_info:
         const Data.Foldable.$fFoldableEither_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c722F() //  [R1]
         { []
         }
     {offset
       c722F: // global
           if (R1 & 7 == 1) goto c722J; else goto c722K;
       c722J: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c722K: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c722F_info" {
     block_c722F_info:
         const _c722F;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.991859618 UTC

[section ""data" . Data.Foldable.$fFoldableEither1_closure" {
     Data.Foldable.$fFoldableEither1_closure:
         const Data.Foldable.$fFoldableEither1_info;
         const 0;
 },
 Data.Foldable.$fFoldableEither1_entry() //  [R2, R3]
         { []
         }
     {offset
       c723j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c723k; else goto c723l;
       c723k: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c723l: // global
           I64[Sp - 16] = block_c723c_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u723s; else goto c723d;
       u723s: // global
           call _c723c(R1) args: 0, res: 0, upd: 0;
       c723d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither1_info" {
     Data.Foldable.$fFoldableEither1_info:
         const Data.Foldable.$fFoldableEither1_entry;
         const 0;
         const 1152921508901814286;
         const 8589934607;
         const S6Z86_srt+1024;
 },
 _c723c() //  [R1]
         { []
         }
     {offset
       c723c: // global
           if (R1 & 7 == 1) goto c723g; else goto c723h;
       c723g: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
       c723h: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c723c_info" {
     block_c723c_info:
         const _c723c;
         const 1;
         const 4294967326;
         const S6Z86_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:18.998440894 UTC

[section ""data" . Data.Foldable.$fFoldableEither_$ctoList_closure" {
     Data.Foldable.$fFoldableEither_$ctoList_closure:
         const Data.Foldable.$fFoldableEither_$ctoList_info;
 },
 Data.Foldable.$fFoldableEither_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c723Q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c723R; else goto c723S;
       c723R: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableEither_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c723S: // global
           I64[Sp - 8] = block_c723J_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7242; else goto c723K;
       u7242: // global
           call _c723J(R1) args: 0, res: 0, upd: 0;
       c723K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableEither_$ctoList_info" {
     Data.Foldable.$fFoldableEither_$ctoList_info:
         const Data.Foldable.$fFoldableEither_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c723J() //  [R1]
         { []
         }
     {offset
       c723J: // global
           if (R1 & 7 == 1) goto c723N; else goto c723O;
       c723N: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c723O: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7241; else goto c7240;
       c7241: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7240: // global
           _s6YKK::P64 = P64[R1 + 6];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s6YKK::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c723J_info" {
     block_c723J_info:
         const _c723J;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.005367255 UTC

[section ""data" . Data.Foldable.$fFoldableEither_closure" {
     Data.Foldable.$fFoldableEither_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableEither_$cfold_closure+2;
         const Data.Foldable.$fFoldableEither_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableEither_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableEither_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableEither_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableEither_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableEither_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableEither_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableEither_$ctoList_closure+1;
         const Data.Either.isLeft_closure+1;
         const Data.Foldable.$fFoldableEither_$clength_closure+1;
         const Data.Foldable.$fFoldableEither_$celem_closure+2;
         const Data.Foldable.$fFoldableEither_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableEither_$cminimum_closure+2;
         const Data.Foldable.$fFoldableEither2_closure+2;
         const Data.Foldable.$fFoldableEither1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.010753219 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$celem_closure" {
     Data.Foldable.$fFoldableNonEmpty_$celem_closure:
         const Data.Foldable.$fFoldableNonEmpty_$celem_info;
 },
 f_s6YKN_entry() //  [R1]
         { []
         }
     {offset
       c724u: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c724v; else goto c724w;
       c724v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c724w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6YKN_info" {
     f_s6YKN_info:
         const f_s6YKN_entry;
         const 2;
         const 18;
 },
 sat_s6YL3_entry() //  [R1, R2]
         { []
         }
     {offset
       c724J: // global
           _s6YKO::P64 = R2;
           _s6YL3::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c724K; else goto c724L;
       c724L: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c724N; else goto c724M;
       c724N: // global
           HpAlloc = 24;
           goto c724K;
       c724K: // global
           R2 = _s6YKO::P64;
           R1 = _s6YL3::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c724M: // global
           _s6YKN::P64 = P64[_s6YL3::P64 + 7];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s6YKO::P64;
           I64[Sp - 24] = block_c724D_info;
           R2 = Hp - 16;
           R1 = _s6YKN::P64;
           P64[Sp - 16] = _s6YKN::P64;
           P64[Sp - 8] = _s6YKO::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YL3_info" {
     sat_s6YL3_info:
         const sat_s6YL3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c724D() //  [R1]
         { []
         }
     {offset
       c724D: // global
           if (R1 & 7 == 1) goto c724G; else goto u725v;
       c724G: // global
           I64[Sp] = block_c724Q_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u725z; else goto c724S;
       u725z: // global
           call _c724Q(R1) args: 0, res: 0, upd: 0;
       c724S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u725v: // global
           Sp = Sp + 24;
           call _c724H() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c724D_info" {
     block_c724D_info:
         const _c724D;
         const 2;
         const 30;
 },
 _c724Q() //  [R1]
         { []
         }
     {offset
       c724Q: // global
           P64[Sp + 16] = P64[R1 + 15];
           Sp = Sp + 8;
           call _c7250() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c724Q_info" {
     block_c724Q_info:
         const _c724Q;
         const 130;
         const 30;
 },
 _c7250() //  []
         { []
         }
     {offset
       c7250: // global
           I64[Sp - 8] = block_c7252_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u725C; else goto c7254;
       u725C: // global
           call _c7252(R1) args: 0, res: 0, upd: 0;
       c7254: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7252() //  [R1]
         { []
         }
     {offset
       c7252: // global
           if (R1 & 7 == 1) goto c725a; else goto c725f;
       c725a: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c725f: // global
           I64[Sp] = block_c725d_info;
           R2 = P64[R1 + 6];
           _s6YL1::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 16] = _s6YL1::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7252_info" {
     block_c7252_info:
         const _c7252;
         const 130;
         const 30;
 },
 _c725d() //  [R1]
         { []
         }
     {offset
       c725d: // global
           if (R1 & 7 == 1) goto c725l; else goto u725x;
       c725l: // global
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp + 8;
           call _c7250() args: 0, res: 0, upd: 0;
       u725x: // global
           Sp = Sp + 24;
           call _c724H() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c725d_info" {
     block_c725d_info:
         const _c725d;
         const 2;
         const 30;
 },
 _c724H() //  []
         { []
         }
     {offset
       c724H: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Foldable.$fFoldableNonEmpty_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       c725F: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c725J; else goto c725I;
       c725J: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c725I: // global
           I64[Hp - 40] = f_s6YKN_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6YL3_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$celem_info" {
     Data.Foldable.$fFoldableNonEmpty_$celem_info:
         const Data.Foldable.$fFoldableNonEmpty_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.030262732 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$csum_closure" {
     Data.Foldable.$fFoldableNonEmpty_$csum_closure:
         const Data.Foldable.$fFoldableNonEmpty_$csum_info;
         const 0;
 },
 z_s6YLd_entry() //  [R1]
         { []
         }
     {offset
       c726T: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c726U; else goto c726V;
       c726U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c726V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidSum1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6YLd_info" {
     z_s6YLd_info:
         const z_s6YLd_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+1192;
 },
 go_s6YLe_entry() //  [R1, R2]
         { []
         }
     {offset
       c7278: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7279; else goto c727a;
       c7279: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c727a: // global
           I64[Sp - 32] = block_c7271_info;
           _s6YLe::P64 = R1;
           _s6YL4::P64 = P64[R1 + 7];
           _s6YLd::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s6YL4::P64;
           P64[Sp - 16] = _s6YLd::P64;
           P64[Sp - 8] = _s6YLe::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u727k; else goto c7272;
       u727k: // global
           call _c7271(R1) args: 0, res: 0, upd: 0;
       c7272: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6YLe_info" {
     go_s6YLe_info:
         const go_s6YLe_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c7271() //  [R1]
         { []
         }
     {offset
       c7271: // global
           if (R1 & 7 == 1) goto c7275; else goto c7276;
       c7275: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7276: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c727i; else goto c727h;
       c727i: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c727h: // global
           _s6YLh::P64 = P64[R1 + 6];
           _s6YLi::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s6YLi::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6YLh::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7271_info" {
     block_c7271_info:
         const _c7271;
         const 3;
         const 30;
 },
 sat_s6YLk_entry() //  [R1]
         { []
         }
     {offset
       c727l: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c727m; else goto c727n;
       c727m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c727n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c726K_info;
           _s6YL4::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s6YL4::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u727r; else goto c726L;
       u727r: // global
           call _c726K(R1) args: 0, res: 0, upd: 0;
       c726L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YLk_info" {
     sat_s6YLk_info:
         const sat_s6YLk_entry;
         const 2;
         const 4294967314;
         const S6Z86_srt+1192;
 },
 _c726K() //  [R1]
         { []
         }
     {offset
       c726K: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c727q; else goto c727p;
       c727q: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c727p: // global
           _s6YLc::P64 = P64[R1 + 15];
           I64[Hp - 40] = z_s6YLd_info;
           _s6YL4::P64 = P64[Sp + 8];
           P64[Hp - 24] = _s6YL4::P64;
           I64[Hp - 16] = go_s6YLe_info;
           P64[Hp - 8] = _s6YL4::P64;
           P64[Hp] = Hp - 40;
           R2 = _s6YLc::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call go_s6YLe_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c726K_info" {
     block_c726K_info:
         const _c726K;
         const 1;
         const 4294967326;
         const S6Z86_srt+1192;
 },
 Data.Foldable.$fFoldableNonEmpty_$csum_entry() //  [R2, R3]
         { []
         }
     {offset
       c727t: // global
           _s6YL5::P64 = R3;
           _s6YL4::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c727u; else goto c727v;
       c727v: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c727x; else goto c727w;
       c727x: // global
           HpAlloc = 56;
           goto c727u;
       c727u: // global
           R3 = _s6YL5::P64;
           R2 = _s6YL4::P64;
           R1 = Data.Foldable.$fFoldableNonEmpty_$csum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c727w: // global
           I64[Hp - 48] = sat_s6YLk_info;
           P64[Hp - 32] = _s6YL4::P64;
           P64[Hp - 24] = _s6YL5::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s6YL5::P64;
           R2 = _s6YL4::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$csum_info" {
     Data.Foldable.$fFoldableNonEmpty_$csum_info:
         const Data.Foldable.$fFoldableNonEmpty_$csum_entry;
         const 0;
         const 1103806595086;
         const 8589934607;
         const S6Z86_srt+1192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.049101639 UTC

[section ""data" . Data.Foldable.$w$cminimum1_closure" {
     Data.Foldable.$w$cminimum1_closure:
         const Data.Foldable.$w$cminimum1_info;
 },
 go_s6YLo_entry() //  [R1, R2]
         { []
         }
     {offset
       c728x: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c728y; else goto c728z;
       c728y: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c728z: // global
           I64[Sp - 24] = block_c728q_info;
           _s6YLo::P64 = R1;
           _s6YLl::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s6YLl::P64;
           P64[Sp - 8] = _s6YLo::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u729a; else goto c728r;
       u729a: // global
           call _c728q(R1) args: 0, res: 0, upd: 0;
       c728r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6YLo_info" {
     go_s6YLo_info:
         const go_s6YLo_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c728q() //  [R1]
         { []
         }
     {offset
       c728q: // global
           if (R1 & 7 == 1) goto c728u; else goto c728v;
       c728u: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c728v: // global
           I64[Sp] = block_c728F_info;
           R2 = P64[R1 + 14];
           _s6YLr::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s6YLr::P64;
           call go_s6YLo_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c728q_info" {
     block_c728q_info:
         const _c728q;
         const 2;
         const 30;
 },
 _c728F() //  [R1]
         { []
         }
     {offset
       c728F: // global
           _s6YLr::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c728M; else goto c728U;
       c728M: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c728P; else goto c728O;
       c728P: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c728O: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s6YLr::P64;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c728U: // global
           I64[Sp] = block_c728S_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s6YLr::P64;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 8] = R1;
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c728F_info" {
     block_c728F_info:
         const _c728F;
         const 2;
         const 30;
 },
 _c728S() //  [R1]
         { []
         }
     {offset
       c728S: // global
           if (R1 & 7 == 1) goto c7290; else goto c7294;
       c7290: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7294: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7297; else goto c7296;
       c7297: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7296: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c728S_info" {
     block_c728S_info:
         const _c728S;
         const 2;
         const 30;
 },
 Data.Foldable.$w$cminimum1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c729h: // global
           _s6YLn::P64 = R4;
           _s6YLm::P64 = R3;
           _s6YLl::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c729i; else goto c729j;
       c729j: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c729l; else goto c729k;
       c729l: // global
           HpAlloc = 16;
           goto c729i;
       c729i: // global
           R4 = _s6YLn::P64;
           R3 = _s6YLm::P64;
           R2 = _s6YLl::P64;
           R1 = Data.Foldable.$w$cminimum1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c729k: // global
           I64[Hp - 8] = go_s6YLo_info;
           P64[Hp] = _s6YLl::P64;
           I64[Sp - 24] = block_c729b_info;
           R2 = _s6YLn::P64;
           R1 = Hp - 7;
           P64[Sp - 16] = _s6YLl::P64;
           P64[Sp - 8] = _s6YLm::P64;
           Sp = Sp - 24;
           call go_s6YLo_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cminimum1_info" {
     Data.Foldable.$w$cminimum1_info:
         const Data.Foldable.$w$cminimum1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c729b() //  [R1]
         { []
         }
     {offset
       c729b: // global
           if (R1 & 7 == 1) goto u729E; else goto c729f;
       u729E: // global
           Sp = Sp + 16;
           call _c729C() args: 0, res: 0, upd: 0;
       c729f: // global
           I64[Sp] = block_c729r_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 16];
           _s6YLx::P64 = P64[R1 + 6];
           P64[Sp - 8] = _s6YLx::P64;
           P64[Sp + 8] = _s6YLx::P64;
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c729b_info" {
     block_c729b_info:
         const _c729b;
         const 2;
         const 30;
 },
 _c729r() //  [R1]
         { []
         }
     {offset
       c729r: // global
           if (R1 & 7 == 1) goto c729y; else goto u729F;
       c729y: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       u729F: // global
           Sp = Sp + 16;
           call _c729C() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c729r_info" {
     block_c729r_info:
         const _c729r;
         const 2;
         const 30;
 },
 _c729C() //  []
         { []
         }
     {offset
       c729C: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.064451067 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cminimum_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cminimum_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cminimum_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$cminimum_entry() //  [R2, R3]
         { []
         }
     {offset
       c72aJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72aK; else goto c72aL;
       c72aK: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cminimum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72aL: // global
           I64[Sp - 16] = block_c72aG_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u72aP; else goto c72aH;
       u72aP: // global
           call _c72aG(R1) args: 0, res: 0, upd: 0;
       c72aH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cminimum_info" {
     Data.Foldable.$fFoldableNonEmpty_$cminimum_info:
         const Data.Foldable.$fFoldableNonEmpty_$cminimum_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c72aG() //  [R1]
         { []
         }
     {offset
       c72aG: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Foldable.$w$cminimum1_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72aG_info" {
     block_c72aG_info:
         const _c72aG;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.07282217 UTC

[section ""data" . Data.Foldable.$w$cmaximum1_closure" {
     Data.Foldable.$w$cmaximum1_closure:
         const Data.Foldable.$w$cmaximum1_info;
 },
 go_s6YLH_entry() //  [R1, R2]
         { []
         }
     {offset
       c72bg: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c72bh; else goto c72bi;
       c72bh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72bi: // global
           I64[Sp - 24] = block_c72b9_info;
           _s6YLH::P64 = R1;
           _s6YLE::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s6YLE::P64;
           P64[Sp - 8] = _s6YLH::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u72bT; else goto c72ba;
       u72bT: // global
           call _c72b9(R1) args: 0, res: 0, upd: 0;
       c72ba: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6YLH_info" {
     go_s6YLH_info:
         const go_s6YLH_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c72b9() //  [R1]
         { []
         }
     {offset
       c72b9: // global
           if (R1 & 7 == 1) goto c72bd; else goto c72be;
       c72bd: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c72be: // global
           I64[Sp] = block_c72bo_info;
           R2 = P64[R1 + 14];
           _s6YLK::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s6YLK::P64;
           call go_s6YLH_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c72b9_info" {
     block_c72b9_info:
         const _c72b9;
         const 2;
         const 30;
 },
 _c72bo() //  [R1]
         { []
         }
     {offset
       c72bo: // global
           _s6YLK::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c72bv; else goto c72bD;
       c72bv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c72by; else goto c72bx;
       c72by: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c72bx: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s6YLK::P64;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c72bD: // global
           I64[Sp] = block_c72bB_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s6YLK::P64;
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 8] = R1;
           Sp = Sp - 24;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c72bo_info" {
     block_c72bo_info:
         const _c72bo;
         const 2;
         const 30;
 },
 _c72bB() //  [R1]
         { []
         }
     {offset
       c72bB: // global
           if (R1 & 7 == 1) goto c72bJ; else goto c72bN;
       c72bJ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c72bN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c72bQ; else goto c72bP;
       c72bQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c72bP: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72bB_info" {
     block_c72bB_info:
         const _c72bB;
         const 2;
         const 30;
 },
 Data.Foldable.$w$cmaximum1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c72c0: // global
           _s6YLG::P64 = R4;
           _s6YLF::P64 = R3;
           _s6YLE::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c72c1; else goto c72c2;
       c72c2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c72c4; else goto c72c3;
       c72c4: // global
           HpAlloc = 16;
           goto c72c1;
       c72c1: // global
           R4 = _s6YLG::P64;
           R3 = _s6YLF::P64;
           R2 = _s6YLE::P64;
           R1 = Data.Foldable.$w$cmaximum1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72c3: // global
           I64[Hp - 8] = go_s6YLH_info;
           P64[Hp] = _s6YLE::P64;
           I64[Sp - 24] = block_c72bU_info;
           R2 = _s6YLG::P64;
           R1 = Hp - 7;
           P64[Sp - 16] = _s6YLE::P64;
           P64[Sp - 8] = _s6YLF::P64;
           Sp = Sp - 24;
           call go_s6YLH_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cmaximum1_info" {
     Data.Foldable.$w$cmaximum1_info:
         const Data.Foldable.$w$cmaximum1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c72bU() //  [R1]
         { []
         }
     {offset
       c72bU: // global
           if (R1 & 7 == 1) goto u72cn; else goto c72bY;
       u72cn: // global
           Sp = Sp + 16;
           call _c72cl() args: 0, res: 0, upd: 0;
       c72bY: // global
           I64[Sp] = block_c72ca_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 16];
           _s6YLQ::P64 = P64[R1 + 6];
           P64[Sp - 8] = _s6YLQ::P64;
           P64[Sp + 8] = _s6YLQ::P64;
           Sp = Sp - 24;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c72bU_info" {
     block_c72bU_info:
         const _c72bU;
         const 2;
         const 30;
 },
 _c72ca() //  [R1]
         { []
         }
     {offset
       c72ca: // global
           if (R1 & 7 == 1) goto c72ch; else goto u72co;
       c72ch: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       u72co: // global
           Sp = Sp + 16;
           call _c72cl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c72ca_info" {
     block_c72ca_info:
         const _c72ca;
         const 2;
         const 30;
 },
 _c72cl() //  []
         { []
         }
     {offset
       c72cl: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.0899758 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cmaximum_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cmaximum_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cmaximum_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$cmaximum_entry() //  [R2, R3]
         { []
         }
     {offset
       c72ds: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72dt; else goto c72du;
       c72dt: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cmaximum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72du: // global
           I64[Sp - 16] = block_c72dp_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u72dy; else goto c72dq;
       u72dy: // global
           call _c72dp(R1) args: 0, res: 0, upd: 0;
       c72dq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cmaximum_info" {
     Data.Foldable.$fFoldableNonEmpty_$cmaximum_info:
         const Data.Foldable.$fFoldableNonEmpty_$cmaximum_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c72dp() //  [R1]
         { []
         }
     {offset
       c72dp: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Foldable.$w$cmaximum1_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72dp_info" {
     block_c72dp_info:
         const _c72dp;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.095268767 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cnull_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cnull_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cnull_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$cnull_entry() //  []
         { []
         }
     {offset
       c72dN: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cnull_info" {
     Data.Foldable.$fFoldableNonEmpty_$cnull_info:
         const Data.Foldable.$fFoldableNonEmpty_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.101652203 UTC

[section ""data" . Data.Foldable.$w$cfoldr2_closure" {
     Data.Foldable.$w$cfoldr2_closure:
         const Data.Foldable.$w$cfoldr2_info;
 },
 sat_s6YM8_entry() //  [R1]
         { []
         }
     {offset
       c72el: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c72em; else goto c72en;
       c72em: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72en: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c72ef_info;
           R2 = P64[R1 + 40];
           _s6YLY::P64 = P64[R1 + 16];
           _s6YM4::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s6YLY::P64;
           P64[Sp - 24] = _s6YM4::P64;
           Sp = Sp - 40;
           call go_s6YM1_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YM8_info" {
     sat_s6YM8_info:
         const sat_s6YM8_entry;
         const 4;
         const 15;
 },
 _c72ef() //  [R1]
         { []
         }
     {offset
       c72ef: // global
           _s6YM4::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c72ei; else goto c72ej;
       c72ei: // global
           R1 = _s6YM4::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c72ej: // global
           R3 = P64[R1 + 6];
           R2 = _s6YM4::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c72ef_info" {
     block_c72ef_info:
         const _c72ef;
         const 2;
         const 30;
 },
 go_s6YM1_entry() //  [R1, R2]
         { []
         }
     {offset
       c72ey: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c72ez; else goto c72eA;
       c72ez: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72eA: // global
           I64[Sp - 24] = block_c72e5_info;
           _s6YM1::P64 = R1;
           _s6YLY::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s6YLY::P64;
           P64[Sp - 8] = _s6YM1::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u72eH; else goto c72e6;
       u72eH: // global
           call _c72e5(R1) args: 0, res: 0, upd: 0;
       c72e6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6YM1_info" {
     go_s6YM1_info:
         const go_s6YM1_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c72e5() //  [R1]
         { []
         }
     {offset
       c72e5: // global
           if (R1 & 7 == 1) goto c72ev; else goto c72ew;
       c72ev: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c72ew: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c72eG; else goto c72eF;
       c72eG: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c72eF: // global
           _s6YM4::P64 = P64[R1 + 6];
           _s6YM5::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_s6YM8_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s6YM4::P64;
           P64[Hp - 16] = _s6YM5::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 56;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72e5_info" {
     block_c72e5_info:
         const _c72e5;
         const 2;
         const 30;
 },
 Data.Foldable.$w$cfoldr2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c72eO: // global
           _s6YM0::P64 = R4;
           _s6YLZ::P64 = R3;
           _s6YLY::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c72eP; else goto c72eQ;
       c72eQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c72eS; else goto c72eR;
       c72eS: // global
           HpAlloc = 16;
           goto c72eP;
       c72eP: // global
           R4 = _s6YM0::P64;
           R3 = _s6YLZ::P64;
           R2 = _s6YLY::P64;
           R1 = Data.Foldable.$w$cfoldr2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72eR: // global
           I64[Hp - 8] = go_s6YM1_info;
           P64[Hp] = _s6YLY::P64;
           I64[Sp - 24] = block_c72eI_info;
           R2 = _s6YM0::P64;
           R1 = Hp - 7;
           P64[Sp - 16] = _s6YLY::P64;
           P64[Sp - 8] = _s6YLZ::P64;
           Sp = Sp - 24;
           call go_s6YM1_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldr2_info" {
     Data.Foldable.$w$cfoldr2_info:
         const Data.Foldable.$w$cfoldr2_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c72eI() //  [R1]
         { []
         }
     {offset
       c72eI: // global
           _s6YLZ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c72eL; else goto c72eM;
       c72eL: // global
           R1 = _s6YLZ::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72eM: // global
           R3 = P64[R1 + 6];
           R2 = _s6YLZ::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72eI_info" {
     block_c72eI_info:
         const _c72eI;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.116130235 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfoldr1_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldr1_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr1_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfoldr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c72fM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72fN; else goto c72fO;
       c72fN: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfoldr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72fO: // global
           I64[Sp - 16] = block_c72fJ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u72fS; else goto c72fK;
       u72fS: // global
           call _c72fJ(R1) args: 0, res: 0, upd: 0;
       c72fK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfoldr1_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldr1_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c72fJ() //  [R1]
         { []
         }
     {offset
       c72fJ: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Foldable.$w$cfoldr2_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72fJ_info" {
     block_c72fJ_info:
         const _c72fJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.124403263 UTC

[section ""data" . Data.Foldable.$w$cfoldl'1_closure" {
     Data.Foldable.$w$cfoldl'1_closure:
         const Data.Foldable.$w$cfoldl'1_info;
 },
 Data.Foldable.$w$cfoldl'1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c72gb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c72gc; else goto c72gd;
       c72gc: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$w$cfoldl'1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72gd: // global
           I64[Sp - 24] = block_c72g7_info;
           _s6YMh::P64 = R3;
           R3 = R4;
           _s6YMg::P64 = R2;
           R2 = _s6YMh::P64;
           R1 = _s6YMg::P64;
           P64[Sp - 16] = _s6YMg::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldl'1_info" {
     Data.Foldable.$w$cfoldl'1_info:
         const Data.Foldable.$w$cfoldl'1_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c72g7() //  [R1]
         { []
         }
     {offset
       c72g7: // global
           P64[Sp] = R1;
           P64[Sp + 16] = P64[Sp + 16];
           call _c72gg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c72g7_info" {
     block_c72g7_info:
         const _c72g7;
         const 2;
         const 30;
 },
 _c72gg() //  []
         { []
         }
     {offset
       c72gg: // global
           I64[Sp - 8] = block_c72gi_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72gC; else goto c72gk;
       u72gC: // global
           call _c72gi(R1) args: 0, res: 0, upd: 0;
       c72gk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c72gi() //  [R1]
         { []
         }
     {offset
       c72gi: // global
           _s6YMn::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c72gq; else goto c72gv;
       c72gq: // global
           R1 = _s6YMn::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72gv: // global
           I64[Sp + 8] = block_c72gt_info;
           R3 = P64[R1 + 6];
           R2 = _s6YMn::P64;
           _s6YMq::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp + 24] = _s6YMq::P64;
           Sp = Sp + 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c72gi_info" {
     block_c72gi_info:
         const _c72gi;
         const 259;
         const 30;
 },
 _c72gt() //  [R1]
         { []
         }
     {offset
       c72gt: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp] = R1;
           call _c72gg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c72gt_info" {
     block_c72gt_info:
         const _c72gt;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.135045756 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfoldl'_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldl'_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl'_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfoldl'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c72h9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c72ha; else goto c72hb;
       c72ha: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfoldl'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72hb: // global
           I64[Sp - 24] = block_c72h6_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u72hf; else goto c72h7;
       u72hf: // global
           call _c72h6(R1) args: 0, res: 0, upd: 0;
       c72h7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfoldl'_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldl'_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c72h6() //  [R1]
         { []
         }
     {offset
       c72h6: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Foldable.$w$cfoldl'1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72h6_info" {
     block_c72h6_info:
         const _c72h6;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.143084022 UTC

[section ""data" . Data.Foldable.$w$cfoldr'1_closure" {
     Data.Foldable.$w$cfoldr'1_closure:
         const Data.Foldable.$w$cfoldr'1_info;
 },
 sat_s6YMN_entry() //  [R1, R2]
         { []
         }
     {offset
       c72hL: // global
           R3 = R2;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YMN_info" {
     sat_s6YMN_info:
         const sat_s6YMN_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6YML_entry() //  [R1, R2]
         { []
         }
     {offset
       c72hU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72hV; else goto c72hW;
       c72hV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72hW: // global
           I64[Sp - 16] = block_c72hS_info;
           R3 = R2;
           R2 = P64[R1 + 23];
           _s6YME::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s6YME::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YML_info" {
     sat_s6YML_info:
         const sat_s6YML_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c72hS() //  [R1]
         { []
         }
     {offset
       c72hS: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72hS_info" {
     block_c72hS_info:
         const _c72hS;
         const 1;
         const 30;
 },
 Data.Foldable.$w$cfoldr'1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c72hY: // global
           _s6YMB::P64 = R5;
           _s6YMA::P64 = R4;
           _s6YMz::P64 = R3;
           _s6YMy::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c72hZ; else goto c72i0;
       c72i0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c72i2; else goto c72i1;
       c72i2: // global
           HpAlloc = 24;
           goto c72hZ;
       c72hZ: // global
           R5 = _s6YMB::P64;
           R4 = _s6YMA::P64;
           R3 = _s6YMz::P64;
           R2 = _s6YMy::P64;
           R1 = Data.Foldable.$w$cfoldr'1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72i1: // global
           I64[Hp - 16] = sat_s6YMN_info;
           P64[Hp - 8] = _s6YMy::P64;
           P64[Hp] = _s6YMA::P64;
           P64[Sp - 32] = _s6YMy::P64;
           P64[Sp - 24] = _s6YMB::P64;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = _s6YMz::P64;
           Sp = Sp - 32;
           call _c72hz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Foldable.$w$cfoldr'1_info" {
     Data.Foldable.$w$cfoldr'1_info:
         const Data.Foldable.$w$cfoldr'1_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c72hz() //  []
         { []
         }
     {offset
       c72hz: // global
           I64[Sp - 8] = block_c72hB_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72if; else goto c72hC;
       u72if: // global
           call _c72hB(R1) args: 0, res: 0, upd: 0;
       c72hC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c72hB() //  [R1]
         { []
         }
     {offset
       c72hB: // global
           _s6YME::P64 = P64[Sp + 24];
           _s6YMF::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c72i7; else goto c72i8;
       c72i7: // global
           R2 = _s6YMF::P64;
           R1 = _s6YME::P64;
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c72i8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c72ib; else goto c72ia;
       c72ib: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c72ia: // global
           _s6YMH::P64 = P64[R1 + 6];
           _s6YMI::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_s6YML_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s6YME::P64;
           P64[Hp] = _s6YMH::P64;
           P64[Sp + 16] = _s6YMI::P64;
           P64[Sp + 24] = Hp - 23;
           P64[Sp + 32] = _s6YMF::P64;
           Sp = Sp + 8;
           call _c72hz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c72hB_info" {
     block_c72hB_info:
         const _c72hB;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.154690097 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cfoldr'_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldr'_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr'_info;
 },
 Data.Foldable.$fFoldableNonEmpty_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c72iT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c72iU; else goto c72iV;
       c72iU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cfoldr'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72iV: // global
           I64[Sp - 24] = block_c72iQ_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u72iZ; else goto c72iR;
       u72iZ: // global
           call _c72iQ(R1) args: 0, res: 0, upd: 0;
       c72iR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cfoldr'_info" {
     Data.Foldable.$fFoldableNonEmpty_$cfoldr'_info:
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c72iQ() //  [R1]
         { []
         }
     {offset
       c72iQ: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Foldable.$w$cfoldr'1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72iQ_info" {
     block_c72iQ_info:
         const _c72iQ;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.163554767 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_$cproduct_closure" {
     Data.Foldable.$fFoldableNonEmpty_$cproduct_closure:
         const Data.Foldable.$fFoldableNonEmpty_$cproduct_info;
         const 0;
 },
 z_s6YN3_entry() //  [R1]
         { []
         }
     {offset
       c72jr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c72js; else goto c72jt;
       c72js: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72jt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidProduct1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s6YN3_info" {
     z_s6YN3_info:
         const z_s6YN3_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+1128;
 },
 go_s6YN4_entry() //  [R1, R2]
         { []
         }
     {offset
       c72jG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c72jH; else goto c72jI;
       c72jH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72jI: // global
           I64[Sp - 32] = block_c72jz_info;
           _s6YN4::P64 = R1;
           _s6YMU::P64 = P64[R1 + 7];
           _s6YN3::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s6YMU::P64;
           P64[Sp - 16] = _s6YN3::P64;
           P64[Sp - 8] = _s6YN4::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u72jS; else goto c72jA;
       u72jS: // global
           call _c72jz(R1) args: 0, res: 0, upd: 0;
       c72jA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s6YN4_info" {
     go_s6YN4_info:
         const go_s6YN4_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c72jz() //  [R1]
         { []
         }
     {offset
       c72jz: // global
           if (R1 & 7 == 1) goto c72jD; else goto c72jE;
       c72jD: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72jE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c72jQ; else goto c72jP;
       c72jQ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c72jP: // global
           _s6YN7::P64 = P64[R1 + 6];
           _s6YN8::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s6YN8::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s6YN7::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72jz_info" {
     block_c72jz_info:
         const _c72jz;
         const 3;
         const 30;
 },
 sat_s6YNa_entry() //  [R1]
         { []
         }
     {offset
       c72jT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c72jU; else goto c72jV;
       c72jU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72jV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c72ji_info;
           _s6YMU::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s6YMU::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u72jZ; else goto c72jj;
       u72jZ: // global
           call _c72ji(R1) args: 0, res: 0, upd: 0;
       c72jj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YNa_info" {
     sat_s6YNa_info:
         const sat_s6YNa_entry;
         const 2;
         const 4294967314;
         const S6Z86_srt+1128;
 },
 _c72ji() //  [R1]
         { []
         }
     {offset
       c72ji: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c72jY; else goto c72jX;
       c72jY: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c72jX: // global
           _s6YN2::P64 = P64[R1 + 15];
           I64[Hp - 40] = z_s6YN3_info;
           _s6YMU::P64 = P64[Sp + 8];
           P64[Hp - 24] = _s6YMU::P64;
           I64[Hp - 16] = go_s6YN4_info;
           P64[Hp - 8] = _s6YMU::P64;
           P64[Hp] = Hp - 40;
           R2 = _s6YN2::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call go_s6YN4_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c72ji_info" {
     block_c72ji_info:
         const _c72ji;
         const 1;
         const 4294967326;
         const S6Z86_srt+1128;
 },
 Data.Foldable.$fFoldableNonEmpty_$cproduct_entry() //  [R2, R3]
         { []
         }
     {offset
       c72k1: // global
           _s6YMV::P64 = R3;
           _s6YMU::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c72k2; else goto c72k3;
       c72k3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c72k5; else goto c72k4;
       c72k5: // global
           HpAlloc = 56;
           goto c72k2;
       c72k2: // global
           R3 = _s6YMV::P64;
           R2 = _s6YMU::P64;
           R1 = Data.Foldable.$fFoldableNonEmpty_$cproduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72k4: // global
           I64[Hp - 48] = sat_s6YNa_info;
           P64[Hp - 32] = _s6YMU::P64;
           P64[Hp - 24] = _s6YMV::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s6YMV::P64;
           R2 = _s6YMU::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 24;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableNonEmpty_$cproduct_info" {
     Data.Foldable.$fFoldableNonEmpty_$cproduct_info:
         const Data.Foldable.$fFoldableNonEmpty_$cproduct_entry;
         const 0;
         const 562954248388622;
         const 8589934607;
         const S6Z86_srt+1128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.178620247 UTC

[section ""data" . Data.Foldable.$fFoldableNonEmpty_closure" {
     Data.Foldable.$fFoldableNonEmpty_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableNonEmpty_$cfold_closure+2;
         const Data.Foldable.$fFoldableNonEmpty_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl'_closure+3;
         const Data.Foldable.$fFoldableNonEmpty_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableNonEmpty_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableNonEmpty_$ctoList_closure+1;
         const Data.Foldable.$fFoldableNonEmpty_$cnull_closure+1;
         const Data.Foldable.$fFoldableNonEmpty_$clength_closure+1;
         const Data.Foldable.$fFoldableNonEmpty_$celem_closure+2;
         const Data.Foldable.$fFoldableNonEmpty_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableNonEmpty_$cminimum_closure+2;
         const Data.Foldable.$fFoldableNonEmpty_$csum_closure+2;
         const Data.Foldable.$fFoldableNonEmpty_$cproduct_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.182957655 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$celem_closure" {
     Data.Foldable.$fFoldableMaybe_$celem_closure:
         const Data.Foldable.$fFoldableMaybe_$celem_info;
 },
 eta1_s6YNd_entry() //  [R1]
         { []
         }
     {offset
       c72kY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c72kZ; else goto c72l0;
       c72kZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72l0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . eta1_s6YNd_info" {
     eta1_s6YNd_info:
         const eta1_s6YNd_entry;
         const 2;
         const 18;
 },
 sat_s6YNh_entry() //  [R1, R2]
         { []
         }
     {offset
       c72ld: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72le; else goto c72lf;
       c72le: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72lf: // global
           I64[Sp - 16] = block_c72l6_info;
           _s6YNd::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s6YNd::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u72lm; else goto c72l7;
       u72lm: // global
           call _c72l6(R1) args: 0, res: 0, upd: 0;
       c72l7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YNh_info" {
     sat_s6YNh_info:
         const sat_s6YNh_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c72l6() //  [R1]
         { []
         }
     {offset
       c72l6: // global
           if (R1 & 7 == 1) goto c72la; else goto c72lb;
       c72la: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c72lb: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72l6_info" {
     block_c72l6_info:
         const _c72l6;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableMaybe_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       c72ln: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c72lr; else goto c72lq;
       c72lr: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72lq: // global
           I64[Hp - 40] = eta1_s6YNd_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6YNh_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$celem_info" {
     Data.Foldable.$fFoldableMaybe_$celem_info:
         const Data.Foldable.$fFoldableMaybe_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.193307918 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe2_closure" {
     Data.Foldable.$fFoldableMaybe2_closure:
         const Data.Foldable.$fFoldableMaybe2_info;
         const 0;
 },
 Data.Foldable.$fFoldableMaybe2_entry() //  [R2, R3]
         { []
         }
     {offset
       c72m5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72m6; else goto c72m7;
       c72m6: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72m7: // global
           I64[Sp - 16] = block_c72lY_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u72me; else goto c72lZ;
       u72me: // global
           call _c72lY(R1) args: 0, res: 0, upd: 0;
       c72lZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe2_info" {
     Data.Foldable.$fFoldableMaybe2_info:
         const Data.Foldable.$fFoldableMaybe2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+1272;
 },
 _c72lY() //  [R1]
         { []
         }
     {offset
       c72lY: // global
           if (R1 & 7 == 1) goto c72m2; else goto c72m3;
       c72m2: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
       c72m3: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72lY_info" {
     block_c72lY_info:
         const _c72lY;
         const 1;
         const 4294967326;
         const S6Z86_srt+1280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.199986227 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe3_closure" {
     Data.Foldable.$fFoldableMaybe3_closure:
         const Data.Foldable.$fFoldableMaybe3_info;
         const 0;
 },
 Data.Foldable.$fFoldableMaybe3_entry() //  [R2]
         { []
         }
     {offset
       c72mC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72mD; else goto c72mE;
       c72mD: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72mE: // global
           I64[Sp - 8] = block_c72mv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72mL; else goto c72mw;
       u72mL: // global
           call _c72mv(R1) args: 0, res: 0, upd: 0;
       c72mw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe3_info" {
     Data.Foldable.$fFoldableMaybe3_info:
         const Data.Foldable.$fFoldableMaybe3_entry;
         const 0;
         const 70373039144974;
         const 4294967301;
         const S6Z86_srt+1176;
 },
 _c72mv() //  [R1]
         { []
         }
     {offset
       c72mv: // global
           if (R1 & 7 == 1) goto c72mz; else goto c72mA;
       c72mz: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72mA: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72mv_info" {
     block_c72mv_info:
         const _c72mv;
         const 0;
         const 4294967326;
         const S6Z86_srt+1176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.206878044 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cminimum_closure" {
     Data.Foldable.$fFoldableMaybe_$cminimum_closure:
         const Data.Foldable.$fFoldableMaybe_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableMaybe_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c72n2: // global
           R2 = R3;
           call Data.Foldable.$fFoldableMaybe3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cminimum_info" {
     Data.Foldable.$fFoldableMaybe_$cminimum_info:
         const Data.Foldable.$fFoldableMaybe_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+1288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.211631793 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe4_closure" {
     Data.Foldable.$fFoldableMaybe4_closure:
         const Data.Foldable.$fFoldableMaybe4_info;
         const 0;
 },
 Data.Foldable.$fFoldableMaybe4_entry() //  [R2]
         { []
         }
     {offset
       c72nk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72nl; else goto c72nm;
       c72nl: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72nm: // global
           I64[Sp - 8] = block_c72nd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72nt; else goto c72ne;
       u72nt: // global
           call _c72nd(R1) args: 0, res: 0, upd: 0;
       c72ne: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe4_info" {
     Data.Foldable.$fFoldableMaybe4_info:
         const Data.Foldable.$fFoldableMaybe4_entry;
         const 0;
         const 1125904201809934;
         const 4294967301;
         const S6Z86_srt+1152;
 },
 _c72nd() //  [R1]
         { []
         }
     {offset
       c72nd: // global
           if (R1 & 7 == 1) goto c72nh; else goto c72ni;
       c72nh: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72ni: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72nd_info" {
     block_c72nd_info:
         const _c72nd;
         const 0;
         const 4294967326;
         const S6Z86_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.217476942 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cmaximum_closure" {
     Data.Foldable.$fFoldableMaybe_$cmaximum_closure:
         const Data.Foldable.$fFoldableMaybe_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableMaybe_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c72nK: // global
           R2 = R3;
           call Data.Foldable.$fFoldableMaybe4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cmaximum_info" {
     Data.Foldable.$fFoldableMaybe_$cmaximum_info:
         const Data.Foldable.$fFoldableMaybe_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+1296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.221782859 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cnull_closure" {
     Data.Foldable.$fFoldableMaybe_$cnull_closure:
         const Data.Foldable.$fFoldableMaybe_$cnull_info;
 },
 Data.Foldable.$fFoldableMaybe_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c72o2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72o3; else goto c72o4;
       c72o3: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72o4: // global
           I64[Sp - 8] = block_c72nV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72ob; else goto c72nW;
       u72ob: // global
           call _c72nV(R1) args: 0, res: 0, upd: 0;
       c72nW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cnull_info" {
     Data.Foldable.$fFoldableMaybe_$cnull_info:
         const Data.Foldable.$fFoldableMaybe_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c72nV() //  [R1]
         { []
         }
     {offset
       c72nV: // global
           if (R1 & 7 == 1) goto c72nZ; else goto c72o0;
       c72nZ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c72o0: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72nV_info" {
     block_c72nV_info:
         const _c72nV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.228341603 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cfoldl1_closure" {
     Data.Foldable.$fFoldableMaybe_$cfoldl1_closure:
         const Data.Foldable.$fFoldableMaybe_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableMaybe_$cfoldl1_entry() //  [R2, R3]
         { []
         }
     {offset
       c72oD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72oE; else goto c72oF;
       c72oE: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$cfoldl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72oF: // global
           I64[Sp - 8] = block_c72ow_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72oM; else goto c72ox;
       u72oM: // global
           call _c72ow(R1) args: 0, res: 0, upd: 0;
       c72ox: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cfoldl1_info" {
     Data.Foldable.$fFoldableMaybe_$cfoldl1_info:
         const Data.Foldable.$fFoldableMaybe_$cfoldl1_entry;
         const 0;
         const 576460756598390798;
         const 8589934607;
         const S6Z86_srt+1088;
 },
 _c72ow() //  [R1]
         { []
         }
     {offset
       c72ow: // global
           if (R1 & 7 == 1) goto c72oA; else goto c72oB;
       c72oA: // global
           R1 = Data.Foldable.$fFoldable:.:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72oB: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72ow_info" {
     block_c72ow_info:
         const _c72ow;
         const 0;
         const 4294967326;
         const S6Z86_srt+1088;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.234799176 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cfoldr1_closure" {
     Data.Foldable.$fFoldableMaybe_$cfoldr1_closure:
         const Data.Foldable.$fFoldableMaybe_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableMaybe_$cfoldr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c72pa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72pb; else goto c72pc;
       c72pb: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$cfoldr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72pc: // global
           I64[Sp - 8] = block_c72p3_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72pj; else goto c72p4;
       u72pj: // global
           call _c72p3(R1) args: 0, res: 0, upd: 0;
       c72p4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cfoldr1_info" {
     Data.Foldable.$fFoldableMaybe_$cfoldr1_info:
         const Data.Foldable.$fFoldableMaybe_$cfoldr1_entry;
         const 0;
         const 9223372041149743118;
         const 8589934607;
         const S6Z86_srt+1064;
 },
 _c72p3() //  [R1]
         { []
         }
     {offset
       c72p3: // global
           if (R1 & 7 == 1) goto c72p7; else goto c72p8;
       c72p7: // global
           R1 = Data.Foldable.$fFoldable:.:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72p8: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72p3_info" {
     block_c72p3_info:
         const _c72p3;
         const 0;
         const 4294967326;
         const S6Z86_srt+1064;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.241721452 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$clength_closure" {
     Data.Foldable.$fFoldableMaybe_$clength_closure:
         const Data.Foldable.$fFoldableMaybe_$clength_info;
 },
 Data.Foldable.$fFoldableMaybe_$clength_entry() //  [R2]
         { []
         }
     {offset
       c72pH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72pI; else goto c72pJ;
       c72pI: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72pJ: // global
           I64[Sp - 8] = block_c72pA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72pQ; else goto c72pB;
       u72pQ: // global
           call _c72pA(R1) args: 0, res: 0, upd: 0;
       c72pB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$clength_info" {
     Data.Foldable.$fFoldableMaybe_$clength_info:
         const Data.Foldable.$fFoldableMaybe_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c72pA() //  [R1]
         { []
         }
     {offset
       c72pA: // global
           if (R1 & 7 == 1) goto c72pE; else goto c72pF;
       c72pE: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c72pF: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72pA_info" {
     block_c72pA_info:
         const _c72pA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.249192257 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$cfold_closure" {
     Data.Foldable.$fFoldableMaybe_$cfold_closure:
         const Data.Foldable.$fFoldableMaybe_$cfold_info;
 },
 Data.Foldable.$fFoldableMaybe_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c72qg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72qh; else goto c72qi;
       c72qh: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72qi: // global
           I64[Sp - 16] = block_c72q9_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u72qp; else goto c72qa;
       u72qp: // global
           call _c72q9(R1) args: 0, res: 0, upd: 0;
       c72qa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$cfold_info" {
     Data.Foldable.$fFoldableMaybe_$cfold_info:
         const Data.Foldable.$fFoldableMaybe_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c72q9() //  [R1]
         { []
         }
     {offset
       c72q9: // global
           if (R1 & 7 == 1) goto c72qd; else goto c72qe;
       c72qd: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c72qe: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72q9_info" {
     block_c72q9_info:
         const _c72q9;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.255589879 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe1_closure" {
     Data.Foldable.$fFoldableMaybe1_closure:
         const Data.Foldable.$fFoldableMaybe1_info;
         const 0;
 },
 Data.Foldable.$fFoldableMaybe1_entry() //  [R2, R3]
         { []
         }
     {offset
       c72qN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72qO; else goto c72qP;
       c72qO: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72qP: // global
           I64[Sp - 16] = block_c72qG_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u72qW; else goto c72qH;
       u72qW: // global
           call _c72qG(R1) args: 0, res: 0, upd: 0;
       c72qH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe1_info" {
     Data.Foldable.$fFoldableMaybe1_info:
         const Data.Foldable.$fFoldableMaybe1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+1320;
 },
 _c72qG() //  [R1]
         { []
         }
     {offset
       c72qG: // global
           if (R1 & 7 == 1) goto c72qK; else goto c72qL;
       c72qK: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
       c72qL: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72qG_info" {
     block_c72qG_info:
         const _c72qG;
         const 1;
         const 4294967326;
         const S6Z86_srt+1328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.26145173 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_$ctoList_closure" {
     Data.Foldable.$fFoldableMaybe_$ctoList_closure:
         const Data.Foldable.$fFoldableMaybe_$ctoList_info;
 },
 Data.Foldable.$fFoldableMaybe_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c72rk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72rl; else goto c72rm;
       c72rl: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableMaybe_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72rm: // global
           I64[Sp - 8] = block_c72rd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72rw; else goto c72re;
       u72rw: // global
           call _c72rd(R1) args: 0, res: 0, upd: 0;
       c72re: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableMaybe_$ctoList_info" {
     Data.Foldable.$fFoldableMaybe_$ctoList_info:
         const Data.Foldable.$fFoldableMaybe_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c72rd() //  [R1]
         { []
         }
     {offset
       c72rd: // global
           if (R1 & 7 == 1) goto c72rh; else goto c72ri;
       c72rh: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c72ri: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c72rv; else goto c72ru;
       c72rv: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c72ru: // global
           _s6YNS::P64 = P64[R1 + 6];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s6YNS::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72rd_info" {
     block_c72rd_info:
         const _c72rd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.266707449 UTC

[section ""data" . Data.Foldable.$fFoldableMaybe_closure" {
     Data.Foldable.$fFoldableMaybe_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableMaybe_$cfold_closure+2;
         const Data.Foldable.$fFoldableMaybe_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableMaybe_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableMaybe_$cfoldr_closure+3;
         const Data.Foldable.$fFoldableMaybe_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableMaybe_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableMaybe_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableMaybe_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableMaybe_$ctoList_closure+1;
         const Data.Foldable.$fFoldableMaybe_$cnull_closure+1;
         const Data.Foldable.$fFoldableMaybe_$clength_closure+1;
         const Data.Foldable.$fFoldableMaybe_$celem_closure+2;
         const Data.Foldable.$fFoldableMaybe_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableMaybe_$cminimum_closure+2;
         const Data.Foldable.$fFoldableMaybe2_closure+2;
         const Data.Foldable.$fFoldableMaybe1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.269655987 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cfoldMap_closure" {
     Data.Foldable.$fFoldableLast_$cfoldMap_closure:
         const Data.Foldable.$fFoldableLast_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableLast_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c72s1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c72s2; else goto c72s3;
       c72s2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72s3: // global
           I64[Sp - 24] = block_c72rU_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u72sa; else goto c72rV;
       u72sa: // global
           call _c72rU(R1) args: 0, res: 0, upd: 0;
       c72rV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cfoldMap_info" {
     Data.Foldable.$fFoldableLast_$cfoldMap_info:
         const Data.Foldable.$fFoldableLast_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c72rU() //  [R1]
         { []
         }
     {offset
       c72rU: // global
           if (R1 & 7 == 1) goto c72rY; else goto c72rZ;
       c72rY: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c72rZ: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72rU_info" {
     block_c72rU_info:
         const _c72rU;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.275555059 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cfold_closure" {
     Data.Foldable.$fFoldableLast_$cfold_closure:
         const Data.Foldable.$fFoldableLast_$cfold_info;
 },
 Data.Foldable.$fFoldableLast_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c72sy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72sz; else goto c72sA;
       c72sz: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72sA: // global
           I64[Sp - 16] = block_c72sr_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u72sH; else goto c72ss;
       u72sH: // global
           call _c72sr(R1) args: 0, res: 0, upd: 0;
       c72ss: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cfold_info" {
     Data.Foldable.$fFoldableLast_$cfold_info:
         const Data.Foldable.$fFoldableLast_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c72sr() //  [R1]
         { []
         }
     {offset
       c72sr: // global
           if (R1 & 7 == 1) goto c72sv; else goto c72sw;
       c72sv: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c72sw: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72sr_info" {
     block_c72sr_info:
         const _c72sr;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.281992636 UTC

[section ""data" . Data.Foldable.$fFoldableLast2_closure" {
     Data.Foldable.$fFoldableLast2_closure:
         const Data.Foldable.$fFoldableLast2_info;
         const 0;
 },
 Data.Foldable.$fFoldableLast2_entry() //  [R2, R3]
         { []
         }
     {offset
       c72t5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72t6; else goto c72t7;
       c72t6: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72t7: // global
           I64[Sp - 16] = block_c72sY_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u72te; else goto c72sZ;
       u72te: // global
           call _c72sY(R1) args: 0, res: 0, upd: 0;
       c72sZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast2_info" {
     Data.Foldable.$fFoldableLast2_info:
         const Data.Foldable.$fFoldableLast2_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const S6Z86_srt+1280;
 },
 _c72sY() //  [R1]
         { []
         }
     {offset
       c72sY: // global
           if (R1 & 7 == 1) goto c72t2; else goto c72t3;
       c72t2: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
       c72t3: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72sY_info" {
     block_c72sY_info:
         const _c72sY;
         const 1;
         const 4294967326;
         const S6Z86_srt+1280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.288637504 UTC

[section ""data" . Data.Foldable.$fFoldableLast3_closure" {
     Data.Foldable.$fFoldableLast3_closure:
         const Data.Foldable.$fFoldableLast3_info;
         const 0;
 },
 Data.Foldable.$fFoldableLast3_entry() //  [R2]
         { []
         }
     {offset
       c72tC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72tD; else goto c72tE;
       c72tD: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72tE: // global
           I64[Sp - 8] = block_c72tv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72tL; else goto c72tw;
       u72tL: // global
           call _c72tv(R1) args: 0, res: 0, upd: 0;
       c72tw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast3_info" {
     Data.Foldable.$fFoldableLast3_info:
         const Data.Foldable.$fFoldableLast3_entry;
         const 0;
         const 9007203549708302;
         const 4294967301;
         const S6Z86_srt+1176;
 },
 _c72tv() //  [R1]
         { []
         }
     {offset
       c72tv: // global
           if (R1 & 7 == 1) goto c72tz; else goto c72tA;
       c72tz: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72tA: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72tv_info" {
     block_c72tv_info:
         const _c72tv;
         const 0;
         const 4294967326;
         const S6Z86_srt+1176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.294054317 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cminimum_closure" {
     Data.Foldable.$fFoldableLast_$cminimum_closure:
         const Data.Foldable.$fFoldableLast_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableLast_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c72u2: // global
           R2 = R3;
           call Data.Foldable.$fFoldableLast3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cminimum_info" {
     Data.Foldable.$fFoldableLast_$cminimum_info:
         const Data.Foldable.$fFoldableLast_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+1344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.297788871 UTC

[section ""data" . Data.Foldable.$fFoldableLast4_closure" {
     Data.Foldable.$fFoldableLast4_closure:
         const Data.Foldable.$fFoldableLast4_info;
         const 0;
 },
 Data.Foldable.$fFoldableLast4_entry() //  [R2]
         { []
         }
     {offset
       c72uk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72ul; else goto c72um;
       c72ul: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72um: // global
           I64[Sp - 8] = block_c72ud_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72ut; else goto c72ue;
       u72ut: // global
           call _c72ud(R1) args: 0, res: 0, upd: 0;
       c72ue: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast4_info" {
     Data.Foldable.$fFoldableLast4_info:
         const Data.Foldable.$fFoldableLast4_entry;
         const 0;
         const 144115192370823182;
         const 4294967301;
         const S6Z86_srt+1152;
 },
 _c72ud() //  [R1]
         { []
         }
     {offset
       c72ud: // global
           if (R1 & 7 == 1) goto c72uh; else goto c72ui;
       c72uh: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72ui: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72ud_info" {
     block_c72ud_info:
         const _c72ud;
         const 0;
         const 4294967326;
         const S6Z86_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.302871922 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cmaximum_closure" {
     Data.Foldable.$fFoldableLast_$cmaximum_closure:
         const Data.Foldable.$fFoldableLast_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableLast_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c72uK: // global
           R2 = R3;
           call Data.Foldable.$fFoldableLast4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cmaximum_info" {
     Data.Foldable.$fFoldableLast_$cmaximum_info:
         const Data.Foldable.$fFoldableLast_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+1352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.30757644 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$celem_closure" {
     Data.Foldable.$fFoldableLast_$celem_closure:
         const Data.Foldable.$fFoldableLast_$celem_info;
 },
 f_s6YOg_entry() //  [R1]
         { []
         }
     {offset
       c72uZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c72v0; else goto c72v1;
       c72v0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72v1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6YOg_info" {
     f_s6YOg_info:
         const f_s6YOg_entry;
         const 2;
         const 18;
 },
 sat_s6YOk_entry() //  [R1, R2]
         { []
         }
     {offset
       c72ve: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72vf; else goto c72vg;
       c72vf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72vg: // global
           I64[Sp - 16] = block_c72v7_info;
           _s6YOg::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s6YOg::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u72vn; else goto c72v8;
       u72vn: // global
           call _c72v7(R1) args: 0, res: 0, upd: 0;
       c72v8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YOk_info" {
     sat_s6YOk_info:
         const sat_s6YOk_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c72v7() //  [R1]
         { []
         }
     {offset
       c72v7: // global
           if (R1 & 7 == 1) goto c72vb; else goto c72vc;
       c72vb: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c72vc: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72v7_info" {
     block_c72v7_info:
         const _c72v7;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableLast_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       c72vo: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c72vs; else goto c72vr;
       c72vs: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72vr: // global
           I64[Hp - 40] = f_s6YOg_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6YOk_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$celem_info" {
     Data.Foldable.$fFoldableLast_$celem_info:
         const Data.Foldable.$fFoldableLast_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.316791624 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cfoldl_closure" {
     Data.Foldable.$fFoldableLast_$cfoldl_closure:
         const Data.Foldable.$fFoldableLast_$cfoldl_info;
 },
 Data.Foldable.$fFoldableLast_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c72w6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c72w7; else goto c72w8;
       c72w7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$cfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72w8: // global
           I64[Sp - 24] = block_c72vZ_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u72wf; else goto c72w0;
       u72wf: // global
           call _c72vZ(R1) args: 0, res: 0, upd: 0;
       c72w0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cfoldl_info" {
     Data.Foldable.$fFoldableLast_$cfoldl_info:
         const Data.Foldable.$fFoldableLast_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c72vZ() //  [R1]
         { []
         }
     {offset
       c72vZ: // global
           _s6YOm::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c72w3; else goto c72w4;
       c72w3: // global
           R1 = _s6YOm::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72w4: // global
           R3 = P64[R1 + 6];
           R2 = _s6YOm::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72vZ_info" {
     block_c72vZ_info:
         const _c72vZ;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.324910377 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cfoldl1_closure" {
     Data.Foldable.$fFoldableLast_$cfoldl1_closure:
         const Data.Foldable.$fFoldableLast_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableLast_$cfoldl1_entry() //  [R2, R3]
         { []
         }
     {offset
       c72wD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72wE; else goto c72wF;
       c72wE: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$cfoldl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72wF: // global
           I64[Sp - 8] = block_c72ww_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72wM; else goto c72wx;
       u72wM: // global
           call _c72ww(R1) args: 0, res: 0, upd: 0;
       c72wx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cfoldl1_info" {
     Data.Foldable.$fFoldableLast_$cfoldl1_info:
         const Data.Foldable.$fFoldableLast_$cfoldl1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+1360;
 },
 _c72ww() //  [R1]
         { []
         }
     {offset
       c72ww: // global
           if (R1 & 7 == 1) goto c72wA; else goto c72wB;
       c72wA: // global
           R1 = Data.Foldable.$fFoldable:.:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72wB: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72ww_info" {
     block_c72ww_info:
         const _c72ww;
         const 0;
         const 4294967326;
         const S6Z86_srt+1368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.331338624 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cfoldr'_closure" {
     Data.Foldable.$fFoldableLast_$cfoldr'_closure:
         const Data.Foldable.$fFoldableLast_$cfoldr'_info;
 },
 Data.Foldable.$fFoldableLast_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c72xa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c72xb; else goto c72xc;
       c72xb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$cfoldr'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72xc: // global
           I64[Sp - 24] = block_c72x3_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u72xj; else goto c72x4;
       u72xj: // global
           call _c72x3(R1) args: 0, res: 0, upd: 0;
       c72x4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cfoldr'_info" {
     Data.Foldable.$fFoldableLast_$cfoldr'_info:
         const Data.Foldable.$fFoldableLast_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c72x3() //  [R1]
         { []
         }
     {offset
       c72x3: // global
           _s6YOv::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c72x7; else goto c72x8;
       c72x7: // global
           R1 = _s6YOv::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72x8: // global
           R3 = _s6YOv::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72x3_info" {
     block_c72x3_info:
         const _c72x3;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.337648188 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$clength_closure" {
     Data.Foldable.$fFoldableLast_$clength_closure:
         const Data.Foldable.$fFoldableLast_$clength_info;
 },
 Data.Foldable.$fFoldableLast_$clength_entry() //  [R2]
         { []
         }
     {offset
       c72xH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72xI; else goto c72xJ;
       c72xI: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72xJ: // global
           I64[Sp - 8] = block_c72xA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72xQ; else goto c72xB;
       u72xQ: // global
           call _c72xA(R1) args: 0, res: 0, upd: 0;
       c72xB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$clength_info" {
     Data.Foldable.$fFoldableLast_$clength_info:
         const Data.Foldable.$fFoldableLast_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c72xA() //  [R1]
         { []
         }
     {offset
       c72xA: // global
           if (R1 & 7 == 1) goto c72xE; else goto c72xF;
       c72xE: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c72xF: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72xA_info" {
     block_c72xA_info:
         const _c72xA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.344225585 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cfoldr1_closure" {
     Data.Foldable.$fFoldableLast_$cfoldr1_closure:
         const Data.Foldable.$fFoldableLast_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableLast_$cfoldr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c72yg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72yh; else goto c72yi;
       c72yh: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$cfoldr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72yi: // global
           I64[Sp - 8] = block_c72y9_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72yp; else goto c72ya;
       u72yp: // global
           call _c72y9(R1) args: 0, res: 0, upd: 0;
       c72ya: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cfoldr1_info" {
     Data.Foldable.$fFoldableLast_$cfoldr1_info:
         const Data.Foldable.$fFoldableLast_$cfoldr1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+1376;
 },
 _c72y9() //  [R1]
         { []
         }
     {offset
       c72y9: // global
           if (R1 & 7 == 1) goto c72yd; else goto c72ye;
       c72yd: // global
           R1 = Data.Foldable.$fFoldable:.:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72ye: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72y9_info" {
     block_c72y9_info:
         const _c72y9;
         const 0;
         const 4294967326;
         const S6Z86_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.35105007 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$cnull_closure" {
     Data.Foldable.$fFoldableLast_$cnull_closure:
         const Data.Foldable.$fFoldableLast_$cnull_info;
 },
 Data.Foldable.$fFoldableLast_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c72yN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72yO; else goto c72yP;
       c72yO: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72yP: // global
           I64[Sp - 8] = block_c72yG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72yW; else goto c72yH;
       u72yW: // global
           call _c72yG(R1) args: 0, res: 0, upd: 0;
       c72yH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$cnull_info" {
     Data.Foldable.$fFoldableLast_$cnull_info:
         const Data.Foldable.$fFoldableLast_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c72yG() //  [R1]
         { []
         }
     {offset
       c72yG: // global
           if (R1 & 7 == 1) goto c72yK; else goto c72yL;
       c72yK: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c72yL: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72yG_info" {
     block_c72yG_info:
         const _c72yG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.357764819 UTC

[section ""data" . Data.Foldable.$fFoldableLast1_closure" {
     Data.Foldable.$fFoldableLast1_closure:
         const Data.Foldable.$fFoldableLast1_info;
         const 0;
 },
 Data.Foldable.$fFoldableLast1_entry() //  [R2, R3]
         { []
         }
     {offset
       c72zo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72zp; else goto c72zq;
       c72zp: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72zq: // global
           I64[Sp - 16] = block_c72zh_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u72zx; else goto c72zi;
       u72zx: // global
           call _c72zh(R1) args: 0, res: 0, upd: 0;
       c72zi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast1_info" {
     Data.Foldable.$fFoldableLast1_info:
         const Data.Foldable.$fFoldableLast1_entry;
         const 0;
         const 1103806595086;
         const 8589934607;
         const S6Z86_srt+1328;
 },
 _c72zh() //  [R1]
         { []
         }
     {offset
       c72zh: // global
           if (R1 & 7 == 1) goto c72zl; else goto c72zm;
       c72zl: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
       c72zm: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72zh_info" {
     block_c72zh_info:
         const _c72zh;
         const 1;
         const 4294967326;
         const S6Z86_srt+1328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.365606597 UTC

[section ""data" . Data.Foldable.$fFoldableLast_$ctoList_closure" {
     Data.Foldable.$fFoldableLast_$ctoList_closure:
         const Data.Foldable.$fFoldableLast_$ctoList_info;
 },
 Data.Foldable.$fFoldableLast_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c72zV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72zW; else goto c72zX;
       c72zW: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableLast_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72zX: // global
           I64[Sp - 8] = block_c72zO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72A7; else goto c72zP;
       u72A7: // global
           call _c72zO(R1) args: 0, res: 0, upd: 0;
       c72zP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableLast_$ctoList_info" {
     Data.Foldable.$fFoldableLast_$ctoList_info:
         const Data.Foldable.$fFoldableLast_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c72zO() //  [R1]
         { []
         }
     {offset
       c72zO: // global
           if (R1 & 7 == 1) goto c72zS; else goto c72zT;
       c72zS: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c72zT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c72A6; else goto c72A5;
       c72A6: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c72A5: // global
           _s6YOP::P64 = P64[R1 + 6];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s6YOP::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72zO_info" {
     block_c72zO_info:
         const _c72zO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.371033243 UTC

[section ""data" . Data.Foldable.$fFoldableLast_closure" {
     Data.Foldable.$fFoldableLast_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableLast_$cfold_closure+2;
         const Data.Foldable.$fFoldableLast_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableLast_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableLast_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableLast_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableLast_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableLast_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableLast_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableLast_$ctoList_closure+1;
         const Data.Foldable.$fFoldableLast_$cnull_closure+1;
         const Data.Foldable.$fFoldableLast_$clength_closure+1;
         const Data.Foldable.$fFoldableLast_$celem_closure+2;
         const Data.Foldable.$fFoldableLast_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableLast_$cminimum_closure+2;
         const Data.Foldable.$fFoldableLast2_closure+2;
         const Data.Foldable.$fFoldableLast1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.374181781 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cfoldMap_closure" {
     Data.Foldable.$fFoldableFirst_$cfoldMap_closure:
         const Data.Foldable.$fFoldableFirst_$cfoldMap_info;
 },
 Data.Foldable.$fFoldableFirst_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c72AC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c72AD; else goto c72AE;
       c72AD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72AE: // global
           I64[Sp - 24] = block_c72Av_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u72AL; else goto c72Aw;
       u72AL: // global
           call _c72Av(R1) args: 0, res: 0, upd: 0;
       c72Aw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cfoldMap_info" {
     Data.Foldable.$fFoldableFirst_$cfoldMap_info:
         const Data.Foldable.$fFoldableFirst_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c72Av() //  [R1]
         { []
         }
     {offset
       c72Av: // global
           if (R1 & 7 == 1) goto c72Az; else goto c72AA;
       c72Az: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c72AA: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72Av_info" {
     block_c72Av_info:
         const _c72Av;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.380739184 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cfold_closure" {
     Data.Foldable.$fFoldableFirst_$cfold_closure:
         const Data.Foldable.$fFoldableFirst_$cfold_info;
 },
 Data.Foldable.$fFoldableFirst_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       c72B9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72Ba; else goto c72Bb;
       c72Ba: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72Bb: // global
           I64[Sp - 16] = block_c72B2_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u72Bi; else goto c72B3;
       u72Bi: // global
           call _c72B2(R1) args: 0, res: 0, upd: 0;
       c72B3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cfold_info" {
     Data.Foldable.$fFoldableFirst_$cfold_info:
         const Data.Foldable.$fFoldableFirst_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c72B2() //  [R1]
         { []
         }
     {offset
       c72B2: // global
           if (R1 & 7 == 1) goto c72B6; else goto c72B7;
       c72B6: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       c72B7: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72B2_info" {
     block_c72B2_info:
         const _c72B2;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.387416261 UTC

[section ""data" . Data.Foldable.$fFoldableFirst2_closure" {
     Data.Foldable.$fFoldableFirst2_closure:
         const Data.Foldable.$fFoldableFirst2_info;
         const 0;
 },
 Data.Foldable.$fFoldableFirst2_entry() //  [R2, R3]
         { []
         }
     {offset
       c72BG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72BH; else goto c72BI;
       c72BH: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72BI: // global
           I64[Sp - 16] = block_c72Bz_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u72BP; else goto c72BA;
       u72BP: // global
           call _c72Bz(R1) args: 0, res: 0, upd: 0;
       c72BA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst2_info" {
     Data.Foldable.$fFoldableFirst2_info:
         const Data.Foldable.$fFoldableFirst2_entry;
         const 0;
         const 140741783322638;
         const 8589934607;
         const S6Z86_srt+1280;
 },
 _c72Bz() //  [R1]
         { []
         }
     {offset
       c72Bz: // global
           if (R1 & 7 == 1) goto c72BD; else goto c72BE;
       c72BD: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
       c72BE: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72Bz_info" {
     block_c72Bz_info:
         const _c72Bz;
         const 1;
         const 4294967326;
         const S6Z86_srt+1280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.394450112 UTC

[section ""data" . Data.Foldable.$fFoldableFirst3_closure" {
     Data.Foldable.$fFoldableFirst3_closure:
         const Data.Foldable.$fFoldableFirst3_info;
         const 0;
 },
 Data.Foldable.$fFoldableFirst3_entry() //  [R2]
         { []
         }
     {offset
       c72Cd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72Ce; else goto c72Cf;
       c72Ce: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72Cf: // global
           I64[Sp - 8] = block_c72C6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72Cm; else goto c72C7;
       u72Cm: // global
           call _c72C6(R1) args: 0, res: 0, upd: 0;
       c72C7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst3_info" {
     Data.Foldable.$fFoldableFirst3_info:
         const Data.Foldable.$fFoldableFirst3_entry;
         const 0;
         const 2305843013508661262;
         const 4294967301;
         const S6Z86_srt+1176;
 },
 _c72C6() //  [R1]
         { []
         }
     {offset
       c72C6: // global
           if (R1 & 7 == 1) goto c72Ca; else goto c72Cb;
       c72Ca: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72Cb: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72C6_info" {
     block_c72C6_info:
         const _c72C6;
         const 0;
         const 4294967326;
         const S6Z86_srt+1176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.400341804 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cminimum_closure" {
     Data.Foldable.$fFoldableFirst_$cminimum_closure:
         const Data.Foldable.$fFoldableFirst_$cminimum_info;
         const 0;
 },
 Data.Foldable.$fFoldableFirst_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       c72CD: // global
           R2 = R3;
           call Data.Foldable.$fFoldableFirst3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cminimum_info" {
     Data.Foldable.$fFoldableFirst_$cminimum_info:
         const Data.Foldable.$fFoldableFirst_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+1408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.406003324 UTC

[section ""data" . Data.Foldable.$fFoldableFirst4_closure" {
     Data.Foldable.$fFoldableFirst4_closure:
         const Data.Foldable.$fFoldableFirst4_info;
         const 0;
 },
 Data.Foldable.$fFoldableFirst4_entry() //  [R2]
         { []
         }
     {offset
       c72CV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72CW; else goto c72CX;
       c72CW: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72CX: // global
           I64[Sp - 8] = block_c72CO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72D4; else goto c72CP;
       u72D4: // global
           call _c72CO(R1) args: 0, res: 0, upd: 0;
       c72CP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst4_info" {
     Data.Foldable.$fFoldableFirst4_info:
         const Data.Foldable.$fFoldableFirst4_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S6Z86_srt+1416;
 },
 _c72CO() //  [R1]
         { []
         }
     {offset
       c72CO: // global
           if (R1 & 7 == 1) goto c72CS; else goto c72CT;
       c72CS: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72CT: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72CO_info" {
     block_c72CO_info:
         const _c72CO;
         const 0;
         const 4294967326;
         const S6Z86_srt+1424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.411462379 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cmaximum_closure" {
     Data.Foldable.$fFoldableFirst_$cmaximum_closure:
         const Data.Foldable.$fFoldableFirst_$cmaximum_info;
         const 0;
 },
 Data.Foldable.$fFoldableFirst_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       c72Dl: // global
           R2 = R3;
           call Data.Foldable.$fFoldableFirst4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cmaximum_info" {
     Data.Foldable.$fFoldableFirst_$cmaximum_info:
         const Data.Foldable.$fFoldableFirst_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+1416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.416576635 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$celem_closure" {
     Data.Foldable.$fFoldableFirst_$celem_closure:
         const Data.Foldable.$fFoldableFirst_$celem_info;
 },
 f_s6YPd_entry() //  [R1]
         { []
         }
     {offset
       c72DA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c72DB; else goto c72DC;
       c72DB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72DC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s6YPd_info" {
     f_s6YPd_info:
         const f_s6YPd_entry;
         const 2;
         const 18;
 },
 sat_s6YPh_entry() //  [R1, R2]
         { []
         }
     {offset
       c72DP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72DQ; else goto c72DR;
       c72DQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72DR: // global
           I64[Sp - 16] = block_c72DI_info;
           _s6YPd::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s6YPd::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u72DY; else goto c72DJ;
       u72DY: // global
           call _c72DI(R1) args: 0, res: 0, upd: 0;
       c72DJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YPh_info" {
     sat_s6YPh_info:
         const sat_s6YPh_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c72DI() //  [R1]
         { []
         }
     {offset
       c72DI: // global
           if (R1 & 7 == 1) goto c72DM; else goto c72DN;
       c72DM: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c72DN: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72DI_info" {
     block_c72DI_info:
         const _c72DI;
         const 1;
         const 30;
 },
 Data.Foldable.$fFoldableFirst_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       c72DZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c72E3; else goto c72E2;
       c72E3: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72E2: // global
           I64[Hp - 40] = f_s6YPd_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6YPh_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$celem_info" {
     Data.Foldable.$fFoldableFirst_$celem_info:
         const Data.Foldable.$fFoldableFirst_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.426760029 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cfoldl_closure" {
     Data.Foldable.$fFoldableFirst_$cfoldl_closure:
         const Data.Foldable.$fFoldableFirst_$cfoldl_info;
 },
 Data.Foldable.$fFoldableFirst_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c72EH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c72EI; else goto c72EJ;
       c72EI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$cfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72EJ: // global
           I64[Sp - 24] = block_c72EA_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u72EQ; else goto c72EB;
       u72EQ: // global
           call _c72EA(R1) args: 0, res: 0, upd: 0;
       c72EB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cfoldl_info" {
     Data.Foldable.$fFoldableFirst_$cfoldl_info:
         const Data.Foldable.$fFoldableFirst_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c72EA() //  [R1]
         { []
         }
     {offset
       c72EA: // global
           _s6YPj::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c72EE; else goto c72EF;
       c72EE: // global
           R1 = _s6YPj::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72EF: // global
           R3 = P64[R1 + 6];
           R2 = _s6YPj::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72EA_info" {
     block_c72EA_info:
         const _c72EA;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.433118205 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cfoldl1_closure" {
     Data.Foldable.$fFoldableFirst_$cfoldl1_closure:
         const Data.Foldable.$fFoldableFirst_$cfoldl1_info;
         const 0;
 },
 Data.Foldable.$fFoldableFirst_$cfoldl1_entry() //  [R2, R3]
         { []
         }
     {offset
       c72Fe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72Ff; else goto c72Fg;
       c72Ff: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$cfoldl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72Fg: // global
           I64[Sp - 8] = block_c72F7_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72Fn; else goto c72F8;
       u72Fn: // global
           call _c72F7(R1) args: 0, res: 0, upd: 0;
       c72F8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cfoldl1_info" {
     Data.Foldable.$fFoldableFirst_$cfoldl1_info:
         const Data.Foldable.$fFoldableFirst_$cfoldl1_entry;
         const 0;
         const 1103806595086;
         const 8589934607;
         const S6Z86_srt+1368;
 },
 _c72F7() //  [R1]
         { []
         }
     {offset
       c72F7: // global
           if (R1 & 7 == 1) goto c72Fb; else goto c72Fc;
       c72Fb: // global
           R1 = Data.Foldable.$fFoldable:.:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72Fc: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72F7_info" {
     block_c72F7_info:
         const _c72F7;
         const 0;
         const 4294967326;
         const S6Z86_srt+1368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.440165612 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cfoldr'_closure" {
     Data.Foldable.$fFoldableFirst_$cfoldr'_closure:
         const Data.Foldable.$fFoldableFirst_$cfoldr'_info;
 },
 Data.Foldable.$fFoldableFirst_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c72FL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c72FM; else goto c72FN;
       c72FM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$cfoldr'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72FN: // global
           I64[Sp - 24] = block_c72FE_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u72FU; else goto c72FF;
       u72FU: // global
           call _c72FE(R1) args: 0, res: 0, upd: 0;
       c72FF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cfoldr'_info" {
     Data.Foldable.$fFoldableFirst_$cfoldr'_info:
         const Data.Foldable.$fFoldableFirst_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c72FE() //  [R1]
         { []
         }
     {offset
       c72FE: // global
           _s6YPs::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c72FI; else goto c72FJ;
       c72FI: // global
           R1 = _s6YPs::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72FJ: // global
           R3 = _s6YPs::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72FE_info" {
     block_c72FE_info:
         const _c72FE;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.448171535 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$clength_closure" {
     Data.Foldable.$fFoldableFirst_$clength_closure:
         const Data.Foldable.$fFoldableFirst_$clength_info;
 },
 Data.Foldable.$fFoldableFirst_$clength_entry() //  [R2]
         { []
         }
     {offset
       c72Gi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72Gj; else goto c72Gk;
       c72Gj: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72Gk: // global
           I64[Sp - 8] = block_c72Gb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72Gr; else goto c72Gc;
       u72Gr: // global
           call _c72Gb(R1) args: 0, res: 0, upd: 0;
       c72Gc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$clength_info" {
     Data.Foldable.$fFoldableFirst_$clength_info:
         const Data.Foldable.$fFoldableFirst_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c72Gb() //  [R1]
         { []
         }
     {offset
       c72Gb: // global
           if (R1 & 7 == 1) goto c72Gf; else goto c72Gg;
       c72Gf: // global
           R1 = Data.Foldable.$fFoldable:*:4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c72Gg: // global
           R1 = Data.Foldable.$fFoldableDual3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72Gb_info" {
     block_c72Gb_info:
         const _c72Gb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.454540008 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cfoldr1_closure" {
     Data.Foldable.$fFoldableFirst_$cfoldr1_closure:
         const Data.Foldable.$fFoldableFirst_$cfoldr1_info;
         const 0;
 },
 Data.Foldable.$fFoldableFirst_$cfoldr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c72GR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72GS; else goto c72GT;
       c72GS: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$cfoldr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72GT: // global
           I64[Sp - 8] = block_c72GK_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72H0; else goto c72GL;
       u72H0: // global
           call _c72GK(R1) args: 0, res: 0, upd: 0;
       c72GL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cfoldr1_info" {
     Data.Foldable.$fFoldableFirst_$cfoldr1_info:
         const Data.Foldable.$fFoldableFirst_$cfoldr1_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const S6Z86_srt+1384;
 },
 _c72GK() //  [R1]
         { []
         }
     {offset
       c72GK: // global
           if (R1 & 7 == 1) goto c72GO; else goto c72GP;
       c72GO: // global
           R1 = Data.Foldable.$fFoldable:.:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72GP: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72GK_info" {
     block_c72GK_info:
         const _c72GK;
         const 0;
         const 4294967326;
         const S6Z86_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.460896366 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$cnull_closure" {
     Data.Foldable.$fFoldableFirst_$cnull_closure:
         const Data.Foldable.$fFoldableFirst_$cnull_info;
 },
 Data.Foldable.$fFoldableFirst_$cnull_entry() //  [R2]
         { []
         }
     {offset
       c72Ho: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72Hp; else goto c72Hq;
       c72Hp: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72Hq: // global
           I64[Sp - 8] = block_c72Hh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72Hx; else goto c72Hi;
       u72Hx: // global
           call _c72Hh(R1) args: 0, res: 0, upd: 0;
       c72Hi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$cnull_info" {
     Data.Foldable.$fFoldableFirst_$cnull_info:
         const Data.Foldable.$fFoldableFirst_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c72Hh() //  [R1]
         { []
         }
     {offset
       c72Hh: // global
           if (R1 & 7 == 1) goto c72Hl; else goto c72Hm;
       c72Hl: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c72Hm: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72Hh_info" {
     block_c72Hh_info:
         const _c72Hh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.467470146 UTC

[section ""data" . Data.Foldable.$fFoldableFirst1_closure" {
     Data.Foldable.$fFoldableFirst1_closure:
         const Data.Foldable.$fFoldableFirst1_info;
         const 0;
 },
 Data.Foldable.$fFoldableFirst1_entry() //  [R2, R3]
         { []
         }
     {offset
       c72HZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72I0; else goto c72I1;
       c72I0: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72I1: // global
           I64[Sp - 16] = block_c72HS_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u72I8; else goto c72HT;
       u72I8: // global
           call _c72HS(R1) args: 0, res: 0, upd: 0;
       c72HT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst1_info" {
     Data.Foldable.$fFoldableFirst1_info:
         const Data.Foldable.$fFoldableFirst1_entry;
         const 0;
         const 140741783322638;
         const 8589934607;
         const S6Z86_srt+1328;
 },
 _c72HS() //  [R1]
         { []
         }
     {offset
       c72HS: // global
           if (R1 & 7 == 1) goto c72HW; else goto c72HX;
       c72HW: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
       c72HX: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72HS_info" {
     block_c72HS_info:
         const _c72HS;
         const 1;
         const 4294967326;
         const S6Z86_srt+1328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.474588228 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_$ctoList_closure" {
     Data.Foldable.$fFoldableFirst_$ctoList_closure:
         const Data.Foldable.$fFoldableFirst_$ctoList_info;
 },
 Data.Foldable.$fFoldableFirst_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       c72Iw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c72Ix; else goto c72Iy;
       c72Ix: // global
           R2 = R2;
           R1 = Data.Foldable.$fFoldableFirst_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72Iy: // global
           I64[Sp - 8] = block_c72Ip_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u72II; else goto c72Iq;
       u72II: // global
           call _c72Ip(R1) args: 0, res: 0, upd: 0;
       c72Iq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldableFirst_$ctoList_info" {
     Data.Foldable.$fFoldableFirst_$ctoList_info:
         const Data.Foldable.$fFoldableFirst_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c72Ip() //  [R1]
         { []
         }
     {offset
       c72Ip: // global
           if (R1 & 7 == 1) goto c72It; else goto c72Iu;
       c72It: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c72Iu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c72IH; else goto c72IG;
       c72IH: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c72IG: // global
           _s6YPM::P64 = P64[R1 + 6];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s6YPM::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72Ip_info" {
     block_c72Ip_info:
         const _c72Ip;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.480631572 UTC

[section ""data" . Data.Foldable.$fFoldableFirst_closure" {
     Data.Foldable.$fFoldableFirst_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableFirst_$cfold_closure+2;
         const Data.Foldable.$fFoldableFirst_$cfoldMap_closure+3;
         const Data.Foldable.$fFoldableFirst_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableFirst_$cfoldr'_closure+3;
         const Data.Foldable.$fFoldableFirst_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableFirst_$cfoldl_closure+3;
         const Data.Foldable.$fFoldableFirst_$cfoldr1_closure+2;
         const Data.Foldable.$fFoldableFirst_$cfoldl1_closure+2;
         const Data.Foldable.$fFoldableFirst_$ctoList_closure+1;
         const Data.Foldable.$fFoldableFirst_$cnull_closure+1;
         const Data.Foldable.$fFoldableFirst_$clength_closure+1;
         const Data.Foldable.$fFoldableFirst_$celem_closure+2;
         const Data.Foldable.$fFoldableFirst_$cmaximum_closure+2;
         const Data.Foldable.$fFoldableFirst_$cminimum_closure+2;
         const Data.Foldable.$fFoldableFirst2_closure+2;
         const Data.Foldable.$fFoldableFirst1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.484792514 UTC

[section ""data" . Data.Foldable.all1_closure" {
     Data.Foldable.all1_closure:
         const Data.Foldable.all1_info;
         const 0;
 },
 Data.Foldable.all1_entry() //  [R2, R3]
         { []
         }
     {offset
       c72J6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c72J7; else goto c72J8;
       c72J7: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.all1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72J8: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Semigroup.Internal.$fMonoidAll_closure;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call Data.Foldable.foldMap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.all1_info" {
     Data.Foldable.all1_info:
         const Data.Foldable.all1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+1456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.48912158 UTC

[section ""data" . Data.Foldable.all_closure" {
     Data.Foldable.all_closure:
         const Data.Foldable.all_info;
         const 0;
 },
 Data.Foldable.all_entry() //  [R2, R3]
         { []
         }
     {offset
       c72Jk: // global
           R3 = R3;
           R2 = R2;
           call Data.Foldable.all1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.all_info" {
     Data.Foldable.all_info:
         const Data.Foldable.all_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S6Z86_srt+1456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.49381897 UTC

[section ""data" . Data.Foldable.$fFoldable:.:1_closure" {
     Data.Foldable.$fFoldable:.:1_closure:
         const Data.Foldable.$fFoldable:.:1_info;
         const 0;
 },
 sat_s6YPS_entry() //  [R1]
         { []
         }
     {offset
       c72Jz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72JA; else goto c72JB;
       c72JA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72JB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Foldable.null_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YPS_info" {
     sat_s6YPS_info:
         const sat_s6YPS_entry;
         const 1;
         const 16;
 },
 Data.Foldable.$fFoldable:.:1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c72JC: // global
           _s6YPR::P64 = R4;
           _s6YPQ::P64 = R3;
           _s6YPP::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c72JD; else goto c72JE;
       c72JE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c72JG; else goto c72JF;
       c72JG: // global
           HpAlloc = 24;
           goto c72JD;
       c72JD: // global
           R4 = _s6YPR::P64;
           R3 = _s6YPQ::P64;
           R2 = _s6YPP::P64;
           R1 = Data.Foldable.$fFoldable:.:1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72JF: // global
           I64[Hp - 16] = sat_s6YPS_info;
           P64[Hp] = _s6YPQ::P64;
           R2 = _s6YPP::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAll_closure;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _s6YPR::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:1_info" {
     Data.Foldable.$fFoldable:.:1_info:
         const Data.Foldable.$fFoldable:.:1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6Z86_srt+1464;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.500810067 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cfold_closure" {
     Data.Foldable.$fFoldable:.:_$cfold_closure:
         const Data.Foldable.$fFoldable:.:_$cfold_info;
 },
 sat_s6YPX_entry() //  [R1]
         { []
         }
     {offset
       c72K3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c72K4; else goto c72K5;
       c72K4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72K5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.id_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YPX_info" {
     sat_s6YPX_info:
         const sat_s6YPX_entry;
         const 2;
         const 18;
 },
 Data.Foldable.$fFoldable:.:_$cfold_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c72K6: // global
           _s6YPW::P64 = R5;
           _s6YPV::P64 = R4;
           _s6YPU::P64 = R3;
           _s6YPT::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c72K7; else goto c72K8;
       c72K8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c72Ka; else goto c72K9;
       c72Ka: // global
           HpAlloc = 32;
           goto c72K7;
       c72K7: // global
           R5 = _s6YPW::P64;
           R4 = _s6YPV::P64;
           R3 = _s6YPU::P64;
           R2 = _s6YPT::P64;
           R1 = Data.Foldable.$fFoldable:.:_$cfold_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72K9: // global
           I64[Hp - 24] = sat_s6YPX_info;
           P64[Hp - 8] = _s6YPU::P64;
           P64[Hp] = _s6YPV::P64;
           R2 = _s6YPT::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _s6YPV::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _s6YPW::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cfold_info" {
     Data.Foldable.$fFoldable:.:_$cfold_info:
         const Data.Foldable.$fFoldable:.:_$cfold_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.508957127 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$csum_closure" {
     Data.Foldable.$fFoldable:.:_$csum_closure:
         const Data.Foldable.$fFoldable:.:_$csum_info;
         const 0;
 },
 $dMonoid_s6YQ1_entry() //  [R1]
         { []
         }
     {offset
       c72KA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72KB; else goto c72KC;
       c72KB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72KC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6YQ1_info" {
     $dMonoid_s6YQ1_info:
         const $dMonoid_s6YQ1_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+1480;
 },
 lvl1_s6YQ2_entry() //  [R1]
         { []
         }
     {offset
       c72KH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c72KI; else goto c72KJ;
       c72KI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72KJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Foldable.$fFoldable:*:1_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_s6YQ2_info" {
     lvl1_s6YQ2_info:
         const lvl1_s6YQ2_entry;
         const 2;
         const 18;
 },
 sat_s6YQ4_entry() //  [R1, R2]
         { []
         }
     {offset
       c72KP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c72KQ; else goto c72KR;
       c72KQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72KR: // global
           _s6YQ3::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _s6YQ3::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YQ4_info" {
     sat_s6YQ4_info:
         const sat_s6YQ4_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Data.Foldable.$fFoldable:.:_$csum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c72KS: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c72KW; else goto c72KV;
       c72KW: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:.:_$csum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72KV: // global
           I64[Hp - 80] = $dMonoid_s6YQ1_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl1_s6YQ2_info;
           P64[Hp - 40] = R3;
           _c72Kw::P64 = Hp - 80;
           P64[Hp - 32] = _c72Kw::P64;
           I64[Hp - 24] = sat_s6YQ4_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _c72Kw::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$csum_info" {
     Data.Foldable.$fFoldable:.:_$csum_info:
         const Data.Foldable.$fFoldable:.:_$csum_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6Z86_srt+1480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.521495184 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cminimum_closure" {
     Data.Foldable.$fFoldable:.:_$cminimum_closure:
         const Data.Foldable.$fFoldable:.:_$cminimum_info;
         const 0;
 },
 $dMonoid_s6YQ8_entry() //  [R1]
         { []
         }
     {offset
       c72Ly: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72Lz; else goto c72LA;
       c72Lz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72LA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6YQ8_info" {
     $dMonoid_s6YQ8_info:
         const $dMonoid_s6YQ8_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+1496;
 },
 lvl1_s6YQ9_entry() //  [R1]
         { []
         }
     {offset
       c72LF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c72LG; else goto c72LH;
       c72LG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72LH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_s6YQ9_info" {
     lvl1_s6YQ9_info:
         const lvl1_s6YQ9_entry;
         const 2;
         const 18;
 },
 sat_s6YQd_entry() //  [R1, R2]
         { []
         }
     {offset
       c72LT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c72LU; else goto c72LV;
       c72LU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72LV: // global
           I64[Sp - 8] = block_c72LN_info;
           _s6YQa::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = P64[R1 + 23];
           P64[Sp - 16] = _s6YQa::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YQd_info" {
     sat_s6YQd_info:
         const sat_s6YQd_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S6Z86_srt+1504;
 },
 _c72LN() //  [R1]
         { []
         }
     {offset
       c72LN: // global
           if (R1 & 7 == 1) goto c72LQ; else goto c72LR;
       c72LQ: // global
           R1 = Data.Foldable.$fFoldable:*:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72LR: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72LN_info" {
     block_c72LN_info:
         const _c72LN;
         const 0;
         const 4294967326;
         const S6Z86_srt+1504;
 },
 Data.Foldable.$fFoldable:.:_$cminimum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c72M2: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c72M6; else goto c72M5;
       c72M6: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:.:_$cminimum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72M5: // global
           I64[Hp - 80] = $dMonoid_s6YQ8_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl1_s6YQ9_info;
           P64[Hp - 40] = R3;
           _c72Lu::P64 = Hp - 80;
           P64[Hp - 32] = _c72Lu::P64;
           I64[Hp - 24] = sat_s6YQd_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _c72Lu::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cminimum_info" {
     Data.Foldable.$fFoldable:.:_$cminimum_info:
         const Data.Foldable.$fFoldable:.:_$cminimum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S6Z86_srt+1496;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.536946479 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cmaximum_closure" {
     Data.Foldable.$fFoldable:.:_$cmaximum_closure:
         const Data.Foldable.$fFoldable:.:_$cmaximum_info;
         const 0;
 },
 $dMonoid_s6YQh_entry() //  [R1]
         { []
         }
     {offset
       c72MP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72MQ; else goto c72MR;
       c72MQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72MR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6YQh_info" {
     $dMonoid_s6YQh_info:
         const $dMonoid_s6YQh_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+1520;
 },
 lvl1_s6YQi_entry() //  [R1]
         { []
         }
     {offset
       c72MW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c72MX; else goto c72MY;
       c72MX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72MY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_s6YQi_info" {
     lvl1_s6YQi_info:
         const lvl1_s6YQi_entry;
         const 2;
         const 18;
 },
 sat_s6YQm_entry() //  [R1, R2]
         { []
         }
     {offset
       c72Na: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c72Nb; else goto c72Nc;
       c72Nb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72Nc: // global
           I64[Sp - 8] = block_c72N4_info;
           _s6YQj::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = P64[R1 + 23];
           P64[Sp - 16] = _s6YQj::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YQm_info" {
     sat_s6YQm_info:
         const sat_s6YQm_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S6Z86_srt+1424;
 },
 _c72N4() //  [R1]
         { []
         }
     {offset
       c72N4: // global
           if (R1 & 7 == 1) goto c72N7; else goto c72N8;
       c72N7: // global
           R1 = Data.Foldable.$fFoldable:*:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72N8: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72N4_info" {
     block_c72N4_info:
         const _c72N4;
         const 0;
         const 4294967326;
         const S6Z86_srt+1424;
 },
 Data.Foldable.$fFoldable:.:_$cmaximum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c72Nj: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c72Nn; else goto c72Nm;
       c72Nn: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:.:_$cmaximum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72Nm: // global
           I64[Hp - 80] = $dMonoid_s6YQh_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl1_s6YQi_info;
           P64[Hp - 40] = R3;
           _c72ML::P64 = Hp - 80;
           P64[Hp - 32] = _c72ML::P64;
           I64[Hp - 24] = sat_s6YQm_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _c72ML::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cmaximum_info" {
     Data.Foldable.$fFoldable:.:_$cmaximum_info:
         const Data.Foldable.$fFoldable:.:_$cmaximum_entry;
         const 0;
         const 52780853100558;
         const 12884901911;
         const S6Z86_srt+1424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.550699396 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$celem_closure" {
     Data.Foldable.$fFoldable:.:_$celem_closure:
         const Data.Foldable.$fFoldable:.:_$celem_info;
         const 0;
 },
 sat_s6YQs_entry() //  [R1]
         { []
         }
     {offset
       c72Oa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c72Ob; else goto c72Oc;
       c72Ob: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72Oc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YQs_info" {
     sat_s6YQs_info:
         const sat_s6YQs_entry;
         const 2;
         const 18;
 },
 lvl1_s6YQr_entry() //  [R1]
         { []
         }
     {offset
       c72Od: // global
           _s6YQr::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c72Oe; else goto c72Of;
       c72Of: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c72Oh; else goto c72Og;
       c72Oh: // global
           HpAlloc = 32;
           goto c72Oe;
       c72Oe: // global
           R1 = _s6YQr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72Og: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6YQr::P64;
           _s6YQo::P64 = P64[_s6YQr::P64 + 16];
           _s6YQp::P64 = P64[_s6YQr::P64 + 24];
           _s6YQq::P64 = P64[_s6YQr::P64 + 32];
           I64[Hp - 24] = sat_s6YQs_info;
           P64[Hp - 8] = _s6YQp::P64;
           P64[Hp] = _s6YQq::P64;
           R2 = _s6YQo::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_s6YQr_info" {
     lvl1_s6YQr_info:
         const lvl1_s6YQr_entry;
         const 3;
         const 4294967311;
         const S6Z86_srt+1536;
 },
 sat_s6YQu_entry() //  [R1, R2]
         { []
         }
     {offset
       c72On: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c72Oo; else goto c72Op;
       c72Oo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72Op: // global
           _s6YQt::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = _s6YQt::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YQu_info" {
     sat_s6YQu_info:
         const sat_s6YQu_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+1536;
 },
 Data.Foldable.$fFoldable:.:_$celem_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c72Oq: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c72Ou; else goto c72Ot;
       c72Ou: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:.:_$celem_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72Ot: // global
           I64[Hp - 56] = lvl1_s6YQr_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = sat_s6YQu_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$celem_info" {
     Data.Foldable.$fFoldable:.:_$celem_info:
         const Data.Foldable.$fFoldable:.:_$celem_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S6Z86_srt+1536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.564099477 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cfoldr1_closure" {
     Data.Foldable.$fFoldable:.:_$cfoldr1_closure:
         const Data.Foldable.$fFoldable:.:_$cfoldr1_info;
         const 0;
 },
 sat_s6YQE_entry() //  [R1]
         { []
         }
     {offset
       c72Pk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c72Pl; else goto c72Pm;
       c72Pl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72Pm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c72Pd_info;
           _s6YQx::P64 = P64[R1 + 16];
           _s6YQA::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6YQx::P64;
           P64[Sp - 24] = _s6YQA::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u72Pt; else goto c72Pe;
       u72Pt: // global
           call _c72Pd(R1) args: 0, res: 0, upd: 0;
       c72Pe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YQE_info" {
     sat_s6YQE_info:
         const sat_s6YQE_entry;
         const 3;
         const 15;
 },
 _c72Pd() //  [R1]
         { []
         }
     {offset
       c72Pd: // global
           _s6YQA::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c72Ph; else goto c72Pi;
       c72Ph: // global
           R1 = _s6YQA::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c72Pi: // global
           R3 = P64[R1 + 6];
           R2 = _s6YQA::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c72Pd_info" {
     block_c72Pd_info:
         const _c72Pd;
         const 2;
         const 30;
 },
 f2_s6YQz_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c72Pv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c72Pz; else goto c72Py;
       c72Pz: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72Py: // global
           _s6YQx::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6YQE_info;
           P64[Hp - 32] = _s6YQx::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f2_s6YQz_info" {
     f2_s6YQz_info:
         const f2_s6YQz_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6YQH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c72PF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c72PG; else goto c72PH;
       c72PG: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72PH: // global
           _s6YQF::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 14];
           P64[Sp - 16] = R3;
           P64[Sp - 8] = _s6YQF::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YQH_info" {
     sat_s6YQH_info:
         const sat_s6YQH_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:.:_$cfoldr1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c72PO: // global
           _s6YQy::P64 = R5;
           _s6YQx::P64 = R4;
           _s6YQw::P64 = R3;
           _s6YQv::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c72PP; else goto c72PQ;
       c72PQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c72PS; else goto c72PR;
       c72PS: // global
           HpAlloc = 40;
           goto c72PP;
       c72PP: // global
           R5 = _s6YQy::P64;
           R4 = _s6YQx::P64;
           R3 = _s6YQw::P64;
           R2 = _s6YQv::P64;
           R1 = Data.Foldable.$fFoldable:.:_$cfoldr1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72PR: // global
           I64[Hp - 32] = f2_s6YQz_info;
           P64[Hp - 24] = _s6YQx::P64;
           I64[Hp - 16] = sat_s6YQH_info;
           P64[Hp - 8] = _s6YQw::P64;
           P64[Hp] = Hp - 30;
           I64[Sp - 8] = block_c72PI_info;
           R2 = _s6YQv::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 14;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _s6YQy::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cfoldr1_info" {
     Data.Foldable.$fFoldable:.:_$cfoldr1_info:
         const Data.Foldable.$fFoldable:.:_$cfoldr1_entry;
         const 0;
         const 9007203549708302;
         const 17179869208;
         const S6Z86_srt+1384;
 },
 _c72PI() //  [R1]
         { []
         }
     {offset
       c72PI: // global
           if (R1 & 7 == 1) goto c72PL; else goto c72PM;
       c72PL: // global
           R1 = Data.Foldable.$fFoldable:.:3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72PM: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72PI_info" {
     block_c72PI_info:
         const _c72PI;
         const 0;
         const 4294967326;
         const S6Z86_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.581271337 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cfoldl'_closure" {
     Data.Foldable.$fFoldable:.:_$cfoldl'_closure:
         const Data.Foldable.$fFoldable:.:_$cfoldl'_info;
 },
 f2_s6YQP_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c72QR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72QS; else goto c72QT;
       c72QS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72QT: // global
           I64[Sp - 16] = block_c72QP_info;
           _s6YQR::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6YQR::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . f2_s6YQP_info" {
     f2_s6YQP_info:
         const f2_s6YQP_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c72QP() //  [R1]
         { []
         }
     {offset
       c72QP: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72QP_info" {
     block_c72QP_info:
         const _c72QP;
         const 1;
         const 30;
 },
 sat_s6YQW_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c72R0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c72R1; else goto c72R2;
       c72R1: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72R2: // global
           _s6YQU::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 14];
           P64[Sp - 16] = R3;
           P64[Sp - 8] = _s6YQU::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YQW_info" {
     sat_s6YQW_info:
         const sat_s6YQW_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:.:_$cfoldl'_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c72R3: // global
           _s6YQO::P64 = R6;
           _s6YQN::P64 = R5;
           _s6YQM::P64 = R4;
           _s6YQL::P64 = R3;
           _s6YQK::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c72R4; else goto c72R5;
       c72R5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c72R7; else goto c72R6;
       c72R7: // global
           HpAlloc = 40;
           goto c72R4;
       c72R4: // global
           R6 = _s6YQO::P64;
           R5 = _s6YQN::P64;
           R4 = _s6YQM::P64;
           R3 = _s6YQL::P64;
           R2 = _s6YQK::P64;
           R1 = Data.Foldable.$fFoldable:.:_$cfoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72R6: // global
           I64[Hp - 32] = f2_s6YQP_info;
           P64[Hp - 24] = _s6YQM::P64;
           I64[Hp - 16] = sat_s6YQW_info;
           P64[Hp - 8] = _s6YQL::P64;
           P64[Hp] = Hp - 29;
           R2 = _s6YQK::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 14;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = _s6YQO::P64;
           P64[Sp - 8] = _s6YQN::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldr_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cfoldl'_info" {
     Data.Foldable.$fFoldable:.:_$cfoldl'_info:
         const Data.Foldable.$fFoldable:.:_$cfoldl'_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.591236014 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$clength_closure" {
     Data.Foldable.$fFoldable:.:_$clength_closure:
         const Data.Foldable.$fFoldable:.:_$clength_info;
 },
 Data.Foldable.$fFoldable:.:_$clength_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c72RC: // global
           R6 = R4;
           R5 = Data.Foldable.$fFoldable:*:4_closure+1;
           R4 = Data.Foldable.$fFoldable:*:5_closure+2;
           R3 = R3;
           R2 = R2;
           call Data.Foldable.$fFoldable:.:_$cfoldl'_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$clength_info" {
     Data.Foldable.$fFoldable:.:_$clength_info:
         const Data.Foldable.$fFoldable:.:_$clength_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.596368811 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cfoldl_closure" {
     Data.Foldable.$fFoldable:.:_$cfoldl_closure:
         const Data.Foldable.$fFoldable:.:_$cfoldl_info;
         const 0;
 },
 sat_s6YR7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c72RW: // global
           _s6YR6::P64 = R3;
           R3 = R2;
           R2 = _s6YR6::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YR7_info" {
     sat_s6YR7_info:
         const sat_s6YR7_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6YR8_entry() //  [R1]
         { []
         }
     {offset
       c72RZ: // global
           _s6YR8::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c72S0; else goto c72S1;
       c72S1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c72S3; else goto c72S2;
       c72S3: // global
           HpAlloc = 16;
           goto c72S0;
       c72S0: // global
           R1 = _s6YR8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72S2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6YR8::P64;
           _s6YR1::P64 = P64[_s6YR8::P64 + 16];
           _s6YR2::P64 = P64[_s6YR8::P64 + 24];
           I64[Hp - 8] = sat_s6YR7_info;
           P64[Hp] = _s6YR2::P64;
           R2 = _s6YR1::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 24] = Hp - 6;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YR8_info" {
     sat_s6YR8_info:
         const sat_s6YR8_entry;
         const 2;
         const 4294967314;
         const S6Z86_srt+1560;
 },
 Data.Foldable.$fFoldable:.:_$cfoldl_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c72S4: // global
           _s6YR4::P64 = R6;
           _s6YR3::P64 = R5;
           _s6YR2::P64 = R4;
           _s6YR1::P64 = R3;
           _s6YR0::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c72S5; else goto c72S6;
       c72S6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c72S8; else goto c72S7;
       c72S8: // global
           HpAlloc = 32;
           goto c72S5;
       c72S5: // global
           R6 = _s6YR4::P64;
           R5 = _s6YR3::P64;
           R4 = _s6YR2::P64;
           R3 = _s6YR1::P64;
           R2 = _s6YR0::P64;
           R1 = Data.Foldable.$fFoldable:.:_$cfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72S7: // global
           I64[Hp - 24] = sat_s6YR8_info;
           P64[Hp - 8] = _s6YR1::P64;
           P64[Hp] = _s6YR2::P64;
           R2 = _s6YR0::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = _s6YR4::P64;
           P64[Sp - 8] = _s6YR3::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cfoldl_info" {
     Data.Foldable.$fFoldable:.:_$cfoldl_info:
         const Data.Foldable.$fFoldable:.:_$cfoldl_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const S6Z86_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.60798667 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cfoldl1_closure" {
     Data.Foldable.$fFoldable:.:_$cfoldl1_closure:
         const Data.Foldable.$fFoldable:.:_$cfoldl1_info;
         const 0;
 },
 sat_s6YRh_entry() //  [R1]
         { []
         }
     {offset
       c72SS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c72ST; else goto c72SU;
       c72ST: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72SU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c72SL_info;
           _s6YRb::P64 = P64[R1 + 16];
           _s6YRd::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s6YRb::P64;
           P64[Sp - 24] = _s6YRd::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u72T1; else goto c72SM;
       u72T1: // global
           call _c72SL(R1) args: 0, res: 0, upd: 0;
       c72SM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YRh_info" {
     sat_s6YRh_info:
         const sat_s6YRh_entry;
         const 3;
         const 15;
 },
 _c72SL() //  [R1]
         { []
         }
     {offset
       c72SL: // global
           _s6YRd::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c72SP; else goto c72SQ;
       c72SP: // global
           R1 = _s6YRd::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c72SQ: // global
           R3 = _s6YRd::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c72SL_info" {
     block_c72SL_info:
         const _c72SL;
         const 2;
         const 30;
 },
 sat_s6YRi_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c72T3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c72T7; else goto c72T6;
       c72T7: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72T6: // global
           _s6YRb::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_s6YRh_info;
           P64[Hp - 32] = _s6YRb::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRi_info" {
     sat_s6YRi_info:
         const sat_s6YRi_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s6YRj_entry() //  [R1]
         { []
         }
     {offset
       c72T8: // global
           _s6YRj::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c72T9; else goto c72Ta;
       c72Ta: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c72Tc; else goto c72Tb;
       c72Tc: // global
           HpAlloc = 16;
           goto c72T9;
       c72T9: // global
           R1 = _s6YRj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72Tb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6YRj::P64;
           _s6YRa::P64 = P64[_s6YRj::P64 + 16];
           _s6YRb::P64 = P64[_s6YRj::P64 + 24];
           I64[Hp - 8] = sat_s6YRi_info;
           P64[Hp] = _s6YRb::P64;
           R2 = _s6YRa::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 24] = Hp - 6;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YRj_info" {
     sat_s6YRj_info:
         const sat_s6YRj_entry;
         const 2;
         const 4294967314;
         const S6Z86_srt+1560;
 },
 Data.Foldable.$fFoldable:.:_$cfoldl1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c72Tj: // global
           _s6YRc::P64 = R5;
           _s6YRb::P64 = R4;
           _s6YRa::P64 = R3;
           _s6YR9::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c72Tk; else goto c72Tl;
       c72Tl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c72Tn; else goto c72Tm;
       c72Tn: // global
           HpAlloc = 32;
           goto c72Tk;
       c72Tk: // global
           R5 = _s6YRc::P64;
           R4 = _s6YRb::P64;
           R3 = _s6YRa::P64;
           R2 = _s6YR9::P64;
           R1 = Data.Foldable.$fFoldable:.:_$cfoldl1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72Tm: // global
           I64[Hp - 24] = sat_s6YRj_info;
           P64[Hp - 8] = _s6YRa::P64;
           P64[Hp] = _s6YRb::P64;
           I64[Sp - 8] = block_c72Td_info;
           R2 = _s6YR9::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           P64[Sp - 40] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _s6YRc::P64;
           P64[Sp - 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cfoldl1_info" {
     Data.Foldable.$fFoldable:.:_$cfoldl1_info:
         const Data.Foldable.$fFoldable:.:_$cfoldl1_entry;
         const 0;
         const 360287974484606990;
         const 17179869208;
         const S6Z86_srt+1368;
 },
 _c72Td() //  [R1]
         { []
         }
     {offset
       c72Td: // global
           if (R1 & 7 == 1) goto c72Tg; else goto c72Th;
       c72Tg: // global
           R1 = Data.Foldable.$fFoldable:.:2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c72Th: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72Td_info" {
     block_c72Td_info:
         const _c72Td;
         const 0;
         const 4294967326;
         const S6Z86_srt+1368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.625387894 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cfoldr'_closure" {
     Data.Foldable.$fFoldable:.:_$cfoldr'_closure:
         const Data.Foldable.$fFoldable:.:_$cfoldr'_info;
         const 0;
 },
 sat_s6YRv_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c72Us: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72Ut; else goto c72Uu;
       c72Ut: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72Uu: // global
           I64[Sp - 16] = block_c72Uq_info;
           _s6YRs::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _s6YRs::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRv_info" {
     sat_s6YRv_info:
         const sat_s6YRv_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c72Uq() //  [R1]
         { []
         }
     {offset
       c72Uq: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c72Uq_info" {
     block_c72Uq_info:
         const _c72Uq;
         const 1;
         const 30;
 },
 sat_s6YRw_entry() //  [R1]
         { []
         }
     {offset
       c72Uw: // global
           _s6YRw::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c72Ux; else goto c72Uy;
       c72Uy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c72UA; else goto c72Uz;
       c72UA: // global
           HpAlloc = 16;
           goto c72Ux;
       c72Ux: // global
           R1 = _s6YRw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72Uz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6YRw::P64;
           _s6YRn::P64 = P64[_s6YRw::P64 + 16];
           _s6YRo::P64 = P64[_s6YRw::P64 + 24];
           I64[Hp - 8] = sat_s6YRv_info;
           P64[Hp] = _s6YRo::P64;
           R2 = _s6YRn::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 24] = Hp - 5;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s6YRw_info" {
     sat_s6YRw_info:
         const sat_s6YRw_entry;
         const 2;
         const 4294967314;
         const S6Z86_srt+1560;
 },
 Data.Foldable.$fFoldable:.:_$cfoldr'_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c72UB: // global
           _s6YRq::P64 = R6;
           _s6YRp::P64 = R5;
           _s6YRo::P64 = R4;
           _s6YRn::P64 = R3;
           _s6YRm::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c72UC; else goto c72UD;
       c72UD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c72UF; else goto c72UE;
       c72UF: // global
           HpAlloc = 32;
           goto c72UC;
       c72UC: // global
           R6 = _s6YRq::P64;
           R5 = _s6YRp::P64;
           R4 = _s6YRo::P64;
           R3 = _s6YRn::P64;
           R2 = _s6YRm::P64;
           R1 = Data.Foldable.$fFoldable:.:_$cfoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72UE: // global
           I64[Hp - 24] = sat_s6YRw_info;
           P64[Hp - 8] = _s6YRn::P64;
           P64[Hp] = _s6YRo::P64;
           R2 = _s6YRm::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Foldable.$fFoldable:*:7_closure;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _s6YRq::P64;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = _s6YRp::P64;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cfoldr'_info" {
     Data.Foldable.$fFoldable:.:_$cfoldr'_info:
         const Data.Foldable.$fFoldable:.:_$cfoldr'_entry;
         const 0;
         const 38654705678;
         const 21474836505;
         const S6Z86_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.637153395 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$cproduct_closure" {
     Data.Foldable.$fFoldable:.:_$cproduct_closure:
         const Data.Foldable.$fFoldable:.:_$cproduct_info;
         const 0;
 },
 $dMonoid_s6YRA_entry() //  [R1]
         { []
         }
     {offset
       c72Vg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c72Vh; else goto c72Vi;
       c72Vh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72Vi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_s6YRA_info" {
     $dMonoid_s6YRA_info:
         const $dMonoid_s6YRA_entry;
         const 1;
         const 4294967312;
         const S6Z86_srt+1592;
 },
 lvl1_s6YRB_entry() //  [R1]
         { []
         }
     {offset
       c72Vn: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c72Vo; else goto c72Vp;
       c72Vo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c72Vp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Foldable.$fFoldable:*:1_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_s6YRB_info" {
     lvl1_s6YRB_info:
         const lvl1_s6YRB_entry;
         const 2;
         const 18;
 },
 sat_s6YRD_entry() //  [R1, R2]
         { []
         }
     {offset
       c72Vv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c72Vw; else goto c72Vx;
       c72Vw: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c72Vx: // global
           _s6YRC::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _s6YRC::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRD_info" {
     sat_s6YRD_info:
         const sat_s6YRD_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Data.Foldable.$fFoldable:.:_$cproduct_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c72Vy: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c72VC; else goto c72VB;
       c72VC: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:.:_$cproduct_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72VB: // global
           I64[Hp - 80] = $dMonoid_s6YRA_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl1_s6YRB_info;
           P64[Hp - 40] = R3;
           _c72Vc::P64 = Hp - 80;
           P64[Hp - 32] = _c72Vc::P64;
           I64[Hp - 24] = sat_s6YRD_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _c72Vc::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$cproduct_info" {
     Data.Foldable.$fFoldable:.:_$cproduct_info:
         const Data.Foldable.$fFoldable:.:_$cproduct_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S6Z86_srt+1592;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.647970571 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_$ctoList_closure" {
     Data.Foldable.$fFoldable:.:_$ctoList_closure:
         const Data.Foldable.$fFoldable:.:_$ctoList_info;
 },
 sat_s6YRJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c72Wf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c72Wg; else goto c72Wh;
       c72Wg: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72Wh: // global
           _s6YRH::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = _s6YRH::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRJ_info" {
     sat_s6YRJ_info:
         const sat_s6YRJ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:.:_$ctoList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c72Wi: // global
           _s6YRG::P64 = R4;
           _s6YRF::P64 = R3;
           _s6YRE::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c72Wj; else goto c72Wk;
       c72Wk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c72Wm; else goto c72Wl;
       c72Wm: // global
           HpAlloc = 16;
           goto c72Wj;
       c72Wj: // global
           R4 = _s6YRG::P64;
           R3 = _s6YRF::P64;
           R2 = _s6YRE::P64;
           R1 = Data.Foldable.$fFoldable:.:_$ctoList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c72Wl: // global
           I64[Hp - 8] = sat_s6YRJ_info;
           P64[Hp] = _s6YRF::P64;
           R2 = _s6YRE::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           P64[Sp - 8] = _s6YRG::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_$ctoList_info" {
     Data.Foldable.$fFoldable:.:_$ctoList_info:
         const Data.Foldable.$fFoldable:.:_$ctoList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.661924289 UTC

[section ""data" . Data.Foldable.$fFoldable:.:_closure" {
     Data.Foldable.$fFoldable:.:_closure:
         const Data.Foldable.$fFoldable:.:_info;
         const 0;
 },
 sat_s6YS1_entry() //  [R1, R2]
         { []
         }
     {offset
       c72WN: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:.:_$cproduct_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YS1_info" {
     sat_s6YS1_info:
         const sat_s6YS1_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+1600;
 },
 sat_s6YS0_entry() //  [R1, R2]
         { []
         }
     {offset
       c72WV: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:.:_$csum_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YS0_info" {
     sat_s6YS0_info:
         const sat_s6YS0_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+1488;
 },
 sat_s6YRZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c72X3: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:.:_$cminimum_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRZ_info" {
     sat_s6YRZ_info:
         const sat_s6YRZ_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+1512;
 },
 sat_s6YRY_entry() //  [R1, R2]
         { []
         }
     {offset
       c72Xb: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:.:_$cmaximum_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRY_info" {
     sat_s6YRY_info:
         const sat_s6YRY_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+1528;
 },
 sat_s6YRX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c72Xj: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:.:_$celem_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRX_info" {
     sat_s6YRX_info:
         const sat_s6YRX_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6Z86_srt+1544;
 },
 sat_s6YRW_entry() //  [R1, R2]
         { []
         }
     {offset
       c72Xr: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:.:_$clength_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRW_info" {
     sat_s6YRW_info:
         const sat_s6YRW_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6YRV_entry() //  [R1, R2]
         { []
         }
     {offset
       c72Xz: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:.:1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRV_info" {
     sat_s6YRV_info:
         const sat_s6YRV_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S6Z86_srt+1472;
 },
 sat_s6YRU_entry() //  [R1, R2]
         { []
         }
     {offset
       c72XH: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Foldable.$fFoldable:.:_$ctoList_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRU_info" {
     sat_s6YRU_info:
         const sat_s6YRU_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s6YRT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c72XP: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:.:_$cfoldl1_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRT_info" {
     sat_s6YRT_info:
         const sat_s6YRT_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6Z86_srt+1576;
 },
 sat_s6YRS_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c72XX: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:.:_$cfoldr1_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRS_info" {
     sat_s6YRS_info:
         const sat_s6YRS_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S6Z86_srt+1552;
 },
 sat_s6YRR_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c72Y5: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:.:_$cfoldl'_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRR_info" {
     sat_s6YRR_info:
         const sat_s6YRR_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6YRQ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c72Yd: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:.:_$cfoldl_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRQ_info" {
     sat_s6YRQ_info:
         const sat_s6YRQ_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const S6Z86_srt+1568;
 },
 sat_s6YRP_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c72Yl: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:.:_$cfoldr'_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRP_info" {
     sat_s6YRP_info:
         const sat_s6YRP_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const S6Z86_srt+1584;
 },
 sat_s6YRO_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c72Yt: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:.:_$cfoldr_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRO_info" {
     sat_s6YRO_info:
         const sat_s6YRO_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6YRN_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c72YB: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Foldable.$fFoldable:.:_$cfoldMap_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRN_info" {
     sat_s6YRN_info:
         const sat_s6YRN_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_s6YRM_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c72YJ: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Foldable.$fFoldable:.:_$cfold_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YRM_info" {
     sat_s6YRM_info:
         const sat_s6YRM_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Foldable.$fFoldable:.:_entry() //  [R2, R3]
         { []
         }
     {offset
       c72YN: // global
           Hp = Hp + 520;
           if (Hp > HpLim) (likely: False) goto c72YR; else goto c72YQ;
       c72YR: // global
           HpAlloc = 520;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.$fFoldable:.:_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c72YQ: // global
           I64[Hp - 512] = sat_s6YS1_info;
           P64[Hp - 504] = R2;
           P64[Hp - 496] = R3;
           I64[Hp - 488] = sat_s6YS0_info;
           P64[Hp - 480] = R2;
           P64[Hp - 472] = R3;
           I64[Hp - 464] = sat_s6YRZ_info;
           P64[Hp - 456] = R2;
           P64[Hp - 448] = R3;
           I64[Hp - 440] = sat_s6YRY_info;
           P64[Hp - 432] = R2;
           P64[Hp - 424] = R3;
           I64[Hp - 416] = sat_s6YRX_info;
           P64[Hp - 408] = R2;
           P64[Hp - 400] = R3;
           I64[Hp - 392] = sat_s6YRW_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           I64[Hp - 368] = sat_s6YRV_info;
           P64[Hp - 360] = R2;
           P64[Hp - 352] = R3;
           I64[Hp - 344] = sat_s6YRU_info;
           P64[Hp - 336] = R2;
           P64[Hp - 328] = R3;
           I64[Hp - 320] = sat_s6YRT_info;
           P64[Hp - 312] = R2;
           P64[Hp - 304] = R3;
           I64[Hp - 296] = sat_s6YRS_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           I64[Hp - 272] = sat_s6YRR_info;
           P64[Hp - 264] = R2;
           P64[Hp - 256] = R3;
           I64[Hp - 248] = sat_s6YRQ_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           I64[Hp - 224] = sat_s6YRP_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           I64[Hp - 200] = sat_s6YRO_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_s6YRN_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_s6YRM_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = Hp - 150;
           P64[Hp - 112] = Hp - 173;
           P64[Hp - 104] = Hp - 197;
           P64[Hp - 96] = Hp - 221;
           P64[Hp - 88] = Hp - 245;
           P64[Hp - 80] = Hp - 269;
           P64[Hp - 72] = Hp - 294;
           P64[Hp - 64] = Hp - 318;
           P64[Hp - 56] = Hp - 343;
           P64[Hp - 48] = Hp - 367;
           P64[Hp - 40] = Hp - 391;
           P64[Hp - 32] = Hp - 414;
           P64[Hp - 24] = Hp - 439;
           P64[Hp - 16] = Hp - 463;
           P64[Hp - 8] = Hp - 487;
           P64[Hp] = Hp - 511;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.$fFoldable:.:_info" {
     Data.Foldable.$fFoldable:.:_info:
         const Data.Foldable.$fFoldable:.:_entry;
         const 0;
         const 974875971813390;
         const 8589934607;
         const S6Z86_srt+1472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.693852834 UTC

[section ""data" . Data.Foldable.maximumBy_closure" {
     Data.Foldable.maximumBy_closure:
         const Data.Foldable.maximumBy_info;
 },
 sat_s6YS7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c730v: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c730w; else goto c730x;
       c730w: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c730x: // global
           I64[Sp - 24] = block_c730p_info;
           _s6YS5::P64 = R3;
           R3 = R3;
           _s6YS4::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 6];
           P64[Sp - 16] = _s6YS4::P64;
           P64[Sp - 8] = _s6YS5::P64;
           Sp = Sp - 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YS7_info" {
     sat_s6YS7_info:
         const sat_s6YS7_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c730p() //  [R1]
         { []
         }
     {offset
       c730p: // global
           if (R1 & 7 == 3) goto c730t; else goto c730s;
       c730t: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c730s: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c730p_info" {
     block_c730p_info:
         const _c730p;
         const 2;
         const 30;
 },
 Data.Foldable.maximumBy_entry() //  [R2, R3]
         { []
         }
     {offset
       c730E: // global
           _s6YS3::P64 = R3;
           _s6YS2::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c730F; else goto c730G;
       c730G: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c730I; else goto c730H;
       c730I: // global
           HpAlloc = 16;
           goto c730F;
       c730F: // global
           R3 = _s6YS3::P64;
           R2 = _s6YS2::P64;
           R1 = Data.Foldable.maximumBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c730H: // global
           I64[Hp - 8] = sat_s6YS7_info;
           P64[Hp] = _s6YS3::P64;
           R2 = _s6YS2::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 6;
           Sp = Sp - 16;
           call Data.Foldable.foldl1_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.maximumBy_info" {
     Data.Foldable.maximumBy_info:
         const Data.Foldable.maximumBy_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.704025805 UTC

[section ""data" . Data.Foldable.minimumBy_closure" {
     Data.Foldable.minimumBy_closure:
         const Data.Foldable.minimumBy_info;
 },
 sat_s6YSd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c731g: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c731h; else goto c731i;
       c731h: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c731i: // global
           I64[Sp - 24] = block_c731a_info;
           _s6YSb::P64 = R3;
           R3 = R3;
           _s6YSa::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 6];
           P64[Sp - 16] = _s6YSa::P64;
           P64[Sp - 8] = _s6YSb::P64;
           Sp = Sp - 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YSd_info" {
     sat_s6YSd_info:
         const sat_s6YSd_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c731a() //  [R1]
         { []
         }
     {offset
       c731a: // global
           if (R1 & 7 == 3) goto c731e; else goto c731d;
       c731e: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c731d: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c731a_info" {
     block_c731a_info:
         const _c731a;
         const 2;
         const 30;
 },
 Data.Foldable.minimumBy_entry() //  [R2, R3]
         { []
         }
     {offset
       c731p: // global
           _s6YS9::P64 = R3;
           _s6YS8::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c731q; else goto c731r;
       c731r: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c731t; else goto c731s;
       c731t: // global
           HpAlloc = 16;
           goto c731q;
       c731q: // global
           R3 = _s6YS9::P64;
           R2 = _s6YS8::P64;
           R1 = Data.Foldable.minimumBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c731s: // global
           I64[Hp - 8] = sat_s6YSd_info;
           P64[Hp] = _s6YS9::P64;
           R2 = _s6YS8::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 6;
           Sp = Sp - 16;
           call Data.Foldable.foldl1_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.minimumBy_info" {
     Data.Foldable.minimumBy_info:
         const Data.Foldable.minimumBy_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.712890695 UTC

[section ""data" . Data.Foldable.notElem_closure" {
     Data.Foldable.notElem_closure:
         const Data.Foldable.notElem_info;
 },
 g_s6YSh_entry() //  [R1]
         { []
         }
     {offset
       c731U: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c731V; else goto c731W;
       c731V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c731W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Foldable.elem_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s6YSh_info" {
     g_s6YSh_info:
         const g_s6YSh_entry;
         const 3;
         const 15;
 },
 sat_s6YSk_entry() //  [R1, R2]
         { []
         }
     {offset
       c7328: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7329; else goto c732a;
       c7329: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c732a: // global
           I64[Sp - 8] = block_c7322_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YSk_info" {
     sat_s6YSk_info:
         const sat_s6YSk_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c7322() //  [R1]
         { []
         }
     {offset
       c7322: // global
           if (R1 & 7 == 1) goto c7325; else goto c7326;
       c7325: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7326: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7322_info" {
     block_c7322_info:
         const _c7322;
         const 0;
         const 30;
 },
 Data.Foldable.notElem_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c732h: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c732l; else goto c732k;
       c732l: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.notElem_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c732k: // global
           I64[Hp - 48] = g_s6YSh_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s6YSk_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.notElem_info" {
     Data.Foldable.notElem_info:
         const Data.Foldable.notElem_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.72451964 UTC

[section ""data" . Data.Foldable.find_closure" {
     Data.Foldable.find_closure:
         const Data.Foldable.find_info;
         const 0;
 },
 sat_s6YSq_entry() //  [R1, R2]
         { []
         }
     {offset
       c7339: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c733a; else goto c733b;
       c733a: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c733b: // global
           I64[Sp - 16] = block_c7333_info;
           _s6YSo::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s6YSo::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YSq_info" {
     sat_s6YSq_info:
         const sat_s6YSq_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c7333() //  [R1]
         { []
         }
     {offset
       c7333: // global
           if (R1 & 7 == 1) goto c7336; else goto c7337;
       c7336: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7337: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c733k; else goto c733j;
       c733k: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c733j: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7333_info" {
     block_c7333_info:
         const _c7333;
         const 1;
         const 30;
 },
 g_s6YSn_entry() //  [R1]
         { []
         }
     {offset
       c733l: // global
           _s6YSn::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c733m; else goto c733n;
       c733n: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c733p; else goto c733o;
       c733p: // global
           HpAlloc = 16;
           goto c733m;
       c733m: // global
           R1 = _s6YSn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c733o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s6YSn::P64;
           _s6YSl::P64 = P64[_s6YSn::P64 + 16];
           _s6YSm::P64 = P64[_s6YSn::P64 + 24];
           I64[Hp - 8] = sat_s6YSq_info;
           P64[Hp] = _s6YSm::P64;
           R2 = _s6YSl::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Monoid.$fMonoidFirst_closure;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s6YSn_info" {
     g_s6YSn_info:
         const g_s6YSn_entry;
         const 2;
         const 4294967314;
         const S6Z86_srt+1616;
 },
 sat_s6YSs_entry() //  [R1, R2]
         { []
         }
     {offset
       c733v: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s6YSs_info" {
     sat_s6YSs_info:
         const sat_s6YSs_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Foldable.find_entry() //  [R2, R3]
         { []
         }
     {offset
       c733y: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c733C; else goto c733B;
       c733C: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Foldable.find_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c733B: // global
           I64[Hp - 40] = g_s6YSn_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s6YSs_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.find_info" {
     Data.Foldable.find_info:
         const Data.Foldable.find_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S6Z86_srt+1616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.736026385 UTC

[section ""cstring" . Data.Foldable.$trModule4_bytes" {
     Data.Foldable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.738668975 UTC

[section ""data" . Data.Foldable.$trModule3_closure" {
     Data.Foldable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Foldable.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.74048426 UTC

[section ""cstring" . Data.Foldable.$trModule2_bytes" {
     Data.Foldable.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,111,108,100,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.742235768 UTC

[section ""data" . Data.Foldable.$trModule1_closure" {
     Data.Foldable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Foldable.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.743930779 UTC

[section ""data" . Data.Foldable.$trModule_closure" {
     Data.Foldable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Foldable.$trModule3_closure+1;
         const Data.Foldable.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.745840129 UTC

[section ""data" . $krep_r6OSX_closure" {
     $krep_r6OSX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.747652783 UTC

[section ""data" . Data.Foldable.$tcFoldable1_closure" {
     Data.Foldable.$tcFoldable1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*Arr*_closure;
         const $krep_r6OSX_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.749748779 UTC

[section ""cstring" . Data.Foldable.$tcFoldable3_bytes" {
     Data.Foldable.$tcFoldable3_bytes:
         I8[] [70,111,108,100,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.751401678 UTC

[section ""data" . Data.Foldable.$tcFoldable2_closure" {
     Data.Foldable.$tcFoldable2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Foldable.$tcFoldable3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.753384158 UTC

[section ""data" . Data.Foldable.$tcFoldable_closure" {
     Data.Foldable.$tcFoldable_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Foldable.$trModule_closure+1;
         const Data.Foldable.$tcFoldable2_closure+1;
         const Data.Foldable.$tcFoldable1_closure+4;
         const 1610127274683713266;
         const 5928938033451775936;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.756815567 UTC

[section ""data" . Data.Foldable.C:Foldable_closure" {
     Data.Foldable.C:Foldable_closure:
         const Data.Foldable.C:Foldable_info;
 },
 Data.Foldable.C:Foldable_slow() //  [R1]
         { []
         }
     {offset
       c734n: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Foldable.C:Foldable_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 96, res: 0, upd: 8;
     }
 },
 Data.Foldable.C:Foldable_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c734s: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c734w; else goto c734v;
       c734w: // global
           HpAlloc = 136;
           R1 = Data.Foldable.C:Foldable_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       c734v: // global
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           P64[Hp - 80] = P64[Sp];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 64];
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 80];
           R1 = Hp - 127;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.C:Foldable_info" {
     Data.Foldable.C:Foldable_info:
         const Data.Foldable.C:Foldable_entry;
         const 0;
         const 14;
         const 68719476736;
         const 0;
         const 16;
         const Data.Foldable.C:Foldable_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.762182822 UTC

[section ""cstring" . i734R_str" {
     i734R_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,111,108,100,97,98,108,101,46,67,58,70,111,108,100,97,98,108,101]
 },
 Data.Foldable.C:Foldable_con_entry() //  [R1]
         { []
         }
     {offset
       c734Q: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Foldable.C:Foldable_con_info" {
     Data.Foldable.C:Foldable_con_info:
         const Data.Foldable.C:Foldable_con_entry;
         const 16;
         const 1;
         const i734R_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:19.76755295 UTC

[section ""relreadonly" . S6Z86_srt" {
     S6Z86_srt:
         const sat_s6Ykf_closure;
         const Data.Foldable.$fFoldableProxy_$cproduct_closure;
         const Data.Foldable.$fFoldableProxy1_closure;
         const Data.Foldable.$fFoldableProxy_$csum_closure;
         const Data.Foldable.$fFoldableProxy2_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Foldable.$fFoldableProxy3_closure;
         const Data.Foldable.$fFoldableProxy5_closure;
         const Data.Foldable.$fFoldableU1_$cproduct_closure;
         const Data.Foldable.$fFoldableU1_$csum_closure;
         const Data.Foldable.$fFoldableU2_closure;
         const Data.Foldable.$fFoldableU4_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const $dmproduct1_r6OSR_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const $dmsum1_r6OSS_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
         const poly_d_r6OST_closure;
         const Data.Foldable.$dmminimum_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const poly_d1_r6OSU_closure;
         const Data.Foldable.$dmmaximum_closure;
         const Data.Foldable.$dmfoldl1_closure;
         const Data.Foldable.$fFoldable:*:6_closure;
         const Data.Foldable.$dmfoldr1_closure;
         const Data.Foldable.$fFoldable:*:8_closure;
         const Data.Semigroup.Internal.$fMonoidEndo_closure;
         const Data.Foldable.$dmfoldl_closure;
         const Data.Foldable.$fFoldable:*:7_closure;
         const Data.Foldable.$fFoldableK4_closure;
         const Data.Foldable.$fFoldableK2_closure;
         const Data.Foldable.$dmfoldr_closure;
         const Data.Semigroup.Internal.$fMonoidAll_closure;
         const Data.Foldable.and1_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Foldable.or1_closure;
         const Data.Foldable.any1_closure;
         const $dmelem1_r6OSW_closure;
         const Data.Semigroup.Internal.$fMonoidSum2_closure;
         const Data.Foldable.$fFoldableURec8_closure;
         const Data.Foldable.$fFoldable:*:2_closure;
         const Data.Foldable.$fFoldableURec9_closure;
         const Data.Foldable.$fFoldable:*:3_closure;
         const Data.Foldable.$fFoldableURec10_closure;
         const Data.Semigroup.Internal.$fMonoidProduct2_closure;
         const Data.Foldable.$fFoldableURec7_closure;
         const Data.Foldable.$fFoldableURec13_closure;
         const Data.Foldable.$fFoldableURec14_closure;
         const Data.Foldable.$fFoldableURec15_closure;
         const Data.Foldable.$fFoldableURec12_closure;
         const Data.Foldable.$fFoldableURec18_closure;
         const Data.Foldable.$fFoldableURec19_closure;
         const Data.Foldable.$fFoldableURec20_closure;
         const Data.Foldable.$fFoldableURec17_closure;
         const Data.Foldable.$fFoldableURec23_closure;
         const Data.Foldable.$fFoldableURec24_closure;
         const Data.Foldable.$fFoldableURec25_closure;
         const Data.Foldable.$fFoldable:*:6_closure;
         const Data.Foldable.$fFoldableURec22_closure;
         const Data.Foldable.$fFoldableURec28_closure;
         const Data.Foldable.$fFoldableURec29_closure;
         const Data.Foldable.$fFoldableURec30_closure;
         const Data.Foldable.$fFoldable:*:8_closure;
         const Data.Foldable.$fFoldableURec27_closure;
         const Data.Foldable.$fFoldableURec33_closure;
         const Data.Foldable.$fFoldableURec34_closure;
         const Data.Foldable.$fFoldableURec35_closure;
         const Data.Foldable.$fFoldableURec32_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Foldable.$fFoldable:*:_$celem_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const Data.Foldable.$fFoldable:*:_$csum_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
         const Data.Foldable.$fFoldable:*:2_closure;
         const Data.Foldable.$fFoldable:*:_$cminimum_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const Data.Foldable.$fFoldable:*:3_closure;
         const Data.Foldable.$fFoldable:*:_$cmaximum_closure;
         const Data.Foldable.$w$cfoldr1_closure;
         const Data.Foldable.$fFoldable:*:_$cfoldr1_closure;
         const Data.Foldable.$fFoldable:*:7_closure;
         const Data.Foldable.$w$cfoldl_closure;
         const Data.Foldable.$fFoldable:*:_$cfoldl_closure;
         const Data.Foldable.$w$cfoldl1_closure;
         const Data.Foldable.$fFoldable:*:_$cfoldl1_closure;
         const Data.Foldable.$w$cfoldr'_closure;
         const Data.Foldable.$fFoldable:*:_$cfoldr'_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const Data.Foldable.$fFoldable:*:_$cproduct_closure;
         const Data.Foldable.$fFoldable:*:_closure;
         const Data.Foldable.$fFoldable:+:_$celem_closure;
         const Data.Foldable.$fFoldable:+:2_closure;
         const Data.Foldable.$fFoldable:+:_$cminimum_closure;
         const Data.Foldable.$fFoldable:+:_$cmaximum_closure;
         const Data.Foldable.$fFoldable:+:_$cfoldr1_closure;
         const Data.Foldable.$fFoldable:*:8_closure;
         const Data.Foldable.$fFoldable:+:_$cfoldl_closure;
         const Data.Foldable.$fFoldable:+:_$cfoldl1_closure;
         const Data.Foldable.$fFoldable:*:6_closure;
         const Data.Foldable.$fFoldable:+:_$cfoldr'_closure;
         const Data.Foldable.$fFoldable:+:1_closure;
         const Data.Foldable.$fFoldable:+:_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Foldable.$fFoldableM1_$celem_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const Data.Foldable.$fFoldableM1_$csum_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
         const Data.Foldable.$fFoldable:*:2_closure;
         const Data.Foldable.$fFoldableM1_$cminimum_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const Data.Foldable.$fFoldable:*:3_closure;
         const Data.Foldable.$fFoldableM1_$cmaximum_closure;
         const Data.Foldable.$fFoldableM1_$cfoldr1_closure;
         const Data.Foldable.$fFoldableM1_$cfoldl_closure;
         const Data.Foldable.$fFoldable:*:7_closure;
         const Data.Semigroup.Internal.$fMonoidEndo_closure;
         const Data.Foldable.$fFoldableM1_$cfoldl1_closure;
         const Data.Foldable.$fFoldableM3_closure;
         const Data.Foldable.$fFoldableM1_$cfoldr'_closure;
         const Data.Foldable.$fFoldableM4_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const Data.Foldable.$fFoldableM1_$cproduct_closure;
         const Data.Foldable.$fFoldableM1_closure;
         const Data.Semigroup.Internal.$fMonoidSum2_closure;
         const Data.Foldable.$fFoldableK2_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Foldable.$fFoldableK6_closure;
         const Data.Foldable.$fFoldableK8_closure;
         const Data.Semigroup.Internal.$fMonoidProduct2_closure;
         const Data.Foldable.$fFoldableRec1_$celem_closure;
         const Data.Foldable.$fFoldableRec1_$csum_closure;
         const Data.Foldable.$fFoldableRec1_$cminimum_closure;
         const Data.Foldable.$fFoldableRec1_$cmaximum_closure;
         const Data.Foldable.$fFoldable:.:3_closure;
         const Data.Foldable.$fFoldableRec1_$cfoldr1_closure;
         const Data.Foldable.$fFoldableRec1_$cfoldl_closure;
         const Data.Foldable.$fFoldable:.:2_closure;
         const Data.Foldable.$fFoldableRec1_$cfoldl1_closure;
         const Data.Foldable.$fFoldableRec1_$cfoldr'_closure;
         const Data.Foldable.$fFoldableRec1_$cproduct_closure;
         const Data.Foldable.$fFoldableRec1_closure;
         const Data.Semigroup.Internal.$fMonoidProduct1_closure;
         const Data.Foldable.$fFoldableArray1_closure;
         const Data.Foldable.$w$cmaximum_closure;
         const Data.Foldable.$fFoldable:*:3_closure;
         const Data.Foldable.$fFoldableArray_$cmaximum_closure;
         const Data.Foldable.$w$cminimum_closure;
         const Data.Foldable.$fFoldable:*:2_closure;
         const Data.Foldable.$fFoldableArray_$cminimum_closure;
         const Data.Semigroup.Internal.$fMonoidSum1_closure;
         const Data.Foldable.$fFoldableArray2_closure;
         const Data.Foldable.$fFoldableEither2_closure;
         const Data.Foldable.$fFoldableEither3_closure;
         const Data.Foldable.$fFoldableEither4_closure;
         const Data.Foldable.$fFoldableEither_$cfoldr1_closure;
         const Data.Foldable.$fFoldableEither_$cfoldl1_closure;
         const Data.Foldable.$fFoldableEither1_closure;
         const Data.Foldable.$fFoldableNonEmpty_$csum_closure;
         const Data.Foldable.$fFoldableNonEmpty_$cproduct_closure;
         const Data.Foldable.$fFoldableMaybe2_closure;
         const Data.Semigroup.Internal.$fMonoidSum2_closure;
         const Data.Foldable.$fFoldableMaybe3_closure;
         const Data.Foldable.$fFoldableMaybe4_closure;
         const Data.Foldable.$fFoldableMaybe_$cfoldl1_closure;
         const Data.Foldable.$fFoldableMaybe_$cfoldr1_closure;
         const Data.Foldable.$fFoldableMaybe1_closure;
         const Data.Semigroup.Internal.$fMonoidProduct2_closure;
         const Data.Foldable.$fFoldableLast2_closure;
         const Data.Foldable.$fFoldableLast3_closure;
         const Data.Foldable.$fFoldableLast4_closure;
         const Data.Foldable.$fFoldableLast_$cfoldl1_closure;
         const Data.Foldable.$fFoldable:.:2_closure;
         const Data.Foldable.$fFoldableLast_$cfoldr1_closure;
         const Data.Foldable.$fFoldable:.:3_closure;
         const Data.Foldable.$fFoldableLast1_closure;
         const Data.Foldable.$fFoldableFirst2_closure;
         const Data.Foldable.$fFoldableFirst3_closure;
         const Data.Foldable.$fFoldableFirst4_closure;
         const Data.Foldable.$fFoldable:*:3_closure;
         const Data.Foldable.$fFoldableFirst_$cfoldl1_closure;
         const Data.Foldable.$fFoldableFirst_$cfoldr1_closure;
         const Data.Foldable.$fFoldableFirst1_closure;
         const Data.Foldable.all1_closure;
         const Data.Semigroup.Internal.$fMonoidAll_closure;
         const Data.Foldable.$fFoldable:.:1_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const Data.Foldable.$fFoldable:.:_$csum_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
         const Data.Foldable.$fFoldable:*:2_closure;
         const Data.Foldable.$fFoldable:.:_$cminimum_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const Data.Foldable.$fFoldable:.:_$cmaximum_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Foldable.$fFoldable:.:_$celem_closure;
         const Data.Foldable.$fFoldable:.:_$cfoldr1_closure;
         const Data.Foldable.$fFoldable:*:7_closure;
         const Data.Foldable.$fFoldable:.:_$cfoldl_closure;
         const Data.Foldable.$fFoldable:.:_$cfoldl1_closure;
         const Data.Foldable.$fFoldable:.:_$cfoldr'_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const Data.Foldable.$fFoldable:.:_$cproduct_closure;
         const Data.Foldable.$fFoldable:.:_closure;
         const Data.Monoid.$fMonoidFirst_closure;
         const Data.Foldable.find_closure;
 }]

