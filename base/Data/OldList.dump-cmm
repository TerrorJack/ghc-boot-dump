
==================== Output Cmm ====================
2018-03-16 16:00:18.60901788 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:18.610254153 UTC

[section ""data" . Data.OldList.$WSnocBuilder_closure" {
     Data.OldList.$WSnocBuilder_closure:
         const Data.OldList.$WSnocBuilder_info;
 },
 Data.OldList.$WSnocBuilder_entry() //  [R2, R3, R4]
         { info_tbl: [(c5ld9,
                       label: Data.OldList.$WSnocBuilder_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ld9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5ldd; else goto c5lde;
       c5ldd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$WSnocBuilder_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lde: // global
           I64[Sp - 24] = block_c5ld6_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5ldi; else goto c5ld7;
       u5ldi: // global
           call _c5ld6(R1) args: 0, res: 0, upd: 0;
       c5ld7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ld6() //  [R1]
         { info_tbl: [(c5ld6,
                       label: block_c5ld6_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ld6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5ldh; else goto c5ldg;
       c5ldh: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ldg: // global
           _s5kSH::I64 = I64[R1 + 7];
           I64[Hp - 24] = Data.OldList.SnocBuilder_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = _s5kSH::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.612663111 UTC

[section ""data" . Data.OldList.dropWhileEnd_closure" {
     Data.OldList.dropWhileEnd_closure:
         const Data.OldList.dropWhileEnd_info;
 },
 go_s5kSK_entry() //  [R1, R2]
         { info_tbl: [(c5ldz,
                       label: go_s5kSK_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ldz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5ldA; else goto c5ldB;
       c5ldA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5ldB: // global
           I64[Sp - 24] = block_c5lds_info;
           _s5kSK::P64 = R1;
           _s5kSI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s5kSI::P64;
           P64[Sp - 8] = _s5kSK::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5leg; else goto c5ldt;
       u5leg: // global
           call _c5lds(R1) args: 0, res: 0, upd: 0;
       c5ldt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lds() //  [R1]
         { info_tbl: [(c5lds,
                       label: block_c5lds_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lds: // global
           if (R1 & 7 == 1) goto u5led; else goto c5ldx;
       u5led: // global
           Sp = Sp + 24;
           call _c5le3() args: 0, res: 0, upd: 0;
       c5ldx: // global
           I64[Sp - 8] = block_c5ldH_info;
           _s5kSN::P64 = P64[R1 + 6];
           R2 = _s5kSN::P64;
           _s5kSO::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s5kSO::P64;
           P64[Sp + 8] = _s5kSN::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ldH() //  [R1]
         { info_tbl: [(c5ldH,
                       label: block_c5ldH_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ldH: // global
           _s5kSK::P64 = P64[Sp + 24];
           _s5kSO::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5ldP; else goto c5ldX;
       c5ldP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5ldS; else goto c5ldR;
       c5ldS: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ldR: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s5kSK::P64;
           P64[Hp - 24] = _s5kSO::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5ldX: // global
           I64[Sp + 8] = block_c5ldV_info;
           R2 = _s5kSO::P64;
           R1 = _s5kSK::P64;
           Sp = Sp + 8;
           call go_s5kSK_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ldV() //  [R1]
         { info_tbl: [(c5ldV,
                       label: block_c5ldV_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ldV: // global
           if (R1 & 7 == 1) goto u5lee; else goto c5le7;
       u5lee: // global
           Sp = Sp + 24;
           call _c5le3() args: 0, res: 0, upd: 0;
       c5le7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lea; else goto c5le9;
       c5lea: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5le9: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5le3() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5le3: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.dropWhileEnd_entry() //  [R2, R3]
         { info_tbl: [(c5lei,
                       label: Data.OldList.dropWhileEnd_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lei: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5lem; else goto c5lel;
       c5lem: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.dropWhileEnd_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lel: // global
           I64[Hp - 8] = go_s5kSK_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go_s5kSK_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.616159382 UTC

[section ""data" . Data.OldList.stripPrefix_closure" {
     Data.OldList.stripPrefix_closure:
         const Data.OldList.stripPrefix_info;
 },
 Data.OldList.stripPrefix_entry() //  [R2, R3, R4]
         { info_tbl: [(c5ley,
                       label: Data.OldList.stripPrefix_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ley: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c5lez; else goto u5lf9;
       c5lez: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.stripPrefix_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5lf9: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5leo() args: 0, res: 0, upd: 0;
     }
 },
 _c5leo() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5leo: // global
           I64[Sp - 8] = block_c5ler_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lfd; else goto c5les;
       u5lfd: // global
           call _c5ler(R1) args: 0, res: 0, upd: 0;
       c5les: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ler() //  [R1]
         { info_tbl: [(c5ler,
                       label: block_c5ler_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ler: // global
           _s5kSW::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5lev; else goto c5lew;
       c5lev: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5leG; else goto c5leF;
       c5leG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5leF: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s5kSW::P64;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5lew: // global
           I64[Sp] = block_c5leJ_info;
           _s5kSY::P64 = P64[R1 + 6];
           _s5kSZ::P64 = P64[R1 + 14];
           R1 = _s5kSW::P64;
           P64[Sp + 16] = _s5kSZ::P64;
           P64[Sp + 24] = _s5kSY::P64;
           if (R1 & 7 != 0) goto u5lfe; else goto c5leL;
       u5lfe: // global
           call _c5leJ(R1) args: 0, res: 0, upd: 0;
       c5leL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5leJ() //  [R1]
         { info_tbl: [(c5leJ,
                       label: block_c5leJ_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5leJ: // global
           if (R1 & 7 == 1) goto u5lfa; else goto c5leW;
       u5lfa: // global
           Sp = Sp + 32;
           call _c5lf2() args: 0, res: 0, upd: 0;
       c5leW: // global
           I64[Sp] = block_c5leU_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5leU() //  [R1]
         { info_tbl: [(c5leU,
                       label: block_c5leU_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5leU: // global
           if (R1 & 7 == 1) goto u5lfb; else goto c5lf6;
       u5lfb: // global
           Sp = Sp + 32;
           call _c5lf2() args: 0, res: 0, upd: 0;
       c5lf6: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 24];
           Sp = Sp + 8;
           call _c5leo() args: 0, res: 0, upd: 0;
     }
 },
 _c5lf2() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lf2: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.619191251 UTC

[section ""data" . Data.OldList.find_closure" {
     Data.OldList.find_closure:
         const Data.OldList.find_info;
 },
 Data.OldList.find_entry() //  [R2, R3]
         { info_tbl: [(c5lfp,
                       label: Data.OldList.find_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lfp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lfq; else goto c5lfr;
       c5lfq: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.find_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lfr: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c5lft() args: 0, res: 0, upd: 0;
     }
 },
 _c5lft() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lft: // global
           I64[Sp - 8] = block_c5lfv_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lg1; else goto c5lfx;
       u5lg1: // global
           call _c5lfv(R1) args: 0, res: 0, upd: 0;
       c5lfx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lfv() //  [R1]
         { info_tbl: [(c5lfv,
                       label: block_c5lfv_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lfv: // global
           if (R1 & 7 == 1) goto c5lfD; else goto c5lfI;
       c5lfD: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5lfI: // global
           I64[Sp - 8] = block_c5lfG_info;
           _s5kT9::P64 = P64[R1 + 6];
           R2 = _s5kT9::P64;
           _s5kTa::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s5kTa::P64;
           P64[Sp + 16] = _s5kT9::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lfG() //  [R1]
         { info_tbl: [(c5lfG,
                       label: block_c5lfG_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lfG: // global
           if (R1 & 7 == 1) goto c5lfO; else goto c5lfS;
       c5lfO: // global
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c5lft() args: 0, res: 0, upd: 0;
       c5lfS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5lfV; else goto c5lfU;
       c5lfV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lfU: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.622222668 UTC

[section ""data" . Data.OldList.elemIndex_closure" {
     Data.OldList.elemIndex_closure:
         const Data.OldList.elemIndex_info;
 },
 p_s5kTe_entry() //  [R1]
         { info_tbl: [(c5lgb,
                       label: p_s5kTe_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lgb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lgc; else goto c5lgd;
       c5lgc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lgd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5kTp_entry() //  [R1, R2]
         { info_tbl: [(c5lgl,
                       label: sat_s5kTp_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lgl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lgm; else goto c5lgn;
       c5lgm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5lgn: // global
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = R2;
           I64[Sp - 8] = 0;
           Sp = Sp - 24;
           call _c5lgo() args: 0, res: 0, upd: 0;
     }
 },
 _c5lgo() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lgo: // global
           I64[Sp - 8] = block_c5lgr_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lgZ; else goto c5lgt;
       u5lgZ: // global
           call _c5lgr(R1) args: 0, res: 0, upd: 0;
       c5lgt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lgr() //  [R1]
         { info_tbl: [(c5lgr,
                       label: block_c5lgr_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lgr: // global
           if (R1 & 7 == 1) goto c5lgz; else goto c5lgE;
       c5lgz: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5lgE: // global
           I64[Sp] = block_c5lgC_info;
           R2 = P64[R1 + 6];
           _s5kTl::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 16] = _s5kTl::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lgC() //  [R1]
         { info_tbl: [(c5lgC,
                       label: block_c5lgC_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lgC: // global
           _s5kTi::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto c5lgK; else goto c5lgP;
       c5lgK: // global
           P64[Sp + 16] = P64[Sp + 16];
           I64[Sp + 24] = _s5kTi::I64 + 1;
           Sp = Sp + 8;
           call _c5lgo() args: 0, res: 0, upd: 0;
       c5lgP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5lgS; else goto c5lgR;
       c5lgS: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lgR: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s5kTi::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.elemIndex_entry() //  [R2, R3]
         { info_tbl: [(c5lh1,
                       label: Data.OldList.elemIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lh1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5lh5; else goto c5lh4;
       c5lh5: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.elemIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lh4: // global
           I64[Hp - 40] = p_s5kTe_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s5kTp_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.6254638 UTC

[section ""data" . Data.OldList.findIndex_closure" {
     Data.OldList.findIndex_closure:
         const Data.OldList.findIndex_info;
 },
 Data.OldList.findIndex_entry() //  [R2, R3]
         { info_tbl: [(c5lhc,
                       label: Data.OldList.findIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lhc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lhd; else goto c5lhe;
       c5lhd: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.findIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lhe: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = 0;
           Sp = Sp - 24;
           call _c5lhf() args: 0, res: 0, upd: 0;
     }
 },
 _c5lhf() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lhf: // global
           I64[Sp - 8] = block_c5lhi_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lhQ; else goto c5lhk;
       u5lhQ: // global
           call _c5lhi(R1) args: 0, res: 0, upd: 0;
       c5lhk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lhi() //  [R1]
         { info_tbl: [(c5lhi,
                       label: block_c5lhi_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lhi: // global
           if (R1 & 7 == 1) goto c5lhq; else goto c5lhv;
       c5lhq: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5lhv: // global
           I64[Sp] = block_c5lht_info;
           R2 = P64[R1 + 6];
           _s5kTx::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 16] = _s5kTx::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lht() //  [R1]
         { info_tbl: [(c5lht,
                       label: block_c5lht_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lht: // global
           _s5kTu::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto c5lhB; else goto c5lhG;
       c5lhB: // global
           P64[Sp + 16] = P64[Sp + 16];
           I64[Sp + 24] = _s5kTu::I64 + 1;
           Sp = Sp + 8;
           call _c5lhf() args: 0, res: 0, upd: 0;
       c5lhG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5lhJ; else goto c5lhI;
       c5lhJ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lhI: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s5kTu::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.628499895 UTC

[section ""data" . Data.OldList.findIndices_closure" {
     Data.OldList.findIndices_closure:
         const Data.OldList.findIndices_info;
 },
 sat_s5kTN_entry() //  [R1]
         { info_tbl: [(c5lii,
                       label: sat_s5kTN_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lii: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lij; else goto c5lik;
       c5lij: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lik: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 32] + 1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s5kTD_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 go_s5kTD_entry() //  [R1, R2, R3]
         { info_tbl: [(c5lip,
                       label: go_s5kTD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 14} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lip: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5liq; else goto u5liH;
       c5liq: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5liH: // global
           P64[Sp - 24] = R1;
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           call _c5lhY() args: 0, res: 0, upd: 0;
     }
 },
 _c5lhY() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lhY: // global
           _s5kTB::P64 = P64[P64[Sp] + 6];
           I64[Sp - 8] = block_c5li1_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5kTB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5liJ; else goto c5li2;
       u5liJ: // global
           call _c5li1(R1) args: 0, res: 0, upd: 0;
       c5li2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5li1() //  [R1]
         { info_tbl: [(c5li1,
                       label: block_c5li1_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5li1: // global
           if (R1 & 7 == 1) goto c5lim; else goto c5lin;
       c5lim: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5lin: // global
           I64[Sp] = block_c5li7_info;
           R2 = P64[R1 + 6];
           _s5kTI::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s5kTI::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5li7() //  [R1]
         { info_tbl: [(c5li7,
                       label: block_c5li7_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5li7: // global
           _s5kTF::I64 = I64[Sp + 24];
           _s5kTI::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5liy; else goto c5liB;
       c5liy: // global
           P64[Sp + 16] = _s5kTI::P64;
           I64[Sp + 24] = _s5kTF::I64 + 1;
           Sp = Sp + 8;
           call _c5lhY() args: 0, res: 0, upd: 0;
       c5liB: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5liE; else goto c5liD;
       c5liE: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5liD: // global
           I64[Hp - 72] = sat_s5kTN_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = _s5kTI::P64;
           I64[Hp - 40] = _s5kTF::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s5kTF::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.findIndices_entry() //  [R2, R3]
         { info_tbl: [(c5liM,
                       label: Data.OldList.findIndices_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5liM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5liQ; else goto c5liP;
       c5liQ: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.findIndices_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5liP: // global
           I64[Hp - 8] = go_s5kTD_info;
           P64[Hp] = R2;
           _s5kTC::P64 = R3;
           R3 = 0;
           R2 = _s5kTC::P64;
           R1 = Hp - 6;
           call go_s5kTD_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.631640007 UTC

[section ""data" . Data.OldList.elemIndices_closure" {
     Data.OldList.elemIndices_closure:
         const Data.OldList.elemIndices_info;
 },
 sat_s5kTQ_entry() //  [R1]
         { info_tbl: [(c5liZ,
                       label: sat_s5kTQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5liZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lj0; else goto c5lj1;
       c5lj0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lj1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.OldList.elemIndices_entry() //  [R2, R3]
         { info_tbl: [(c5lj2,
                       label: Data.OldList.elemIndices_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lj2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5lj6; else goto c5lj5;
       c5lj6: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.elemIndices_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lj5: // global
           I64[Hp - 24] = sat_s5kTQ_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Data.OldList.findIndices_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.633991293 UTC

[section ""data" . Data.OldList.isPrefixOf_closure" {
     Data.OldList.isPrefixOf_closure:
         const Data.OldList.isPrefixOf_info;
 },
 Data.OldList.isPrefixOf_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lji,
                       label: Data.OldList.isPrefixOf_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lji: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c5ljj; else goto u5ljQ;
       c5ljj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.isPrefixOf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5ljQ: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5lj8() args: 0, res: 0, upd: 0;
     }
 },
 _c5lj8() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lj8: // global
           I64[Sp - 8] = block_c5ljb_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5ljU; else goto c5ljc;
       u5ljU: // global
           call _c5ljb(R1) args: 0, res: 0, upd: 0;
       c5ljc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ljb() //  [R1]
         { info_tbl: [(c5ljb,
                       label: block_c5ljb_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ljb: // global
           if (R1 & 7 == 1) goto c5ljf; else goto c5ljg;
       c5ljf: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5ljg: // global
           I64[Sp] = block_c5ljq_info;
           _s5kTV::P64 = P64[R1 + 6];
           _s5kTW::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _s5kTW::P64;
           P64[Sp + 24] = _s5kTV::P64;
           if (R1 & 7 != 0) goto u5ljV; else goto c5ljs;
       u5ljV: // global
           call _c5ljq(R1) args: 0, res: 0, upd: 0;
       c5ljs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ljq() //  [R1]
         { info_tbl: [(c5ljq,
                       label: block_c5ljq_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ljq: // global
           if (R1 & 7 == 1) goto u5ljR; else goto c5ljD;
       u5ljR: // global
           Sp = Sp + 32;
           call _c5ljJ() args: 0, res: 0, upd: 0;
       c5ljD: // global
           I64[Sp] = block_c5ljB_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5ljB() //  [R1]
         { info_tbl: [(c5ljB,
                       label: block_c5ljB_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ljB: // global
           if (R1 & 7 == 1) goto u5ljS; else goto c5ljN;
       u5ljS: // global
           Sp = Sp + 32;
           call _c5ljJ() args: 0, res: 0, upd: 0;
       c5ljN: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 24];
           Sp = Sp + 8;
           call _c5lj8() args: 0, res: 0, upd: 0;
     }
 },
 _c5ljJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ljJ: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.636774818 UTC

[section ""data" . Data.OldList.isInfixOf_closure" {
     Data.OldList.isInfixOf_closure:
         const Data.OldList.isInfixOf_info;
 },
 Data.OldList.isInfixOf_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lk6,
                       label: Data.OldList.isInfixOf_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lk6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lk7; else goto c5lk8;
       c5lk7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.isInfixOf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lk8: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5lka() args: 0, res: 0, upd: 0;
     }
 },
 _c5lka() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lka: // global
           I64[Sp - 8] = block_c5lkc_info;
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           Sp = Sp - 8;
           call Data.OldList.isPrefixOf_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lkc() //  [R1]
         { info_tbl: [(c5lkc,
                       label: block_c5lkc_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lkc: // global
           if (R1 & 7 == 1) goto c5lkk; else goto c5lkz;
       c5lkk: // global
           I64[Sp] = block_c5lkh_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u5lkF; else goto c5lkl;
       u5lkF: // global
           call _c5lkh(R1) args: 0, res: 0, upd: 0;
       c5lkl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5lkz: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5lkh() //  [R1]
         { info_tbl: [(c5lkh,
                       label: block_c5lkh_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lkh: // global
           if (R1 & 7 == 1) goto c5lkr; else goto c5lkv;
       c5lkr: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5lkv: // global
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp + 8;
           call _c5lka() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.639194878 UTC

[section ""data" . Data.OldList.dropLength_closure" {
     Data.OldList.dropLength_closure:
         const Data.OldList.dropLength_info;
 },
 Data.OldList.dropLength_entry() //  [R2, R3]
         { info_tbl: [(c5lkS,
                       label: Data.OldList.dropLength_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lkS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lkT; else goto u5lle;
       c5lkT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.dropLength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5lle: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c5lkI() args: 0, res: 0, upd: 0;
     }
 },
 _c5lkI() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lkI: // global
           _s5kUa::P64 = P64[Sp];
           I64[Sp] = block_c5lkL_info;
           R1 = _s5kUa::P64;
           if (R1 & 7 != 0) goto u5llg; else goto c5lkM;
       u5llg: // global
           call _c5lkL(R1) args: 0, res: 0, upd: 0;
       c5lkM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lkL() //  [R1]
         { info_tbl: [(c5lkL,
                       label: block_c5lkL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lkL: // global
           _s5kUb::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5lkP; else goto c5lkQ;
       c5lkP: // global
           R1 = _s5kUb::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5lkQ: // global
           I64[Sp] = block_c5ll0_info;
           _s5kUe::P64 = P64[R1 + 14];
           R1 = _s5kUb::P64;
           P64[Sp + 8] = _s5kUe::P64;
           if (R1 & 7 != 0) goto u5llh; else goto c5ll2;
       u5llh: // global
           call _c5ll0(R1) args: 0, res: 0, upd: 0;
       c5ll2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ll0() //  [R1]
         { info_tbl: [(c5ll0,
                       label: block_c5ll0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ll0: // global
           if (R1 & 7 == 1) goto c5ll8; else goto c5llc;
       c5ll8: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5llc: // global
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 14];
           call _c5lkI() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.641806955 UTC

[section ""data" . Data.OldList.dropLengthMaybe_closure" {
     Data.OldList.dropLengthMaybe_closure:
         const Data.OldList.dropLengthMaybe_info;
 },
 Data.OldList.dropLengthMaybe_entry() //  [R2, R3]
         { info_tbl: [(c5llv,
                       label: Data.OldList.dropLengthMaybe_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5llv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5llw; else goto u5llU;
       c5llw: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.dropLengthMaybe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5llU: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c5lll() args: 0, res: 0, upd: 0;
     }
 },
 _c5lll() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lll: // global
           _s5kUi::P64 = P64[Sp];
           I64[Sp] = block_c5llo_info;
           R1 = _s5kUi::P64;
           if (R1 & 7 != 0) goto u5llW; else goto c5llp;
       u5llW: // global
           call _c5llo(R1) args: 0, res: 0, upd: 0;
       c5llp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5llo() //  [R1]
         { info_tbl: [(c5llo,
                       label: block_c5llo_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5llo: // global
           _s5kUj::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5lls; else goto c5llt;
       c5lls: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5llD; else goto c5llC;
       c5llD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5llC: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s5kUj::P64;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5llt: // global
           I64[Sp] = block_c5llG_info;
           _s5kUm::P64 = P64[R1 + 14];
           R1 = _s5kUj::P64;
           P64[Sp + 8] = _s5kUm::P64;
           if (R1 & 7 != 0) goto u5llX; else goto c5llI;
       u5llX: // global
           call _c5llG(R1) args: 0, res: 0, upd: 0;
       c5llI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5llG() //  [R1]
         { info_tbl: [(c5llG,
                       label: block_c5llG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5llG: // global
           if (R1 & 7 == 1) goto c5llO; else goto c5llS;
       c5llO: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5llS: // global
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 14];
           call _c5lll() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.644215964 UTC

[section ""data" . Data.OldList.isSuffixOf_closure" {
     Data.OldList.isSuffixOf_closure:
         const Data.OldList.isSuffixOf_info;
 },
 Data.OldList.isSuffixOf_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lma,
                       label: Data.OldList.isSuffixOf_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lma: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lmb; else goto c5lmc;
       c5lmb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.isSuffixOf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lmc: // global
           I64[Sp - 32] = block_c5lm4_info;
           _s5kUr::P64 = R3;
           R3 = R4;
           _s5kUq::P64 = R2;
           R2 = _s5kUr::P64;
           P64[Sp - 24] = _s5kUq::P64;
           P64[Sp - 16] = _s5kUr::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.OldList.dropLengthMaybe_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lm4() //  [R1]
         { info_tbl: [(c5lm4,
                       label: block_c5lm4_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lm4: // global
           if (R1 & 7 == 1) goto c5lm7; else goto c5lm8;
       c5lm7: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5lm8: // global
           I64[Sp] = block_c5lmi_info;
           R3 = P64[Sp + 24];
           R2 = P64[R1 + 6];
           call Data.OldList.dropLength_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lmi() //  [R1]
         { info_tbl: [(c5lmi,
                       label: block_c5lmi_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lmi: // global
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Classes.$fEq[]_$c==_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.646489367 UTC

[section ""data" . Data.OldList.elem_by_closure" {
     Data.OldList.elem_by_closure:
         const Data.OldList.elem_by_info;
 },
 Data.OldList.elem_by_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lmz,
                       label: Data.OldList.elem_by_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lmz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lmA; else goto u5lmU;
       c5lmA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.elem_by_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5lmU: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5lmp() args: 0, res: 0, upd: 0;
     }
 },
 _c5lmp() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lmp: // global
           I64[Sp - 8] = block_c5lms_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lmW; else goto c5lmt;
       u5lmW: // global
           call _c5lms(R1) args: 0, res: 0, upd: 0;
       c5lmt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lms() //  [R1]
         { info_tbl: [(c5lms,
                       label: block_c5lms_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lms: // global
           if (R1 & 7 == 1) goto c5lmw; else goto c5lmx;
       c5lmw: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5lmx: // global
           I64[Sp] = block_c5lmH_info;
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 6];
           _s5kUB::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 24] = _s5kUB::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lmH() //  [R1]
         { info_tbl: [(c5lmH,
                       label: block_c5lmH_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lmH: // global
           if (R1 & 7 == 1) goto c5lmO; else goto c5lmS;
       c5lmO: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 24];
           Sp = Sp + 8;
           call _c5lmp() args: 0, res: 0, upd: 0;
       c5lmS: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.649454064 UTC

[section ""data" . Data.OldList.nubBy_closure" {
     Data.OldList.nubBy_closure:
         const Data.OldList.nubBy_info;
 },
 sat_s5kUN_entry() //  [R1]
         { info_tbl: [(c5lnn,
                       label: sat_s5kUN_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lnn: // global
           _s5kUN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5lno; else goto c5lnp;
       c5lnp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lnr; else goto c5lnq;
       c5lnr: // global
           HpAlloc = 24;
           goto c5lno;
       c5lno: // global
           R1 = _s5kUN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lnq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5kUN::P64;
           _s5kUF::P64 = P64[_s5kUN::P64 + 16];
           _s5kUH::P64 = P64[_s5kUN::P64 + 24];
           _s5kUJ::P64 = P64[_s5kUN::P64 + 32];
           _s5kUK::P64 = P64[_s5kUN::P64 + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kUJ::P64;
           P64[Hp] = _s5kUH::P64;
           R3 = Hp - 14;
           R2 = _s5kUK::P64;
           R1 = _s5kUF::P64;
           Sp = Sp - 16;
           call nubBy'_s5kUF_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 nubBy'_s5kUF_entry() //  [R1, R2, R3]
         { info_tbl: [(c5lnw,
                       label: nubBy'_s5kUF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lnw: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5lnx; else goto u5lnN;
       c5lnx: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5lnN: // global
           P64[Sp - 24] = R1;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call _c5ln5() args: 0, res: 0, upd: 0;
     }
 },
 _c5ln5() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ln5: // global
           _s5kUD::P64 = P64[P64[Sp] + 6];
           I64[Sp - 8] = block_c5ln8_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5kUD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lnP; else goto c5ln9;
       u5lnP: // global
           call _c5ln8(R1) args: 0, res: 0, upd: 0;
       c5ln9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ln8() //  [R1]
         { info_tbl: [(c5ln8,
                       label: block_c5ln8_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ln8: // global
           if (R1 & 7 == 1) goto c5lnt; else goto c5lnu;
       c5lnt: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5lnu: // global
           I64[Sp - 8] = block_c5lne_info;
           R4 = P64[Sp + 24];
           _s5kUJ::P64 = P64[R1 + 6];
           R3 = _s5kUJ::P64;
           R2 = P64[Sp + 16];
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 16] = _s5kUJ::P64;
           Sp = Sp - 8;
           call Data.OldList.elem_by_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lne() //  [R1]
         { info_tbl: [(c5lne,
                       label: block_c5lne_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lne: // global
           _s5kUH::P64 = P64[Sp + 32];
           _s5kUK::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5lnE; else goto c5lnL;
       c5lnE: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5lnH; else goto c5lnG;
       c5lnH: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lnG: // global
           I64[Hp - 64] = sat_s5kUN_info;
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = _s5kUH::P64;
           _s5kUJ::P64 = P64[Sp + 24];
           P64[Hp - 32] = _s5kUJ::P64;
           P64[Hp - 24] = _s5kUK::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kUJ::P64;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5lnL: // global
           P64[Sp + 24] = _s5kUK::P64;
           P64[Sp + 32] = _s5kUH::P64;
           Sp = Sp + 16;
           call _c5ln5() args: 0, res: 0, upd: 0;
     }
 },
 Data.OldList.nubBy_entry() //  [R2, R3]
         { info_tbl: [(c5lnS,
                       label: Data.OldList.nubBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lnS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5lnW; else goto c5lnV;
       c5lnW: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.nubBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lnV: // global
           I64[Hp - 8] = nubBy'_s5kUF_info;
           P64[Hp] = R2;
           _s5kUE::P64 = R3;
           R3 = GHC.Types.[]_closure+1;
           R2 = _s5kUE::P64;
           R1 = Hp - 6;
           call nubBy'_s5kUF_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.655380397 UTC

[section ""data" . Data.OldList.nub_closure" {
     Data.OldList.nub_closure:
         const Data.OldList.nub_info;
 },
 sat_s5kUQ_entry() //  [R1]
         { info_tbl: [(c5lo5,
                       label: sat_s5kUQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lo5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lo6; else goto c5lo7;
       c5lo6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lo7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.nub_entry() //  [R2, R3]
         { info_tbl: [(c5lo8,
                       label: Data.OldList.nub_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lo8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5loc; else goto c5lob;
       c5loc: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.nub_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lob: // global
           I64[Hp - 16] = sat_s5kUQ_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.nubBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.657588655 UTC

[section ""data" . Data.OldList.deleteBy_closure" {
     Data.OldList.deleteBy_closure:
         const Data.OldList.deleteBy_info;
 },
 sat_s5kUY_entry() //  [R1]
         { info_tbl: [(c5lov,
                       label: sat_s5kUY_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lov: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5low; else goto c5lox;
       c5low: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lox: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.deleteBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5loC,
                       label: Data.OldList.deleteBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5loC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5loD; else goto c5loE;
       c5loD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.deleteBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5loE: // global
           I64[Sp - 24] = block_c5loh_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5loT; else goto c5loi;
       u5loT: // global
           call _c5loh(R1) args: 0, res: 0, upd: 0;
       c5loi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5loh() //  [R1]
         { info_tbl: [(c5loh,
                       label: block_c5loh_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5loh: // global
           if (R1 & 7 == 1) goto c5loz; else goto c5loA;
       c5loz: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5loA: // global
           I64[Sp - 16] = block_c5lon_info;
           _s5kUV::P64 = P64[R1 + 6];
           R3 = _s5kUV::P64;
           R2 = P64[Sp + 16];
           _s5kUW::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s5kUW::P64;
           P64[Sp] = _s5kUV::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lon() //  [R1]
         { info_tbl: [(c5lon,
                       label: block_c5lon_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lon: // global
           _s5kUW::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5loK; else goto c5loR;
       c5loK: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5loN; else goto c5loM;
       c5loN: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5loM: // global
           I64[Hp - 56] = sat_s5kUY_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _s5kUW::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5loR: // global
           R1 = _s5kUW::P64 & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.660208419 UTC

[section ""data" . Data.OldList.deleteFirstsBy_closure" {
     Data.OldList.deleteFirstsBy_closure:
         const Data.OldList.deleteFirstsBy_info;
 },
 Data.OldList.deleteFirstsBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lp0,
                       label: Data.OldList.deleteFirstsBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lp0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lp1; else goto c5lp2;
       c5lp1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.deleteFirstsBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lp2: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call _c5lp4() args: 0, res: 0, upd: 0;
     }
 },
 _c5lp4() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lp4: // global
           I64[Sp - 8] = block_c5lp6_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lps; else goto c5lp8;
       u5lps: // global
           call _c5lp6(R1) args: 0, res: 0, upd: 0;
       c5lp8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lp6() //  [R1]
         { info_tbl: [(c5lp6,
                       label: block_c5lp6_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lp6: // global
           _s5kV4::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5lpe; else goto c5lpj;
       c5lpe: // global
           R1 = _s5kV4::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5lpj: // global
           I64[Sp] = block_c5lph_info;
           R4 = _s5kV4::P64;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 14];
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lph() //  [R1]
         { info_tbl: [(c5lph,
                       label: block_c5lph_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lph: // global
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c5lp4() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.6622314 UTC

[section ""data" . Data.OldList.delete_closure" {
     Data.OldList.delete_closure:
         const Data.OldList.delete_info;
 },
 sat_s5kVc_entry() //  [R1]
         { info_tbl: [(c5lpC,
                       label: sat_s5kVc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lpC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lpD; else goto c5lpE;
       c5lpD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lpE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.delete_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lpF,
                       label: Data.OldList.delete_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lpF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lpJ; else goto c5lpI;
       c5lpJ: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.delete_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lpI: // global
           I64[Hp - 16] = sat_s5kVc_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.664133391 UTC

[section ""data" . Data.OldList.\\_closure" {
     Data.OldList.\\_closure:
         const Data.OldList.\\_info;
 },
 lvl12_s5kVg_entry() //  [R1]
         { info_tbl: [(c5lpS,
                       label: lvl12_s5kVg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lpS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lpT; else goto c5lpU;
       c5lpT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lpU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.\\_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lpX,
                       label: Data.OldList.\\_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lpX: // global
           _s5kVf::P64 = R4;
           _s5kVe::P64 = R3;
           _s5kVd::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c5lpY; else goto c5lpZ;
       c5lpZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lq1; else goto c5lq0;
       c5lq1: // global
           HpAlloc = 24;
           goto c5lpY;
       c5lpY: // global
           R4 = _s5kVf::P64;
           R3 = _s5kVe::P64;
           R2 = _s5kVd::P64;
           R1 = Data.OldList.\\_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lq0: // global
           I64[Hp - 16] = lvl12_s5kVg_info;
           P64[Hp] = _s5kVd::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _s5kVf::P64;
           P64[Sp - 8] = _s5kVe::P64;
           Sp = Sp - 24;
           call _c5lq3() args: 0, res: 0, upd: 0;
     }
 },
 _c5lq3() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lq3: // global
           I64[Sp - 8] = block_c5lq5_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lqr; else goto c5lq7;
       u5lqr: // global
           call _c5lq5(R1) args: 0, res: 0, upd: 0;
       c5lq7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lq5() //  [R1]
         { info_tbl: [(c5lq5,
                       label: block_c5lq5_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lq5: // global
           _s5kVj::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5lqd; else goto c5lqi;
       c5lqd: // global
           R1 = _s5kVj::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5lqi: // global
           I64[Sp] = block_c5lqg_info;
           R4 = _s5kVj::P64;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 14];
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lqg() //  [R1]
         { info_tbl: [(c5lqg,
                       label: block_c5lqg_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lqg: // global
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c5lq3() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.666894116 UTC

[section ""data" . Data.OldList.unionBy_closure" {
     Data.OldList.unionBy_closure:
         const Data.OldList.unionBy_info;
 },
 sat_s5kVz_entry() //  [R1]
         { info_tbl: [(c5lqD,
                       label: sat_s5kVz_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lqD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lqE; else goto c5lqF;
       c5lqE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lqF: // global
           I64[Sp - 24] = block_c5lqB_info;
           R3 = P64[R1 + 32];
           _s5kVo::P64 = P64[R1 + 16];
           R2 = _s5kVo::P64;
           P64[Sp - 16] = _s5kVo::P64;
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 24;
           call Data.OldList.nubBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lqB() //  [R1]
         { info_tbl: [(c5lqB,
                       label: block_c5lqB_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lqB: // global
           P64[Sp] = R1;
           P64[Sp + 16] = P64[Sp + 16];
           call _c5lqM() args: 0, res: 0, upd: 0;
     }
 },
 _c5lqM() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lqM: // global
           I64[Sp - 8] = block_c5lqO_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lra; else goto c5lqQ;
       u5lra: // global
           call _c5lqO(R1) args: 0, res: 0, upd: 0;
       c5lqQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lqO() //  [R1]
         { info_tbl: [(c5lqO,
                       label: block_c5lqO_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lqO: // global
           _s5kVt::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5lqW; else goto c5lr1;
       c5lqW: // global
           R1 = _s5kVt::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5lr1: // global
           I64[Sp + 8] = block_c5lqZ_info;
           R4 = _s5kVt::P64;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp + 8;
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lqZ() //  [R1]
         { info_tbl: [(c5lqZ,
                       label: block_c5lqZ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lqZ: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp] = R1;
           call _c5lqM() args: 0, res: 0, upd: 0;
     }
 },
 Data.OldList.unionBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lrc,
                       label: Data.OldList.unionBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lrc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5lrg; else goto c5lrf;
       c5lrg: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.unionBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lrf: // global
           I64[Hp - 32] = sat_s5kVz_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s5kVp::P64 = R3;
           R3 = Hp - 32;
           R2 = _s5kVp::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.669300646 UTC

[section ""data" . Data.OldList.union_closure" {
     Data.OldList.union_closure:
         const Data.OldList.union_info;
 },
 sat_s5kVD_entry() //  [R1]
         { info_tbl: [(c5lrp,
                       label: sat_s5kVD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lrp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lrq; else goto c5lrr;
       c5lrq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lrr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.union_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lrs,
                       label: Data.OldList.union_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lrs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lrw; else goto c5lrv;
       c5lrw: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.union_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lrv: // global
           I64[Hp - 16] = sat_s5kVD_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.unionBy_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.671870467 UTC

[section ""data" . Data.OldList.intersectBy_closure" {
     Data.OldList.intersectBy_closure:
         const Data.OldList.intersectBy_info;
 },
 go_s5kVN_entry() //  [R1, R2]
         { info_tbl: [(c5lrZ,
                       label: go_s5kVN_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lrZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5ls0; else goto u5lsr;
       c5ls0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5lsr: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c5lrP() args: 0, res: 0, upd: 0;
     }
 },
 _c5lrP() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lrP: // global
           I64[Sp - 16] = block_c5lrS_info;
           R1 = P64[Sp + 8];
           _s5kVN::P64 = P64[Sp];
           P64[Sp - 8] = P64[_s5kVN::P64 + 15];
           P64[Sp + 8] = P64[_s5kVN::P64 + 7];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5lst; else goto c5lrT;
       u5lst: // global
           call _c5lrS(R1) args: 0, res: 0, upd: 0;
       c5lrT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lrS() //  [R1]
         { info_tbl: [(c5lrS,
                       label: block_c5lrS_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lrS: // global
           if (R1 & 7 == 1) goto c5lrW; else goto c5lrX;
       c5lrW: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5lrX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5lsb; else goto c5lsa;
       c5lsb: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lsa: // global
           _s5kVQ::P64 = P64[R1 + 6];
           _s5kVR::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s5kVQ::P64;
           I64[Sp] = block_c5ls8_info;
           R3 = P64[Sp + 8];
           R2 = Hp - 24;
           P64[Sp + 8] = _s5kVR::P64;
           P64[Sp + 24] = _s5kVQ::P64;
           call GHC.List.any_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5ls8() //  [R1]
         { info_tbl: [(c5ls8,
                       label: block_c5ls8_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ls8: // global
           _s5kVR::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5lsh; else goto c5lsm;
       c5lsh: // global
           P64[Sp + 24] = _s5kVR::P64;
           Sp = Sp + 16;
           call _c5lrP() args: 0, res: 0, upd: 0;
       c5lsm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5lsp; else goto c5lso;
       c5lsp: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lso: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s5kVR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.intersectBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lsA,
                       label: Data.OldList.intersectBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lsA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5lsB; else goto c5lsC;
       c5lsB: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.intersectBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lsC: // global
           I64[Sp - 24] = block_c5lrB_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5lsU; else goto c5lrC;
       u5lsU: // global
           call _c5lrB(R1) args: 0, res: 0, upd: 0;
       c5lrC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lrB() //  [R1]
         { info_tbl: [(c5lrB,
                       label: block_c5lrB_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lrB: // global
           if (R1 & 7 == 1) goto u5lsP; else goto c5lsy;
       u5lsP: // global
           Sp = Sp + 24;
           call _c5lsJ() args: 0, res: 0, upd: 0;
       c5lsy: // global
           I64[Sp] = block_c5lrH_info;
           _s5kVH::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s5kVH::P64;
           if (R1 & 7 != 0) goto u5lsR; else goto c5lrI;
       u5lsR: // global
           call _c5lrH(R1) args: 0, res: 0, upd: 0;
       c5lrI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lrH() //  [R1]
         { info_tbl: [(c5lrH,
                       label: block_c5lrH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lrH: // global
           if (R1 & 7 == 1) goto u5lsQ; else goto c5lsK;
       u5lsQ: // global
           Sp = Sp + 24;
           call _c5lsJ() args: 0, res: 0, upd: 0;
       c5lsK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lsN; else goto c5lsM;
       c5lsN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lsM: // global
           I64[Hp - 16] = go_s5kVN_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R2 = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go_s5kVN_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5lsJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lsJ: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.675325528 UTC

[section ""data" . Data.OldList.intersect_closure" {
     Data.OldList.intersect_closure:
         const Data.OldList.intersect_info;
 },
 sat_s5kVY_entry() //  [R1]
         { info_tbl: [(c5lt3,
                       label: sat_s5kVY_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lt3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lt4; else goto c5lt5;
       c5lt4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lt5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.intersect_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lt6,
                       label: Data.OldList.intersect_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lt6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lta; else goto c5lt9;
       c5lta: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.intersect_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lt9: // global
           I64[Hp - 16] = sat_s5kVY_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.intersectBy_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.677233099 UTC

[section ""data" . Data.OldList.prependToAll_closure" {
     Data.OldList.prependToAll_closure:
         const Data.OldList.prependToAll_info;
 },
 sat_s5kW4_entry() //  [R1]
         { info_tbl: [(c5ltp,
                       label: sat_s5kW4_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ltp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5ltq; else goto c5ltr;
       c5ltq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ltr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.prependToAll_entry() //  [R2, R3]
         { info_tbl: [(c5ltw,
                       label: Data.OldList.prependToAll_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ltw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5ltx; else goto c5lty;
       c5ltx: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.prependToAll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lty: // global
           I64[Sp - 16] = block_c5ltf_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5ltG; else goto c5ltg;
       u5ltG: // global
           call _c5ltf(R1) args: 0, res: 0, upd: 0;
       c5ltg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ltf() //  [R1]
         { info_tbl: [(c5ltf,
                       label: block_c5ltf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ltf: // global
           if (R1 & 7 == 1) goto c5ltt; else goto c5ltu;
       c5ltt: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5ltu: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5ltF; else goto c5ltE;
       c5ltF: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ltE: // global
           _s5kW2::P64 = P64[R1 + 6];
           _s5kW3::P64 = P64[R1 + 14];
           I64[Hp - 72] = sat_s5kW4_info;
           _s5kVZ::P64 = P64[Sp + 8];
           P64[Hp - 56] = _s5kVZ::P64;
           P64[Hp - 48] = _s5kW3::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5kW2::P64;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kVZ::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.679765591 UTC

[section ""data" . Data.OldList.intersperse_closure" {
     Data.OldList.intersperse_closure:
         const Data.OldList.intersperse_info;
 },
 sat_s5kWb_entry() //  [R1]
         { info_tbl: [(c5ltV,
                       label: sat_s5kWb_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ltV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5ltW; else goto c5ltX;
       c5ltW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ltX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.intersperse_entry() //  [R2, R3]
         { info_tbl: [(c5lu2,
                       label: Data.OldList.intersperse_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lu2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lu3; else goto c5lu4;
       c5lu3: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.intersperse_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lu4: // global
           I64[Sp - 16] = block_c5ltL_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5lub; else goto c5ltM;
       u5lub: // global
           call _c5ltL(R1) args: 0, res: 0, upd: 0;
       c5ltM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ltL() //  [R1]
         { info_tbl: [(c5ltL,
                       label: block_c5ltL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ltL: // global
           if (R1 & 7 == 1) goto c5ltZ; else goto c5lu0;
       c5ltZ: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5lu0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5lua; else goto c5lu9;
       c5lua: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lu9: // global
           _s5kW9::P64 = P64[R1 + 6];
           _s5kWa::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s5kWb_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s5kWa::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kW9::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.682268947 UTC

[section ""data" . Data.OldList.intercalate1_closure" {
     Data.OldList.intercalate1_closure:
         const Data.OldList.intercalate1_info;
 },
 sat_s5kWg_entry() //  [R1]
         { info_tbl: [(c5luq,
                       label: sat_s5kWg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5luq: // global
           R2 = P64[R1 + 16];
           call Data.OldList.intercalate1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.intercalate1_entry() //  [R2]
         { info_tbl: [(c5lux,
                       label: Data.OldList.intercalate1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lux: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5luy; else goto c5luz;
       c5luy: // global
           R2 = R2;
           R1 = Data.OldList.intercalate1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5luz: // global
           I64[Sp - 8] = block_c5lug_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5luF; else goto c5luh;
       u5luF: // global
           call _c5lug(R1) args: 0, res: 0, upd: 0;
       c5luh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lug() //  [R1]
         { info_tbl: [(c5lug,
                       label: block_c5lug_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lug: // global
           if (R1 & 7 == 1) goto c5luu; else goto c5luv;
       c5luu: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5luv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5luE; else goto c5luD;
       c5luE: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5luD: // global
           _s5kWe::P64 = P64[R1 + 6];
           _s5kWf::P64 = P64[R1 + 14];
           I64[Hp - 16] = sat_s5kWg_info;
           P64[Hp] = _s5kWf::P64;
           R3 = Hp - 16;
           R2 = _s5kWe::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.684434471 UTC

[section ""data" . Data.OldList.intercalate_closure" {
     Data.OldList.intercalate_closure:
         const Data.OldList.intercalate_info;
 },
 sat_s5kWm_entry() //  [R1]
         { info_tbl: [(c5luU,
                       label: sat_s5kWm_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5luU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5luV; else goto c5luW;
       c5luV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5luW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.intercalate_entry() //  [R2, R3]
         { info_tbl: [(c5lv1,
                       label: Data.OldList.intercalate_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lv1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lv2; else goto c5lv3;
       c5lv2: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.intercalate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lv3: // global
           I64[Sp - 16] = block_c5luK_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5lva; else goto c5luL;
       u5lva: // global
           call _c5luK(R1) args: 0, res: 0, upd: 0;
       c5luL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5luK() //  [R1]
         { info_tbl: [(c5luK,
                       label: block_c5luK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5luK: // global
           if (R1 & 7 == 1) goto c5luY; else goto c5luZ;
       c5luY: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5luZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5lv9; else goto c5lv8;
       c5lv9: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lv8: // global
           _s5kWk::P64 = P64[R1 + 6];
           _s5kWl::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s5kWm_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s5kWl::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kWk::P64;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call Data.OldList.intercalate1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.686895564 UTC

[section ""data" . poly_go_r5kSf_closure" {
     poly_go_r5kSf_closure:
         const poly_go_r5kSf_info;
 },
 sat_s5kWv_entry() //  [R1]
         { info_tbl: [(c5lvv,
                       label: sat_s5kWv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lvv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lvw; else goto c5lvx;
       c5lvw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lvx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_r5kSf_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go_r5kSf_entry() //  [R2]
         { info_tbl: [(c5lvC,
                       label: poly_go_r5kSf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lvC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lvD; else goto u5lvS;
       c5lvD: // global
           R2 = R2;
           R1 = poly_go_r5kSf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5lvS: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5lvc() args: 0, res: 0, upd: 0;
     }
 },
 _c5lvc() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lvc: // global
           _s5kWo::P64 = P64[Sp];
           I64[Sp] = block_c5lvf_info;
           R1 = _s5kWo::P64;
           if (R1 & 7 != 0) goto u5lvU; else goto c5lvg;
       u5lvU: // global
           call _c5lvf(R1) args: 0, res: 0, upd: 0;
       c5lvg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lvf() //  [R1]
         { info_tbl: [(c5lvf,
                       label: block_c5lvf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lvf: // global
           if (R1 & 7 == 1) goto c5lvz; else goto c5lvA;
       c5lvz: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5lvA: // global
           I64[Sp - 8] = block_c5lvl_info;
           _s5kWr::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5kWr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lvV; else goto c5lvm;
       u5lvV: // global
           call _c5lvl(R1) args: 0, res: 0, upd: 0;
       c5lvm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lvl() //  [R1]
         { info_tbl: [(c5lvl,
                       label: block_c5lvl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lvl: // global
           _s5kWr::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5lvL; else goto c5lvN;
       c5lvL: // global
           P64[Sp + 8] = _s5kWr::P64;
           Sp = Sp + 8;
           call _c5lvc() args: 0, res: 0, upd: 0;
       c5lvN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5lvQ; else goto c5lvP;
       c5lvQ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lvP: // global
           _s5kWu::P64 = P64[R1 + 14];
           I64[Hp - 40] = sat_s5kWv_info;
           P64[Hp - 24] = _s5kWr::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kWu::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.690016595 UTC

[section ""data" . poly_go1_r5kSg_closure" {
     poly_go1_r5kSg_closure:
         const poly_go1_r5kSg_info;
 },
 sat_s5kWD_entry() //  [R1]
         { info_tbl: [(c5lwi,
                       label: sat_s5kWD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lwi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lwj; else goto c5lwk;
       c5lwj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lwk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_r5kSg_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go1_r5kSg_entry() //  [R2]
         { info_tbl: [(c5lwp,
                       label: poly_go1_r5kSg_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lwp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lwq; else goto u5lwF;
       c5lwq: // global
           R2 = R2;
           R1 = poly_go1_r5kSg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5lwF: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5lvZ() args: 0, res: 0, upd: 0;
     }
 },
 _c5lvZ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lvZ: // global
           _s5kWw::P64 = P64[Sp];
           I64[Sp] = block_c5lw2_info;
           R1 = _s5kWw::P64;
           if (R1 & 7 != 0) goto u5lwH; else goto c5lw3;
       u5lwH: // global
           call _c5lw2(R1) args: 0, res: 0, upd: 0;
       c5lw3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lw2() //  [R1]
         { info_tbl: [(c5lw2,
                       label: block_c5lw2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lw2: // global
           if (R1 & 7 == 1) goto c5lwm; else goto c5lwn;
       c5lwm: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5lwn: // global
           I64[Sp - 8] = block_c5lw8_info;
           _s5kWz::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5kWz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lwI; else goto c5lw9;
       u5lwI: // global
           call _c5lw8(R1) args: 0, res: 0, upd: 0;
       c5lw9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lw8() //  [R1]
         { info_tbl: [(c5lw8,
                       label: block_c5lw8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lw8: // global
           _s5kWz::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5lwy; else goto c5lwA;
       c5lwy: // global
           P64[Sp + 8] = _s5kWz::P64;
           Sp = Sp + 8;
           call _c5lvZ() args: 0, res: 0, upd: 0;
       c5lwA: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5lwD; else goto c5lwC;
       c5lwD: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lwC: // global
           _s5kWB::P64 = P64[R1 + 6];
           I64[Hp - 40] = sat_s5kWD_info;
           P64[Hp - 24] = _s5kWz::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kWB::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.693234535 UTC

[section ""data" . Data.OldList.transpose_closure" {
     Data.OldList.transpose_closure:
         const Data.OldList.transpose_info;
 },
 sat_s5kWN_entry() //  [R1]
         { info_tbl: [(c5lx9,
                       label: sat_s5kWN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lx9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lxa; else goto c5lxb;
       c5lxa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lxb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_r5kSf_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5kWP_entry() //  [R1]
         { info_tbl: [(c5lxd,
                       label: sat_s5kWP_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lxd: // global
           _s5kWP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5lxe; else goto c5lxf;
       c5lxf: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5lxh; else goto c5lxg;
       c5lxh: // global
           HpAlloc = 48;
           goto c5lxe;
       c5lxe: // global
           R1 = _s5kWP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lxg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5kWP::P64;
           _s5kWH::P64 = P64[_s5kWP::P64 + 16];
           _s5kWK::P64 = P64[_s5kWP::P64 + 24];
           I64[Hp - 40] = sat_s5kWN_info;
           P64[Hp - 24] = _s5kWH::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kWK::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call Data.OldList.transpose_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5kWL_entry() //  [R1]
         { info_tbl: [(c5lxm,
                       label: sat_s5kWL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lxm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lxn; else goto c5lxo;
       c5lxn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lxo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_r5kSg_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.transpose_entry() //  [R2]
         { info_tbl: [(c5lxt,
                       label: Data.OldList.transpose_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lxt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lxu; else goto u5lxK;
       c5lxu: // global
           R2 = R2;
           R1 = Data.OldList.transpose_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5lxK: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5lwM() args: 0, res: 0, upd: 0;
     }
 },
 _c5lwM() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lwM: // global
           _s5kWE::P64 = P64[Sp];
           I64[Sp] = block_c5lwP_info;
           R1 = _s5kWE::P64;
           if (R1 & 7 != 0) goto u5lxM; else goto c5lwQ;
       u5lxM: // global
           call _c5lwP(R1) args: 0, res: 0, upd: 0;
       c5lwQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lwP() //  [R1]
         { info_tbl: [(c5lwP,
                       label: block_c5lwP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lwP: // global
           if (R1 & 7 == 1) goto c5lxq; else goto c5lxr;
       c5lxq: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5lxr: // global
           I64[Sp - 8] = block_c5lwV_info;
           _s5kWH::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5kWH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lxN; else goto c5lwW;
       u5lxN: // global
           call _c5lwV(R1) args: 0, res: 0, upd: 0;
       c5lwW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lwV() //  [R1]
         { info_tbl: [(c5lwV,
                       label: block_c5lwV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lwV: // global
           _s5kWH::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5lxC; else goto c5lxF;
       c5lxC: // global
           P64[Sp + 8] = _s5kWH::P64;
           Sp = Sp + 8;
           call _c5lwM() args: 0, res: 0, upd: 0;
       c5lxF: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c5lxI; else goto c5lxH;
       c5lxI: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lxH: // global
           _s5kWJ::P64 = P64[R1 + 6];
           _s5kWK::P64 = P64[R1 + 14];
           I64[Hp - 96] = sat_s5kWP_info;
           P64[Hp - 80] = _s5kWH::P64;
           P64[Hp - 72] = _s5kWK::P64;
           I64[Hp - 64] = sat_s5kWL_info;
           P64[Hp - 48] = _s5kWH::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5kWJ::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.69675069 UTC

[section ""data" . Data.OldList.select_closure" {
     Data.OldList.select_closure:
         const Data.OldList.select_info;
 },
 Data.OldList.select_entry() //  [R2, R3, R4]
         { info_tbl: [(c5ly0,
                       label: Data.OldList.select_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ly0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5ly1; else goto c5ly2;
       c5ly1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.select_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5ly2: // global
           I64[Sp - 24] = block_c5lxU_info;
           _s5kWQ::P64 = R2;
           R2 = R3;
           R1 = _s5kWQ::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lxU() //  [R1]
         { info_tbl: [(c5lxU,
                       label: block_c5lxU_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lxU: // global
           _s5kWR::P64 = P64[Sp + 8];
           _s5kWS::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5lxX; else goto c5lxY;
       c5lxX: // global
           Hp = Hp + 96;
           _s5kWT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5lyk; else goto c5lya;
       c5lya: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _s5kWS::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5kWR::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _s5kWS::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5lxY: // global
           Hp = Hp + 96;
           _s5kWT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5lyk; else goto c5lyj;
       c5lyk: // global
           HpAlloc = 96;
           R1 = _s5kWT::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lyj: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _s5kWS::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _s5kWS::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5kWR::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.699988606 UTC

[section ""data" . Data.OldList.partition_closure" {
     Data.OldList.partition_closure:
         const Data.OldList.partition_info;
 },
 w1_s5kXj_entry() //  [R1]
         { info_tbl: [(c5lyH,
                       label: w1_s5kXj_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lyH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5lyI; else goto c5lyJ;
       c5lyI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lyJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5lyE_info;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgo_s5kXe_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5lyE() //  [R1, R2]
         { info_tbl: [(c5lyE,
                       label: block_c5lyE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lyE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lyM; else goto c5lyL;
       c5lyM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5lyL: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $wgo_s5kXe_entry() //  [R1, R2]
         { info_tbl: [(c5lyR,
                       label: $wgo_s5kXe_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lyR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5lyS; else goto c5lyT;
       c5lyS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5lyT: // global
           I64[Sp - 24] = block_c5lyu_info;
           _s5kXe::P64 = R1;
           _s5kXc::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s5kXc::P64;
           P64[Sp - 8] = _s5kXe::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5lzl; else goto c5lyv;
       u5lzl: // global
           call _c5lyu(R1) args: 0, res: 0, upd: 0;
       c5lyv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lyu() //  [R1]
         { info_tbl: [(c5lyu,
                       label: block_c5lyu_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lyu: // global
           if (R1 & 7 == 1) goto c5lyO; else goto c5lyP;
       c5lyO: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5lyP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5lyZ; else goto c5lyY;
       c5lyZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lyY: // global
           _s5kXh::P64 = P64[R1 + 6];
           _s5kXi::P64 = P64[R1 + 14];
           I64[Hp - 24] = w1_s5kXj_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s5kXi::P64;
           I64[Sp] = block_c5lyW_info;
           R2 = _s5kXh::P64;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5kXh::P64;
           P64[Sp + 16] = Hp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lyW() //  [R1]
         { info_tbl: [(c5lyW,
                       label: block_c5lyW_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lyW: // global
           _c5lyA::P64 = P64[Sp + 16];
           _s5kXh::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5lz7; else goto c5lzg;
       c5lz7: // global
           Hp = Hp + 72;
           _s5kXn::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5lzj; else goto c5lz9;
       c5lz9: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5lyA::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5kXh::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5lyA::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5lzg: // global
           Hp = Hp + 72;
           _s5kXn::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5lzj; else goto c5lzi;
       c5lzj: // global
           HpAlloc = 72;
           R1 = _s5kXn::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lzi: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5lyA::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5lyA::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kXh::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.partition_entry() //  [R2, R3]
         { info_tbl: [(c5lzp,
                       label: Data.OldList.partition_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lzp: // global
           _s5kXd::P64 = R3;
           _s5kXc::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5lzq; else goto c5lzr;
       c5lzr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5lzt; else goto c5lzs;
       c5lzt: // global
           HpAlloc = 16;
           goto c5lzq;
       c5lzq: // global
           R3 = _s5kXd::P64;
           R2 = _s5kXc::P64;
           R1 = Data.OldList.partition_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lzs: // global
           I64[Hp - 8] = $wgo_s5kXe_info;
           P64[Hp] = _s5kXc::P64;
           I64[Sp - 8] = block_c5lzm_info;
           R2 = _s5kXd::P64;
           R1 = Hp - 7;
           Sp = Sp - 8;
           call $wgo_s5kXe_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lzm() //  [R1, R2]
         { info_tbl: [(c5lzm,
                       label: block_c5lzm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lzm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lzw; else goto c5lzv;
       c5lzw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5lzv: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.705202459 UTC

[section ""data" . Data.OldList.pairWithNil_closure" {
     Data.OldList.pairWithNil_closure:
         const Data.OldList.pairWithNil_info;
 },
 Data.OldList.pairWithNil_entry() //  [R2]
         { info_tbl: [(c5lzC,
                       label: Data.OldList.pairWithNil_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lzC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lzG; else goto c5lzF;
       c5lzG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.OldList.pairWithNil_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5lzF: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.706741159 UTC

[section ""data" . Data.OldList.mapAccumLF_closure" {
     Data.OldList.mapAccumLF_closure:
         const Data.OldList.mapAccumLF_info;
 },
 ds1_s5kXP_entry() //  [R1]
         { info_tbl: [(c5lzR,
                       label: ds1_s5kXP_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lzR: // global
           _s5kXP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5lzS; else goto c5lzT;
       c5lzT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lzV; else goto c5lzU;
       c5lzV: // global
           HpAlloc = 24;
           goto c5lzS;
       c5lzS: // global
           R1 = _s5kXP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lzU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5kXP::P64;
           _s5kXM::P64 = P64[_s5kXP::P64 + 16];
           _s5kXO::P64 = P64[_s5kXP::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s5kXO::P64;
           R2 = Hp - 16;
           R1 = _s5kXM::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.mapAccumLF_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5lA1,
                       label: Data.OldList.mapAccumLF_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lA1: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto c5lA5; else goto c5lA4;
       c5lA5: // global
           HpAlloc = 192;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.mapAccumLF_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lA4: // global
           I64[Hp - 184] = stg_ap_3_upd_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R5;
           P64[Hp - 152] = R3;
           I64[Hp - 144] = ds1_s5kXP_info;
           P64[Hp - 128] = R4;
           _c5lzL::P64 = Hp - 184;
           P64[Hp - 120] = _c5lzL::P64;
           I64[Hp - 112] = stg_sel_1_upd_info;
           _c5lzM::P64 = Hp - 144;
           P64[Hp - 96] = _c5lzM::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5lzL::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5lzM::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.70965174 UTC

[section ""data" . Data.OldList.$wmapAccumL_closure" {
     Data.OldList.$wmapAccumL_closure:
         const Data.OldList.$wmapAccumL_info;
 },
 ds1_s5kYe_entry() //  [R1]
         { info_tbl: [(c5lAp,
                       label: ds1_s5kYe_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lAp: // global
           _s5kYe::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5lAq; else goto c5lAr;
       c5lAr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lAt; else goto c5lAs;
       c5lAt: // global
           HpAlloc = 24;
           goto c5lAq;
       c5lAq: // global
           R1 = _s5kYe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lAs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5kYe::P64;
           _s5kY7::P64 = P64[_s5kYe::P64 + 16];
           _s5kYc::P64 = P64[_s5kYe::P64 + 24];
           _s5kYd::P64 = P64[_s5kYe::P64 + 32];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s5kYd::P64;
           I64[Sp - 24] = block_c5lAm_info;
           R4 = _s5kYc::P64;
           R3 = Hp - 16;
           R2 = _s5kY7::P64;
           Sp = Sp - 24;
           call Data.OldList.$wmapAccumL_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5lAm() //  [R1, R2]
         { info_tbl: [(c5lAm,
                       label: block_c5lAm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lAm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lAw; else goto c5lAv;
       c5lAw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5lAv: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wmapAccumL_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lAB,
                       label: Data.OldList.$wmapAccumL_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lAB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5lAC; else goto c5lAD;
       c5lAC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$wmapAccumL_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lAD: // global
           I64[Sp - 24] = block_c5lAa_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5lAN; else goto c5lAb;
       u5lAN: // global
           call _c5lAa(R1) args: 0, res: 0, upd: 0;
       c5lAb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lAa() //  [R1]
         { info_tbl: [(c5lAa,
                       label: block_c5lAa_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lAa: // global
           _s5kY8::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5lAy; else goto c5lAz;
       c5lAy: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = _s5kY8::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5lAz: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c5lAM; else goto c5lAL;
       c5lAM: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lAL: // global
           _s5kYb::P64 = P64[R1 + 6];
           _s5kYc::P64 = P64[R1 + 14];
           I64[Hp - 168] = stg_ap_3_upd_info;
           _s5kY7::P64 = P64[Sp + 8];
           P64[Hp - 152] = _s5kY7::P64;
           P64[Hp - 144] = _s5kY8::P64;
           P64[Hp - 136] = _s5kYb::P64;
           I64[Hp - 128] = ds1_s5kYe_info;
           P64[Hp - 112] = _s5kY7::P64;
           P64[Hp - 104] = _s5kYc::P64;
           _c5lAg::P64 = Hp - 168;
           P64[Hp - 96] = _c5lAg::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           _c5lAh::P64 = Hp - 128;
           P64[Hp - 72] = _c5lAh::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5lAg::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5lAh::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.712495046 UTC

[section ""data" . Data.OldList.mapAccumL_closure" {
     Data.OldList.mapAccumL_closure:
         const Data.OldList.mapAccumL_info;
 },
 Data.OldList.mapAccumL_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lAV,
                       label: Data.OldList.mapAccumL_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lAV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5lAW; else goto c5lAX;
       c5lAW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.mapAccumL_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lAX: // global
           I64[Sp - 8] = block_c5lAS_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wmapAccumL_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lAS() //  [R1, R2]
         { info_tbl: [(c5lAS,
                       label: block_c5lAS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lAS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lB0; else goto c5lAZ;
       c5lB0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5lAZ: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.715284676 UTC

[section ""data" . Data.OldList.$wmapAccumR_closure" {
     Data.OldList.$wmapAccumR_closure:
         const Data.OldList.$wmapAccumR_info;
 },
 ds_s5kYL_entry() //  [R1]
         { info_tbl: [(c5lBi,
                       label: ds_s5kYL_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lBi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5lBj; else goto c5lBk;
       c5lBj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lBk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5lBf_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wmapAccumR_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5lBf() //  [R1, R2]
         { info_tbl: [(c5lBf,
                       label: block_c5lBf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lBf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lBn; else goto c5lBm;
       c5lBn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5lBm: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds1_s5kYP_entry() //  [R1]
         { info_tbl: [(c5lBt,
                       label: ds1_s5kYP_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lBt: // global
           _s5kYP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5lBu; else goto c5lBv;
       c5lBv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lBx; else goto c5lBw;
       c5lBx: // global
           HpAlloc = 24;
           goto c5lBu;
       c5lBu: // global
           R1 = _s5kYP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lBw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5kYP::P64;
           _s5kYF::P64 = P64[_s5kYP::P64 + 16];
           _s5kYJ::P64 = P64[_s5kYP::P64 + 24];
           _s5kYL::P64 = P64[_s5kYP::P64 + 32];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s5kYL::P64;
           R3 = _s5kYJ::P64;
           R2 = Hp - 16;
           R1 = _s5kYF::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wmapAccumR_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lBC,
                       label: Data.OldList.$wmapAccumR_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lBC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5lBD; else goto c5lBE;
       c5lBD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$wmapAccumR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lBE: // global
           I64[Sp - 24] = block_c5lB5_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5lBO; else goto c5lB6;
       u5lBO: // global
           call _c5lB5(R1) args: 0, res: 0, upd: 0;
       c5lB6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lB5() //  [R1]
         { info_tbl: [(c5lB5,
                       label: block_c5lB5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lB5: // global
           _s5kYG::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5lBz; else goto c5lBA;
       c5lBz: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = _s5kYG::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5lBA: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c5lBN; else goto c5lBM;
       c5lBN: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lBM: // global
           _s5kYJ::P64 = P64[R1 + 6];
           _s5kYK::P64 = P64[R1 + 14];
           I64[Hp - 168] = ds_s5kYL_info;
           _s5kYF::P64 = P64[Sp + 8];
           P64[Hp - 152] = _s5kYF::P64;
           P64[Hp - 144] = _s5kYG::P64;
           P64[Hp - 136] = _s5kYK::P64;
           I64[Hp - 128] = ds1_s5kYP_info;
           P64[Hp - 112] = _s5kYF::P64;
           P64[Hp - 104] = _s5kYJ::P64;
           _c5lBb::P64 = Hp - 168;
           P64[Hp - 96] = _c5lBb::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5lBb::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c5lBo::P64 = Hp - 128;
           P64[Hp - 48] = _c5lBo::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5lBo::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.718711254 UTC

[section ""data" . Data.OldList.mapAccumR_closure" {
     Data.OldList.mapAccumR_closure:
         const Data.OldList.mapAccumR_info;
 },
 Data.OldList.mapAccumR_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lBW,
                       label: Data.OldList.mapAccumR_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lBW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5lBX; else goto c5lBY;
       c5lBX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.mapAccumR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lBY: // global
           I64[Sp - 8] = block_c5lBT_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wmapAccumR_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lBT() //  [R1, R2]
         { info_tbl: [(c5lBT,
                       label: block_c5lBT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lBT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lC1; else goto c5lC0;
       c5lC1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5lC0: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.721180378 UTC

[section ""data" . Data.OldList.insertBy_closure" {
     Data.OldList.insertBy_closure:
         const Data.OldList.insertBy_info;
 },
 Data.OldList.insertBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lC9,
                       label: Data.OldList.insertBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lC9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5lCa; else goto c5lCb;
       c5lCa: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.insertBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lCb: // global
           I64[Sp - 8] = block_c5lC6_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$winsertBy_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lC6() //  [R1, R2]
         { info_tbl: [(c5lC6,
                       label: block_c5lC6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lC6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lCe; else goto c5lCd;
       c5lCe: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5lCd: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Data.OldList.$winsertBy_closure" {
     Data.OldList.$winsertBy_closure:
         const Data.OldList.$winsertBy_info;
 },
 sat_s5kZq_entry() //  [R1]
         { info_tbl: [(c5lCy,
                       label: sat_s5kZq_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lCy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lCz; else goto c5lCA;
       c5lCz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lCA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.insertBy_entry(R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$winsertBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lCF,
                       label: Data.OldList.$winsertBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lCF: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5lCG; else goto c5lCH;
       c5lCG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$winsertBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lCH: // global
           I64[Sp - 24] = block_c5lCj_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5lCU; else goto c5lCk;
       u5lCU: // global
           call _c5lCj(R1) args: 0, res: 0, upd: 0;
       c5lCk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lCj() //  [R1]
         { info_tbl: [(c5lCj,
                       label: block_c5lCj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lCj: // global
           _s5kZk::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5lCC; else goto c5lCD;
       c5lCC: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = _s5kZk::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5lCD: // global
           I64[Sp - 24] = block_c5lCp_info;
           _s5kZn::P64 = P64[R1 + 6];
           R3 = _s5kZn::P64;
           R2 = _s5kZk::P64;
           _s5kZm::P64 = R1;
           _s5kZo::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp - 16] = _s5kZn::P64;
           P64[Sp - 8] = _s5kZo::P64;
           P64[Sp] = _s5kZm::P64;
           Sp = Sp - 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lCp() //  [R1]
         { info_tbl: [(c5lCp,
                       label: block_c5lCp_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lCp: // global
           _s5kZk::P64 = P64[Sp + 40];
           if (R1 & 7 == 3) goto c5lCP; else goto c5lCO;
       c5lCP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5lCS; else goto c5lCR;
       c5lCS: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lCR: // global
           I64[Hp - 32] = sat_s5kZq_info;
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = _s5kZk::P64;
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 32;
           R1 = P64[Sp + 8];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5lCO: // global
           R2 = P64[Sp + 24];
           R1 = _s5kZk::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.724463878 UTC

[section ""data" . Data.OldList.insert_closure" {
     Data.OldList.insert_closure:
         const Data.OldList.insert_info;
 },
 sat_s5kZu_entry() //  [R1]
         { info_tbl: [(c5lD3,
                       label: sat_s5kZu_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lD3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lD4; else goto c5lD5;
       c5lD4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lD5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.insert_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lD9,
                       label: Data.OldList.insert_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lD9: // global
           _s5kZt::P64 = R4;
           _s5kZs::P64 = R3;
           _s5kZr::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5lDa; else goto c5lDb;
       c5lDb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lDd; else goto c5lDc;
       c5lDd: // global
           HpAlloc = 24;
           goto c5lDa;
       c5lDa: // global
           R4 = _s5kZt::P64;
           R3 = _s5kZs::P64;
           R2 = _s5kZr::P64;
           R1 = Data.OldList.insert_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lDc: // global
           I64[Hp - 16] = sat_s5kZu_info;
           P64[Hp] = _s5kZr::P64;
           I64[Sp - 8] = block_c5lD6_info;
           R4 = _s5kZt::P64;
           R3 = _s5kZs::P64;
           R2 = Hp - 16;
           Sp = Sp - 8;
           call Data.OldList.$winsertBy_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lD6() //  [R1, R2]
         { info_tbl: [(c5lD6,
                       label: block_c5lD6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lD6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lDg; else goto c5lDf;
       c5lDg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5lDf: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.726076241 UTC

[section ""cstring" . lvl_r5kSh_bytes" {
     lvl_r5kSh_bytes:
         I8[] [76,105,115,116,46,109,97,120,105,109,117,109,66,121,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.726954095 UTC

[section ""data" . Data.OldList.maximumBy1_closure" {
     Data.OldList.maximumBy1_closure:
         const Data.OldList.maximumBy1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.OldList.maximumBy1_entry() //  [R1]
         { info_tbl: [(c5lDp,
                       label: Data.OldList.maximumBy1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lDp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5lDq; else goto c5lDr;
       c5lDq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lDr: // global
           (_c5lDk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5lDk::I64 == 0) goto c5lDm; else goto c5lDl;
       c5lDm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5lDl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5lDk::I64;
           I64[Sp - 24] = block_c5lDn_info;
           R2 = lvl_r5kSh_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5lDn() //  [R1]
         { info_tbl: [(c5lDn,
                       label: block_c5lDn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lDn: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.729022994 UTC

[section ""data" . Data.OldList.maximumBy_closure" {
     Data.OldList.maximumBy_closure:
         const Data.OldList.maximumBy_info;
         const 0;
 },
 sat_s5kZL_entry() //  [R1]
         { info_tbl: [(c5lE1,
                       label: sat_s5kZL_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lE1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5lE2; else goto c5lE3;
       c5lE2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lE3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c5lDV_info;
           _s5kZI::P64 = P64[R1 + 32];
           R3 = _s5kZI::P64;
           _s5kZG::P64 = P64[R1 + 24];
           R2 = _s5kZG::P64;
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s5kZG::P64;
           P64[Sp - 24] = _s5kZI::P64;
           Sp = Sp - 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5lDV() //  [R1]
         { info_tbl: [(c5lDV,
                       label: block_c5lDV_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lDV: // global
           if (R1 & 7 == 3) goto c5lDZ; else goto c5lDY;
       c5lDZ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c5lDY: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.maximumBy_entry() //  [R2, R3]
         { info_tbl: [(c5lEe,
                       label: Data.OldList.maximumBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lEe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lEf; else goto c5lEg;
       c5lEf: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.maximumBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lEg: // global
           I64[Sp - 16] = block_c5lDA_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5lEz; else goto c5lDB;
       u5lEz: // global
           call _c5lDA(R1) args: 0, res: 0, upd: 0;
       c5lDB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lDA() //  [R1]
         { info_tbl: [(c5lDA,
                       label: block_c5lDA_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lDA: // global
           if (R1 & 7 == 1) goto c5lEb; else goto c5lEc;
       c5lEb: // global
           R1 = Data.OldList.maximumBy1_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5lEc: // global
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = P64[R1 + 14];
           Sp = Sp - 8;
           call _c5lDJ() args: 0, res: 0, upd: 0;
     }
 },
 _c5lDJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lDJ: // global
           I64[Sp - 8] = block_c5lDL_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lEx; else goto c5lDM;
       u5lEx: // global
           call _c5lDL(R1) args: 0, res: 0, upd: 0;
       c5lDM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lDL() //  [R1]
         { info_tbl: [(c5lDL,
                       label: block_c5lDL_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lDL: // global
           _s5kZG::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5lEo; else goto c5lEp;
       c5lEo: // global
           R1 = _s5kZG::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5lEp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5lEs; else goto c5lEr;
       c5lEs: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lEr: // global
           _s5kZI::P64 = P64[R1 + 6];
           _s5kZJ::P64 = P64[R1 + 14];
           I64[Hp - 32] = sat_s5kZL_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s5kZG::P64;
           P64[Hp] = _s5kZI::P64;
           P64[Sp + 16] = _s5kZJ::P64;
           P64[Sp + 8] = Hp - 32;
           Sp = Sp + 8;
           call _c5lDJ() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.731614429 UTC

[section ""cstring" . lvl1_r5kSi_bytes" {
     lvl1_r5kSi_bytes:
         I8[] [76,105,115,116,46,109,105,110,105,109,117,109,66,121,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.732617625 UTC

[section ""data" . Data.OldList.minimumBy1_closure" {
     Data.OldList.minimumBy1_closure:
         const Data.OldList.minimumBy1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.OldList.minimumBy1_entry() //  [R1]
         { info_tbl: [(c5lEI,
                       label: Data.OldList.minimumBy1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lEI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5lEJ; else goto c5lEK;
       c5lEJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lEK: // global
           (_c5lED::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5lED::I64 == 0) goto c5lEF; else goto c5lEE;
       c5lEF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5lEE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5lED::I64;
           I64[Sp - 24] = block_c5lEG_info;
           R2 = lvl1_r5kSi_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5lEG() //  [R1]
         { info_tbl: [(c5lEG,
                       label: block_c5lEG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lEG: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.735232069 UTC

[section ""data" . Data.OldList.minimumBy_closure" {
     Data.OldList.minimumBy_closure:
         const Data.OldList.minimumBy_info;
         const 0;
 },
 sat_s5kZZ_entry() //  [R1]
         { info_tbl: [(c5lFj,
                       label: sat_s5kZZ_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lFj: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5lFk; else goto c5lFl;
       c5lFk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lFl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c5lFd_info;
           _s5kZW::P64 = P64[R1 + 32];
           R3 = _s5kZW::P64;
           _s5kZU::P64 = P64[R1 + 24];
           R2 = _s5kZU::P64;
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s5kZU::P64;
           P64[Sp - 24] = _s5kZW::P64;
           Sp = Sp - 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5lFd() //  [R1]
         { info_tbl: [(c5lFd,
                       label: block_c5lFd_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lFd: // global
           if (R1 & 7 == 3) goto c5lFh; else goto c5lFg;
       c5lFh: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c5lFg: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.minimumBy_entry() //  [R2, R3]
         { info_tbl: [(c5lFw,
                       label: Data.OldList.minimumBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lFw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lFx; else goto c5lFy;
       c5lFx: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.minimumBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lFy: // global
           I64[Sp - 16] = block_c5lES_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5lFR; else goto c5lET;
       u5lFR: // global
           call _c5lES(R1) args: 0, res: 0, upd: 0;
       c5lET: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lES() //  [R1]
         { info_tbl: [(c5lES,
                       label: block_c5lES_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lES: // global
           if (R1 & 7 == 1) goto c5lFt; else goto c5lFu;
       c5lFt: // global
           R1 = Data.OldList.minimumBy1_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5lFu: // global
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = P64[R1 + 14];
           Sp = Sp - 8;
           call _c5lF1() args: 0, res: 0, upd: 0;
     }
 },
 _c5lF1() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lF1: // global
           I64[Sp - 8] = block_c5lF3_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lFP; else goto c5lF4;
       u5lFP: // global
           call _c5lF3(R1) args: 0, res: 0, upd: 0;
       c5lF4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lF3() //  [R1]
         { info_tbl: [(c5lF3,
                       label: block_c5lF3_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lF3: // global
           _s5kZU::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5lFG; else goto c5lFH;
       c5lFG: // global
           R1 = _s5kZU::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5lFH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5lFK; else goto c5lFJ;
       c5lFK: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lFJ: // global
           _s5kZW::P64 = P64[R1 + 6];
           _s5kZX::P64 = P64[R1 + 14];
           I64[Hp - 32] = sat_s5kZZ_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s5kZU::P64;
           P64[Hp] = _s5kZW::P64;
           P64[Sp + 16] = _s5kZX::P64;
           P64[Sp + 8] = Hp - 32;
           Sp = Sp + 8;
           call _c5lF1() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.738541179 UTC

[section ""data" . sat_s5l00_closure" {
     sat_s5l00_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.73921843 UTC

[section ""data" . sat_s5l01_closure" {
     sat_s5l01_closure:
         const :_con_info;
         const sat_s5l00_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.740167876 UTC

[section ""data" . Data.OldList.genericLength2_closure" {
     Data.OldList.genericLength2_closure:
         const Data.OldList.genericLength2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.OldList.genericLength2_entry() //  [R1]
         { info_tbl: [(c5lFY,
                       label: Data.OldList.genericLength2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lFY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lFZ; else goto c5lG0;
       c5lFZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lG0: // global
           (_c5lFV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5lFV::I64 == 0) goto c5lFX; else goto c5lFW;
       c5lFX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5lFW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5lFV::I64;
           R3 = sat_s5l01_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.741475697 UTC

[section ""data" . Data.OldList.genericLength1_closure" {
     Data.OldList.genericLength1_closure:
         const Data.OldList.genericLength1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.OldList.genericLength1_entry() //  [R1]
         { info_tbl: [(c5lG7,
                       label: Data.OldList.genericLength1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lG7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lG8; else goto c5lG9;
       c5lG8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lG9: // global
           (_c5lG4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5lG4::I64 == 0) goto c5lG6; else goto c5lG5;
       c5lG6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5lG5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5lG4::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.743417653 UTC

[section ""data" . Data.OldList.strictGenericLength_closure" {
     Data.OldList.strictGenericLength_closure:
         const Data.OldList.strictGenericLength_info;
         const 0;
 },
 lvl12_s5l04_entry() //  [R1]
         { info_tbl: [(c5lGj,
                       label: lvl12_s5l04_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lGj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lGk; else goto c5lGl;
       c5lGk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lGl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l0c_entry() //  [R1]
         { info_tbl: [(c5lGp,
                       label: sat_s5l0c_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lGp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lGq; else goto c5lGr;
       c5lGq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lGr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.OldList.strictGenericLength_entry() //  [R2, R3]
         { info_tbl: [(c5lGu,
                       label: Data.OldList.strictGenericLength_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lGu: // global
           _s5l03::P64 = R3;
           _s5l02::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c5lGv; else goto c5lGw;
       c5lGw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5lGy; else goto c5lGx;
       c5lGy: // global
           HpAlloc = 48;
           goto c5lGv;
       c5lGv: // global
           R3 = _s5l03::P64;
           R2 = _s5l02::P64;
           R1 = Data.OldList.strictGenericLength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lGx: // global
           I64[Hp - 40] = lvl12_s5l04_info;
           P64[Hp - 24] = _s5l02::P64;
           I64[Hp - 16] = sat_s5l0c_info;
           P64[Hp] = _s5l02::P64;
           P64[Sp - 32] = Hp - 40;
           P64[Sp - 24] = _s5l02::P64;
           P64[Sp - 16] = _s5l03::P64;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 32;
           call _c5lGA() args: 0, res: 0, upd: 0;
     }
 },
 _c5lGA() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lGA: // global
           I64[Sp - 8] = block_c5lGC_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lGW; else goto c5lGE;
       u5lGW: // global
           call _c5lGC(R1) args: 0, res: 0, upd: 0;
       c5lGE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lGC() //  [R1]
         { info_tbl: [(c5lGC,
                       label: block_c5lGC_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lGC: // global
           _s5l07::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5lGK; else goto c5lGP;
       c5lGK: // global
           R1 = _s5l07::P64;
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5lGP: // global
           I64[Sp] = block_c5lGN_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s5l07::P64;
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 14];
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5lGN() //  [R1]
         { info_tbl: [(c5lGN,
                       label: block_c5lGN_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lGN: // global
           P64[Sp + 24] = P64[Sp + 32];
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c5lGA() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.746672607 UTC

[section ""data" . Data.OldList.genericLength_closure" {
     Data.OldList.genericLength_closure:
         const Data.OldList.genericLength_info;
         const 0;
 },
 sat_s5l0j_entry() //  [R1]
         { info_tbl: [(c5lHc,
                       label: sat_s5l0j_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lHc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lHd; else goto c5lHe;
       c5lHd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lHe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.genericLength_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l0i_entry() //  [R1]
         { info_tbl: [(c5lHj,
                       label: sat_s5l0i_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lHj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lHk; else goto c5lHl;
       c5lHk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lHl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.OldList.genericLength_entry() //  [R2, R3]
         { info_tbl: [(c5lHq,
                       label: Data.OldList.genericLength_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lHq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5lHr; else goto c5lHs;
       c5lHr: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericLength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lHs: // global
           I64[Sp - 16] = block_c5lH2_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5lHy; else goto c5lH3;
       u5lHy: // global
           call _c5lH2(R1) args: 0, res: 0, upd: 0;
       c5lH3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lH2() //  [R1]
         { info_tbl: [(c5lH2,
                       label: block_c5lH2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lH2: // global
           _s5l0d::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5lHn; else goto c5lHo;
       c5lHn: // global
           R2 = _s5l0d::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = Data.OldList.genericLength1_closure;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
       c5lHo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5lHx; else goto c5lHw;
       c5lHx: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lHw: // global
           _s5l0h::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s5l0j_info;
           P64[Hp - 32] = _s5l0d::P64;
           P64[Hp - 24] = _s5l0h::P64;
           I64[Hp - 16] = sat_s5l0i_info;
           P64[Hp] = _s5l0d::P64;
           R2 = _s5l0d::P64;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Hp - 16;
           P64[Sp + 8] = Hp - 48;
           Sp = Sp - 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.751972914 UTC

[section ""data" . Data.OldList.genericTake_closure" {
     Data.OldList.genericTake_closure:
         const Data.OldList.genericTake_info;
         const 0;
 },
 $dNum_s5l0o_entry() //  [R1]
         { info_tbl: [(c5lHL,
                       label: $dNum_s5l0o_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lHL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lHM; else goto c5lHN;
       c5lHM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lHN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l0q_entry() //  [R1]
         { info_tbl: [(c5lHS,
                       label: sat_s5l0q_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lHS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lHT; else goto c5lHU;
       c5lHT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lHU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l0v_entry() //  [R1]
         { info_tbl: [(c5lIl,
                       label: sat_s5l0v_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lIl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lIm; else goto c5lIn;
       c5lIm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lIn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l0w_entry() //  [R1]
         { info_tbl: [(c5lIo,
                       label: sat_s5l0w_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lIo: // global
           _s5l0w::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5lIp; else goto c5lIq;
       c5lIq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lIs; else goto c5lIr;
       c5lIs: // global
           HpAlloc = 24;
           goto c5lIp;
       c5lIp: // global
           R1 = _s5l0w::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lIr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l0w::P64;
           _s5l0l::P64 = P64[_s5l0w::P64 + 16];
           _s5l0o::P64 = P64[_s5l0w::P64 + 24];
           I64[Hp - 16] = sat_s5l0v_info;
           P64[Hp] = _s5l0o::P64;
           R2 = _s5l0o::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s5l0l::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5l0x_entry() //  [R1]
         { info_tbl: [(c5lIt,
                       label: sat_s5l0x_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lIt: // global
           _s5l0x::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5lIu; else goto c5lIv;
       c5lIv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5lIx; else goto c5lIw;
       c5lIx: // global
           HpAlloc = 32;
           goto c5lIu;
       c5lIu: // global
           R1 = _s5l0x::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lIw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l0x::P64;
           _s5l0k::P64 = P64[_s5l0x::P64 + 16];
           _s5l0l::P64 = P64[_s5l0x::P64 + 24];
           _s5l0o::P64 = P64[_s5l0x::P64 + 32];
           _s5l0u::P64 = P64[_s5l0x::P64 + 40];
           I64[Hp - 24] = sat_s5l0w_info;
           P64[Hp - 8] = _s5l0l::P64;
           P64[Hp] = _s5l0o::P64;
           R4 = _s5l0u::P64;
           R3 = Hp - 24;
           R2 = _s5l0k::P64;
           Sp = Sp - 16;
           call Data.OldList.genericTake_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.genericTake_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lIy,
                       label: Data.OldList.genericTake_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lIy: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5lIz; else goto c5lIA;
       c5lIz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericTake_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lIA: // global
           I64[Sp - 32] = block_c5lHD_info;
           _s5l0k::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s5l0k::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lHD() //  [R1]
         { info_tbl: [(c5lHD,
                       label: block_c5lHD_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lHD: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5lID; else goto c5lIC;
       c5lID: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lIC: // global
           I64[Hp - 40] = $dNum_s5l0o_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s5l0q_info;
           _c5lHH::P64 = Hp - 40;
           P64[Hp] = _c5lHH::P64;
           I64[Sp - 16] = block_c5lHV_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = _c5lHH::P64;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lHV() //  [R1]
         { info_tbl: [(c5lHV,
                       label: block_c5lHV_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lHV: // global
           _c5lHO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5lHZ_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c5lHO::P64;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5lHZ() //  [R1]
         { info_tbl: [(c5lHZ,
                       label: block_c5lHZ_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lHZ: // global
           if (R1 & 7 == 1) goto c5lIH; else goto u5lIX;
       c5lIH: // global
           I64[Sp] = block_c5lI3_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto u5lIZ; else goto c5lI4;
       u5lIZ: // global
           call _c5lI3(R1) args: 0, res: 0, upd: 0;
       c5lI4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u5lIX: // global
           Sp = Sp + 40;
           call _c5lIU() args: 0, res: 0, upd: 0;
     }
 },
 _c5lI3() //  [R1]
         { info_tbl: [(c5lI3,
                       label: block_c5lI3_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lI3: // global
           if (R1 & 7 == 1) goto u5lIY; else goto c5lIN;
       u5lIY: // global
           Sp = Sp + 40;
           call _c5lIU() args: 0, res: 0, upd: 0;
       c5lIN: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5lIQ; else goto c5lIP;
       c5lIQ: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lIP: // global
           _s5l0t::P64 = P64[R1 + 6];
           _s5l0u::P64 = P64[R1 + 14];
           I64[Hp - 64] = sat_s5l0x_info;
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s5l0u::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l0t::P64;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5lIU() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lIU: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.756323674 UTC

[section ""data" . Data.OldList.genericReplicate_closure" {
     Data.OldList.genericReplicate_closure:
         const Data.OldList.genericReplicate_info;
         const 0;
 },
 sat_s5l0B_entry() //  [R1]
         { info_tbl: [(c5lJa,
                       label: sat_s5l0B_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lJa: // global
           R2 = P64[R1 + 16];
           call GHC.List.repeat_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.genericReplicate_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lJd,
                       label: Data.OldList.genericReplicate_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lJd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lJh; else goto c5lJg;
       c5lJh: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericReplicate_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lJg: // global
           I64[Hp - 16] = sat_s5l0B_info;
           P64[Hp] = R4;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           call Data.OldList.genericTake_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.759084605 UTC

[section ""data" . Data.OldList.genericDrop_closure" {
     Data.OldList.genericDrop_closure:
         const Data.OldList.genericDrop_info;
         const 0;
 },
 $dNum_s5l0G_entry() //  [R1]
         { info_tbl: [(c5lJL,
                       label: $dNum_s5l0G_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lJL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lJM; else goto c5lJN;
       c5lJM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lJN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l0I_entry() //  [R1]
         { info_tbl: [(c5lJQ,
                       label: sat_s5l0I_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lJQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lJR; else goto c5lJS;
       c5lJR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lJS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l0N_entry() //  [R1]
         { info_tbl: [(c5lK0,
                       label: sat_s5l0N_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lK0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lK1; else goto c5lK2;
       c5lK1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lK2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l0O_entry() //  [R1]
         { info_tbl: [(c5lK3,
                       label: sat_s5l0O_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lK3: // global
           _s5l0O::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5lK4; else goto c5lK5;
       c5lK5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lK7; else goto c5lK6;
       c5lK7: // global
           HpAlloc = 24;
           goto c5lK4;
       c5lK4: // global
           R1 = _s5l0O::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lK6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l0O::P64;
           _s5l0D::P64 = P64[_s5l0O::P64 + 16];
           _s5l0G::P64 = P64[_s5l0O::P64 + 24];
           I64[Hp - 16] = sat_s5l0N_info;
           P64[Hp] = _s5l0G::P64;
           R2 = _s5l0G::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s5l0D::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 Data.OldList.genericDrop_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lK8,
                       label: Data.OldList.genericDrop_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lK8: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5lK9; else goto u5lKw;
       c5lK9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericDrop_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5lKw: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5lJj() args: 0, res: 0, upd: 0;
     }
 },
 _c5lJj() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lJj: // global
           I64[Sp - 8] = block_c5lJm_info;
           R2 = P64[Sp];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lJm() //  [R1]
         { info_tbl: [(c5lJm,
                       label: block_c5lJm_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lJm: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5lKd; else goto c5lKc;
       c5lKd: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lKc: // global
           I64[Hp - 40] = $dNum_s5l0G_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s5l0I_info;
           _c5lJq::P64 = Hp - 40;
           P64[Hp] = _c5lJq::P64;
           I64[Sp - 16] = block_c5lJu_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = _c5lJq::P64;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lJu() //  [R1]
         { info_tbl: [(c5lJu,
                       label: block_c5lJu_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lJu: // global
           _c5lJs::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5lJy_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c5lJs::P64;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5lJy() //  [R1]
         { info_tbl: [(c5lJy,
                       label: block_c5lJy_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lJy: // global
           _s5l0E::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5lKh; else goto c5lKt;
       c5lKh: // global
           I64[Sp] = block_c5lJC_info;
           R1 = _s5l0E::P64;
           if (R1 & 7 != 0) goto u5lKy; else goto c5lJD;
       u5lKy: // global
           call _c5lJC(R1) args: 0, res: 0, upd: 0;
       c5lJD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5lKt: // global
           R1 = _s5l0E::P64 & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5lJC() //  [R1]
         { info_tbl: [(c5lJC,
                       label: block_c5lJC_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lJC: // global
           if (R1 & 7 == 1) goto c5lKl; else goto c5lKm;
       c5lKl: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5lKm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5lKp; else goto c5lKo;
       c5lKp: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lKo: // global
           _s5l0M::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_s5l0O_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 32] = _s5l0M::P64;
           Sp = Sp + 16;
           call _c5lJj() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.76433298 UTC

[section ""data" . Data.OldList.$wgenericSplitAt_closure" {
     Data.OldList.$wgenericSplitAt_closure:
         const Data.OldList.$wgenericSplitAt_info;
         const 0;
 },
 $dNum_s5l0T_entry() //  [R1]
         { info_tbl: [(c5lKN,
                       label: $dNum_s5l0T_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lKN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lKO; else goto c5lKP;
       c5lKO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lKP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l0V_entry() //  [R1]
         { info_tbl: [(c5lKU,
                       label: sat_s5l0V_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lKU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lKV; else goto c5lKW;
       c5lKV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lKW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l11_entry() //  [R1]
         { info_tbl: [(c5lLn,
                       label: sat_s5l11_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lLn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lLo; else goto c5lLp;
       c5lLo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lLp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l12_entry() //  [R1]
         { info_tbl: [(c5lLq,
                       label: sat_s5l12_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lLq: // global
           _s5l12::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5lLr; else goto c5lLs;
       c5lLs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lLu; else goto c5lLt;
       c5lLu: // global
           HpAlloc = 24;
           goto c5lLr;
       c5lLr: // global
           R1 = _s5l12::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lLt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l12::P64;
           _s5l0Q::P64 = P64[_s5l12::P64 + 16];
           _s5l0T::P64 = P64[_s5l12::P64 + 24];
           I64[Hp - 16] = sat_s5l11_info;
           P64[Hp] = _s5l0T::P64;
           R2 = _s5l0T::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s5l0Q::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 ds_s5l10_entry() //  [R1]
         { info_tbl: [(c5lLy,
                       label: ds_s5l10_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lLy: // global
           _s5l10::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5lLz; else goto c5lLA;
       c5lLA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5lLC; else goto c5lLB;
       c5lLC: // global
           HpAlloc = 32;
           goto c5lLz;
       c5lLz: // global
           R1 = _s5l10::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lLB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l10::P64;
           _s5l0P::P64 = P64[_s5l10::P64 + 16];
           _s5l0Q::P64 = P64[_s5l10::P64 + 24];
           _s5l0T::P64 = P64[_s5l10::P64 + 32];
           _s5l0Z::P64 = P64[_s5l10::P64 + 40];
           I64[Hp - 24] = sat_s5l12_info;
           P64[Hp - 8] = _s5l0Q::P64;
           P64[Hp] = _s5l0T::P64;
           I64[Sp - 24] = block_c5lLv_info;
           R4 = _s5l0Z::P64;
           R3 = Hp - 24;
           R2 = _s5l0P::P64;
           Sp = Sp - 24;
           call Data.OldList.$wgenericSplitAt_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5lLv() //  [R1, R2]
         { info_tbl: [(c5lLv,
                       label: block_c5lLv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lLv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lLF; else goto c5lLE;
       c5lLF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5lLE: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wgenericSplitAt_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lLG,
                       label: Data.OldList.$wgenericSplitAt_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lLG: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5lLH; else goto c5lLI;
       c5lLH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$wgenericSplitAt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lLI: // global
           I64[Sp - 32] = block_c5lKF_info;
           _s5l0P::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s5l0P::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lKF() //  [R1]
         { info_tbl: [(c5lKF,
                       label: block_c5lKF_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lKF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5lLL; else goto c5lLK;
       c5lLL: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lLK: // global
           I64[Hp - 40] = $dNum_s5l0T_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s5l0V_info;
           _c5lKJ::P64 = Hp - 40;
           P64[Hp] = _c5lKJ::P64;
           I64[Sp - 16] = block_c5lKX_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = _c5lKJ::P64;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lKX() //  [R1]
         { info_tbl: [(c5lKX,
                       label: block_c5lKX_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lKX: // global
           _c5lKQ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5lL1_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c5lKQ::P64;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5lL1() //  [R1]
         { info_tbl: [(c5lL1,
                       label: block_c5lL1_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lL1: // global
           _s5l0R::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5lLP; else goto c5lM4;
       c5lLP: // global
           I64[Sp] = block_c5lL5_info;
           R1 = _s5l0R::P64;
           if (R1 & 7 != 0) goto u5lM7; else goto c5lL6;
       u5lM7: // global
           call _c5lL5(R1) args: 0, res: 0, upd: 0;
       c5lL6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5lM4: // global
           R2 = _s5l0R::P64;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5lL5() //  [R1]
         { info_tbl: [(c5lL5,
                       label: block_c5lL5_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lL5: // global
           if (R1 & 7 == 1) goto c5lLT; else goto c5lLX;
       c5lLT: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5lLX: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c5lM0; else goto c5lLZ;
       c5lM0: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lLZ: // global
           _s5l0Y::P64 = P64[R1 + 6];
           _s5l0Z::P64 = P64[R1 + 14];
           I64[Hp - 112] = ds_s5l10_info;
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = _s5l0Z::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c5lLb::P64 = Hp - 112;
           P64[Hp - 48] = _c5lLb::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5lLb::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l0Y::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.768957103 UTC

[section ""data" . Data.OldList.genericSplitAt_closure" {
     Data.OldList.genericSplitAt_closure:
         const Data.OldList.genericSplitAt_info;
         const 0;
 },
 Data.OldList.genericSplitAt_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lMf,
                       label: Data.OldList.genericSplitAt_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lMf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5lMg; else goto c5lMh;
       c5lMg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericSplitAt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lMh: // global
           I64[Sp - 8] = block_c5lMc_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wgenericSplitAt_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lMc() //  [R1, R2]
         { info_tbl: [(c5lMc,
                       label: block_c5lMc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lMc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lMk; else goto c5lMj;
       c5lMk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5lMj: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.770265819 UTC

[section ""cstring" . lvl2_r5kSj_bytes" {
     lvl2_r5kSj_bytes:
         I8[] [76,105,115,116,46,103,101,110,101,114,105,99,73,110,100,101,120,58,32,110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116,46]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.771205563 UTC

[section ""data" . lvl3_r5kSk_closure" {
     lvl3_r5kSk_closure:
         const lvl3_r5kSk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r5kSk_entry() //  [R1]
         { info_tbl: [(c5lMt,
                       label: lvl3_r5kSk_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lMt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5lMu; else goto c5lMv;
       c5lMu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lMv: // global
           (_c5lMo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5lMo::I64 == 0) goto c5lMq; else goto c5lMp;
       c5lMq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5lMp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5lMo::I64;
           I64[Sp - 24] = block_c5lMr_info;
           R2 = lvl2_r5kSj_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5lMr() //  [R1]
         { info_tbl: [(c5lMr,
                       label: block_c5lMr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lMr: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.77232113 UTC

[section ""cstring" . lvl4_r5kSl_bytes" {
     lvl4_r5kSl_bytes:
         I8[] [76,105,115,116,46,103,101,110,101,114,105,99,73,110,100,101,120,58,32,105,110,100,101,120,32,116,111,111,32,108,97,114,103,101,46]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.773166269 UTC

[section ""data" . lvl5_r5kSm_closure" {
     lvl5_r5kSm_closure:
         const lvl5_r5kSm_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r5kSm_entry() //  [R1]
         { info_tbl: [(c5lMH,
                       label: lvl5_r5kSm_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lMH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5lMI; else goto c5lMJ;
       c5lMI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lMJ: // global
           (_c5lMC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5lMC::I64 == 0) goto c5lME; else goto c5lMD;
       c5lME: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5lMD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5lMC::I64;
           I64[Sp - 24] = block_c5lMF_info;
           R2 = lvl4_r5kSl_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5lMF() //  [R1]
         { info_tbl: [(c5lMF,
                       label: block_c5lMF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lMF: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.777835976 UTC

[section ""data" . Data.OldList.genericIndex_closure" {
     Data.OldList.genericIndex_closure:
         const Data.OldList.genericIndex_info;
         const 0;
 },
 $dNum_s5l1u_entry() //  [R1]
         { info_tbl: [(c5lNr,
                       label: $dNum_s5l1u_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lNr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lNs; else goto c5lNt;
       c5lNs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lNt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l1x_entry() //  [R1]
         { info_tbl: [(c5lNw,
                       label: sat_s5l1x_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lNw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lNx; else goto c5lNy;
       c5lNx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lNy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l1z_entry() //  [R1]
         { info_tbl: [(c5lNB,
                       label: sat_s5l1z_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lNB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lNC; else goto c5lND;
       c5lNC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lND: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l1B_entry() //  [R1]
         { info_tbl: [(c5lNL,
                       label: sat_s5l1B_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lNL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lNM; else goto c5lNN;
       c5lNM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lNN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l1C_entry() //  [R1]
         { info_tbl: [(c5lNO,
                       label: sat_s5l1C_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lNO: // global
           _s5l1C::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5lNP; else goto c5lNQ;
       c5lNQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lNS; else goto c5lNR;
       c5lNS: // global
           HpAlloc = 24;
           goto c5lNP;
       c5lNP: // global
           R1 = _s5l1C::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lNR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l1C::P64;
           _s5l1p::P64 = P64[_s5l1C::P64 + 16];
           _s5l1u::P64 = P64[_s5l1C::P64 + 24];
           I64[Hp - 16] = sat_s5l1B_info;
           P64[Hp] = _s5l1u::P64;
           R2 = _s5l1u::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s5l1p::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 Data.OldList.genericIndex_entry() //  [R2, R3, R4]
         { info_tbl: [(c5lNX,
                       label: Data.OldList.genericIndex_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lNX: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c5lNY; else goto u5lOt;
       c5lNY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericIndex_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5lOt: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5lMO() args: 0, res: 0, upd: 0;
     }
 },
 _c5lMO() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lMO: // global
           I64[Sp - 8] = block_c5lMR_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lOv; else goto c5lMS;
       u5lOv: // global
           call _c5lMR(R1) args: 0, res: 0, upd: 0;
       c5lMS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lMR() //  [R1]
         { info_tbl: [(c5lMR,
                       label: block_c5lMR_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lMR: // global
           if (R1 & 7 == 1) goto c5lNU; else goto c5lNV;
       c5lNU: // global
           R1 = lvl5_r5kSm_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5lNV: // global
           I64[Sp - 8] = block_c5lMX_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 16] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lMX() //  [R1]
         { info_tbl: [(c5lMX,
                       label: block_c5lMX_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lMX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lO5; else goto c5lO4;
       c5lO5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lO4: // global
           I64[Hp - 16] = $dNum_s5l1u_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c5lN3_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lN3() //  [R1]
         { info_tbl: [(c5lN3,
                       label: block_c5lN3_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lN3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lO8; else goto c5lO7;
       c5lO8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lO7: // global
           I64[Hp - 16] = sat_s5l1x_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 16] = block_c5lN9_info;
           R2 = R1;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lN9() //  [R1]
         { info_tbl: [(c5lN9,
                       label: block_c5lN9_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lN9: // global
           I64[Sp] = block_c5lNd_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 56];
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5lNd() //  [R1]
         { info_tbl: [(c5lNd,
                       label: block_c5lNd_info
                       rep:StackRep [False, True, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lNd: // global
           if (R1 & 7 == 1) goto c5lOb; else goto c5lOq;
       c5lOb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5lOe; else goto c5lOd;
       c5lOe: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lOd: // global
           I64[Hp - 16] = sat_s5l1z_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 16] = block_c5lNj_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 56];
           P64[Sp + 8] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Classes.>_entry(R2) args: 32, res: 8, upd: 8;
       c5lOq: // global
           R1 = P64[Sp + 48];
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5lNj() //  [R1]
         { info_tbl: [(c5lNj,
                       label: block_c5lNj_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lNj: // global
           if (R1 & 7 == 1) goto c5lOi; else goto c5lOj;
       c5lOi: // global
           R1 = lvl3_r5kSk_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5lOj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5lOm; else goto c5lOl;
       c5lOm: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lOl: // global
           I64[Hp - 24] = sat_s5l1C_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 8];
           P64[Sp + 24] = P64[Sp + 24];
           P64[Sp + 32] = P64[Sp + 16];
           P64[Sp + 40] = Hp - 24;
           Sp = Sp + 24;
           call _c5lMO() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.786210062 UTC

[section ""data" . Data.OldList.zipWith4_closure" {
     Data.OldList.zipWith4_closure:
         const Data.OldList.zipWith4_info;
 },
 sat_s5l1V_entry() //  [R1]
         { info_tbl: [(c5lP4,
                       label: sat_s5l1V_info
                       rep:HeapRep 5 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lP4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lP5; else goto c5lP6;
       c5lP5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lP6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.zipWith4_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.zipWith4_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5lPb,
                       label: Data.OldList.zipWith4_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lPb: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5lPc; else goto c5lPd;
       c5lPc: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.zipWith4_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lPd: // global
           I64[Sp - 40] = block_c5lOC_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u5lPR; else goto c5lOD;
       u5lPR: // global
           call _c5lOC(R1) args: 0, res: 0, upd: 0;
       c5lOD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lOC() //  [R1]
         { info_tbl: [(c5lOC,
                       label: block_c5lOC_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lOC: // global
           if (R1 & 7 == 1) goto u5lPG; else goto c5lP9;
       u5lPG: // global
           Sp = Sp + 40;
           call _c5lPw() args: 0, res: 0, upd: 0;
       c5lP9: // global
           I64[Sp - 8] = block_c5lOI_info;
           _s5l1J::P64 = P64[R1 + 6];
           _s5l1K::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _s5l1K::P64;
           P64[Sp + 16] = _s5l1J::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lPK; else goto c5lOJ;
       u5lPK: // global
           call _c5lOI(R1) args: 0, res: 0, upd: 0;
       c5lOJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lOI() //  [R1]
         { info_tbl: [(c5lOI,
                       label: block_c5lOI_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lOI: // global
           if (R1 & 7 == 1) goto u5lPH; else goto c5lPm;
       u5lPH: // global
           Sp = Sp + 48;
           call _c5lPw() args: 0, res: 0, upd: 0;
       c5lPm: // global
           I64[Sp - 8] = block_c5lOO_info;
           _s5l1M::P64 = P64[R1 + 6];
           _s5l1N::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _s5l1N::P64;
           P64[Sp + 32] = _s5l1M::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lPM; else goto c5lOP;
       u5lPM: // global
           call _c5lOO(R1) args: 0, res: 0, upd: 0;
       c5lOP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lOO() //  [R1]
         { info_tbl: [(c5lOO,
                       label: block_c5lOO_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lOO: // global
           if (R1 & 7 == 1) goto u5lPI; else goto c5lPs;
       u5lPI: // global
           Sp = Sp + 56;
           call _c5lPw() args: 0, res: 0, upd: 0;
       c5lPs: // global
           I64[Sp - 8] = block_c5lOU_info;
           _s5l1P::P64 = P64[R1 + 6];
           _s5l1Q::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5l1Q::P64;
           P64[Sp + 48] = _s5l1P::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lPO; else goto c5lOV;
       u5lPO: // global
           call _c5lOU(R1) args: 0, res: 0, upd: 0;
       c5lOV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lOU() //  [R1]
         { info_tbl: [(c5lOU,
                       label: block_c5lOU_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lOU: // global
           if (R1 & 7 == 1) goto u5lPJ; else goto c5lPz;
       u5lPJ: // global
           Sp = Sp + 64;
           call _c5lPw() args: 0, res: 0, upd: 0;
       c5lPz: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c5lPC; else goto c5lPB;
       c5lPC: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lPB: // global
           _s5l1S::P64 = P64[R1 + 6];
           _s5l1T::P64 = P64[R1 + 14];
           I64[Hp - 128] = sat_s5l1V_info;
           _s5l1D::P64 = P64[Sp + 32];
           P64[Hp - 112] = _s5l1D::P64;
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = P64[Sp + 8];
           P64[Hp - 80] = _s5l1T::P64;
           I64[Hp - 72] = stg_ap_5_upd_info;
           P64[Hp - 56] = _s5l1D::P64;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = _s5l1S::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5lPw() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lPw: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.79129703 UTC

[section ""data" . Data.OldList.zip4_closure" {
     Data.OldList.zip4_closure:
         const Data.OldList.zip4_info;
 },
 Data.OldList.zip4_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5lPW,
                       label: Data.OldList.zip4_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lPW: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Tuple.(,,,)_closure+4;
           call Data.OldList.zipWith4_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.794780915 UTC

[section ""data" . Data.OldList.zipWith5_closure" {
     Data.OldList.zipWith5_closure:
         const Data.OldList.zipWith5_info;
 },
 sat_s5l2i_entry() //  [R1]
         { info_tbl: [(c5lQB,
                       label: sat_s5l2i_info
                       rep:HeapRep 6 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lQB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5lQC; else goto c5lQD;
       c5lQC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lQD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 24;
           call Data.OldList.zipWith5_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 32, res: 0, upd: 24;
     }
 },
 Data.OldList.zipWith5_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5lQI,
                       label: Data.OldList.zipWith5_info
                       rep:HeapRep static { Fun {arity: 6 fun_type: ArgSpec 26} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lQI: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c5lQJ; else goto c5lQK;
       c5lQJ: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.zipWith5_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c5lQK: // global
           I64[Sp - 40] = block_c5lQ3_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u5lRy; else goto c5lQ4;
       u5lRy: // global
           call _c5lQ3(R1) args: 0, res: 0, upd: 0;
       c5lQ4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lQ3() //  [R1]
         { info_tbl: [(c5lQ3,
                       label: block_c5lQ3_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lQ3: // global
           if (R1 & 7 == 1) goto u5lRk; else goto c5lQG;
       u5lRk: // global
           Sp = Sp + 48;
           call _c5lR9() args: 0, res: 0, upd: 0;
       c5lQG: // global
           I64[Sp - 8] = block_c5lQ9_info;
           _s5l23::P64 = P64[R1 + 6];
           _s5l24::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _s5l24::P64;
           P64[Sp + 16] = _s5l23::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lRp; else goto c5lQa;
       u5lRp: // global
           call _c5lQ9(R1) args: 0, res: 0, upd: 0;
       c5lQa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lQ9() //  [R1]
         { info_tbl: [(c5lQ9,
                       label: block_c5lQ9_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lQ9: // global
           if (R1 & 7 == 1) goto u5lRl; else goto c5lQT;
       u5lRl: // global
           Sp = Sp + 56;
           call _c5lR9() args: 0, res: 0, upd: 0;
       c5lQT: // global
           I64[Sp - 8] = block_c5lQf_info;
           _s5l26::P64 = P64[R1 + 6];
           _s5l27::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _s5l27::P64;
           P64[Sp + 32] = _s5l26::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lRr; else goto c5lQg;
       u5lRr: // global
           call _c5lQf(R1) args: 0, res: 0, upd: 0;
       c5lQg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lQf() //  [R1]
         { info_tbl: [(c5lQf,
                       label: block_c5lQf_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lQf: // global
           if (R1 & 7 == 1) goto u5lRm; else goto c5lQZ;
       u5lRm: // global
           Sp = Sp + 64;
           call _c5lR9() args: 0, res: 0, upd: 0;
       c5lQZ: // global
           I64[Sp - 8] = block_c5lQl_info;
           _s5l29::P64 = P64[R1 + 6];
           _s5l2a::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5l2a::P64;
           P64[Sp + 48] = _s5l29::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lRt; else goto c5lQm;
       u5lRt: // global
           call _c5lQl(R1) args: 0, res: 0, upd: 0;
       c5lQm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lQl() //  [R1]
         { info_tbl: [(c5lQl,
                       label: block_c5lQl_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lQl: // global
           if (R1 & 7 == 1) goto u5lRn; else goto c5lR5;
       u5lRn: // global
           Sp = Sp + 72;
           call _c5lR9() args: 0, res: 0, upd: 0;
       c5lR5: // global
           I64[Sp - 8] = block_c5lQr_info;
           _s5l2c::P64 = P64[R1 + 6];
           _s5l2d::P64 = P64[R1 + 14];
           R1 = P64[Sp + 64];
           P64[Sp] = _s5l2d::P64;
           P64[Sp + 64] = _s5l2c::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lRv; else goto c5lQs;
       u5lRv: // global
           call _c5lQr(R1) args: 0, res: 0, upd: 0;
       c5lQs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lQr() //  [R1]
         { info_tbl: [(c5lQr,
                       label: block_c5lQr_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lQr: // global
           if (R1 & 7 == 1) goto u5lRo; else goto c5lRc;
       u5lRo: // global
           Sp = Sp + 80;
           call _c5lR9() args: 0, res: 0, upd: 0;
       c5lRc: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c5lRf; else goto c5lRe;
       c5lRf: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lRe: // global
           _s5l2f::P64 = P64[R1 + 6];
           _s5l2g::P64 = P64[R1 + 14];
           I64[Hp - 144] = sat_s5l2i_info;
           _s5l1W::P64 = P64[Sp + 40];
           P64[Hp - 128] = _s5l1W::P64;
           P64[Hp - 120] = P64[Sp + 32];
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 8];
           P64[Hp - 88] = _s5l2g::P64;
           I64[Hp - 80] = stg_ap_6_upd_info;
           P64[Hp - 64] = _s5l1W::P64;
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 72];
           P64[Hp - 24] = _s5l2f::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 144;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5lR9() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lR9: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.800701282 UTC

[section ""data" . Data.OldList.zip5_closure" {
     Data.OldList.zip5_closure:
         const Data.OldList.zip5_info;
 },
 Data.OldList.zip5_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5lRD,
                       label: Data.OldList.zip5_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lRD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5lRE; else goto c5lRF;
       c5lRE: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.zip5_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lRF: // global
           _B1::P64 = R6;
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Tuple.(,,,,)_closure+5;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.OldList.zipWith5_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 16, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.808297644 UTC

[section ""data" . Data.OldList.zipWith6_closure" {
     Data.OldList.zipWith6_closure:
         const Data.OldList.zipWith6_info;
 },
 Data.OldList.zipWith6_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lRH: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.OldList.zipWith6_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s5l2J_entry() //  [R1]
         { info_tbl: [(c5lSp,
                       label: sat_s5l2J_info
                       rep:HeapRep 7 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lSp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5lSq; else goto c5lSr;
       c5lSq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lSr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 56];
           P64[Sp - 24] = P64[R1 + 64];
           Sp = Sp - 32;
           call Data.OldList.zipWith6_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.OldList.zipWith6_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5lSw,
                       label: Data.OldList.zipWith6_info
                       rep:HeapRep static {
                             Fun {arity: 7
                                  fun_type: ArgGen [False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lSw: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c5lSx; else goto c5lSy;
       c5lSx: // global
           R1 = Data.OldList.zipWith6_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c5lSy: // global
           I64[Sp - 40] = block_c5lRL_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u5lTw; else goto c5lRM;
       u5lTw: // global
           call _c5lRL(R1) args: 0, res: 0, upd: 0;
       c5lRM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lRL() //  [R1]
         { info_tbl: [(c5lRL,
                       label: block_c5lRL_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lRL: // global
           if (R1 & 7 == 1) goto u5lTf; else goto c5lSu;
       u5lTf: // global
           Sp = Sp + 56;
           call _c5lT3() args: 0, res: 0, upd: 0;
       c5lSu: // global
           I64[Sp - 8] = block_c5lRR_info;
           _s5l2r::P64 = P64[R1 + 6];
           _s5l2s::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _s5l2s::P64;
           P64[Sp + 16] = _s5l2r::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lTl; else goto c5lRS;
       u5lTl: // global
           call _c5lRR(R1) args: 0, res: 0, upd: 0;
       c5lRS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lRR() //  [R1]
         { info_tbl: [(c5lRR,
                       label: block_c5lRR_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lRR: // global
           if (R1 & 7 == 1) goto u5lTg; else goto c5lSH;
       u5lTg: // global
           Sp = Sp + 64;
           call _c5lT3() args: 0, res: 0, upd: 0;
       c5lSH: // global
           I64[Sp - 8] = block_c5lRX_info;
           _s5l2u::P64 = P64[R1 + 6];
           _s5l2v::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _s5l2v::P64;
           P64[Sp + 32] = _s5l2u::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lTn; else goto c5lRY;
       u5lTn: // global
           call _c5lRX(R1) args: 0, res: 0, upd: 0;
       c5lRY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lRX() //  [R1]
         { info_tbl: [(c5lRX,
                       label: block_c5lRX_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lRX: // global
           if (R1 & 7 == 1) goto u5lTh; else goto c5lSN;
       u5lTh: // global
           Sp = Sp + 72;
           call _c5lT3() args: 0, res: 0, upd: 0;
       c5lSN: // global
           I64[Sp - 8] = block_c5lS3_info;
           _s5l2x::P64 = P64[R1 + 6];
           _s5l2y::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5l2y::P64;
           P64[Sp + 48] = _s5l2x::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lTp; else goto c5lS4;
       u5lTp: // global
           call _c5lS3(R1) args: 0, res: 0, upd: 0;
       c5lS4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lS3() //  [R1]
         { info_tbl: [(c5lS3,
                       label: block_c5lS3_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lS3: // global
           if (R1 & 7 == 1) goto u5lTi; else goto c5lST;
       u5lTi: // global
           Sp = Sp + 80;
           call _c5lT3() args: 0, res: 0, upd: 0;
       c5lST: // global
           I64[Sp - 8] = block_c5lS9_info;
           _s5l2A::P64 = P64[R1 + 6];
           _s5l2B::P64 = P64[R1 + 14];
           R1 = P64[Sp + 64];
           P64[Sp] = _s5l2B::P64;
           P64[Sp + 64] = _s5l2A::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lTr; else goto c5lSa;
       u5lTr: // global
           call _c5lS9(R1) args: 0, res: 0, upd: 0;
       c5lSa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lS9() //  [R1]
         { info_tbl: [(c5lS9,
                       label: block_c5lS9_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lS9: // global
           if (R1 & 7 == 1) goto u5lTj; else goto c5lSZ;
       u5lTj: // global
           Sp = Sp + 88;
           call _c5lT3() args: 0, res: 0, upd: 0;
       c5lSZ: // global
           I64[Sp - 8] = block_c5lSf_info;
           _s5l2D::P64 = P64[R1 + 6];
           _s5l2E::P64 = P64[R1 + 14];
           R1 = P64[Sp + 80];
           P64[Sp] = _s5l2E::P64;
           P64[Sp + 80] = _s5l2D::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lTt; else goto c5lSg;
       u5lTt: // global
           call _c5lSf(R1) args: 0, res: 0, upd: 0;
       c5lSg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lSf() //  [R1]
         { info_tbl: [(c5lSf,
                       label: block_c5lSf_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lSf: // global
           if (R1 & 7 == 1) goto u5lTk; else goto c5lT6;
       u5lTk: // global
           Sp = Sp + 96;
           call _c5lT3() args: 0, res: 0, upd: 0;
       c5lT6: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c5lT9; else goto c5lT8;
       c5lT9: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lT8: // global
           _s5l2G::P64 = P64[R1 + 6];
           _s5l2H::P64 = P64[R1 + 14];
           I64[Hp - 160] = sat_s5l2J_info;
           _s5l2j::P64 = P64[Sp + 48];
           P64[Hp - 144] = _s5l2j::P64;
           P64[Hp - 136] = P64[Sp + 40];
           P64[Hp - 128] = P64[Sp + 32];
           P64[Hp - 120] = P64[Sp + 24];
           P64[Hp - 112] = P64[Sp + 16];
           P64[Hp - 104] = P64[Sp + 8];
           P64[Hp - 96] = _s5l2H::P64;
           I64[Hp - 88] = stg_ap_7_upd_info;
           P64[Hp - 72] = _s5l2j::P64;
           P64[Hp - 64] = P64[Sp + 56];
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = P64[Sp + 80];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = _s5l2G::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 88;
           P64[Hp] = Hp - 160;
           R1 = Hp - 14;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5lT3() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lT3: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.815292984 UTC

[section ""data" . Data.OldList.zip6_closure" {
     Data.OldList.zip6_closure:
         const Data.OldList.zip6_info;
 },
 Data.OldList.zip6_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5lTB,
                       label: Data.OldList.zip6_info
                       rep:HeapRep static { Fun {arity: 6 fun_type: ArgSpec 26} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lTB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5lTC; else goto c5lTD;
       c5lTC: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.zip6_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c5lTD: // global
           _B2::P64 = R6;
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Tuple.(,,,,,)_closure+6;
           P64[Sp - 8] = _B2::P64;
           Sp = Sp - 8;
           call Data.OldList.zipWith6_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.819771877 UTC

[section ""data" . Data.OldList.zipWith7_closure" {
     Data.OldList.zipWith7_closure:
         const Data.OldList.zipWith7_info;
 },
 Data.OldList.zipWith7_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lTF: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.OldList.zipWith7_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s5l3e_entry() //  [R1]
         { info_tbl: [(c5lUt,
                       label: sat_s5l3e_info
                       rep:HeapRep 8 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lUt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5lUu; else goto c5lUv;
       c5lUu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lUv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 56];
           P64[Sp - 32] = P64[R1 + 64];
           P64[Sp - 24] = P64[R1 + 72];
           Sp = Sp - 40;
           call Data.OldList.zipWith7_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5l3d_entry() //  [R1]
         { info_tbl: [(c5lUA,
                       label: sat_s5l3d_info
                       rep:HeapRep 8 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lUA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5lUB; else goto c5lUC;
       c5lUB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lUC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 56];
           R5 = P64[R1 + 48];
           R4 = P64[R1 + 40];
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 24];
           _s5l38::P64 = P64[R1 + 64];
           _s5l3b::P64 = P64[R1 + 72];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s5l38::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = _s5l3b::P64;
           Sp = Sp - 40;
           call stg_ap_pppppp_fast(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 48, res: 0, upd: 24;
     }
 },
 Data.OldList.zipWith7_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5lUH,
                       label: Data.OldList.zipWith7_info
                       rep:HeapRep static {
                             Fun {arity: 8
                                  fun_type: ArgGen [False, False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lUH: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c5lUI; else goto c5lUJ;
       c5lUI: // global
           R1 = Data.OldList.zipWith7_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c5lUJ: // global
           I64[Sp - 40] = block_c5lTJ_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u5lVQ; else goto c5lTK;
       u5lVQ: // global
           call _c5lTJ(R1) args: 0, res: 0, upd: 0;
       c5lTK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lTJ() //  [R1]
         { info_tbl: [(c5lTJ,
                       label: block_c5lTJ_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lTJ: // global
           if (R1 & 7 == 1) goto u5lVw; else goto c5lUF;
       u5lVw: // global
           Sp = Sp + 64;
           call _c5lVk() args: 0, res: 0, upd: 0;
       c5lUF: // global
           I64[Sp - 8] = block_c5lTP_info;
           _s5l2T::P64 = P64[R1 + 6];
           _s5l2U::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _s5l2U::P64;
           P64[Sp + 16] = _s5l2T::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lVD; else goto c5lTQ;
       u5lVD: // global
           call _c5lTP(R1) args: 0, res: 0, upd: 0;
       c5lTQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lTP() //  [R1]
         { info_tbl: [(c5lTP,
                       label: block_c5lTP_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lTP: // global
           if (R1 & 7 == 1) goto u5lVx; else goto c5lUS;
       u5lVx: // global
           Sp = Sp + 72;
           call _c5lVk() args: 0, res: 0, upd: 0;
       c5lUS: // global
           I64[Sp - 8] = block_c5lTV_info;
           _s5l2W::P64 = P64[R1 + 6];
           _s5l2X::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _s5l2X::P64;
           P64[Sp + 32] = _s5l2W::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lVF; else goto c5lTW;
       u5lVF: // global
           call _c5lTV(R1) args: 0, res: 0, upd: 0;
       c5lTW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lTV() //  [R1]
         { info_tbl: [(c5lTV,
                       label: block_c5lTV_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lTV: // global
           if (R1 & 7 == 1) goto u5lVy; else goto c5lUY;
       u5lVy: // global
           Sp = Sp + 80;
           call _c5lVk() args: 0, res: 0, upd: 0;
       c5lUY: // global
           I64[Sp - 8] = block_c5lU1_info;
           _s5l2Z::P64 = P64[R1 + 6];
           _s5l30::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5l30::P64;
           P64[Sp + 48] = _s5l2Z::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lVH; else goto c5lU2;
       u5lVH: // global
           call _c5lU1(R1) args: 0, res: 0, upd: 0;
       c5lU2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lU1() //  [R1]
         { info_tbl: [(c5lU1,
                       label: block_c5lU1_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lU1: // global
           if (R1 & 7 == 1) goto u5lVz; else goto c5lV4;
       u5lVz: // global
           Sp = Sp + 88;
           call _c5lVk() args: 0, res: 0, upd: 0;
       c5lV4: // global
           I64[Sp - 8] = block_c5lU7_info;
           _s5l32::P64 = P64[R1 + 6];
           _s5l33::P64 = P64[R1 + 14];
           R1 = P64[Sp + 64];
           P64[Sp] = _s5l33::P64;
           P64[Sp + 64] = _s5l32::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lVJ; else goto c5lU8;
       u5lVJ: // global
           call _c5lU7(R1) args: 0, res: 0, upd: 0;
       c5lU8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lU7() //  [R1]
         { info_tbl: [(c5lU7,
                       label: block_c5lU7_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lU7: // global
           if (R1 & 7 == 1) goto u5lVA; else goto c5lVa;
       u5lVA: // global
           Sp = Sp + 96;
           call _c5lVk() args: 0, res: 0, upd: 0;
       c5lVa: // global
           I64[Sp - 8] = block_c5lUd_info;
           _s5l35::P64 = P64[R1 + 6];
           _s5l36::P64 = P64[R1 + 14];
           R1 = P64[Sp + 80];
           P64[Sp] = _s5l36::P64;
           P64[Sp + 80] = _s5l35::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lVL; else goto c5lUe;
       u5lVL: // global
           call _c5lUd(R1) args: 0, res: 0, upd: 0;
       c5lUe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lUd() //  [R1]
         { info_tbl: [(c5lUd,
                       label: block_c5lUd_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lUd: // global
           if (R1 & 7 == 1) goto u5lVB; else goto c5lVg;
       u5lVB: // global
           Sp = Sp + 104;
           call _c5lVk() args: 0, res: 0, upd: 0;
       c5lVg: // global
           I64[Sp - 8] = block_c5lUj_info;
           _s5l38::P64 = P64[R1 + 6];
           _s5l39::P64 = P64[R1 + 14];
           R1 = P64[Sp + 96];
           P64[Sp] = _s5l39::P64;
           P64[Sp + 96] = _s5l38::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lVN; else goto c5lUk;
       u5lVN: // global
           call _c5lUj(R1) args: 0, res: 0, upd: 0;
       c5lUk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lUj() //  [R1]
         { info_tbl: [(c5lUj,
                       label: block_c5lUj_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lUj: // global
           if (R1 & 7 == 1) goto u5lVC; else goto c5lVm;
       u5lVC: // global
           Sp = Sp + 112;
           call _c5lVk() args: 0, res: 0, upd: 0;
       c5lVm: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto c5lVp; else goto c5lVo;
       c5lVp: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lVo: // global
           _s5l3b::P64 = P64[R1 + 6];
           _s5l3c::P64 = P64[R1 + 14];
           I64[Hp - 176] = sat_s5l3e_info;
           _s5l2K::P64 = P64[Sp + 56];
           P64[Hp - 160] = _s5l2K::P64;
           P64[Hp - 152] = P64[Sp + 48];
           P64[Hp - 144] = P64[Sp + 40];
           P64[Hp - 136] = P64[Sp + 32];
           P64[Hp - 128] = P64[Sp + 24];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = _s5l3c::P64;
           I64[Hp - 96] = sat_s5l3d_info;
           P64[Hp - 80] = _s5l2K::P64;
           P64[Hp - 72] = P64[Sp + 64];
           P64[Hp - 64] = P64[Sp + 72];
           P64[Hp - 56] = P64[Sp + 80];
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = P64[Sp + 96];
           P64[Hp - 32] = P64[Sp + 104];
           P64[Hp - 24] = _s5l3b::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 96;
           P64[Hp] = Hp - 176;
           R1 = Hp - 14;
           Sp = Sp + 112;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5lVk() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lVk: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.827630121 UTC

[section ""data" . Data.OldList.zip7_closure" {
     Data.OldList.zip7_closure:
         const Data.OldList.zip7_info;
 },
 Data.OldList.zip7_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lVS: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.OldList.zip7_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2,
                                        R1) args: 24, res: 0, upd: 8;
     }
 },
 Data.OldList.zip7_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5lVW,
                       label: Data.OldList.zip7_info
                       rep:HeapRep static {
                             Fun {arity: 7
                                  fun_type: ArgGen [False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lVW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5lVX; else goto c5lVY;
       c5lVX: // global
           R1 = Data.OldList.zip7_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c5lVY: // global
           _B3::P64 = R6;
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Tuple.(,,,,,,)_closure+7;
           P64[Sp - 8] = _B3::P64;
           Sp = Sp - 8;
           call Data.OldList.zipWith7_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.830877799 UTC

[section ""data" . Data.OldList.$wunzip4_closure" {
     Data.OldList.$wunzip4_closure:
         const Data.OldList.$wunzip4_info;
 },
 ds_s5l3o_entry() //  [R1]
         { info_tbl: [(c5lWl,
                       label: ds_s5l3o_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lWl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5lWm; else goto c5lWn;
       c5lWm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lWn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5lWi_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wunzip4_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5lWi() //  [R1, R2, R3, R4]
         { info_tbl: [(c5lWi,
                       label: block_c5lWi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lWi: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5lWq; else goto c5lWp;
       c5lWq: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       c5lWp: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wunzip4_entry() //  [R2]
         { info_tbl: [(c5lWv,
                       label: Data.OldList.$wunzip4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lWv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lWw; else goto c5lWx;
       c5lWw: // global
           R2 = R2;
           R1 = Data.OldList.$wunzip4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5lWx: // global
           I64[Sp - 8] = block_c5lW3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lWN; else goto c5lW4;
       u5lWN: // global
           call _c5lW3(R1) args: 0, res: 0, upd: 0;
       c5lW4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lW3() //  [R1]
         { info_tbl: [(c5lW3,
                       label: block_c5lW3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lW3: // global
           if (R1 & 7 == 1) goto c5lWs; else goto c5lWt;
       c5lWs: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lWt: // global
           I64[Sp - 8] = block_c5lW9_info;
           _s5l3i::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5l3i::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lWM; else goto c5lWa;
       u5lWM: // global
           call _c5lW9(R1) args: 0, res: 0, upd: 0;
       c5lWa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lW9() //  [R1]
         { info_tbl: [(c5lW9,
                       label: block_c5lW9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lW9: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto c5lWL; else goto c5lWK;
       c5lWL: // global
           HpAlloc = 216;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lWK: // global
           _s5l3k::P64 = P64[R1 + 7];
           _s5l3l::P64 = P64[R1 + 15];
           _s5l3m::P64 = P64[R1 + 23];
           _s5l3n::P64 = P64[R1 + 31];
           I64[Hp - 208] = ds_s5l3o_info;
           P64[Hp - 192] = P64[Sp + 8];
           I64[Hp - 184] = stg_sel_3_upd_info;
           _c5lWe::P64 = Hp - 208;
           P64[Hp - 168] = _c5lWe::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = _s5l3n::P64;
           P64[Hp - 144] = Hp - 184;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _c5lWe::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _s5l3m::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5lWe::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5l3l::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5lWe::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l3k::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 158;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.835243225 UTC

[section ""data" . Data.OldList.unzip4_closure" {
     Data.OldList.unzip4_closure:
         const Data.OldList.unzip4_info;
 },
 Data.OldList.unzip4_entry() //  [R2]
         { info_tbl: [(c5lWV,
                       label: Data.OldList.unzip4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lWV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5lWW; else goto c5lWX;
       c5lWW: // global
           R2 = R2;
           R1 = Data.OldList.unzip4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5lWX: // global
           I64[Sp - 8] = block_c5lWS_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wunzip4_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lWS() //  [R1, R2, R3, R4]
         { info_tbl: [(c5lWS,
                       label: block_c5lWS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lWS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5lX0; else goto c5lWZ;
       c5lX0: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       c5lWZ: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.83843386 UTC

[section ""data" . Data.OldList.$wunzip5_closure" {
     Data.OldList.$wunzip5_closure:
         const Data.OldList.$wunzip5_info;
 },
 ds_s5l4c_entry() //  [R1]
         { info_tbl: [(c5lXp,
                       label: ds_s5l4c_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lXp: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5lXq; else goto c5lXr;
       c5lXq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lXr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5lXk_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wunzip5_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5lXk() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c5lXk,
                       label: block_c5lXk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lXk: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           P64[Sp] = R1;
           Sp = Sp - 40;
           call _c5lXl() args: 0, res: 0, upd: 0;
     }
 },
 _c5lXl() //  []
         { info_tbl: [(c5lXl,
                       label: block_c5lXl_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lXl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5lXu; else goto c5lXt;
       c5lXu: // global
           HpAlloc = 48;
           I64[Sp] = block_c5lXl_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c5lXt: // global
           I64[Hp - 40] = (,,,,)_con_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 39;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wunzip5_entry() //  [R2]
         { info_tbl: [(c5lXB,
                       label: Data.OldList.$wunzip5_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lXB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lXC; else goto c5lXD;
       c5lXC: // global
           R2 = R2;
           R1 = Data.OldList.$wunzip5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5lXD: // global
           I64[Sp - 8] = block_c5lX5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lXV; else goto c5lX6;
       u5lXV: // global
           call _c5lX5(R1) args: 0, res: 0, upd: 0;
       c5lX6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lX5() //  [R1]
         { info_tbl: [(c5lX5,
                       label: block_c5lX5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lX5: // global
           if (R1 & 7 == 1) goto c5lXy; else goto c5lXz;
       c5lXy: // global
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5lXz: // global
           I64[Sp - 8] = block_c5lXb_info;
           _s5l45::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5l45::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lXU; else goto c5lXc;
       u5lXU: // global
           call _c5lXb(R1) args: 0, res: 0, upd: 0;
       c5lXc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lXb() //  [R1]
         { info_tbl: [(c5lXb,
                       label: block_c5lXb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lXb: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c5lXT; else goto c5lXS;
       c5lXT: // global
           HpAlloc = 264;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lXS: // global
           _s5l47::P64 = P64[R1 + 7];
           _s5l48::P64 = P64[R1 + 15];
           _s5l49::P64 = P64[R1 + 23];
           _s5l4a::P64 = P64[R1 + 31];
           _s5l4b::P64 = P64[R1 + 39];
           I64[Hp - 256] = ds_s5l4c_info;
           P64[Hp - 240] = P64[Sp + 8];
           I64[Hp - 232] = stg_sel_4_upd_info;
           _c5lXg::P64 = Hp - 256;
           P64[Hp - 216] = _c5lXg::P64;
           I64[Hp - 208] = :_con_info;
           P64[Hp - 200] = _s5l4b::P64;
           P64[Hp - 192] = Hp - 232;
           I64[Hp - 184] = stg_sel_3_upd_info;
           P64[Hp - 168] = _c5lXg::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = _s5l4a::P64;
           P64[Hp - 144] = Hp - 184;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _c5lXg::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _s5l49::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5lXg::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5l48::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5lXg::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l47::P64;
           P64[Hp] = Hp - 40;
           R5 = Hp - 206;
           R4 = Hp - 158;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.843238096 UTC

[section ""data" . Data.OldList.unzip5_closure" {
     Data.OldList.unzip5_closure:
         const Data.OldList.unzip5_info;
 },
 Data.OldList.unzip5_entry() //  [R2]
         { info_tbl: [(c5lY5,
                       label: Data.OldList.unzip5_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lY5: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5lY6; else goto c5lY7;
       c5lY6: // global
           R2 = R2;
           R1 = Data.OldList.unzip5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5lY7: // global
           I64[Sp - 8] = block_c5lY0_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wunzip5_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lY0() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c5lY0,
                       label: block_c5lY0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lY0: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           P64[Sp] = R1;
           Sp = Sp - 40;
           call _c5lY1() args: 0, res: 0, upd: 0;
     }
 },
 _c5lY1() //  []
         { info_tbl: [(c5lY1,
                       label: block_c5lY1_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lY1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5lYa; else goto c5lY9;
       c5lYa: // global
           HpAlloc = 48;
           I64[Sp] = block_c5lY1_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c5lY9: // global
           I64[Hp - 40] = (,,,,)_con_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 39;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.847108683 UTC

[section ""data" . Data.OldList.$wunzip6_closure" {
     Data.OldList.$wunzip6_closure:
         const Data.OldList.$wunzip6_info;
 },
 ds_s5l5f_entry() //  [R1]
         { info_tbl: [(c5lYB,
                       label: ds_s5l5f_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lYB: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c5lYC; else goto c5lYD;
       c5lYC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lYD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5lYw_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wunzip6_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5lYw() //  [R1, R2, R3, R4, R5, R6]
         { info_tbl: [(c5lYw,
                       label: block_c5lYw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lYw: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R1;
           Sp = Sp - 48;
           call _c5lYx() args: 0, res: 0, upd: 0;
     }
 },
 _c5lYx() //  []
         { info_tbl: [(c5lYx,
                       label: block_c5lYx_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lYx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5lYG; else goto c5lYF;
       c5lYG: // global
           HpAlloc = 56;
           I64[Sp] = block_c5lYx_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c5lYF: // global
           I64[Hp - 48] = (,,,,,)_con_info;
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wunzip6_entry() //  [R2]
         { info_tbl: [(c5lYN,
                       label: Data.OldList.$wunzip6_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lYN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5lYO; else goto c5lYP;
       c5lYO: // global
           R2 = R2;
           R1 = Data.OldList.$wunzip6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5lYP: // global
           I64[Sp - 8] = block_c5lYh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lZ9; else goto c5lYi;
       u5lZ9: // global
           call _c5lYh(R1) args: 0, res: 0, upd: 0;
       c5lYi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lYh() //  [R1]
         { info_tbl: [(c5lYh,
                       label: block_c5lYh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lYh: // global
           if (R1 & 7 == 1) goto c5lYK; else goto c5lYL;
       c5lYK: // global
           R6 = GHC.Types.[]_closure+1;
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R6,
                               R5,
                               R4,
                               R3,
                               R2,
                               R1) args: 8, res: 0, upd: 8;
       c5lYL: // global
           I64[Sp - 8] = block_c5lYn_info;
           _s5l57::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5l57::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5lZ8; else goto c5lYo;
       u5lZ8: // global
           call _c5lYn(R1) args: 0, res: 0, upd: 0;
       c5lYo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lYn() //  [R1]
         { info_tbl: [(c5lYn,
                       label: block_c5lYn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lYn: // global
           Hp = Hp + 312;
           if (Hp > HpLim) (likely: False) goto c5lZ7; else goto c5lZ6;
       c5lZ7: // global
           HpAlloc = 312;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5lZ6: // global
           _s5l59::P64 = P64[R1 + 7];
           _s5l5a::P64 = P64[R1 + 15];
           _s5l5b::P64 = P64[R1 + 23];
           _s5l5c::P64 = P64[R1 + 31];
           _s5l5d::P64 = P64[R1 + 39];
           _s5l5e::P64 = P64[R1 + 47];
           I64[Hp - 304] = ds_s5l5f_info;
           P64[Hp - 288] = P64[Sp + 8];
           I64[Hp - 280] = stg_sel_5_upd_info;
           _c5lYs::P64 = Hp - 304;
           P64[Hp - 264] = _c5lYs::P64;
           I64[Hp - 256] = :_con_info;
           P64[Hp - 248] = _s5l5e::P64;
           P64[Hp - 240] = Hp - 280;
           I64[Hp - 232] = stg_sel_4_upd_info;
           P64[Hp - 216] = _c5lYs::P64;
           I64[Hp - 208] = :_con_info;
           P64[Hp - 200] = _s5l5d::P64;
           P64[Hp - 192] = Hp - 232;
           I64[Hp - 184] = stg_sel_3_upd_info;
           P64[Hp - 168] = _c5lYs::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = _s5l5c::P64;
           P64[Hp - 144] = Hp - 184;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _c5lYs::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _s5l5b::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5lYs::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5l5a::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5lYs::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l59::P64;
           P64[Hp] = Hp - 40;
           R6 = Hp - 254;
           R5 = Hp - 206;
           R4 = Hp - 158;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R6,
                               R5,
                               R4,
                               R3,
                               R2,
                               R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.853374513 UTC

[section ""data" . Data.OldList.unzip6_closure" {
     Data.OldList.unzip6_closure:
         const Data.OldList.unzip6_info;
 },
 Data.OldList.unzip6_entry() //  [R2]
         { info_tbl: [(c5lZj,
                       label: Data.OldList.unzip6_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lZj: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c5lZk; else goto c5lZl;
       c5lZk: // global
           R2 = R2;
           R1 = Data.OldList.unzip6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5lZl: // global
           I64[Sp - 8] = block_c5lZe_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wunzip6_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5lZe() //  [R1, R2, R3, R4, R5, R6]
         { info_tbl: [(c5lZe,
                       label: block_c5lZe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lZe: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R1;
           Sp = Sp - 48;
           call _c5lZf() args: 0, res: 0, upd: 0;
     }
 },
 _c5lZf() //  []
         { info_tbl: [(c5lZf,
                       label: block_c5lZf_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lZf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5lZo; else goto c5lZn;
       c5lZo: // global
           HpAlloc = 56;
           I64[Sp] = block_c5lZf_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c5lZn: // global
           I64[Hp - 48] = (,,,,,)_con_info;
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.857686913 UTC

[section ""data" . Data.OldList.$wunzip7_closure" {
     Data.OldList.$wunzip7_closure:
         const Data.OldList.$wunzip7_info;
 },
 ds_s5l6z_entry() //  [R1]
         { info_tbl: [(c5lZP,
                       label: ds_s5l6z_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lZP: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c5lZQ; else goto c5lZR;
       c5lZQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5lZR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5lZK_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wunzip7_entry(R2) args: 8, res: 16, upd: 24;
     }
 },
 _c5lZK() //  [R1, R2, R3, R4, R5, R6]
         { info_tbl: [(c5lZK,
                       label: block_c5lZK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lZK: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 8] = R1;
           Sp = Sp - 48;
           call _c5lZL() args: 0, res: 0, upd: 0;
     }
 },
 _c5lZL() //  []
         { info_tbl: [(c5lZL,
                       label: block_c5lZL_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lZL: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5lZU; else goto c5lZT;
       c5lZU: // global
           HpAlloc = 64;
           I64[Sp] = block_c5lZL_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c5lZT: // global
           I64[Hp - 56] = (,,,,,,)_con_info;
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 55;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wunzip7_entry() //  [R2]
         { info_tbl: [(c5m01,
                       label: Data.OldList.$wunzip7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m01: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5m02; else goto c5m03;
       c5m02: // global
           R2 = R2;
           R1 = Data.OldList.$wunzip7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5m03: // global
           I64[Sp - 8] = block_c5lZv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5m0p; else goto c5lZw;
       u5m0p: // global
           call _c5lZv(R1) args: 0, res: 0, upd: 0;
       c5lZw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lZv() //  [R1]
         { info_tbl: [(c5lZv,
                       label: block_c5lZv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lZv: // global
           if (R1 & 7 == 1) goto c5lZY; else goto c5lZZ;
       c5lZY: // global
           R6 = GHC.Types.[]_closure+1;
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           P64[Sp] = GHC.Types.[]_closure+1;
           call (I64[P64[Sp + 8]])(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
       c5lZZ: // global
           I64[Sp - 8] = block_c5lZB_info;
           _s5l6q::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5l6q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5m0o; else goto c5lZC;
       u5m0o: // global
           call _c5lZB(R1) args: 0, res: 0, upd: 0;
       c5lZC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5lZB() //  [R1]
         { info_tbl: [(c5lZB,
                       label: block_c5lZB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5lZB: // global
           Hp = Hp + 360;
           if (Hp > HpLim) (likely: False) goto c5m0n; else goto c5m0m;
       c5m0n: // global
           HpAlloc = 360;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5m0m: // global
           _s5l6s::P64 = P64[R1 + 7];
           _s5l6t::P64 = P64[R1 + 15];
           _s5l6u::P64 = P64[R1 + 23];
           _s5l6v::P64 = P64[R1 + 31];
           _s5l6w::P64 = P64[R1 + 39];
           _s5l6x::P64 = P64[R1 + 47];
           _s5l6y::P64 = P64[R1 + 55];
           I64[Hp - 352] = ds_s5l6z_info;
           P64[Hp - 336] = P64[Sp + 8];
           I64[Hp - 328] = stg_sel_6_upd_info;
           _c5lZG::P64 = Hp - 352;
           P64[Hp - 312] = _c5lZG::P64;
           I64[Hp - 304] = :_con_info;
           P64[Hp - 296] = _s5l6y::P64;
           P64[Hp - 288] = Hp - 328;
           I64[Hp - 280] = stg_sel_5_upd_info;
           P64[Hp - 264] = _c5lZG::P64;
           I64[Hp - 256] = :_con_info;
           P64[Hp - 248] = _s5l6x::P64;
           P64[Hp - 240] = Hp - 280;
           I64[Hp - 232] = stg_sel_4_upd_info;
           P64[Hp - 216] = _c5lZG::P64;
           I64[Hp - 208] = :_con_info;
           P64[Hp - 200] = _s5l6w::P64;
           P64[Hp - 192] = Hp - 232;
           I64[Hp - 184] = stg_sel_3_upd_info;
           P64[Hp - 168] = _c5lZG::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = _s5l6v::P64;
           P64[Hp - 144] = Hp - 184;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _c5lZG::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _s5l6u::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5lZG::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5l6t::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5lZG::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l6s::P64;
           P64[Hp] = Hp - 40;
           R6 = Hp - 254;
           R5 = Hp - 206;
           R4 = Hp - 158;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           P64[Sp + 8] = Hp - 302;
           Sp = Sp + 8;
           call (I64[P64[Sp + 8]])(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.863300373 UTC

[section ""data" . Data.OldList.unzip7_closure" {
     Data.OldList.unzip7_closure:
         const Data.OldList.unzip7_info;
 },
 Data.OldList.unzip7_entry() //  [R2]
         { info_tbl: [(c5m0z,
                       label: Data.OldList.unzip7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m0z: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5m0A; else goto c5m0B;
       c5m0A: // global
           R2 = R2;
           R1 = Data.OldList.unzip7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5m0B: // global
           I64[Sp - 8] = block_c5m0u_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wunzip7_entry(R2) args: 8, res: 16, upd: 8;
     }
 },
 _c5m0u() //  [R1, R2, R3, R4, R5, R6]
         { info_tbl: [(c5m0u,
                       label: block_c5m0u_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m0u: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 8] = R1;
           Sp = Sp - 48;
           call _c5m0v() args: 0, res: 0, upd: 0;
     }
 },
 _c5m0v() //  []
         { info_tbl: [(c5m0v,
                       label: block_c5m0v_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m0v: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5m0E; else goto c5m0D;
       c5m0E: // global
           HpAlloc = 64;
           I64[Sp] = block_c5m0v_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c5m0D: // global
           I64[Hp - 56] = (,,,,,,)_con_info;
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 55;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.866807905 UTC

[section ""data" . Data.OldList.groupBy_closure" {
     Data.OldList.groupBy_closure:
         const Data.OldList.groupBy_info;
 },
 ds2_s5l84_entry() //  [R1]
         { info_tbl: [(c5m0Z,
                       label: ds2_s5l84_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m0Z: // global
           _s5l84::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5m10; else goto c5m11;
       c5m11: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5m13; else goto c5m12;
       c5m13: // global
           HpAlloc = 32;
           goto c5m10;
       c5m10: // global
           R1 = _s5l84::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5m12: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l84::P64;
           _s5l7Z::P64 = P64[_s5l84::P64 + 16];
           _s5l82::P64 = P64[_s5l84::P64 + 24];
           _s5l83::P64 = P64[_s5l84::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s5l7Z::P64;
           P64[Hp] = _s5l82::P64;
           I64[Sp - 24] = block_c5m0W_info;
           R3 = _s5l83::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5m0W() //  [R1, R2]
         { info_tbl: [(c5m0W,
                       label: block_c5m0W_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m0W: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5m16; else goto c5m15;
       c5m16: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5m15: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l8h_entry() //  [R1]
         { info_tbl: [(c5m1e,
                       label: sat_s5l8h_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m1e: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5m1f; else goto c5m1g;
       c5m1f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5m1g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c5m1b_info;
           _s5l7Z::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s5l7Z::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5m1k; else goto c5m1c;
       u5m1k: // global
           call _c5m1b(R1) args: 0, res: 0, upd: 0;
       c5m1c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5m1b() //  [R1]
         { info_tbl: [(c5m1b,
                       label: block_c5m1b_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m1b: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.OldList.groupBy_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.groupBy_entry() //  [R2, R3]
         { info_tbl: [(c5m1p,
                       label: Data.OldList.groupBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m1p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5m1q; else goto c5m1r;
       c5m1q: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.groupBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5m1r: // global
           I64[Sp - 16] = block_c5m0L_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5m1A; else goto c5m0M;
       u5m1A: // global
           call _c5m0L(R1) args: 0, res: 0, upd: 0;
       c5m0M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m0L() //  [R1]
         { info_tbl: [(c5m0L,
                       label: block_c5m0L_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m0L: // global
           if (R1 & 7 == 1) goto c5m1m; else goto c5m1n;
       c5m1m: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5m1n: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c5m1z; else goto c5m1y;
       c5m1z: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5m1y: // global
           _s5l82::P64 = P64[R1 + 6];
           _s5l83::P64 = P64[R1 + 14];
           I64[Hp - 136] = ds2_s5l84_info;
           _s5l7Z::P64 = P64[Sp + 8];
           P64[Hp - 120] = _s5l7Z::P64;
           P64[Hp - 112] = _s5l82::P64;
           P64[Hp - 104] = _s5l83::P64;
           I64[Hp - 96] = sat_s5l8h_info;
           P64[Hp - 80] = _s5l7Z::P64;
           _c5m0R::P64 = Hp - 136;
           P64[Hp - 72] = _c5m0R::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _c5m0R::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5l82::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.873782441 UTC

[section ""data" . Data.OldList.group_closure" {
     Data.OldList.group_closure:
         const Data.OldList.group_info;
 },
 sat_s5l8k_entry() //  [R1]
         { info_tbl: [(c5m1J,
                       label: sat_s5l8k_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m1J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5m1K; else goto c5m1L;
       c5m1K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5m1L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.group_entry() //  [R2, R3]
         { info_tbl: [(c5m1M,
                       label: Data.OldList.group_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m1M: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5m1Q; else goto c5m1P;
       c5m1Q: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.group_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5m1P: // global
           I64[Hp - 16] = sat_s5l8k_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.groupBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.876361797 UTC

[section ""data" . poly_tailsGo_r5kSn_closure" {
     poly_tailsGo_r5kSn_closure:
         const poly_tailsGo_r5kSn_info;
 },
 sat_s5l8p_entry() //  [R1]
         { info_tbl: [(c5m26,
                       label: sat_s5l8p_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m26: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5m27; else goto c5m28;
       c5m27: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5m28: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5m1Z_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5m2f; else goto c5m20;
       u5m2f: // global
           call _c5m1Z(R1) args: 0, res: 0, upd: 0;
       c5m20: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5m1Z() //  [R1]
         { info_tbl: [(c5m1Z,
                       label: block_c5m1Z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m1Z: // global
           if (R1 & 7 == 1) goto c5m23; else goto c5m24;
       c5m23: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5m24: // global
           R2 = P64[R1 + 14];
           Sp = Sp + 8;
           call poly_tailsGo_r5kSn_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_tailsGo_r5kSn_entry() //  [R2]
         { info_tbl: [(c5m2h,
                       label: poly_tailsGo_r5kSn_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m2h: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5m2l; else goto c5m2k;
       c5m2l: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = poly_tailsGo_r5kSn_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5m2k: // global
           I64[Hp - 40] = sat_s5l8p_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.8787997 UTC

[section ""data" . Data.OldList.tails_closure" {
     Data.OldList.tails_closure:
         const Data.OldList.tails_info;
 },
 Data.OldList.tails_entry() //  [R2]
         { info_tbl: [(c5m2q,
                       label: Data.OldList.tails_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m2q: // global
           R2 = R2;
           call poly_tailsGo_r5kSn_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.881554845 UTC

[section ""data" . Data.OldList.nonEmptySubsequences_closure" {
     Data.OldList.nonEmptySubsequences_closure:
         const Data.OldList.nonEmptySubsequences_info;
 },
 go_s5l8w_entry() //  [R1, R2]
         { info_tbl: [(c5m2T,
                       label: go_s5l8w_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m2T: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5m2U; else goto c5m2V;
       c5m2U: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5m2V: // global
           I64[Sp - 24] = block_c5m2M_info;
           _s5l8w::P64 = R1;
           _s5l8t::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s5l8t::P64;
           P64[Sp - 8] = _s5l8w::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5m38; else goto c5m2N;
       u5m38: // global
           call _c5m2M(R1) args: 0, res: 0, upd: 0;
       c5m2N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m2M() //  [R1]
         { info_tbl: [(c5m2M,
                       label: block_c5m2M_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m2M: // global
           if (R1 & 7 == 1) goto c5m2Q; else goto c5m2R;
       c5m2Q: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5m2R: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c5m37; else goto c5m36;
       c5m37: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5m36: // global
           _s5l8z::P64 = P64[R1 + 6];
           _s5l8A::P64 = P64[R1 + 14];
           I64[Hp - 96] = stg_ap_2_upd_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = _s5l8A::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = _s5l8z::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 62;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8z::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5l8F_entry() //  [R1]
         { info_tbl: [(c5m3b,
                       label: sat_s5l8F_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m3b: // global
           _s5l8F::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c5m3c; else goto c5m3d;
       c5m3d: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5m3f; else goto c5m3e;
       c5m3f: // global
           HpAlloc = 16;
           goto c5m3c;
       c5m3c: // global
           R1 = _s5l8F::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5m3e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l8F::P64;
           _s5l8t::P64 = P64[_s5l8F::P64 + 16];
           _s5l8u::P64 = P64[_s5l8F::P64 + 24];
           I64[Hp - 8] = go_s5l8w_info;
           P64[Hp] = _s5l8t::P64;
           I64[Sp - 32] = block_c5m39_info;
           R2 = _s5l8u::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Data.OldList.nonEmptySubsequences_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5m39() //  [R1]
         { info_tbl: [(c5m39,
                       label: block_c5m39_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m39: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s5l8w_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.nonEmptySubsequences_entry() //  [R2]
         { info_tbl: [(c5m3n,
                       label: Data.OldList.nonEmptySubsequences_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m3n: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5m3o; else goto c5m3p;
       c5m3o: // global
           R2 = R2;
           R1 = Data.OldList.nonEmptySubsequences_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5m3p: // global
           I64[Sp - 8] = block_c5m2x_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5m3x; else goto c5m2y;
       u5m3x: // global
           call _c5m2x(R1) args: 0, res: 0, upd: 0;
       c5m2y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m2x() //  [R1]
         { info_tbl: [(c5m2x,
                       label: block_c5m2x_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m2x: // global
           if (R1 & 7 == 1) goto c5m3k; else goto c5m3l;
       c5m3k: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5m3l: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5m3w; else goto c5m3v;
       c5m3w: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5m3v: // global
           _s5l8t::P64 = P64[R1 + 6];
           _s5l8u::P64 = P64[R1 + 14];
           I64[Hp - 72] = sat_s5l8F_info;
           P64[Hp - 56] = _s5l8t::P64;
           P64[Hp - 48] = _s5l8u::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5l8t::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.886658262 UTC

[section ""data" . Data.OldList.subsequences_closure" {
     Data.OldList.subsequences_closure:
         const Data.OldList.subsequences_info;
 },
 sat_s5l8H_entry() //  [R1]
         { info_tbl: [(c5m3G,
                       label: sat_s5l8H_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m3G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5m3H; else goto c5m3I;
       c5m3H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5m3I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.nonEmptySubsequences_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.subsequences_entry() //  [R2]
         { info_tbl: [(c5m3K,
                       label: Data.OldList.subsequences_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m3K: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5m3O; else goto c5m3N;
       c5m3O: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.OldList.subsequences_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5m3N: // global
           I64[Hp - 40] = sat_s5l8H_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.890484636 UTC

[section ""data" . Data.OldList.permutations1_closure" {
     Data.OldList.permutations1_closure:
         const Data.OldList.permutations1_info;
 },
 sat_s5l8X_entry() //  [R1, R2]
         { info_tbl: [(c5m4k,
                       label: sat_s5l8X_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m4k: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5m4o; else goto c5m4n;
       c5m4o: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5m4n: // global
           _s5l8O::P64 = P64[R1 + 7];
           _s5l8S::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8S::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s5l8O::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 ds2_s5l8U_entry() //  [R1]
         { info_tbl: [(c5m4s,
                       label: ds2_s5l8U_info
                       rep:HeapRep 5 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m4s: // global
           _s5l8U::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5m4t; else goto c5m4u;
       c5m4u: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5m4w; else goto c5m4v;
       c5m4w: // global
           HpAlloc = 24;
           goto c5m4t;
       c5m4t: // global
           R1 = _s5l8U::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5m4v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l8U::P64;
           _s5l8N::P64 = P64[_s5l8U::P64 + 16];
           _s5l8O::P64 = P64[_s5l8U::P64 + 24];
           _s5l8Q::P64 = P64[_s5l8U::P64 + 32];
           _s5l8S::P64 = P64[_s5l8U::P64 + 40];
           _s5l8T::P64 = P64[_s5l8U::P64 + 48];
           I64[Hp - 16] = sat_s5l8X_info;
           P64[Hp - 8] = _s5l8O::P64;
           P64[Hp] = _s5l8S::P64;
           I64[Sp - 24] = block_c5m4p_info;
           R4 = _s5l8Q::P64;
           R3 = _s5l8T::P64;
           R2 = Hp - 15;
           R1 = _s5l8N::P64;
           Sp = Sp - 24;
           call $winterleave'_s5l8N_entry(R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5m4p() //  [R1, R2]
         { info_tbl: [(c5m4p,
                       label: block_c5m4p_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m4p: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5m4z; else goto c5m4y;
       c5m4z: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5m4y: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l98_entry() //  [R1]
         { info_tbl: [(c5m4I,
                       label: sat_s5l98_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m4I: // global
           _s5l98::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5m4J; else goto c5m4K;
       c5m4K: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5m4M; else goto c5m4L;
       c5m4M: // global
           HpAlloc = 48;
           goto c5m4J;
       c5m4J: // global
           R1 = _s5l98::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5m4L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l98::P64;
           _s5l8L::P64 = P64[_s5l98::P64 + 16];
           _s5l8O::P64 = P64[_s5l98::P64 + 24];
           _s5l8S::P64 = P64[_s5l98::P64 + 32];
           _s5l91::P64 = P64[_s5l98::P64 + 40];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5l8S::P64;
           P64[Hp - 24] = _s5l91::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8L::P64;
           P64[Hp] = Hp - 38;
           R2 = Hp - 14;
           R1 = _s5l8O::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 $winterleave'_s5l8N_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c5m4R,
                       label: $winterleave'_s5l8N_info
                       rep:HeapRep 2 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m4R: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5m4S; else goto c5m4T;
       c5m4S: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5m4T: // global
           I64[Sp - 48] = block_c5m44_info;
           _s5l8N::P64 = R1;
           _s5l8L::P64 = P64[R1 + 5];
           _s5l8M::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 40] = _s5l8L::P64;
           P64[Sp - 32] = _s5l8M::P64;
           P64[Sp - 24] = _s5l8N::P64;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u5m51; else goto c5m45;
       u5m51: // global
           call _c5m44(R1) args: 0, res: 0, upd: 0;
       c5m45: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m44() //  [R1]
         { info_tbl: [(c5m44,
                       label: block_c5m44_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m44: // global
           _s5l8Q::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c5m4O; else goto c5m4P;
       c5m4O: // global
           R2 = _s5l8Q::P64;
           R1 = P64[Sp + 16];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5m4P: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c5m50; else goto c5m4Z;
       c5m50: // global
           HpAlloc = 200;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5m4Z: // global
           _s5l8S::P64 = P64[R1 + 6];
           _s5l8T::P64 = P64[R1 + 14];
           I64[Hp - 192] = ds2_s5l8U_info;
           P64[Hp - 176] = P64[Sp + 24];
           _s5l8O::P64 = P64[Sp + 32];
           P64[Hp - 168] = _s5l8O::P64;
           P64[Hp - 160] = _s5l8Q::P64;
           P64[Hp - 152] = _s5l8S::P64;
           P64[Hp - 144] = _s5l8T::P64;
           I64[Hp - 136] = stg_sel_0_upd_info;
           _c5m4a::P64 = Hp - 192;
           P64[Hp - 120] = _c5m4a::P64;
           I64[Hp - 112] = stg_sel_1_upd_info;
           P64[Hp - 96] = _c5m4a::P64;
           I64[Hp - 88] = sat_s5l98_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _s5l8O::P64;
           P64[Hp - 56] = _s5l8S::P64;
           _c5m4A::P64 = Hp - 136;
           P64[Hp - 48] = _c5m4A::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 88;
           P64[Hp - 24] = Hp - 112;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8S::P64;
           P64[Hp] = _c5m4A::P64;
           R2 = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 z_s5l9e_entry() //  [R1]
         { info_tbl: [(c5m57,
                       label: z_s5l9e_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m57: // global
           _s5l9e::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5m58; else goto c5m59;
       c5m59: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5m5b; else goto c5m5a;
       c5m5b: // global
           HpAlloc = 24;
           goto c5m58;
       c5m58: // global
           R1 = _s5l9e::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5m5a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l9e::P64;
           _s5l8J::P64 = P64[_s5l9e::P64 + 16];
           _s5l8L::P64 = P64[_s5l9e::P64 + 24];
           _s5l8M::P64 = P64[_s5l9e::P64 + 32];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8L::P64;
           P64[Hp] = _s5l8J::P64;
           R3 = Hp - 14;
           R2 = _s5l8M::P64;
           Sp = Sp - 16;
           call Data.OldList.permutations1_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 go_s5l9g_entry() //  [R1, R2]
         { info_tbl: [(c5m5o,
                       label: go_s5l9g_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m5o: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5m5p; else goto c5m5q;
       c5m5p: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5m5q: // global
           I64[Sp - 32] = block_c5m5h_info;
           _s5l9g::P64 = R1;
           _s5l8N::P64 = P64[R1 + 7];
           _s5l9e::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s5l8N::P64;
           P64[Sp - 16] = _s5l9e::P64;
           P64[Sp - 8] = _s5l9g::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5m5D; else goto c5m5i;
       u5m5D: // global
           call _c5m5h(R1) args: 0, res: 0, upd: 0;
       c5m5i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m5h() //  [R1]
         { info_tbl: [(c5m5h,
                       label: block_c5m5h_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m5h: // global
           if (R1 & 7 == 1) goto c5m5l; else goto c5m5m;
       c5m5l: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5m5m: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5m5A; else goto c5m5z;
       c5m5A: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5m5z: // global
           _s5l9j::P64 = P64[R1 + 6];
           _s5l9k::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s5l9k::P64;
           I64[Sp + 24] = block_c5m5x_info;
           R4 = Hp - 24;
           R3 = _s5l9j::P64;
           R2 = GHC.Base.id_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call $winterleave'_s5l8N_entry(R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m5x() //  [R2]
         { info_tbl: [(c5m5x,
                       label: block_c5m5x_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m5x: // global
           R1 = R2 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5l9p_entry() //  [R1]
         { info_tbl: [(c5m5I,
                       label: sat_s5l9p_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m5I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5m5J; else goto c5m5K;
       c5m5J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5m5K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.permutations1_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.permutations1_entry() //  [R2, R3]
         { info_tbl: [(c5m5P,
                       label: Data.OldList.permutations1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m5P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5m5Q; else goto c5m5R;
       c5m5Q: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.permutations1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5m5R: // global
           I64[Sp - 16] = block_c5m3T_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5m5Y; else goto c5m3U;
       u5m5Y: // global
           call _c5m3T(R1) args: 0, res: 0, upd: 0;
       c5m3U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m3T() //  [R1]
         { info_tbl: [(c5m3T,
                       label: block_c5m3T_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m3T: // global
           if (R1 & 7 == 1) goto c5m5M; else goto c5m5N;
       c5m5M: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5m5N: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c5m5X; else goto c5m5W;
       c5m5X: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5m5W: // global
           _s5l8L::P64 = P64[R1 + 6];
           _s5l8M::P64 = P64[R1 + 14];
           I64[Hp - 128] = $winterleave'_s5l8N_info;
           P64[Hp - 120] = _s5l8L::P64;
           P64[Hp - 112] = _s5l8M::P64;
           I64[Hp - 104] = z_s5l9e_info;
           _s5l8J::P64 = P64[Sp + 8];
           P64[Hp - 88] = _s5l8J::P64;
           P64[Hp - 80] = _s5l8L::P64;
           P64[Hp - 72] = _s5l8M::P64;
           I64[Hp - 64] = go_s5l9g_info;
           P64[Hp - 56] = Hp - 125;
           P64[Hp - 48] = Hp - 104;
           I64[Hp - 40] = sat_s5l9p_info;
           P64[Hp - 24] = _s5l8J::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8J::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           R1 = Hp - 63;
           Sp = Sp + 16;
           call go_s5l9g_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.89664795 UTC

[section ""data" . Data.OldList.permutations_closure" {
     Data.OldList.permutations_closure:
         const Data.OldList.permutations_info;
 },
 sat_s5l9s_entry() //  [R1]
         { info_tbl: [(c5m67,
                       label: sat_s5l9s_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m67: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5m68; else goto c5m69;
       c5m68: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5m69: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.permutations1_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.permutations_entry() //  [R2]
         { info_tbl: [(c5m6b,
                       label: Data.OldList.permutations_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m6b: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5m6f; else goto c5m6e;
       c5m6f: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.OldList.permutations_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5m6e: // global
           I64[Hp - 40] = sat_s5l9s_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.898365466 UTC

[section ""data" . lvl6_r5kSo_closure" {
     lvl6_r5kSo_closure:
         const :_con_info;
         const GHC.Types.[]_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.90827805 UTC

[section ""data" . Data.OldList.sortBy_closure" {
     Data.OldList.sortBy_closure:
         const Data.OldList.sortBy_info;
 },
 merge_s5l9v_entry() //  [R1, R2, R3]
         { info_tbl: [(c5m7b,
                       label: merge_s5l9v_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m7b: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5m7c; else goto c5m7d;
       c5m7c: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5m7d: // global
           I64[Sp - 32] = block_c5m74_info;
           _s5l9v::P64 = R1;
           _s5l9t::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 24] = _s5l9t::P64;
           P64[Sp - 16] = _s5l9v::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5m7S; else goto c5m75;
       u5m7S: // global
           call _c5m74(R1) args: 0, res: 0, upd: 0;
       c5m75: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m74() //  [R1]
         { info_tbl: [(c5m74,
                       label: block_c5m74_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m74: // global
           _s5l9x::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5m78; else goto c5m79;
       c5m78: // global
           R1 = _s5l9x::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5m79: // global
           I64[Sp - 16] = block_c5m7j_info;
           _s5l9y::P64 = R1;
           _s5l9z::P64 = P64[R1 + 6];
           _s5l9A::P64 = P64[R1 + 14];
           R1 = _s5l9x::P64;
           P64[Sp - 8] = _s5l9A::P64;
           P64[Sp] = _s5l9z::P64;
           P64[Sp + 24] = _s5l9y::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5m7R; else goto c5m7l;
       u5m7R: // global
           call _c5m7j(R1) args: 0, res: 0, upd: 0;
       c5m7l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m7j() //  [R1]
         { info_tbl: [(c5m7j,
                       label: block_c5m7j_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m7j: // global
           if (R1 & 7 == 1) goto c5m7r; else goto c5m7w;
       c5m7r: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5m7w: // global
           I64[Sp - 16] = block_c5m7u_info;
           _s5l9C::P64 = P64[R1 + 6];
           R3 = _s5l9C::P64;
           R2 = P64[Sp + 16];
           _s5l9B::P64 = R1;
           _s5l9D::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp - 8] = _s5l9D::P64;
           P64[Sp] = _s5l9C::P64;
           P64[Sp + 24] = _s5l9B::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m7u() //  [R1]
         { info_tbl: [(c5m7u,
                       label: block_c5m7u_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m7u: // global
           _s5l9v::P64 = P64[Sp + 48];
           if (R1 & 7 == 3) goto c5m7L; else goto c5m7D;
       c5m7L: // global
           Hp = Hp + 64;
           _s5l9E::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5m7O; else goto c5m7N;
       c5m7N: // global
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _s5l9v::P64;
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5m7D: // global
           Hp = Hp + 64;
           _s5l9E::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5m7O; else goto c5m7F;
       c5m7O: // global
           HpAlloc = 64;
           R1 = _s5l9E::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5m7F: // global
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _s5l9v::P64;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 mergePairs_s5l9H_entry() //  [R1, R2]
         { info_tbl: [(c5m83,
                       label: mergePairs_s5l9H_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m83: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5m84; else goto c5m85;
       c5m84: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5m85: // global
           I64[Sp - 24] = block_c5m7W_info;
           _s5l9H::P64 = R1;
           _s5l9v::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s5l9v::P64;
           P64[Sp - 8] = _s5l9H::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5m8z; else goto c5m7X;
       u5m8z: // global
           call _c5m7W(R1) args: 0, res: 0, upd: 0;
       c5m7X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m7W() //  [R1]
         { info_tbl: [(c5m7W,
                       label: block_c5m7W_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m7W: // global
           if (R1 & 7 == 1) goto c5m80; else goto c5m81;
       c5m80: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5m81: // global
           I64[Sp - 16] = block_c5m8b_info;
           _s5l9J::P64 = R1;
           _s5l9K::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s5l9K::P64;
           P64[Sp] = _s5l9J::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5m8y; else goto c5m8d;
       u5m8y: // global
           call _c5m8b(R1) args: 0, res: 0, upd: 0;
       c5m8d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m8b() //  [R1]
         { info_tbl: [(c5m8b,
                       label: block_c5m8b_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m8b: // global
           if (R1 & 7 == 1) goto c5m8j; else goto c5m8t;
       c5m8j: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5m8t: // global
           I64[Sp + 16] = block_c5m8m_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           _s5l9O::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s5l9O::P64;
           Sp = Sp + 16;
           call merge_s5l9v_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m8m() //  [R1]
         { info_tbl: [(c5m8m,
                       label: block_c5m8m_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m8m: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5m8w; else goto c5m8v;
       c5m8w: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5m8v: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl12_s5l9R_entry() //  [R1]
         { info_tbl: [(c5m8C,
                       label: lvl12_s5l9R_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m8C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5m8D; else goto c5m8E;
       c5m8D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5m8E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call mergePairs_s5l9H_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5la4_entry() //  [R1, R2]
         { info_tbl: [(c5m94,
                       label: sat_s5la4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m94: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5m98; else goto c5m97;
       c5m98: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5m97: // global
           _s5l9Y::P64 = P64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l9Y::P64;
           P64[Hp] = R2;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sequences_s5l9S_entry() //  [R1, R2]
         { info_tbl: [(c5m9d,
                       label: sequences_s5l9S_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m9d: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5m9e; else goto c5m9f;
       c5m9e: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5m9f: // global
           I64[Sp - 32] = block_c5m8I_info;
           _s5l9t::P64 = P64[R1 + 7];
           _s5l9U::P64 = P64[R1 + 15];
           _s5l9V::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s5l9t::P64;
           P64[Sp - 16] = _s5l9U::P64;
           P64[Sp - 8] = _s5l9V::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5m9H; else goto c5m8J;
       u5m9H: // global
           call _c5m8I(R1) args: 0, res: 0, upd: 0;
       c5m8J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m8I() //  [R1]
         { info_tbl: [(c5m8I,
                       label: block_c5m8I_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m8I: // global
           if (R1 & 7 == 1) goto c5m9a; else goto c5m9b;
       c5m9a: // global
           R1 = lvl6_r5kSo_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5m9b: // global
           I64[Sp - 16] = block_c5m8O_info;
           _s5l9X::P64 = R1;
           _s5l9Y::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s5l9Y::P64;
           P64[Sp] = _s5l9X::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5m9G; else goto c5m8P;
       u5m9G: // global
           call _c5m8O(R1) args: 0, res: 0, upd: 0;
       c5m8P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m8O() //  [R1]
         { info_tbl: [(c5m8O,
                       label: block_c5m8O_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m8O: // global
           if (R1 & 7 == 1) goto c5m9m; else goto c5m9r;
       c5m9m: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5m9p; else goto c5m9o;
       c5m9p: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5m9o: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5m9r: // global
           I64[Sp] = block_c5m8U_info;
           _s5la1::P64 = P64[R1 + 6];
           R3 = _s5la1::P64;
           R2 = P64[Sp + 8];
           _s5la2::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _s5la2::P64;
           P64[Sp + 24] = _s5la1::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m8U() //  [R1]
         { info_tbl: [(c5m8U,
                       label: block_c5m8U_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m8U: // global
           _s5l9Y::P64 = P64[Sp + 8];
           _s5la1::P64 = P64[Sp + 24];
           _s5la2::P64 = P64[Sp + 16];
           if (R1 & 7 == 3) goto c5m9A; else goto c5m9t;
       c5m9A: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5m9D; else goto c5m9C;
       c5m9D: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5m9C: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l9Y::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R4 = _s5la2::P64;
           R3 = Hp - 14;
           R2 = _s5la1::P64;
           R1 = P64[Sp + 32];
           Sp = Sp + 48;
           call descending_s5l9U_entry(R4,
                                       R3,
                                       R2,
                                       R1) args: 8, res: 0, upd: 8;
       c5m9t: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5m9w; else goto c5m9v;
       c5m9w: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5m9v: // global
           I64[Hp - 8] = sat_s5la4_info;
           P64[Hp] = _s5l9Y::P64;
           R4 = _s5la2::P64;
           R3 = Hp - 7;
           R2 = _s5la1::P64;
           R1 = P64[Sp + 40];
           Sp = Sp + 48;
           call ascending_s5l9V_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl13_s5l9T_entry() //  [R1]
         { info_tbl: [(c5m9K,
                       label: lvl13_s5l9T_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m9K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5m9L; else goto c5m9M;
       c5m9L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5m9M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call sequences_s5l9S_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 descending_s5l9U_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c5m9R,
                       label: descending_s5l9U_info
                       rep:HeapRep 3 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m9R: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5m9S; else goto u5maf;
       c5m9S: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5maf: // global
           P64[Sp - 32] = R1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call _c5m6x() args: 0, res: 0, upd: 0;
     }
 },
 _c5m6x() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m6x: // global
           I64[Sp - 24] = block_c5m6A_info;
           R1 = P64[Sp + 24];
           _s5l9U::P64 = P64[Sp];
           P64[Sp - 16] = P64[_s5l9U::P64 + 13];
           P64[Sp - 8] = P64[_s5l9U::P64 + 21];
           P64[Sp + 24] = P64[_s5l9U::P64 + 5];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5mah; else goto c5m6B;
       u5mah: // global
           call _c5m6A(R1) args: 0, res: 0, upd: 0;
       c5m6B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m6A() //  [R1]
         { info_tbl: [(c5m6A,
                       label: block_c5m6A_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m6A: // global
           _s5la6::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5m9O; else goto c5m9P;
       c5m9O: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5m9Z; else goto c5m9Y;
       c5m9Z: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5m9Y: // global
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5la6::P64;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5m9P: // global
           I64[Sp - 8] = block_c5m6G_info;
           _s5lab::P64 = P64[R1 + 6];
           R3 = _s5lab::P64;
           R2 = _s5la6::P64;
           _s5la9::P64 = R1;
           _s5lac::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5lac::P64;
           P64[Sp + 16] = _s5lab::P64;
           P64[Sp + 48] = _s5la9::P64;
           Sp = Sp - 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m6G() //  [R1]
         { info_tbl: [(c5m6G,
                       label: block_c5m6G_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m6G: // global
           _s5la6::P64 = P64[Sp + 40];
           _s5la7::P64 = P64[Sp + 48];
           if (R1 & 7 == 3) goto c5maa; else goto c5ma6;
       c5maa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mad; else goto c5mac;
       c5mad: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mac: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5la6::P64;
           P64[Hp] = _s5la7::P64;
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = Hp - 14;
           P64[Sp + 56] = P64[Sp + 8];
           Sp = Sp + 32;
           call _c5m6x() args: 0, res: 0, upd: 0;
       c5ma6: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5ma9; else goto c5ma8;
       c5ma9: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ma8: // global
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 56];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5la6::P64;
           P64[Hp - 24] = _s5la7::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5las_entry() //  [R1, R2]
         { info_tbl: [(c5map,
                       label: sat_s5las_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5map: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mat; else goto c5mas;
       c5mat: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5mas: // global
           _s5lah::P64 = P64[R1 + 7];
           _s5lai::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5lah::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s5lai::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 ascending_s5l9V_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c5may,
                       label: ascending_s5l9V_info
                       rep:HeapRep 3 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5may: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5maz; else goto u5mbb;
       c5maz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5mbb: // global
           P64[Sp - 32] = R1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call _c5m6N() args: 0, res: 0, upd: 0;
     }
 },
 _c5m6N() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m6N: // global
           I64[Sp - 24] = block_c5m6Q_info;
           R1 = P64[Sp + 24];
           _s5l9V::P64 = P64[Sp];
           P64[Sp - 16] = P64[_s5l9V::P64 + 13];
           P64[Sp - 8] = P64[_s5l9V::P64 + 21];
           P64[Sp + 24] = P64[_s5l9V::P64 + 5];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5mbd; else goto c5m6R;
       u5mbd: // global
           call _c5m6Q(R1) args: 0, res: 0, upd: 0;
       c5m6R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5m6Q() //  [R1]
         { info_tbl: [(c5m6Q,
                       label: block_c5m6Q_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m6Q: // global
           _s5lah::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5mav; else goto c5maw;
       c5mav: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5maK; else goto c5maJ;
       c5maK: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5maJ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5lah::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp + 8] = block_c5maD_info;
           R2 = Hp - 14;
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c5maw: // global
           I64[Sp - 8] = block_c5m6W_info;
           _s5lan::P64 = P64[R1 + 6];
           R3 = _s5lan::P64;
           R2 = _s5lah::P64;
           _s5lak::P64 = R1;
           _s5lao::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5lao::P64;
           P64[Sp + 16] = _s5lan::P64;
           P64[Sp + 48] = _s5lak::P64;
           Sp = Sp - 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5maD() //  [R1]
         { info_tbl: [(c5maD,
                       label: block_c5maD_info
                       rep:StackRep [False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5maD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5maN; else goto c5maM;
       c5maN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5maM: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5m6W() //  [R1]
         { info_tbl: [(c5m6W,
                       label: block_c5m6W_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5m6W: // global
           _s5lah::P64 = P64[Sp + 40];
           _s5lai::P64 = P64[Sp + 48];
           if (R1 & 7 == 3) goto c5mb3; else goto c5maQ;
       c5mb3: // global
           Hp = Hp + 24;
           _s5lap::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5mb6; else goto c5mb5;
       c5mb5: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5lah::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp + 8] = block_c5maX_info;
           R2 = Hp - 14;
           R1 = _s5lai::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c5maQ: // global
           Hp = Hp + 24;
           _s5lap::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5mb6; else goto c5maS;
       c5mb6: // global
           HpAlloc = 24;
           R1 = _s5lap::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5maS: // global
           I64[Hp - 16] = sat_s5las_info;
           P64[Hp - 8] = _s5lah::P64;
           P64[Hp] = _s5lai::P64;
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = Hp - 15;
           P64[Sp + 56] = P64[Sp + 8];
           Sp = Sp + 32;
           call _c5m6N() args: 0, res: 0, upd: 0;
     }
 },
 _c5maX() //  [R1]
         { info_tbl: [(c5maX,
                       label: block_c5maX_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5maX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5mb9; else goto c5mb8;
       c5mb9: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mb8: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 48];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.sortBy_entry() //  [R2, R3]
         { info_tbl: [(c5mbi,
                       label: Data.OldList.sortBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mbi: // global
           _s5l9u::P64 = R3;
           _s5l9t::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c5mbj; else goto c5mbk;
       c5mbk: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c5mbm; else goto c5mbl;
       c5mbm: // global
           HpAlloc = 176;
           goto c5mbj;
       c5mbj: // global
           R3 = _s5l9u::P64;
           R2 = _s5l9t::P64;
           R1 = Data.OldList.sortBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mbl: // global
           I64[Hp - 168] = merge_s5l9v_info;
           P64[Hp - 160] = _s5l9t::P64;
           I64[Hp - 152] = mergePairs_s5l9H_info;
           P64[Hp - 144] = Hp - 166;
           I64[Hp - 136] = lvl12_s5l9R_info;
           _c5m6m::P64 = Hp - 151;
           P64[Hp - 120] = _c5m6m::P64;
           I64[Hp - 112] = sequences_s5l9S_info;
           P64[Hp - 104] = _s5l9t::P64;
           P64[Hp - 96] = Hp - 53;
           P64[Hp - 88] = Hp - 21;
           I64[Hp - 80] = lvl13_s5l9T_info;
           _c5m6q::P64 = Hp - 111;
           P64[Hp - 64] = _c5m6q::P64;
           I64[Hp - 56] = descending_s5l9U_info;
           P64[Hp - 48] = _s5l9t::P64;
           P64[Hp - 40] = _c5m6q::P64;
           _c5m6r::P64 = Hp - 80;
           P64[Hp - 32] = _c5m6r::P64;
           I64[Hp - 24] = ascending_s5l9V_info;
           P64[Hp - 16] = _s5l9t::P64;
           P64[Hp - 8] = _c5m6q::P64;
           P64[Hp] = _c5m6r::P64;
           I64[Sp - 24] = block_c5mbg_info;
           R2 = _s5l9u::P64;
           R1 = _c5m6q::P64;
           P64[Sp - 16] = _c5m6m::P64;
           P64[Sp - 8] = Hp - 136;
           Sp = Sp - 24;
           call sequences_s5l9S_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mbg() //  [R1]
         { info_tbl: [(c5mbg,
                       label: block_c5mbg_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mbg: // global
           P64[Sp] = R1;
           call _c5mbt() args: 0, res: 0, upd: 0;
     }
 },
 _c5mbt() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mbt: // global
           _s5lax::P64 = P64[Sp];
           I64[Sp] = block_c5mbv_info;
           R1 = _s5lax::P64;
           if (R1 & 7 != 0) goto u5mc5; else goto c5mbx;
       u5mc5: // global
           call _c5mbv(R1) args: 0, res: 0, upd: 0;
       c5mbx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mbv() //  [R1]
         { info_tbl: [(c5mbv,
                       label: block_c5mbv_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mbv: // global
           if (R1 & 7 == 1) goto c5mbD; else goto c5mbI;
       c5mbD: // global
           P64[Sp] = P64[Sp + 16];
           call _c5mbt() args: 0, res: 0, upd: 0;
       c5mbI: // global
           I64[Sp - 16] = block_c5mbG_info;
           _s5lay::P64 = R1;
           _s5laz::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s5laz::P64;
           P64[Sp] = _s5lay::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5mc6; else goto c5mbJ;
       u5mc6: // global
           call _c5mbG(R1) args: 0, res: 0, upd: 0;
       c5mbJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mbG() //  [R1]
         { info_tbl: [(c5mbG,
                       label: block_c5mbG_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mbG: // global
           if (R1 & 7 == 1) goto c5mbP; else goto c5mbU;
       c5mbP: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5mbU: // global
           _s5lay::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5mbS_info;
           R2 = _s5lay::P64;
           R1 = P64[Sp + 24];
           Sp = Sp + 16;
           call mergePairs_s5l9H_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mbS() //  [R1]
         { info_tbl: [(c5mbS,
                       label: block_c5mbS_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mbS: // global
           P64[Sp] = R1;
           call _c5mbt() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.927560552 UTC

[section ""data" . Data.OldList.sortOn_closure" {
     Data.OldList.sortOn_closure:
         const Data.OldList.sortOn_info;
 },
 sat_s5laW_entry() //  [R1, R2]
         { info_tbl: [(c5mcl,
                       label: sat_s5laW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mcl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mcm; else goto c5mcn;
       c5mcm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5mcn: // global
           I64[Sp - 16] = block_c5mci_info;
           _s5laU::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s5laU::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mci() //  [R1]
         { info_tbl: [(c5mci,
                       label: block_c5mci_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mci: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mcq; else goto c5mcp;
       c5mcq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mcp: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5laT_entry() //  [R1, R2, R3]
         { info_tbl: [(c5mcC,
                       label: sat_s5laT_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mcC: // global
           _s5laK::P64 = R3;
           _s5laJ::P64 = R2;
           _s5laT::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5mcD; else goto c5mcE;
       c5mcE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5mcG; else goto c5mcF;
       c5mcG: // global
           HpAlloc = 48;
           goto c5mcD;
       c5mcD: // global
           R3 = _s5laK::P64;
           R2 = _s5laJ::P64;
           R1 = _s5laT::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mcF: // global
           _s5laG::P64 = P64[_s5laT::P64 + 6];
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _s5laK::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s5laJ::P64;
           R2 = _s5laG::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 Data.OldList.sortOn_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mcH,
                       label: Data.OldList.sortOn_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mcH: // global
           _s5laI::P64 = R4;
           _s5laH::P64 = R3;
           _s5laG::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c5mcJ; else goto c5mcK;
       c5mcK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5mcM; else goto c5mcL;
       c5mcM: // global
           HpAlloc = 16;
           goto c5mcJ;
       c5mcJ: // global
           R4 = _s5laI::P64;
           R3 = _s5laH::P64;
           R2 = _s5laG::P64;
           R1 = Data.OldList.sortOn_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mcL: // global
           I64[Hp - 8] = sat_s5laW_info;
           P64[Hp] = _s5laH::P64;
           I64[Sp - 16] = block_c5mcr_info;
           R3 = _s5laI::P64;
           R2 = Hp - 7;
           P64[Sp - 8] = _s5laG::P64;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mcr() //  [R1]
         { info_tbl: [(c5mcr,
                       label: block_c5mcr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mcr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5mcP; else goto c5mcO;
       c5mcP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mcO: // global
           I64[Hp - 8] = sat_s5laT_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c5mcI_info;
           R3 = R1;
           R2 = Hp - 6;
           Sp = Sp + 8;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mcI() //  [R1]
         { info_tbl: [(c5mcI,
                       label: block_c5mcI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mcI: // global
           R3 = R1;
           R2 = Data.Tuple.snd_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.934847229 UTC

[section ""data" . Data.OldList.sort_closure" {
     Data.OldList.sort_closure:
         const Data.OldList.sort_info;
 },
 sat_s5lb1_entry() //  [R1]
         { info_tbl: [(c5md2,
                       label: sat_s5lb1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5md2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5md3; else goto c5md4;
       c5md3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5md4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.sort_entry() //  [R2, R3]
         { info_tbl: [(c5md5,
                       label: Data.OldList.sort_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5md5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5md9; else goto c5md8;
       c5md9: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.sort_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5md8: // global
           I64[Hp - 16] = sat_s5lb1_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.937708257 UTC

[section ""data" . Data.OldList.unfoldr_closure" {
     Data.OldList.unfoldr_closure:
         const Data.OldList.unfoldr_info;
 },
 go_s5lb4_entry() //  [R1, R2]
         { info_tbl: [(c5mdp,
                       label: go_s5lb4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mdp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mdq; else goto c5mdr;
       c5mdq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5mdr: // global
           I64[Sp - 16] = block_c5mdj_info;
           R2 = R2;
           _s5lb4::P64 = R1;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s5lb4::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mdj() //  [R1]
         { info_tbl: [(c5mdj,
                       label: block_c5mdj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mdj: // global
           if (R1 & 7 == 1) goto c5mdm; else goto c5mdn;
       c5mdm: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mdn: // global
           I64[Sp] = block_c5mdx_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u5mdI; else goto c5mdy;
       u5mdI: // global
           call _c5mdx(R1) args: 0, res: 0, upd: 0;
       c5mdy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mdx() //  [R1]
         { info_tbl: [(c5mdx,
                       label: block_c5mdx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mdx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5mdH; else goto c5mdG;
       c5mdH: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mdG: // global
           _s5lb9::P64 = P64[R1 + 7];
           _s5lba::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s5lba::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5lb9::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.unfoldr_entry() //  [R2, R3]
         { info_tbl: [(c5mdJ,
                       label: Data.OldList.unfoldr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mdJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5mdN; else goto c5mdM;
       c5mdN: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.unfoldr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mdM: // global
           I64[Hp - 8] = go_s5lb4_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go_s5lb4_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.940440088 UTC

[section ""data" . lvl7_r5kSp_closure" {
     lvl7_r5kSp_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.942172555 UTC

[section ""data" . Data.OldList.unlines_closure" {
     Data.OldList.unlines_closure:
         const Data.OldList.unlines_info;
 },
 sat_s5lbg_entry() //  [R1]
         { info_tbl: [(c5me2,
                       label: sat_s5lbg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5me2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5me3; else goto c5me4;
       c5me3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5me4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.unlines_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.unlines_entry() //  [R2]
         { info_tbl: [(c5me9,
                       label: Data.OldList.unlines_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5me9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5mea; else goto c5meb;
       c5mea: // global
           R2 = R2;
           R1 = Data.OldList.unlines_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5meb: // global
           I64[Sp - 8] = block_c5mdS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mei; else goto c5mdT;
       u5mei: // global
           call _c5mdS(R1) args: 0, res: 0, upd: 0;
       c5mdT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mdS() //  [R1]
         { info_tbl: [(c5mdS,
                       label: block_c5mdS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mdS: // global
           if (R1 & 7 == 1) goto c5me6; else goto c5me7;
       c5me6: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5me7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5meh; else goto c5meg;
       c5meh: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5meg: // global
           _s5lbe::P64 = P64[R1 + 6];
           _s5lbf::P64 = P64[R1 + 14];
           I64[Hp - 40] = sat_s5lbg_info;
           P64[Hp - 24] = _s5lbf::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl7_r5kSp_closure+1;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = _s5lbe::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.947199232 UTC

[section ""data" . Data.OldList.wordsFB_closure" {
     Data.OldList.wordsFB_closure:
         const Data.OldList.wordsFB_info;
 },
 ds_s5lbq_entry() //  [R1]
         { info_tbl: [(c5meE,
                       label: ds_s5lbq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5meE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5meF; else goto c5meG;
       c5meF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5meG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5meB_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.isSpace_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5meB() //  [R1, R2]
         { info_tbl: [(c5meB,
                       label: block_c5meB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5meB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5meJ; else goto c5meI;
       c5meJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5meI: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lbB_entry() //  [R1]
         { info_tbl: [(c5meR,
                       label: sat_s5lbB_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5meR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5meS; else goto c5meT;
       c5meS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5meT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c5meO_info;
           _s5lbl::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s5lbl::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5meX; else goto c5meP;
       u5meX: // global
           call _c5meO(R1) args: 0, res: 0, upd: 0;
       c5meP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5meO() //  [R1]
         { info_tbl: [(c5meO,
                       label: block_c5meO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5meO: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s5lbl_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 go_s5lbl_entry() //  [R1, R2]
         { info_tbl: [(c5mf2,
                       label: go_s5lbl_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mf2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mf3; else goto c5mf4;
       c5mf3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5mf4: // global
           I64[Sp - 32] = block_c5mes_info;
           R3 = R2;
           R2 = GHC.Unicode.isSpace_closure+1;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = R1;
           Sp = Sp - 32;
           call GHC.List.dropWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mes() //  [R1]
         { info_tbl: [(c5mes,
                       label: block_c5mes_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mes: // global
           if (R1 & 7 == 1) goto c5meZ; else goto c5mf0;
       c5meZ: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5mf0: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5mfa; else goto c5mf9;
       c5mfa: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mf9: // global
           I64[Hp - 72] = ds_s5lbq_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_s5lbB_info;
           P64[Hp - 32] = P64[Sp + 24];
           _c5mex::P64 = Hp - 72;
           P64[Hp - 24] = _c5mex::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5mex::P64;
           R3 = Hp - 48;
           R2 = Hp - 16;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.wordsFB_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mfb,
                       label: Data.OldList.wordsFB_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mfb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mff; else goto c5mfe;
       c5mff: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.wordsFB_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mfe: // global
           I64[Hp - 16] = go_s5lbl_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = R4;
           R1 = Hp - 15;
           call go_s5lbl_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Data.OldList.words_closure" {
     Data.OldList.words_closure:
         const Data.OldList.words_info;
 },
 ds_s5lbG_entry() //  [R1]
         { info_tbl: [(c5mfw,
                       label: ds_s5lbG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mfw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mfx; else goto c5mfy;
       c5mfx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mfy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5mft_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.isSpace_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5mft() //  [R1, R2]
         { info_tbl: [(c5mft,
                       label: block_c5mft_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mft: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mfB; else goto c5mfA;
       c5mfB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5mfA: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lbR_entry() //  [R1]
         { info_tbl: [(c5mfJ,
                       label: sat_s5lbR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mfJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mfK; else goto c5mfL;
       c5mfK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mfL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5mfG_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5mfP; else goto c5mfH;
       u5mfP: // global
           call _c5mfG(R1) args: 0, res: 0, upd: 0;
       c5mfH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5mfG() //  [R1]
         { info_tbl: [(c5mfG,
                       label: block_c5mfG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mfG: // global
           R2 = P64[R1 + 15];
           Sp = Sp + 8;
           call Data.OldList.words_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.words_entry() //  [R2]
         { info_tbl: [(c5mfU,
                       label: Data.OldList.words_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mfU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5mfV; else goto c5mfW;
       c5mfV: // global
           R2 = R2;
           R1 = Data.OldList.words_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5mfW: // global
           I64[Sp - 8] = block_c5mfk_info;
           R3 = R2;
           R2 = GHC.Unicode.isSpace_closure+1;
           Sp = Sp - 8;
           call GHC.List.dropWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mfk() //  [R1]
         { info_tbl: [(c5mfk,
                       label: block_c5mfk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mfk: // global
           if (R1 & 7 == 1) goto c5mfR; else goto c5mfS;
       c5mfR: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mfS: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c5mg3; else goto c5mg2;
       c5mg3: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mg2: // global
           I64[Hp - 88] = ds_s5lbG_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = sat_s5lbR_info;
           _c5mfp::P64 = Hp - 88;
           P64[Hp - 48] = _c5mfp::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5mfp::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.953950147 UTC

[section ""data" . lvl8_r5kSq_closure" {
     lvl8_r5kSq_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.955397181 UTC

[section ""data" . Data.OldList.unwordsFB_closure" {
     Data.OldList.unwordsFB_closure:
         const Data.OldList.unwordsFB_info;
 },
 sat_s5lbU_entry() //  [R1]
         { info_tbl: [(c5mgc,
                       label: sat_s5lbU_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mgc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mgd; else goto c5mge;
       c5mgd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mge: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.unwordsFB_entry() //  [R2, R3]
         { info_tbl: [(c5mgg,
                       label: Data.OldList.unwordsFB_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mgg: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5mgk; else goto c5mgj;
       c5mgk: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.unwordsFB_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mgj: // global
           I64[Hp - 48] = sat_s5lbU_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl8_r5kSq_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.958103418 UTC

[section ""data" . Data.OldList.unwords_go_closure" {
     Data.OldList.unwords_go_closure:
         const Data.OldList.unwords_go_info;
 },
 sat_s5lbZ_entry() //  [R1]
         { info_tbl: [(c5mgD,
                       label: sat_s5lbZ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mgD: // global
           R2 = P64[R1 + 16];
           call Data.OldList.unwords_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5lc0_entry() //  [R1]
         { info_tbl: [(c5mgG,
                       label: sat_s5lc0_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mgG: // global
           _s5lc0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5mgH; else goto c5mgI;
       c5mgI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mgK; else goto c5mgJ;
       c5mgK: // global
           HpAlloc = 24;
           goto c5mgH;
       c5mgH: // global
           R1 = _s5lc0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mgJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5lc0::P64;
           _s5lbX::P64 = P64[_s5lc0::P64 + 16];
           _s5lbY::P64 = P64[_s5lc0::P64 + 24];
           I64[Hp - 16] = sat_s5lbZ_info;
           P64[Hp] = _s5lbY::P64;
           R3 = Hp - 16;
           R2 = _s5lbX::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.unwords_go_entry() //  [R2]
         { info_tbl: [(c5mgP,
                       label: Data.OldList.unwords_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mgP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5mgQ; else goto c5mgR;
       c5mgQ: // global
           R2 = R2;
           R1 = Data.OldList.unwords_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5mgR: // global
           I64[Sp - 8] = block_c5mgp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mgY; else goto c5mgq;
       u5mgY: // global
           call _c5mgp(R1) args: 0, res: 0, upd: 0;
       c5mgq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mgp() //  [R1]
         { info_tbl: [(c5mgp,
                       label: block_c5mgp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mgp: // global
           if (R1 & 7 == 1) goto c5mgM; else goto c5mgN;
       c5mgM: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mgN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5mgX; else goto c5mgW;
       c5mgX: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mgW: // global
           _s5lbX::P64 = P64[R1 + 6];
           _s5lbY::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s5lc0_info;
           P64[Hp - 32] = _s5lbX::P64;
           P64[Hp - 24] = _s5lbY::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl8_r5kSq_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.96205047 UTC

[section ""data" . Data.OldList.tailUnwords_closure" {
     Data.OldList.tailUnwords_closure:
         const Data.OldList.tailUnwords_info;
 },
 Data.OldList.tailUnwords_entry() //  [R2]
         { info_tbl: [(c5mha,
                       label: Data.OldList.tailUnwords_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mha: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5mhb; else goto c5mhc;
       c5mhb: // global
           R2 = R2;
           R1 = Data.OldList.tailUnwords_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5mhc: // global
           I64[Sp - 8] = block_c5mh3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mhj; else goto c5mh4;
       u5mhj: // global
           call _c5mh3(R1) args: 0, res: 0, upd: 0;
       c5mh4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mh3() //  [R1]
         { info_tbl: [(c5mh3,
                       label: block_c5mh3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mh3: // global
           if (R1 & 7 == 1) goto c5mh7; else goto c5mh8;
       c5mh7: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mh8: // global
           R1 = P64[R1 + 14] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Data.OldList.unwords_closure" {
     Data.OldList.unwords_closure:
         const Data.OldList.unwords_info;
 },
 sat_s5lc9_entry() //  [R1]
         { info_tbl: [(c5mhy,
                       label: sat_s5lc9_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mhy: // global
           R2 = P64[R1 + 16];
           call Data.OldList.unwords_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.unwords_entry() //  [R2]
         { info_tbl: [(c5mhF,
                       label: Data.OldList.unwords_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mhF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5mhG; else goto c5mhH;
       c5mhG: // global
           R2 = R2;
           R1 = Data.OldList.unwords_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5mhH: // global
           I64[Sp - 8] = block_c5mho_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mhN; else goto c5mhp;
       u5mhN: // global
           call _c5mho(R1) args: 0, res: 0, upd: 0;
       c5mhp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mho() //  [R1]
         { info_tbl: [(c5mho,
                       label: block_c5mho_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mho: // global
           if (R1 & 7 == 1) goto c5mhC; else goto c5mhD;
       c5mhC: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mhD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mhM; else goto c5mhL;
       c5mhM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mhL: // global
           _s5lc7::P64 = P64[R1 + 6];
           _s5lc8::P64 = P64[R1 + 14];
           I64[Hp - 16] = sat_s5lc9_info;
           P64[Hp] = _s5lc8::P64;
           R3 = Hp - 16;
           R2 = _s5lc7::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.965453872 UTC

[section ""data" . lvl9_r5kSr_closure" {
     lvl9_r5kSr_closure:
         const lvl9_r5kSr_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r5kSr_entry() //  [R1]
         { info_tbl: [(c5mhU,
                       label: lvl9_r5kSr_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mhU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mhV; else goto c5mhW;
       c5mhV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mhW: // global
           (_c5mhR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5mhR::I64 == 0) goto c5mhT; else goto c5mhS;
       c5mhT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5mhS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5mhR::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.List.reverse1_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.967030615 UTC

[section ""data" . lvl10_r5kSs_closure" {
     lvl10_r5kSs_closure:
         const lvl10_r5kSs_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_r5kSs_entry() //  [R1]
         { info_tbl: [(c5mi3,
                       label: lvl10_r5kSs_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mi3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mi4; else goto c5mi5;
       c5mi4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mi5: // global
           (_c5mi0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5mi0::I64 == 0) goto c5mi2; else goto c5mi1;
       c5mi2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5mi1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5mi0::I64;
           R3 = lvl9_r5kSr_closure;
           R2 = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.972031766 UTC

[section ""data" . poly_$wgo_r5kSt_closure" {
     poly_$wgo_r5kSt_closure:
         const poly_$wgo_r5kSt_info;
         const 0;
 },
 poly_$wgo_r5kSt_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mi7: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2,
                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5lco_entry() //  [R1]
         { info_tbl: [(c5miB,
                       label: sat_s5lco_info
                       rep:HeapRep 3 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5miB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5miC; else goto c5miD;
       c5miC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5miD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 32];
           R4 = P64[R1 + 16];
           R3 = I64[R1 + 40];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lcm_entry() //  [R1]
         { info_tbl: [(c5miM,
                       label: sat_s5lcm_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5miM: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5lcn_entry() //  [R1]
         { info_tbl: [(c5miP,
                       label: sat_s5lcn_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5miP: // global
           _s5lcn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5miQ; else goto c5miR;
       c5miR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5miT; else goto c5miS;
       c5miT: // global
           HpAlloc = 24;
           goto c5miQ;
       c5miQ: // global
           R1 = _s5lcn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5miS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5lcn::P64;
           _s5lcc::P64 = P64[_s5lcn::P64 + 16];
           _s5lcl::P64 = P64[_s5lcn::P64 + 24];
           I64[Hp - 16] = sat_s5lcm_info;
           P64[Hp] = _s5lcl::P64;
           R3 = Hp - 16;
           R2 = _s5lcc::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lcr_entry() //  [R1]
         { info_tbl: [(c5mj7,
                       label: sat_s5lcr_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mj7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mjb; else goto c5mja;
       c5mjb: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mja: // global
           _s5lcd::P64 = P64[R1 + 16];
           _s5lcf::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5lcf::P64;
           P64[Hp] = _s5lcd::P64;
           R3 = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 b'_s5lcp_entry() //  [R1]
         { info_tbl: [(c5mjc,
                       label: b'_s5lcp_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mjc: // global
           _s5lcp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5mjd; else goto c5mje;
       c5mje: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5mjg; else goto c5mjf;
       c5mjg: // global
           HpAlloc = 32;
           goto c5mjd;
       c5mjd: // global
           R1 = _s5lcp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mjf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5lcp::P64;
           _s5lcc::P64 = P64[_s5lcp::P64 + 16];
           _s5lcd::P64 = P64[_s5lcp::P64 + 24];
           _s5lcf::P64 = P64[_s5lcp::P64 + 32];
           I64[Hp - 24] = sat_s5lcr_info;
           P64[Hp - 8] = _s5lcd::P64;
           P64[Hp] = _s5lcf::P64;
           R3 = Hp - 24;
           R2 = _s5lcc::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lct_entry() //  [R1]
         { info_tbl: [(c5mjl,
                       label: sat_s5lct_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mjl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mjm; else goto c5mjn;
       c5mjm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mjn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = GHC.Types.[]_closure+1;
           R4 = P64[R1 + 24];
           R3 = I64[R1 + 32];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lcs_entry() //  [R1]
         { info_tbl: [(c5mjs,
                       label: sat_s5lcs_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mjs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mjt; else goto c5mju;
       c5mjt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mju: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl9_r5kSr_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lcx_entry() //  [R1]
         { info_tbl: [(c5mjB,
                       label: sat_s5lcx_info
                       rep:HeapRep 3 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mjB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mjC; else goto c5mjD;
       c5mjC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mjD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 32];
           R4 = P64[R1 + 16];
           R3 = I64[R1 + 40];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lcv_entry() //  [R1]
         { info_tbl: [(c5mjM,
                       label: sat_s5lcv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mjM: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5lcw_entry() //  [R1]
         { info_tbl: [(c5mjP,
                       label: sat_s5lcw_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mjP: // global
           _s5lcw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5mjQ; else goto c5mjR;
       c5mjR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mjT; else goto c5mjS;
       c5mjT: // global
           HpAlloc = 24;
           goto c5mjQ;
       c5mjQ: // global
           R1 = _s5lcw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mjS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5lcw::P64;
           _s5lcc::P64 = P64[_s5lcw::P64 + 16];
           _s5lcu::P64 = P64[_s5lcw::P64 + 24];
           I64[Hp - 16] = sat_s5lcv_info;
           P64[Hp] = _s5lcu::P64;
           R3 = Hp - 16;
           R2 = _s5lcc::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_$wgo_r5kSt_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5mjY,
                       label: poly_$wgo_r5kSt_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mjY: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c5mjZ; else goto c5mk0;
       c5mjZ: // global
           R1 = poly_$wgo_r5kSt_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c5mk0: // global
           I64[Sp - 32] = block_c5mib_info;
           R1 = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5mkt; else goto c5mic;
       u5mkt: // global
           call _c5mib(R1) args: 0, res: 0, upd: 0;
       c5mic: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mib() //  [R1]
         { info_tbl: [(c5mib,
                       label: block_c5mib_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mib: // global
           if (R1 & 7 == 1) goto c5mjV; else goto c5mjW;
       c5mjV: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mjW: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c5mk5; else goto c5mk4;
       c5mk5: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mk4: // global
           _s5lcf::P64 = P64[R1 + 6];
           _s5lcg::P64 = P64[R1 + 14];
           _s5lch::I64 = I64[Sp + 8] + 1;
           if (_s5lch::I64 >= 255) goto c5mki; else goto c5mkk;
       c5mki: // global
           Hp = Hp - 128;
           _s5lck::I64 = _s5lch::I64 & (_s5lch::I64 + 1);
           if (_s5lck::I64 != 0) goto u5mkm; else goto u5mkl;
       u5mkm: // global
           I64[Sp - 16] = _s5lch::I64;
           I64[Sp - 8] = _s5lck::I64;
           P64[Sp] = _s5lcg::P64;
           P64[Sp + 8] = _s5lcf::P64;
           Sp = Sp - 16;
           call _c5miu() args: 0, res: 0, upd: 0;
       u5mkl: // global
           I64[Sp - 16] = _s5lch::I64;
           I64[Sp - 8] = _s5lck::I64;
           P64[Sp] = _s5lcg::P64;
           P64[Sp + 8] = _s5lcf::P64;
           Sp = Sp - 16;
           call _c5miW() args: 0, res: 0, upd: 0;
       c5mkk: // global
           I64[Hp - 120] = :_con_info;
           P64[Hp - 112] = _s5lcf::P64;
           P64[Hp - 104] = P64[Sp + 24];
           I64[Hp - 96] = sat_s5lcx_info;
           _s5lcc::P64 = P64[Sp + 16];
           P64[Hp - 80] = _s5lcc::P64;
           P64[Hp - 72] = _s5lcg::P64;
           _c5mjw::P64 = Hp - 118;
           P64[Hp - 64] = _c5mjw::P64;
           I64[Hp - 56] = _s5lch::I64;
           I64[Hp - 48] = sat_s5lcw_info;
           P64[Hp - 32] = _s5lcc::P64;
           P64[Hp - 24] = _c5mjw::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5miu() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5miu: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c5mkb; else goto c5mka;
       c5mkb: // global
           HpAlloc = 128;
           I64[Sp - 8] = block_c5mit_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c5mka: // global
           I64[Hp - 120] = :_con_info;
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 40];
           I64[Hp - 96] = sat_s5lco_info;
           _s5lcc::P64 = P64[Sp + 32];
           P64[Hp - 80] = _s5lcc::P64;
           P64[Hp - 72] = P64[Sp + 16];
           _c5miw::P64 = Hp - 118;
           P64[Hp - 64] = _c5miw::P64;
           I64[Hp - 56] = I64[Sp];
           I64[Hp - 48] = sat_s5lcn_info;
           P64[Hp - 32] = _s5lcc::P64;
           P64[Hp - 24] = _c5miw::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5mit() //  [R1]
         { info_tbl: [(c5mit,
                       label: block_c5mit_info
                       rep:StackRep [True, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mit: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c5miu() args: 0, res: 0, upd: 0;
     }
 },
 _c5miW() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5miW: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c5mkg; else goto c5mkf;
       c5mkg: // global
           HpAlloc = 128;
           I64[Sp - 8] = block_c5miV_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c5mkf: // global
           I64[Hp - 120] = b'_s5lcp_info;
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 24];
           I64[Hp - 80] = sat_s5lct_info;
           P64[Hp - 64] = P64[Sp + 16];
           _c5miY::P64 = Hp - 120;
           P64[Hp - 56] = _c5miY::P64;
           I64[Hp - 48] = I64[Sp];
           I64[Hp - 40] = sat_s5lcs_info;
           P64[Hp - 24] = _c5miY::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5miV() //  [R1]
         { info_tbl: [(c5miV,
                       label: block_c5miV_info
                       rep:StackRep [True, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5miV: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c5miW() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.981774867 UTC

[section ""data" . Data.OldList.$winits_closure" {
     Data.OldList.$winits_closure:
         const Data.OldList.$winits_info;
         const 0;
 },
 sat_s5lcz_entry() //  [R1]
         { info_tbl: [(c5mkC,
                       label: sat_s5lcz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mkC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mkD; else goto c5mkE;
       c5mkD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mkE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.[]_closure+1;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$winits_entry() //  [R2]
         { info_tbl: [(c5mkF,
                       label: Data.OldList.$winits_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mkF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mkJ; else goto c5mkI;
       c5mkJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.OldList.$winits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5mkI: // global
           I64[Hp - 16] = sat_s5lcz_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = lvl10_r5kSs_closure;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.984015526 UTC

[section ""data" . Data.OldList.inits_closure" {
     Data.OldList.inits_closure:
         const Data.OldList.inits_info;
         const 0;
 },
 Data.OldList.inits_entry() //  [R2]
         { info_tbl: [(c5mkR,
                       label: Data.OldList.inits_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mkR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5mkS; else goto c5mkT;
       c5mkS: // global
           R2 = R2;
           R1 = Data.OldList.inits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5mkT: // global
           I64[Sp - 8] = block_c5mkO_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$winits_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mkO() //  [R1, R2]
         { info_tbl: [(c5mkO,
                       label: block_c5mkO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mkO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mkW; else goto c5mkV;
       c5mkW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5mkV: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.985788693 UTC

[section ""cstring" . Data.OldList.$tc'SnocBuilder3_bytes" {
     Data.OldList.$tc'SnocBuilder3_bytes:
         I8[] [39,83,110,111,99,66,117,105,108,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.986584842 UTC

[section ""data" . Data.OldList.$tc'SnocBuilder2_closure" {
     Data.OldList.$tc'SnocBuilder2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.OldList.$tc'SnocBuilder3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.987353414 UTC

[section ""cstring" . Data.OldList.$tcSnocBuilder2_bytes" {
     Data.OldList.$tcSnocBuilder2_bytes:
         I8[] [83,110,111,99,66,117,105,108,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.988061638 UTC

[section ""data" . Data.OldList.$tcSnocBuilder1_closure" {
     Data.OldList.$tcSnocBuilder1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.OldList.$tcSnocBuilder2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.988853988 UTC

[section ""cstring" . Data.OldList.$trModule2_bytes" {
     Data.OldList.$trModule2_bytes:
         I8[] [68,97,116,97,46,79,108,100,76,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.989813642 UTC

[section ""data" . Data.OldList.$trModule1_closure" {
     Data.OldList.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.OldList.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.990646189 UTC

[section ""cstring" . Data.OldList.$trModule4_bytes" {
     Data.OldList.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.99142867 UTC

[section ""data" . Data.OldList.$trModule3_closure" {
     Data.OldList.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.OldList.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.992236043 UTC

[section ""data" . Data.OldList.$trModule_closure" {
     Data.OldList.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.OldList.$trModule3_closure+1;
         const Data.OldList.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.994911691 UTC

[section ""data" . Data.OldList.$tcSnocBuilder_closure" {
     Data.OldList.$tcSnocBuilder_closure:
         const GHC.Types.TyCon_con_info;
         const Data.OldList.$trModule_closure+1;
         const Data.OldList.$tcSnocBuilder1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 17650604350574790456;
         const 3021529305462083578;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.995530197 UTC

[section ""data" . $krep_r5kSu_closure" {
     $krep_r5kSu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.9961412 UTC

[section ""data" . $krep1_r5kSv_closure" {
     $krep1_r5kSv_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.996692805 UTC

[section ""data" . $krep2_r5kSw_closure" {
     $krep2_r5kSw_closure:
         const :_con_info;
         const $krep1_r5kSv_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.997552591 UTC

[section ""data" . $krep3_r5kSx_closure" {
     $krep3_r5kSx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep2_r5kSw_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.998061014 UTC

[section ""data" . $krep4_r5kSy_closure" {
     $krep4_r5kSy_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.OldList.$tcSnocBuilder_closure+1;
         const $krep2_r5kSw_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.998643072 UTC

[section ""data" . $krep5_r5kSz_closure" {
     $krep5_r5kSz_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5kSx_closure+1;
         const $krep4_r5kSy_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.999142264 UTC

[section ""data" . $krep6_r5kSA_closure" {
     $krep6_r5kSA_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5kSx_closure+1;
         const $krep5_r5kSz_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:18.99966551 UTC

[section ""data" . Data.OldList.$tc'SnocBuilder1_closure" {
     Data.OldList.$tc'SnocBuilder1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r5kSu_closure+1;
         const $krep6_r5kSA_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.000209103 UTC

[section ""data" . Data.OldList.$tc'SnocBuilder_closure" {
     Data.OldList.$tc'SnocBuilder_closure:
         const GHC.Types.TyCon_con_info;
         const Data.OldList.$trModule_closure+1;
         const Data.OldList.$tc'SnocBuilder2_closure+1;
         const Data.OldList.$tc'SnocBuilder1_closure+4;
         const 6719263830224029004;
         const 9134053658265160069;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.001189021 UTC

[section ""data" . lvl11_r5kSB_closure" {
     lvl11_r5kSB_closure:
         const lvl11_r5kSB_info;
 },
 lvl11_r5kSB_entry() //  [R2]
         { info_tbl: [(c5ml4,
                       label: lvl11_r5kSB_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ml4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5ml5; else goto c5ml6;
       c5ml5: // global
           R2 = R2;
           R1 = lvl11_r5kSB_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5ml6: // global
           I64[Sp - 8] = block_c5ml1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mle; else goto c5ml2;
       u5mle: // global
           call _c5ml1(R1) args: 0, res: 0, upd: 0;
       c5ml2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ml1() //  [R1]
         { info_tbl: [(c5ml1,
                       label: block_c5ml1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ml1: // global
           if (I64[R1 + 7] == 10) goto c5mld; else goto c5mlc;
       c5mld: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mlc: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.003249781 UTC

[section ""data" . Data.OldList.lines_closure" {
     Data.OldList.lines_closure:
         const Data.OldList.lines_info;
 },
 sat_s5lcT_entry() //  [R1]
         { info_tbl: [(c5mlG,
                       label: sat_s5lcT_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mlG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mlH; else goto c5mlI;
       c5mlH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mlI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5mlz_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5mlP; else goto c5mlA;
       u5mlP: // global
           call _c5mlz(R1) args: 0, res: 0, upd: 0;
       c5mlA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5mlz() //  [R1]
         { info_tbl: [(c5mlz,
                       label: block_c5mlz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mlz: // global
           if (R1 & 7 == 1) goto c5mlD; else goto c5mlE;
       c5mlD: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5mlE: // global
           R2 = P64[R1 + 14];
           Sp = Sp + 8;
           call Data.OldList.lines_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 ds1_s5lcM_entry() //  [R1]
         { info_tbl: [(c5mlR,
                       label: ds1_s5lcM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mlR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mlS; else goto c5mlT;
       c5mlS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mlT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5mlt_info;
           R3 = P64[R1 + 16];
           R2 = lvl11_r5kSB_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5mlt() //  [R1, R2]
         { info_tbl: [(c5mlt,
                       label: block_c5mlt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mlt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5mlW; else goto c5mlV;
       c5mlW: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5mlV: // global
           I64[Hp - 40] = sat_s5lcT_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.lines_entry() //  [R2]
         { info_tbl: [(c5mm1,
                       label: Data.OldList.lines_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mm1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5mm2; else goto c5mm3;
       c5mm2: // global
           R2 = R2;
           R1 = Data.OldList.lines_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5mm3: // global
           I64[Sp - 8] = block_c5mlj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mmc; else goto c5mlk;
       u5mmc: // global
           call _c5mlj(R1) args: 0, res: 0, upd: 0;
       c5mlk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mlj() //  [R1]
         { info_tbl: [(c5mlj,
                       label: block_c5mlj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mlj: // global
           if (R1 & 7 == 1) goto c5mlY; else goto c5mlZ;
       c5mlY: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mlZ: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c5mmb; else goto c5mma;
       c5mmb: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mma: // global
           I64[Hp - 88] = ds1_s5lcM_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c5mlp::P64 = Hp - 88;
           P64[Hp - 48] = _c5mlp::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5mlp::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.005900586 UTC

[section ""data" . Data.OldList.SnocBuilder_closure" {
     Data.OldList.SnocBuilder_closure:
         const Data.OldList.SnocBuilder_info;
 },
 Data.OldList.SnocBuilder_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mmi,
                       label: Data.OldList.SnocBuilder_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mmi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5mmm; else goto c5mml;
       c5mmm: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.SnocBuilder_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mml: // global
           I64[Hp - 24] = Data.OldList.SnocBuilder_con_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           I64[Hp] = R2;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.006869587 UTC

[Data.OldList.SnocBuilder_con_entry() //  [R1]
         { info_tbl: [(c5mmn,
                       label: Data.OldList.SnocBuilder_con_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,68,97,116,97,46,79,108,100,76,105,115,116,46,83,110,111,99,66,117,105,108,100,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mmn: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.00756963 UTC

[section ""relreadonly" . S5lDv_srt" {
     S5lDv_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.OldList.maximumBy_closure;
         const Data.OldList.maximumBy1_closure;
         const Data.OldList.minimumBy_closure;
         const Data.OldList.minimumBy1_closure;
         const sat_s5l01_closure;
         const Data.OldList.genericLength2_closure;
         const Data.OldList.genericLength1_closure;
         const Data.OldList.strictGenericLength_closure;
         const Data.OldList.genericLength_closure;
         const Data.OldList.genericTake_closure;
         const Data.OldList.genericReplicate_closure;
         const Data.OldList.genericDrop_closure;
         const Data.OldList.$wgenericSplitAt_closure;
         const Data.OldList.genericSplitAt_closure;
         const Data.OldList.genericIndex_closure;
         const lvl3_r5kSk_closure;
         const lvl5_r5kSm_closure;
         const lvl9_r5kSr_closure;
         const poly_$wgo_r5kSt_closure;
         const Data.OldList.$winits_closure;
         const lvl10_r5kSs_closure;
         const Data.OldList.inits_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.008250265 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:19.009282376 UTC

[section ""data" . Data.OldList.$WSnocBuilder_closure" {
     Data.OldList.$WSnocBuilder_closure:
         const Data.OldList.$WSnocBuilder_info;
 },
 Data.OldList.$WSnocBuilder_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mmv,
                       label: Data.OldList.$WSnocBuilder_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mmv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mmz; else goto c5mmA;
       c5mmz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$WSnocBuilder_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mmA: // global
           I64[Sp - 24] = block_c5mms_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5mmE; else goto c5mmt;
       u5mmE: // global
           call _c5mms(R1) args: 0, res: 0, upd: 0;
       c5mmt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mms() //  [R1]
         { info_tbl: [(c5mms,
                       label: block_c5mms_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mms: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5mmD; else goto c5mmC;
       c5mmD: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mmC: // global
           _s5kSH::I64 = I64[R1 + 7];
           I64[Hp - 24] = Data.OldList.SnocBuilder_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = _s5kSH::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.012804623 UTC

[section ""data" . Data.OldList.dropWhileEnd_closure" {
     Data.OldList.dropWhileEnd_closure:
         const Data.OldList.dropWhileEnd_info;
 },
 go_s5kSK_entry() //  [R1, R2]
         { info_tbl: [(c5mmV,
                       label: go_s5kSK_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mmV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mmW; else goto c5mmX;
       c5mmW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5mmX: // global
           I64[Sp - 24] = block_c5mmO_info;
           _s5kSK::P64 = R1;
           _s5kSI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s5kSI::P64;
           P64[Sp - 8] = _s5kSK::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5mnC; else goto c5mmP;
       u5mnC: // global
           call _c5mmO(R1) args: 0, res: 0, upd: 0;
       c5mmP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mmO() //  [R1]
         { info_tbl: [(c5mmO,
                       label: block_c5mmO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mmO: // global
           if (R1 & 7 == 1) goto u5mnz; else goto c5mmT;
       u5mnz: // global
           Sp = Sp + 24;
           call _c5mnp() args: 0, res: 0, upd: 0;
       c5mmT: // global
           I64[Sp - 8] = block_c5mn3_info;
           _s5kSN::P64 = P64[R1 + 6];
           R2 = _s5kSN::P64;
           _s5kSO::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s5kSO::P64;
           P64[Sp + 8] = _s5kSN::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mn3() //  [R1]
         { info_tbl: [(c5mn3,
                       label: block_c5mn3_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mn3: // global
           _s5kSK::P64 = P64[Sp + 24];
           _s5kSO::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5mnb; else goto c5mnj;
       c5mnb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5mne; else goto c5mnd;
       c5mne: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mnd: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s5kSK::P64;
           P64[Hp - 24] = _s5kSO::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mnj: // global
           I64[Sp + 8] = block_c5mnh_info;
           R2 = _s5kSO::P64;
           R1 = _s5kSK::P64;
           Sp = Sp + 8;
           call go_s5kSK_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mnh() //  [R1]
         { info_tbl: [(c5mnh,
                       label: block_c5mnh_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mnh: // global
           if (R1 & 7 == 1) goto u5mnA; else goto c5mnt;
       u5mnA: // global
           Sp = Sp + 24;
           call _c5mnp() args: 0, res: 0, upd: 0;
       c5mnt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mnw; else goto c5mnv;
       c5mnw: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mnv: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5mnp() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mnp: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.dropWhileEnd_entry() //  [R2, R3]
         { info_tbl: [(c5mnE,
                       label: Data.OldList.dropWhileEnd_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mnE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5mnI; else goto c5mnH;
       c5mnI: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.dropWhileEnd_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mnH: // global
           I64[Hp - 8] = go_s5kSK_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go_s5kSK_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.01840283 UTC

[section ""data" . Data.OldList.stripPrefix_closure" {
     Data.OldList.stripPrefix_closure:
         const Data.OldList.stripPrefix_info;
 },
 Data.OldList.stripPrefix_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mnU,
                       label: Data.OldList.stripPrefix_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mnU: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c5mnV; else goto u5mov;
       c5mnV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.stripPrefix_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5mov: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5mnK() args: 0, res: 0, upd: 0;
     }
 },
 _c5mnK() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mnK: // global
           I64[Sp - 8] = block_c5mnN_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5moz; else goto c5mnO;
       u5moz: // global
           call _c5mnN(R1) args: 0, res: 0, upd: 0;
       c5mnO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mnN() //  [R1]
         { info_tbl: [(c5mnN,
                       label: block_c5mnN_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mnN: // global
           _s5kSW::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5mnR; else goto c5mnS;
       c5mnR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5mo2; else goto c5mo1;
       c5mo2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mo1: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s5kSW::P64;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mnS: // global
           I64[Sp] = block_c5mo5_info;
           _s5kSY::P64 = P64[R1 + 6];
           _s5kSZ::P64 = P64[R1 + 14];
           R1 = _s5kSW::P64;
           P64[Sp + 16] = _s5kSZ::P64;
           P64[Sp + 24] = _s5kSY::P64;
           if (R1 & 7 != 0) goto u5moA; else goto c5mo7;
       u5moA: // global
           call _c5mo5(R1) args: 0, res: 0, upd: 0;
       c5mo7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mo5() //  [R1]
         { info_tbl: [(c5mo5,
                       label: block_c5mo5_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mo5: // global
           if (R1 & 7 == 1) goto u5mow; else goto c5moi;
       u5mow: // global
           Sp = Sp + 32;
           call _c5moo() args: 0, res: 0, upd: 0;
       c5moi: // global
           I64[Sp] = block_c5mog_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5mog() //  [R1]
         { info_tbl: [(c5mog,
                       label: block_c5mog_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mog: // global
           if (R1 & 7 == 1) goto u5mox; else goto c5mos;
       u5mox: // global
           Sp = Sp + 32;
           call _c5moo() args: 0, res: 0, upd: 0;
       c5mos: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 24];
           Sp = Sp + 8;
           call _c5mnK() args: 0, res: 0, upd: 0;
     }
 },
 _c5moo() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5moo: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.023053223 UTC

[section ""data" . Data.OldList.find_closure" {
     Data.OldList.find_closure:
         const Data.OldList.find_info;
 },
 Data.OldList.find_entry() //  [R2, R3]
         { info_tbl: [(c5moL,
                       label: Data.OldList.find_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5moL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5moM; else goto c5moN;
       c5moM: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.find_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5moN: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c5moP() args: 0, res: 0, upd: 0;
     }
 },
 _c5moP() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5moP: // global
           I64[Sp - 8] = block_c5moR_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mpn; else goto c5moT;
       u5mpn: // global
           call _c5moR(R1) args: 0, res: 0, upd: 0;
       c5moT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5moR() //  [R1]
         { info_tbl: [(c5moR,
                       label: block_c5moR_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5moR: // global
           if (R1 & 7 == 1) goto c5moZ; else goto c5mp4;
       c5moZ: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mp4: // global
           I64[Sp - 8] = block_c5mp2_info;
           _s5kT9::P64 = P64[R1 + 6];
           R2 = _s5kT9::P64;
           _s5kTa::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s5kTa::P64;
           P64[Sp + 16] = _s5kT9::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mp2() //  [R1]
         { info_tbl: [(c5mp2,
                       label: block_c5mp2_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mp2: // global
           if (R1 & 7 == 1) goto c5mpa; else goto c5mpe;
       c5mpa: // global
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c5moP() args: 0, res: 0, upd: 0;
       c5mpe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5mph; else goto c5mpg;
       c5mph: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mpg: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.027347406 UTC

[section ""data" . Data.OldList.elemIndex_closure" {
     Data.OldList.elemIndex_closure:
         const Data.OldList.elemIndex_info;
 },
 p_s5kTe_entry() //  [R1]
         { info_tbl: [(c5mpx,
                       label: p_s5kTe_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mpx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mpy; else goto c5mpz;
       c5mpy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mpz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5kTp_entry() //  [R1, R2]
         { info_tbl: [(c5mpH,
                       label: sat_s5kTp_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mpH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mpI; else goto c5mpJ;
       c5mpI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5mpJ: // global
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = R2;
           I64[Sp - 8] = 0;
           Sp = Sp - 24;
           call _c5mpK() args: 0, res: 0, upd: 0;
     }
 },
 _c5mpK() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mpK: // global
           I64[Sp - 8] = block_c5mpN_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mql; else goto c5mpP;
       u5mql: // global
           call _c5mpN(R1) args: 0, res: 0, upd: 0;
       c5mpP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mpN() //  [R1]
         { info_tbl: [(c5mpN,
                       label: block_c5mpN_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mpN: // global
           if (R1 & 7 == 1) goto c5mpV; else goto c5mq0;
       c5mpV: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mq0: // global
           I64[Sp] = block_c5mpY_info;
           R2 = P64[R1 + 6];
           _s5kTl::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 16] = _s5kTl::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mpY() //  [R1]
         { info_tbl: [(c5mpY,
                       label: block_c5mpY_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mpY: // global
           _s5kTi::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto c5mq6; else goto c5mqb;
       c5mq6: // global
           P64[Sp + 16] = P64[Sp + 16];
           I64[Sp + 24] = _s5kTi::I64 + 1;
           Sp = Sp + 8;
           call _c5mpK() args: 0, res: 0, upd: 0;
       c5mqb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5mqe; else goto c5mqd;
       c5mqe: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mqd: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s5kTi::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.elemIndex_entry() //  [R2, R3]
         { info_tbl: [(c5mqn,
                       label: Data.OldList.elemIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mqn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5mqr; else goto c5mqq;
       c5mqr: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.elemIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mqq: // global
           I64[Hp - 40] = p_s5kTe_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s5kTp_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.032352928 UTC

[section ""data" . Data.OldList.findIndex_closure" {
     Data.OldList.findIndex_closure:
         const Data.OldList.findIndex_info;
 },
 Data.OldList.findIndex_entry() //  [R2, R3]
         { info_tbl: [(c5mqy,
                       label: Data.OldList.findIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mqy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mqz; else goto c5mqA;
       c5mqz: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.findIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mqA: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = 0;
           Sp = Sp - 24;
           call _c5mqB() args: 0, res: 0, upd: 0;
     }
 },
 _c5mqB() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mqB: // global
           I64[Sp - 8] = block_c5mqE_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mrc; else goto c5mqG;
       u5mrc: // global
           call _c5mqE(R1) args: 0, res: 0, upd: 0;
       c5mqG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mqE() //  [R1]
         { info_tbl: [(c5mqE,
                       label: block_c5mqE_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mqE: // global
           if (R1 & 7 == 1) goto c5mqM; else goto c5mqR;
       c5mqM: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mqR: // global
           I64[Sp] = block_c5mqP_info;
           R2 = P64[R1 + 6];
           _s5kTx::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 16] = _s5kTx::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mqP() //  [R1]
         { info_tbl: [(c5mqP,
                       label: block_c5mqP_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mqP: // global
           _s5kTu::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto c5mqX; else goto c5mr2;
       c5mqX: // global
           P64[Sp + 16] = P64[Sp + 16];
           I64[Sp + 24] = _s5kTu::I64 + 1;
           Sp = Sp + 8;
           call _c5mqB() args: 0, res: 0, upd: 0;
       c5mr2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5mr5; else goto c5mr4;
       c5mr5: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mr4: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s5kTu::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.036581903 UTC

[section ""data" . Data.OldList.findIndices_closure" {
     Data.OldList.findIndices_closure:
         const Data.OldList.findIndices_info;
 },
 sat_s5kTN_entry() //  [R1]
         { info_tbl: [(c5mrE,
                       label: sat_s5kTN_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mrE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mrF; else goto c5mrG;
       c5mrF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mrG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 32] + 1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s5kTD_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 go_s5kTD_entry() //  [R1, R2, R3]
         { info_tbl: [(c5mrL,
                       label: go_s5kTD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 14} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mrL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mrM; else goto u5ms3;
       c5mrM: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5ms3: // global
           P64[Sp - 24] = R1;
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           call _c5mrk() args: 0, res: 0, upd: 0;
     }
 },
 _c5mrk() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mrk: // global
           _s5kTB::P64 = P64[P64[Sp] + 6];
           I64[Sp - 8] = block_c5mrn_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5kTB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5ms5; else goto c5mro;
       u5ms5: // global
           call _c5mrn(R1) args: 0, res: 0, upd: 0;
       c5mro: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mrn() //  [R1]
         { info_tbl: [(c5mrn,
                       label: block_c5mrn_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mrn: // global
           if (R1 & 7 == 1) goto c5mrI; else goto c5mrJ;
       c5mrI: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mrJ: // global
           I64[Sp] = block_c5mrt_info;
           R2 = P64[R1 + 6];
           _s5kTI::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s5kTI::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mrt() //  [R1]
         { info_tbl: [(c5mrt,
                       label: block_c5mrt_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mrt: // global
           _s5kTF::I64 = I64[Sp + 24];
           _s5kTI::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5mrU; else goto c5mrX;
       c5mrU: // global
           P64[Sp + 16] = _s5kTI::P64;
           I64[Sp + 24] = _s5kTF::I64 + 1;
           Sp = Sp + 8;
           call _c5mrk() args: 0, res: 0, upd: 0;
       c5mrX: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5ms0; else goto c5mrZ;
       c5ms0: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mrZ: // global
           I64[Hp - 72] = sat_s5kTN_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = _s5kTI::P64;
           I64[Hp - 40] = _s5kTF::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s5kTF::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.findIndices_entry() //  [R2, R3]
         { info_tbl: [(c5ms8,
                       label: Data.OldList.findIndices_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ms8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5msc; else goto c5msb;
       c5msc: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.findIndices_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5msb: // global
           I64[Hp - 8] = go_s5kTD_info;
           P64[Hp] = R2;
           _s5kTC::P64 = R3;
           R3 = 0;
           R2 = _s5kTC::P64;
           R1 = Hp - 6;
           call go_s5kTD_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.041121416 UTC

[section ""data" . Data.OldList.elemIndices_closure" {
     Data.OldList.elemIndices_closure:
         const Data.OldList.elemIndices_info;
 },
 sat_s5kTQ_entry() //  [R1]
         { info_tbl: [(c5msl,
                       label: sat_s5kTQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5msl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5msm; else goto c5msn;
       c5msm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5msn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.OldList.elemIndices_entry() //  [R2, R3]
         { info_tbl: [(c5mso,
                       label: Data.OldList.elemIndices_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mso: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5mss; else goto c5msr;
       c5mss: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.elemIndices_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5msr: // global
           I64[Hp - 24] = sat_s5kTQ_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Data.OldList.findIndices_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.044363471 UTC

[section ""data" . Data.OldList.isPrefixOf_closure" {
     Data.OldList.isPrefixOf_closure:
         const Data.OldList.isPrefixOf_info;
 },
 Data.OldList.isPrefixOf_entry() //  [R2, R3, R4]
         { info_tbl: [(c5msE,
                       label: Data.OldList.isPrefixOf_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5msE: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c5msF; else goto u5mtc;
       c5msF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.isPrefixOf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5mtc: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5msu() args: 0, res: 0, upd: 0;
     }
 },
 _c5msu() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5msu: // global
           I64[Sp - 8] = block_c5msx_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mtg; else goto c5msy;
       u5mtg: // global
           call _c5msx(R1) args: 0, res: 0, upd: 0;
       c5msy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5msx() //  [R1]
         { info_tbl: [(c5msx,
                       label: block_c5msx_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5msx: // global
           if (R1 & 7 == 1) goto c5msB; else goto c5msC;
       c5msB: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5msC: // global
           I64[Sp] = block_c5msM_info;
           _s5kTV::P64 = P64[R1 + 6];
           _s5kTW::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _s5kTW::P64;
           P64[Sp + 24] = _s5kTV::P64;
           if (R1 & 7 != 0) goto u5mth; else goto c5msO;
       u5mth: // global
           call _c5msM(R1) args: 0, res: 0, upd: 0;
       c5msO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5msM() //  [R1]
         { info_tbl: [(c5msM,
                       label: block_c5msM_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5msM: // global
           if (R1 & 7 == 1) goto u5mtd; else goto c5msZ;
       u5mtd: // global
           Sp = Sp + 32;
           call _c5mt5() args: 0, res: 0, upd: 0;
       c5msZ: // global
           I64[Sp] = block_c5msX_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5msX() //  [R1]
         { info_tbl: [(c5msX,
                       label: block_c5msX_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5msX: // global
           if (R1 & 7 == 1) goto u5mte; else goto c5mt9;
       u5mte: // global
           Sp = Sp + 32;
           call _c5mt5() args: 0, res: 0, upd: 0;
       c5mt9: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 24];
           Sp = Sp + 8;
           call _c5msu() args: 0, res: 0, upd: 0;
     }
 },
 _c5mt5() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mt5: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.048563585 UTC

[section ""data" . Data.OldList.isInfixOf_closure" {
     Data.OldList.isInfixOf_closure:
         const Data.OldList.isInfixOf_info;
 },
 Data.OldList.isInfixOf_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mts,
                       label: Data.OldList.isInfixOf_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mts: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mtt; else goto c5mtu;
       c5mtt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.isInfixOf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mtu: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5mtw() args: 0, res: 0, upd: 0;
     }
 },
 _c5mtw() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mtw: // global
           I64[Sp - 8] = block_c5mty_info;
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           Sp = Sp - 8;
           call Data.OldList.isPrefixOf_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mty() //  [R1]
         { info_tbl: [(c5mty,
                       label: block_c5mty_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mty: // global
           if (R1 & 7 == 1) goto c5mtG; else goto c5mtV;
       c5mtG: // global
           I64[Sp] = block_c5mtD_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u5mu1; else goto c5mtH;
       u5mu1: // global
           call _c5mtD(R1) args: 0, res: 0, upd: 0;
       c5mtH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5mtV: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5mtD() //  [R1]
         { info_tbl: [(c5mtD,
                       label: block_c5mtD_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mtD: // global
           if (R1 & 7 == 1) goto c5mtN; else goto c5mtR;
       c5mtN: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mtR: // global
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp + 8;
           call _c5mtw() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.059304375 UTC

[section ""data" . Data.OldList.dropLength_closure" {
     Data.OldList.dropLength_closure:
         const Data.OldList.dropLength_info;
 },
 Data.OldList.dropLength_entry() //  [R2, R3]
         { info_tbl: [(c5mue,
                       label: Data.OldList.dropLength_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mue: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5muf; else goto u5muA;
       c5muf: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.dropLength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5muA: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c5mu4() args: 0, res: 0, upd: 0;
     }
 },
 _c5mu4() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mu4: // global
           _s5kUa::P64 = P64[Sp];
           I64[Sp] = block_c5mu7_info;
           R1 = _s5kUa::P64;
           if (R1 & 7 != 0) goto u5muC; else goto c5mu8;
       u5muC: // global
           call _c5mu7(R1) args: 0, res: 0, upd: 0;
       c5mu8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mu7() //  [R1]
         { info_tbl: [(c5mu7,
                       label: block_c5mu7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mu7: // global
           _s5kUb::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5mub; else goto c5muc;
       c5mub: // global
           R1 = _s5kUb::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5muc: // global
           I64[Sp] = block_c5mum_info;
           _s5kUe::P64 = P64[R1 + 14];
           R1 = _s5kUb::P64;
           P64[Sp + 8] = _s5kUe::P64;
           if (R1 & 7 != 0) goto u5muD; else goto c5muo;
       u5muD: // global
           call _c5mum(R1) args: 0, res: 0, upd: 0;
       c5muo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mum() //  [R1]
         { info_tbl: [(c5mum,
                       label: block_c5mum_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mum: // global
           if (R1 & 7 == 1) goto c5muu; else goto c5muy;
       c5muu: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5muy: // global
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 14];
           call _c5mu4() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.062685017 UTC

[section ""data" . Data.OldList.dropLengthMaybe_closure" {
     Data.OldList.dropLengthMaybe_closure:
         const Data.OldList.dropLengthMaybe_info;
 },
 Data.OldList.dropLengthMaybe_entry() //  [R2, R3]
         { info_tbl: [(c5muR,
                       label: Data.OldList.dropLengthMaybe_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5muR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5muS; else goto u5mvg;
       c5muS: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.dropLengthMaybe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5mvg: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c5muH() args: 0, res: 0, upd: 0;
     }
 },
 _c5muH() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5muH: // global
           _s5kUi::P64 = P64[Sp];
           I64[Sp] = block_c5muK_info;
           R1 = _s5kUi::P64;
           if (R1 & 7 != 0) goto u5mvi; else goto c5muL;
       u5mvi: // global
           call _c5muK(R1) args: 0, res: 0, upd: 0;
       c5muL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5muK() //  [R1]
         { info_tbl: [(c5muK,
                       label: block_c5muK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5muK: // global
           _s5kUj::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5muO; else goto c5muP;
       c5muO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5muZ; else goto c5muY;
       c5muZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5muY: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s5kUj::P64;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5muP: // global
           I64[Sp] = block_c5mv2_info;
           _s5kUm::P64 = P64[R1 + 14];
           R1 = _s5kUj::P64;
           P64[Sp + 8] = _s5kUm::P64;
           if (R1 & 7 != 0) goto u5mvj; else goto c5mv4;
       u5mvj: // global
           call _c5mv2(R1) args: 0, res: 0, upd: 0;
       c5mv4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mv2() //  [R1]
         { info_tbl: [(c5mv2,
                       label: block_c5mv2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mv2: // global
           if (R1 & 7 == 1) goto c5mva; else goto c5mve;
       c5mva: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mve: // global
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 14];
           call _c5muH() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.066336758 UTC

[section ""data" . Data.OldList.isSuffixOf_closure" {
     Data.OldList.isSuffixOf_closure:
         const Data.OldList.isSuffixOf_info;
 },
 Data.OldList.isSuffixOf_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mvw,
                       label: Data.OldList.isSuffixOf_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mvw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mvx; else goto c5mvy;
       c5mvx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.isSuffixOf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mvy: // global
           I64[Sp - 32] = block_c5mvq_info;
           _s5kUr::P64 = R3;
           R3 = R4;
           _s5kUq::P64 = R2;
           R2 = _s5kUr::P64;
           P64[Sp - 24] = _s5kUq::P64;
           P64[Sp - 16] = _s5kUr::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.OldList.dropLengthMaybe_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mvq() //  [R1]
         { info_tbl: [(c5mvq,
                       label: block_c5mvq_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mvq: // global
           if (R1 & 7 == 1) goto c5mvt; else goto c5mvu;
       c5mvt: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mvu: // global
           I64[Sp] = block_c5mvE_info;
           R3 = P64[Sp + 24];
           R2 = P64[R1 + 6];
           call Data.OldList.dropLength_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mvE() //  [R1]
         { info_tbl: [(c5mvE,
                       label: block_c5mvE_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mvE: // global
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Classes.$fEq[]_$c==_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.069542079 UTC

[section ""data" . Data.OldList.elem_by_closure" {
     Data.OldList.elem_by_closure:
         const Data.OldList.elem_by_info;
 },
 Data.OldList.elem_by_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mvV,
                       label: Data.OldList.elem_by_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mvV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mvW; else goto u5mwg;
       c5mvW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.elem_by_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5mwg: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5mvL() args: 0, res: 0, upd: 0;
     }
 },
 _c5mvL() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mvL: // global
           I64[Sp - 8] = block_c5mvO_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mwi; else goto c5mvP;
       u5mwi: // global
           call _c5mvO(R1) args: 0, res: 0, upd: 0;
       c5mvP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mvO() //  [R1]
         { info_tbl: [(c5mvO,
                       label: block_c5mvO_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mvO: // global
           if (R1 & 7 == 1) goto c5mvS; else goto c5mvT;
       c5mvS: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mvT: // global
           I64[Sp] = block_c5mw3_info;
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 6];
           _s5kUB::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 24] = _s5kUB::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mw3() //  [R1]
         { info_tbl: [(c5mw3,
                       label: block_c5mw3_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mw3: // global
           if (R1 & 7 == 1) goto c5mwa; else goto c5mwe;
       c5mwa: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 24];
           Sp = Sp + 8;
           call _c5mvL() args: 0, res: 0, upd: 0;
       c5mwe: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.073818672 UTC

[section ""data" . Data.OldList.nubBy_closure" {
     Data.OldList.nubBy_closure:
         const Data.OldList.nubBy_info;
 },
 sat_s5kUN_entry() //  [R1]
         { info_tbl: [(c5mwJ,
                       label: sat_s5kUN_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mwJ: // global
           _s5kUN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5mwK; else goto c5mwL;
       c5mwL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mwN; else goto c5mwM;
       c5mwN: // global
           HpAlloc = 24;
           goto c5mwK;
       c5mwK: // global
           R1 = _s5kUN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mwM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5kUN::P64;
           _s5kUF::P64 = P64[_s5kUN::P64 + 16];
           _s5kUH::P64 = P64[_s5kUN::P64 + 24];
           _s5kUJ::P64 = P64[_s5kUN::P64 + 32];
           _s5kUK::P64 = P64[_s5kUN::P64 + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kUJ::P64;
           P64[Hp] = _s5kUH::P64;
           R3 = Hp - 14;
           R2 = _s5kUK::P64;
           R1 = _s5kUF::P64;
           Sp = Sp - 16;
           call nubBy'_s5kUF_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 nubBy'_s5kUF_entry() //  [R1, R2, R3]
         { info_tbl: [(c5mwS,
                       label: nubBy'_s5kUF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mwS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5mwT; else goto u5mx9;
       c5mwT: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5mx9: // global
           P64[Sp - 24] = R1;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call _c5mwr() args: 0, res: 0, upd: 0;
     }
 },
 _c5mwr() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mwr: // global
           _s5kUD::P64 = P64[P64[Sp] + 6];
           I64[Sp - 8] = block_c5mwu_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5kUD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mxb; else goto c5mwv;
       u5mxb: // global
           call _c5mwu(R1) args: 0, res: 0, upd: 0;
       c5mwv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mwu() //  [R1]
         { info_tbl: [(c5mwu,
                       label: block_c5mwu_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mwu: // global
           if (R1 & 7 == 1) goto c5mwP; else goto c5mwQ;
       c5mwP: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mwQ: // global
           I64[Sp - 8] = block_c5mwA_info;
           R4 = P64[Sp + 24];
           _s5kUJ::P64 = P64[R1 + 6];
           R3 = _s5kUJ::P64;
           R2 = P64[Sp + 16];
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 16] = _s5kUJ::P64;
           Sp = Sp - 8;
           call Data.OldList.elem_by_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mwA() //  [R1]
         { info_tbl: [(c5mwA,
                       label: block_c5mwA_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mwA: // global
           _s5kUH::P64 = P64[Sp + 32];
           _s5kUK::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5mx0; else goto c5mx7;
       c5mx0: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5mx3; else goto c5mx2;
       c5mx3: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mx2: // global
           I64[Hp - 64] = sat_s5kUN_info;
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = _s5kUH::P64;
           _s5kUJ::P64 = P64[Sp + 24];
           P64[Hp - 32] = _s5kUJ::P64;
           P64[Hp - 24] = _s5kUK::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kUJ::P64;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mx7: // global
           P64[Sp + 24] = _s5kUK::P64;
           P64[Sp + 32] = _s5kUH::P64;
           Sp = Sp + 16;
           call _c5mwr() args: 0, res: 0, upd: 0;
     }
 },
 Data.OldList.nubBy_entry() //  [R2, R3]
         { info_tbl: [(c5mxe,
                       label: Data.OldList.nubBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mxe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5mxi; else goto c5mxh;
       c5mxi: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.nubBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mxh: // global
           I64[Hp - 8] = nubBy'_s5kUF_info;
           P64[Hp] = R2;
           _s5kUE::P64 = R3;
           R3 = GHC.Types.[]_closure+1;
           R2 = _s5kUE::P64;
           R1 = Hp - 6;
           call nubBy'_s5kUF_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.077722913 UTC

[section ""data" . Data.OldList.nub_closure" {
     Data.OldList.nub_closure:
         const Data.OldList.nub_info;
 },
 sat_s5kUQ_entry() //  [R1]
         { info_tbl: [(c5mxr,
                       label: sat_s5kUQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mxr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mxs; else goto c5mxt;
       c5mxs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mxt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.nub_entry() //  [R2, R3]
         { info_tbl: [(c5mxu,
                       label: Data.OldList.nub_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mxu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mxy; else goto c5mxx;
       c5mxy: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.nub_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mxx: // global
           I64[Hp - 16] = sat_s5kUQ_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.nubBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.079556493 UTC

[section ""data" . Data.OldList.deleteBy_closure" {
     Data.OldList.deleteBy_closure:
         const Data.OldList.deleteBy_info;
 },
 sat_s5kUY_entry() //  [R1]
         { info_tbl: [(c5mxR,
                       label: sat_s5kUY_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mxR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mxS; else goto c5mxT;
       c5mxS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mxT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.deleteBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mxY,
                       label: Data.OldList.deleteBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mxY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5mxZ; else goto c5my0;
       c5mxZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.deleteBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5my0: // global
           I64[Sp - 24] = block_c5mxD_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5myf; else goto c5mxE;
       u5myf: // global
           call _c5mxD(R1) args: 0, res: 0, upd: 0;
       c5mxE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mxD() //  [R1]
         { info_tbl: [(c5mxD,
                       label: block_c5mxD_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mxD: // global
           if (R1 & 7 == 1) goto c5mxV; else goto c5mxW;
       c5mxV: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mxW: // global
           I64[Sp - 16] = block_c5mxJ_info;
           _s5kUV::P64 = P64[R1 + 6];
           R3 = _s5kUV::P64;
           R2 = P64[Sp + 16];
           _s5kUW::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s5kUW::P64;
           P64[Sp] = _s5kUV::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mxJ() //  [R1]
         { info_tbl: [(c5mxJ,
                       label: block_c5mxJ_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mxJ: // global
           _s5kUW::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5my6; else goto c5myd;
       c5my6: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5my9; else goto c5my8;
       c5my9: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5my8: // global
           I64[Hp - 56] = sat_s5kUY_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _s5kUW::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5myd: // global
           R1 = _s5kUW::P64 & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.08214583 UTC

[section ""data" . Data.OldList.deleteFirstsBy_closure" {
     Data.OldList.deleteFirstsBy_closure:
         const Data.OldList.deleteFirstsBy_info;
 },
 Data.OldList.deleteFirstsBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mym,
                       label: Data.OldList.deleteFirstsBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mym: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5myn; else goto c5myo;
       c5myn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.deleteFirstsBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5myo: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call _c5myq() args: 0, res: 0, upd: 0;
     }
 },
 _c5myq() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5myq: // global
           I64[Sp - 8] = block_c5mys_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5myO; else goto c5myu;
       u5myO: // global
           call _c5mys(R1) args: 0, res: 0, upd: 0;
       c5myu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mys() //  [R1]
         { info_tbl: [(c5mys,
                       label: block_c5mys_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mys: // global
           _s5kV4::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5myA; else goto c5myF;
       c5myA: // global
           R1 = _s5kV4::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5myF: // global
           I64[Sp] = block_c5myD_info;
           R4 = _s5kV4::P64;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 14];
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5myD() //  [R1]
         { info_tbl: [(c5myD,
                       label: block_c5myD_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5myD: // global
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c5myq() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.085700703 UTC

[section ""data" . Data.OldList.delete_closure" {
     Data.OldList.delete_closure:
         const Data.OldList.delete_info;
 },
 sat_s5kVc_entry() //  [R1]
         { info_tbl: [(c5myY,
                       label: sat_s5kVc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5myY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5myZ; else goto c5mz0;
       c5myZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mz0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.delete_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mz1,
                       label: Data.OldList.delete_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mz1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mz5; else goto c5mz4;
       c5mz5: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.delete_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mz4: // global
           I64[Hp - 16] = sat_s5kVc_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.087710144 UTC

[section ""data" . Data.OldList.\\_closure" {
     Data.OldList.\\_closure:
         const Data.OldList.\\_info;
 },
 lvl12_s5kVg_entry() //  [R1]
         { info_tbl: [(c5mze,
                       label: lvl12_s5kVg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mze: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mzf; else goto c5mzg;
       c5mzf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mzg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.\\_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mzj,
                       label: Data.OldList.\\_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mzj: // global
           _s5kVf::P64 = R4;
           _s5kVe::P64 = R3;
           _s5kVd::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c5mzk; else goto c5mzl;
       c5mzl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mzn; else goto c5mzm;
       c5mzn: // global
           HpAlloc = 24;
           goto c5mzk;
       c5mzk: // global
           R4 = _s5kVf::P64;
           R3 = _s5kVe::P64;
           R2 = _s5kVd::P64;
           R1 = Data.OldList.\\_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mzm: // global
           I64[Hp - 16] = lvl12_s5kVg_info;
           P64[Hp] = _s5kVd::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _s5kVf::P64;
           P64[Sp - 8] = _s5kVe::P64;
           Sp = Sp - 24;
           call _c5mzp() args: 0, res: 0, upd: 0;
     }
 },
 _c5mzp() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mzp: // global
           I64[Sp - 8] = block_c5mzr_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mzN; else goto c5mzt;
       u5mzN: // global
           call _c5mzr(R1) args: 0, res: 0, upd: 0;
       c5mzt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mzr() //  [R1]
         { info_tbl: [(c5mzr,
                       label: block_c5mzr_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mzr: // global
           _s5kVj::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5mzz; else goto c5mzE;
       c5mzz: // global
           R1 = _s5kVj::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5mzE: // global
           I64[Sp] = block_c5mzC_info;
           R4 = _s5kVj::P64;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 14];
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mzC() //  [R1]
         { info_tbl: [(c5mzC,
                       label: block_c5mzC_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mzC: // global
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c5mzp() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.090390686 UTC

[section ""data" . Data.OldList.unionBy_closure" {
     Data.OldList.unionBy_closure:
         const Data.OldList.unionBy_info;
 },
 sat_s5kVz_entry() //  [R1]
         { info_tbl: [(c5mzZ,
                       label: sat_s5kVz_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mzZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mA0; else goto c5mA1;
       c5mA0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mA1: // global
           I64[Sp - 24] = block_c5mzX_info;
           R3 = P64[R1 + 32];
           _s5kVo::P64 = P64[R1 + 16];
           R2 = _s5kVo::P64;
           P64[Sp - 16] = _s5kVo::P64;
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 24;
           call Data.OldList.nubBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mzX() //  [R1]
         { info_tbl: [(c5mzX,
                       label: block_c5mzX_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mzX: // global
           P64[Sp] = R1;
           P64[Sp + 16] = P64[Sp + 16];
           call _c5mA8() args: 0, res: 0, upd: 0;
     }
 },
 _c5mA8() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mA8: // global
           I64[Sp - 8] = block_c5mAa_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mAw; else goto c5mAc;
       u5mAw: // global
           call _c5mAa(R1) args: 0, res: 0, upd: 0;
       c5mAc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mAa() //  [R1]
         { info_tbl: [(c5mAa,
                       label: block_c5mAa_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mAa: // global
           _s5kVt::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5mAi; else goto c5mAn;
       c5mAi: // global
           R1 = _s5kVt::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5mAn: // global
           I64[Sp + 8] = block_c5mAl_info;
           R4 = _s5kVt::P64;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp + 8;
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mAl() //  [R1]
         { info_tbl: [(c5mAl,
                       label: block_c5mAl_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mAl: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp] = R1;
           call _c5mA8() args: 0, res: 0, upd: 0;
     }
 },
 Data.OldList.unionBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mAy,
                       label: Data.OldList.unionBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mAy: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5mAC; else goto c5mAB;
       c5mAC: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.unionBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mAB: // global
           I64[Hp - 32] = sat_s5kVz_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s5kVp::P64 = R3;
           R3 = Hp - 32;
           R2 = _s5kVp::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.092781435 UTC

[section ""data" . Data.OldList.union_closure" {
     Data.OldList.union_closure:
         const Data.OldList.union_info;
 },
 sat_s5kVD_entry() //  [R1]
         { info_tbl: [(c5mAL,
                       label: sat_s5kVD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mAL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mAM; else goto c5mAN;
       c5mAM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mAN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.union_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mAO,
                       label: Data.OldList.union_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mAO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mAS; else goto c5mAR;
       c5mAS: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.union_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mAR: // global
           I64[Hp - 16] = sat_s5kVD_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.unionBy_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.095481663 UTC

[section ""data" . Data.OldList.intersectBy_closure" {
     Data.OldList.intersectBy_closure:
         const Data.OldList.intersectBy_info;
 },
 go_s5kVN_entry() //  [R1, R2]
         { info_tbl: [(c5mBl,
                       label: go_s5kVN_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mBl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mBm; else goto u5mBN;
       c5mBm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5mBN: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c5mBb() args: 0, res: 0, upd: 0;
     }
 },
 _c5mBb() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mBb: // global
           I64[Sp - 16] = block_c5mBe_info;
           R1 = P64[Sp + 8];
           _s5kVN::P64 = P64[Sp];
           P64[Sp - 8] = P64[_s5kVN::P64 + 15];
           P64[Sp + 8] = P64[_s5kVN::P64 + 7];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5mBP; else goto c5mBf;
       u5mBP: // global
           call _c5mBe(R1) args: 0, res: 0, upd: 0;
       c5mBf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mBe() //  [R1]
         { info_tbl: [(c5mBe,
                       label: block_c5mBe_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mBe: // global
           if (R1 & 7 == 1) goto c5mBi; else goto c5mBj;
       c5mBi: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mBj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5mBx; else goto c5mBw;
       c5mBx: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mBw: // global
           _s5kVQ::P64 = P64[R1 + 6];
           _s5kVR::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s5kVQ::P64;
           I64[Sp] = block_c5mBu_info;
           R3 = P64[Sp + 8];
           R2 = Hp - 24;
           P64[Sp + 8] = _s5kVR::P64;
           P64[Sp + 24] = _s5kVQ::P64;
           call GHC.List.any_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mBu() //  [R1]
         { info_tbl: [(c5mBu,
                       label: block_c5mBu_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mBu: // global
           _s5kVR::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5mBD; else goto c5mBI;
       c5mBD: // global
           P64[Sp + 24] = _s5kVR::P64;
           Sp = Sp + 16;
           call _c5mBb() args: 0, res: 0, upd: 0;
       c5mBI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5mBL; else goto c5mBK;
       c5mBL: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mBK: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s5kVR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.intersectBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mBW,
                       label: Data.OldList.intersectBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mBW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mBX; else goto c5mBY;
       c5mBX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.intersectBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mBY: // global
           I64[Sp - 24] = block_c5mAX_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5mCg; else goto c5mAY;
       u5mCg: // global
           call _c5mAX(R1) args: 0, res: 0, upd: 0;
       c5mAY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mAX() //  [R1]
         { info_tbl: [(c5mAX,
                       label: block_c5mAX_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mAX: // global
           if (R1 & 7 == 1) goto u5mCb; else goto c5mBU;
       u5mCb: // global
           Sp = Sp + 24;
           call _c5mC5() args: 0, res: 0, upd: 0;
       c5mBU: // global
           I64[Sp] = block_c5mB3_info;
           _s5kVH::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s5kVH::P64;
           if (R1 & 7 != 0) goto u5mCd; else goto c5mB4;
       u5mCd: // global
           call _c5mB3(R1) args: 0, res: 0, upd: 0;
       c5mB4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mB3() //  [R1]
         { info_tbl: [(c5mB3,
                       label: block_c5mB3_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mB3: // global
           if (R1 & 7 == 1) goto u5mCc; else goto c5mC6;
       u5mCc: // global
           Sp = Sp + 24;
           call _c5mC5() args: 0, res: 0, upd: 0;
       c5mC6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mC9; else goto c5mC8;
       c5mC9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mC8: // global
           I64[Hp - 16] = go_s5kVN_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R2 = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go_s5kVN_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5mC5() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mC5: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.098967522 UTC

[section ""data" . Data.OldList.intersect_closure" {
     Data.OldList.intersect_closure:
         const Data.OldList.intersect_info;
 },
 sat_s5kVY_entry() //  [R1]
         { info_tbl: [(c5mCp,
                       label: sat_s5kVY_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mCp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mCq; else goto c5mCr;
       c5mCq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mCr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.intersect_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mCs,
                       label: Data.OldList.intersect_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mCs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mCw; else goto c5mCv;
       c5mCw: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.intersect_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mCv: // global
           I64[Hp - 16] = sat_s5kVY_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.intersectBy_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.100770587 UTC

[section ""data" . Data.OldList.prependToAll_closure" {
     Data.OldList.prependToAll_closure:
         const Data.OldList.prependToAll_info;
 },
 sat_s5kW4_entry() //  [R1]
         { info_tbl: [(c5mCL,
                       label: sat_s5kW4_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mCL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mCM; else goto c5mCN;
       c5mCM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mCN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.prependToAll_entry() //  [R2, R3]
         { info_tbl: [(c5mCS,
                       label: Data.OldList.prependToAll_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mCS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mCT; else goto c5mCU;
       c5mCT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.prependToAll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mCU: // global
           I64[Sp - 16] = block_c5mCB_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5mD2; else goto c5mCC;
       u5mD2: // global
           call _c5mCB(R1) args: 0, res: 0, upd: 0;
       c5mCC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mCB() //  [R1]
         { info_tbl: [(c5mCB,
                       label: block_c5mCB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mCB: // global
           if (R1 & 7 == 1) goto c5mCP; else goto c5mCQ;
       c5mCP: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mCQ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5mD1; else goto c5mD0;
       c5mD1: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mD0: // global
           _s5kW2::P64 = P64[R1 + 6];
           _s5kW3::P64 = P64[R1 + 14];
           I64[Hp - 72] = sat_s5kW4_info;
           _s5kVZ::P64 = P64[Sp + 8];
           P64[Hp - 56] = _s5kVZ::P64;
           P64[Hp - 48] = _s5kW3::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5kW2::P64;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kVZ::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.103051319 UTC

[section ""data" . Data.OldList.intersperse_closure" {
     Data.OldList.intersperse_closure:
         const Data.OldList.intersperse_info;
 },
 sat_s5kWb_entry() //  [R1]
         { info_tbl: [(c5mDh,
                       label: sat_s5kWb_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mDh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mDi; else goto c5mDj;
       c5mDi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mDj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.intersperse_entry() //  [R2, R3]
         { info_tbl: [(c5mDo,
                       label: Data.OldList.intersperse_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mDo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mDp; else goto c5mDq;
       c5mDp: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.intersperse_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mDq: // global
           I64[Sp - 16] = block_c5mD7_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5mDx; else goto c5mD8;
       u5mDx: // global
           call _c5mD7(R1) args: 0, res: 0, upd: 0;
       c5mD8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mD7() //  [R1]
         { info_tbl: [(c5mD7,
                       label: block_c5mD7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mD7: // global
           if (R1 & 7 == 1) goto c5mDl; else goto c5mDm;
       c5mDl: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mDm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5mDw; else goto c5mDv;
       c5mDw: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mDv: // global
           _s5kW9::P64 = P64[R1 + 6];
           _s5kWa::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s5kWb_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s5kWa::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kW9::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.105047326 UTC

[section ""data" . Data.OldList.intercalate1_closure" {
     Data.OldList.intercalate1_closure:
         const Data.OldList.intercalate1_info;
 },
 sat_s5kWg_entry() //  [R1]
         { info_tbl: [(c5mDM,
                       label: sat_s5kWg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mDM: // global
           R2 = P64[R1 + 16];
           call Data.OldList.intercalate1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.intercalate1_entry() //  [R2]
         { info_tbl: [(c5mDT,
                       label: Data.OldList.intercalate1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mDT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5mDU; else goto c5mDV;
       c5mDU: // global
           R2 = R2;
           R1 = Data.OldList.intercalate1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5mDV: // global
           I64[Sp - 8] = block_c5mDC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mE1; else goto c5mDD;
       u5mE1: // global
           call _c5mDC(R1) args: 0, res: 0, upd: 0;
       c5mDD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mDC() //  [R1]
         { info_tbl: [(c5mDC,
                       label: block_c5mDC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mDC: // global
           if (R1 & 7 == 1) goto c5mDQ; else goto c5mDR;
       c5mDQ: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mDR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mE0; else goto c5mDZ;
       c5mE0: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mDZ: // global
           _s5kWe::P64 = P64[R1 + 6];
           _s5kWf::P64 = P64[R1 + 14];
           I64[Hp - 16] = sat_s5kWg_info;
           P64[Hp] = _s5kWf::P64;
           R3 = Hp - 16;
           R2 = _s5kWe::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.107068016 UTC

[section ""data" . Data.OldList.intercalate_closure" {
     Data.OldList.intercalate_closure:
         const Data.OldList.intercalate_info;
 },
 sat_s5kWm_entry() //  [R1]
         { info_tbl: [(c5mEg,
                       label: sat_s5kWm_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mEg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mEh; else goto c5mEi;
       c5mEh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mEi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.intercalate_entry() //  [R2, R3]
         { info_tbl: [(c5mEn,
                       label: Data.OldList.intercalate_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mEn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mEo; else goto c5mEp;
       c5mEo: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.intercalate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mEp: // global
           I64[Sp - 16] = block_c5mE6_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5mEw; else goto c5mE7;
       u5mEw: // global
           call _c5mE6(R1) args: 0, res: 0, upd: 0;
       c5mE7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mE6() //  [R1]
         { info_tbl: [(c5mE6,
                       label: block_c5mE6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mE6: // global
           if (R1 & 7 == 1) goto c5mEk; else goto c5mEl;
       c5mEk: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mEl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5mEv; else goto c5mEu;
       c5mEv: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mEu: // global
           _s5kWk::P64 = P64[R1 + 6];
           _s5kWl::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s5kWm_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s5kWl::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kWk::P64;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call Data.OldList.intercalate1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.109452875 UTC

[section ""data" . poly_go_r5kSf_closure" {
     poly_go_r5kSf_closure:
         const poly_go_r5kSf_info;
 },
 sat_s5kWv_entry() //  [R1]
         { info_tbl: [(c5mER,
                       label: sat_s5kWv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mER: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mES; else goto c5mET;
       c5mES: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mET: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_r5kSf_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go_r5kSf_entry() //  [R2]
         { info_tbl: [(c5mEY,
                       label: poly_go_r5kSf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mEY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mEZ; else goto u5mFe;
       c5mEZ: // global
           R2 = R2;
           R1 = poly_go_r5kSf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5mFe: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5mEy() args: 0, res: 0, upd: 0;
     }
 },
 _c5mEy() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mEy: // global
           _s5kWo::P64 = P64[Sp];
           I64[Sp] = block_c5mEB_info;
           R1 = _s5kWo::P64;
           if (R1 & 7 != 0) goto u5mFg; else goto c5mEC;
       u5mFg: // global
           call _c5mEB(R1) args: 0, res: 0, upd: 0;
       c5mEC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mEB() //  [R1]
         { info_tbl: [(c5mEB,
                       label: block_c5mEB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mEB: // global
           if (R1 & 7 == 1) goto c5mEV; else goto c5mEW;
       c5mEV: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mEW: // global
           I64[Sp - 8] = block_c5mEH_info;
           _s5kWr::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5kWr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mFh; else goto c5mEI;
       u5mFh: // global
           call _c5mEH(R1) args: 0, res: 0, upd: 0;
       c5mEI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mEH() //  [R1]
         { info_tbl: [(c5mEH,
                       label: block_c5mEH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mEH: // global
           _s5kWr::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5mF7; else goto c5mF9;
       c5mF7: // global
           P64[Sp + 8] = _s5kWr::P64;
           Sp = Sp + 8;
           call _c5mEy() args: 0, res: 0, upd: 0;
       c5mF9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5mFc; else goto c5mFb;
       c5mFc: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mFb: // global
           _s5kWu::P64 = P64[R1 + 14];
           I64[Hp - 40] = sat_s5kWv_info;
           P64[Hp - 24] = _s5kWr::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kWu::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.113785523 UTC

[section ""data" . poly_go1_r5kSg_closure" {
     poly_go1_r5kSg_closure:
         const poly_go1_r5kSg_info;
 },
 sat_s5kWD_entry() //  [R1]
         { info_tbl: [(c5mFE,
                       label: sat_s5kWD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mFE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mFF; else goto c5mFG;
       c5mFF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mFG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_r5kSg_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go1_r5kSg_entry() //  [R2]
         { info_tbl: [(c5mFL,
                       label: poly_go1_r5kSg_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mFL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mFM; else goto u5mG1;
       c5mFM: // global
           R2 = R2;
           R1 = poly_go1_r5kSg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5mG1: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5mFl() args: 0, res: 0, upd: 0;
     }
 },
 _c5mFl() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mFl: // global
           _s5kWw::P64 = P64[Sp];
           I64[Sp] = block_c5mFo_info;
           R1 = _s5kWw::P64;
           if (R1 & 7 != 0) goto u5mG3; else goto c5mFp;
       u5mG3: // global
           call _c5mFo(R1) args: 0, res: 0, upd: 0;
       c5mFp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mFo() //  [R1]
         { info_tbl: [(c5mFo,
                       label: block_c5mFo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mFo: // global
           if (R1 & 7 == 1) goto c5mFI; else goto c5mFJ;
       c5mFI: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mFJ: // global
           I64[Sp - 8] = block_c5mFu_info;
           _s5kWz::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5kWz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mG4; else goto c5mFv;
       u5mG4: // global
           call _c5mFu(R1) args: 0, res: 0, upd: 0;
       c5mFv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mFu() //  [R1]
         { info_tbl: [(c5mFu,
                       label: block_c5mFu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mFu: // global
           _s5kWz::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5mFU; else goto c5mFW;
       c5mFU: // global
           P64[Sp + 8] = _s5kWz::P64;
           Sp = Sp + 8;
           call _c5mFl() args: 0, res: 0, upd: 0;
       c5mFW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5mFZ; else goto c5mFY;
       c5mFZ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mFY: // global
           _s5kWB::P64 = P64[R1 + 6];
           I64[Hp - 40] = sat_s5kWD_info;
           P64[Hp - 24] = _s5kWz::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kWB::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.116759165 UTC

[section ""data" . Data.OldList.transpose_closure" {
     Data.OldList.transpose_closure:
         const Data.OldList.transpose_info;
 },
 sat_s5kWN_entry() //  [R1]
         { info_tbl: [(c5mGv,
                       label: sat_s5kWN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mGv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mGw; else goto c5mGx;
       c5mGw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mGx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_r5kSf_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5kWP_entry() //  [R1]
         { info_tbl: [(c5mGz,
                       label: sat_s5kWP_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mGz: // global
           _s5kWP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5mGA; else goto c5mGB;
       c5mGB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5mGD; else goto c5mGC;
       c5mGD: // global
           HpAlloc = 48;
           goto c5mGA;
       c5mGA: // global
           R1 = _s5kWP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mGC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5kWP::P64;
           _s5kWH::P64 = P64[_s5kWP::P64 + 16];
           _s5kWK::P64 = P64[_s5kWP::P64 + 24];
           I64[Hp - 40] = sat_s5kWN_info;
           P64[Hp - 24] = _s5kWH::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kWK::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call Data.OldList.transpose_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5kWL_entry() //  [R1]
         { info_tbl: [(c5mGI,
                       label: sat_s5kWL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mGI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mGJ; else goto c5mGK;
       c5mGJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mGK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_r5kSg_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.transpose_entry() //  [R2]
         { info_tbl: [(c5mGP,
                       label: Data.OldList.transpose_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mGP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mGQ; else goto u5mH6;
       c5mGQ: // global
           R2 = R2;
           R1 = Data.OldList.transpose_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5mH6: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5mG8() args: 0, res: 0, upd: 0;
     }
 },
 _c5mG8() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mG8: // global
           _s5kWE::P64 = P64[Sp];
           I64[Sp] = block_c5mGb_info;
           R1 = _s5kWE::P64;
           if (R1 & 7 != 0) goto u5mH8; else goto c5mGc;
       u5mH8: // global
           call _c5mGb(R1) args: 0, res: 0, upd: 0;
       c5mGc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mGb() //  [R1]
         { info_tbl: [(c5mGb,
                       label: block_c5mGb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mGb: // global
           if (R1 & 7 == 1) goto c5mGM; else goto c5mGN;
       c5mGM: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mGN: // global
           I64[Sp - 8] = block_c5mGh_info;
           _s5kWH::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5kWH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mH9; else goto c5mGi;
       u5mH9: // global
           call _c5mGh(R1) args: 0, res: 0, upd: 0;
       c5mGi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mGh() //  [R1]
         { info_tbl: [(c5mGh,
                       label: block_c5mGh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mGh: // global
           _s5kWH::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5mGY; else goto c5mH1;
       c5mGY: // global
           P64[Sp + 8] = _s5kWH::P64;
           Sp = Sp + 8;
           call _c5mG8() args: 0, res: 0, upd: 0;
       c5mH1: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c5mH4; else goto c5mH3;
       c5mH4: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mH3: // global
           _s5kWJ::P64 = P64[R1 + 6];
           _s5kWK::P64 = P64[R1 + 14];
           I64[Hp - 96] = sat_s5kWP_info;
           P64[Hp - 80] = _s5kWH::P64;
           P64[Hp - 72] = _s5kWK::P64;
           I64[Hp - 64] = sat_s5kWL_info;
           P64[Hp - 48] = _s5kWH::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5kWJ::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.120097943 UTC

[section ""data" . Data.OldList.select_closure" {
     Data.OldList.select_closure:
         const Data.OldList.select_info;
 },
 Data.OldList.select_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mHm,
                       label: Data.OldList.select_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mHm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mHn; else goto c5mHo;
       c5mHn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.select_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mHo: // global
           I64[Sp - 24] = block_c5mHg_info;
           _s5kWQ::P64 = R2;
           R2 = R3;
           R1 = _s5kWQ::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mHg() //  [R1]
         { info_tbl: [(c5mHg,
                       label: block_c5mHg_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mHg: // global
           _s5kWR::P64 = P64[Sp + 8];
           _s5kWS::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5mHj; else goto c5mHk;
       c5mHj: // global
           Hp = Hp + 96;
           _s5kWT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5mHG; else goto c5mHw;
       c5mHw: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _s5kWS::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5kWR::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _s5kWS::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mHk: // global
           Hp = Hp + 96;
           _s5kWT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5mHG; else goto c5mHF;
       c5mHG: // global
           HpAlloc = 96;
           R1 = _s5kWT::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mHF: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _s5kWS::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _s5kWS::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5kWR::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.122955748 UTC

[section ""data" . Data.OldList.partition_closure" {
     Data.OldList.partition_closure:
         const Data.OldList.partition_info;
 },
 w1_s5kXj_entry() //  [R1]
         { info_tbl: [(c5mI3,
                       label: w1_s5kXj_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mI3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mI4; else goto c5mI5;
       c5mI4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mI5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5mI0_info;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgo_s5kXe_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5mI0() //  [R1, R2]
         { info_tbl: [(c5mI0,
                       label: block_c5mI0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mI0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mI8; else goto c5mI7;
       c5mI8: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5mI7: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $wgo_s5kXe_entry() //  [R1, R2]
         { info_tbl: [(c5mId,
                       label: $wgo_s5kXe_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mId: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mIe; else goto c5mIf;
       c5mIe: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5mIf: // global
           I64[Sp - 24] = block_c5mHQ_info;
           _s5kXe::P64 = R1;
           _s5kXc::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s5kXc::P64;
           P64[Sp - 8] = _s5kXe::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5mIH; else goto c5mHR;
       u5mIH: // global
           call _c5mHQ(R1) args: 0, res: 0, upd: 0;
       c5mHR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mHQ() //  [R1]
         { info_tbl: [(c5mHQ,
                       label: block_c5mHQ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mHQ: // global
           if (R1 & 7 == 1) goto c5mIa; else goto c5mIb;
       c5mIa: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5mIb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5mIl; else goto c5mIk;
       c5mIl: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mIk: // global
           _s5kXh::P64 = P64[R1 + 6];
           _s5kXi::P64 = P64[R1 + 14];
           I64[Hp - 24] = w1_s5kXj_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s5kXi::P64;
           I64[Sp] = block_c5mIi_info;
           R2 = _s5kXh::P64;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5kXh::P64;
           P64[Sp + 16] = Hp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mIi() //  [R1]
         { info_tbl: [(c5mIi,
                       label: block_c5mIi_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mIi: // global
           _c5mHW::P64 = P64[Sp + 16];
           _s5kXh::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5mIt; else goto c5mIC;
       c5mIt: // global
           Hp = Hp + 72;
           _s5kXn::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5mIF; else goto c5mIv;
       c5mIv: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5mHW::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5kXh::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5mHW::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5mIC: // global
           Hp = Hp + 72;
           _s5kXn::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5mIF; else goto c5mIE;
       c5mIF: // global
           HpAlloc = 72;
           R1 = _s5kXn::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mIE: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5mHW::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5mHW::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kXh::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.partition_entry() //  [R2, R3]
         { info_tbl: [(c5mIL,
                       label: Data.OldList.partition_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mIL: // global
           _s5kXd::P64 = R3;
           _s5kXc::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5mIM; else goto c5mIN;
       c5mIN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5mIP; else goto c5mIO;
       c5mIP: // global
           HpAlloc = 16;
           goto c5mIM;
       c5mIM: // global
           R3 = _s5kXd::P64;
           R2 = _s5kXc::P64;
           R1 = Data.OldList.partition_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mIO: // global
           I64[Hp - 8] = $wgo_s5kXe_info;
           P64[Hp] = _s5kXc::P64;
           I64[Sp - 8] = block_c5mII_info;
           R2 = _s5kXd::P64;
           R1 = Hp - 7;
           Sp = Sp - 8;
           call $wgo_s5kXe_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mII() //  [R1, R2]
         { info_tbl: [(c5mII,
                       label: block_c5mII_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mII: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mIS; else goto c5mIR;
       c5mIS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5mIR: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.126618351 UTC

[section ""data" . Data.OldList.pairWithNil_closure" {
     Data.OldList.pairWithNil_closure:
         const Data.OldList.pairWithNil_info;
 },
 Data.OldList.pairWithNil_entry() //  [R2]
         { info_tbl: [(c5mIY,
                       label: Data.OldList.pairWithNil_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mIY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mJ2; else goto c5mJ1;
       c5mJ2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.OldList.pairWithNil_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5mJ1: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.127980993 UTC

[section ""data" . Data.OldList.mapAccumLF_closure" {
     Data.OldList.mapAccumLF_closure:
         const Data.OldList.mapAccumLF_info;
 },
 ds1_s5kXP_entry() //  [R1]
         { info_tbl: [(c5mJd,
                       label: ds1_s5kXP_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mJd: // global
           _s5kXP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5mJe; else goto c5mJf;
       c5mJf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mJh; else goto c5mJg;
       c5mJh: // global
           HpAlloc = 24;
           goto c5mJe;
       c5mJe: // global
           R1 = _s5kXP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mJg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5kXP::P64;
           _s5kXM::P64 = P64[_s5kXP::P64 + 16];
           _s5kXO::P64 = P64[_s5kXP::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s5kXO::P64;
           R2 = Hp - 16;
           R1 = _s5kXM::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.mapAccumLF_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5mJn,
                       label: Data.OldList.mapAccumLF_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mJn: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto c5mJr; else goto c5mJq;
       c5mJr: // global
           HpAlloc = 192;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.mapAccumLF_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mJq: // global
           I64[Hp - 184] = stg_ap_3_upd_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R5;
           P64[Hp - 152] = R3;
           I64[Hp - 144] = ds1_s5kXP_info;
           P64[Hp - 128] = R4;
           _c5mJ7::P64 = Hp - 184;
           P64[Hp - 120] = _c5mJ7::P64;
           I64[Hp - 112] = stg_sel_1_upd_info;
           _c5mJ8::P64 = Hp - 144;
           P64[Hp - 96] = _c5mJ8::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5mJ7::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5mJ8::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.13040582 UTC

[section ""data" . Data.OldList.$wmapAccumL_closure" {
     Data.OldList.$wmapAccumL_closure:
         const Data.OldList.$wmapAccumL_info;
 },
 ds1_s5kYe_entry() //  [R1]
         { info_tbl: [(c5mJL,
                       label: ds1_s5kYe_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mJL: // global
           _s5kYe::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5mJM; else goto c5mJN;
       c5mJN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mJP; else goto c5mJO;
       c5mJP: // global
           HpAlloc = 24;
           goto c5mJM;
       c5mJM: // global
           R1 = _s5kYe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mJO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5kYe::P64;
           _s5kY7::P64 = P64[_s5kYe::P64 + 16];
           _s5kYc::P64 = P64[_s5kYe::P64 + 24];
           _s5kYd::P64 = P64[_s5kYe::P64 + 32];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s5kYd::P64;
           I64[Sp - 24] = block_c5mJI_info;
           R4 = _s5kYc::P64;
           R3 = Hp - 16;
           R2 = _s5kY7::P64;
           Sp = Sp - 24;
           call Data.OldList.$wmapAccumL_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5mJI() //  [R1, R2]
         { info_tbl: [(c5mJI,
                       label: block_c5mJI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mJI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mJS; else goto c5mJR;
       c5mJS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5mJR: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wmapAccumL_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mJX,
                       label: Data.OldList.$wmapAccumL_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mJX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mJY; else goto c5mJZ;
       c5mJY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$wmapAccumL_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mJZ: // global
           I64[Sp - 24] = block_c5mJw_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5mK9; else goto c5mJx;
       u5mK9: // global
           call _c5mJw(R1) args: 0, res: 0, upd: 0;
       c5mJx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mJw() //  [R1]
         { info_tbl: [(c5mJw,
                       label: block_c5mJw_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mJw: // global
           _s5kY8::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5mJU; else goto c5mJV;
       c5mJU: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = _s5kY8::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5mJV: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c5mK8; else goto c5mK7;
       c5mK8: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mK7: // global
           _s5kYb::P64 = P64[R1 + 6];
           _s5kYc::P64 = P64[R1 + 14];
           I64[Hp - 168] = stg_ap_3_upd_info;
           _s5kY7::P64 = P64[Sp + 8];
           P64[Hp - 152] = _s5kY7::P64;
           P64[Hp - 144] = _s5kY8::P64;
           P64[Hp - 136] = _s5kYb::P64;
           I64[Hp - 128] = ds1_s5kYe_info;
           P64[Hp - 112] = _s5kY7::P64;
           P64[Hp - 104] = _s5kYc::P64;
           _c5mJC::P64 = Hp - 168;
           P64[Hp - 96] = _c5mJC::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           _c5mJD::P64 = Hp - 128;
           P64[Hp - 72] = _c5mJD::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5mJC::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5mJD::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.132863554 UTC

[section ""data" . Data.OldList.mapAccumL_closure" {
     Data.OldList.mapAccumL_closure:
         const Data.OldList.mapAccumL_info;
 },
 Data.OldList.mapAccumL_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mKh,
                       label: Data.OldList.mapAccumL_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mKh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5mKi; else goto c5mKj;
       c5mKi: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.mapAccumL_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mKj: // global
           I64[Sp - 8] = block_c5mKe_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wmapAccumL_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mKe() //  [R1, R2]
         { info_tbl: [(c5mKe,
                       label: block_c5mKe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mKe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mKm; else goto c5mKl;
       c5mKm: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5mKl: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.135565778 UTC

[section ""data" . Data.OldList.$wmapAccumR_closure" {
     Data.OldList.$wmapAccumR_closure:
         const Data.OldList.$wmapAccumR_info;
 },
 ds_s5kYL_entry() //  [R1]
         { info_tbl: [(c5mKE,
                       label: ds_s5kYL_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mKE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mKF; else goto c5mKG;
       c5mKF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mKG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5mKB_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wmapAccumR_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5mKB() //  [R1, R2]
         { info_tbl: [(c5mKB,
                       label: block_c5mKB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mKB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mKJ; else goto c5mKI;
       c5mKJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5mKI: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds1_s5kYP_entry() //  [R1]
         { info_tbl: [(c5mKP,
                       label: ds1_s5kYP_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mKP: // global
           _s5kYP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5mKQ; else goto c5mKR;
       c5mKR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mKT; else goto c5mKS;
       c5mKT: // global
           HpAlloc = 24;
           goto c5mKQ;
       c5mKQ: // global
           R1 = _s5kYP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mKS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5kYP::P64;
           _s5kYF::P64 = P64[_s5kYP::P64 + 16];
           _s5kYJ::P64 = P64[_s5kYP::P64 + 24];
           _s5kYL::P64 = P64[_s5kYP::P64 + 32];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s5kYL::P64;
           R3 = _s5kYJ::P64;
           R2 = Hp - 16;
           R1 = _s5kYF::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wmapAccumR_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mKY,
                       label: Data.OldList.$wmapAccumR_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mKY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mKZ; else goto c5mL0;
       c5mKZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$wmapAccumR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mL0: // global
           I64[Sp - 24] = block_c5mKr_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5mLa; else goto c5mKs;
       u5mLa: // global
           call _c5mKr(R1) args: 0, res: 0, upd: 0;
       c5mKs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mKr() //  [R1]
         { info_tbl: [(c5mKr,
                       label: block_c5mKr_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mKr: // global
           _s5kYG::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5mKV; else goto c5mKW;
       c5mKV: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = _s5kYG::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5mKW: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c5mL9; else goto c5mL8;
       c5mL9: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mL8: // global
           _s5kYJ::P64 = P64[R1 + 6];
           _s5kYK::P64 = P64[R1 + 14];
           I64[Hp - 168] = ds_s5kYL_info;
           _s5kYF::P64 = P64[Sp + 8];
           P64[Hp - 152] = _s5kYF::P64;
           P64[Hp - 144] = _s5kYG::P64;
           P64[Hp - 136] = _s5kYK::P64;
           I64[Hp - 128] = ds1_s5kYP_info;
           P64[Hp - 112] = _s5kYF::P64;
           P64[Hp - 104] = _s5kYJ::P64;
           _c5mKx::P64 = Hp - 168;
           P64[Hp - 96] = _c5mKx::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5mKx::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c5mKK::P64 = Hp - 128;
           P64[Hp - 48] = _c5mKK::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5mKK::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.138392063 UTC

[section ""data" . Data.OldList.mapAccumR_closure" {
     Data.OldList.mapAccumR_closure:
         const Data.OldList.mapAccumR_info;
 },
 Data.OldList.mapAccumR_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mLi,
                       label: Data.OldList.mapAccumR_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mLi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5mLj; else goto c5mLk;
       c5mLj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.mapAccumR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mLk: // global
           I64[Sp - 8] = block_c5mLf_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wmapAccumR_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mLf() //  [R1, R2]
         { info_tbl: [(c5mLf,
                       label: block_c5mLf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mLf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mLn; else goto c5mLm;
       c5mLn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5mLm: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.140585458 UTC

[section ""data" . Data.OldList.insertBy_closure" {
     Data.OldList.insertBy_closure:
         const Data.OldList.insertBy_info;
 },
 Data.OldList.insertBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mLv,
                       label: Data.OldList.insertBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mLv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5mLw; else goto c5mLx;
       c5mLw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.insertBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mLx: // global
           I64[Sp - 8] = block_c5mLs_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$winsertBy_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mLs() //  [R1, R2]
         { info_tbl: [(c5mLs,
                       label: block_c5mLs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mLs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mLA; else goto c5mLz;
       c5mLA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5mLz: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Data.OldList.$winsertBy_closure" {
     Data.OldList.$winsertBy_closure:
         const Data.OldList.$winsertBy_info;
 },
 sat_s5kZq_entry() //  [R1]
         { info_tbl: [(c5mLU,
                       label: sat_s5kZq_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mLU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mLV; else goto c5mLW;
       c5mLV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mLW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.insertBy_entry(R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$winsertBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mM1,
                       label: Data.OldList.$winsertBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mM1: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5mM2; else goto c5mM3;
       c5mM2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$winsertBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mM3: // global
           I64[Sp - 24] = block_c5mLF_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5mMg; else goto c5mLG;
       u5mMg: // global
           call _c5mLF(R1) args: 0, res: 0, upd: 0;
       c5mLG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mLF() //  [R1]
         { info_tbl: [(c5mLF,
                       label: block_c5mLF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mLF: // global
           _s5kZk::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5mLY; else goto c5mLZ;
       c5mLY: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = _s5kZk::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5mLZ: // global
           I64[Sp - 24] = block_c5mLL_info;
           _s5kZn::P64 = P64[R1 + 6];
           R3 = _s5kZn::P64;
           R2 = _s5kZk::P64;
           _s5kZm::P64 = R1;
           _s5kZo::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp - 16] = _s5kZn::P64;
           P64[Sp - 8] = _s5kZo::P64;
           P64[Sp] = _s5kZm::P64;
           Sp = Sp - 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mLL() //  [R1]
         { info_tbl: [(c5mLL,
                       label: block_c5mLL_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mLL: // global
           _s5kZk::P64 = P64[Sp + 40];
           if (R1 & 7 == 3) goto c5mMb; else goto c5mMa;
       c5mMb: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5mMe; else goto c5mMd;
       c5mMe: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mMd: // global
           I64[Hp - 32] = sat_s5kZq_info;
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = _s5kZk::P64;
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 32;
           R1 = P64[Sp + 8];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5mMa: // global
           R2 = P64[Sp + 24];
           R1 = _s5kZk::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.143763015 UTC

[section ""data" . Data.OldList.insert_closure" {
     Data.OldList.insert_closure:
         const Data.OldList.insert_info;
 },
 sat_s5kZu_entry() //  [R1]
         { info_tbl: [(c5mMp,
                       label: sat_s5kZu_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mMp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mMq; else goto c5mMr;
       c5mMq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mMr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.insert_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mMv,
                       label: Data.OldList.insert_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mMv: // global
           _s5kZt::P64 = R4;
           _s5kZs::P64 = R3;
           _s5kZr::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5mMw; else goto c5mMx;
       c5mMx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mMz; else goto c5mMy;
       c5mMz: // global
           HpAlloc = 24;
           goto c5mMw;
       c5mMw: // global
           R4 = _s5kZt::P64;
           R3 = _s5kZs::P64;
           R2 = _s5kZr::P64;
           R1 = Data.OldList.insert_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mMy: // global
           I64[Hp - 16] = sat_s5kZu_info;
           P64[Hp] = _s5kZr::P64;
           I64[Sp - 8] = block_c5mMs_info;
           R4 = _s5kZt::P64;
           R3 = _s5kZs::P64;
           R2 = Hp - 16;
           Sp = Sp - 8;
           call Data.OldList.$winsertBy_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mMs() //  [R1, R2]
         { info_tbl: [(c5mMs,
                       label: block_c5mMs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mMs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mMC; else goto c5mMB;
       c5mMC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5mMB: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.145424262 UTC

[section ""cstring" . lvl_r5kSh_bytes" {
     lvl_r5kSh_bytes:
         I8[] [76,105,115,116,46,109,97,120,105,109,117,109,66,121,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.146316079 UTC

[section ""data" . Data.OldList.maximumBy1_closure" {
     Data.OldList.maximumBy1_closure:
         const Data.OldList.maximumBy1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.OldList.maximumBy1_entry() //  [R1]
         { info_tbl: [(c5mML,
                       label: Data.OldList.maximumBy1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mML: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mMM; else goto c5mMN;
       c5mMM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mMN: // global
           (_c5mMG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5mMG::I64 == 0) goto c5mMI; else goto c5mMH;
       c5mMI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5mMH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5mMG::I64;
           I64[Sp - 24] = block_c5mMJ_info;
           R2 = lvl_r5kSh_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5mMJ() //  [R1]
         { info_tbl: [(c5mMJ,
                       label: block_c5mMJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mMJ: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.148399597 UTC

[section ""data" . Data.OldList.maximumBy_closure" {
     Data.OldList.maximumBy_closure:
         const Data.OldList.maximumBy_info;
         const 0;
 },
 sat_s5kZL_entry() //  [R1]
         { info_tbl: [(c5mNm,
                       label: sat_s5kZL_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mNm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5mNn; else goto c5mNo;
       c5mNn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mNo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c5mNg_info;
           _s5kZI::P64 = P64[R1 + 32];
           R3 = _s5kZI::P64;
           _s5kZG::P64 = P64[R1 + 24];
           R2 = _s5kZG::P64;
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s5kZG::P64;
           P64[Sp - 24] = _s5kZI::P64;
           Sp = Sp - 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5mNg() //  [R1]
         { info_tbl: [(c5mNg,
                       label: block_c5mNg_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mNg: // global
           if (R1 & 7 == 3) goto c5mNk; else goto c5mNj;
       c5mNk: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c5mNj: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.maximumBy_entry() //  [R2, R3]
         { info_tbl: [(c5mNz,
                       label: Data.OldList.maximumBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mNz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mNA; else goto c5mNB;
       c5mNA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.maximumBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mNB: // global
           I64[Sp - 16] = block_c5mMV_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5mNU; else goto c5mMW;
       u5mNU: // global
           call _c5mMV(R1) args: 0, res: 0, upd: 0;
       c5mMW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mMV() //  [R1]
         { info_tbl: [(c5mMV,
                       label: block_c5mMV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mMV: // global
           if (R1 & 7 == 1) goto c5mNw; else goto c5mNx;
       c5mNw: // global
           R1 = Data.OldList.maximumBy1_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5mNx: // global
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = P64[R1 + 14];
           Sp = Sp - 8;
           call _c5mN4() args: 0, res: 0, upd: 0;
     }
 },
 _c5mN4() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mN4: // global
           I64[Sp - 8] = block_c5mN6_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mNS; else goto c5mN7;
       u5mNS: // global
           call _c5mN6(R1) args: 0, res: 0, upd: 0;
       c5mN7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mN6() //  [R1]
         { info_tbl: [(c5mN6,
                       label: block_c5mN6_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mN6: // global
           _s5kZG::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5mNJ; else goto c5mNK;
       c5mNJ: // global
           R1 = _s5kZG::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5mNK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5mNN; else goto c5mNM;
       c5mNN: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mNM: // global
           _s5kZI::P64 = P64[R1 + 6];
           _s5kZJ::P64 = P64[R1 + 14];
           I64[Hp - 32] = sat_s5kZL_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s5kZG::P64;
           P64[Hp] = _s5kZI::P64;
           P64[Sp + 16] = _s5kZJ::P64;
           P64[Sp + 8] = Hp - 32;
           Sp = Sp + 8;
           call _c5mN4() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.15095473 UTC

[section ""cstring" . lvl1_r5kSi_bytes" {
     lvl1_r5kSi_bytes:
         I8[] [76,105,115,116,46,109,105,110,105,109,117,109,66,121,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.151994641 UTC

[section ""data" . Data.OldList.minimumBy1_closure" {
     Data.OldList.minimumBy1_closure:
         const Data.OldList.minimumBy1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.OldList.minimumBy1_entry() //  [R1]
         { info_tbl: [(c5mO3,
                       label: Data.OldList.minimumBy1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mO3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mO4; else goto c5mO5;
       c5mO4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mO5: // global
           (_c5mNY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5mNY::I64 == 0) goto c5mO0; else goto c5mNZ;
       c5mO0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5mNZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5mNY::I64;
           I64[Sp - 24] = block_c5mO1_info;
           R2 = lvl1_r5kSi_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5mO1() //  [R1]
         { info_tbl: [(c5mO1,
                       label: block_c5mO1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mO1: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.156011389 UTC

[section ""data" . Data.OldList.minimumBy_closure" {
     Data.OldList.minimumBy_closure:
         const Data.OldList.minimumBy_info;
         const 0;
 },
 sat_s5kZZ_entry() //  [R1]
         { info_tbl: [(c5mOE,
                       label: sat_s5kZZ_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mOE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5mOF; else goto c5mOG;
       c5mOF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mOG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c5mOy_info;
           _s5kZW::P64 = P64[R1 + 32];
           R3 = _s5kZW::P64;
           _s5kZU::P64 = P64[R1 + 24];
           R2 = _s5kZU::P64;
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s5kZU::P64;
           P64[Sp - 24] = _s5kZW::P64;
           Sp = Sp - 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5mOy() //  [R1]
         { info_tbl: [(c5mOy,
                       label: block_c5mOy_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mOy: // global
           if (R1 & 7 == 3) goto c5mOC; else goto c5mOB;
       c5mOC: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c5mOB: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.minimumBy_entry() //  [R2, R3]
         { info_tbl: [(c5mOR,
                       label: Data.OldList.minimumBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mOR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mOS; else goto c5mOT;
       c5mOS: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.minimumBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mOT: // global
           I64[Sp - 16] = block_c5mOd_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5mPc; else goto c5mOe;
       u5mPc: // global
           call _c5mOd(R1) args: 0, res: 0, upd: 0;
       c5mOe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mOd() //  [R1]
         { info_tbl: [(c5mOd,
                       label: block_c5mOd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mOd: // global
           if (R1 & 7 == 1) goto c5mOO; else goto c5mOP;
       c5mOO: // global
           R1 = Data.OldList.minimumBy1_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5mOP: // global
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = P64[R1 + 14];
           Sp = Sp - 8;
           call _c5mOm() args: 0, res: 0, upd: 0;
     }
 },
 _c5mOm() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mOm: // global
           I64[Sp - 8] = block_c5mOo_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mPa; else goto c5mOp;
       u5mPa: // global
           call _c5mOo(R1) args: 0, res: 0, upd: 0;
       c5mOp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mOo() //  [R1]
         { info_tbl: [(c5mOo,
                       label: block_c5mOo_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mOo: // global
           _s5kZU::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5mP1; else goto c5mP2;
       c5mP1: // global
           R1 = _s5kZU::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5mP2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5mP5; else goto c5mP4;
       c5mP5: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mP4: // global
           _s5kZW::P64 = P64[R1 + 6];
           _s5kZX::P64 = P64[R1 + 14];
           I64[Hp - 32] = sat_s5kZZ_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s5kZU::P64;
           P64[Hp] = _s5kZW::P64;
           P64[Sp + 16] = _s5kZX::P64;
           P64[Sp + 8] = Hp - 32;
           Sp = Sp + 8;
           call _c5mOm() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.158526622 UTC

[section ""data" . sat_s5l00_closure" {
     sat_s5l00_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.15910003 UTC

[section ""data" . sat_s5l01_closure" {
     sat_s5l01_closure:
         const :_con_info;
         const sat_s5l00_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.160020519 UTC

[section ""data" . Data.OldList.genericLength2_closure" {
     Data.OldList.genericLength2_closure:
         const Data.OldList.genericLength2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.OldList.genericLength2_entry() //  [R1]
         { info_tbl: [(c5mPj,
                       label: Data.OldList.genericLength2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mPj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mPk; else goto c5mPl;
       c5mPk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mPl: // global
           (_c5mPg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5mPg::I64 == 0) goto c5mPi; else goto c5mPh;
       c5mPi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5mPh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5mPg::I64;
           R3 = sat_s5l01_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.161229074 UTC

[section ""data" . Data.OldList.genericLength1_closure" {
     Data.OldList.genericLength1_closure:
         const Data.OldList.genericLength1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.OldList.genericLength1_entry() //  [R1]
         { info_tbl: [(c5mPs,
                       label: Data.OldList.genericLength1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mPs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mPt; else goto c5mPu;
       c5mPt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mPu: // global
           (_c5mPp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5mPp::I64 == 0) goto c5mPr; else goto c5mPq;
       c5mPr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5mPq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5mPp::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.163948197 UTC

[section ""data" . Data.OldList.strictGenericLength_closure" {
     Data.OldList.strictGenericLength_closure:
         const Data.OldList.strictGenericLength_info;
         const 0;
 },
 lvl12_s5l04_entry() //  [R1]
         { info_tbl: [(c5mPE,
                       label: lvl12_s5l04_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mPE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mPF; else goto c5mPG;
       c5mPF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mPG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l0c_entry() //  [R1]
         { info_tbl: [(c5mPK,
                       label: sat_s5l0c_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mPK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mPL; else goto c5mPM;
       c5mPL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mPM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.OldList.strictGenericLength_entry() //  [R2, R3]
         { info_tbl: [(c5mPP,
                       label: Data.OldList.strictGenericLength_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mPP: // global
           _s5l03::P64 = R3;
           _s5l02::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c5mPQ; else goto c5mPR;
       c5mPR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5mPT; else goto c5mPS;
       c5mPT: // global
           HpAlloc = 48;
           goto c5mPQ;
       c5mPQ: // global
           R3 = _s5l03::P64;
           R2 = _s5l02::P64;
           R1 = Data.OldList.strictGenericLength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mPS: // global
           I64[Hp - 40] = lvl12_s5l04_info;
           P64[Hp - 24] = _s5l02::P64;
           I64[Hp - 16] = sat_s5l0c_info;
           P64[Hp] = _s5l02::P64;
           P64[Sp - 32] = Hp - 40;
           P64[Sp - 24] = _s5l02::P64;
           P64[Sp - 16] = _s5l03::P64;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 32;
           call _c5mPV() args: 0, res: 0, upd: 0;
     }
 },
 _c5mPV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mPV: // global
           I64[Sp - 8] = block_c5mPX_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mQh; else goto c5mPZ;
       u5mQh: // global
           call _c5mPX(R1) args: 0, res: 0, upd: 0;
       c5mPZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mPX() //  [R1]
         { info_tbl: [(c5mPX,
                       label: block_c5mPX_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mPX: // global
           _s5l07::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5mQ5; else goto c5mQa;
       c5mQ5: // global
           R1 = _s5l07::P64;
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5mQa: // global
           I64[Sp] = block_c5mQ8_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s5l07::P64;
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 14];
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5mQ8() //  [R1]
         { info_tbl: [(c5mQ8,
                       label: block_c5mQ8_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mQ8: // global
           P64[Sp + 24] = P64[Sp + 32];
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c5mPV() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.168688225 UTC

[section ""data" . Data.OldList.genericLength_closure" {
     Data.OldList.genericLength_closure:
         const Data.OldList.genericLength_info;
         const 0;
 },
 sat_s5l0j_entry() //  [R1]
         { info_tbl: [(c5mQx,
                       label: sat_s5l0j_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mQx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mQy; else goto c5mQz;
       c5mQy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mQz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.genericLength_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l0i_entry() //  [R1]
         { info_tbl: [(c5mQE,
                       label: sat_s5l0i_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mQE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mQF; else goto c5mQG;
       c5mQF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mQG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.OldList.genericLength_entry() //  [R2, R3]
         { info_tbl: [(c5mQL,
                       label: Data.OldList.genericLength_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mQL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mQM; else goto c5mQN;
       c5mQM: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericLength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mQN: // global
           I64[Sp - 16] = block_c5mQn_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5mQT; else goto c5mQo;
       u5mQT: // global
           call _c5mQn(R1) args: 0, res: 0, upd: 0;
       c5mQo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mQn() //  [R1]
         { info_tbl: [(c5mQn,
                       label: block_c5mQn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mQn: // global
           _s5l0d::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5mQI; else goto c5mQJ;
       c5mQI: // global
           R2 = _s5l0d::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = Data.OldList.genericLength1_closure;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
       c5mQJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5mQS; else goto c5mQR;
       c5mQS: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mQR: // global
           _s5l0h::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s5l0j_info;
           P64[Hp - 32] = _s5l0d::P64;
           P64[Hp - 24] = _s5l0h::P64;
           I64[Hp - 16] = sat_s5l0i_info;
           P64[Hp] = _s5l0d::P64;
           R2 = _s5l0d::P64;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Hp - 16;
           P64[Sp + 8] = Hp - 48;
           Sp = Sp - 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.17367413 UTC

[section ""data" . Data.OldList.genericTake_closure" {
     Data.OldList.genericTake_closure:
         const Data.OldList.genericTake_info;
         const 0;
 },
 $dNum_s5l0o_entry() //  [R1]
         { info_tbl: [(c5mR6,
                       label: $dNum_s5l0o_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mR6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mR7; else goto c5mR8;
       c5mR7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mR8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l0q_entry() //  [R1]
         { info_tbl: [(c5mRd,
                       label: sat_s5l0q_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mRd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mRe; else goto c5mRf;
       c5mRe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mRf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l0v_entry() //  [R1]
         { info_tbl: [(c5mRG,
                       label: sat_s5l0v_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mRG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mRH; else goto c5mRI;
       c5mRH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mRI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l0w_entry() //  [R1]
         { info_tbl: [(c5mRJ,
                       label: sat_s5l0w_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mRJ: // global
           _s5l0w::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5mRK; else goto c5mRL;
       c5mRL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mRN; else goto c5mRM;
       c5mRN: // global
           HpAlloc = 24;
           goto c5mRK;
       c5mRK: // global
           R1 = _s5l0w::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mRM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l0w::P64;
           _s5l0l::P64 = P64[_s5l0w::P64 + 16];
           _s5l0o::P64 = P64[_s5l0w::P64 + 24];
           I64[Hp - 16] = sat_s5l0v_info;
           P64[Hp] = _s5l0o::P64;
           R2 = _s5l0o::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s5l0l::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5l0x_entry() //  [R1]
         { info_tbl: [(c5mRO,
                       label: sat_s5l0x_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mRO: // global
           _s5l0x::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5mRP; else goto c5mRQ;
       c5mRQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5mRS; else goto c5mRR;
       c5mRS: // global
           HpAlloc = 32;
           goto c5mRP;
       c5mRP: // global
           R1 = _s5l0x::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mRR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l0x::P64;
           _s5l0k::P64 = P64[_s5l0x::P64 + 16];
           _s5l0l::P64 = P64[_s5l0x::P64 + 24];
           _s5l0o::P64 = P64[_s5l0x::P64 + 32];
           _s5l0u::P64 = P64[_s5l0x::P64 + 40];
           I64[Hp - 24] = sat_s5l0w_info;
           P64[Hp - 8] = _s5l0l::P64;
           P64[Hp] = _s5l0o::P64;
           R4 = _s5l0u::P64;
           R3 = Hp - 24;
           R2 = _s5l0k::P64;
           Sp = Sp - 16;
           call Data.OldList.genericTake_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.genericTake_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mRT,
                       label: Data.OldList.genericTake_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mRT: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5mRU; else goto c5mRV;
       c5mRU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericTake_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mRV: // global
           I64[Sp - 32] = block_c5mQY_info;
           _s5l0k::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s5l0k::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mQY() //  [R1]
         { info_tbl: [(c5mQY,
                       label: block_c5mQY_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mQY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5mRY; else goto c5mRX;
       c5mRY: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mRX: // global
           I64[Hp - 40] = $dNum_s5l0o_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s5l0q_info;
           _c5mR2::P64 = Hp - 40;
           P64[Hp] = _c5mR2::P64;
           I64[Sp - 16] = block_c5mRg_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = _c5mR2::P64;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mRg() //  [R1]
         { info_tbl: [(c5mRg,
                       label: block_c5mRg_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mRg: // global
           _c5mR9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5mRk_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c5mR9::P64;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5mRk() //  [R1]
         { info_tbl: [(c5mRk,
                       label: block_c5mRk_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mRk: // global
           if (R1 & 7 == 1) goto c5mS2; else goto u5mSi;
       c5mS2: // global
           I64[Sp] = block_c5mRo_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto u5mSk; else goto c5mRp;
       u5mSk: // global
           call _c5mRo(R1) args: 0, res: 0, upd: 0;
       c5mRp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u5mSi: // global
           Sp = Sp + 40;
           call _c5mSf() args: 0, res: 0, upd: 0;
     }
 },
 _c5mRo() //  [R1]
         { info_tbl: [(c5mRo,
                       label: block_c5mRo_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mRo: // global
           if (R1 & 7 == 1) goto u5mSj; else goto c5mS8;
       u5mSj: // global
           Sp = Sp + 40;
           call _c5mSf() args: 0, res: 0, upd: 0;
       c5mS8: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5mSb; else goto c5mSa;
       c5mSb: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mSa: // global
           _s5l0t::P64 = P64[R1 + 6];
           _s5l0u::P64 = P64[R1 + 14];
           I64[Hp - 64] = sat_s5l0x_info;
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s5l0u::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l0t::P64;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5mSf() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mSf: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.178023599 UTC

[section ""data" . Data.OldList.genericReplicate_closure" {
     Data.OldList.genericReplicate_closure:
         const Data.OldList.genericReplicate_info;
         const 0;
 },
 sat_s5l0B_entry() //  [R1]
         { info_tbl: [(c5mSv,
                       label: sat_s5l0B_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mSv: // global
           R2 = P64[R1 + 16];
           call GHC.List.repeat_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.genericReplicate_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mSy,
                       label: Data.OldList.genericReplicate_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mSy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mSC; else goto c5mSB;
       c5mSC: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericReplicate_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mSB: // global
           I64[Hp - 16] = sat_s5l0B_info;
           P64[Hp] = R4;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           call Data.OldList.genericTake_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.180482271 UTC

[section ""data" . Data.OldList.genericDrop_closure" {
     Data.OldList.genericDrop_closure:
         const Data.OldList.genericDrop_info;
         const 0;
 },
 $dNum_s5l0G_entry() //  [R1]
         { info_tbl: [(c5mT6,
                       label: $dNum_s5l0G_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mT6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mT7; else goto c5mT8;
       c5mT7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mT8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l0I_entry() //  [R1]
         { info_tbl: [(c5mTb,
                       label: sat_s5l0I_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mTb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mTc; else goto c5mTd;
       c5mTc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mTd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l0N_entry() //  [R1]
         { info_tbl: [(c5mTl,
                       label: sat_s5l0N_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mTl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mTm; else goto c5mTn;
       c5mTm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mTn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l0O_entry() //  [R1]
         { info_tbl: [(c5mTo,
                       label: sat_s5l0O_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mTo: // global
           _s5l0O::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5mTp; else goto c5mTq;
       c5mTq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mTs; else goto c5mTr;
       c5mTs: // global
           HpAlloc = 24;
           goto c5mTp;
       c5mTp: // global
           R1 = _s5l0O::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mTr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l0O::P64;
           _s5l0D::P64 = P64[_s5l0O::P64 + 16];
           _s5l0G::P64 = P64[_s5l0O::P64 + 24];
           I64[Hp - 16] = sat_s5l0N_info;
           P64[Hp] = _s5l0G::P64;
           R2 = _s5l0G::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s5l0D::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 Data.OldList.genericDrop_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mTt,
                       label: Data.OldList.genericDrop_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mTt: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5mTu; else goto u5mTR;
       c5mTu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericDrop_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5mTR: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5mSE() args: 0, res: 0, upd: 0;
     }
 },
 _c5mSE() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mSE: // global
           I64[Sp - 8] = block_c5mSH_info;
           R2 = P64[Sp];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mSH() //  [R1]
         { info_tbl: [(c5mSH,
                       label: block_c5mSH_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mSH: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5mTy; else goto c5mTx;
       c5mTy: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mTx: // global
           I64[Hp - 40] = $dNum_s5l0G_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s5l0I_info;
           _c5mSL::P64 = Hp - 40;
           P64[Hp] = _c5mSL::P64;
           I64[Sp - 16] = block_c5mSP_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = _c5mSL::P64;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mSP() //  [R1]
         { info_tbl: [(c5mSP,
                       label: block_c5mSP_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mSP: // global
           _c5mSN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5mST_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c5mSN::P64;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5mST() //  [R1]
         { info_tbl: [(c5mST,
                       label: block_c5mST_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mST: // global
           _s5l0E::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5mTC; else goto c5mTO;
       c5mTC: // global
           I64[Sp] = block_c5mSX_info;
           R1 = _s5l0E::P64;
           if (R1 & 7 != 0) goto u5mTT; else goto c5mSY;
       u5mTT: // global
           call _c5mSX(R1) args: 0, res: 0, upd: 0;
       c5mSY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5mTO: // global
           R1 = _s5l0E::P64 & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5mSX() //  [R1]
         { info_tbl: [(c5mSX,
                       label: block_c5mSX_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mSX: // global
           if (R1 & 7 == 1) goto c5mTG; else goto c5mTH;
       c5mTG: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5mTH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5mTK; else goto c5mTJ;
       c5mTK: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mTJ: // global
           _s5l0M::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_s5l0O_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 32] = _s5l0M::P64;
           Sp = Sp + 16;
           call _c5mSE() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.186282955 UTC

[section ""data" . Data.OldList.$wgenericSplitAt_closure" {
     Data.OldList.$wgenericSplitAt_closure:
         const Data.OldList.$wgenericSplitAt_info;
         const 0;
 },
 $dNum_s5l0T_entry() //  [R1]
         { info_tbl: [(c5mU8,
                       label: $dNum_s5l0T_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mU8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mU9; else goto c5mUa;
       c5mU9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mUa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l0V_entry() //  [R1]
         { info_tbl: [(c5mUf,
                       label: sat_s5l0V_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mUf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mUg; else goto c5mUh;
       c5mUg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mUh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l11_entry() //  [R1]
         { info_tbl: [(c5mUI,
                       label: sat_s5l11_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mUI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mUJ; else goto c5mUK;
       c5mUJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mUK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l12_entry() //  [R1]
         { info_tbl: [(c5mUL,
                       label: sat_s5l12_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mUL: // global
           _s5l12::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5mUM; else goto c5mUN;
       c5mUN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mUP; else goto c5mUO;
       c5mUP: // global
           HpAlloc = 24;
           goto c5mUM;
       c5mUM: // global
           R1 = _s5l12::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mUO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l12::P64;
           _s5l0Q::P64 = P64[_s5l12::P64 + 16];
           _s5l0T::P64 = P64[_s5l12::P64 + 24];
           I64[Hp - 16] = sat_s5l11_info;
           P64[Hp] = _s5l0T::P64;
           R2 = _s5l0T::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s5l0Q::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 ds_s5l10_entry() //  [R1]
         { info_tbl: [(c5mUT,
                       label: ds_s5l10_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mUT: // global
           _s5l10::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5mUU; else goto c5mUV;
       c5mUV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5mUX; else goto c5mUW;
       c5mUX: // global
           HpAlloc = 32;
           goto c5mUU;
       c5mUU: // global
           R1 = _s5l10::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mUW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l10::P64;
           _s5l0P::P64 = P64[_s5l10::P64 + 16];
           _s5l0Q::P64 = P64[_s5l10::P64 + 24];
           _s5l0T::P64 = P64[_s5l10::P64 + 32];
           _s5l0Z::P64 = P64[_s5l10::P64 + 40];
           I64[Hp - 24] = sat_s5l12_info;
           P64[Hp - 8] = _s5l0Q::P64;
           P64[Hp] = _s5l0T::P64;
           I64[Sp - 24] = block_c5mUQ_info;
           R4 = _s5l0Z::P64;
           R3 = Hp - 24;
           R2 = _s5l0P::P64;
           Sp = Sp - 24;
           call Data.OldList.$wgenericSplitAt_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5mUQ() //  [R1, R2]
         { info_tbl: [(c5mUQ,
                       label: block_c5mUQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mUQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mV0; else goto c5mUZ;
       c5mV0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5mUZ: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wgenericSplitAt_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mV1,
                       label: Data.OldList.$wgenericSplitAt_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mV1: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5mV2; else goto c5mV3;
       c5mV2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$wgenericSplitAt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mV3: // global
           I64[Sp - 32] = block_c5mU0_info;
           _s5l0P::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s5l0P::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mU0() //  [R1]
         { info_tbl: [(c5mU0,
                       label: block_c5mU0_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mU0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5mV6; else goto c5mV5;
       c5mV6: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mV5: // global
           I64[Hp - 40] = $dNum_s5l0T_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s5l0V_info;
           _c5mU4::P64 = Hp - 40;
           P64[Hp] = _c5mU4::P64;
           I64[Sp - 16] = block_c5mUi_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = _c5mU4::P64;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mUi() //  [R1]
         { info_tbl: [(c5mUi,
                       label: block_c5mUi_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mUi: // global
           _c5mUb::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5mUm_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c5mUb::P64;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5mUm() //  [R1]
         { info_tbl: [(c5mUm,
                       label: block_c5mUm_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mUm: // global
           _s5l0R::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5mVa; else goto c5mVp;
       c5mVa: // global
           I64[Sp] = block_c5mUq_info;
           R1 = _s5l0R::P64;
           if (R1 & 7 != 0) goto u5mVs; else goto c5mUr;
       u5mVs: // global
           call _c5mUq(R1) args: 0, res: 0, upd: 0;
       c5mUr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5mVp: // global
           R2 = _s5l0R::P64;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5mUq() //  [R1]
         { info_tbl: [(c5mUq,
                       label: block_c5mUq_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mUq: // global
           if (R1 & 7 == 1) goto c5mVe; else goto c5mVi;
       c5mVe: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5mVi: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c5mVl; else goto c5mVk;
       c5mVl: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mVk: // global
           _s5l0Y::P64 = P64[R1 + 6];
           _s5l0Z::P64 = P64[R1 + 14];
           I64[Hp - 112] = ds_s5l10_info;
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = _s5l0Z::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c5mUw::P64 = Hp - 112;
           P64[Hp - 48] = _c5mUw::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5mUw::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l0Y::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.190939179 UTC

[section ""data" . Data.OldList.genericSplitAt_closure" {
     Data.OldList.genericSplitAt_closure:
         const Data.OldList.genericSplitAt_info;
         const 0;
 },
 Data.OldList.genericSplitAt_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mVA,
                       label: Data.OldList.genericSplitAt_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mVA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5mVB; else goto c5mVC;
       c5mVB: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericSplitAt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mVC: // global
           I64[Sp - 8] = block_c5mVx_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wgenericSplitAt_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mVx() //  [R1, R2]
         { info_tbl: [(c5mVx,
                       label: block_c5mVx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mVx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mVF; else goto c5mVE;
       c5mVF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5mVE: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.19214061 UTC

[section ""cstring" . lvl2_r5kSj_bytes" {
     lvl2_r5kSj_bytes:
         I8[] [76,105,115,116,46,103,101,110,101,114,105,99,73,110,100,101,120,58,32,110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116,46]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.192979815 UTC

[section ""data" . lvl3_r5kSk_closure" {
     lvl3_r5kSk_closure:
         const lvl3_r5kSk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r5kSk_entry() //  [R1]
         { info_tbl: [(c5mVO,
                       label: lvl3_r5kSk_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mVO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mVP; else goto c5mVQ;
       c5mVP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mVQ: // global
           (_c5mVJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5mVJ::I64 == 0) goto c5mVL; else goto c5mVK;
       c5mVL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5mVK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5mVJ::I64;
           I64[Sp - 24] = block_c5mVM_info;
           R2 = lvl2_r5kSj_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5mVM() //  [R1]
         { info_tbl: [(c5mVM,
                       label: block_c5mVM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mVM: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.194130849 UTC

[section ""cstring" . lvl4_r5kSl_bytes" {
     lvl4_r5kSl_bytes:
         I8[] [76,105,115,116,46,103,101,110,101,114,105,99,73,110,100,101,120,58,32,105,110,100,101,120,32,116,111,111,32,108,97,114,103,101,46]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.194979029 UTC

[section ""data" . lvl5_r5kSm_closure" {
     lvl5_r5kSm_closure:
         const lvl5_r5kSm_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r5kSm_entry() //  [R1]
         { info_tbl: [(c5mW2,
                       label: lvl5_r5kSm_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mW2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mW3; else goto c5mW4;
       c5mW3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mW4: // global
           (_c5mVX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5mVX::I64 == 0) goto c5mVZ; else goto c5mVY;
       c5mVZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5mVY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5mVX::I64;
           I64[Sp - 24] = block_c5mW0_info;
           R2 = lvl4_r5kSl_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5mW0() //  [R1]
         { info_tbl: [(c5mW0,
                       label: block_c5mW0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mW0: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.19795757 UTC

[section ""data" . Data.OldList.genericIndex_closure" {
     Data.OldList.genericIndex_closure:
         const Data.OldList.genericIndex_info;
         const 0;
 },
 $dNum_s5l1u_entry() //  [R1]
         { info_tbl: [(c5mWM,
                       label: $dNum_s5l1u_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mWM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mWN; else goto c5mWO;
       c5mWN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mWO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l1x_entry() //  [R1]
         { info_tbl: [(c5mWR,
                       label: sat_s5l1x_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mWR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mWS; else goto c5mWT;
       c5mWS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mWT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l1z_entry() //  [R1]
         { info_tbl: [(c5mWW,
                       label: sat_s5l1z_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mWW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mWX; else goto c5mWY;
       c5mWX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mWY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l1B_entry() //  [R1]
         { info_tbl: [(c5mX6,
                       label: sat_s5l1B_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mX6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5mX7; else goto c5mX8;
       c5mX7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mX8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l1C_entry() //  [R1]
         { info_tbl: [(c5mX9,
                       label: sat_s5l1C_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mX9: // global
           _s5l1C::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5mXa; else goto c5mXb;
       c5mXb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mXd; else goto c5mXc;
       c5mXd: // global
           HpAlloc = 24;
           goto c5mXa;
       c5mXa: // global
           R1 = _s5l1C::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mXc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l1C::P64;
           _s5l1p::P64 = P64[_s5l1C::P64 + 16];
           _s5l1u::P64 = P64[_s5l1C::P64 + 24];
           I64[Hp - 16] = sat_s5l1B_info;
           P64[Hp] = _s5l1u::P64;
           R2 = _s5l1u::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s5l1p::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 Data.OldList.genericIndex_entry() //  [R2, R3, R4]
         { info_tbl: [(c5mXi,
                       label: Data.OldList.genericIndex_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mXi: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c5mXj; else goto u5mXO;
       c5mXj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericIndex_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5mXO: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5mW9() args: 0, res: 0, upd: 0;
     }
 },
 _c5mW9() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mW9: // global
           I64[Sp - 8] = block_c5mWc_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mXQ; else goto c5mWd;
       u5mXQ: // global
           call _c5mWc(R1) args: 0, res: 0, upd: 0;
       c5mWd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mWc() //  [R1]
         { info_tbl: [(c5mWc,
                       label: block_c5mWc_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mWc: // global
           if (R1 & 7 == 1) goto c5mXf; else goto c5mXg;
       c5mXf: // global
           R1 = lvl5_r5kSm_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5mXg: // global
           I64[Sp - 8] = block_c5mWi_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 16] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mWi() //  [R1]
         { info_tbl: [(c5mWi,
                       label: block_c5mWi_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mWi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mXq; else goto c5mXp;
       c5mXq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mXp: // global
           I64[Hp - 16] = $dNum_s5l1u_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c5mWo_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mWo() //  [R1]
         { info_tbl: [(c5mWo,
                       label: block_c5mWo_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mWo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mXt; else goto c5mXs;
       c5mXt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mXs: // global
           I64[Hp - 16] = sat_s5l1x_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 16] = block_c5mWu_info;
           R2 = R1;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5mWu() //  [R1]
         { info_tbl: [(c5mWu,
                       label: block_c5mWu_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mWu: // global
           I64[Sp] = block_c5mWy_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 56];
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5mWy() //  [R1]
         { info_tbl: [(c5mWy,
                       label: block_c5mWy_info
                       rep:StackRep [False, True, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mWy: // global
           if (R1 & 7 == 1) goto c5mXw; else goto c5mXL;
       c5mXw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5mXz; else goto c5mXy;
       c5mXz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mXy: // global
           I64[Hp - 16] = sat_s5l1z_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 16] = block_c5mWE_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 56];
           P64[Sp + 8] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Classes.>_entry(R2) args: 32, res: 8, upd: 8;
       c5mXL: // global
           R1 = P64[Sp + 48];
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5mWE() //  [R1]
         { info_tbl: [(c5mWE,
                       label: block_c5mWE_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mWE: // global
           if (R1 & 7 == 1) goto c5mXD; else goto c5mXE;
       c5mXD: // global
           R1 = lvl3_r5kSk_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5mXE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5mXH; else goto c5mXG;
       c5mXH: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mXG: // global
           I64[Hp - 24] = sat_s5l1C_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 8];
           P64[Sp + 24] = P64[Sp + 24];
           P64[Sp + 32] = P64[Sp + 16];
           P64[Sp + 40] = Hp - 24;
           Sp = Sp + 24;
           call _c5mW9() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.207445952 UTC

[section ""data" . Data.OldList.zipWith4_closure" {
     Data.OldList.zipWith4_closure:
         const Data.OldList.zipWith4_info;
 },
 sat_s5l1V_entry() //  [R1]
         { info_tbl: [(c5mYp,
                       label: sat_s5l1V_info
                       rep:HeapRep 5 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mYp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5mYq; else goto c5mYr;
       c5mYq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mYr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.zipWith4_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.zipWith4_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5mYw,
                       label: Data.OldList.zipWith4_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mYw: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5mYx; else goto c5mYy;
       c5mYx: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.zipWith4_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5mYy: // global
           I64[Sp - 40] = block_c5mXX_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u5mZc; else goto c5mXY;
       u5mZc: // global
           call _c5mXX(R1) args: 0, res: 0, upd: 0;
       c5mXY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mXX() //  [R1]
         { info_tbl: [(c5mXX,
                       label: block_c5mXX_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mXX: // global
           if (R1 & 7 == 1) goto u5mZ1; else goto c5mYu;
       u5mZ1: // global
           Sp = Sp + 40;
           call _c5mYR() args: 0, res: 0, upd: 0;
       c5mYu: // global
           I64[Sp - 8] = block_c5mY3_info;
           _s5l1J::P64 = P64[R1 + 6];
           _s5l1K::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _s5l1K::P64;
           P64[Sp + 16] = _s5l1J::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mZ5; else goto c5mY4;
       u5mZ5: // global
           call _c5mY3(R1) args: 0, res: 0, upd: 0;
       c5mY4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mY3() //  [R1]
         { info_tbl: [(c5mY3,
                       label: block_c5mY3_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mY3: // global
           if (R1 & 7 == 1) goto u5mZ2; else goto c5mYH;
       u5mZ2: // global
           Sp = Sp + 48;
           call _c5mYR() args: 0, res: 0, upd: 0;
       c5mYH: // global
           I64[Sp - 8] = block_c5mY9_info;
           _s5l1M::P64 = P64[R1 + 6];
           _s5l1N::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _s5l1N::P64;
           P64[Sp + 32] = _s5l1M::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mZ7; else goto c5mYa;
       u5mZ7: // global
           call _c5mY9(R1) args: 0, res: 0, upd: 0;
       c5mYa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mY9() //  [R1]
         { info_tbl: [(c5mY9,
                       label: block_c5mY9_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mY9: // global
           if (R1 & 7 == 1) goto u5mZ3; else goto c5mYN;
       u5mZ3: // global
           Sp = Sp + 56;
           call _c5mYR() args: 0, res: 0, upd: 0;
       c5mYN: // global
           I64[Sp - 8] = block_c5mYf_info;
           _s5l1P::P64 = P64[R1 + 6];
           _s5l1Q::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5l1Q::P64;
           P64[Sp + 48] = _s5l1P::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5mZ9; else goto c5mYg;
       u5mZ9: // global
           call _c5mYf(R1) args: 0, res: 0, upd: 0;
       c5mYg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mYf() //  [R1]
         { info_tbl: [(c5mYf,
                       label: block_c5mYf_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mYf: // global
           if (R1 & 7 == 1) goto u5mZ4; else goto c5mYU;
       u5mZ4: // global
           Sp = Sp + 64;
           call _c5mYR() args: 0, res: 0, upd: 0;
       c5mYU: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c5mYX; else goto c5mYW;
       c5mYX: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5mYW: // global
           _s5l1S::P64 = P64[R1 + 6];
           _s5l1T::P64 = P64[R1 + 14];
           I64[Hp - 128] = sat_s5l1V_info;
           _s5l1D::P64 = P64[Sp + 32];
           P64[Hp - 112] = _s5l1D::P64;
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = P64[Sp + 8];
           P64[Hp - 80] = _s5l1T::P64;
           I64[Hp - 72] = stg_ap_5_upd_info;
           P64[Hp - 56] = _s5l1D::P64;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = _s5l1S::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5mYR() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mYR: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.212074759 UTC

[section ""data" . Data.OldList.zip4_closure" {
     Data.OldList.zip4_closure:
         const Data.OldList.zip4_info;
 },
 Data.OldList.zip4_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5mZh,
                       label: Data.OldList.zip4_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mZh: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Tuple.(,,,)_closure+4;
           call Data.OldList.zipWith4_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.21750076 UTC

[section ""data" . Data.OldList.zipWith5_closure" {
     Data.OldList.zipWith5_closure:
         const Data.OldList.zipWith5_info;
 },
 sat_s5l2i_entry() //  [R1]
         { info_tbl: [(c5mZW,
                       label: sat_s5l2i_info
                       rep:HeapRep 6 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mZW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5mZX; else goto c5mZY;
       c5mZX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5mZY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 24;
           call Data.OldList.zipWith5_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 32, res: 0, upd: 24;
     }
 },
 Data.OldList.zipWith5_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5n03,
                       label: Data.OldList.zipWith5_info
                       rep:HeapRep static { Fun {arity: 6 fun_type: ArgSpec 26} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n03: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c5n04; else goto c5n05;
       c5n04: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.zipWith5_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c5n05: // global
           I64[Sp - 40] = block_c5mZo_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u5n0T; else goto c5mZp;
       u5n0T: // global
           call _c5mZo(R1) args: 0, res: 0, upd: 0;
       c5mZp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mZo() //  [R1]
         { info_tbl: [(c5mZo,
                       label: block_c5mZo_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mZo: // global
           if (R1 & 7 == 1) goto u5n0F; else goto c5n01;
       u5n0F: // global
           Sp = Sp + 48;
           call _c5n0u() args: 0, res: 0, upd: 0;
       c5n01: // global
           I64[Sp - 8] = block_c5mZu_info;
           _s5l23::P64 = P64[R1 + 6];
           _s5l24::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _s5l24::P64;
           P64[Sp + 16] = _s5l23::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n0K; else goto c5mZv;
       u5n0K: // global
           call _c5mZu(R1) args: 0, res: 0, upd: 0;
       c5mZv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mZu() //  [R1]
         { info_tbl: [(c5mZu,
                       label: block_c5mZu_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mZu: // global
           if (R1 & 7 == 1) goto u5n0G; else goto c5n0e;
       u5n0G: // global
           Sp = Sp + 56;
           call _c5n0u() args: 0, res: 0, upd: 0;
       c5n0e: // global
           I64[Sp - 8] = block_c5mZA_info;
           _s5l26::P64 = P64[R1 + 6];
           _s5l27::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _s5l27::P64;
           P64[Sp + 32] = _s5l26::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n0M; else goto c5mZB;
       u5n0M: // global
           call _c5mZA(R1) args: 0, res: 0, upd: 0;
       c5mZB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mZA() //  [R1]
         { info_tbl: [(c5mZA,
                       label: block_c5mZA_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mZA: // global
           if (R1 & 7 == 1) goto u5n0H; else goto c5n0k;
       u5n0H: // global
           Sp = Sp + 64;
           call _c5n0u() args: 0, res: 0, upd: 0;
       c5n0k: // global
           I64[Sp - 8] = block_c5mZG_info;
           _s5l29::P64 = P64[R1 + 6];
           _s5l2a::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5l2a::P64;
           P64[Sp + 48] = _s5l29::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n0O; else goto c5mZH;
       u5n0O: // global
           call _c5mZG(R1) args: 0, res: 0, upd: 0;
       c5mZH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mZG() //  [R1]
         { info_tbl: [(c5mZG,
                       label: block_c5mZG_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mZG: // global
           if (R1 & 7 == 1) goto u5n0I; else goto c5n0q;
       u5n0I: // global
           Sp = Sp + 72;
           call _c5n0u() args: 0, res: 0, upd: 0;
       c5n0q: // global
           I64[Sp - 8] = block_c5mZM_info;
           _s5l2c::P64 = P64[R1 + 6];
           _s5l2d::P64 = P64[R1 + 14];
           R1 = P64[Sp + 64];
           P64[Sp] = _s5l2d::P64;
           P64[Sp + 64] = _s5l2c::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n0Q; else goto c5mZN;
       u5n0Q: // global
           call _c5mZM(R1) args: 0, res: 0, upd: 0;
       c5mZN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5mZM() //  [R1]
         { info_tbl: [(c5mZM,
                       label: block_c5mZM_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5mZM: // global
           if (R1 & 7 == 1) goto u5n0J; else goto c5n0x;
       u5n0J: // global
           Sp = Sp + 80;
           call _c5n0u() args: 0, res: 0, upd: 0;
       c5n0x: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c5n0A; else goto c5n0z;
       c5n0A: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5n0z: // global
           _s5l2f::P64 = P64[R1 + 6];
           _s5l2g::P64 = P64[R1 + 14];
           I64[Hp - 144] = sat_s5l2i_info;
           _s5l1W::P64 = P64[Sp + 40];
           P64[Hp - 128] = _s5l1W::P64;
           P64[Hp - 120] = P64[Sp + 32];
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 8];
           P64[Hp - 88] = _s5l2g::P64;
           I64[Hp - 80] = stg_ap_6_upd_info;
           P64[Hp - 64] = _s5l1W::P64;
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 72];
           P64[Hp - 24] = _s5l2f::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 144;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5n0u() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n0u: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.22301426 UTC

[section ""data" . Data.OldList.zip5_closure" {
     Data.OldList.zip5_closure:
         const Data.OldList.zip5_info;
 },
 Data.OldList.zip5_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5n0Y,
                       label: Data.OldList.zip5_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n0Y: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5n0Z; else goto c5n10;
       c5n0Z: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.zip5_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5n10: // global
           _B1::P64 = R6;
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Tuple.(,,,,)_closure+5;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.OldList.zipWith5_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 16, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.226798663 UTC

[section ""data" . Data.OldList.zipWith6_closure" {
     Data.OldList.zipWith6_closure:
         const Data.OldList.zipWith6_info;
 },
 Data.OldList.zipWith6_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n12: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.OldList.zipWith6_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s5l2J_entry() //  [R1]
         { info_tbl: [(c5n1K,
                       label: sat_s5l2J_info
                       rep:HeapRep 7 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n1K: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5n1L; else goto c5n1M;
       c5n1L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5n1M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 56];
           P64[Sp - 24] = P64[R1 + 64];
           Sp = Sp - 32;
           call Data.OldList.zipWith6_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.OldList.zipWith6_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5n1R,
                       label: Data.OldList.zipWith6_info
                       rep:HeapRep static {
                             Fun {arity: 7
                                  fun_type: ArgGen [False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n1R: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c5n1S; else goto c5n1T;
       c5n1S: // global
           R1 = Data.OldList.zipWith6_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c5n1T: // global
           I64[Sp - 40] = block_c5n16_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u5n2R; else goto c5n17;
       u5n2R: // global
           call _c5n16(R1) args: 0, res: 0, upd: 0;
       c5n17: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n16() //  [R1]
         { info_tbl: [(c5n16,
                       label: block_c5n16_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n16: // global
           if (R1 & 7 == 1) goto u5n2A; else goto c5n1P;
       u5n2A: // global
           Sp = Sp + 56;
           call _c5n2o() args: 0, res: 0, upd: 0;
       c5n1P: // global
           I64[Sp - 8] = block_c5n1c_info;
           _s5l2r::P64 = P64[R1 + 6];
           _s5l2s::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _s5l2s::P64;
           P64[Sp + 16] = _s5l2r::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n2G; else goto c5n1d;
       u5n2G: // global
           call _c5n1c(R1) args: 0, res: 0, upd: 0;
       c5n1d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n1c() //  [R1]
         { info_tbl: [(c5n1c,
                       label: block_c5n1c_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n1c: // global
           if (R1 & 7 == 1) goto u5n2B; else goto c5n22;
       u5n2B: // global
           Sp = Sp + 64;
           call _c5n2o() args: 0, res: 0, upd: 0;
       c5n22: // global
           I64[Sp - 8] = block_c5n1i_info;
           _s5l2u::P64 = P64[R1 + 6];
           _s5l2v::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _s5l2v::P64;
           P64[Sp + 32] = _s5l2u::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n2I; else goto c5n1j;
       u5n2I: // global
           call _c5n1i(R1) args: 0, res: 0, upd: 0;
       c5n1j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n1i() //  [R1]
         { info_tbl: [(c5n1i,
                       label: block_c5n1i_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n1i: // global
           if (R1 & 7 == 1) goto u5n2C; else goto c5n28;
       u5n2C: // global
           Sp = Sp + 72;
           call _c5n2o() args: 0, res: 0, upd: 0;
       c5n28: // global
           I64[Sp - 8] = block_c5n1o_info;
           _s5l2x::P64 = P64[R1 + 6];
           _s5l2y::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5l2y::P64;
           P64[Sp + 48] = _s5l2x::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n2K; else goto c5n1p;
       u5n2K: // global
           call _c5n1o(R1) args: 0, res: 0, upd: 0;
       c5n1p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n1o() //  [R1]
         { info_tbl: [(c5n1o,
                       label: block_c5n1o_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n1o: // global
           if (R1 & 7 == 1) goto u5n2D; else goto c5n2e;
       u5n2D: // global
           Sp = Sp + 80;
           call _c5n2o() args: 0, res: 0, upd: 0;
       c5n2e: // global
           I64[Sp - 8] = block_c5n1u_info;
           _s5l2A::P64 = P64[R1 + 6];
           _s5l2B::P64 = P64[R1 + 14];
           R1 = P64[Sp + 64];
           P64[Sp] = _s5l2B::P64;
           P64[Sp + 64] = _s5l2A::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n2M; else goto c5n1v;
       u5n2M: // global
           call _c5n1u(R1) args: 0, res: 0, upd: 0;
       c5n1v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n1u() //  [R1]
         { info_tbl: [(c5n1u,
                       label: block_c5n1u_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n1u: // global
           if (R1 & 7 == 1) goto u5n2E; else goto c5n2k;
       u5n2E: // global
           Sp = Sp + 88;
           call _c5n2o() args: 0, res: 0, upd: 0;
       c5n2k: // global
           I64[Sp - 8] = block_c5n1A_info;
           _s5l2D::P64 = P64[R1 + 6];
           _s5l2E::P64 = P64[R1 + 14];
           R1 = P64[Sp + 80];
           P64[Sp] = _s5l2E::P64;
           P64[Sp + 80] = _s5l2D::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n2O; else goto c5n1B;
       u5n2O: // global
           call _c5n1A(R1) args: 0, res: 0, upd: 0;
       c5n1B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n1A() //  [R1]
         { info_tbl: [(c5n1A,
                       label: block_c5n1A_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n1A: // global
           if (R1 & 7 == 1) goto u5n2F; else goto c5n2r;
       u5n2F: // global
           Sp = Sp + 96;
           call _c5n2o() args: 0, res: 0, upd: 0;
       c5n2r: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c5n2u; else goto c5n2t;
       c5n2u: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5n2t: // global
           _s5l2G::P64 = P64[R1 + 6];
           _s5l2H::P64 = P64[R1 + 14];
           I64[Hp - 160] = sat_s5l2J_info;
           _s5l2j::P64 = P64[Sp + 48];
           P64[Hp - 144] = _s5l2j::P64;
           P64[Hp - 136] = P64[Sp + 40];
           P64[Hp - 128] = P64[Sp + 32];
           P64[Hp - 120] = P64[Sp + 24];
           P64[Hp - 112] = P64[Sp + 16];
           P64[Hp - 104] = P64[Sp + 8];
           P64[Hp - 96] = _s5l2H::P64;
           I64[Hp - 88] = stg_ap_7_upd_info;
           P64[Hp - 72] = _s5l2j::P64;
           P64[Hp - 64] = P64[Sp + 56];
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = P64[Sp + 80];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = _s5l2G::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 88;
           P64[Hp] = Hp - 160;
           R1 = Hp - 14;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5n2o() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n2o: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.233976559 UTC

[section ""data" . Data.OldList.zip6_closure" {
     Data.OldList.zip6_closure:
         const Data.OldList.zip6_info;
 },
 Data.OldList.zip6_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5n2W,
                       label: Data.OldList.zip6_info
                       rep:HeapRep static { Fun {arity: 6 fun_type: ArgSpec 26} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n2W: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5n2X; else goto c5n2Y;
       c5n2X: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.zip6_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c5n2Y: // global
           _B2::P64 = R6;
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Tuple.(,,,,,)_closure+6;
           P64[Sp - 8] = _B2::P64;
           Sp = Sp - 8;
           call Data.OldList.zipWith6_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.238906135 UTC

[section ""data" . Data.OldList.zipWith7_closure" {
     Data.OldList.zipWith7_closure:
         const Data.OldList.zipWith7_info;
 },
 Data.OldList.zipWith7_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n30: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.OldList.zipWith7_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s5l3e_entry() //  [R1]
         { info_tbl: [(c5n3O,
                       label: sat_s5l3e_info
                       rep:HeapRep 8 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n3O: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5n3P; else goto c5n3Q;
       c5n3P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5n3Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 56];
           P64[Sp - 32] = P64[R1 + 64];
           P64[Sp - 24] = P64[R1 + 72];
           Sp = Sp - 40;
           call Data.OldList.zipWith7_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5l3d_entry() //  [R1]
         { info_tbl: [(c5n3V,
                       label: sat_s5l3d_info
                       rep:HeapRep 8 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n3V: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5n3W; else goto c5n3X;
       c5n3W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5n3X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 56];
           R5 = P64[R1 + 48];
           R4 = P64[R1 + 40];
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 24];
           _s5l38::P64 = P64[R1 + 64];
           _s5l3b::P64 = P64[R1 + 72];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s5l38::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = _s5l3b::P64;
           Sp = Sp - 40;
           call stg_ap_pppppp_fast(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 48, res: 0, upd: 24;
     }
 },
 Data.OldList.zipWith7_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5n42,
                       label: Data.OldList.zipWith7_info
                       rep:HeapRep static {
                             Fun {arity: 8
                                  fun_type: ArgGen [False, False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n42: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c5n43; else goto c5n44;
       c5n43: // global
           R1 = Data.OldList.zipWith7_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c5n44: // global
           I64[Sp - 40] = block_c5n34_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u5n5b; else goto c5n35;
       u5n5b: // global
           call _c5n34(R1) args: 0, res: 0, upd: 0;
       c5n35: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n34() //  [R1]
         { info_tbl: [(c5n34,
                       label: block_c5n34_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n34: // global
           if (R1 & 7 == 1) goto u5n4R; else goto c5n40;
       u5n4R: // global
           Sp = Sp + 64;
           call _c5n4F() args: 0, res: 0, upd: 0;
       c5n40: // global
           I64[Sp - 8] = block_c5n3a_info;
           _s5l2T::P64 = P64[R1 + 6];
           _s5l2U::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _s5l2U::P64;
           P64[Sp + 16] = _s5l2T::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n4Y; else goto c5n3b;
       u5n4Y: // global
           call _c5n3a(R1) args: 0, res: 0, upd: 0;
       c5n3b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n3a() //  [R1]
         { info_tbl: [(c5n3a,
                       label: block_c5n3a_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n3a: // global
           if (R1 & 7 == 1) goto u5n4S; else goto c5n4d;
       u5n4S: // global
           Sp = Sp + 72;
           call _c5n4F() args: 0, res: 0, upd: 0;
       c5n4d: // global
           I64[Sp - 8] = block_c5n3g_info;
           _s5l2W::P64 = P64[R1 + 6];
           _s5l2X::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _s5l2X::P64;
           P64[Sp + 32] = _s5l2W::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n50; else goto c5n3h;
       u5n50: // global
           call _c5n3g(R1) args: 0, res: 0, upd: 0;
       c5n3h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n3g() //  [R1]
         { info_tbl: [(c5n3g,
                       label: block_c5n3g_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n3g: // global
           if (R1 & 7 == 1) goto u5n4T; else goto c5n4j;
       u5n4T: // global
           Sp = Sp + 80;
           call _c5n4F() args: 0, res: 0, upd: 0;
       c5n4j: // global
           I64[Sp - 8] = block_c5n3m_info;
           _s5l2Z::P64 = P64[R1 + 6];
           _s5l30::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5l30::P64;
           P64[Sp + 48] = _s5l2Z::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n52; else goto c5n3n;
       u5n52: // global
           call _c5n3m(R1) args: 0, res: 0, upd: 0;
       c5n3n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n3m() //  [R1]
         { info_tbl: [(c5n3m,
                       label: block_c5n3m_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n3m: // global
           if (R1 & 7 == 1) goto u5n4U; else goto c5n4p;
       u5n4U: // global
           Sp = Sp + 88;
           call _c5n4F() args: 0, res: 0, upd: 0;
       c5n4p: // global
           I64[Sp - 8] = block_c5n3s_info;
           _s5l32::P64 = P64[R1 + 6];
           _s5l33::P64 = P64[R1 + 14];
           R1 = P64[Sp + 64];
           P64[Sp] = _s5l33::P64;
           P64[Sp + 64] = _s5l32::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n54; else goto c5n3t;
       u5n54: // global
           call _c5n3s(R1) args: 0, res: 0, upd: 0;
       c5n3t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n3s() //  [R1]
         { info_tbl: [(c5n3s,
                       label: block_c5n3s_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n3s: // global
           if (R1 & 7 == 1) goto u5n4V; else goto c5n4v;
       u5n4V: // global
           Sp = Sp + 96;
           call _c5n4F() args: 0, res: 0, upd: 0;
       c5n4v: // global
           I64[Sp - 8] = block_c5n3y_info;
           _s5l35::P64 = P64[R1 + 6];
           _s5l36::P64 = P64[R1 + 14];
           R1 = P64[Sp + 80];
           P64[Sp] = _s5l36::P64;
           P64[Sp + 80] = _s5l35::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n56; else goto c5n3z;
       u5n56: // global
           call _c5n3y(R1) args: 0, res: 0, upd: 0;
       c5n3z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n3y() //  [R1]
         { info_tbl: [(c5n3y,
                       label: block_c5n3y_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n3y: // global
           if (R1 & 7 == 1) goto u5n4W; else goto c5n4B;
       u5n4W: // global
           Sp = Sp + 104;
           call _c5n4F() args: 0, res: 0, upd: 0;
       c5n4B: // global
           I64[Sp - 8] = block_c5n3E_info;
           _s5l38::P64 = P64[R1 + 6];
           _s5l39::P64 = P64[R1 + 14];
           R1 = P64[Sp + 96];
           P64[Sp] = _s5l39::P64;
           P64[Sp + 96] = _s5l38::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n58; else goto c5n3F;
       u5n58: // global
           call _c5n3E(R1) args: 0, res: 0, upd: 0;
       c5n3F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n3E() //  [R1]
         { info_tbl: [(c5n3E,
                       label: block_c5n3E_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n3E: // global
           if (R1 & 7 == 1) goto u5n4X; else goto c5n4H;
       u5n4X: // global
           Sp = Sp + 112;
           call _c5n4F() args: 0, res: 0, upd: 0;
       c5n4H: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto c5n4K; else goto c5n4J;
       c5n4K: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5n4J: // global
           _s5l3b::P64 = P64[R1 + 6];
           _s5l3c::P64 = P64[R1 + 14];
           I64[Hp - 176] = sat_s5l3e_info;
           _s5l2K::P64 = P64[Sp + 56];
           P64[Hp - 160] = _s5l2K::P64;
           P64[Hp - 152] = P64[Sp + 48];
           P64[Hp - 144] = P64[Sp + 40];
           P64[Hp - 136] = P64[Sp + 32];
           P64[Hp - 128] = P64[Sp + 24];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = _s5l3c::P64;
           I64[Hp - 96] = sat_s5l3d_info;
           P64[Hp - 80] = _s5l2K::P64;
           P64[Hp - 72] = P64[Sp + 64];
           P64[Hp - 64] = P64[Sp + 72];
           P64[Hp - 56] = P64[Sp + 80];
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = P64[Sp + 96];
           P64[Hp - 32] = P64[Sp + 104];
           P64[Hp - 24] = _s5l3b::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 96;
           P64[Hp] = Hp - 176;
           R1 = Hp - 14;
           Sp = Sp + 112;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5n4F() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n4F: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.247288078 UTC

[section ""data" . Data.OldList.zip7_closure" {
     Data.OldList.zip7_closure:
         const Data.OldList.zip7_info;
 },
 Data.OldList.zip7_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n5d: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.OldList.zip7_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2,
                                        R1) args: 24, res: 0, upd: 8;
     }
 },
 Data.OldList.zip7_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5n5h,
                       label: Data.OldList.zip7_info
                       rep:HeapRep static {
                             Fun {arity: 7
                                  fun_type: ArgGen [False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n5h: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5n5i; else goto c5n5j;
       c5n5i: // global
           R1 = Data.OldList.zip7_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c5n5j: // global
           _B3::P64 = R6;
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Tuple.(,,,,,,)_closure+7;
           P64[Sp - 8] = _B3::P64;
           Sp = Sp - 8;
           call Data.OldList.zipWith7_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.250631771 UTC

[section ""data" . Data.OldList.$wunzip4_closure" {
     Data.OldList.$wunzip4_closure:
         const Data.OldList.$wunzip4_info;
 },
 ds_s5l3o_entry() //  [R1]
         { info_tbl: [(c5n5G,
                       label: ds_s5l3o_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n5G: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5n5H; else goto c5n5I;
       c5n5H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5n5I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5n5D_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wunzip4_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5n5D() //  [R1, R2, R3, R4]
         { info_tbl: [(c5n5D,
                       label: block_c5n5D_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n5D: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5n5L; else goto c5n5K;
       c5n5L: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       c5n5K: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wunzip4_entry() //  [R2]
         { info_tbl: [(c5n5Q,
                       label: Data.OldList.$wunzip4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n5Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5n5R; else goto c5n5S;
       c5n5R: // global
           R2 = R2;
           R1 = Data.OldList.$wunzip4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5n5S: // global
           I64[Sp - 8] = block_c5n5o_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n68; else goto c5n5p;
       u5n68: // global
           call _c5n5o(R1) args: 0, res: 0, upd: 0;
       c5n5p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n5o() //  [R1]
         { info_tbl: [(c5n5o,
                       label: block_c5n5o_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n5o: // global
           if (R1 & 7 == 1) goto c5n5N; else goto c5n5O;
       c5n5N: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5n5O: // global
           I64[Sp - 8] = block_c5n5u_info;
           _s5l3i::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5l3i::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n67; else goto c5n5v;
       u5n67: // global
           call _c5n5u(R1) args: 0, res: 0, upd: 0;
       c5n5v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n5u() //  [R1]
         { info_tbl: [(c5n5u,
                       label: block_c5n5u_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n5u: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto c5n66; else goto c5n65;
       c5n66: // global
           HpAlloc = 216;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5n65: // global
           _s5l3k::P64 = P64[R1 + 7];
           _s5l3l::P64 = P64[R1 + 15];
           _s5l3m::P64 = P64[R1 + 23];
           _s5l3n::P64 = P64[R1 + 31];
           I64[Hp - 208] = ds_s5l3o_info;
           P64[Hp - 192] = P64[Sp + 8];
           I64[Hp - 184] = stg_sel_3_upd_info;
           _c5n5z::P64 = Hp - 208;
           P64[Hp - 168] = _c5n5z::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = _s5l3n::P64;
           P64[Hp - 144] = Hp - 184;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _c5n5z::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _s5l3m::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5n5z::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5l3l::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5n5z::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l3k::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 158;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.255319933 UTC

[section ""data" . Data.OldList.unzip4_closure" {
     Data.OldList.unzip4_closure:
         const Data.OldList.unzip4_info;
 },
 Data.OldList.unzip4_entry() //  [R2]
         { info_tbl: [(c5n6g,
                       label: Data.OldList.unzip4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n6g: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5n6h; else goto c5n6i;
       c5n6h: // global
           R2 = R2;
           R1 = Data.OldList.unzip4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5n6i: // global
           I64[Sp - 8] = block_c5n6d_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wunzip4_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5n6d() //  [R1, R2, R3, R4]
         { info_tbl: [(c5n6d,
                       label: block_c5n6d_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n6d: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5n6l; else goto c5n6k;
       c5n6l: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       c5n6k: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.258701721 UTC

[section ""data" . Data.OldList.$wunzip5_closure" {
     Data.OldList.$wunzip5_closure:
         const Data.OldList.$wunzip5_info;
 },
 ds_s5l4c_entry() //  [R1]
         { info_tbl: [(c5n6K,
                       label: ds_s5l4c_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n6K: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5n6L; else goto c5n6M;
       c5n6L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5n6M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5n6F_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wunzip5_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5n6F() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c5n6F,
                       label: block_c5n6F_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n6F: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           P64[Sp] = R1;
           Sp = Sp - 40;
           call _c5n6G() args: 0, res: 0, upd: 0;
     }
 },
 _c5n6G() //  []
         { info_tbl: [(c5n6G,
                       label: block_c5n6G_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n6G: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5n6P; else goto c5n6O;
       c5n6P: // global
           HpAlloc = 48;
           I64[Sp] = block_c5n6G_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c5n6O: // global
           I64[Hp - 40] = (,,,,)_con_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 39;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wunzip5_entry() //  [R2]
         { info_tbl: [(c5n6W,
                       label: Data.OldList.$wunzip5_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n6W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5n6X; else goto c5n6Y;
       c5n6X: // global
           R2 = R2;
           R1 = Data.OldList.$wunzip5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5n6Y: // global
           I64[Sp - 8] = block_c5n6q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n7g; else goto c5n6r;
       u5n7g: // global
           call _c5n6q(R1) args: 0, res: 0, upd: 0;
       c5n6r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n6q() //  [R1]
         { info_tbl: [(c5n6q,
                       label: block_c5n6q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n6q: // global
           if (R1 & 7 == 1) goto c5n6T; else goto c5n6U;
       c5n6T: // global
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5n6U: // global
           I64[Sp - 8] = block_c5n6w_info;
           _s5l45::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5l45::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n7f; else goto c5n6x;
       u5n7f: // global
           call _c5n6w(R1) args: 0, res: 0, upd: 0;
       c5n6x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n6w() //  [R1]
         { info_tbl: [(c5n6w,
                       label: block_c5n6w_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n6w: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c5n7e; else goto c5n7d;
       c5n7e: // global
           HpAlloc = 264;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5n7d: // global
           _s5l47::P64 = P64[R1 + 7];
           _s5l48::P64 = P64[R1 + 15];
           _s5l49::P64 = P64[R1 + 23];
           _s5l4a::P64 = P64[R1 + 31];
           _s5l4b::P64 = P64[R1 + 39];
           I64[Hp - 256] = ds_s5l4c_info;
           P64[Hp - 240] = P64[Sp + 8];
           I64[Hp - 232] = stg_sel_4_upd_info;
           _c5n6B::P64 = Hp - 256;
           P64[Hp - 216] = _c5n6B::P64;
           I64[Hp - 208] = :_con_info;
           P64[Hp - 200] = _s5l4b::P64;
           P64[Hp - 192] = Hp - 232;
           I64[Hp - 184] = stg_sel_3_upd_info;
           P64[Hp - 168] = _c5n6B::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = _s5l4a::P64;
           P64[Hp - 144] = Hp - 184;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _c5n6B::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _s5l49::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5n6B::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5l48::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5n6B::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l47::P64;
           P64[Hp] = Hp - 40;
           R5 = Hp - 206;
           R4 = Hp - 158;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.263769726 UTC

[section ""data" . Data.OldList.unzip5_closure" {
     Data.OldList.unzip5_closure:
         const Data.OldList.unzip5_info;
 },
 Data.OldList.unzip5_entry() //  [R2]
         { info_tbl: [(c5n7q,
                       label: Data.OldList.unzip5_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n7q: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5n7r; else goto c5n7s;
       c5n7r: // global
           R2 = R2;
           R1 = Data.OldList.unzip5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5n7s: // global
           I64[Sp - 8] = block_c5n7l_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wunzip5_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5n7l() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c5n7l,
                       label: block_c5n7l_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n7l: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           P64[Sp] = R1;
           Sp = Sp - 40;
           call _c5n7m() args: 0, res: 0, upd: 0;
     }
 },
 _c5n7m() //  []
         { info_tbl: [(c5n7m,
                       label: block_c5n7m_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n7m: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5n7v; else goto c5n7u;
       c5n7v: // global
           HpAlloc = 48;
           I64[Sp] = block_c5n7m_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c5n7u: // global
           I64[Hp - 40] = (,,,,)_con_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 39;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.267830209 UTC

[section ""data" . Data.OldList.$wunzip6_closure" {
     Data.OldList.$wunzip6_closure:
         const Data.OldList.$wunzip6_info;
 },
 ds_s5l5f_entry() //  [R1]
         { info_tbl: [(c5n7W,
                       label: ds_s5l5f_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n7W: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c5n7X; else goto c5n7Y;
       c5n7X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5n7Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5n7R_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wunzip6_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5n7R() //  [R1, R2, R3, R4, R5, R6]
         { info_tbl: [(c5n7R,
                       label: block_c5n7R_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n7R: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R1;
           Sp = Sp - 48;
           call _c5n7S() args: 0, res: 0, upd: 0;
     }
 },
 _c5n7S() //  []
         { info_tbl: [(c5n7S,
                       label: block_c5n7S_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n7S: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5n81; else goto c5n80;
       c5n81: // global
           HpAlloc = 56;
           I64[Sp] = block_c5n7S_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c5n80: // global
           I64[Hp - 48] = (,,,,,)_con_info;
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wunzip6_entry() //  [R2]
         { info_tbl: [(c5n88,
                       label: Data.OldList.$wunzip6_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n88: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5n89; else goto c5n8a;
       c5n89: // global
           R2 = R2;
           R1 = Data.OldList.$wunzip6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5n8a: // global
           I64[Sp - 8] = block_c5n7C_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n8u; else goto c5n7D;
       u5n8u: // global
           call _c5n7C(R1) args: 0, res: 0, upd: 0;
       c5n7D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n7C() //  [R1]
         { info_tbl: [(c5n7C,
                       label: block_c5n7C_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n7C: // global
           if (R1 & 7 == 1) goto c5n85; else goto c5n86;
       c5n85: // global
           R6 = GHC.Types.[]_closure+1;
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R6,
                               R5,
                               R4,
                               R3,
                               R2,
                               R1) args: 8, res: 0, upd: 8;
       c5n86: // global
           I64[Sp - 8] = block_c5n7I_info;
           _s5l57::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5l57::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n8t; else goto c5n7J;
       u5n8t: // global
           call _c5n7I(R1) args: 0, res: 0, upd: 0;
       c5n7J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n7I() //  [R1]
         { info_tbl: [(c5n7I,
                       label: block_c5n7I_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n7I: // global
           Hp = Hp + 312;
           if (Hp > HpLim) (likely: False) goto c5n8s; else goto c5n8r;
       c5n8s: // global
           HpAlloc = 312;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5n8r: // global
           _s5l59::P64 = P64[R1 + 7];
           _s5l5a::P64 = P64[R1 + 15];
           _s5l5b::P64 = P64[R1 + 23];
           _s5l5c::P64 = P64[R1 + 31];
           _s5l5d::P64 = P64[R1 + 39];
           _s5l5e::P64 = P64[R1 + 47];
           I64[Hp - 304] = ds_s5l5f_info;
           P64[Hp - 288] = P64[Sp + 8];
           I64[Hp - 280] = stg_sel_5_upd_info;
           _c5n7N::P64 = Hp - 304;
           P64[Hp - 264] = _c5n7N::P64;
           I64[Hp - 256] = :_con_info;
           P64[Hp - 248] = _s5l5e::P64;
           P64[Hp - 240] = Hp - 280;
           I64[Hp - 232] = stg_sel_4_upd_info;
           P64[Hp - 216] = _c5n7N::P64;
           I64[Hp - 208] = :_con_info;
           P64[Hp - 200] = _s5l5d::P64;
           P64[Hp - 192] = Hp - 232;
           I64[Hp - 184] = stg_sel_3_upd_info;
           P64[Hp - 168] = _c5n7N::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = _s5l5c::P64;
           P64[Hp - 144] = Hp - 184;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _c5n7N::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _s5l5b::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5n7N::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5l5a::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5n7N::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l59::P64;
           P64[Hp] = Hp - 40;
           R6 = Hp - 254;
           R5 = Hp - 206;
           R4 = Hp - 158;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R6,
                               R5,
                               R4,
                               R3,
                               R2,
                               R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.275852314 UTC

[section ""data" . Data.OldList.unzip6_closure" {
     Data.OldList.unzip6_closure:
         const Data.OldList.unzip6_info;
 },
 Data.OldList.unzip6_entry() //  [R2]
         { info_tbl: [(c5n8E,
                       label: Data.OldList.unzip6_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n8E: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c5n8F; else goto c5n8G;
       c5n8F: // global
           R2 = R2;
           R1 = Data.OldList.unzip6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5n8G: // global
           I64[Sp - 8] = block_c5n8z_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wunzip6_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5n8z() //  [R1, R2, R3, R4, R5, R6]
         { info_tbl: [(c5n8z,
                       label: block_c5n8z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n8z: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R1;
           Sp = Sp - 48;
           call _c5n8A() args: 0, res: 0, upd: 0;
     }
 },
 _c5n8A() //  []
         { info_tbl: [(c5n8A,
                       label: block_c5n8A_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n8A: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5n8J; else goto c5n8I;
       c5n8J: // global
           HpAlloc = 56;
           I64[Sp] = block_c5n8A_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c5n8I: // global
           I64[Hp - 48] = (,,,,,)_con_info;
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.279563346 UTC

[section ""data" . Data.OldList.$wunzip7_closure" {
     Data.OldList.$wunzip7_closure:
         const Data.OldList.$wunzip7_info;
 },
 ds_s5l6z_entry() //  [R1]
         { info_tbl: [(c5n9a,
                       label: ds_s5l6z_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n9a: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c5n9b; else goto c5n9c;
       c5n9b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5n9c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5n95_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wunzip7_entry(R2) args: 8, res: 16, upd: 24;
     }
 },
 _c5n95() //  [R1, R2, R3, R4, R5, R6]
         { info_tbl: [(c5n95,
                       label: block_c5n95_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n95: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 8] = R1;
           Sp = Sp - 48;
           call _c5n96() args: 0, res: 0, upd: 0;
     }
 },
 _c5n96() //  []
         { info_tbl: [(c5n96,
                       label: block_c5n96_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n96: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5n9f; else goto c5n9e;
       c5n9f: // global
           HpAlloc = 64;
           I64[Sp] = block_c5n96_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c5n9e: // global
           I64[Hp - 56] = (,,,,,,)_con_info;
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 55;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wunzip7_entry() //  [R2]
         { info_tbl: [(c5n9m,
                       label: Data.OldList.$wunzip7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n9m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5n9n; else goto c5n9o;
       c5n9n: // global
           R2 = R2;
           R1 = Data.OldList.$wunzip7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5n9o: // global
           I64[Sp - 8] = block_c5n8Q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n9K; else goto c5n8R;
       u5n9K: // global
           call _c5n8Q(R1) args: 0, res: 0, upd: 0;
       c5n8R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n8Q() //  [R1]
         { info_tbl: [(c5n8Q,
                       label: block_c5n8Q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n8Q: // global
           if (R1 & 7 == 1) goto c5n9j; else goto c5n9k;
       c5n9j: // global
           R6 = GHC.Types.[]_closure+1;
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           P64[Sp] = GHC.Types.[]_closure+1;
           call (I64[P64[Sp + 8]])(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
       c5n9k: // global
           I64[Sp - 8] = block_c5n8W_info;
           _s5l6q::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5l6q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5n9J; else goto c5n8X;
       u5n9J: // global
           call _c5n8W(R1) args: 0, res: 0, upd: 0;
       c5n8X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5n8W() //  [R1]
         { info_tbl: [(c5n8W,
                       label: block_c5n8W_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n8W: // global
           Hp = Hp + 360;
           if (Hp > HpLim) (likely: False) goto c5n9I; else goto c5n9H;
       c5n9I: // global
           HpAlloc = 360;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5n9H: // global
           _s5l6s::P64 = P64[R1 + 7];
           _s5l6t::P64 = P64[R1 + 15];
           _s5l6u::P64 = P64[R1 + 23];
           _s5l6v::P64 = P64[R1 + 31];
           _s5l6w::P64 = P64[R1 + 39];
           _s5l6x::P64 = P64[R1 + 47];
           _s5l6y::P64 = P64[R1 + 55];
           I64[Hp - 352] = ds_s5l6z_info;
           P64[Hp - 336] = P64[Sp + 8];
           I64[Hp - 328] = stg_sel_6_upd_info;
           _c5n91::P64 = Hp - 352;
           P64[Hp - 312] = _c5n91::P64;
           I64[Hp - 304] = :_con_info;
           P64[Hp - 296] = _s5l6y::P64;
           P64[Hp - 288] = Hp - 328;
           I64[Hp - 280] = stg_sel_5_upd_info;
           P64[Hp - 264] = _c5n91::P64;
           I64[Hp - 256] = :_con_info;
           P64[Hp - 248] = _s5l6x::P64;
           P64[Hp - 240] = Hp - 280;
           I64[Hp - 232] = stg_sel_4_upd_info;
           P64[Hp - 216] = _c5n91::P64;
           I64[Hp - 208] = :_con_info;
           P64[Hp - 200] = _s5l6w::P64;
           P64[Hp - 192] = Hp - 232;
           I64[Hp - 184] = stg_sel_3_upd_info;
           P64[Hp - 168] = _c5n91::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = _s5l6v::P64;
           P64[Hp - 144] = Hp - 184;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _c5n91::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _s5l6u::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5n91::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5l6t::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5n91::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l6s::P64;
           P64[Hp] = Hp - 40;
           R6 = Hp - 254;
           R5 = Hp - 206;
           R4 = Hp - 158;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           P64[Sp + 8] = Hp - 302;
           Sp = Sp + 8;
           call (I64[P64[Sp + 8]])(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.284830948 UTC

[section ""data" . Data.OldList.unzip7_closure" {
     Data.OldList.unzip7_closure:
         const Data.OldList.unzip7_info;
 },
 Data.OldList.unzip7_entry() //  [R2]
         { info_tbl: [(c5n9U,
                       label: Data.OldList.unzip7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n9U: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5n9V; else goto c5n9W;
       c5n9V: // global
           R2 = R2;
           R1 = Data.OldList.unzip7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5n9W: // global
           I64[Sp - 8] = block_c5n9P_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wunzip7_entry(R2) args: 8, res: 16, upd: 8;
     }
 },
 _c5n9P() //  [R1, R2, R3, R4, R5, R6]
         { info_tbl: [(c5n9P,
                       label: block_c5n9P_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n9P: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 8] = R1;
           Sp = Sp - 48;
           call _c5n9Q() args: 0, res: 0, upd: 0;
     }
 },
 _c5n9Q() //  []
         { info_tbl: [(c5n9Q,
                       label: block_c5n9Q_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5n9Q: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5n9Z; else goto c5n9Y;
       c5n9Z: // global
           HpAlloc = 64;
           I64[Sp] = block_c5n9Q_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c5n9Y: // global
           I64[Hp - 56] = (,,,,,,)_con_info;
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 55;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.288738336 UTC

[section ""data" . Data.OldList.groupBy_closure" {
     Data.OldList.groupBy_closure:
         const Data.OldList.groupBy_info;
 },
 ds2_s5l84_entry() //  [R1]
         { info_tbl: [(c5nak,
                       label: ds2_s5l84_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nak: // global
           _s5l84::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5nal; else goto c5nam;
       c5nam: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5nao; else goto c5nan;
       c5nao: // global
           HpAlloc = 32;
           goto c5nal;
       c5nal: // global
           R1 = _s5l84::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nan: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l84::P64;
           _s5l7Z::P64 = P64[_s5l84::P64 + 16];
           _s5l82::P64 = P64[_s5l84::P64 + 24];
           _s5l83::P64 = P64[_s5l84::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s5l7Z::P64;
           P64[Hp] = _s5l82::P64;
           I64[Sp - 24] = block_c5nah_info;
           R3 = _s5l83::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5nah() //  [R1, R2]
         { info_tbl: [(c5nah,
                       label: block_c5nah_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nah: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nar; else goto c5naq;
       c5nar: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5naq: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l8h_entry() //  [R1]
         { info_tbl: [(c5naz,
                       label: sat_s5l8h_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5naz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5naA; else goto c5naB;
       c5naA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5naB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c5naw_info;
           _s5l7Z::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s5l7Z::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5naF; else goto c5nax;
       u5naF: // global
           call _c5naw(R1) args: 0, res: 0, upd: 0;
       c5nax: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5naw() //  [R1]
         { info_tbl: [(c5naw,
                       label: block_c5naw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5naw: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.OldList.groupBy_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.groupBy_entry() //  [R2, R3]
         { info_tbl: [(c5naK,
                       label: Data.OldList.groupBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5naK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5naL; else goto c5naM;
       c5naL: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.groupBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5naM: // global
           I64[Sp - 16] = block_c5na6_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5naV; else goto c5na7;
       u5naV: // global
           call _c5na6(R1) args: 0, res: 0, upd: 0;
       c5na7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5na6() //  [R1]
         { info_tbl: [(c5na6,
                       label: block_c5na6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5na6: // global
           if (R1 & 7 == 1) goto c5naH; else goto c5naI;
       c5naH: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5naI: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c5naU; else goto c5naT;
       c5naU: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5naT: // global
           _s5l82::P64 = P64[R1 + 6];
           _s5l83::P64 = P64[R1 + 14];
           I64[Hp - 136] = ds2_s5l84_info;
           _s5l7Z::P64 = P64[Sp + 8];
           P64[Hp - 120] = _s5l7Z::P64;
           P64[Hp - 112] = _s5l82::P64;
           P64[Hp - 104] = _s5l83::P64;
           I64[Hp - 96] = sat_s5l8h_info;
           P64[Hp - 80] = _s5l7Z::P64;
           _c5nac::P64 = Hp - 136;
           P64[Hp - 72] = _c5nac::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _c5nac::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5l82::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.293572906 UTC

[section ""data" . Data.OldList.group_closure" {
     Data.OldList.group_closure:
         const Data.OldList.group_info;
 },
 sat_s5l8k_entry() //  [R1]
         { info_tbl: [(c5nb4,
                       label: sat_s5l8k_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nb4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nb5; else goto c5nb6;
       c5nb5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nb6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.group_entry() //  [R2, R3]
         { info_tbl: [(c5nb7,
                       label: Data.OldList.group_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nb7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nbb; else goto c5nba;
       c5nbb: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.group_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nba: // global
           I64[Hp - 16] = sat_s5l8k_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.groupBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.295207637 UTC

[section ""data" . poly_tailsGo_r5kSn_closure" {
     poly_tailsGo_r5kSn_closure:
         const poly_tailsGo_r5kSn_info;
 },
 sat_s5l8p_entry() //  [R1]
         { info_tbl: [(c5nbr,
                       label: sat_s5l8p_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nbr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5nbs; else goto c5nbt;
       c5nbs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nbt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5nbk_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5nbA; else goto c5nbl;
       u5nbA: // global
           call _c5nbk(R1) args: 0, res: 0, upd: 0;
       c5nbl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5nbk() //  [R1]
         { info_tbl: [(c5nbk,
                       label: block_c5nbk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nbk: // global
           if (R1 & 7 == 1) goto c5nbo; else goto c5nbp;
       c5nbo: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5nbp: // global
           R2 = P64[R1 + 14];
           Sp = Sp + 8;
           call poly_tailsGo_r5kSn_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_tailsGo_r5kSn_entry() //  [R2]
         { info_tbl: [(c5nbC,
                       label: poly_tailsGo_r5kSn_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nbC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5nbG; else goto c5nbF;
       c5nbG: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = poly_tailsGo_r5kSn_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nbF: // global
           I64[Hp - 40] = sat_s5l8p_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.296682389 UTC

[section ""data" . Data.OldList.tails_closure" {
     Data.OldList.tails_closure:
         const Data.OldList.tails_info;
 },
 Data.OldList.tails_entry() //  [R2]
         { info_tbl: [(c5nbL,
                       label: Data.OldList.tails_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nbL: // global
           R2 = R2;
           call poly_tailsGo_r5kSn_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.298606206 UTC

[section ""data" . Data.OldList.nonEmptySubsequences_closure" {
     Data.OldList.nonEmptySubsequences_closure:
         const Data.OldList.nonEmptySubsequences_info;
 },
 go_s5l8w_entry() //  [R1, R2]
         { info_tbl: [(c5nce,
                       label: go_s5l8w_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nce: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5ncf; else goto c5ncg;
       c5ncf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5ncg: // global
           I64[Sp - 24] = block_c5nc7_info;
           _s5l8w::P64 = R1;
           _s5l8t::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s5l8t::P64;
           P64[Sp - 8] = _s5l8w::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5nct; else goto c5nc8;
       u5nct: // global
           call _c5nc7(R1) args: 0, res: 0, upd: 0;
       c5nc8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nc7() //  [R1]
         { info_tbl: [(c5nc7,
                       label: block_c5nc7_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nc7: // global
           if (R1 & 7 == 1) goto c5ncb; else goto c5ncc;
       c5ncb: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5ncc: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c5ncs; else goto c5ncr;
       c5ncs: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ncr: // global
           _s5l8z::P64 = P64[R1 + 6];
           _s5l8A::P64 = P64[R1 + 14];
           I64[Hp - 96] = stg_ap_2_upd_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = _s5l8A::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = _s5l8z::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 62;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8z::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5l8F_entry() //  [R1]
         { info_tbl: [(c5ncw,
                       label: sat_s5l8F_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ncw: // global
           _s5l8F::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c5ncx; else goto c5ncy;
       c5ncy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5ncA; else goto c5ncz;
       c5ncA: // global
           HpAlloc = 16;
           goto c5ncx;
       c5ncx: // global
           R1 = _s5l8F::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ncz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l8F::P64;
           _s5l8t::P64 = P64[_s5l8F::P64 + 16];
           _s5l8u::P64 = P64[_s5l8F::P64 + 24];
           I64[Hp - 8] = go_s5l8w_info;
           P64[Hp] = _s5l8t::P64;
           I64[Sp - 32] = block_c5ncu_info;
           R2 = _s5l8u::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Data.OldList.nonEmptySubsequences_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5ncu() //  [R1]
         { info_tbl: [(c5ncu,
                       label: block_c5ncu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ncu: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s5l8w_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.nonEmptySubsequences_entry() //  [R2]
         { info_tbl: [(c5ncI,
                       label: Data.OldList.nonEmptySubsequences_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ncI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5ncJ; else goto c5ncK;
       c5ncJ: // global
           R2 = R2;
           R1 = Data.OldList.nonEmptySubsequences_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5ncK: // global
           I64[Sp - 8] = block_c5nbS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5ncS; else goto c5nbT;
       u5ncS: // global
           call _c5nbS(R1) args: 0, res: 0, upd: 0;
       c5nbT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nbS() //  [R1]
         { info_tbl: [(c5nbS,
                       label: block_c5nbS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nbS: // global
           if (R1 & 7 == 1) goto c5ncF; else goto c5ncG;
       c5ncF: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5ncG: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5ncR; else goto c5ncQ;
       c5ncR: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ncQ: // global
           _s5l8t::P64 = P64[R1 + 6];
           _s5l8u::P64 = P64[R1 + 14];
           I64[Hp - 72] = sat_s5l8F_info;
           P64[Hp - 56] = _s5l8t::P64;
           P64[Hp - 48] = _s5l8u::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5l8t::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.301669765 UTC

[section ""data" . Data.OldList.subsequences_closure" {
     Data.OldList.subsequences_closure:
         const Data.OldList.subsequences_info;
 },
 sat_s5l8H_entry() //  [R1]
         { info_tbl: [(c5nd1,
                       label: sat_s5l8H_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nd1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nd2; else goto c5nd3;
       c5nd2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nd3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.nonEmptySubsequences_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.subsequences_entry() //  [R2]
         { info_tbl: [(c5nd5,
                       label: Data.OldList.subsequences_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nd5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5nd9; else goto c5nd8;
       c5nd9: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.OldList.subsequences_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nd8: // global
           I64[Hp - 40] = sat_s5l8H_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.305149925 UTC

[section ""data" . Data.OldList.permutations1_closure" {
     Data.OldList.permutations1_closure:
         const Data.OldList.permutations1_info;
 },
 sat_s5l8X_entry() //  [R1, R2]
         { info_tbl: [(c5ndF,
                       label: sat_s5l8X_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ndF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5ndJ; else goto c5ndI;
       c5ndJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5ndI: // global
           _s5l8O::P64 = P64[R1 + 7];
           _s5l8S::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8S::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s5l8O::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 ds2_s5l8U_entry() //  [R1]
         { info_tbl: [(c5ndN,
                       label: ds2_s5l8U_info
                       rep:HeapRep 5 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ndN: // global
           _s5l8U::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5ndO; else goto c5ndP;
       c5ndP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5ndR; else goto c5ndQ;
       c5ndR: // global
           HpAlloc = 24;
           goto c5ndO;
       c5ndO: // global
           R1 = _s5l8U::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ndQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l8U::P64;
           _s5l8N::P64 = P64[_s5l8U::P64 + 16];
           _s5l8O::P64 = P64[_s5l8U::P64 + 24];
           _s5l8Q::P64 = P64[_s5l8U::P64 + 32];
           _s5l8S::P64 = P64[_s5l8U::P64 + 40];
           _s5l8T::P64 = P64[_s5l8U::P64 + 48];
           I64[Hp - 16] = sat_s5l8X_info;
           P64[Hp - 8] = _s5l8O::P64;
           P64[Hp] = _s5l8S::P64;
           I64[Sp - 24] = block_c5ndK_info;
           R4 = _s5l8Q::P64;
           R3 = _s5l8T::P64;
           R2 = Hp - 15;
           R1 = _s5l8N::P64;
           Sp = Sp - 24;
           call $winterleave'_s5l8N_entry(R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5ndK() //  [R1, R2]
         { info_tbl: [(c5ndK,
                       label: block_c5ndK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ndK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5ndU; else goto c5ndT;
       c5ndU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5ndT: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l98_entry() //  [R1]
         { info_tbl: [(c5ne3,
                       label: sat_s5l98_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ne3: // global
           _s5l98::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5ne4; else goto c5ne5;
       c5ne5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5ne7; else goto c5ne6;
       c5ne7: // global
           HpAlloc = 48;
           goto c5ne4;
       c5ne4: // global
           R1 = _s5l98::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ne6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l98::P64;
           _s5l8L::P64 = P64[_s5l98::P64 + 16];
           _s5l8O::P64 = P64[_s5l98::P64 + 24];
           _s5l8S::P64 = P64[_s5l98::P64 + 32];
           _s5l91::P64 = P64[_s5l98::P64 + 40];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5l8S::P64;
           P64[Hp - 24] = _s5l91::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8L::P64;
           P64[Hp] = Hp - 38;
           R2 = Hp - 14;
           R1 = _s5l8O::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 $winterleave'_s5l8N_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c5nec,
                       label: $winterleave'_s5l8N_info
                       rep:HeapRep 2 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nec: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5ned; else goto c5nee;
       c5ned: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nee: // global
           I64[Sp - 48] = block_c5ndp_info;
           _s5l8N::P64 = R1;
           _s5l8L::P64 = P64[R1 + 5];
           _s5l8M::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 40] = _s5l8L::P64;
           P64[Sp - 32] = _s5l8M::P64;
           P64[Sp - 24] = _s5l8N::P64;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u5nem; else goto c5ndq;
       u5nem: // global
           call _c5ndp(R1) args: 0, res: 0, upd: 0;
       c5ndq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ndp() //  [R1]
         { info_tbl: [(c5ndp,
                       label: block_c5ndp_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ndp: // global
           _s5l8Q::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c5ne9; else goto c5nea;
       c5ne9: // global
           R2 = _s5l8Q::P64;
           R1 = P64[Sp + 16];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5nea: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c5nel; else goto c5nek;
       c5nel: // global
           HpAlloc = 200;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nek: // global
           _s5l8S::P64 = P64[R1 + 6];
           _s5l8T::P64 = P64[R1 + 14];
           I64[Hp - 192] = ds2_s5l8U_info;
           P64[Hp - 176] = P64[Sp + 24];
           _s5l8O::P64 = P64[Sp + 32];
           P64[Hp - 168] = _s5l8O::P64;
           P64[Hp - 160] = _s5l8Q::P64;
           P64[Hp - 152] = _s5l8S::P64;
           P64[Hp - 144] = _s5l8T::P64;
           I64[Hp - 136] = stg_sel_0_upd_info;
           _c5ndv::P64 = Hp - 192;
           P64[Hp - 120] = _c5ndv::P64;
           I64[Hp - 112] = stg_sel_1_upd_info;
           P64[Hp - 96] = _c5ndv::P64;
           I64[Hp - 88] = sat_s5l98_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _s5l8O::P64;
           P64[Hp - 56] = _s5l8S::P64;
           _c5ndV::P64 = Hp - 136;
           P64[Hp - 48] = _c5ndV::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 88;
           P64[Hp - 24] = Hp - 112;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8S::P64;
           P64[Hp] = _c5ndV::P64;
           R2 = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 z_s5l9e_entry() //  [R1]
         { info_tbl: [(c5nes,
                       label: z_s5l9e_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nes: // global
           _s5l9e::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5net; else goto c5neu;
       c5neu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5new; else goto c5nev;
       c5new: // global
           HpAlloc = 24;
           goto c5net;
       c5net: // global
           R1 = _s5l9e::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nev: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l9e::P64;
           _s5l8J::P64 = P64[_s5l9e::P64 + 16];
           _s5l8L::P64 = P64[_s5l9e::P64 + 24];
           _s5l8M::P64 = P64[_s5l9e::P64 + 32];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8L::P64;
           P64[Hp] = _s5l8J::P64;
           R3 = Hp - 14;
           R2 = _s5l8M::P64;
           Sp = Sp - 16;
           call Data.OldList.permutations1_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 go_s5l9g_entry() //  [R1, R2]
         { info_tbl: [(c5neJ,
                       label: go_s5l9g_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5neJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5neK; else goto c5neL;
       c5neK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5neL: // global
           I64[Sp - 32] = block_c5neC_info;
           _s5l9g::P64 = R1;
           _s5l8N::P64 = P64[R1 + 7];
           _s5l9e::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s5l8N::P64;
           P64[Sp - 16] = _s5l9e::P64;
           P64[Sp - 8] = _s5l9g::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5neY; else goto c5neD;
       u5neY: // global
           call _c5neC(R1) args: 0, res: 0, upd: 0;
       c5neD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5neC() //  [R1]
         { info_tbl: [(c5neC,
                       label: block_c5neC_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5neC: // global
           if (R1 & 7 == 1) goto c5neG; else goto c5neH;
       c5neG: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5neH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5neV; else goto c5neU;
       c5neV: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5neU: // global
           _s5l9j::P64 = P64[R1 + 6];
           _s5l9k::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s5l9k::P64;
           I64[Sp + 24] = block_c5neS_info;
           R4 = Hp - 24;
           R3 = _s5l9j::P64;
           R2 = GHC.Base.id_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call $winterleave'_s5l8N_entry(R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5neS() //  [R2]
         { info_tbl: [(c5neS,
                       label: block_c5neS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5neS: // global
           R1 = R2 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5l9p_entry() //  [R1]
         { info_tbl: [(c5nf3,
                       label: sat_s5l9p_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nf3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nf4; else goto c5nf5;
       c5nf4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nf5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.permutations1_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.permutations1_entry() //  [R2, R3]
         { info_tbl: [(c5nfa,
                       label: Data.OldList.permutations1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nfa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nfb; else goto c5nfc;
       c5nfb: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.permutations1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nfc: // global
           I64[Sp - 16] = block_c5nde_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5nfj; else goto c5ndf;
       u5nfj: // global
           call _c5nde(R1) args: 0, res: 0, upd: 0;
       c5ndf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nde() //  [R1]
         { info_tbl: [(c5nde,
                       label: block_c5nde_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nde: // global
           if (R1 & 7 == 1) goto c5nf7; else goto c5nf8;
       c5nf7: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nf8: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c5nfi; else goto c5nfh;
       c5nfi: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nfh: // global
           _s5l8L::P64 = P64[R1 + 6];
           _s5l8M::P64 = P64[R1 + 14];
           I64[Hp - 128] = $winterleave'_s5l8N_info;
           P64[Hp - 120] = _s5l8L::P64;
           P64[Hp - 112] = _s5l8M::P64;
           I64[Hp - 104] = z_s5l9e_info;
           _s5l8J::P64 = P64[Sp + 8];
           P64[Hp - 88] = _s5l8J::P64;
           P64[Hp - 80] = _s5l8L::P64;
           P64[Hp - 72] = _s5l8M::P64;
           I64[Hp - 64] = go_s5l9g_info;
           P64[Hp - 56] = Hp - 125;
           P64[Hp - 48] = Hp - 104;
           I64[Hp - 40] = sat_s5l9p_info;
           P64[Hp - 24] = _s5l8J::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8J::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           R1 = Hp - 63;
           Sp = Sp + 16;
           call go_s5l9g_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.311210575 UTC

[section ""data" . Data.OldList.permutations_closure" {
     Data.OldList.permutations_closure:
         const Data.OldList.permutations_info;
 },
 sat_s5l9s_entry() //  [R1]
         { info_tbl: [(c5nfs,
                       label: sat_s5l9s_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nfs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nft; else goto c5nfu;
       c5nft: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nfu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.permutations1_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.permutations_entry() //  [R2]
         { info_tbl: [(c5nfw,
                       label: Data.OldList.permutations_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nfw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5nfA; else goto c5nfz;
       c5nfA: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.OldList.permutations_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nfz: // global
           I64[Hp - 40] = sat_s5l9s_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.312389857 UTC

[section ""data" . lvl6_r5kSo_closure" {
     lvl6_r5kSo_closure:
         const :_con_info;
         const GHC.Types.[]_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.318557121 UTC

[section ""data" . Data.OldList.sortBy_closure" {
     Data.OldList.sortBy_closure:
         const Data.OldList.sortBy_info;
 },
 merge_s5l9v_entry() //  [R1, R2, R3]
         { info_tbl: [(c5ngw,
                       label: merge_s5l9v_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ngw: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5ngx; else goto c5ngy;
       c5ngx: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5ngy: // global
           I64[Sp - 32] = block_c5ngp_info;
           _s5l9v::P64 = R1;
           _s5l9t::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 24] = _s5l9t::P64;
           P64[Sp - 16] = _s5l9v::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5nhd; else goto c5ngq;
       u5nhd: // global
           call _c5ngp(R1) args: 0, res: 0, upd: 0;
       c5ngq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ngp() //  [R1]
         { info_tbl: [(c5ngp,
                       label: block_c5ngp_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ngp: // global
           _s5l9x::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5ngt; else goto c5ngu;
       c5ngt: // global
           R1 = _s5l9x::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5ngu: // global
           I64[Sp - 16] = block_c5ngE_info;
           _s5l9y::P64 = R1;
           _s5l9z::P64 = P64[R1 + 6];
           _s5l9A::P64 = P64[R1 + 14];
           R1 = _s5l9x::P64;
           P64[Sp - 8] = _s5l9A::P64;
           P64[Sp] = _s5l9z::P64;
           P64[Sp + 24] = _s5l9y::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5nhc; else goto c5ngG;
       u5nhc: // global
           call _c5ngE(R1) args: 0, res: 0, upd: 0;
       c5ngG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ngE() //  [R1]
         { info_tbl: [(c5ngE,
                       label: block_c5ngE_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ngE: // global
           if (R1 & 7 == 1) goto c5ngM; else goto c5ngR;
       c5ngM: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5ngR: // global
           I64[Sp - 16] = block_c5ngP_info;
           _s5l9C::P64 = P64[R1 + 6];
           R3 = _s5l9C::P64;
           R2 = P64[Sp + 16];
           _s5l9B::P64 = R1;
           _s5l9D::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp - 8] = _s5l9D::P64;
           P64[Sp] = _s5l9C::P64;
           P64[Sp + 24] = _s5l9B::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ngP() //  [R1]
         { info_tbl: [(c5ngP,
                       label: block_c5ngP_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ngP: // global
           _s5l9v::P64 = P64[Sp + 48];
           if (R1 & 7 == 3) goto c5nh6; else goto c5ngY;
       c5nh6: // global
           Hp = Hp + 64;
           _s5l9E::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5nh9; else goto c5nh8;
       c5nh8: // global
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _s5l9v::P64;
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5ngY: // global
           Hp = Hp + 64;
           _s5l9E::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5nh9; else goto c5nh0;
       c5nh9: // global
           HpAlloc = 64;
           R1 = _s5l9E::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nh0: // global
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _s5l9v::P64;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 mergePairs_s5l9H_entry() //  [R1, R2]
         { info_tbl: [(c5nho,
                       label: mergePairs_s5l9H_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nho: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5nhp; else goto c5nhq;
       c5nhp: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nhq: // global
           I64[Sp - 24] = block_c5nhh_info;
           _s5l9H::P64 = R1;
           _s5l9v::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s5l9v::P64;
           P64[Sp - 8] = _s5l9H::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5nhU; else goto c5nhi;
       u5nhU: // global
           call _c5nhh(R1) args: 0, res: 0, upd: 0;
       c5nhi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nhh() //  [R1]
         { info_tbl: [(c5nhh,
                       label: block_c5nhh_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nhh: // global
           if (R1 & 7 == 1) goto c5nhl; else goto c5nhm;
       c5nhl: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nhm: // global
           I64[Sp - 16] = block_c5nhw_info;
           _s5l9J::P64 = R1;
           _s5l9K::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s5l9K::P64;
           P64[Sp] = _s5l9J::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5nhT; else goto c5nhy;
       u5nhT: // global
           call _c5nhw(R1) args: 0, res: 0, upd: 0;
       c5nhy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nhw() //  [R1]
         { info_tbl: [(c5nhw,
                       label: block_c5nhw_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nhw: // global
           if (R1 & 7 == 1) goto c5nhE; else goto c5nhO;
       c5nhE: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5nhO: // global
           I64[Sp + 16] = block_c5nhH_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           _s5l9O::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s5l9O::P64;
           Sp = Sp + 16;
           call merge_s5l9v_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nhH() //  [R1]
         { info_tbl: [(c5nhH,
                       label: block_c5nhH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nhH: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5nhR; else goto c5nhQ;
       c5nhR: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nhQ: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl12_s5l9R_entry() //  [R1]
         { info_tbl: [(c5nhX,
                       label: lvl12_s5l9R_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nhX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nhY; else goto c5nhZ;
       c5nhY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nhZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call mergePairs_s5l9H_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5la4_entry() //  [R1, R2]
         { info_tbl: [(c5nip,
                       label: sat_s5la4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nip: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nit; else goto c5nis;
       c5nit: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nis: // global
           _s5l9Y::P64 = P64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l9Y::P64;
           P64[Hp] = R2;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sequences_s5l9S_entry() //  [R1, R2]
         { info_tbl: [(c5niy,
                       label: sequences_s5l9S_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5niy: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5niz; else goto c5niA;
       c5niz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5niA: // global
           I64[Sp - 32] = block_c5ni3_info;
           _s5l9t::P64 = P64[R1 + 7];
           _s5l9U::P64 = P64[R1 + 15];
           _s5l9V::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s5l9t::P64;
           P64[Sp - 16] = _s5l9U::P64;
           P64[Sp - 8] = _s5l9V::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5nj2; else goto c5ni4;
       u5nj2: // global
           call _c5ni3(R1) args: 0, res: 0, upd: 0;
       c5ni4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ni3() //  [R1]
         { info_tbl: [(c5ni3,
                       label: block_c5ni3_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ni3: // global
           if (R1 & 7 == 1) goto c5niv; else goto c5niw;
       c5niv: // global
           R1 = lvl6_r5kSo_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5niw: // global
           I64[Sp - 16] = block_c5ni9_info;
           _s5l9X::P64 = R1;
           _s5l9Y::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s5l9Y::P64;
           P64[Sp] = _s5l9X::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5nj1; else goto c5nia;
       u5nj1: // global
           call _c5ni9(R1) args: 0, res: 0, upd: 0;
       c5nia: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ni9() //  [R1]
         { info_tbl: [(c5ni9,
                       label: block_c5ni9_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ni9: // global
           if (R1 & 7 == 1) goto c5niH; else goto c5niM;
       c5niH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5niK; else goto c5niJ;
       c5niK: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5niJ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5niM: // global
           I64[Sp] = block_c5nif_info;
           _s5la1::P64 = P64[R1 + 6];
           R3 = _s5la1::P64;
           R2 = P64[Sp + 8];
           _s5la2::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _s5la2::P64;
           P64[Sp + 24] = _s5la1::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nif() //  [R1]
         { info_tbl: [(c5nif,
                       label: block_c5nif_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nif: // global
           _s5l9Y::P64 = P64[Sp + 8];
           _s5la1::P64 = P64[Sp + 24];
           _s5la2::P64 = P64[Sp + 16];
           if (R1 & 7 == 3) goto c5niV; else goto c5niO;
       c5niV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5niY; else goto c5niX;
       c5niY: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5niX: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l9Y::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R4 = _s5la2::P64;
           R3 = Hp - 14;
           R2 = _s5la1::P64;
           R1 = P64[Sp + 32];
           Sp = Sp + 48;
           call descending_s5l9U_entry(R4,
                                       R3,
                                       R2,
                                       R1) args: 8, res: 0, upd: 8;
       c5niO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5niR; else goto c5niQ;
       c5niR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5niQ: // global
           I64[Hp - 8] = sat_s5la4_info;
           P64[Hp] = _s5l9Y::P64;
           R4 = _s5la2::P64;
           R3 = Hp - 7;
           R2 = _s5la1::P64;
           R1 = P64[Sp + 40];
           Sp = Sp + 48;
           call ascending_s5l9V_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl13_s5l9T_entry() //  [R1]
         { info_tbl: [(c5nj5,
                       label: lvl13_s5l9T_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nj5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nj6; else goto c5nj7;
       c5nj6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nj7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call sequences_s5l9S_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 descending_s5l9U_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c5njc,
                       label: descending_s5l9U_info
                       rep:HeapRep 3 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5njc: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5njd; else goto u5njA;
       c5njd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5njA: // global
           P64[Sp - 32] = R1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call _c5nfS() args: 0, res: 0, upd: 0;
     }
 },
 _c5nfS() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nfS: // global
           I64[Sp - 24] = block_c5nfV_info;
           R1 = P64[Sp + 24];
           _s5l9U::P64 = P64[Sp];
           P64[Sp - 16] = P64[_s5l9U::P64 + 13];
           P64[Sp - 8] = P64[_s5l9U::P64 + 21];
           P64[Sp + 24] = P64[_s5l9U::P64 + 5];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5njC; else goto c5nfW;
       u5njC: // global
           call _c5nfV(R1) args: 0, res: 0, upd: 0;
       c5nfW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nfV() //  [R1]
         { info_tbl: [(c5nfV,
                       label: block_c5nfV_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nfV: // global
           _s5la6::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5nj9; else goto c5nja;
       c5nj9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5njk; else goto c5njj;
       c5njk: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5njj: // global
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5la6::P64;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nja: // global
           I64[Sp - 8] = block_c5ng1_info;
           _s5lab::P64 = P64[R1 + 6];
           R3 = _s5lab::P64;
           R2 = _s5la6::P64;
           _s5la9::P64 = R1;
           _s5lac::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5lac::P64;
           P64[Sp + 16] = _s5lab::P64;
           P64[Sp + 48] = _s5la9::P64;
           Sp = Sp - 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ng1() //  [R1]
         { info_tbl: [(c5ng1,
                       label: block_c5ng1_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ng1: // global
           _s5la6::P64 = P64[Sp + 40];
           _s5la7::P64 = P64[Sp + 48];
           if (R1 & 7 == 3) goto c5njv; else goto c5njr;
       c5njv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5njy; else goto c5njx;
       c5njy: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5njx: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5la6::P64;
           P64[Hp] = _s5la7::P64;
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = Hp - 14;
           P64[Sp + 56] = P64[Sp + 8];
           Sp = Sp + 32;
           call _c5nfS() args: 0, res: 0, upd: 0;
       c5njr: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5nju; else goto c5njt;
       c5nju: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5njt: // global
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 56];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5la6::P64;
           P64[Hp - 24] = _s5la7::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5las_entry() //  [R1, R2]
         { info_tbl: [(c5njK,
                       label: sat_s5las_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5njK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5njO; else goto c5njN;
       c5njO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5njN: // global
           _s5lah::P64 = P64[R1 + 7];
           _s5lai::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5lah::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s5lai::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 ascending_s5l9V_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c5njT,
                       label: ascending_s5l9V_info
                       rep:HeapRep 3 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5njT: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5njU; else goto u5nkw;
       c5njU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5nkw: // global
           P64[Sp - 32] = R1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call _c5ng8() args: 0, res: 0, upd: 0;
     }
 },
 _c5ng8() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ng8: // global
           I64[Sp - 24] = block_c5ngb_info;
           R1 = P64[Sp + 24];
           _s5l9V::P64 = P64[Sp];
           P64[Sp - 16] = P64[_s5l9V::P64 + 13];
           P64[Sp - 8] = P64[_s5l9V::P64 + 21];
           P64[Sp + 24] = P64[_s5l9V::P64 + 5];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5nky; else goto c5ngc;
       u5nky: // global
           call _c5ngb(R1) args: 0, res: 0, upd: 0;
       c5ngc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ngb() //  [R1]
         { info_tbl: [(c5ngb,
                       label: block_c5ngb_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ngb: // global
           _s5lah::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5njQ; else goto c5njR;
       c5njQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nk5; else goto c5nk4;
       c5nk5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nk4: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5lah::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp + 8] = block_c5njY_info;
           R2 = Hp - 14;
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c5njR: // global
           I64[Sp - 8] = block_c5ngh_info;
           _s5lan::P64 = P64[R1 + 6];
           R3 = _s5lan::P64;
           R2 = _s5lah::P64;
           _s5lak::P64 = R1;
           _s5lao::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5lao::P64;
           P64[Sp + 16] = _s5lan::P64;
           P64[Sp + 48] = _s5lak::P64;
           Sp = Sp - 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5njY() //  [R1]
         { info_tbl: [(c5njY,
                       label: block_c5njY_info
                       rep:StackRep [False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5njY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nk8; else goto c5nk7;
       c5nk8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nk7: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5ngh() //  [R1]
         { info_tbl: [(c5ngh,
                       label: block_c5ngh_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ngh: // global
           _s5lah::P64 = P64[Sp + 40];
           _s5lai::P64 = P64[Sp + 48];
           if (R1 & 7 == 3) goto c5nko; else goto c5nkb;
       c5nko: // global
           Hp = Hp + 24;
           _s5lap::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5nkr; else goto c5nkq;
       c5nkq: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5lah::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp + 8] = block_c5nki_info;
           R2 = Hp - 14;
           R1 = _s5lai::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c5nkb: // global
           Hp = Hp + 24;
           _s5lap::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5nkr; else goto c5nkd;
       c5nkr: // global
           HpAlloc = 24;
           R1 = _s5lap::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nkd: // global
           I64[Hp - 16] = sat_s5las_info;
           P64[Hp - 8] = _s5lah::P64;
           P64[Hp] = _s5lai::P64;
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = Hp - 15;
           P64[Sp + 56] = P64[Sp + 8];
           Sp = Sp + 32;
           call _c5ng8() args: 0, res: 0, upd: 0;
     }
 },
 _c5nki() //  [R1]
         { info_tbl: [(c5nki,
                       label: block_c5nki_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nki: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5nku; else goto c5nkt;
       c5nku: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nkt: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 48];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.sortBy_entry() //  [R2, R3]
         { info_tbl: [(c5nkD,
                       label: Data.OldList.sortBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nkD: // global
           _s5l9u::P64 = R3;
           _s5l9t::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c5nkE; else goto c5nkF;
       c5nkF: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c5nkH; else goto c5nkG;
       c5nkH: // global
           HpAlloc = 176;
           goto c5nkE;
       c5nkE: // global
           R3 = _s5l9u::P64;
           R2 = _s5l9t::P64;
           R1 = Data.OldList.sortBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nkG: // global
           I64[Hp - 168] = merge_s5l9v_info;
           P64[Hp - 160] = _s5l9t::P64;
           I64[Hp - 152] = mergePairs_s5l9H_info;
           P64[Hp - 144] = Hp - 166;
           I64[Hp - 136] = lvl12_s5l9R_info;
           _c5nfH::P64 = Hp - 151;
           P64[Hp - 120] = _c5nfH::P64;
           I64[Hp - 112] = sequences_s5l9S_info;
           P64[Hp - 104] = _s5l9t::P64;
           P64[Hp - 96] = Hp - 53;
           P64[Hp - 88] = Hp - 21;
           I64[Hp - 80] = lvl13_s5l9T_info;
           _c5nfL::P64 = Hp - 111;
           P64[Hp - 64] = _c5nfL::P64;
           I64[Hp - 56] = descending_s5l9U_info;
           P64[Hp - 48] = _s5l9t::P64;
           P64[Hp - 40] = _c5nfL::P64;
           _c5nfM::P64 = Hp - 80;
           P64[Hp - 32] = _c5nfM::P64;
           I64[Hp - 24] = ascending_s5l9V_info;
           P64[Hp - 16] = _s5l9t::P64;
           P64[Hp - 8] = _c5nfL::P64;
           P64[Hp] = _c5nfM::P64;
           I64[Sp - 24] = block_c5nkB_info;
           R2 = _s5l9u::P64;
           R1 = _c5nfL::P64;
           P64[Sp - 16] = _c5nfH::P64;
           P64[Sp - 8] = Hp - 136;
           Sp = Sp - 24;
           call sequences_s5l9S_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nkB() //  [R1]
         { info_tbl: [(c5nkB,
                       label: block_c5nkB_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nkB: // global
           P64[Sp] = R1;
           call _c5nkO() args: 0, res: 0, upd: 0;
     }
 },
 _c5nkO() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nkO: // global
           _s5lax::P64 = P64[Sp];
           I64[Sp] = block_c5nkQ_info;
           R1 = _s5lax::P64;
           if (R1 & 7 != 0) goto u5nlq; else goto c5nkS;
       u5nlq: // global
           call _c5nkQ(R1) args: 0, res: 0, upd: 0;
       c5nkS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nkQ() //  [R1]
         { info_tbl: [(c5nkQ,
                       label: block_c5nkQ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nkQ: // global
           if (R1 & 7 == 1) goto c5nkY; else goto c5nl3;
       c5nkY: // global
           P64[Sp] = P64[Sp + 16];
           call _c5nkO() args: 0, res: 0, upd: 0;
       c5nl3: // global
           I64[Sp - 16] = block_c5nl1_info;
           _s5lay::P64 = R1;
           _s5laz::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s5laz::P64;
           P64[Sp] = _s5lay::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5nlr; else goto c5nl4;
       u5nlr: // global
           call _c5nl1(R1) args: 0, res: 0, upd: 0;
       c5nl4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nl1() //  [R1]
         { info_tbl: [(c5nl1,
                       label: block_c5nl1_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nl1: // global
           if (R1 & 7 == 1) goto c5nla; else goto c5nlf;
       c5nla: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5nlf: // global
           _s5lay::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5nld_info;
           R2 = _s5lay::P64;
           R1 = P64[Sp + 24];
           Sp = Sp + 16;
           call mergePairs_s5l9H_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nld() //  [R1]
         { info_tbl: [(c5nld,
                       label: block_c5nld_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nld: // global
           P64[Sp] = R1;
           call _c5nkO() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.33279392 UTC

[section ""data" . Data.OldList.sortOn_closure" {
     Data.OldList.sortOn_closure:
         const Data.OldList.sortOn_info;
 },
 sat_s5laW_entry() //  [R1, R2]
         { info_tbl: [(c5nlG,
                       label: sat_s5laW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nlG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nlH; else goto c5nlI;
       c5nlH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nlI: // global
           I64[Sp - 16] = block_c5nlD_info;
           _s5laU::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s5laU::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nlD() //  [R1]
         { info_tbl: [(c5nlD,
                       label: block_c5nlD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nlD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nlL; else goto c5nlK;
       c5nlL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nlK: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5laT_entry() //  [R1, R2, R3]
         { info_tbl: [(c5nlX,
                       label: sat_s5laT_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nlX: // global
           _s5laK::P64 = R3;
           _s5laJ::P64 = R2;
           _s5laT::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5nlY; else goto c5nlZ;
       c5nlZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5nm1; else goto c5nm0;
       c5nm1: // global
           HpAlloc = 48;
           goto c5nlY;
       c5nlY: // global
           R3 = _s5laK::P64;
           R2 = _s5laJ::P64;
           R1 = _s5laT::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nm0: // global
           _s5laG::P64 = P64[_s5laT::P64 + 6];
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _s5laK::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s5laJ::P64;
           R2 = _s5laG::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 Data.OldList.sortOn_entry() //  [R2, R3, R4]
         { info_tbl: [(c5nm2,
                       label: Data.OldList.sortOn_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nm2: // global
           _s5laI::P64 = R4;
           _s5laH::P64 = R3;
           _s5laG::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c5nm4; else goto c5nm5;
       c5nm5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5nm7; else goto c5nm6;
       c5nm7: // global
           HpAlloc = 16;
           goto c5nm4;
       c5nm4: // global
           R4 = _s5laI::P64;
           R3 = _s5laH::P64;
           R2 = _s5laG::P64;
           R1 = Data.OldList.sortOn_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nm6: // global
           I64[Hp - 8] = sat_s5laW_info;
           P64[Hp] = _s5laH::P64;
           I64[Sp - 16] = block_c5nlM_info;
           R3 = _s5laI::P64;
           R2 = Hp - 7;
           P64[Sp - 8] = _s5laG::P64;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5nlM() //  [R1]
         { info_tbl: [(c5nlM,
                       label: block_c5nlM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nlM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5nma; else goto c5nm9;
       c5nma: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nm9: // global
           I64[Hp - 8] = sat_s5laT_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c5nm3_info;
           R3 = R1;
           R2 = Hp - 6;
           Sp = Sp + 8;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5nm3() //  [R1]
         { info_tbl: [(c5nm3,
                       label: block_c5nm3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nm3: // global
           R3 = R1;
           R2 = Data.Tuple.snd_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.335604671 UTC

[section ""data" . Data.OldList.sort_closure" {
     Data.OldList.sort_closure:
         const Data.OldList.sort_info;
 },
 sat_s5lb1_entry() //  [R1]
         { info_tbl: [(c5nmn,
                       label: sat_s5lb1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nmn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nmo; else goto c5nmp;
       c5nmo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nmp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.sort_entry() //  [R2, R3]
         { info_tbl: [(c5nmq,
                       label: Data.OldList.sort_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nmq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nmu; else goto c5nmt;
       c5nmu: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.sort_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nmt: // global
           I64[Hp - 16] = sat_s5lb1_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.337434221 UTC

[section ""data" . Data.OldList.unfoldr_closure" {
     Data.OldList.unfoldr_closure:
         const Data.OldList.unfoldr_info;
 },
 go_s5lb4_entry() //  [R1, R2]
         { info_tbl: [(c5nmK,
                       label: go_s5lb4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nmK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nmL; else goto c5nmM;
       c5nmL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nmM: // global
           I64[Sp - 16] = block_c5nmE_info;
           R2 = R2;
           _s5lb4::P64 = R1;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s5lb4::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nmE() //  [R1]
         { info_tbl: [(c5nmE,
                       label: block_c5nmE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nmE: // global
           if (R1 & 7 == 1) goto c5nmH; else goto c5nmI;
       c5nmH: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nmI: // global
           I64[Sp] = block_c5nmS_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u5nn3; else goto c5nmT;
       u5nn3: // global
           call _c5nmS(R1) args: 0, res: 0, upd: 0;
       c5nmT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nmS() //  [R1]
         { info_tbl: [(c5nmS,
                       label: block_c5nmS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nmS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5nn2; else goto c5nn1;
       c5nn2: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nn1: // global
           _s5lb9::P64 = P64[R1 + 7];
           _s5lba::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s5lba::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5lb9::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.unfoldr_entry() //  [R2, R3]
         { info_tbl: [(c5nn4,
                       label: Data.OldList.unfoldr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nn4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5nn8; else goto c5nn7;
       c5nn8: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.unfoldr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nn7: // global
           I64[Hp - 8] = go_s5lb4_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go_s5lb4_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.33913979 UTC

[section ""data" . lvl7_r5kSp_closure" {
     lvl7_r5kSp_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.340261056 UTC

[section ""data" . Data.OldList.unlines_closure" {
     Data.OldList.unlines_closure:
         const Data.OldList.unlines_info;
 },
 sat_s5lbg_entry() //  [R1]
         { info_tbl: [(c5nnn,
                       label: sat_s5lbg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nnn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nno; else goto c5nnp;
       c5nno: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nnp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.unlines_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.unlines_entry() //  [R2]
         { info_tbl: [(c5nnu,
                       label: Data.OldList.unlines_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nnu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5nnv; else goto c5nnw;
       c5nnv: // global
           R2 = R2;
           R1 = Data.OldList.unlines_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nnw: // global
           I64[Sp - 8] = block_c5nnd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nnD; else goto c5nne;
       u5nnD: // global
           call _c5nnd(R1) args: 0, res: 0, upd: 0;
       c5nne: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nnd() //  [R1]
         { info_tbl: [(c5nnd,
                       label: block_c5nnd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nnd: // global
           if (R1 & 7 == 1) goto c5nnr; else goto c5nns;
       c5nnr: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nns: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5nnC; else goto c5nnB;
       c5nnC: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nnB: // global
           _s5lbe::P64 = P64[R1 + 6];
           _s5lbf::P64 = P64[R1 + 14];
           I64[Hp - 40] = sat_s5lbg_info;
           P64[Hp - 24] = _s5lbf::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl7_r5kSp_closure+1;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = _s5lbe::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.343582809 UTC

[section ""data" . Data.OldList.wordsFB_closure" {
     Data.OldList.wordsFB_closure:
         const Data.OldList.wordsFB_info;
 },
 ds_s5lbq_entry() //  [R1]
         { info_tbl: [(c5nnZ,
                       label: ds_s5lbq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nnZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5no0; else goto c5no1;
       c5no0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5no1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5nnW_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.isSpace_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5nnW() //  [R1, R2]
         { info_tbl: [(c5nnW,
                       label: block_c5nnW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nnW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5no4; else goto c5no3;
       c5no4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5no3: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lbB_entry() //  [R1]
         { info_tbl: [(c5noc,
                       label: sat_s5lbB_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5noc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5nod; else goto c5noe;
       c5nod: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5noe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c5no9_info;
           _s5lbl::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s5lbl::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5noi; else goto c5noa;
       u5noi: // global
           call _c5no9(R1) args: 0, res: 0, upd: 0;
       c5noa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5no9() //  [R1]
         { info_tbl: [(c5no9,
                       label: block_c5no9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5no9: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s5lbl_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 go_s5lbl_entry() //  [R1, R2]
         { info_tbl: [(c5non,
                       label: go_s5lbl_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5non: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5noo; else goto c5nop;
       c5noo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nop: // global
           I64[Sp - 32] = block_c5nnN_info;
           R3 = R2;
           R2 = GHC.Unicode.isSpace_closure+1;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = R1;
           Sp = Sp - 32;
           call GHC.List.dropWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5nnN() //  [R1]
         { info_tbl: [(c5nnN,
                       label: block_c5nnN_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nnN: // global
           if (R1 & 7 == 1) goto c5nok; else goto c5nol;
       c5nok: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5nol: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5nov; else goto c5nou;
       c5nov: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nou: // global
           I64[Hp - 72] = ds_s5lbq_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_s5lbB_info;
           P64[Hp - 32] = P64[Sp + 24];
           _c5nnS::P64 = Hp - 72;
           P64[Hp - 24] = _c5nnS::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5nnS::P64;
           R3 = Hp - 48;
           R2 = Hp - 16;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.wordsFB_entry() //  [R2, R3, R4]
         { info_tbl: [(c5now,
                       label: Data.OldList.wordsFB_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5now: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5noA; else goto c5noz;
       c5noA: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.wordsFB_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5noz: // global
           I64[Hp - 16] = go_s5lbl_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = R4;
           R1 = Hp - 15;
           call go_s5lbl_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Data.OldList.words_closure" {
     Data.OldList.words_closure:
         const Data.OldList.words_info;
 },
 ds_s5lbG_entry() //  [R1]
         { info_tbl: [(c5noR,
                       label: ds_s5lbG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5noR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5noS; else goto c5noT;
       c5noS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5noT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5noO_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.isSpace_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5noO() //  [R1, R2]
         { info_tbl: [(c5noO,
                       label: block_c5noO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5noO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5noW; else goto c5noV;
       c5noW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5noV: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lbR_entry() //  [R1]
         { info_tbl: [(c5np4,
                       label: sat_s5lbR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5np4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5np5; else goto c5np6;
       c5np5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5np6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5np1_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5npa; else goto c5np2;
       u5npa: // global
           call _c5np1(R1) args: 0, res: 0, upd: 0;
       c5np2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5np1() //  [R1]
         { info_tbl: [(c5np1,
                       label: block_c5np1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5np1: // global
           R2 = P64[R1 + 15];
           Sp = Sp + 8;
           call Data.OldList.words_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.words_entry() //  [R2]
         { info_tbl: [(c5npf,
                       label: Data.OldList.words_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5npf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5npg; else goto c5nph;
       c5npg: // global
           R2 = R2;
           R1 = Data.OldList.words_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nph: // global
           I64[Sp - 8] = block_c5noF_info;
           R3 = R2;
           R2 = GHC.Unicode.isSpace_closure+1;
           Sp = Sp - 8;
           call GHC.List.dropWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5noF() //  [R1]
         { info_tbl: [(c5noF,
                       label: block_c5noF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5noF: // global
           if (R1 & 7 == 1) goto c5npc; else goto c5npd;
       c5npc: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5npd: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c5npo; else goto c5npn;
       c5npo: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5npn: // global
           I64[Hp - 88] = ds_s5lbG_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = sat_s5lbR_info;
           _c5noK::P64 = Hp - 88;
           P64[Hp - 48] = _c5noK::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5noK::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.34790643 UTC

[section ""data" . lvl8_r5kSq_closure" {
     lvl8_r5kSq_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.348963133 UTC

[section ""data" . Data.OldList.unwordsFB_closure" {
     Data.OldList.unwordsFB_closure:
         const Data.OldList.unwordsFB_info;
 },
 sat_s5lbU_entry() //  [R1]
         { info_tbl: [(c5npx,
                       label: sat_s5lbU_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5npx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5npy; else goto c5npz;
       c5npy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5npz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.unwordsFB_entry() //  [R2, R3]
         { info_tbl: [(c5npB,
                       label: Data.OldList.unwordsFB_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5npB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5npF; else goto c5npE;
       c5npF: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.unwordsFB_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5npE: // global
           I64[Hp - 48] = sat_s5lbU_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl8_r5kSq_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.350802343 UTC

[section ""data" . Data.OldList.unwords_go_closure" {
     Data.OldList.unwords_go_closure:
         const Data.OldList.unwords_go_info;
 },
 sat_s5lbZ_entry() //  [R1]
         { info_tbl: [(c5npY,
                       label: sat_s5lbZ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5npY: // global
           R2 = P64[R1 + 16];
           call Data.OldList.unwords_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5lc0_entry() //  [R1]
         { info_tbl: [(c5nq1,
                       label: sat_s5lc0_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nq1: // global
           _s5lc0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5nq2; else goto c5nq3;
       c5nq3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nq5; else goto c5nq4;
       c5nq5: // global
           HpAlloc = 24;
           goto c5nq2;
       c5nq2: // global
           R1 = _s5lc0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nq4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5lc0::P64;
           _s5lbX::P64 = P64[_s5lc0::P64 + 16];
           _s5lbY::P64 = P64[_s5lc0::P64 + 24];
           I64[Hp - 16] = sat_s5lbZ_info;
           P64[Hp] = _s5lbY::P64;
           R3 = Hp - 16;
           R2 = _s5lbX::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.unwords_go_entry() //  [R2]
         { info_tbl: [(c5nqa,
                       label: Data.OldList.unwords_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nqa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5nqb; else goto c5nqc;
       c5nqb: // global
           R2 = R2;
           R1 = Data.OldList.unwords_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nqc: // global
           I64[Sp - 8] = block_c5npK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nqj; else goto c5npL;
       u5nqj: // global
           call _c5npK(R1) args: 0, res: 0, upd: 0;
       c5npL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5npK() //  [R1]
         { info_tbl: [(c5npK,
                       label: block_c5npK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5npK: // global
           if (R1 & 7 == 1) goto c5nq7; else goto c5nq8;
       c5nq7: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nq8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5nqi; else goto c5nqh;
       c5nqi: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nqh: // global
           _s5lbX::P64 = P64[R1 + 6];
           _s5lbY::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s5lc0_info;
           P64[Hp - 32] = _s5lbX::P64;
           P64[Hp - 24] = _s5lbY::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl8_r5kSq_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.3534671 UTC

[section ""data" . Data.OldList.tailUnwords_closure" {
     Data.OldList.tailUnwords_closure:
         const Data.OldList.tailUnwords_info;
 },
 Data.OldList.tailUnwords_entry() //  [R2]
         { info_tbl: [(c5nqv,
                       label: Data.OldList.tailUnwords_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nqv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5nqw; else goto c5nqx;
       c5nqw: // global
           R2 = R2;
           R1 = Data.OldList.tailUnwords_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nqx: // global
           I64[Sp - 8] = block_c5nqo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nqE; else goto c5nqp;
       u5nqE: // global
           call _c5nqo(R1) args: 0, res: 0, upd: 0;
       c5nqp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nqo() //  [R1]
         { info_tbl: [(c5nqo,
                       label: block_c5nqo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nqo: // global
           if (R1 & 7 == 1) goto c5nqs; else goto c5nqt;
       c5nqs: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nqt: // global
           R1 = P64[R1 + 14] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Data.OldList.unwords_closure" {
     Data.OldList.unwords_closure:
         const Data.OldList.unwords_info;
 },
 sat_s5lc9_entry() //  [R1]
         { info_tbl: [(c5nqT,
                       label: sat_s5lc9_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nqT: // global
           R2 = P64[R1 + 16];
           call Data.OldList.unwords_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.unwords_entry() //  [R2]
         { info_tbl: [(c5nr0,
                       label: Data.OldList.unwords_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nr0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5nr1; else goto c5nr2;
       c5nr1: // global
           R2 = R2;
           R1 = Data.OldList.unwords_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nr2: // global
           I64[Sp - 8] = block_c5nqJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nr8; else goto c5nqK;
       u5nr8: // global
           call _c5nqJ(R1) args: 0, res: 0, upd: 0;
       c5nqK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nqJ() //  [R1]
         { info_tbl: [(c5nqJ,
                       label: block_c5nqJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nqJ: // global
           if (R1 & 7 == 1) goto c5nqX; else goto c5nqY;
       c5nqX: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nqY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nr7; else goto c5nr6;
       c5nr7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nr6: // global
           _s5lc7::P64 = P64[R1 + 6];
           _s5lc8::P64 = P64[R1 + 14];
           I64[Hp - 16] = sat_s5lc9_info;
           P64[Hp] = _s5lc8::P64;
           R3 = Hp - 16;
           R2 = _s5lc7::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.355668698 UTC

[section ""data" . lvl9_r5kSr_closure" {
     lvl9_r5kSr_closure:
         const lvl9_r5kSr_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r5kSr_entry() //  [R1]
         { info_tbl: [(c5nrf,
                       label: lvl9_r5kSr_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nrf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nrg; else goto c5nrh;
       c5nrg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nrh: // global
           (_c5nrc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5nrc::I64 == 0) goto c5nre; else goto c5nrd;
       c5nre: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5nrd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5nrc::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.List.reverse1_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.356775408 UTC

[section ""data" . lvl10_r5kSs_closure" {
     lvl10_r5kSs_closure:
         const lvl10_r5kSs_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_r5kSs_entry() //  [R1]
         { info_tbl: [(c5nro,
                       label: lvl10_r5kSs_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nro: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nrp; else goto c5nrq;
       c5nrp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nrq: // global
           (_c5nrl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5nrl::I64 == 0) goto c5nrn; else goto c5nrm;
       c5nrn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5nrm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5nrl::I64;
           R3 = lvl9_r5kSr_closure;
           R2 = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.360376663 UTC

[section ""data" . poly_$wgo_r5kSt_closure" {
     poly_$wgo_r5kSt_closure:
         const poly_$wgo_r5kSt_info;
         const 0;
 },
 poly_$wgo_r5kSt_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nrs: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2,
                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5lco_entry() //  [R1]
         { info_tbl: [(c5nrW,
                       label: sat_s5lco_info
                       rep:HeapRep 3 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nrW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nrX; else goto c5nrY;
       c5nrX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nrY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 32];
           R4 = P64[R1 + 16];
           R3 = I64[R1 + 40];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lcm_entry() //  [R1]
         { info_tbl: [(c5ns7,
                       label: sat_s5lcm_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ns7: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5lcn_entry() //  [R1]
         { info_tbl: [(c5nsa,
                       label: sat_s5lcn_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nsa: // global
           _s5lcn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5nsb; else goto c5nsc;
       c5nsc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nse; else goto c5nsd;
       c5nse: // global
           HpAlloc = 24;
           goto c5nsb;
       c5nsb: // global
           R1 = _s5lcn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nsd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5lcn::P64;
           _s5lcc::P64 = P64[_s5lcn::P64 + 16];
           _s5lcl::P64 = P64[_s5lcn::P64 + 24];
           I64[Hp - 16] = sat_s5lcm_info;
           P64[Hp] = _s5lcl::P64;
           R3 = Hp - 16;
           R2 = _s5lcc::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lcr_entry() //  [R1]
         { info_tbl: [(c5nss,
                       label: sat_s5lcr_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nss: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nsw; else goto c5nsv;
       c5nsw: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nsv: // global
           _s5lcd::P64 = P64[R1 + 16];
           _s5lcf::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5lcf::P64;
           P64[Hp] = _s5lcd::P64;
           R3 = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 b'_s5lcp_entry() //  [R1]
         { info_tbl: [(c5nsx,
                       label: b'_s5lcp_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nsx: // global
           _s5lcp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5nsy; else goto c5nsz;
       c5nsz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5nsB; else goto c5nsA;
       c5nsB: // global
           HpAlloc = 32;
           goto c5nsy;
       c5nsy: // global
           R1 = _s5lcp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nsA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5lcp::P64;
           _s5lcc::P64 = P64[_s5lcp::P64 + 16];
           _s5lcd::P64 = P64[_s5lcp::P64 + 24];
           _s5lcf::P64 = P64[_s5lcp::P64 + 32];
           I64[Hp - 24] = sat_s5lcr_info;
           P64[Hp - 8] = _s5lcd::P64;
           P64[Hp] = _s5lcf::P64;
           R3 = Hp - 24;
           R2 = _s5lcc::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lct_entry() //  [R1]
         { info_tbl: [(c5nsG,
                       label: sat_s5lct_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nsG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nsH; else goto c5nsI;
       c5nsH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nsI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = GHC.Types.[]_closure+1;
           R4 = P64[R1 + 24];
           R3 = I64[R1 + 32];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lcs_entry() //  [R1]
         { info_tbl: [(c5nsN,
                       label: sat_s5lcs_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nsN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nsO; else goto c5nsP;
       c5nsO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nsP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl9_r5kSr_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lcx_entry() //  [R1]
         { info_tbl: [(c5nsW,
                       label: sat_s5lcx_info
                       rep:HeapRep 3 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nsW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nsX; else goto c5nsY;
       c5nsX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nsY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 32];
           R4 = P64[R1 + 16];
           R3 = I64[R1 + 40];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lcv_entry() //  [R1]
         { info_tbl: [(c5nt7,
                       label: sat_s5lcv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nt7: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5lcw_entry() //  [R1]
         { info_tbl: [(c5nta,
                       label: sat_s5lcw_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nta: // global
           _s5lcw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5ntb; else goto c5ntc;
       c5ntc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nte; else goto c5ntd;
       c5nte: // global
           HpAlloc = 24;
           goto c5ntb;
       c5ntb: // global
           R1 = _s5lcw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ntd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5lcw::P64;
           _s5lcc::P64 = P64[_s5lcw::P64 + 16];
           _s5lcu::P64 = P64[_s5lcw::P64 + 24];
           I64[Hp - 16] = sat_s5lcv_info;
           P64[Hp] = _s5lcu::P64;
           R3 = Hp - 16;
           R2 = _s5lcc::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_$wgo_r5kSt_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5ntj,
                       label: poly_$wgo_r5kSt_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ntj: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c5ntk; else goto c5ntl;
       c5ntk: // global
           R1 = poly_$wgo_r5kSt_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c5ntl: // global
           I64[Sp - 32] = block_c5nrw_info;
           R1 = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5ntO; else goto c5nrx;
       u5ntO: // global
           call _c5nrw(R1) args: 0, res: 0, upd: 0;
       c5nrx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nrw() //  [R1]
         { info_tbl: [(c5nrw,
                       label: block_c5nrw_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nrw: // global
           if (R1 & 7 == 1) goto c5ntg; else goto c5nth;
       c5ntg: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nth: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c5ntq; else goto c5ntp;
       c5ntq: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ntp: // global
           _s5lcf::P64 = P64[R1 + 6];
           _s5lcg::P64 = P64[R1 + 14];
           _s5lch::I64 = I64[Sp + 8] + 1;
           if (_s5lch::I64 >= 255) goto c5ntD; else goto c5ntF;
       c5ntD: // global
           Hp = Hp - 128;
           _s5lck::I64 = _s5lch::I64 & (_s5lch::I64 + 1);
           if (_s5lck::I64 != 0) goto u5ntH; else goto u5ntG;
       u5ntH: // global
           I64[Sp - 16] = _s5lch::I64;
           I64[Sp - 8] = _s5lck::I64;
           P64[Sp] = _s5lcg::P64;
           P64[Sp + 8] = _s5lcf::P64;
           Sp = Sp - 16;
           call _c5nrP() args: 0, res: 0, upd: 0;
       u5ntG: // global
           I64[Sp - 16] = _s5lch::I64;
           I64[Sp - 8] = _s5lck::I64;
           P64[Sp] = _s5lcg::P64;
           P64[Sp + 8] = _s5lcf::P64;
           Sp = Sp - 16;
           call _c5nsh() args: 0, res: 0, upd: 0;
       c5ntF: // global
           I64[Hp - 120] = :_con_info;
           P64[Hp - 112] = _s5lcf::P64;
           P64[Hp - 104] = P64[Sp + 24];
           I64[Hp - 96] = sat_s5lcx_info;
           _s5lcc::P64 = P64[Sp + 16];
           P64[Hp - 80] = _s5lcc::P64;
           P64[Hp - 72] = _s5lcg::P64;
           _c5nsR::P64 = Hp - 118;
           P64[Hp - 64] = _c5nsR::P64;
           I64[Hp - 56] = _s5lch::I64;
           I64[Hp - 48] = sat_s5lcw_info;
           P64[Hp - 32] = _s5lcc::P64;
           P64[Hp - 24] = _c5nsR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5nrP() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nrP: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c5ntw; else goto c5ntv;
       c5ntw: // global
           HpAlloc = 128;
           I64[Sp - 8] = block_c5nrO_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c5ntv: // global
           I64[Hp - 120] = :_con_info;
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 40];
           I64[Hp - 96] = sat_s5lco_info;
           _s5lcc::P64 = P64[Sp + 32];
           P64[Hp - 80] = _s5lcc::P64;
           P64[Hp - 72] = P64[Sp + 16];
           _c5nrR::P64 = Hp - 118;
           P64[Hp - 64] = _c5nrR::P64;
           I64[Hp - 56] = I64[Sp];
           I64[Hp - 48] = sat_s5lcn_info;
           P64[Hp - 32] = _s5lcc::P64;
           P64[Hp - 24] = _c5nrR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5nrO() //  [R1]
         { info_tbl: [(c5nrO,
                       label: block_c5nrO_info
                       rep:StackRep [True, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nrO: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c5nrP() args: 0, res: 0, upd: 0;
     }
 },
 _c5nsh() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nsh: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c5ntB; else goto c5ntA;
       c5ntB: // global
           HpAlloc = 128;
           I64[Sp - 8] = block_c5nsg_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c5ntA: // global
           I64[Hp - 120] = b'_s5lcp_info;
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 24];
           I64[Hp - 80] = sat_s5lct_info;
           P64[Hp - 64] = P64[Sp + 16];
           _c5nsj::P64 = Hp - 120;
           P64[Hp - 56] = _c5nsj::P64;
           I64[Hp - 48] = I64[Sp];
           I64[Hp - 40] = sat_s5lcs_info;
           P64[Hp - 24] = _c5nsj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5nsg() //  [R1]
         { info_tbl: [(c5nsg,
                       label: block_c5nsg_info
                       rep:StackRep [True, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nsg: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c5nsh() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.368470361 UTC

[section ""data" . Data.OldList.$winits_closure" {
     Data.OldList.$winits_closure:
         const Data.OldList.$winits_info;
         const 0;
 },
 sat_s5lcz_entry() //  [R1]
         { info_tbl: [(c5ntX,
                       label: sat_s5lcz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ntX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5ntY; else goto c5ntZ;
       c5ntY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ntZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.[]_closure+1;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$winits_entry() //  [R2]
         { info_tbl: [(c5nu0,
                       label: Data.OldList.$winits_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nu0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nu4; else goto c5nu3;
       c5nu4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.OldList.$winits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nu3: // global
           I64[Hp - 16] = sat_s5lcz_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = lvl10_r5kSs_closure;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.370227336 UTC

[section ""data" . Data.OldList.inits_closure" {
     Data.OldList.inits_closure:
         const Data.OldList.inits_info;
         const 0;
 },
 Data.OldList.inits_entry() //  [R2]
         { info_tbl: [(c5nuc,
                       label: Data.OldList.inits_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nuc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5nud; else goto c5nue;
       c5nud: // global
           R2 = R2;
           R1 = Data.OldList.inits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nue: // global
           I64[Sp - 8] = block_c5nu9_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$winits_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5nu9() //  [R1, R2]
         { info_tbl: [(c5nu9,
                       label: block_c5nu9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nu9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nuh; else goto c5nug;
       c5nuh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5nug: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.371435326 UTC

[section ""cstring" . Data.OldList.$tc'SnocBuilder3_bytes" {
     Data.OldList.$tc'SnocBuilder3_bytes:
         I8[] [39,83,110,111,99,66,117,105,108,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.371989656 UTC

[section ""data" . Data.OldList.$tc'SnocBuilder2_closure" {
     Data.OldList.$tc'SnocBuilder2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.OldList.$tc'SnocBuilder3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.372564704 UTC

[section ""cstring" . Data.OldList.$tcSnocBuilder2_bytes" {
     Data.OldList.$tcSnocBuilder2_bytes:
         I8[] [83,110,111,99,66,117,105,108,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.373111033 UTC

[section ""data" . Data.OldList.$tcSnocBuilder1_closure" {
     Data.OldList.$tcSnocBuilder1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.OldList.$tcSnocBuilder2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.373686365 UTC

[section ""cstring" . Data.OldList.$trModule2_bytes" {
     Data.OldList.$trModule2_bytes:
         I8[] [68,97,116,97,46,79,108,100,76,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.374222699 UTC

[section ""data" . Data.OldList.$trModule1_closure" {
     Data.OldList.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.OldList.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.374764393 UTC

[section ""cstring" . Data.OldList.$trModule4_bytes" {
     Data.OldList.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.375299923 UTC

[section ""data" . Data.OldList.$trModule3_closure" {
     Data.OldList.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.OldList.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.375822143 UTC

[section ""data" . Data.OldList.$trModule_closure" {
     Data.OldList.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.OldList.$trModule3_closure+1;
         const Data.OldList.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.376465091 UTC

[section ""data" . Data.OldList.$tcSnocBuilder_closure" {
     Data.OldList.$tcSnocBuilder_closure:
         const GHC.Types.TyCon_con_info;
         const Data.OldList.$trModule_closure+1;
         const Data.OldList.$tcSnocBuilder1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 17650604350574790456;
         const 3021529305462083578;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.377088594 UTC

[section ""data" . $krep_r5kSu_closure" {
     $krep_r5kSu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.377794279 UTC

[section ""data" . $krep1_r5kSv_closure" {
     $krep1_r5kSv_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.378394242 UTC

[section ""data" . $krep2_r5kSw_closure" {
     $krep2_r5kSw_closure:
         const :_con_info;
         const $krep1_r5kSv_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.379002789 UTC

[section ""data" . $krep3_r5kSx_closure" {
     $krep3_r5kSx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep2_r5kSw_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.379646422 UTC

[section ""data" . $krep4_r5kSy_closure" {
     $krep4_r5kSy_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.OldList.$tcSnocBuilder_closure+1;
         const $krep2_r5kSw_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.380253413 UTC

[section ""data" . $krep5_r5kSz_closure" {
     $krep5_r5kSz_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5kSx_closure+1;
         const $krep4_r5kSy_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.380834143 UTC

[section ""data" . $krep6_r5kSA_closure" {
     $krep6_r5kSA_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5kSx_closure+1;
         const $krep5_r5kSz_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.381653206 UTC

[section ""data" . Data.OldList.$tc'SnocBuilder1_closure" {
     Data.OldList.$tc'SnocBuilder1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r5kSu_closure+1;
         const $krep6_r5kSA_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.382283157 UTC

[section ""data" . Data.OldList.$tc'SnocBuilder_closure" {
     Data.OldList.$tc'SnocBuilder_closure:
         const GHC.Types.TyCon_con_info;
         const Data.OldList.$trModule_closure+1;
         const Data.OldList.$tc'SnocBuilder2_closure+1;
         const Data.OldList.$tc'SnocBuilder1_closure+4;
         const 6719263830224029004;
         const 9134053658265160069;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.383419993 UTC

[section ""data" . lvl11_r5kSB_closure" {
     lvl11_r5kSB_closure:
         const lvl11_r5kSB_info;
 },
 lvl11_r5kSB_entry() //  [R2]
         { info_tbl: [(c5nup,
                       label: lvl11_r5kSB_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nup: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5nuq; else goto c5nur;
       c5nuq: // global
           R2 = R2;
           R1 = lvl11_r5kSB_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nur: // global
           I64[Sp - 8] = block_c5num_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nuz; else goto c5nun;
       u5nuz: // global
           call _c5num(R1) args: 0, res: 0, upd: 0;
       c5nun: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5num() //  [R1]
         { info_tbl: [(c5num,
                       label: block_c5num_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5num: // global
           if (I64[R1 + 7] == 10) goto c5nuy; else goto c5nux;
       c5nuy: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nux: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.385520909 UTC

[section ""data" . Data.OldList.lines_closure" {
     Data.OldList.lines_closure:
         const Data.OldList.lines_info;
 },
 sat_s5lcT_entry() //  [R1]
         { info_tbl: [(c5nv1,
                       label: sat_s5lcT_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nv1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5nv2; else goto c5nv3;
       c5nv2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nv3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5nuU_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5nva; else goto c5nuV;
       u5nva: // global
           call _c5nuU(R1) args: 0, res: 0, upd: 0;
       c5nuV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5nuU() //  [R1]
         { info_tbl: [(c5nuU,
                       label: block_c5nuU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nuU: // global
           if (R1 & 7 == 1) goto c5nuY; else goto c5nuZ;
       c5nuY: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5nuZ: // global
           R2 = P64[R1 + 14];
           Sp = Sp + 8;
           call Data.OldList.lines_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 ds1_s5lcM_entry() //  [R1]
         { info_tbl: [(c5nvc,
                       label: ds1_s5lcM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nvc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5nvd; else goto c5nve;
       c5nvd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nve: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5nuO_info;
           R3 = P64[R1 + 16];
           R2 = lvl11_r5kSB_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5nuO() //  [R1, R2]
         { info_tbl: [(c5nuO,
                       label: block_c5nuO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nuO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5nvh; else goto c5nvg;
       c5nvh: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5nvg: // global
           I64[Hp - 40] = sat_s5lcT_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.lines_entry() //  [R2]
         { info_tbl: [(c5nvm,
                       label: Data.OldList.lines_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nvm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5nvn; else goto c5nvo;
       c5nvn: // global
           R2 = R2;
           R1 = Data.OldList.lines_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nvo: // global
           I64[Sp - 8] = block_c5nuE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nvx; else goto c5nuF;
       u5nvx: // global
           call _c5nuE(R1) args: 0, res: 0, upd: 0;
       c5nuF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nuE() //  [R1]
         { info_tbl: [(c5nuE,
                       label: block_c5nuE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nuE: // global
           if (R1 & 7 == 1) goto c5nvj; else goto c5nvk;
       c5nvj: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nvk: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c5nvw; else goto c5nvv;
       c5nvw: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nvv: // global
           I64[Hp - 88] = ds1_s5lcM_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c5nuK::P64 = Hp - 88;
           P64[Hp - 48] = _c5nuK::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5nuK::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.388161441 UTC

[section ""data" . Data.OldList.SnocBuilder_closure" {
     Data.OldList.SnocBuilder_closure:
         const Data.OldList.SnocBuilder_info;
 },
 Data.OldList.SnocBuilder_entry() //  [R2, R3, R4]
         { info_tbl: [(c5nvD,
                       label: Data.OldList.SnocBuilder_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nvD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5nvH; else goto c5nvG;
       c5nvH: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.SnocBuilder_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nvG: // global
           I64[Hp - 24] = Data.OldList.SnocBuilder_con_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           I64[Hp] = R2;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.389153744 UTC

[Data.OldList.SnocBuilder_con_entry() //  [R1]
         { info_tbl: [(c5nvI,
                       label: Data.OldList.SnocBuilder_con_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,68,97,116,97,46,79,108,100,76,105,115,116,46,83,110,111,99,66,117,105,108,100,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nvI: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.389929262 UTC

[section ""relreadonly" . S5lDv_srt" {
     S5lDv_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.OldList.maximumBy_closure;
         const Data.OldList.maximumBy1_closure;
         const Data.OldList.minimumBy_closure;
         const Data.OldList.minimumBy1_closure;
         const sat_s5l01_closure;
         const Data.OldList.genericLength2_closure;
         const Data.OldList.genericLength1_closure;
         const Data.OldList.strictGenericLength_closure;
         const Data.OldList.genericLength_closure;
         const Data.OldList.genericTake_closure;
         const Data.OldList.genericReplicate_closure;
         const Data.OldList.genericDrop_closure;
         const Data.OldList.$wgenericSplitAt_closure;
         const Data.OldList.genericSplitAt_closure;
         const Data.OldList.genericIndex_closure;
         const lvl3_r5kSk_closure;
         const lvl5_r5kSm_closure;
         const lvl9_r5kSr_closure;
         const poly_$wgo_r5kSt_closure;
         const Data.OldList.$winits_closure;
         const lvl10_r5kSs_closure;
         const Data.OldList.inits_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.390924811 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:19.392606319 UTC

[section ""data" . Data.OldList.$WSnocBuilder_closure" {
     Data.OldList.$WSnocBuilder_closure:
         const Data.OldList.$WSnocBuilder_info;
 },
 Data.OldList.$WSnocBuilder_entry() //  [R2, R3, R4]
         { info_tbl: [(c5nvR,
                       label: Data.OldList.$WSnocBuilder_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nvR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5nvV; else goto c5nvW;
       c5nvV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$WSnocBuilder_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nvW: // global
           I64[Sp - 24] = block_c5nvO_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5nw0; else goto c5nvP;
       u5nw0: // global
           call _c5nvO(R1) args: 0, res: 0, upd: 0;
       c5nvP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nvO() //  [R1]
         { info_tbl: [(c5nvO,
                       label: block_c5nvO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nvO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5nvZ; else goto c5nvY;
       c5nvZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nvY: // global
           _s5kSH::I64 = I64[R1 + 7];
           I64[Hp - 24] = Data.OldList.SnocBuilder_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = _s5kSH::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.405069769 UTC

[section ""data" . Data.OldList.dropWhileEnd_closure" {
     Data.OldList.dropWhileEnd_closure:
         const Data.OldList.dropWhileEnd_info;
 },
 go_s5kSK_entry() //  [R1, R2]
         { info_tbl: [(c5nwt,
                       label: go_s5kSK_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nwt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5nwu; else goto c5nwv;
       c5nwu: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nwv: // global
           I64[Sp - 24] = block_c5nwm_info;
           _s5kSK::P64 = R1;
           _s5kSI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s5kSI::P64;
           P64[Sp - 8] = _s5kSK::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5nxa; else goto c5nwn;
       u5nxa: // global
           call _c5nwm(R1) args: 0, res: 0, upd: 0;
       c5nwn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nwm() //  [R1]
         { info_tbl: [(c5nwm,
                       label: block_c5nwm_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nwm: // global
           if (R1 & 7 == 1) goto u5nx7; else goto c5nwr;
       u5nx7: // global
           Sp = Sp + 24;
           call _c5nwX() args: 0, res: 0, upd: 0;
       c5nwr: // global
           I64[Sp - 8] = block_c5nwB_info;
           _s5kSN::P64 = P64[R1 + 6];
           R2 = _s5kSN::P64;
           _s5kSO::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s5kSO::P64;
           P64[Sp + 8] = _s5kSN::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nwB() //  [R1]
         { info_tbl: [(c5nwB,
                       label: block_c5nwB_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nwB: // global
           _s5kSK::P64 = P64[Sp + 24];
           _s5kSO::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5nwJ; else goto c5nwR;
       c5nwJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5nwM; else goto c5nwL;
       c5nwM: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nwL: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s5kSK::P64;
           P64[Hp - 24] = _s5kSO::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nwR: // global
           I64[Sp + 8] = block_c5nwP_info;
           R2 = _s5kSO::P64;
           R1 = _s5kSK::P64;
           Sp = Sp + 8;
           call go_s5kSK_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nwP() //  [R1]
         { info_tbl: [(c5nwP,
                       label: block_c5nwP_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nwP: // global
           if (R1 & 7 == 1) goto u5nx8; else goto c5nx1;
       u5nx8: // global
           Sp = Sp + 24;
           call _c5nwX() args: 0, res: 0, upd: 0;
       c5nx1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nx4; else goto c5nx3;
       c5nx4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nx3: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5nwX() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nwX: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.dropWhileEnd_entry() //  [R2, R3]
         { info_tbl: [(c5nxc,
                       label: Data.OldList.dropWhileEnd_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nxc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5nxg; else goto c5nxf;
       c5nxg: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.dropWhileEnd_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nxf: // global
           I64[Hp - 8] = go_s5kSK_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go_s5kSK_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.425886976 UTC

[section ""data" . Data.OldList.stripPrefix_closure" {
     Data.OldList.stripPrefix_closure:
         const Data.OldList.stripPrefix_info;
 },
 Data.OldList.stripPrefix_entry() //  [R2, R3, R4]
         { info_tbl: [(c5nxY,
                       label: Data.OldList.stripPrefix_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nxY: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c5nxZ; else goto u5nyz;
       c5nxZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.stripPrefix_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5nyz: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5nxO() args: 0, res: 0, upd: 0;
     }
 },
 _c5nxO() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nxO: // global
           I64[Sp - 8] = block_c5nxR_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nyD; else goto c5nxS;
       u5nyD: // global
           call _c5nxR(R1) args: 0, res: 0, upd: 0;
       c5nxS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nxR() //  [R1]
         { info_tbl: [(c5nxR,
                       label: block_c5nxR_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nxR: // global
           _s5kSW::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5nxV; else goto c5nxW;
       c5nxV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5ny6; else goto c5ny5;
       c5ny6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ny5: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s5kSW::P64;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nxW: // global
           I64[Sp] = block_c5ny9_info;
           _s5kSY::P64 = P64[R1 + 6];
           _s5kSZ::P64 = P64[R1 + 14];
           R1 = _s5kSW::P64;
           P64[Sp + 16] = _s5kSZ::P64;
           P64[Sp + 24] = _s5kSY::P64;
           if (R1 & 7 != 0) goto u5nyE; else goto c5nyb;
       u5nyE: // global
           call _c5ny9(R1) args: 0, res: 0, upd: 0;
       c5nyb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ny9() //  [R1]
         { info_tbl: [(c5ny9,
                       label: block_c5ny9_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ny9: // global
           if (R1 & 7 == 1) goto u5nyA; else goto c5nym;
       u5nyA: // global
           Sp = Sp + 32;
           call _c5nys() args: 0, res: 0, upd: 0;
       c5nym: // global
           I64[Sp] = block_c5nyk_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5nyk() //  [R1]
         { info_tbl: [(c5nyk,
                       label: block_c5nyk_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nyk: // global
           if (R1 & 7 == 1) goto u5nyB; else goto c5nyw;
       u5nyB: // global
           Sp = Sp + 32;
           call _c5nys() args: 0, res: 0, upd: 0;
       c5nyw: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 24];
           Sp = Sp + 8;
           call _c5nxO() args: 0, res: 0, upd: 0;
     }
 },
 _c5nys() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nys: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.443486465 UTC

[section ""data" . Data.OldList.find_closure" {
     Data.OldList.find_closure:
         const Data.OldList.find_info;
 },
 Data.OldList.find_entry() //  [R2, R3]
         { info_tbl: [(c5nzn,
                       label: Data.OldList.find_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nzn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5nzo; else goto c5nzp;
       c5nzo: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.find_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nzp: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c5nzr() args: 0, res: 0, upd: 0;
     }
 },
 _c5nzr() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nzr: // global
           I64[Sp - 8] = block_c5nzt_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nzZ; else goto c5nzv;
       u5nzZ: // global
           call _c5nzt(R1) args: 0, res: 0, upd: 0;
       c5nzv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nzt() //  [R1]
         { info_tbl: [(c5nzt,
                       label: block_c5nzt_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nzt: // global
           if (R1 & 7 == 1) goto c5nzB; else goto c5nzG;
       c5nzB: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nzG: // global
           I64[Sp - 8] = block_c5nzE_info;
           _s5kT9::P64 = P64[R1 + 6];
           R2 = _s5kT9::P64;
           _s5kTa::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s5kTa::P64;
           P64[Sp + 16] = _s5kT9::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nzE() //  [R1]
         { info_tbl: [(c5nzE,
                       label: block_c5nzE_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nzE: // global
           if (R1 & 7 == 1) goto c5nzM; else goto c5nzQ;
       c5nzM: // global
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c5nzr() args: 0, res: 0, upd: 0;
       c5nzQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5nzT; else goto c5nzS;
       c5nzT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nzS: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.455945137 UTC

[section ""data" . Data.OldList.elemIndex_closure" {
     Data.OldList.elemIndex_closure:
         const Data.OldList.elemIndex_info;
 },
 p_s5kTe_entry() //  [R1]
         { info_tbl: [(c5nAv,
                       label: p_s5kTe_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nAv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5nAw; else goto c5nAx;
       c5nAw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nAx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5kTp_entry() //  [R1, R2]
         { info_tbl: [(c5nAF,
                       label: sat_s5kTp_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nAF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5nAG; else goto c5nAH;
       c5nAG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nAH: // global
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = R2;
           I64[Sp - 8] = 0;
           Sp = Sp - 24;
           call _c5nAI() args: 0, res: 0, upd: 0;
     }
 },
 _c5nAI() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nAI: // global
           I64[Sp - 8] = block_c5nAL_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nBj; else goto c5nAN;
       u5nBj: // global
           call _c5nAL(R1) args: 0, res: 0, upd: 0;
       c5nAN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nAL() //  [R1]
         { info_tbl: [(c5nAL,
                       label: block_c5nAL_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nAL: // global
           if (R1 & 7 == 1) goto c5nAT; else goto c5nAY;
       c5nAT: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nAY: // global
           I64[Sp] = block_c5nAW_info;
           R2 = P64[R1 + 6];
           _s5kTl::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 16] = _s5kTl::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nAW() //  [R1]
         { info_tbl: [(c5nAW,
                       label: block_c5nAW_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nAW: // global
           _s5kTi::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto c5nB4; else goto c5nB9;
       c5nB4: // global
           P64[Sp + 16] = P64[Sp + 16];
           I64[Sp + 24] = _s5kTi::I64 + 1;
           Sp = Sp + 8;
           call _c5nAI() args: 0, res: 0, upd: 0;
       c5nB9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5nBc; else goto c5nBb;
       c5nBc: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nBb: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s5kTi::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.elemIndex_entry() //  [R2, R3]
         { info_tbl: [(c5nBl,
                       label: Data.OldList.elemIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nBl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5nBp; else goto c5nBo;
       c5nBp: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.elemIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nBo: // global
           I64[Hp - 40] = p_s5kTe_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s5kTp_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.470177487 UTC

[section ""data" . Data.OldList.findIndex_closure" {
     Data.OldList.findIndex_closure:
         const Data.OldList.findIndex_info;
 },
 Data.OldList.findIndex_entry() //  [R2, R3]
         { info_tbl: [(c5nC4,
                       label: Data.OldList.findIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nC4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5nC5; else goto c5nC6;
       c5nC5: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.findIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nC6: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = 0;
           Sp = Sp - 24;
           call _c5nC7() args: 0, res: 0, upd: 0;
     }
 },
 _c5nC7() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nC7: // global
           I64[Sp - 8] = block_c5nCa_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nCI; else goto c5nCc;
       u5nCI: // global
           call _c5nCa(R1) args: 0, res: 0, upd: 0;
       c5nCc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nCa() //  [R1]
         { info_tbl: [(c5nCa,
                       label: block_c5nCa_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nCa: // global
           if (R1 & 7 == 1) goto c5nCi; else goto c5nCn;
       c5nCi: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nCn: // global
           I64[Sp] = block_c5nCl_info;
           R2 = P64[R1 + 6];
           _s5kTx::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 16] = _s5kTx::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nCl() //  [R1]
         { info_tbl: [(c5nCl,
                       label: block_c5nCl_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nCl: // global
           _s5kTu::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto c5nCt; else goto c5nCy;
       c5nCt: // global
           P64[Sp + 16] = P64[Sp + 16];
           I64[Sp + 24] = _s5kTu::I64 + 1;
           Sp = Sp + 8;
           call _c5nC7() args: 0, res: 0, upd: 0;
       c5nCy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5nCB; else goto c5nCA;
       c5nCB: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nCA: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s5kTu::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.480474966 UTC

[section ""data" . Data.OldList.findIndices_closure" {
     Data.OldList.findIndices_closure:
         const Data.OldList.findIndices_info;
 },
 sat_s5kTN_entry() //  [R1]
         { info_tbl: [(c5nDx,
                       label: sat_s5kTN_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nDx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nDy; else goto c5nDz;
       c5nDy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nDz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 32] + 1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s5kTD_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 go_s5kTD_entry() //  [R1, R2, R3]
         { info_tbl: [(c5nDE,
                       label: go_s5kTD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 14} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nDE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5nDF; else goto u5nDW;
       c5nDF: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5nDW: // global
           P64[Sp - 24] = R1;
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           call _c5nDd() args: 0, res: 0, upd: 0;
     }
 },
 _c5nDd() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nDd: // global
           _s5kTB::P64 = P64[P64[Sp] + 6];
           I64[Sp - 8] = block_c5nDg_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5kTB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nDY; else goto c5nDh;
       u5nDY: // global
           call _c5nDg(R1) args: 0, res: 0, upd: 0;
       c5nDh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nDg() //  [R1]
         { info_tbl: [(c5nDg,
                       label: block_c5nDg_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nDg: // global
           if (R1 & 7 == 1) goto c5nDB; else goto c5nDC;
       c5nDB: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nDC: // global
           I64[Sp] = block_c5nDm_info;
           R2 = P64[R1 + 6];
           _s5kTI::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s5kTI::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nDm() //  [R1]
         { info_tbl: [(c5nDm,
                       label: block_c5nDm_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nDm: // global
           _s5kTF::I64 = I64[Sp + 24];
           _s5kTI::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5nDN; else goto c5nDQ;
       c5nDN: // global
           P64[Sp + 16] = _s5kTI::P64;
           I64[Sp + 24] = _s5kTF::I64 + 1;
           Sp = Sp + 8;
           call _c5nDd() args: 0, res: 0, upd: 0;
       c5nDQ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5nDT; else goto c5nDS;
       c5nDT: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nDS: // global
           I64[Hp - 72] = sat_s5kTN_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = _s5kTI::P64;
           I64[Hp - 40] = _s5kTF::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s5kTF::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.findIndices_entry() //  [R2, R3]
         { info_tbl: [(c5nE1,
                       label: Data.OldList.findIndices_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nE1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5nE5; else goto c5nE4;
       c5nE5: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.findIndices_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nE4: // global
           I64[Hp - 8] = go_s5kTD_info;
           P64[Hp] = R2;
           _s5kTC::P64 = R3;
           R3 = 0;
           R2 = _s5kTC::P64;
           R1 = Hp - 6;
           call go_s5kTD_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.49609677 UTC

[section ""data" . Data.OldList.elemIndices_closure" {
     Data.OldList.elemIndices_closure:
         const Data.OldList.elemIndices_info;
 },
 sat_s5kTQ_entry() //  [R1]
         { info_tbl: [(c5nEL,
                       label: sat_s5kTQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nEL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5nEM; else goto c5nEN;
       c5nEM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nEN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.OldList.elemIndices_entry() //  [R2, R3]
         { info_tbl: [(c5nEO,
                       label: Data.OldList.elemIndices_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nEO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5nES; else goto c5nER;
       c5nES: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.elemIndices_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nER: // global
           I64[Hp - 24] = sat_s5kTQ_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Data.OldList.findIndices_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.502511989 UTC

[section ""data" . Data.OldList.isPrefixOf_closure" {
     Data.OldList.isPrefixOf_closure:
         const Data.OldList.isPrefixOf_info;
 },
 Data.OldList.isPrefixOf_entry() //  [R2, R3, R4]
         { info_tbl: [(c5nFd,
                       label: Data.OldList.isPrefixOf_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nFd: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c5nFe; else goto u5nFL;
       c5nFe: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.isPrefixOf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5nFL: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5nF3() args: 0, res: 0, upd: 0;
     }
 },
 _c5nF3() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nF3: // global
           I64[Sp - 8] = block_c5nF6_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nFP; else goto c5nF7;
       u5nFP: // global
           call _c5nF6(R1) args: 0, res: 0, upd: 0;
       c5nF7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nF6() //  [R1]
         { info_tbl: [(c5nF6,
                       label: block_c5nF6_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nF6: // global
           if (R1 & 7 == 1) goto c5nFa; else goto c5nFb;
       c5nFa: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nFb: // global
           I64[Sp] = block_c5nFl_info;
           _s5kTV::P64 = P64[R1 + 6];
           _s5kTW::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _s5kTW::P64;
           P64[Sp + 24] = _s5kTV::P64;
           if (R1 & 7 != 0) goto u5nFQ; else goto c5nFn;
       u5nFQ: // global
           call _c5nFl(R1) args: 0, res: 0, upd: 0;
       c5nFn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nFl() //  [R1]
         { info_tbl: [(c5nFl,
                       label: block_c5nFl_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nFl: // global
           if (R1 & 7 == 1) goto u5nFM; else goto c5nFy;
       u5nFM: // global
           Sp = Sp + 32;
           call _c5nFE() args: 0, res: 0, upd: 0;
       c5nFy: // global
           I64[Sp] = block_c5nFw_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5nFw() //  [R1]
         { info_tbl: [(c5nFw,
                       label: block_c5nFw_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nFw: // global
           if (R1 & 7 == 1) goto u5nFN; else goto c5nFI;
       u5nFN: // global
           Sp = Sp + 32;
           call _c5nFE() args: 0, res: 0, upd: 0;
       c5nFI: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 24];
           Sp = Sp + 8;
           call _c5nF3() args: 0, res: 0, upd: 0;
     }
 },
 _c5nFE() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nFE: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.515197215 UTC

[section ""data" . Data.OldList.isInfixOf_closure" {
     Data.OldList.isInfixOf_closure:
         const Data.OldList.isInfixOf_info;
 },
 Data.OldList.isInfixOf_entry() //  [R2, R3, R4]
         { info_tbl: [(c5nGz,
                       label: Data.OldList.isInfixOf_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nGz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5nGA; else goto c5nGB;
       c5nGA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.isInfixOf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nGB: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5nGD() args: 0, res: 0, upd: 0;
     }
 },
 _c5nGD() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nGD: // global
           I64[Sp - 8] = block_c5nGF_info;
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           Sp = Sp - 8;
           call Data.OldList.isPrefixOf_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5nGF() //  [R1]
         { info_tbl: [(c5nGF,
                       label: block_c5nGF_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nGF: // global
           if (R1 & 7 == 1) goto c5nGN; else goto c5nH2;
       c5nGN: // global
           I64[Sp] = block_c5nGK_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u5nH8; else goto c5nGO;
       u5nH8: // global
           call _c5nGK(R1) args: 0, res: 0, upd: 0;
       c5nGO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5nH2: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5nGK() //  [R1]
         { info_tbl: [(c5nGK,
                       label: block_c5nGK_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nGK: // global
           if (R1 & 7 == 1) goto c5nGU; else goto c5nGY;
       c5nGU: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nGY: // global
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp + 8;
           call _c5nGD() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.528401062 UTC

[section ""data" . Data.OldList.dropLength_closure" {
     Data.OldList.dropLength_closure:
         const Data.OldList.dropLength_info;
 },
 Data.OldList.dropLength_entry() //  [R2, R3]
         { info_tbl: [(c5nHG,
                       label: Data.OldList.dropLength_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nHG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nHH; else goto u5nI2;
       c5nHH: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.dropLength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5nI2: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c5nHw() args: 0, res: 0, upd: 0;
     }
 },
 _c5nHw() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nHw: // global
           _s5kUa::P64 = P64[Sp];
           I64[Sp] = block_c5nHz_info;
           R1 = _s5kUa::P64;
           if (R1 & 7 != 0) goto u5nI4; else goto c5nHA;
       u5nI4: // global
           call _c5nHz(R1) args: 0, res: 0, upd: 0;
       c5nHA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nHz() //  [R1]
         { info_tbl: [(c5nHz,
                       label: block_c5nHz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nHz: // global
           _s5kUb::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5nHD; else goto c5nHE;
       c5nHD: // global
           R1 = _s5kUb::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5nHE: // global
           I64[Sp] = block_c5nHO_info;
           _s5kUe::P64 = P64[R1 + 14];
           R1 = _s5kUb::P64;
           P64[Sp + 8] = _s5kUe::P64;
           if (R1 & 7 != 0) goto u5nI5; else goto c5nHQ;
       u5nI5: // global
           call _c5nHO(R1) args: 0, res: 0, upd: 0;
       c5nHQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nHO() //  [R1]
         { info_tbl: [(c5nHO,
                       label: block_c5nHO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nHO: // global
           if (R1 & 7 == 1) goto c5nHW; else goto c5nI0;
       c5nHW: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nI0: // global
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 14];
           call _c5nHw() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.542759948 UTC

[section ""data" . Data.OldList.dropLengthMaybe_closure" {
     Data.OldList.dropLengthMaybe_closure:
         const Data.OldList.dropLengthMaybe_info;
 },
 Data.OldList.dropLengthMaybe_entry() //  [R2, R3]
         { info_tbl: [(c5nIH,
                       label: Data.OldList.dropLengthMaybe_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nIH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nII; else goto u5nJ6;
       c5nII: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.dropLengthMaybe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5nJ6: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c5nIx() args: 0, res: 0, upd: 0;
     }
 },
 _c5nIx() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nIx: // global
           _s5kUi::P64 = P64[Sp];
           I64[Sp] = block_c5nIA_info;
           R1 = _s5kUi::P64;
           if (R1 & 7 != 0) goto u5nJ8; else goto c5nIB;
       u5nJ8: // global
           call _c5nIA(R1) args: 0, res: 0, upd: 0;
       c5nIB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nIA() //  [R1]
         { info_tbl: [(c5nIA,
                       label: block_c5nIA_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nIA: // global
           _s5kUj::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5nIE; else goto c5nIF;
       c5nIE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5nIP; else goto c5nIO;
       c5nIP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nIO: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s5kUj::P64;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nIF: // global
           I64[Sp] = block_c5nIS_info;
           _s5kUm::P64 = P64[R1 + 14];
           R1 = _s5kUj::P64;
           P64[Sp + 8] = _s5kUm::P64;
           if (R1 & 7 != 0) goto u5nJ9; else goto c5nIU;
       u5nJ9: // global
           call _c5nIS(R1) args: 0, res: 0, upd: 0;
       c5nIU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nIS() //  [R1]
         { info_tbl: [(c5nIS,
                       label: block_c5nIS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nIS: // global
           if (R1 & 7 == 1) goto c5nJ0; else goto c5nJ4;
       c5nJ0: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nJ4: // global
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 14];
           call _c5nIx() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.555382817 UTC

[section ""data" . Data.OldList.isSuffixOf_closure" {
     Data.OldList.isSuffixOf_closure:
         const Data.OldList.isSuffixOf_info;
 },
 Data.OldList.isSuffixOf_entry() //  [R2, R3, R4]
         { info_tbl: [(c5nJJ,
                       label: Data.OldList.isSuffixOf_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nJJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5nJK; else goto c5nJL;
       c5nJK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.isSuffixOf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nJL: // global
           I64[Sp - 32] = block_c5nJD_info;
           _s5kUr::P64 = R3;
           R3 = R4;
           _s5kUq::P64 = R2;
           R2 = _s5kUr::P64;
           P64[Sp - 24] = _s5kUq::P64;
           P64[Sp - 16] = _s5kUr::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.OldList.dropLengthMaybe_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5nJD() //  [R1]
         { info_tbl: [(c5nJD,
                       label: block_c5nJD_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nJD: // global
           if (R1 & 7 == 1) goto c5nJG; else goto c5nJH;
       c5nJG: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nJH: // global
           I64[Sp] = block_c5nJR_info;
           R3 = P64[Sp + 24];
           R2 = P64[R1 + 6];
           call Data.OldList.dropLength_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5nJR() //  [R1]
         { info_tbl: [(c5nJR,
                       label: block_c5nJR_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nJR: // global
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Classes.$fEq[]_$c==_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.5642341 UTC

[section ""data" . Data.OldList.elem_by_closure" {
     Data.OldList.elem_by_closure:
         const Data.OldList.elem_by_info;
 },
 Data.OldList.elem_by_entry() //  [R2, R3, R4]
         { info_tbl: [(c5nKm,
                       label: Data.OldList.elem_by_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nKm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5nKn; else goto u5nKH;
       c5nKn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.elem_by_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5nKH: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5nKc() args: 0, res: 0, upd: 0;
     }
 },
 _c5nKc() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nKc: // global
           I64[Sp - 8] = block_c5nKf_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nKJ; else goto c5nKg;
       u5nKJ: // global
           call _c5nKf(R1) args: 0, res: 0, upd: 0;
       c5nKg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nKf() //  [R1]
         { info_tbl: [(c5nKf,
                       label: block_c5nKf_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nKf: // global
           if (R1 & 7 == 1) goto c5nKj; else goto c5nKk;
       c5nKj: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nKk: // global
           I64[Sp] = block_c5nKu_info;
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 6];
           _s5kUB::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 24] = _s5kUB::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nKu() //  [R1]
         { info_tbl: [(c5nKu,
                       label: block_c5nKu_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nKu: // global
           if (R1 & 7 == 1) goto c5nKB; else goto c5nKF;
       c5nKB: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 24];
           Sp = Sp + 8;
           call _c5nKc() args: 0, res: 0, upd: 0;
       c5nKF: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.575624656 UTC

[section ""data" . Data.OldList.nubBy_closure" {
     Data.OldList.nubBy_closure:
         const Data.OldList.nubBy_info;
 },
 sat_s5kUN_entry() //  [R1]
         { info_tbl: [(c5nLx,
                       label: sat_s5kUN_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nLx: // global
           _s5kUN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5nLy; else goto c5nLz;
       c5nLz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nLB; else goto c5nLA;
       c5nLB: // global
           HpAlloc = 24;
           goto c5nLy;
       c5nLy: // global
           R1 = _s5kUN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nLA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5kUN::P64;
           _s5kUF::P64 = P64[_s5kUN::P64 + 16];
           _s5kUH::P64 = P64[_s5kUN::P64 + 24];
           _s5kUJ::P64 = P64[_s5kUN::P64 + 32];
           _s5kUK::P64 = P64[_s5kUN::P64 + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kUJ::P64;
           P64[Hp] = _s5kUH::P64;
           R3 = Hp - 14;
           R2 = _s5kUK::P64;
           R1 = _s5kUF::P64;
           Sp = Sp - 16;
           call nubBy'_s5kUF_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 nubBy'_s5kUF_entry() //  [R1, R2, R3]
         { info_tbl: [(c5nLG,
                       label: nubBy'_s5kUF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nLG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5nLH; else goto u5nLX;
       c5nLH: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5nLX: // global
           P64[Sp - 24] = R1;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call _c5nLf() args: 0, res: 0, upd: 0;
     }
 },
 _c5nLf() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nLf: // global
           _s5kUD::P64 = P64[P64[Sp] + 6];
           I64[Sp - 8] = block_c5nLi_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5kUD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nLZ; else goto c5nLj;
       u5nLZ: // global
           call _c5nLi(R1) args: 0, res: 0, upd: 0;
       c5nLj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nLi() //  [R1]
         { info_tbl: [(c5nLi,
                       label: block_c5nLi_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nLi: // global
           if (R1 & 7 == 1) goto c5nLD; else goto c5nLE;
       c5nLD: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nLE: // global
           I64[Sp - 8] = block_c5nLo_info;
           R4 = P64[Sp + 24];
           _s5kUJ::P64 = P64[R1 + 6];
           R3 = _s5kUJ::P64;
           R2 = P64[Sp + 16];
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 16] = _s5kUJ::P64;
           Sp = Sp - 8;
           call Data.OldList.elem_by_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5nLo() //  [R1]
         { info_tbl: [(c5nLo,
                       label: block_c5nLo_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nLo: // global
           _s5kUH::P64 = P64[Sp + 32];
           _s5kUK::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5nLO; else goto c5nLV;
       c5nLO: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5nLR; else goto c5nLQ;
       c5nLR: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nLQ: // global
           I64[Hp - 64] = sat_s5kUN_info;
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = _s5kUH::P64;
           _s5kUJ::P64 = P64[Sp + 24];
           P64[Hp - 32] = _s5kUJ::P64;
           P64[Hp - 24] = _s5kUK::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kUJ::P64;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nLV: // global
           P64[Sp + 24] = _s5kUK::P64;
           P64[Sp + 32] = _s5kUH::P64;
           Sp = Sp + 16;
           call _c5nLf() args: 0, res: 0, upd: 0;
     }
 },
 Data.OldList.nubBy_entry() //  [R2, R3]
         { info_tbl: [(c5nM2,
                       label: Data.OldList.nubBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nM2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5nM6; else goto c5nM5;
       c5nM6: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.nubBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nM5: // global
           I64[Hp - 8] = nubBy'_s5kUF_info;
           P64[Hp] = R2;
           _s5kUE::P64 = R3;
           R3 = GHC.Types.[]_closure+1;
           R2 = _s5kUE::P64;
           R1 = Hp - 6;
           call nubBy'_s5kUF_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.590922439 UTC

[section ""data" . Data.OldList.nub_closure" {
     Data.OldList.nub_closure:
         const Data.OldList.nub_info;
 },
 sat_s5kUQ_entry() //  [R1]
         { info_tbl: [(c5nMK,
                       label: sat_s5kUQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nMK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nML; else goto c5nMM;
       c5nML: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nMM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.nub_entry() //  [R2, R3]
         { info_tbl: [(c5nMN,
                       label: Data.OldList.nub_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nMN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nMR; else goto c5nMQ;
       c5nMR: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.nub_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nMQ: // global
           I64[Hp - 16] = sat_s5kUQ_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.nubBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.597579016 UTC

[section ""data" . Data.OldList.deleteBy_closure" {
     Data.OldList.deleteBy_closure:
         const Data.OldList.deleteBy_info;
 },
 sat_s5kUY_entry() //  [R1]
         { info_tbl: [(c5nNi,
                       label: sat_s5kUY_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nNi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nNj; else goto c5nNk;
       c5nNj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nNk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.deleteBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5nNp,
                       label: Data.OldList.deleteBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nNp: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5nNq; else goto c5nNr;
       c5nNq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.deleteBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nNr: // global
           I64[Sp - 24] = block_c5nN4_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5nNG; else goto c5nN5;
       u5nNG: // global
           call _c5nN4(R1) args: 0, res: 0, upd: 0;
       c5nN5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nN4() //  [R1]
         { info_tbl: [(c5nN4,
                       label: block_c5nN4_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nN4: // global
           if (R1 & 7 == 1) goto c5nNm; else goto c5nNn;
       c5nNm: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nNn: // global
           I64[Sp - 16] = block_c5nNa_info;
           _s5kUV::P64 = P64[R1 + 6];
           R3 = _s5kUV::P64;
           R2 = P64[Sp + 16];
           _s5kUW::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s5kUW::P64;
           P64[Sp] = _s5kUV::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nNa() //  [R1]
         { info_tbl: [(c5nNa,
                       label: block_c5nNa_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nNa: // global
           _s5kUW::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5nNx; else goto c5nNE;
       c5nNx: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5nNA; else goto c5nNz;
       c5nNA: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nNz: // global
           I64[Hp - 56] = sat_s5kUY_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _s5kUW::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nNE: // global
           R1 = _s5kUW::P64 & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.609076584 UTC

[section ""data" . Data.OldList.deleteFirstsBy_closure" {
     Data.OldList.deleteFirstsBy_closure:
         const Data.OldList.deleteFirstsBy_info;
 },
 Data.OldList.deleteFirstsBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5nOf,
                       label: Data.OldList.deleteFirstsBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nOf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5nOg; else goto c5nOh;
       c5nOg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.deleteFirstsBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nOh: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call _c5nOj() args: 0, res: 0, upd: 0;
     }
 },
 _c5nOj() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nOj: // global
           I64[Sp - 8] = block_c5nOl_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nOH; else goto c5nOn;
       u5nOH: // global
           call _c5nOl(R1) args: 0, res: 0, upd: 0;
       c5nOn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nOl() //  [R1]
         { info_tbl: [(c5nOl,
                       label: block_c5nOl_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nOl: // global
           _s5kV4::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5nOt; else goto c5nOy;
       c5nOt: // global
           R1 = _s5kV4::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5nOy: // global
           I64[Sp] = block_c5nOw_info;
           R4 = _s5kV4::P64;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 14];
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5nOw() //  [R1]
         { info_tbl: [(c5nOw,
                       label: block_c5nOw_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nOw: // global
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c5nOj() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.619029277 UTC

[section ""data" . Data.OldList.delete_closure" {
     Data.OldList.delete_closure:
         const Data.OldList.delete_info;
 },
 sat_s5kVc_entry() //  [R1]
         { info_tbl: [(c5nPb,
                       label: sat_s5kVc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nPb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nPc; else goto c5nPd;
       c5nPc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nPd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.delete_entry() //  [R2, R3, R4]
         { info_tbl: [(c5nPe,
                       label: Data.OldList.delete_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nPe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nPi; else goto c5nPh;
       c5nPi: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.delete_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nPh: // global
           I64[Hp - 16] = sat_s5kVc_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.625866715 UTC

[section ""data" . Data.OldList.\\_closure" {
     Data.OldList.\\_closure:
         const Data.OldList.\\_info;
 },
 lvl12_s5kVg_entry() //  [R1]
         { info_tbl: [(c5nPz,
                       label: lvl12_s5kVg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nPz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nPA; else goto c5nPB;
       c5nPA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nPB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.\\_entry() //  [R2, R3, R4]
         { info_tbl: [(c5nPE,
                       label: Data.OldList.\\_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nPE: // global
           _s5kVf::P64 = R4;
           _s5kVe::P64 = R3;
           _s5kVd::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c5nPF; else goto c5nPG;
       c5nPG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nPI; else goto c5nPH;
       c5nPI: // global
           HpAlloc = 24;
           goto c5nPF;
       c5nPF: // global
           R4 = _s5kVf::P64;
           R3 = _s5kVe::P64;
           R2 = _s5kVd::P64;
           R1 = Data.OldList.\\_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nPH: // global
           I64[Hp - 16] = lvl12_s5kVg_info;
           P64[Hp] = _s5kVd::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _s5kVf::P64;
           P64[Sp - 8] = _s5kVe::P64;
           Sp = Sp - 24;
           call _c5nPK() args: 0, res: 0, upd: 0;
     }
 },
 _c5nPK() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nPK: // global
           I64[Sp - 8] = block_c5nPM_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nQ8; else goto c5nPO;
       u5nQ8: // global
           call _c5nPM(R1) args: 0, res: 0, upd: 0;
       c5nPO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nPM() //  [R1]
         { info_tbl: [(c5nPM,
                       label: block_c5nPM_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nPM: // global
           _s5kVj::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5nPU; else goto c5nPZ;
       c5nPU: // global
           R1 = _s5kVj::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5nPZ: // global
           I64[Sp] = block_c5nPX_info;
           R4 = _s5kVj::P64;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 14];
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5nPX() //  [R1]
         { info_tbl: [(c5nPX,
                       label: block_c5nPX_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nPX: // global
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c5nPK() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.637888322 UTC

[section ""data" . Data.OldList.unionBy_closure" {
     Data.OldList.unionBy_closure:
         const Data.OldList.unionBy_info;
 },
 sat_s5kVz_entry() //  [R1]
         { info_tbl: [(c5nQJ,
                       label: sat_s5kVz_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nQJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5nQK; else goto c5nQL;
       c5nQK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nQL: // global
           I64[Sp - 24] = block_c5nQH_info;
           R3 = P64[R1 + 32];
           _s5kVo::P64 = P64[R1 + 16];
           R2 = _s5kVo::P64;
           P64[Sp - 16] = _s5kVo::P64;
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 24;
           call Data.OldList.nubBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5nQH() //  [R1]
         { info_tbl: [(c5nQH,
                       label: block_c5nQH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nQH: // global
           P64[Sp] = R1;
           P64[Sp + 16] = P64[Sp + 16];
           call _c5nQS() args: 0, res: 0, upd: 0;
     }
 },
 _c5nQS() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nQS: // global
           I64[Sp - 8] = block_c5nQU_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nRg; else goto c5nQW;
       u5nRg: // global
           call _c5nQU(R1) args: 0, res: 0, upd: 0;
       c5nQW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nQU() //  [R1]
         { info_tbl: [(c5nQU,
                       label: block_c5nQU_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nQU: // global
           _s5kVt::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5nR2; else goto c5nR7;
       c5nR2: // global
           R1 = _s5kVt::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5nR7: // global
           I64[Sp + 8] = block_c5nR5_info;
           R4 = _s5kVt::P64;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp + 8;
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5nR5() //  [R1]
         { info_tbl: [(c5nR5,
                       label: block_c5nR5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nR5: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp] = R1;
           call _c5nQS() args: 0, res: 0, upd: 0;
     }
 },
 Data.OldList.unionBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5nRi,
                       label: Data.OldList.unionBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nRi: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5nRm; else goto c5nRl;
       c5nRm: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.unionBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nRl: // global
           I64[Hp - 32] = sat_s5kVz_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s5kVp::P64 = R3;
           R3 = Hp - 32;
           R2 = _s5kVp::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.654120298 UTC

[section ""data" . Data.OldList.union_closure" {
     Data.OldList.union_closure:
         const Data.OldList.union_info;
 },
 sat_s5kVD_entry() //  [R1]
         { info_tbl: [(c5nRX,
                       label: sat_s5kVD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nRX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nRY; else goto c5nRZ;
       c5nRY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nRZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.union_entry() //  [R2, R3, R4]
         { info_tbl: [(c5nS0,
                       label: Data.OldList.union_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nS0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nS4; else goto c5nS3;
       c5nS4: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.union_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nS3: // global
           I64[Hp - 16] = sat_s5kVD_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.unionBy_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.661563163 UTC

[section ""data" . Data.OldList.intersectBy_closure" {
     Data.OldList.intersectBy_closure:
         const Data.OldList.intersectBy_info;
 },
 go_s5kVN_entry() //  [R1, R2]
         { info_tbl: [(c5nSF,
                       label: go_s5kVN_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nSF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5nSG; else goto u5nT7;
       c5nSG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5nT7: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c5nSv() args: 0, res: 0, upd: 0;
     }
 },
 _c5nSv() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nSv: // global
           I64[Sp - 16] = block_c5nSy_info;
           R1 = P64[Sp + 8];
           _s5kVN::P64 = P64[Sp];
           P64[Sp - 8] = P64[_s5kVN::P64 + 15];
           P64[Sp + 8] = P64[_s5kVN::P64 + 7];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5nT9; else goto c5nSz;
       u5nT9: // global
           call _c5nSy(R1) args: 0, res: 0, upd: 0;
       c5nSz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nSy() //  [R1]
         { info_tbl: [(c5nSy,
                       label: block_c5nSy_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nSy: // global
           if (R1 & 7 == 1) goto c5nSC; else goto c5nSD;
       c5nSC: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nSD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5nSR; else goto c5nSQ;
       c5nSR: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nSQ: // global
           _s5kVQ::P64 = P64[R1 + 6];
           _s5kVR::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s5kVQ::P64;
           I64[Sp] = block_c5nSO_info;
           R3 = P64[Sp + 8];
           R2 = Hp - 24;
           P64[Sp + 8] = _s5kVR::P64;
           P64[Sp + 24] = _s5kVQ::P64;
           call GHC.List.any_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5nSO() //  [R1]
         { info_tbl: [(c5nSO,
                       label: block_c5nSO_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nSO: // global
           _s5kVR::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5nSX; else goto c5nT2;
       c5nSX: // global
           P64[Sp + 24] = _s5kVR::P64;
           Sp = Sp + 16;
           call _c5nSv() args: 0, res: 0, upd: 0;
       c5nT2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5nT5; else goto c5nT4;
       c5nT5: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nT4: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s5kVR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.intersectBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5nTg,
                       label: Data.OldList.intersectBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nTg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5nTh; else goto c5nTi;
       c5nTh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.intersectBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nTi: // global
           I64[Sp - 24] = block_c5nSh_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5nTA; else goto c5nSi;
       u5nTA: // global
           call _c5nSh(R1) args: 0, res: 0, upd: 0;
       c5nSi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nSh() //  [R1]
         { info_tbl: [(c5nSh,
                       label: block_c5nSh_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nSh: // global
           if (R1 & 7 == 1) goto u5nTv; else goto c5nTe;
       u5nTv: // global
           Sp = Sp + 24;
           call _c5nTp() args: 0, res: 0, upd: 0;
       c5nTe: // global
           I64[Sp] = block_c5nSn_info;
           _s5kVH::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s5kVH::P64;
           if (R1 & 7 != 0) goto u5nTx; else goto c5nSo;
       u5nTx: // global
           call _c5nSn(R1) args: 0, res: 0, upd: 0;
       c5nSo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nSn() //  [R1]
         { info_tbl: [(c5nSn,
                       label: block_c5nSn_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nSn: // global
           if (R1 & 7 == 1) goto u5nTw; else goto c5nTq;
       u5nTw: // global
           Sp = Sp + 24;
           call _c5nTp() args: 0, res: 0, upd: 0;
       c5nTq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nTt; else goto c5nTs;
       c5nTt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nTs: // global
           I64[Hp - 16] = go_s5kVN_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R2 = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go_s5kVN_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5nTp() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nTp: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.678636431 UTC

[section ""data" . Data.OldList.intersect_closure" {
     Data.OldList.intersect_closure:
         const Data.OldList.intersect_info;
 },
 sat_s5kVY_entry() //  [R1]
         { info_tbl: [(c5nUt,
                       label: sat_s5kVY_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nUt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nUu; else goto c5nUv;
       c5nUu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nUv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.intersect_entry() //  [R2, R3, R4]
         { info_tbl: [(c5nUw,
                       label: Data.OldList.intersect_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nUw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nUA; else goto c5nUz;
       c5nUA: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.intersect_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nUz: // global
           I64[Hp - 16] = sat_s5kVY_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.intersectBy_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.685564287 UTC

[section ""data" . Data.OldList.prependToAll_closure" {
     Data.OldList.prependToAll_closure:
         const Data.OldList.prependToAll_info;
 },
 sat_s5kW4_entry() //  [R1]
         { info_tbl: [(c5nUX,
                       label: sat_s5kW4_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nUX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nUY; else goto c5nUZ;
       c5nUY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nUZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.prependToAll_entry() //  [R2, R3]
         { info_tbl: [(c5nV4,
                       label: Data.OldList.prependToAll_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nV4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nV5; else goto c5nV6;
       c5nV5: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.prependToAll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nV6: // global
           I64[Sp - 16] = block_c5nUN_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5nVe; else goto c5nUO;
       u5nVe: // global
           call _c5nUN(R1) args: 0, res: 0, upd: 0;
       c5nUO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nUN() //  [R1]
         { info_tbl: [(c5nUN,
                       label: block_c5nUN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nUN: // global
           if (R1 & 7 == 1) goto c5nV1; else goto c5nV2;
       c5nV1: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nV2: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5nVd; else goto c5nVc;
       c5nVd: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nVc: // global
           _s5kW2::P64 = P64[R1 + 6];
           _s5kW3::P64 = P64[R1 + 14];
           I64[Hp - 72] = sat_s5kW4_info;
           _s5kVZ::P64 = P64[Sp + 8];
           P64[Hp - 56] = _s5kVZ::P64;
           P64[Hp - 48] = _s5kW3::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5kW2::P64;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kVZ::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.695541795 UTC

[section ""data" . Data.OldList.intersperse_closure" {
     Data.OldList.intersperse_closure:
         const Data.OldList.intersperse_info;
 },
 sat_s5kWb_entry() //  [R1]
         { info_tbl: [(c5nVM,
                       label: sat_s5kWb_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nVM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nVN; else goto c5nVO;
       c5nVN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nVO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.intersperse_entry() //  [R2, R3]
         { info_tbl: [(c5nVT,
                       label: Data.OldList.intersperse_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nVT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nVU; else goto c5nVV;
       c5nVU: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.intersperse_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nVV: // global
           I64[Sp - 16] = block_c5nVC_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5nW2; else goto c5nVD;
       u5nW2: // global
           call _c5nVC(R1) args: 0, res: 0, upd: 0;
       c5nVD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nVC() //  [R1]
         { info_tbl: [(c5nVC,
                       label: block_c5nVC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nVC: // global
           if (R1 & 7 == 1) goto c5nVQ; else goto c5nVR;
       c5nVQ: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nVR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5nW1; else goto c5nW0;
       c5nW1: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nW0: // global
           _s5kW9::P64 = P64[R1 + 6];
           _s5kWa::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s5kWb_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s5kWa::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kW9::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.705517735 UTC

[section ""data" . Data.OldList.intercalate1_closure" {
     Data.OldList.intercalate1_closure:
         const Data.OldList.intercalate1_info;
 },
 sat_s5kWg_entry() //  [R1]
         { info_tbl: [(c5nWA,
                       label: sat_s5kWg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nWA: // global
           R2 = P64[R1 + 16];
           call Data.OldList.intercalate1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.intercalate1_entry() //  [R2]
         { info_tbl: [(c5nWH,
                       label: Data.OldList.intercalate1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nWH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5nWI; else goto c5nWJ;
       c5nWI: // global
           R2 = R2;
           R1 = Data.OldList.intercalate1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5nWJ: // global
           I64[Sp - 8] = block_c5nWq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nWP; else goto c5nWr;
       u5nWP: // global
           call _c5nWq(R1) args: 0, res: 0, upd: 0;
       c5nWr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nWq() //  [R1]
         { info_tbl: [(c5nWq,
                       label: block_c5nWq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nWq: // global
           if (R1 & 7 == 1) goto c5nWE; else goto c5nWF;
       c5nWE: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nWF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5nWO; else goto c5nWN;
       c5nWO: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nWN: // global
           _s5kWe::P64 = P64[R1 + 6];
           _s5kWf::P64 = P64[R1 + 14];
           I64[Hp - 16] = sat_s5kWg_info;
           P64[Hp] = _s5kWf::P64;
           R3 = Hp - 16;
           R2 = _s5kWe::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.714512895 UTC

[section ""data" . Data.OldList.intercalate_closure" {
     Data.OldList.intercalate_closure:
         const Data.OldList.intercalate_info;
 },
 sat_s5kWm_entry() //  [R1]
         { info_tbl: [(c5nXj,
                       label: sat_s5kWm_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nXj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nXk; else goto c5nXl;
       c5nXk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nXl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.intercalate_entry() //  [R2, R3]
         { info_tbl: [(c5nXq,
                       label: Data.OldList.intercalate_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nXq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nXr; else goto c5nXs;
       c5nXr: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.intercalate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5nXs: // global
           I64[Sp - 16] = block_c5nX9_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5nXz; else goto c5nXa;
       u5nXz: // global
           call _c5nX9(R1) args: 0, res: 0, upd: 0;
       c5nXa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nX9() //  [R1]
         { info_tbl: [(c5nX9,
                       label: block_c5nX9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nX9: // global
           if (R1 & 7 == 1) goto c5nXn; else goto c5nXo;
       c5nXn: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nXo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5nXy; else goto c5nXx;
       c5nXy: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nXx: // global
           _s5kWk::P64 = P64[R1 + 6];
           _s5kWl::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s5kWm_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s5kWl::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kWk::P64;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call Data.OldList.intercalate1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.72815412 UTC

[section ""data" . poly_go_r5kSf_closure" {
     poly_go_r5kSf_closure:
         const poly_go_r5kSf_info;
 },
 sat_s5kWv_entry() //  [R1]
         { info_tbl: [(c5nYc,
                       label: sat_s5kWv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nYc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nYd; else goto c5nYe;
       c5nYd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nYe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_r5kSf_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go_r5kSf_entry() //  [R2]
         { info_tbl: [(c5nYj,
                       label: poly_go_r5kSf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nYj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nYk; else goto u5nYz;
       c5nYk: // global
           R2 = R2;
           R1 = poly_go_r5kSf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5nYz: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5nXT() args: 0, res: 0, upd: 0;
     }
 },
 _c5nXT() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nXT: // global
           _s5kWo::P64 = P64[Sp];
           I64[Sp] = block_c5nXW_info;
           R1 = _s5kWo::P64;
           if (R1 & 7 != 0) goto u5nYB; else goto c5nXX;
       u5nYB: // global
           call _c5nXW(R1) args: 0, res: 0, upd: 0;
       c5nXX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nXW() //  [R1]
         { info_tbl: [(c5nXW,
                       label: block_c5nXW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nXW: // global
           if (R1 & 7 == 1) goto c5nYg; else goto c5nYh;
       c5nYg: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nYh: // global
           I64[Sp - 8] = block_c5nY2_info;
           _s5kWr::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5kWr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nYC; else goto c5nY3;
       u5nYC: // global
           call _c5nY2(R1) args: 0, res: 0, upd: 0;
       c5nY3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nY2() //  [R1]
         { info_tbl: [(c5nY2,
                       label: block_c5nY2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nY2: // global
           _s5kWr::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5nYs; else goto c5nYu;
       c5nYs: // global
           P64[Sp + 8] = _s5kWr::P64;
           Sp = Sp + 8;
           call _c5nXT() args: 0, res: 0, upd: 0;
       c5nYu: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5nYx; else goto c5nYw;
       c5nYx: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nYw: // global
           _s5kWu::P64 = P64[R1 + 14];
           I64[Hp - 40] = sat_s5kWv_info;
           P64[Hp - 24] = _s5kWr::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kWu::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.747212785 UTC

[section ""data" . poly_go1_r5kSg_closure" {
     poly_go1_r5kSg_closure:
         const poly_go1_r5kSg_info;
 },
 sat_s5kWD_entry() //  [R1]
         { info_tbl: [(c5nZp,
                       label: sat_s5kWD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nZp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nZq; else goto c5nZr;
       c5nZq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5nZr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_r5kSg_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go1_r5kSg_entry() //  [R2]
         { info_tbl: [(c5nZw,
                       label: poly_go1_r5kSg_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nZw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5nZx; else goto u5nZM;
       c5nZx: // global
           R2 = R2;
           R1 = poly_go1_r5kSg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5nZM: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5nZ6() args: 0, res: 0, upd: 0;
     }
 },
 _c5nZ6() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nZ6: // global
           _s5kWw::P64 = P64[Sp];
           I64[Sp] = block_c5nZ9_info;
           R1 = _s5kWw::P64;
           if (R1 & 7 != 0) goto u5nZO; else goto c5nZa;
       u5nZO: // global
           call _c5nZ9(R1) args: 0, res: 0, upd: 0;
       c5nZa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nZ9() //  [R1]
         { info_tbl: [(c5nZ9,
                       label: block_c5nZ9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nZ9: // global
           if (R1 & 7 == 1) goto c5nZt; else goto c5nZu;
       c5nZt: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5nZu: // global
           I64[Sp - 8] = block_c5nZf_info;
           _s5kWz::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5kWz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5nZP; else goto c5nZg;
       u5nZP: // global
           call _c5nZf(R1) args: 0, res: 0, upd: 0;
       c5nZg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5nZf() //  [R1]
         { info_tbl: [(c5nZf,
                       label: block_c5nZf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5nZf: // global
           _s5kWz::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5nZF; else goto c5nZH;
       c5nZF: // global
           P64[Sp + 8] = _s5kWz::P64;
           Sp = Sp + 8;
           call _c5nZ6() args: 0, res: 0, upd: 0;
       c5nZH: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5nZK; else goto c5nZJ;
       c5nZK: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5nZJ: // global
           _s5kWB::P64 = P64[R1 + 6];
           I64[Hp - 40] = sat_s5kWD_info;
           P64[Hp - 24] = _s5kWz::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kWB::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.766986451 UTC

[section ""data" . Data.OldList.transpose_closure" {
     Data.OldList.transpose_closure:
         const Data.OldList.transpose_info;
 },
 sat_s5kWN_entry() //  [R1]
         { info_tbl: [(c5o0G,
                       label: sat_s5kWN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o0G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5o0H; else goto c5o0I;
       c5o0H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5o0I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_r5kSf_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5kWP_entry() //  [R1]
         { info_tbl: [(c5o0K,
                       label: sat_s5kWP_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o0K: // global
           _s5kWP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5o0L; else goto c5o0M;
       c5o0M: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5o0O; else goto c5o0N;
       c5o0O: // global
           HpAlloc = 48;
           goto c5o0L;
       c5o0L: // global
           R1 = _s5kWP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5o0N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5kWP::P64;
           _s5kWH::P64 = P64[_s5kWP::P64 + 16];
           _s5kWK::P64 = P64[_s5kWP::P64 + 24];
           I64[Hp - 40] = sat_s5kWN_info;
           P64[Hp - 24] = _s5kWH::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kWK::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call Data.OldList.transpose_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5kWL_entry() //  [R1]
         { info_tbl: [(c5o0T,
                       label: sat_s5kWL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o0T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5o0U; else goto c5o0V;
       c5o0U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5o0V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_r5kSg_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.transpose_entry() //  [R2]
         { info_tbl: [(c5o10,
                       label: Data.OldList.transpose_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o10: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5o11; else goto u5o1h;
       c5o11: // global
           R2 = R2;
           R1 = Data.OldList.transpose_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5o1h: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5o0j() args: 0, res: 0, upd: 0;
     }
 },
 _c5o0j() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o0j: // global
           _s5kWE::P64 = P64[Sp];
           I64[Sp] = block_c5o0m_info;
           R1 = _s5kWE::P64;
           if (R1 & 7 != 0) goto u5o1j; else goto c5o0n;
       u5o1j: // global
           call _c5o0m(R1) args: 0, res: 0, upd: 0;
       c5o0n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5o0m() //  [R1]
         { info_tbl: [(c5o0m,
                       label: block_c5o0m_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o0m: // global
           if (R1 & 7 == 1) goto c5o0X; else goto c5o0Y;
       c5o0X: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5o0Y: // global
           I64[Sp - 8] = block_c5o0s_info;
           _s5kWH::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5kWH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5o1k; else goto c5o0t;
       u5o1k: // global
           call _c5o0s(R1) args: 0, res: 0, upd: 0;
       c5o0t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5o0s() //  [R1]
         { info_tbl: [(c5o0s,
                       label: block_c5o0s_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o0s: // global
           _s5kWH::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5o19; else goto c5o1c;
       c5o19: // global
           P64[Sp + 8] = _s5kWH::P64;
           Sp = Sp + 8;
           call _c5o0j() args: 0, res: 0, upd: 0;
       c5o1c: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c5o1f; else goto c5o1e;
       c5o1f: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5o1e: // global
           _s5kWJ::P64 = P64[R1 + 6];
           _s5kWK::P64 = P64[R1 + 14];
           I64[Hp - 96] = sat_s5kWP_info;
           P64[Hp - 80] = _s5kWH::P64;
           P64[Hp - 72] = _s5kWK::P64;
           I64[Hp - 64] = sat_s5kWL_info;
           P64[Hp - 48] = _s5kWH::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5kWJ::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.793739988 UTC

[section ""data" . Data.OldList.select_closure" {
     Data.OldList.select_closure:
         const Data.OldList.select_info;
 },
 Data.OldList.select_entry() //  [R2, R3, R4]
         { info_tbl: [(c5o28,
                       label: Data.OldList.select_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o28: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5o29; else goto c5o2a;
       c5o29: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.select_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5o2a: // global
           I64[Sp - 24] = block_c5o22_info;
           _s5kWQ::P64 = R2;
           R2 = R3;
           R1 = _s5kWQ::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5o22() //  [R1]
         { info_tbl: [(c5o22,
                       label: block_c5o22_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o22: // global
           _s5kWR::P64 = P64[Sp + 8];
           _s5kWS::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5o25; else goto c5o26;
       c5o25: // global
           Hp = Hp + 96;
           _s5kWT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5o2s; else goto c5o2i;
       c5o2i: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _s5kWS::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5kWR::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _s5kWS::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5o26: // global
           Hp = Hp + 96;
           _s5kWT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5o2s; else goto c5o2r;
       c5o2s: // global
           HpAlloc = 96;
           R1 = _s5kWT::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5o2r: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _s5kWS::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _s5kWS::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5kWR::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.803667319 UTC

[section ""data" . Data.OldList.partition_closure" {
     Data.OldList.partition_closure:
         const Data.OldList.partition_info;
 },
 w1_s5kXj_entry() //  [R1]
         { info_tbl: [(c5o37,
                       label: w1_s5kXj_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o37: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5o38; else goto c5o39;
       c5o38: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5o39: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5o34_info;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgo_s5kXe_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5o34() //  [R1, R2]
         { info_tbl: [(c5o34,
                       label: block_c5o34_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o34: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5o3c; else goto c5o3b;
       c5o3c: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5o3b: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $wgo_s5kXe_entry() //  [R1, R2]
         { info_tbl: [(c5o3h,
                       label: $wgo_s5kXe_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o3h: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5o3i; else goto c5o3j;
       c5o3i: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5o3j: // global
           I64[Sp - 24] = block_c5o2U_info;
           _s5kXe::P64 = R1;
           _s5kXc::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s5kXc::P64;
           P64[Sp - 8] = _s5kXe::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5o3L; else goto c5o2V;
       u5o3L: // global
           call _c5o2U(R1) args: 0, res: 0, upd: 0;
       c5o2V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5o2U() //  [R1]
         { info_tbl: [(c5o2U,
                       label: block_c5o2U_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o2U: // global
           if (R1 & 7 == 1) goto c5o3e; else goto c5o3f;
       c5o3e: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5o3f: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5o3p; else goto c5o3o;
       c5o3p: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5o3o: // global
           _s5kXh::P64 = P64[R1 + 6];
           _s5kXi::P64 = P64[R1 + 14];
           I64[Hp - 24] = w1_s5kXj_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s5kXi::P64;
           I64[Sp] = block_c5o3m_info;
           R2 = _s5kXh::P64;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5kXh::P64;
           P64[Sp + 16] = Hp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5o3m() //  [R1]
         { info_tbl: [(c5o3m,
                       label: block_c5o3m_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o3m: // global
           _c5o30::P64 = P64[Sp + 16];
           _s5kXh::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5o3x; else goto c5o3G;
       c5o3x: // global
           Hp = Hp + 72;
           _s5kXn::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5o3J; else goto c5o3z;
       c5o3z: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5o30::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5kXh::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5o30::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5o3G: // global
           Hp = Hp + 72;
           _s5kXn::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5o3J; else goto c5o3I;
       c5o3J: // global
           HpAlloc = 72;
           R1 = _s5kXn::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5o3I: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5o30::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5o30::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5kXh::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.partition_entry() //  [R2, R3]
         { info_tbl: [(c5o3P,
                       label: Data.OldList.partition_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o3P: // global
           _s5kXd::P64 = R3;
           _s5kXc::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5o3Q; else goto c5o3R;
       c5o3R: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5o3T; else goto c5o3S;
       c5o3T: // global
           HpAlloc = 16;
           goto c5o3Q;
       c5o3Q: // global
           R3 = _s5kXd::P64;
           R2 = _s5kXc::P64;
           R1 = Data.OldList.partition_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5o3S: // global
           I64[Hp - 8] = $wgo_s5kXe_info;
           P64[Hp] = _s5kXc::P64;
           I64[Sp - 8] = block_c5o3M_info;
           R2 = _s5kXd::P64;
           R1 = Hp - 7;
           Sp = Sp - 8;
           call $wgo_s5kXe_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5o3M() //  [R1, R2]
         { info_tbl: [(c5o3M,
                       label: block_c5o3M_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o3M: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5o3W; else goto c5o3V;
       c5o3W: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5o3V: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.821743657 UTC

[section ""data" . Data.OldList.pairWithNil_closure" {
     Data.OldList.pairWithNil_closure:
         const Data.OldList.pairWithNil_info;
 },
 Data.OldList.pairWithNil_entry() //  [R2]
         { info_tbl: [(c5o4F,
                       label: Data.OldList.pairWithNil_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o4F: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5o4J; else goto c5o4I;
       c5o4J: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.OldList.pairWithNil_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5o4I: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.827822036 UTC

[section ""data" . Data.OldList.mapAccumLF_closure" {
     Data.OldList.mapAccumLF_closure:
         const Data.OldList.mapAccumLF_info;
 },
 ds1_s5kXP_entry() //  [R1]
         { info_tbl: [(c5o4Z,
                       label: ds1_s5kXP_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o4Z: // global
           _s5kXP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5o50; else goto c5o51;
       c5o51: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5o53; else goto c5o52;
       c5o53: // global
           HpAlloc = 24;
           goto c5o50;
       c5o50: // global
           R1 = _s5kXP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5o52: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5kXP::P64;
           _s5kXM::P64 = P64[_s5kXP::P64 + 16];
           _s5kXO::P64 = P64[_s5kXP::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s5kXO::P64;
           R2 = Hp - 16;
           R1 = _s5kXM::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.mapAccumLF_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5o59,
                       label: Data.OldList.mapAccumLF_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o59: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto c5o5d; else goto c5o5c;
       c5o5d: // global
           HpAlloc = 192;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.mapAccumLF_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5o5c: // global
           I64[Hp - 184] = stg_ap_3_upd_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R5;
           P64[Hp - 152] = R3;
           I64[Hp - 144] = ds1_s5kXP_info;
           P64[Hp - 128] = R4;
           _c5o4T::P64 = Hp - 184;
           P64[Hp - 120] = _c5o4T::P64;
           I64[Hp - 112] = stg_sel_1_upd_info;
           _c5o4U::P64 = Hp - 144;
           P64[Hp - 96] = _c5o4U::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5o4T::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5o4U::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.839708117 UTC

[section ""data" . Data.OldList.$wmapAccumL_closure" {
     Data.OldList.$wmapAccumL_closure:
         const Data.OldList.$wmapAccumL_info;
 },
 ds1_s5kYe_entry() //  [R1]
         { info_tbl: [(c5o5K,
                       label: ds1_s5kYe_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o5K: // global
           _s5kYe::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5o5L; else goto c5o5M;
       c5o5M: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5o5O; else goto c5o5N;
       c5o5O: // global
           HpAlloc = 24;
           goto c5o5L;
       c5o5L: // global
           R1 = _s5kYe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5o5N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5kYe::P64;
           _s5kY7::P64 = P64[_s5kYe::P64 + 16];
           _s5kYc::P64 = P64[_s5kYe::P64 + 24];
           _s5kYd::P64 = P64[_s5kYe::P64 + 32];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s5kYd::P64;
           I64[Sp - 24] = block_c5o5H_info;
           R4 = _s5kYc::P64;
           R3 = Hp - 16;
           R2 = _s5kY7::P64;
           Sp = Sp - 24;
           call Data.OldList.$wmapAccumL_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5o5H() //  [R1, R2]
         { info_tbl: [(c5o5H,
                       label: block_c5o5H_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o5H: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5o5R; else goto c5o5Q;
       c5o5R: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5o5Q: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wmapAccumL_entry() //  [R2, R3, R4]
         { info_tbl: [(c5o5W,
                       label: Data.OldList.$wmapAccumL_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o5W: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5o5X; else goto c5o5Y;
       c5o5X: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$wmapAccumL_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5o5Y: // global
           I64[Sp - 24] = block_c5o5v_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5o68; else goto c5o5w;
       u5o68: // global
           call _c5o5v(R1) args: 0, res: 0, upd: 0;
       c5o5w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5o5v() //  [R1]
         { info_tbl: [(c5o5v,
                       label: block_c5o5v_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o5v: // global
           _s5kY8::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5o5T; else goto c5o5U;
       c5o5T: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = _s5kY8::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5o5U: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c5o67; else goto c5o66;
       c5o67: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5o66: // global
           _s5kYb::P64 = P64[R1 + 6];
           _s5kYc::P64 = P64[R1 + 14];
           I64[Hp - 168] = stg_ap_3_upd_info;
           _s5kY7::P64 = P64[Sp + 8];
           P64[Hp - 152] = _s5kY7::P64;
           P64[Hp - 144] = _s5kY8::P64;
           P64[Hp - 136] = _s5kYb::P64;
           I64[Hp - 128] = ds1_s5kYe_info;
           P64[Hp - 112] = _s5kY7::P64;
           P64[Hp - 104] = _s5kYc::P64;
           _c5o5B::P64 = Hp - 168;
           P64[Hp - 96] = _c5o5B::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           _c5o5C::P64 = Hp - 128;
           P64[Hp - 72] = _c5o5C::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5o5B::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5o5C::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.856463959 UTC

[section ""data" . Data.OldList.mapAccumL_closure" {
     Data.OldList.mapAccumL_closure:
         const Data.OldList.mapAccumL_info;
 },
 Data.OldList.mapAccumL_entry() //  [R2, R3, R4]
         { info_tbl: [(c5o6D,
                       label: Data.OldList.mapAccumL_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o6D: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5o6E; else goto c5o6F;
       c5o6E: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.mapAccumL_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5o6F: // global
           I64[Sp - 8] = block_c5o6A_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wmapAccumL_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5o6A() //  [R1, R2]
         { info_tbl: [(c5o6A,
                       label: block_c5o6A_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o6A: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5o6I; else goto c5o6H;
       c5o6I: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5o6H: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.863182573 UTC

[section ""data" . Data.OldList.$wmapAccumR_closure" {
     Data.OldList.$wmapAccumR_closure:
         const Data.OldList.$wmapAccumR_info;
 },
 ds_s5kYL_entry() //  [R1]
         { info_tbl: [(c5o79,
                       label: ds_s5kYL_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o79: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5o7a; else goto c5o7b;
       c5o7a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5o7b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5o76_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wmapAccumR_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5o76() //  [R1, R2]
         { info_tbl: [(c5o76,
                       label: block_c5o76_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o76: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5o7e; else goto c5o7d;
       c5o7e: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5o7d: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds1_s5kYP_entry() //  [R1]
         { info_tbl: [(c5o7k,
                       label: ds1_s5kYP_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o7k: // global
           _s5kYP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5o7l; else goto c5o7m;
       c5o7m: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5o7o; else goto c5o7n;
       c5o7o: // global
           HpAlloc = 24;
           goto c5o7l;
       c5o7l: // global
           R1 = _s5kYP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5o7n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5kYP::P64;
           _s5kYF::P64 = P64[_s5kYP::P64 + 16];
           _s5kYJ::P64 = P64[_s5kYP::P64 + 24];
           _s5kYL::P64 = P64[_s5kYP::P64 + 32];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s5kYL::P64;
           R3 = _s5kYJ::P64;
           R2 = Hp - 16;
           R1 = _s5kYF::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wmapAccumR_entry() //  [R2, R3, R4]
         { info_tbl: [(c5o7t,
                       label: Data.OldList.$wmapAccumR_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o7t: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5o7u; else goto c5o7v;
       c5o7u: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$wmapAccumR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5o7v: // global
           I64[Sp - 24] = block_c5o6W_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5o7F; else goto c5o6X;
       u5o7F: // global
           call _c5o6W(R1) args: 0, res: 0, upd: 0;
       c5o6X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5o6W() //  [R1]
         { info_tbl: [(c5o6W,
                       label: block_c5o6W_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o6W: // global
           _s5kYG::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5o7q; else goto c5o7r;
       c5o7q: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = _s5kYG::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5o7r: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c5o7E; else goto c5o7D;
       c5o7E: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5o7D: // global
           _s5kYJ::P64 = P64[R1 + 6];
           _s5kYK::P64 = P64[R1 + 14];
           I64[Hp - 168] = ds_s5kYL_info;
           _s5kYF::P64 = P64[Sp + 8];
           P64[Hp - 152] = _s5kYF::P64;
           P64[Hp - 144] = _s5kYG::P64;
           P64[Hp - 136] = _s5kYK::P64;
           I64[Hp - 128] = ds1_s5kYP_info;
           P64[Hp - 112] = _s5kYF::P64;
           P64[Hp - 104] = _s5kYJ::P64;
           _c5o72::P64 = Hp - 168;
           P64[Hp - 96] = _c5o72::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5o72::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c5o7f::P64 = Hp - 128;
           P64[Hp - 48] = _c5o7f::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5o7f::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.877749918 UTC

[section ""data" . Data.OldList.mapAccumR_closure" {
     Data.OldList.mapAccumR_closure:
         const Data.OldList.mapAccumR_info;
 },
 Data.OldList.mapAccumR_entry() //  [R2, R3, R4]
         { info_tbl: [(c5o8e,
                       label: Data.OldList.mapAccumR_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o8e: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5o8f; else goto c5o8g;
       c5o8f: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.mapAccumR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5o8g: // global
           I64[Sp - 8] = block_c5o8b_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wmapAccumR_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5o8b() //  [R1, R2]
         { info_tbl: [(c5o8b,
                       label: block_c5o8b_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o8b: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5o8j; else goto c5o8i;
       c5o8j: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5o8i: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.884625055 UTC

[section ""data" . Data.OldList.insertBy_closure" {
     Data.OldList.insertBy_closure:
         const Data.OldList.insertBy_info;
 },
 Data.OldList.insertBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5o8A,
                       label: Data.OldList.insertBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o8A: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5o8B; else goto c5o8C;
       c5o8B: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.insertBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5o8C: // global
           I64[Sp - 8] = block_c5o8x_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$winsertBy_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5o8x() //  [R1, R2]
         { info_tbl: [(c5o8x,
                       label: block_c5o8x_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o8x: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5o8F; else goto c5o8E;
       c5o8F: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5o8E: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Data.OldList.$winsertBy_closure" {
     Data.OldList.$winsertBy_closure:
         const Data.OldList.$winsertBy_info;
 },
 sat_s5kZq_entry() //  [R1]
         { info_tbl: [(c5o8Z,
                       label: sat_s5kZq_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o8Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5o90; else goto c5o91;
       c5o90: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5o91: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.insertBy_entry(R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$winsertBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5o96,
                       label: Data.OldList.$winsertBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o96: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5o97; else goto c5o98;
       c5o97: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$winsertBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5o98: // global
           I64[Sp - 24] = block_c5o8K_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5o9l; else goto c5o8L;
       u5o9l: // global
           call _c5o8K(R1) args: 0, res: 0, upd: 0;
       c5o8L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5o8K() //  [R1]
         { info_tbl: [(c5o8K,
                       label: block_c5o8K_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o8K: // global
           _s5kZk::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5o93; else goto c5o94;
       c5o93: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = _s5kZk::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5o94: // global
           I64[Sp - 24] = block_c5o8Q_info;
           _s5kZn::P64 = P64[R1 + 6];
           R3 = _s5kZn::P64;
           R2 = _s5kZk::P64;
           _s5kZm::P64 = R1;
           _s5kZo::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp - 16] = _s5kZn::P64;
           P64[Sp - 8] = _s5kZo::P64;
           P64[Sp] = _s5kZm::P64;
           Sp = Sp - 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5o8Q() //  [R1]
         { info_tbl: [(c5o8Q,
                       label: block_c5o8Q_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5o8Q: // global
           _s5kZk::P64 = P64[Sp + 40];
           if (R1 & 7 == 3) goto c5o9g; else goto c5o9f;
       c5o9g: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5o9j; else goto c5o9i;
       c5o9j: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5o9i: // global
           I64[Hp - 32] = sat_s5kZq_info;
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = _s5kZk::P64;
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 32;
           R1 = P64[Sp + 8];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5o9f: // global
           R2 = P64[Sp + 24];
           R1 = _s5kZk::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.899872671 UTC

[section ""data" . Data.OldList.insert_closure" {
     Data.OldList.insert_closure:
         const Data.OldList.insert_info;
 },
 sat_s5kZu_entry() //  [R1]
         { info_tbl: [(c5oa2,
                       label: sat_s5kZu_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oa2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5oa3; else goto c5oa4;
       c5oa3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oa4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.insert_entry() //  [R2, R3, R4]
         { info_tbl: [(c5oa8,
                       label: Data.OldList.insert_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oa8: // global
           _s5kZt::P64 = R4;
           _s5kZs::P64 = R3;
           _s5kZr::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5oa9; else goto c5oaa;
       c5oaa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oac; else goto c5oab;
       c5oac: // global
           HpAlloc = 24;
           goto c5oa9;
       c5oa9: // global
           R4 = _s5kZt::P64;
           R3 = _s5kZs::P64;
           R2 = _s5kZr::P64;
           R1 = Data.OldList.insert_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5oab: // global
           I64[Hp - 16] = sat_s5kZu_info;
           P64[Hp] = _s5kZr::P64;
           I64[Sp - 8] = block_c5oa5_info;
           R4 = _s5kZt::P64;
           R3 = _s5kZs::P64;
           R2 = Hp - 16;
           Sp = Sp - 8;
           call Data.OldList.$winsertBy_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5oa5() //  [R1, R2]
         { info_tbl: [(c5oa5,
                       label: block_c5oa5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oa5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oaf; else goto c5oae;
       c5oaf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5oae: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.908517549 UTC

[section ""cstring" . lvl_r5kSh_bytes" {
     lvl_r5kSh_bytes:
         I8[] [76,105,115,116,46,109,97,120,105,109,117,109,66,121,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.910630076 UTC

[section ""data" . Data.OldList.maximumBy1_closure" {
     Data.OldList.maximumBy1_closure:
         const Data.OldList.maximumBy1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.OldList.maximumBy1_entry() //  [R1]
         { info_tbl: [(c5oaC,
                       label: Data.OldList.maximumBy1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oaC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5oaD; else goto c5oaE;
       c5oaD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oaE: // global
           (_c5oax::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5oax::I64 == 0) goto c5oaz; else goto c5oay;
       c5oaz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5oay: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5oax::I64;
           I64[Sp - 24] = block_c5oaA_info;
           R2 = lvl_r5kSh_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5oaA() //  [R1]
         { info_tbl: [(c5oaA,
                       label: block_c5oaA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oaA: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.91816674 UTC

[section ""data" . Data.OldList.maximumBy_closure" {
     Data.OldList.maximumBy_closure:
         const Data.OldList.maximumBy_info;
         const 0;
 },
 sat_s5kZL_entry() //  [R1]
         { info_tbl: [(c5obn,
                       label: sat_s5kZL_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5obn: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5obo; else goto c5obp;
       c5obo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5obp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c5obh_info;
           _s5kZI::P64 = P64[R1 + 32];
           R3 = _s5kZI::P64;
           _s5kZG::P64 = P64[R1 + 24];
           R2 = _s5kZG::P64;
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s5kZG::P64;
           P64[Sp - 24] = _s5kZI::P64;
           Sp = Sp - 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5obh() //  [R1]
         { info_tbl: [(c5obh,
                       label: block_c5obh_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5obh: // global
           if (R1 & 7 == 3) goto c5obl; else goto c5obk;
       c5obl: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c5obk: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.maximumBy_entry() //  [R2, R3]
         { info_tbl: [(c5obA,
                       label: Data.OldList.maximumBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5obA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5obB; else goto c5obC;
       c5obB: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.maximumBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5obC: // global
           I64[Sp - 16] = block_c5oaW_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5obV; else goto c5oaX;
       u5obV: // global
           call _c5oaW(R1) args: 0, res: 0, upd: 0;
       c5oaX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oaW() //  [R1]
         { info_tbl: [(c5oaW,
                       label: block_c5oaW_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oaW: // global
           if (R1 & 7 == 1) goto c5obx; else goto c5oby;
       c5obx: // global
           R1 = Data.OldList.maximumBy1_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5oby: // global
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = P64[R1 + 14];
           Sp = Sp - 8;
           call _c5ob5() args: 0, res: 0, upd: 0;
     }
 },
 _c5ob5() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ob5: // global
           I64[Sp - 8] = block_c5ob7_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5obT; else goto c5ob8;
       u5obT: // global
           call _c5ob7(R1) args: 0, res: 0, upd: 0;
       c5ob8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ob7() //  [R1]
         { info_tbl: [(c5ob7,
                       label: block_c5ob7_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ob7: // global
           _s5kZG::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5obK; else goto c5obL;
       c5obK: // global
           R1 = _s5kZG::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5obL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5obO; else goto c5obN;
       c5obO: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5obN: // global
           _s5kZI::P64 = P64[R1 + 6];
           _s5kZJ::P64 = P64[R1 + 14];
           I64[Hp - 32] = sat_s5kZL_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s5kZG::P64;
           P64[Hp] = _s5kZI::P64;
           P64[Sp + 16] = _s5kZJ::P64;
           P64[Sp + 8] = Hp - 32;
           Sp = Sp + 8;
           call _c5ob5() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.931292409 UTC

[section ""cstring" . lvl1_r5kSi_bytes" {
     lvl1_r5kSi_bytes:
         I8[] [76,105,115,116,46,109,105,110,105,109,117,109,66,121,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.933427943 UTC

[section ""data" . Data.OldList.minimumBy1_closure" {
     Data.OldList.minimumBy1_closure:
         const Data.OldList.minimumBy1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.OldList.minimumBy1_entry() //  [R1]
         { info_tbl: [(c5ocB,
                       label: Data.OldList.minimumBy1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ocB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5ocC; else goto c5ocD;
       c5ocC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ocD: // global
           (_c5ocw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5ocw::I64 == 0) goto c5ocy; else goto c5ocx;
       c5ocy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5ocx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5ocw::I64;
           I64[Sp - 24] = block_c5ocz_info;
           R2 = lvl1_r5kSi_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5ocz() //  [R1]
         { info_tbl: [(c5ocz,
                       label: block_c5ocz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ocz: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.939956114 UTC

[section ""data" . Data.OldList.minimumBy_closure" {
     Data.OldList.minimumBy_closure:
         const Data.OldList.minimumBy_info;
         const 0;
 },
 sat_s5kZZ_entry() //  [R1]
         { info_tbl: [(c5odm,
                       label: sat_s5kZZ_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5odm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5odn; else goto c5odo;
       c5odn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5odo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c5odg_info;
           _s5kZW::P64 = P64[R1 + 32];
           R3 = _s5kZW::P64;
           _s5kZU::P64 = P64[R1 + 24];
           R2 = _s5kZU::P64;
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s5kZU::P64;
           P64[Sp - 24] = _s5kZW::P64;
           Sp = Sp - 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5odg() //  [R1]
         { info_tbl: [(c5odg,
                       label: block_c5odg_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5odg: // global
           if (R1 & 7 == 3) goto c5odk; else goto c5odj;
       c5odk: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c5odj: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.minimumBy_entry() //  [R2, R3]
         { info_tbl: [(c5odz,
                       label: Data.OldList.minimumBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5odz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5odA; else goto c5odB;
       c5odA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.minimumBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5odB: // global
           I64[Sp - 16] = block_c5ocV_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5odU; else goto c5ocW;
       u5odU: // global
           call _c5ocV(R1) args: 0, res: 0, upd: 0;
       c5ocW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ocV() //  [R1]
         { info_tbl: [(c5ocV,
                       label: block_c5ocV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ocV: // global
           if (R1 & 7 == 1) goto c5odw; else goto c5odx;
       c5odw: // global
           R1 = Data.OldList.minimumBy1_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5odx: // global
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = P64[R1 + 14];
           Sp = Sp - 8;
           call _c5od4() args: 0, res: 0, upd: 0;
     }
 },
 _c5od4() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5od4: // global
           I64[Sp - 8] = block_c5od6_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5odS; else goto c5od7;
       u5odS: // global
           call _c5od6(R1) args: 0, res: 0, upd: 0;
       c5od7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5od6() //  [R1]
         { info_tbl: [(c5od6,
                       label: block_c5od6_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5od6: // global
           _s5kZU::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5odJ; else goto c5odK;
       c5odJ: // global
           R1 = _s5kZU::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5odK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5odN; else goto c5odM;
       c5odN: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5odM: // global
           _s5kZW::P64 = P64[R1 + 6];
           _s5kZX::P64 = P64[R1 + 14];
           I64[Hp - 32] = sat_s5kZZ_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s5kZU::P64;
           P64[Hp] = _s5kZW::P64;
           P64[Sp + 16] = _s5kZX::P64;
           P64[Sp + 8] = Hp - 32;
           Sp = Sp + 8;
           call _c5od4() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.953626904 UTC

[section ""data" . sat_s5l00_closure" {
     sat_s5l00_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.956124036 UTC

[section ""data" . sat_s5l01_closure" {
     sat_s5l01_closure:
         const :_con_info;
         const sat_s5l00_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.959131676 UTC

[section ""data" . Data.OldList.genericLength2_closure" {
     Data.OldList.genericLength2_closure:
         const Data.OldList.genericLength2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.OldList.genericLength2_entry() //  [R1]
         { info_tbl: [(c5oez,
                       label: Data.OldList.genericLength2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oez: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5oeA; else goto c5oeB;
       c5oeA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oeB: // global
           (_c5oew::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5oew::I64 == 0) goto c5oey; else goto c5oex;
       c5oey: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5oex: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5oew::I64;
           R3 = sat_s5l01_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.96575241 UTC

[section ""data" . Data.OldList.genericLength1_closure" {
     Data.OldList.genericLength1_closure:
         const Data.OldList.genericLength1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.OldList.genericLength1_entry() //  [R1]
         { info_tbl: [(c5oeP,
                       label: Data.OldList.genericLength1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oeP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5oeQ; else goto c5oeR;
       c5oeQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oeR: // global
           (_c5oeM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5oeM::I64 == 0) goto c5oeO; else goto c5oeN;
       c5oeO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5oeN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5oeM::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.973395643 UTC

[section ""data" . Data.OldList.strictGenericLength_closure" {
     Data.OldList.strictGenericLength_closure:
         const Data.OldList.strictGenericLength_info;
         const 0;
 },
 lvl12_s5l04_entry() //  [R1]
         { info_tbl: [(c5of8,
                       label: lvl12_s5l04_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5of8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5of9; else goto c5ofa;
       c5of9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ofa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l0c_entry() //  [R1]
         { info_tbl: [(c5ofe,
                       label: sat_s5l0c_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ofe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5off; else goto c5ofg;
       c5off: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ofg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.OldList.strictGenericLength_entry() //  [R2, R3]
         { info_tbl: [(c5ofj,
                       label: Data.OldList.strictGenericLength_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ofj: // global
           _s5l03::P64 = R3;
           _s5l02::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c5ofk; else goto c5ofl;
       c5ofl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5ofn; else goto c5ofm;
       c5ofn: // global
           HpAlloc = 48;
           goto c5ofk;
       c5ofk: // global
           R3 = _s5l03::P64;
           R2 = _s5l02::P64;
           R1 = Data.OldList.strictGenericLength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5ofm: // global
           I64[Hp - 40] = lvl12_s5l04_info;
           P64[Hp - 24] = _s5l02::P64;
           I64[Hp - 16] = sat_s5l0c_info;
           P64[Hp] = _s5l02::P64;
           P64[Sp - 32] = Hp - 40;
           P64[Sp - 24] = _s5l02::P64;
           P64[Sp - 16] = _s5l03::P64;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 32;
           call _c5ofp() args: 0, res: 0, upd: 0;
     }
 },
 _c5ofp() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ofp: // global
           I64[Sp - 8] = block_c5ofr_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5ofL; else goto c5oft;
       u5ofL: // global
           call _c5ofr(R1) args: 0, res: 0, upd: 0;
       c5oft: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ofr() //  [R1]
         { info_tbl: [(c5ofr,
                       label: block_c5ofr_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ofr: // global
           _s5l07::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5ofz; else goto c5ofE;
       c5ofz: // global
           R1 = _s5l07::P64;
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5ofE: // global
           I64[Sp] = block_c5ofC_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s5l07::P64;
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 14];
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5ofC() //  [R1]
         { info_tbl: [(c5ofC,
                       label: block_c5ofC_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ofC: // global
           P64[Sp + 24] = P64[Sp + 32];
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c5ofp() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:19.994361517 UTC

[section ""data" . Data.OldList.genericLength_closure" {
     Data.OldList.genericLength_closure:
         const Data.OldList.genericLength_info;
         const 0;
 },
 sat_s5l0j_entry() //  [R1]
         { info_tbl: [(c5ogu,
                       label: sat_s5l0j_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ogu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5ogv; else goto c5ogw;
       c5ogv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ogw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.genericLength_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l0i_entry() //  [R1]
         { info_tbl: [(c5ogB,
                       label: sat_s5l0i_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ogB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5ogC; else goto c5ogD;
       c5ogC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ogD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.OldList.genericLength_entry() //  [R2, R3]
         { info_tbl: [(c5ogI,
                       label: Data.OldList.genericLength_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ogI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5ogJ; else goto c5ogK;
       c5ogJ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericLength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5ogK: // global
           I64[Sp - 16] = block_c5ogk_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5ogQ; else goto c5ogl;
       u5ogQ: // global
           call _c5ogk(R1) args: 0, res: 0, upd: 0;
       c5ogl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ogk() //  [R1]
         { info_tbl: [(c5ogk,
                       label: block_c5ogk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ogk: // global
           _s5l0d::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5ogF; else goto c5ogG;
       c5ogF: // global
           R2 = _s5l0d::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = Data.OldList.genericLength1_closure;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
       c5ogG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5ogP; else goto c5ogO;
       c5ogP: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ogO: // global
           _s5l0h::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s5l0j_info;
           P64[Hp - 32] = _s5l0d::P64;
           P64[Hp - 24] = _s5l0h::P64;
           I64[Hp - 16] = sat_s5l0i_info;
           P64[Hp] = _s5l0d::P64;
           R2 = _s5l0d::P64;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Hp - 16;
           P64[Sp + 8] = Hp - 48;
           Sp = Sp - 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.011134004 UTC

[section ""data" . Data.OldList.genericTake_closure" {
     Data.OldList.genericTake_closure:
         const Data.OldList.genericTake_info;
         const 0;
 },
 $dNum_s5l0o_entry() //  [R1]
         { info_tbl: [(c5oho,
                       label: $dNum_s5l0o_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oho: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5ohp; else goto c5ohq;
       c5ohp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ohq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l0q_entry() //  [R1]
         { info_tbl: [(c5ohv,
                       label: sat_s5l0q_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ohv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5ohw; else goto c5ohx;
       c5ohw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ohx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l0v_entry() //  [R1]
         { info_tbl: [(c5ohY,
                       label: sat_s5l0v_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ohY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5ohZ; else goto c5oi0;
       c5ohZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oi0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l0w_entry() //  [R1]
         { info_tbl: [(c5oi1,
                       label: sat_s5l0w_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oi1: // global
           _s5l0w::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5oi2; else goto c5oi3;
       c5oi3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oi5; else goto c5oi4;
       c5oi5: // global
           HpAlloc = 24;
           goto c5oi2;
       c5oi2: // global
           R1 = _s5l0w::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oi4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l0w::P64;
           _s5l0l::P64 = P64[_s5l0w::P64 + 16];
           _s5l0o::P64 = P64[_s5l0w::P64 + 24];
           I64[Hp - 16] = sat_s5l0v_info;
           P64[Hp] = _s5l0o::P64;
           R2 = _s5l0o::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s5l0l::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5l0x_entry() //  [R1]
         { info_tbl: [(c5oi6,
                       label: sat_s5l0x_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oi6: // global
           _s5l0x::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5oi7; else goto c5oi8;
       c5oi8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5oia; else goto c5oi9;
       c5oia: // global
           HpAlloc = 32;
           goto c5oi7;
       c5oi7: // global
           R1 = _s5l0x::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oi9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l0x::P64;
           _s5l0k::P64 = P64[_s5l0x::P64 + 16];
           _s5l0l::P64 = P64[_s5l0x::P64 + 24];
           _s5l0o::P64 = P64[_s5l0x::P64 + 32];
           _s5l0u::P64 = P64[_s5l0x::P64 + 40];
           I64[Hp - 24] = sat_s5l0w_info;
           P64[Hp - 8] = _s5l0l::P64;
           P64[Hp] = _s5l0o::P64;
           R4 = _s5l0u::P64;
           R3 = Hp - 24;
           R2 = _s5l0k::P64;
           Sp = Sp - 16;
           call Data.OldList.genericTake_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.genericTake_entry() //  [R2, R3, R4]
         { info_tbl: [(c5oib,
                       label: Data.OldList.genericTake_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oib: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5oic; else goto c5oid;
       c5oic: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericTake_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5oid: // global
           I64[Sp - 32] = block_c5ohg_info;
           _s5l0k::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s5l0k::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5ohg() //  [R1]
         { info_tbl: [(c5ohg,
                       label: block_c5ohg_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ohg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5oig; else goto c5oif;
       c5oig: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oif: // global
           I64[Hp - 40] = $dNum_s5l0o_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s5l0q_info;
           _c5ohk::P64 = Hp - 40;
           P64[Hp] = _c5ohk::P64;
           I64[Sp - 16] = block_c5ohy_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = _c5ohk::P64;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5ohy() //  [R1]
         { info_tbl: [(c5ohy,
                       label: block_c5ohy_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ohy: // global
           _c5ohr::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5ohC_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c5ohr::P64;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5ohC() //  [R1]
         { info_tbl: [(c5ohC,
                       label: block_c5ohC_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ohC: // global
           if (R1 & 7 == 1) goto c5oik; else goto u5oiA;
       c5oik: // global
           I64[Sp] = block_c5ohG_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto u5oiC; else goto c5ohH;
       u5oiC: // global
           call _c5ohG(R1) args: 0, res: 0, upd: 0;
       c5ohH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u5oiA: // global
           Sp = Sp + 40;
           call _c5oix() args: 0, res: 0, upd: 0;
     }
 },
 _c5ohG() //  [R1]
         { info_tbl: [(c5ohG,
                       label: block_c5ohG_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ohG: // global
           if (R1 & 7 == 1) goto u5oiB; else goto c5oiq;
       u5oiB: // global
           Sp = Sp + 40;
           call _c5oix() args: 0, res: 0, upd: 0;
       c5oiq: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5oit; else goto c5ois;
       c5oit: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ois: // global
           _s5l0t::P64 = P64[R1 + 6];
           _s5l0u::P64 = P64[R1 + 14];
           I64[Hp - 64] = sat_s5l0x_info;
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s5l0u::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l0t::P64;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5oix() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oix: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.041301157 UTC

[section ""data" . Data.OldList.genericReplicate_closure" {
     Data.OldList.genericReplicate_closure:
         const Data.OldList.genericReplicate_info;
         const 0;
 },
 sat_s5l0B_entry() //  [R1]
         { info_tbl: [(c5ojE,
                       label: sat_s5l0B_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ojE: // global
           R2 = P64[R1 + 16];
           call GHC.List.repeat_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.genericReplicate_entry() //  [R2, R3, R4]
         { info_tbl: [(c5ojH,
                       label: Data.OldList.genericReplicate_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ojH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5ojL; else goto c5ojK;
       c5ojL: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericReplicate_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5ojK: // global
           I64[Hp - 16] = sat_s5l0B_info;
           P64[Hp] = R4;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           call Data.OldList.genericTake_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.051983632 UTC

[section ""data" . Data.OldList.genericDrop_closure" {
     Data.OldList.genericDrop_closure:
         const Data.OldList.genericDrop_info;
         const 0;
 },
 $dNum_s5l0G_entry() //  [R1]
         { info_tbl: [(c5okm,
                       label: $dNum_s5l0G_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5okm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5okn; else goto c5oko;
       c5okn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oko: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l0I_entry() //  [R1]
         { info_tbl: [(c5okr,
                       label: sat_s5l0I_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5okr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5oks; else goto c5okt;
       c5oks: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5okt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l0N_entry() //  [R1]
         { info_tbl: [(c5okB,
                       label: sat_s5l0N_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5okB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5okC; else goto c5okD;
       c5okC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5okD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l0O_entry() //  [R1]
         { info_tbl: [(c5okE,
                       label: sat_s5l0O_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5okE: // global
           _s5l0O::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5okF; else goto c5okG;
       c5okG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5okI; else goto c5okH;
       c5okI: // global
           HpAlloc = 24;
           goto c5okF;
       c5okF: // global
           R1 = _s5l0O::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5okH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l0O::P64;
           _s5l0D::P64 = P64[_s5l0O::P64 + 16];
           _s5l0G::P64 = P64[_s5l0O::P64 + 24];
           I64[Hp - 16] = sat_s5l0N_info;
           P64[Hp] = _s5l0G::P64;
           R2 = _s5l0G::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s5l0D::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 Data.OldList.genericDrop_entry() //  [R2, R3, R4]
         { info_tbl: [(c5okJ,
                       label: Data.OldList.genericDrop_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5okJ: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5okK; else goto u5ol7;
       c5okK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericDrop_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5ol7: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5ojU() args: 0, res: 0, upd: 0;
     }
 },
 _c5ojU() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ojU: // global
           I64[Sp - 8] = block_c5ojX_info;
           R2 = P64[Sp];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5ojX() //  [R1]
         { info_tbl: [(c5ojX,
                       label: block_c5ojX_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ojX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5okO; else goto c5okN;
       c5okO: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5okN: // global
           I64[Hp - 40] = $dNum_s5l0G_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s5l0I_info;
           _c5ok1::P64 = Hp - 40;
           P64[Hp] = _c5ok1::P64;
           I64[Sp - 16] = block_c5ok5_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = _c5ok1::P64;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5ok5() //  [R1]
         { info_tbl: [(c5ok5,
                       label: block_c5ok5_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ok5: // global
           _c5ok3::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5ok9_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c5ok3::P64;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5ok9() //  [R1]
         { info_tbl: [(c5ok9,
                       label: block_c5ok9_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ok9: // global
           _s5l0E::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5okS; else goto c5ol4;
       c5okS: // global
           I64[Sp] = block_c5okd_info;
           R1 = _s5l0E::P64;
           if (R1 & 7 != 0) goto u5ol9; else goto c5oke;
       u5ol9: // global
           call _c5okd(R1) args: 0, res: 0, upd: 0;
       c5oke: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5ol4: // global
           R1 = _s5l0E::P64 & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5okd() //  [R1]
         { info_tbl: [(c5okd,
                       label: block_c5okd_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5okd: // global
           if (R1 & 7 == 1) goto c5okW; else goto c5okX;
       c5okW: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5okX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5ol0; else goto c5okZ;
       c5ol0: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5okZ: // global
           _s5l0M::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_s5l0O_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 32] = _s5l0M::P64;
           Sp = Sp + 16;
           call _c5ojU() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.079054039 UTC

[section ""data" . Data.OldList.$wgenericSplitAt_closure" {
     Data.OldList.$wgenericSplitAt_closure:
         const Data.OldList.$wgenericSplitAt_info;
         const 0;
 },
 $dNum_s5l0T_entry() //  [R1]
         { info_tbl: [(c5omc,
                       label: $dNum_s5l0T_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5omc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5omd; else goto c5ome;
       c5omd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ome: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l0V_entry() //  [R1]
         { info_tbl: [(c5omj,
                       label: sat_s5l0V_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5omj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5omk; else goto c5oml;
       c5omk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oml: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l11_entry() //  [R1]
         { info_tbl: [(c5omM,
                       label: sat_s5l11_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5omM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5omN; else goto c5omO;
       c5omN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5omO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l12_entry() //  [R1]
         { info_tbl: [(c5omP,
                       label: sat_s5l12_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5omP: // global
           _s5l12::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5omQ; else goto c5omR;
       c5omR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5omT; else goto c5omS;
       c5omT: // global
           HpAlloc = 24;
           goto c5omQ;
       c5omQ: // global
           R1 = _s5l12::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5omS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l12::P64;
           _s5l0Q::P64 = P64[_s5l12::P64 + 16];
           _s5l0T::P64 = P64[_s5l12::P64 + 24];
           I64[Hp - 16] = sat_s5l11_info;
           P64[Hp] = _s5l0T::P64;
           R2 = _s5l0T::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s5l0Q::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 ds_s5l10_entry() //  [R1]
         { info_tbl: [(c5omX,
                       label: ds_s5l10_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5omX: // global
           _s5l10::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5omY; else goto c5omZ;
       c5omZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5on1; else goto c5on0;
       c5on1: // global
           HpAlloc = 32;
           goto c5omY;
       c5omY: // global
           R1 = _s5l10::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5on0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l10::P64;
           _s5l0P::P64 = P64[_s5l10::P64 + 16];
           _s5l0Q::P64 = P64[_s5l10::P64 + 24];
           _s5l0T::P64 = P64[_s5l10::P64 + 32];
           _s5l0Z::P64 = P64[_s5l10::P64 + 40];
           I64[Hp - 24] = sat_s5l12_info;
           P64[Hp - 8] = _s5l0Q::P64;
           P64[Hp] = _s5l0T::P64;
           I64[Sp - 24] = block_c5omU_info;
           R4 = _s5l0Z::P64;
           R3 = Hp - 24;
           R2 = _s5l0P::P64;
           Sp = Sp - 24;
           call Data.OldList.$wgenericSplitAt_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5omU() //  [R1, R2]
         { info_tbl: [(c5omU,
                       label: block_c5omU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5omU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5on4; else goto c5on3;
       c5on4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5on3: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wgenericSplitAt_entry() //  [R2, R3, R4]
         { info_tbl: [(c5on5,
                       label: Data.OldList.$wgenericSplitAt_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5on5: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5on6; else goto c5on7;
       c5on6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$wgenericSplitAt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5on7: // global
           I64[Sp - 32] = block_c5om4_info;
           _s5l0P::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s5l0P::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5om4() //  [R1]
         { info_tbl: [(c5om4,
                       label: block_c5om4_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5om4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5ona; else goto c5on9;
       c5ona: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5on9: // global
           I64[Hp - 40] = $dNum_s5l0T_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s5l0V_info;
           _c5om8::P64 = Hp - 40;
           P64[Hp] = _c5om8::P64;
           I64[Sp - 16] = block_c5omm_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = _c5om8::P64;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5omm() //  [R1]
         { info_tbl: [(c5omm,
                       label: block_c5omm_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5omm: // global
           _c5omf::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5omq_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c5omf::P64;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5omq() //  [R1]
         { info_tbl: [(c5omq,
                       label: block_c5omq_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5omq: // global
           _s5l0R::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5one; else goto c5ont;
       c5one: // global
           I64[Sp] = block_c5omu_info;
           R1 = _s5l0R::P64;
           if (R1 & 7 != 0) goto u5onw; else goto c5omv;
       u5onw: // global
           call _c5omu(R1) args: 0, res: 0, upd: 0;
       c5omv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5ont: // global
           R2 = _s5l0R::P64;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5omu() //  [R1]
         { info_tbl: [(c5omu,
                       label: block_c5omu_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5omu: // global
           if (R1 & 7 == 1) goto c5oni; else goto c5onm;
       c5oni: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5onm: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c5onp; else goto c5ono;
       c5onp: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ono: // global
           _s5l0Y::P64 = P64[R1 + 6];
           _s5l0Z::P64 = P64[R1 + 14];
           I64[Hp - 112] = ds_s5l10_info;
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = _s5l0Z::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c5omA::P64 = Hp - 112;
           P64[Hp - 48] = _c5omA::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5omA::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l0Y::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.105188865 UTC

[section ""data" . Data.OldList.genericSplitAt_closure" {
     Data.OldList.genericSplitAt_closure:
         const Data.OldList.genericSplitAt_info;
         const 0;
 },
 Data.OldList.genericSplitAt_entry() //  [R2, R3, R4]
         { info_tbl: [(c5ooy,
                       label: Data.OldList.genericSplitAt_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ooy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5ooz; else goto c5ooA;
       c5ooz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericSplitAt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5ooA: // global
           I64[Sp - 8] = block_c5oov_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wgenericSplitAt_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5oov() //  [R1, R2]
         { info_tbl: [(c5oov,
                       label: block_c5oov_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oov: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5ooD; else goto c5ooC;
       c5ooD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5ooC: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.110954764 UTC

[section ""cstring" . lvl2_r5kSj_bytes" {
     lvl2_r5kSj_bytes:
         I8[] [76,105,115,116,46,103,101,110,101,114,105,99,73,110,100,101,120,58,32,110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116,46]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.113092963 UTC

[section ""data" . lvl3_r5kSk_closure" {
     lvl3_r5kSk_closure:
         const lvl3_r5kSk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r5kSk_entry() //  [R1]
         { info_tbl: [(c5ooW,
                       label: lvl3_r5kSk_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ooW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5ooX; else goto c5ooY;
       c5ooX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ooY: // global
           (_c5ooR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5ooR::I64 == 0) goto c5ooT; else goto c5ooS;
       c5ooT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5ooS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5ooR::I64;
           I64[Sp - 24] = block_c5ooU_info;
           R2 = lvl2_r5kSj_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5ooU() //  [R1]
         { info_tbl: [(c5ooU,
                       label: block_c5ooU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ooU: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.119203239 UTC

[section ""cstring" . lvl4_r5kSl_bytes" {
     lvl4_r5kSl_bytes:
         I8[] [76,105,115,116,46,103,101,110,101,114,105,99,73,110,100,101,120,58,32,105,110,100,101,120,32,116,111,111,32,108,97,114,103,101,46]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.121418194 UTC

[section ""data" . lvl5_r5kSm_closure" {
     lvl5_r5kSm_closure:
         const lvl5_r5kSm_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r5kSm_entry() //  [R1]
         { info_tbl: [(c5opl,
                       label: lvl5_r5kSm_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5opl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5opm; else goto c5opn;
       c5opm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5opn: // global
           (_c5opg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5opg::I64 == 0) goto c5opi; else goto c5oph;
       c5opi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5oph: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5opg::I64;
           I64[Sp - 24] = block_c5opj_info;
           R2 = lvl4_r5kSl_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5opj() //  [R1]
         { info_tbl: [(c5opj,
                       label: block_c5opj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5opj: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.130649595 UTC

[section ""data" . Data.OldList.genericIndex_closure" {
     Data.OldList.genericIndex_closure:
         const Data.OldList.genericIndex_info;
         const 0;
 },
 $dNum_s5l1u_entry() //  [R1]
         { info_tbl: [(c5oqf,
                       label: $dNum_s5l1u_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oqf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5oqg; else goto c5oqh;
       c5oqg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oqh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l1x_entry() //  [R1]
         { info_tbl: [(c5oqk,
                       label: sat_s5l1x_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oqk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5oql; else goto c5oqm;
       c5oql: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oqm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l1z_entry() //  [R1]
         { info_tbl: [(c5oqp,
                       label: sat_s5l1z_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oqp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5oqq; else goto c5oqr;
       c5oqq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oqr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l1B_entry() //  [R1]
         { info_tbl: [(c5oqz,
                       label: sat_s5l1B_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oqz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5oqA; else goto c5oqB;
       c5oqA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oqB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5l1C_entry() //  [R1]
         { info_tbl: [(c5oqC,
                       label: sat_s5l1C_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oqC: // global
           _s5l1C::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5oqD; else goto c5oqE;
       c5oqE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oqG; else goto c5oqF;
       c5oqG: // global
           HpAlloc = 24;
           goto c5oqD;
       c5oqD: // global
           R1 = _s5l1C::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oqF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l1C::P64;
           _s5l1p::P64 = P64[_s5l1C::P64 + 16];
           _s5l1u::P64 = P64[_s5l1C::P64 + 24];
           I64[Hp - 16] = sat_s5l1B_info;
           P64[Hp] = _s5l1u::P64;
           R2 = _s5l1u::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s5l1p::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 Data.OldList.genericIndex_entry() //  [R2, R3, R4]
         { info_tbl: [(c5oqL,
                       label: Data.OldList.genericIndex_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oqL: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c5oqM; else goto u5orh;
       c5oqM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericIndex_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5orh: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5opC() args: 0, res: 0, upd: 0;
     }
 },
 _c5opC() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5opC: // global
           I64[Sp - 8] = block_c5opF_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5orj; else goto c5opG;
       u5orj: // global
           call _c5opF(R1) args: 0, res: 0, upd: 0;
       c5opG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5opF() //  [R1]
         { info_tbl: [(c5opF,
                       label: block_c5opF_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5opF: // global
           if (R1 & 7 == 1) goto c5oqI; else goto c5oqJ;
       c5oqI: // global
           R1 = lvl5_r5kSm_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5oqJ: // global
           I64[Sp - 8] = block_c5opL_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 16] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5opL() //  [R1]
         { info_tbl: [(c5opL,
                       label: block_c5opL_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5opL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oqT; else goto c5oqS;
       c5oqT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oqS: // global
           I64[Hp - 16] = $dNum_s5l1u_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c5opR_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5opR() //  [R1]
         { info_tbl: [(c5opR,
                       label: block_c5opR_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5opR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oqW; else goto c5oqV;
       c5oqW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oqV: // global
           I64[Hp - 16] = sat_s5l1x_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 16] = block_c5opX_info;
           R2 = R1;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5opX() //  [R1]
         { info_tbl: [(c5opX,
                       label: block_c5opX_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5opX: // global
           I64[Sp] = block_c5oq1_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 56];
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5oq1() //  [R1]
         { info_tbl: [(c5oq1,
                       label: block_c5oq1_info
                       rep:StackRep [False, True, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oq1: // global
           if (R1 & 7 == 1) goto c5oqZ; else goto c5ore;
       c5oqZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5or2; else goto c5or1;
       c5or2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5or1: // global
           I64[Hp - 16] = sat_s5l1z_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 16] = block_c5oq7_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 56];
           P64[Sp + 8] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Classes.>_entry(R2) args: 32, res: 8, upd: 8;
       c5ore: // global
           R1 = P64[Sp + 48];
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5oq7() //  [R1]
         { info_tbl: [(c5oq7,
                       label: block_c5oq7_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oq7: // global
           if (R1 & 7 == 1) goto c5or6; else goto c5or7;
       c5or6: // global
           R1 = lvl3_r5kSk_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5or7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5ora; else goto c5or9;
       c5ora: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5or9: // global
           I64[Hp - 24] = sat_s5l1C_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 8];
           P64[Sp + 24] = P64[Sp + 24];
           P64[Sp + 32] = P64[Sp + 16];
           P64[Sp + 40] = Hp - 24;
           Sp = Sp + 24;
           call _c5opC() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.159355622 UTC

[section ""data" . Data.OldList.zipWith4_closure" {
     Data.OldList.zipWith4_closure:
         const Data.OldList.zipWith4_info;
 },
 sat_s5l1V_entry() //  [R1]
         { info_tbl: [(c5osY,
                       label: sat_s5l1V_info
                       rep:HeapRep 5 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5osY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5osZ; else goto c5ot0;
       c5osZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ot0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.zipWith4_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.zipWith4_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5ot5,
                       label: Data.OldList.zipWith4_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ot5: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5ot6; else goto c5ot7;
       c5ot6: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.zipWith4_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5ot7: // global
           I64[Sp - 40] = block_c5osw_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u5otL; else goto c5osx;
       u5otL: // global
           call _c5osw(R1) args: 0, res: 0, upd: 0;
       c5osx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5osw() //  [R1]
         { info_tbl: [(c5osw,
                       label: block_c5osw_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5osw: // global
           if (R1 & 7 == 1) goto u5otA; else goto c5ot3;
       u5otA: // global
           Sp = Sp + 40;
           call _c5otq() args: 0, res: 0, upd: 0;
       c5ot3: // global
           I64[Sp - 8] = block_c5osC_info;
           _s5l1J::P64 = P64[R1 + 6];
           _s5l1K::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _s5l1K::P64;
           P64[Sp + 16] = _s5l1J::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5otE; else goto c5osD;
       u5otE: // global
           call _c5osC(R1) args: 0, res: 0, upd: 0;
       c5osD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5osC() //  [R1]
         { info_tbl: [(c5osC,
                       label: block_c5osC_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5osC: // global
           if (R1 & 7 == 1) goto u5otB; else goto c5otg;
       u5otB: // global
           Sp = Sp + 48;
           call _c5otq() args: 0, res: 0, upd: 0;
       c5otg: // global
           I64[Sp - 8] = block_c5osI_info;
           _s5l1M::P64 = P64[R1 + 6];
           _s5l1N::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _s5l1N::P64;
           P64[Sp + 32] = _s5l1M::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5otG; else goto c5osJ;
       u5otG: // global
           call _c5osI(R1) args: 0, res: 0, upd: 0;
       c5osJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5osI() //  [R1]
         { info_tbl: [(c5osI,
                       label: block_c5osI_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5osI: // global
           if (R1 & 7 == 1) goto u5otC; else goto c5otm;
       u5otC: // global
           Sp = Sp + 56;
           call _c5otq() args: 0, res: 0, upd: 0;
       c5otm: // global
           I64[Sp - 8] = block_c5osO_info;
           _s5l1P::P64 = P64[R1 + 6];
           _s5l1Q::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5l1Q::P64;
           P64[Sp + 48] = _s5l1P::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5otI; else goto c5osP;
       u5otI: // global
           call _c5osO(R1) args: 0, res: 0, upd: 0;
       c5osP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5osO() //  [R1]
         { info_tbl: [(c5osO,
                       label: block_c5osO_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5osO: // global
           if (R1 & 7 == 1) goto u5otD; else goto c5ott;
       u5otD: // global
           Sp = Sp + 64;
           call _c5otq() args: 0, res: 0, upd: 0;
       c5ott: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c5otw; else goto c5otv;
       c5otw: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5otv: // global
           _s5l1S::P64 = P64[R1 + 6];
           _s5l1T::P64 = P64[R1 + 14];
           I64[Hp - 128] = sat_s5l1V_info;
           _s5l1D::P64 = P64[Sp + 32];
           P64[Hp - 112] = _s5l1D::P64;
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = P64[Sp + 8];
           P64[Hp - 80] = _s5l1T::P64;
           I64[Hp - 72] = stg_ap_5_upd_info;
           P64[Hp - 56] = _s5l1D::P64;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = _s5l1S::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5otq() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5otq: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.176558079 UTC

[section ""data" . Data.OldList.zip4_closure" {
     Data.OldList.zip4_closure:
         const Data.OldList.zip4_info;
 },
 Data.OldList.zip4_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5ouz,
                       label: Data.OldList.zip4_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ouz: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Tuple.(,,,)_closure+4;
           call Data.OldList.zipWith4_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.18168358 UTC

[section ""data" . Data.OldList.zipWith5_closure" {
     Data.OldList.zipWith5_closure:
         const Data.OldList.zipWith5_info;
 },
 sat_s5l2i_entry() //  [R1]
         { info_tbl: [(c5ovi,
                       label: sat_s5l2i_info
                       rep:HeapRep 6 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ovi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5ovj; else goto c5ovk;
       c5ovj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ovk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 24;
           call Data.OldList.zipWith5_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 32, res: 0, upd: 24;
     }
 },
 Data.OldList.zipWith5_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5ovp,
                       label: Data.OldList.zipWith5_info
                       rep:HeapRep static { Fun {arity: 6 fun_type: ArgSpec 26} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ovp: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c5ovq; else goto c5ovr;
       c5ovq: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.zipWith5_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c5ovr: // global
           I64[Sp - 40] = block_c5ouK_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u5owf; else goto c5ouL;
       u5owf: // global
           call _c5ouK(R1) args: 0, res: 0, upd: 0;
       c5ouL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ouK() //  [R1]
         { info_tbl: [(c5ouK,
                       label: block_c5ouK_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ouK: // global
           if (R1 & 7 == 1) goto u5ow1; else goto c5ovn;
       u5ow1: // global
           Sp = Sp + 48;
           call _c5ovQ() args: 0, res: 0, upd: 0;
       c5ovn: // global
           I64[Sp - 8] = block_c5ouQ_info;
           _s5l23::P64 = P64[R1 + 6];
           _s5l24::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _s5l24::P64;
           P64[Sp + 16] = _s5l23::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5ow6; else goto c5ouR;
       u5ow6: // global
           call _c5ouQ(R1) args: 0, res: 0, upd: 0;
       c5ouR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ouQ() //  [R1]
         { info_tbl: [(c5ouQ,
                       label: block_c5ouQ_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ouQ: // global
           if (R1 & 7 == 1) goto u5ow2; else goto c5ovA;
       u5ow2: // global
           Sp = Sp + 56;
           call _c5ovQ() args: 0, res: 0, upd: 0;
       c5ovA: // global
           I64[Sp - 8] = block_c5ouW_info;
           _s5l26::P64 = P64[R1 + 6];
           _s5l27::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _s5l27::P64;
           P64[Sp + 32] = _s5l26::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5ow8; else goto c5ouX;
       u5ow8: // global
           call _c5ouW(R1) args: 0, res: 0, upd: 0;
       c5ouX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ouW() //  [R1]
         { info_tbl: [(c5ouW,
                       label: block_c5ouW_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ouW: // global
           if (R1 & 7 == 1) goto u5ow3; else goto c5ovG;
       u5ow3: // global
           Sp = Sp + 64;
           call _c5ovQ() args: 0, res: 0, upd: 0;
       c5ovG: // global
           I64[Sp - 8] = block_c5ov2_info;
           _s5l29::P64 = P64[R1 + 6];
           _s5l2a::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5l2a::P64;
           P64[Sp + 48] = _s5l29::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5owa; else goto c5ov3;
       u5owa: // global
           call _c5ov2(R1) args: 0, res: 0, upd: 0;
       c5ov3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ov2() //  [R1]
         { info_tbl: [(c5ov2,
                       label: block_c5ov2_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ov2: // global
           if (R1 & 7 == 1) goto u5ow4; else goto c5ovM;
       u5ow4: // global
           Sp = Sp + 72;
           call _c5ovQ() args: 0, res: 0, upd: 0;
       c5ovM: // global
           I64[Sp - 8] = block_c5ov8_info;
           _s5l2c::P64 = P64[R1 + 6];
           _s5l2d::P64 = P64[R1 + 14];
           R1 = P64[Sp + 64];
           P64[Sp] = _s5l2d::P64;
           P64[Sp + 64] = _s5l2c::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5owc; else goto c5ov9;
       u5owc: // global
           call _c5ov8(R1) args: 0, res: 0, upd: 0;
       c5ov9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ov8() //  [R1]
         { info_tbl: [(c5ov8,
                       label: block_c5ov8_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ov8: // global
           if (R1 & 7 == 1) goto u5ow5; else goto c5ovT;
       u5ow5: // global
           Sp = Sp + 80;
           call _c5ovQ() args: 0, res: 0, upd: 0;
       c5ovT: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c5ovW; else goto c5ovV;
       c5ovW: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ovV: // global
           _s5l2f::P64 = P64[R1 + 6];
           _s5l2g::P64 = P64[R1 + 14];
           I64[Hp - 144] = sat_s5l2i_info;
           _s5l1W::P64 = P64[Sp + 40];
           P64[Hp - 128] = _s5l1W::P64;
           P64[Hp - 120] = P64[Sp + 32];
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 8];
           P64[Hp - 88] = _s5l2g::P64;
           I64[Hp - 80] = stg_ap_6_upd_info;
           P64[Hp - 64] = _s5l1W::P64;
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 72];
           P64[Hp - 24] = _s5l2f::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 144;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5ovQ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ovQ: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.200672355 UTC

[section ""data" . Data.OldList.zip5_closure" {
     Data.OldList.zip5_closure:
         const Data.OldList.zip5_info;
 },
 Data.OldList.zip5_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5oxc,
                       label: Data.OldList.zip5_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oxc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5oxd; else goto c5oxe;
       c5oxd: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.zip5_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5oxe: // global
           _B1::P64 = R6;
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Tuple.(,,,,)_closure+5;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.OldList.zipWith5_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 16, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.206331324 UTC

[section ""data" . Data.OldList.zipWith6_closure" {
     Data.OldList.zipWith6_closure:
         const Data.OldList.zipWith6_info;
 },
 Data.OldList.zipWith6_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oxl: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.OldList.zipWith6_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s5l2J_entry() //  [R1]
         { info_tbl: [(c5oy3,
                       label: sat_s5l2J_info
                       rep:HeapRep 7 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oy3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5oy4; else goto c5oy5;
       c5oy4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oy5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 56];
           P64[Sp - 24] = P64[R1 + 64];
           Sp = Sp - 32;
           call Data.OldList.zipWith6_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.OldList.zipWith6_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5oya,
                       label: Data.OldList.zipWith6_info
                       rep:HeapRep static {
                             Fun {arity: 7
                                  fun_type: ArgGen [False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oya: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c5oyb; else goto c5oyc;
       c5oyb: // global
           R1 = Data.OldList.zipWith6_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c5oyc: // global
           I64[Sp - 40] = block_c5oxp_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u5oza; else goto c5oxq;
       u5oza: // global
           call _c5oxp(R1) args: 0, res: 0, upd: 0;
       c5oxq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oxp() //  [R1]
         { info_tbl: [(c5oxp,
                       label: block_c5oxp_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oxp: // global
           if (R1 & 7 == 1) goto u5oyT; else goto c5oy8;
       u5oyT: // global
           Sp = Sp + 56;
           call _c5oyH() args: 0, res: 0, upd: 0;
       c5oy8: // global
           I64[Sp - 8] = block_c5oxv_info;
           _s5l2r::P64 = P64[R1 + 6];
           _s5l2s::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _s5l2s::P64;
           P64[Sp + 16] = _s5l2r::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oyZ; else goto c5oxw;
       u5oyZ: // global
           call _c5oxv(R1) args: 0, res: 0, upd: 0;
       c5oxw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oxv() //  [R1]
         { info_tbl: [(c5oxv,
                       label: block_c5oxv_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oxv: // global
           if (R1 & 7 == 1) goto u5oyU; else goto c5oyl;
       u5oyU: // global
           Sp = Sp + 64;
           call _c5oyH() args: 0, res: 0, upd: 0;
       c5oyl: // global
           I64[Sp - 8] = block_c5oxB_info;
           _s5l2u::P64 = P64[R1 + 6];
           _s5l2v::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _s5l2v::P64;
           P64[Sp + 32] = _s5l2u::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oz1; else goto c5oxC;
       u5oz1: // global
           call _c5oxB(R1) args: 0, res: 0, upd: 0;
       c5oxC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oxB() //  [R1]
         { info_tbl: [(c5oxB,
                       label: block_c5oxB_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oxB: // global
           if (R1 & 7 == 1) goto u5oyV; else goto c5oyr;
       u5oyV: // global
           Sp = Sp + 72;
           call _c5oyH() args: 0, res: 0, upd: 0;
       c5oyr: // global
           I64[Sp - 8] = block_c5oxH_info;
           _s5l2x::P64 = P64[R1 + 6];
           _s5l2y::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5l2y::P64;
           P64[Sp + 48] = _s5l2x::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oz3; else goto c5oxI;
       u5oz3: // global
           call _c5oxH(R1) args: 0, res: 0, upd: 0;
       c5oxI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oxH() //  [R1]
         { info_tbl: [(c5oxH,
                       label: block_c5oxH_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oxH: // global
           if (R1 & 7 == 1) goto u5oyW; else goto c5oyx;
       u5oyW: // global
           Sp = Sp + 80;
           call _c5oyH() args: 0, res: 0, upd: 0;
       c5oyx: // global
           I64[Sp - 8] = block_c5oxN_info;
           _s5l2A::P64 = P64[R1 + 6];
           _s5l2B::P64 = P64[R1 + 14];
           R1 = P64[Sp + 64];
           P64[Sp] = _s5l2B::P64;
           P64[Sp + 64] = _s5l2A::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oz5; else goto c5oxO;
       u5oz5: // global
           call _c5oxN(R1) args: 0, res: 0, upd: 0;
       c5oxO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oxN() //  [R1]
         { info_tbl: [(c5oxN,
                       label: block_c5oxN_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oxN: // global
           if (R1 & 7 == 1) goto u5oyX; else goto c5oyD;
       u5oyX: // global
           Sp = Sp + 88;
           call _c5oyH() args: 0, res: 0, upd: 0;
       c5oyD: // global
           I64[Sp - 8] = block_c5oxT_info;
           _s5l2D::P64 = P64[R1 + 6];
           _s5l2E::P64 = P64[R1 + 14];
           R1 = P64[Sp + 80];
           P64[Sp] = _s5l2E::P64;
           P64[Sp + 80] = _s5l2D::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oz7; else goto c5oxU;
       u5oz7: // global
           call _c5oxT(R1) args: 0, res: 0, upd: 0;
       c5oxU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oxT() //  [R1]
         { info_tbl: [(c5oxT,
                       label: block_c5oxT_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oxT: // global
           if (R1 & 7 == 1) goto u5oyY; else goto c5oyK;
       u5oyY: // global
           Sp = Sp + 96;
           call _c5oyH() args: 0, res: 0, upd: 0;
       c5oyK: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c5oyN; else goto c5oyM;
       c5oyN: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oyM: // global
           _s5l2G::P64 = P64[R1 + 6];
           _s5l2H::P64 = P64[R1 + 14];
           I64[Hp - 160] = sat_s5l2J_info;
           _s5l2j::P64 = P64[Sp + 48];
           P64[Hp - 144] = _s5l2j::P64;
           P64[Hp - 136] = P64[Sp + 40];
           P64[Hp - 128] = P64[Sp + 32];
           P64[Hp - 120] = P64[Sp + 24];
           P64[Hp - 112] = P64[Sp + 16];
           P64[Hp - 104] = P64[Sp + 8];
           P64[Hp - 96] = _s5l2H::P64;
           I64[Hp - 88] = stg_ap_7_upd_info;
           P64[Hp - 72] = _s5l2j::P64;
           P64[Hp - 64] = P64[Sp + 56];
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = P64[Sp + 80];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = _s5l2G::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 88;
           P64[Hp] = Hp - 160;
           R1 = Hp - 14;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5oyH() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oyH: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.228751375 UTC

[section ""data" . Data.OldList.zip6_closure" {
     Data.OldList.zip6_closure:
         const Data.OldList.zip6_info;
 },
 Data.OldList.zip6_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5oAi,
                       label: Data.OldList.zip6_info
                       rep:HeapRep static { Fun {arity: 6 fun_type: ArgSpec 26} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oAi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5oAj; else goto c5oAk;
       c5oAj: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.zip6_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c5oAk: // global
           _B2::P64 = R6;
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Tuple.(,,,,,)_closure+6;
           P64[Sp - 8] = _B2::P64;
           Sp = Sp - 8;
           call Data.OldList.zipWith6_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.235349543 UTC

[section ""data" . Data.OldList.zipWith7_closure" {
     Data.OldList.zipWith7_closure:
         const Data.OldList.zipWith7_info;
 },
 Data.OldList.zipWith7_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oAr: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.OldList.zipWith7_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s5l3e_entry() //  [R1]
         { info_tbl: [(c5oBf,
                       label: sat_s5l3e_info
                       rep:HeapRep 8 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oBf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5oBg; else goto c5oBh;
       c5oBg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oBh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 56];
           P64[Sp - 32] = P64[R1 + 64];
           P64[Sp - 24] = P64[R1 + 72];
           Sp = Sp - 40;
           call Data.OldList.zipWith7_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5l3d_entry() //  [R1]
         { info_tbl: [(c5oBm,
                       label: sat_s5l3d_info
                       rep:HeapRep 8 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oBm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5oBn; else goto c5oBo;
       c5oBn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oBo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 56];
           R5 = P64[R1 + 48];
           R4 = P64[R1 + 40];
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 24];
           _s5l38::P64 = P64[R1 + 64];
           _s5l3b::P64 = P64[R1 + 72];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s5l38::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = _s5l3b::P64;
           Sp = Sp - 40;
           call stg_ap_pppppp_fast(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 48, res: 0, upd: 24;
     }
 },
 Data.OldList.zipWith7_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5oBt,
                       label: Data.OldList.zipWith7_info
                       rep:HeapRep static {
                             Fun {arity: 8
                                  fun_type: ArgGen [False, False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oBt: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c5oBu; else goto c5oBv;
       c5oBu: // global
           R1 = Data.OldList.zipWith7_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c5oBv: // global
           I64[Sp - 40] = block_c5oAv_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u5oCC; else goto c5oAw;
       u5oCC: // global
           call _c5oAv(R1) args: 0, res: 0, upd: 0;
       c5oAw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oAv() //  [R1]
         { info_tbl: [(c5oAv,
                       label: block_c5oAv_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oAv: // global
           if (R1 & 7 == 1) goto u5oCi; else goto c5oBr;
       u5oCi: // global
           Sp = Sp + 64;
           call _c5oC6() args: 0, res: 0, upd: 0;
       c5oBr: // global
           I64[Sp - 8] = block_c5oAB_info;
           _s5l2T::P64 = P64[R1 + 6];
           _s5l2U::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _s5l2U::P64;
           P64[Sp + 16] = _s5l2T::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oCp; else goto c5oAC;
       u5oCp: // global
           call _c5oAB(R1) args: 0, res: 0, upd: 0;
       c5oAC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oAB() //  [R1]
         { info_tbl: [(c5oAB,
                       label: block_c5oAB_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oAB: // global
           if (R1 & 7 == 1) goto u5oCj; else goto c5oBE;
       u5oCj: // global
           Sp = Sp + 72;
           call _c5oC6() args: 0, res: 0, upd: 0;
       c5oBE: // global
           I64[Sp - 8] = block_c5oAH_info;
           _s5l2W::P64 = P64[R1 + 6];
           _s5l2X::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _s5l2X::P64;
           P64[Sp + 32] = _s5l2W::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oCr; else goto c5oAI;
       u5oCr: // global
           call _c5oAH(R1) args: 0, res: 0, upd: 0;
       c5oAI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oAH() //  [R1]
         { info_tbl: [(c5oAH,
                       label: block_c5oAH_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oAH: // global
           if (R1 & 7 == 1) goto u5oCk; else goto c5oBK;
       u5oCk: // global
           Sp = Sp + 80;
           call _c5oC6() args: 0, res: 0, upd: 0;
       c5oBK: // global
           I64[Sp - 8] = block_c5oAN_info;
           _s5l2Z::P64 = P64[R1 + 6];
           _s5l30::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5l30::P64;
           P64[Sp + 48] = _s5l2Z::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oCt; else goto c5oAO;
       u5oCt: // global
           call _c5oAN(R1) args: 0, res: 0, upd: 0;
       c5oAO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oAN() //  [R1]
         { info_tbl: [(c5oAN,
                       label: block_c5oAN_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oAN: // global
           if (R1 & 7 == 1) goto u5oCl; else goto c5oBQ;
       u5oCl: // global
           Sp = Sp + 88;
           call _c5oC6() args: 0, res: 0, upd: 0;
       c5oBQ: // global
           I64[Sp - 8] = block_c5oAT_info;
           _s5l32::P64 = P64[R1 + 6];
           _s5l33::P64 = P64[R1 + 14];
           R1 = P64[Sp + 64];
           P64[Sp] = _s5l33::P64;
           P64[Sp + 64] = _s5l32::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oCv; else goto c5oAU;
       u5oCv: // global
           call _c5oAT(R1) args: 0, res: 0, upd: 0;
       c5oAU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oAT() //  [R1]
         { info_tbl: [(c5oAT,
                       label: block_c5oAT_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oAT: // global
           if (R1 & 7 == 1) goto u5oCm; else goto c5oBW;
       u5oCm: // global
           Sp = Sp + 96;
           call _c5oC6() args: 0, res: 0, upd: 0;
       c5oBW: // global
           I64[Sp - 8] = block_c5oAZ_info;
           _s5l35::P64 = P64[R1 + 6];
           _s5l36::P64 = P64[R1 + 14];
           R1 = P64[Sp + 80];
           P64[Sp] = _s5l36::P64;
           P64[Sp + 80] = _s5l35::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oCx; else goto c5oB0;
       u5oCx: // global
           call _c5oAZ(R1) args: 0, res: 0, upd: 0;
       c5oB0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oAZ() //  [R1]
         { info_tbl: [(c5oAZ,
                       label: block_c5oAZ_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oAZ: // global
           if (R1 & 7 == 1) goto u5oCn; else goto c5oC2;
       u5oCn: // global
           Sp = Sp + 104;
           call _c5oC6() args: 0, res: 0, upd: 0;
       c5oC2: // global
           I64[Sp - 8] = block_c5oB5_info;
           _s5l38::P64 = P64[R1 + 6];
           _s5l39::P64 = P64[R1 + 14];
           R1 = P64[Sp + 96];
           P64[Sp] = _s5l39::P64;
           P64[Sp + 96] = _s5l38::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oCz; else goto c5oB6;
       u5oCz: // global
           call _c5oB5(R1) args: 0, res: 0, upd: 0;
       c5oB6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oB5() //  [R1]
         { info_tbl: [(c5oB5,
                       label: block_c5oB5_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oB5: // global
           if (R1 & 7 == 1) goto u5oCo; else goto c5oC8;
       u5oCo: // global
           Sp = Sp + 112;
           call _c5oC6() args: 0, res: 0, upd: 0;
       c5oC8: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto c5oCb; else goto c5oCa;
       c5oCb: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oCa: // global
           _s5l3b::P64 = P64[R1 + 6];
           _s5l3c::P64 = P64[R1 + 14];
           I64[Hp - 176] = sat_s5l3e_info;
           _s5l2K::P64 = P64[Sp + 56];
           P64[Hp - 160] = _s5l2K::P64;
           P64[Hp - 152] = P64[Sp + 48];
           P64[Hp - 144] = P64[Sp + 40];
           P64[Hp - 136] = P64[Sp + 32];
           P64[Hp - 128] = P64[Sp + 24];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = _s5l3c::P64;
           I64[Hp - 96] = sat_s5l3d_info;
           P64[Hp - 80] = _s5l2K::P64;
           P64[Hp - 72] = P64[Sp + 64];
           P64[Hp - 64] = P64[Sp + 72];
           P64[Hp - 56] = P64[Sp + 80];
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = P64[Sp + 96];
           P64[Hp - 32] = P64[Sp + 104];
           P64[Hp - 24] = _s5l3b::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 96;
           P64[Hp] = Hp - 176;
           R1 = Hp - 14;
           Sp = Sp + 112;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5oC6() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oC6: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.263084043 UTC

[section ""data" . Data.OldList.zip7_closure" {
     Data.OldList.zip7_closure:
         const Data.OldList.zip7_info;
 },
 Data.OldList.zip7_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oDU: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.OldList.zip7_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2,
                                        R1) args: 24, res: 0, upd: 8;
     }
 },
 Data.OldList.zip7_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5oDY,
                       label: Data.OldList.zip7_info
                       rep:HeapRep static {
                             Fun {arity: 7
                                  fun_type: ArgGen [False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oDY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5oDZ; else goto c5oE0;
       c5oDZ: // global
           R1 = Data.OldList.zip7_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c5oE0: // global
           _B3::P64 = R6;
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Tuple.(,,,,,,)_closure+7;
           P64[Sp - 8] = _B3::P64;
           Sp = Sp - 8;
           call Data.OldList.zipWith7_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.269697057 UTC

[section ""data" . Data.OldList.$wunzip4_closure" {
     Data.OldList.$wunzip4_closure:
         const Data.OldList.$wunzip4_info;
 },
 ds_s5l3o_entry() //  [R1]
         { info_tbl: [(c5oEu,
                       label: ds_s5l3o_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oEu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5oEv; else goto c5oEw;
       c5oEv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oEw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5oEr_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wunzip4_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5oEr() //  [R1, R2, R3, R4]
         { info_tbl: [(c5oEr,
                       label: block_c5oEr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oEr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5oEz; else goto c5oEy;
       c5oEz: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       c5oEy: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wunzip4_entry() //  [R2]
         { info_tbl: [(c5oEE,
                       label: Data.OldList.$wunzip4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oEE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5oEF; else goto c5oEG;
       c5oEF: // global
           R2 = R2;
           R1 = Data.OldList.$wunzip4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oEG: // global
           I64[Sp - 8] = block_c5oEc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oEW; else goto c5oEd;
       u5oEW: // global
           call _c5oEc(R1) args: 0, res: 0, upd: 0;
       c5oEd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oEc() //  [R1]
         { info_tbl: [(c5oEc,
                       label: block_c5oEc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oEc: // global
           if (R1 & 7 == 1) goto c5oEB; else goto c5oEC;
       c5oEB: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5oEC: // global
           I64[Sp - 8] = block_c5oEi_info;
           _s5l3i::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5l3i::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oEV; else goto c5oEj;
       u5oEV: // global
           call _c5oEi(R1) args: 0, res: 0, upd: 0;
       c5oEj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oEi() //  [R1]
         { info_tbl: [(c5oEi,
                       label: block_c5oEi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oEi: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto c5oEU; else goto c5oET;
       c5oEU: // global
           HpAlloc = 216;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oET: // global
           _s5l3k::P64 = P64[R1 + 7];
           _s5l3l::P64 = P64[R1 + 15];
           _s5l3m::P64 = P64[R1 + 23];
           _s5l3n::P64 = P64[R1 + 31];
           I64[Hp - 208] = ds_s5l3o_info;
           P64[Hp - 192] = P64[Sp + 8];
           I64[Hp - 184] = stg_sel_3_upd_info;
           _c5oEn::P64 = Hp - 208;
           P64[Hp - 168] = _c5oEn::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = _s5l3n::P64;
           P64[Hp - 144] = Hp - 184;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _c5oEn::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _s5l3m::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5oEn::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5l3l::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5oEn::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l3k::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 158;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.284094968 UTC

[section ""data" . Data.OldList.unzip4_closure" {
     Data.OldList.unzip4_closure:
         const Data.OldList.unzip4_info;
 },
 Data.OldList.unzip4_entry() //  [R2]
         { info_tbl: [(c5oFy,
                       label: Data.OldList.unzip4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oFy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5oFz; else goto c5oFA;
       c5oFz: // global
           R2 = R2;
           R1 = Data.OldList.unzip4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oFA: // global
           I64[Sp - 8] = block_c5oFv_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wunzip4_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5oFv() //  [R1, R2, R3, R4]
         { info_tbl: [(c5oFv,
                       label: block_c5oFv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oFv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5oFD; else goto c5oFC;
       c5oFD: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       c5oFC: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.291718915 UTC

[section ""data" . Data.OldList.$wunzip5_closure" {
     Data.OldList.$wunzip5_closure:
         const Data.OldList.$wunzip5_info;
 },
 ds_s5l4c_entry() //  [R1]
         { info_tbl: [(c5oGb,
                       label: ds_s5l4c_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oGb: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5oGc; else goto c5oGd;
       c5oGc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oGd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5oG6_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wunzip5_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5oG6() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c5oG6,
                       label: block_c5oG6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oG6: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           P64[Sp] = R1;
           Sp = Sp - 40;
           call _c5oG7() args: 0, res: 0, upd: 0;
     }
 },
 _c5oG7() //  []
         { info_tbl: [(c5oG7,
                       label: block_c5oG7_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oG7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5oGg; else goto c5oGf;
       c5oGg: // global
           HpAlloc = 48;
           I64[Sp] = block_c5oG7_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c5oGf: // global
           I64[Hp - 40] = (,,,,)_con_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 39;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wunzip5_entry() //  [R2]
         { info_tbl: [(c5oGn,
                       label: Data.OldList.$wunzip5_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oGn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5oGo; else goto c5oGp;
       c5oGo: // global
           R2 = R2;
           R1 = Data.OldList.$wunzip5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oGp: // global
           I64[Sp - 8] = block_c5oFR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oGH; else goto c5oFS;
       u5oGH: // global
           call _c5oFR(R1) args: 0, res: 0, upd: 0;
       c5oFS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oFR() //  [R1]
         { info_tbl: [(c5oFR,
                       label: block_c5oFR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oFR: // global
           if (R1 & 7 == 1) goto c5oGk; else goto c5oGl;
       c5oGk: // global
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5oGl: // global
           I64[Sp - 8] = block_c5oFX_info;
           _s5l45::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5l45::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oGG; else goto c5oFY;
       u5oGG: // global
           call _c5oFX(R1) args: 0, res: 0, upd: 0;
       c5oFY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oFX() //  [R1]
         { info_tbl: [(c5oFX,
                       label: block_c5oFX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oFX: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c5oGF; else goto c5oGE;
       c5oGF: // global
           HpAlloc = 264;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oGE: // global
           _s5l47::P64 = P64[R1 + 7];
           _s5l48::P64 = P64[R1 + 15];
           _s5l49::P64 = P64[R1 + 23];
           _s5l4a::P64 = P64[R1 + 31];
           _s5l4b::P64 = P64[R1 + 39];
           I64[Hp - 256] = ds_s5l4c_info;
           P64[Hp - 240] = P64[Sp + 8];
           I64[Hp - 232] = stg_sel_4_upd_info;
           _c5oG2::P64 = Hp - 256;
           P64[Hp - 216] = _c5oG2::P64;
           I64[Hp - 208] = :_con_info;
           P64[Hp - 200] = _s5l4b::P64;
           P64[Hp - 192] = Hp - 232;
           I64[Hp - 184] = stg_sel_3_upd_info;
           P64[Hp - 168] = _c5oG2::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = _s5l4a::P64;
           P64[Hp - 144] = Hp - 184;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _c5oG2::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _s5l49::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5oG2::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5l48::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5oG2::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l47::P64;
           P64[Hp] = Hp - 40;
           R5 = Hp - 206;
           R4 = Hp - 158;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.307740238 UTC

[section ""data" . Data.OldList.unzip5_closure" {
     Data.OldList.unzip5_closure:
         const Data.OldList.unzip5_info;
 },
 Data.OldList.unzip5_entry() //  [R2]
         { info_tbl: [(c5oHu,
                       label: Data.OldList.unzip5_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oHu: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5oHv; else goto c5oHw;
       c5oHv: // global
           R2 = R2;
           R1 = Data.OldList.unzip5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oHw: // global
           I64[Sp - 8] = block_c5oHp_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wunzip5_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5oHp() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c5oHp,
                       label: block_c5oHp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oHp: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           P64[Sp] = R1;
           Sp = Sp - 40;
           call _c5oHq() args: 0, res: 0, upd: 0;
     }
 },
 _c5oHq() //  []
         { info_tbl: [(c5oHq,
                       label: block_c5oHq_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oHq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5oHz; else goto c5oHy;
       c5oHz: // global
           HpAlloc = 48;
           I64[Sp] = block_c5oHq_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c5oHy: // global
           I64[Hp - 40] = (,,,,)_con_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 39;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.318872857 UTC

[section ""data" . Data.OldList.$wunzip6_closure" {
     Data.OldList.$wunzip6_closure:
         const Data.OldList.$wunzip6_info;
 },
 ds_s5l5f_entry() //  [R1]
         { info_tbl: [(c5oIh,
                       label: ds_s5l5f_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oIh: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c5oIi; else goto c5oIj;
       c5oIi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oIj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5oIc_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wunzip6_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5oIc() //  [R1, R2, R3, R4, R5, R6]
         { info_tbl: [(c5oIc,
                       label: block_c5oIc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oIc: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R1;
           Sp = Sp - 48;
           call _c5oId() args: 0, res: 0, upd: 0;
     }
 },
 _c5oId() //  []
         { info_tbl: [(c5oId,
                       label: block_c5oId_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oId: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5oIm; else goto c5oIl;
       c5oIm: // global
           HpAlloc = 56;
           I64[Sp] = block_c5oId_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c5oIl: // global
           I64[Hp - 48] = (,,,,,)_con_info;
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wunzip6_entry() //  [R2]
         { info_tbl: [(c5oIt,
                       label: Data.OldList.$wunzip6_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oIt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5oIu; else goto c5oIv;
       c5oIu: // global
           R2 = R2;
           R1 = Data.OldList.$wunzip6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oIv: // global
           I64[Sp - 8] = block_c5oHX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oIP; else goto c5oHY;
       u5oIP: // global
           call _c5oHX(R1) args: 0, res: 0, upd: 0;
       c5oHY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oHX() //  [R1]
         { info_tbl: [(c5oHX,
                       label: block_c5oHX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oHX: // global
           if (R1 & 7 == 1) goto c5oIq; else goto c5oIr;
       c5oIq: // global
           R6 = GHC.Types.[]_closure+1;
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R6,
                               R5,
                               R4,
                               R3,
                               R2,
                               R1) args: 8, res: 0, upd: 8;
       c5oIr: // global
           I64[Sp - 8] = block_c5oI3_info;
           _s5l57::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5l57::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oIO; else goto c5oI4;
       u5oIO: // global
           call _c5oI3(R1) args: 0, res: 0, upd: 0;
       c5oI4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oI3() //  [R1]
         { info_tbl: [(c5oI3,
                       label: block_c5oI3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oI3: // global
           Hp = Hp + 312;
           if (Hp > HpLim) (likely: False) goto c5oIN; else goto c5oIM;
       c5oIN: // global
           HpAlloc = 312;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oIM: // global
           _s5l59::P64 = P64[R1 + 7];
           _s5l5a::P64 = P64[R1 + 15];
           _s5l5b::P64 = P64[R1 + 23];
           _s5l5c::P64 = P64[R1 + 31];
           _s5l5d::P64 = P64[R1 + 39];
           _s5l5e::P64 = P64[R1 + 47];
           I64[Hp - 304] = ds_s5l5f_info;
           P64[Hp - 288] = P64[Sp + 8];
           I64[Hp - 280] = stg_sel_5_upd_info;
           _c5oI8::P64 = Hp - 304;
           P64[Hp - 264] = _c5oI8::P64;
           I64[Hp - 256] = :_con_info;
           P64[Hp - 248] = _s5l5e::P64;
           P64[Hp - 240] = Hp - 280;
           I64[Hp - 232] = stg_sel_4_upd_info;
           P64[Hp - 216] = _c5oI8::P64;
           I64[Hp - 208] = :_con_info;
           P64[Hp - 200] = _s5l5d::P64;
           P64[Hp - 192] = Hp - 232;
           I64[Hp - 184] = stg_sel_3_upd_info;
           P64[Hp - 168] = _c5oI8::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = _s5l5c::P64;
           P64[Hp - 144] = Hp - 184;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _c5oI8::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _s5l5b::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5oI8::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5l5a::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5oI8::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l59::P64;
           P64[Hp] = Hp - 40;
           R6 = Hp - 254;
           R5 = Hp - 206;
           R4 = Hp - 158;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R6,
                               R5,
                               R4,
                               R3,
                               R2,
                               R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.340764056 UTC

[section ""data" . Data.OldList.unzip6_closure" {
     Data.OldList.unzip6_closure:
         const Data.OldList.unzip6_info;
 },
 Data.OldList.unzip6_entry() //  [R2]
         { info_tbl: [(c5oJE,
                       label: Data.OldList.unzip6_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oJE: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c5oJF; else goto c5oJG;
       c5oJF: // global
           R2 = R2;
           R1 = Data.OldList.unzip6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oJG: // global
           I64[Sp - 8] = block_c5oJz_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wunzip6_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5oJz() //  [R1, R2, R3, R4, R5, R6]
         { info_tbl: [(c5oJz,
                       label: block_c5oJz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oJz: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R1;
           Sp = Sp - 48;
           call _c5oJA() args: 0, res: 0, upd: 0;
     }
 },
 _c5oJA() //  []
         { info_tbl: [(c5oJA,
                       label: block_c5oJA_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oJA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5oJJ; else goto c5oJI;
       c5oJJ: // global
           HpAlloc = 56;
           I64[Sp] = block_c5oJA_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c5oJI: // global
           I64[Hp - 48] = (,,,,,)_con_info;
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.353065371 UTC

[section ""data" . Data.OldList.$wunzip7_closure" {
     Data.OldList.$wunzip7_closure:
         const Data.OldList.$wunzip7_info;
 },
 ds_s5l6z_entry() //  [R1]
         { info_tbl: [(c5oKs,
                       label: ds_s5l6z_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oKs: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c5oKt; else goto c5oKu;
       c5oKt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oKu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5oKn_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wunzip7_entry(R2) args: 8, res: 16, upd: 24;
     }
 },
 _c5oKn() //  [R1, R2, R3, R4, R5, R6]
         { info_tbl: [(c5oKn,
                       label: block_c5oKn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oKn: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 8] = R1;
           Sp = Sp - 48;
           call _c5oKo() args: 0, res: 0, upd: 0;
     }
 },
 _c5oKo() //  []
         { info_tbl: [(c5oKo,
                       label: block_c5oKo_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oKo: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5oKx; else goto c5oKw;
       c5oKx: // global
           HpAlloc = 64;
           I64[Sp] = block_c5oKo_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c5oKw: // global
           I64[Hp - 56] = (,,,,,,)_con_info;
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 55;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wunzip7_entry() //  [R2]
         { info_tbl: [(c5oKE,
                       label: Data.OldList.$wunzip7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oKE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5oKF; else goto c5oKG;
       c5oKF: // global
           R2 = R2;
           R1 = Data.OldList.$wunzip7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oKG: // global
           I64[Sp - 8] = block_c5oK8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oL2; else goto c5oK9;
       u5oL2: // global
           call _c5oK8(R1) args: 0, res: 0, upd: 0;
       c5oK9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oK8() //  [R1]
         { info_tbl: [(c5oK8,
                       label: block_c5oK8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oK8: // global
           if (R1 & 7 == 1) goto c5oKB; else goto c5oKC;
       c5oKB: // global
           R6 = GHC.Types.[]_closure+1;
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           P64[Sp] = GHC.Types.[]_closure+1;
           call (I64[P64[Sp + 8]])(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
       c5oKC: // global
           I64[Sp - 8] = block_c5oKe_info;
           _s5l6q::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5l6q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oL1; else goto c5oKf;
       u5oL1: // global
           call _c5oKe(R1) args: 0, res: 0, upd: 0;
       c5oKf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oKe() //  [R1]
         { info_tbl: [(c5oKe,
                       label: block_c5oKe_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oKe: // global
           Hp = Hp + 360;
           if (Hp > HpLim) (likely: False) goto c5oL0; else goto c5oKZ;
       c5oL0: // global
           HpAlloc = 360;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oKZ: // global
           _s5l6s::P64 = P64[R1 + 7];
           _s5l6t::P64 = P64[R1 + 15];
           _s5l6u::P64 = P64[R1 + 23];
           _s5l6v::P64 = P64[R1 + 31];
           _s5l6w::P64 = P64[R1 + 39];
           _s5l6x::P64 = P64[R1 + 47];
           _s5l6y::P64 = P64[R1 + 55];
           I64[Hp - 352] = ds_s5l6z_info;
           P64[Hp - 336] = P64[Sp + 8];
           I64[Hp - 328] = stg_sel_6_upd_info;
           _c5oKj::P64 = Hp - 352;
           P64[Hp - 312] = _c5oKj::P64;
           I64[Hp - 304] = :_con_info;
           P64[Hp - 296] = _s5l6y::P64;
           P64[Hp - 288] = Hp - 328;
           I64[Hp - 280] = stg_sel_5_upd_info;
           P64[Hp - 264] = _c5oKj::P64;
           I64[Hp - 256] = :_con_info;
           P64[Hp - 248] = _s5l6x::P64;
           P64[Hp - 240] = Hp - 280;
           I64[Hp - 232] = stg_sel_4_upd_info;
           P64[Hp - 216] = _c5oKj::P64;
           I64[Hp - 208] = :_con_info;
           P64[Hp - 200] = _s5l6w::P64;
           P64[Hp - 192] = Hp - 232;
           I64[Hp - 184] = stg_sel_3_upd_info;
           P64[Hp - 168] = _c5oKj::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = _s5l6v::P64;
           P64[Hp - 144] = Hp - 184;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _c5oKj::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _s5l6u::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5oKj::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5l6t::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5oKj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l6s::P64;
           P64[Hp] = Hp - 40;
           R6 = Hp - 254;
           R5 = Hp - 206;
           R4 = Hp - 158;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           P64[Sp + 8] = Hp - 302;
           Sp = Sp + 8;
           call (I64[P64[Sp + 8]])(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.376237048 UTC

[section ""data" . Data.OldList.unzip7_closure" {
     Data.OldList.unzip7_closure:
         const Data.OldList.unzip7_info;
 },
 Data.OldList.unzip7_entry() //  [R2]
         { info_tbl: [(c5oLU,
                       label: Data.OldList.unzip7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oLU: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5oLV; else goto c5oLW;
       c5oLV: // global
           R2 = R2;
           R1 = Data.OldList.unzip7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oLW: // global
           I64[Sp - 8] = block_c5oLP_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wunzip7_entry(R2) args: 8, res: 16, upd: 8;
     }
 },
 _c5oLP() //  [R1, R2, R3, R4, R5, R6]
         { info_tbl: [(c5oLP,
                       label: block_c5oLP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oLP: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 8] = R1;
           Sp = Sp - 48;
           call _c5oLQ() args: 0, res: 0, upd: 0;
     }
 },
 _c5oLQ() //  []
         { info_tbl: [(c5oLQ,
                       label: block_c5oLQ_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oLQ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5oLZ; else goto c5oLY;
       c5oLZ: // global
           HpAlloc = 64;
           I64[Sp] = block_c5oLQ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c5oLY: // global
           I64[Hp - 56] = (,,,,,,)_con_info;
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 55;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.391658401 UTC

[section ""data" . Data.OldList.groupBy_closure" {
     Data.OldList.groupBy_closure:
         const Data.OldList.groupBy_info;
 },
 ds2_s5l84_entry() //  [R1]
         { info_tbl: [(c5oMD,
                       label: ds2_s5l84_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oMD: // global
           _s5l84::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5oME; else goto c5oMF;
       c5oMF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5oMH; else goto c5oMG;
       c5oMH: // global
           HpAlloc = 32;
           goto c5oME;
       c5oME: // global
           R1 = _s5l84::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oMG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l84::P64;
           _s5l7Z::P64 = P64[_s5l84::P64 + 16];
           _s5l82::P64 = P64[_s5l84::P64 + 24];
           _s5l83::P64 = P64[_s5l84::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s5l7Z::P64;
           P64[Hp] = _s5l82::P64;
           I64[Sp - 24] = block_c5oMA_info;
           R3 = _s5l83::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5oMA() //  [R1, R2]
         { info_tbl: [(c5oMA,
                       label: block_c5oMA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oMA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oMK; else goto c5oMJ;
       c5oMK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5oMJ: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l8h_entry() //  [R1]
         { info_tbl: [(c5oMS,
                       label: sat_s5l8h_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oMS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5oMT; else goto c5oMU;
       c5oMT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oMU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c5oMP_info;
           _s5l7Z::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s5l7Z::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5oMY; else goto c5oMQ;
       u5oMY: // global
           call _c5oMP(R1) args: 0, res: 0, upd: 0;
       c5oMQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5oMP() //  [R1]
         { info_tbl: [(c5oMP,
                       label: block_c5oMP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oMP: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.OldList.groupBy_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.groupBy_entry() //  [R2, R3]
         { info_tbl: [(c5oN3,
                       label: Data.OldList.groupBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oN3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5oN4; else goto c5oN5;
       c5oN4: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.groupBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5oN5: // global
           I64[Sp - 16] = block_c5oMp_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5oNe; else goto c5oMq;
       u5oNe: // global
           call _c5oMp(R1) args: 0, res: 0, upd: 0;
       c5oMq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oMp() //  [R1]
         { info_tbl: [(c5oMp,
                       label: block_c5oMp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oMp: // global
           if (R1 & 7 == 1) goto c5oN0; else goto c5oN1;
       c5oN0: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5oN1: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c5oNd; else goto c5oNc;
       c5oNd: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oNc: // global
           _s5l82::P64 = P64[R1 + 6];
           _s5l83::P64 = P64[R1 + 14];
           I64[Hp - 136] = ds2_s5l84_info;
           _s5l7Z::P64 = P64[Sp + 8];
           P64[Hp - 120] = _s5l7Z::P64;
           P64[Hp - 112] = _s5l82::P64;
           P64[Hp - 104] = _s5l83::P64;
           I64[Hp - 96] = sat_s5l8h_info;
           P64[Hp - 80] = _s5l7Z::P64;
           _c5oMv::P64 = Hp - 136;
           P64[Hp - 72] = _c5oMv::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _c5oMv::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5l82::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.415783379 UTC

[section ""data" . Data.OldList.group_closure" {
     Data.OldList.group_closure:
         const Data.OldList.group_info;
 },
 sat_s5l8k_entry() //  [R1]
         { info_tbl: [(c5oNT,
                       label: sat_s5l8k_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oNT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5oNU; else goto c5oNV;
       c5oNU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oNV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.group_entry() //  [R2, R3]
         { info_tbl: [(c5oNW,
                       label: Data.OldList.group_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oNW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oO0; else goto c5oNZ;
       c5oO0: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.group_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5oNZ: // global
           I64[Hp - 16] = sat_s5l8k_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.groupBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.424677981 UTC

[section ""data" . poly_tailsGo_r5kSn_closure" {
     poly_tailsGo_r5kSn_closure:
         const poly_tailsGo_r5kSn_info;
 },
 sat_s5l8p_entry() //  [R1]
         { info_tbl: [(c5oOo,
                       label: sat_s5l8p_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oOo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5oOp; else goto c5oOq;
       c5oOp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oOq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5oOh_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5oOx; else goto c5oOi;
       u5oOx: // global
           call _c5oOh(R1) args: 0, res: 0, upd: 0;
       c5oOi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5oOh() //  [R1]
         { info_tbl: [(c5oOh,
                       label: block_c5oOh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oOh: // global
           if (R1 & 7 == 1) goto c5oOl; else goto c5oOm;
       c5oOl: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5oOm: // global
           R2 = P64[R1 + 14];
           Sp = Sp + 8;
           call poly_tailsGo_r5kSn_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_tailsGo_r5kSn_entry() //  [R2]
         { info_tbl: [(c5oOz,
                       label: poly_tailsGo_r5kSn_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oOz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5oOD; else goto c5oOC;
       c5oOD: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = poly_tailsGo_r5kSn_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oOC: // global
           I64[Hp - 40] = sat_s5l8p_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.436718144 UTC

[section ""data" . Data.OldList.tails_closure" {
     Data.OldList.tails_closure:
         const Data.OldList.tails_info;
 },
 Data.OldList.tails_entry() //  [R2]
         { info_tbl: [(c5oOZ,
                       label: Data.OldList.tails_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oOZ: // global
           R2 = R2;
           call poly_tailsGo_r5kSn_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.442395709 UTC

[section ""data" . Data.OldList.nonEmptySubsequences_closure" {
     Data.OldList.nonEmptySubsequences_closure:
         const Data.OldList.nonEmptySubsequences_info;
 },
 go_s5l8w_entry() //  [R1, R2]
         { info_tbl: [(c5oPw,
                       label: go_s5l8w_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oPw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5oPx; else goto c5oPy;
       c5oPx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oPy: // global
           I64[Sp - 24] = block_c5oPp_info;
           _s5l8w::P64 = R1;
           _s5l8t::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s5l8t::P64;
           P64[Sp - 8] = _s5l8w::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5oPL; else goto c5oPq;
       u5oPL: // global
           call _c5oPp(R1) args: 0, res: 0, upd: 0;
       c5oPq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oPp() //  [R1]
         { info_tbl: [(c5oPp,
                       label: block_c5oPp_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oPp: // global
           if (R1 & 7 == 1) goto c5oPt; else goto c5oPu;
       c5oPt: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5oPu: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c5oPK; else goto c5oPJ;
       c5oPK: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oPJ: // global
           _s5l8z::P64 = P64[R1 + 6];
           _s5l8A::P64 = P64[R1 + 14];
           I64[Hp - 96] = stg_ap_2_upd_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = _s5l8A::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = _s5l8z::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 62;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8z::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5l8F_entry() //  [R1]
         { info_tbl: [(c5oPO,
                       label: sat_s5l8F_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oPO: // global
           _s5l8F::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c5oPP; else goto c5oPQ;
       c5oPQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5oPS; else goto c5oPR;
       c5oPS: // global
           HpAlloc = 16;
           goto c5oPP;
       c5oPP: // global
           R1 = _s5l8F::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oPR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l8F::P64;
           _s5l8t::P64 = P64[_s5l8F::P64 + 16];
           _s5l8u::P64 = P64[_s5l8F::P64 + 24];
           I64[Hp - 8] = go_s5l8w_info;
           P64[Hp] = _s5l8t::P64;
           I64[Sp - 32] = block_c5oPM_info;
           R2 = _s5l8u::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Data.OldList.nonEmptySubsequences_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5oPM() //  [R1]
         { info_tbl: [(c5oPM,
                       label: block_c5oPM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oPM: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s5l8w_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.nonEmptySubsequences_entry() //  [R2]
         { info_tbl: [(c5oQ0,
                       label: Data.OldList.nonEmptySubsequences_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oQ0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5oQ1; else goto c5oQ2;
       c5oQ1: // global
           R2 = R2;
           R1 = Data.OldList.nonEmptySubsequences_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oQ2: // global
           I64[Sp - 8] = block_c5oPa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5oQa; else goto c5oPb;
       u5oQa: // global
           call _c5oPa(R1) args: 0, res: 0, upd: 0;
       c5oPb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oPa() //  [R1]
         { info_tbl: [(c5oPa,
                       label: block_c5oPa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oPa: // global
           if (R1 & 7 == 1) goto c5oPX; else goto c5oPY;
       c5oPX: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5oPY: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5oQ9; else goto c5oQ8;
       c5oQ9: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oQ8: // global
           _s5l8t::P64 = P64[R1 + 6];
           _s5l8u::P64 = P64[R1 + 14];
           I64[Hp - 72] = sat_s5l8F_info;
           P64[Hp - 56] = _s5l8t::P64;
           P64[Hp - 48] = _s5l8u::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5l8t::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.464392067 UTC

[section ""data" . Data.OldList.subsequences_closure" {
     Data.OldList.subsequences_closure:
         const Data.OldList.subsequences_info;
 },
 sat_s5l8H_entry() //  [R1]
         { info_tbl: [(c5oQX,
                       label: sat_s5l8H_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oQX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5oQY; else goto c5oQZ;
       c5oQY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oQZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.nonEmptySubsequences_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.subsequences_entry() //  [R2]
         { info_tbl: [(c5oR1,
                       label: Data.OldList.subsequences_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oR1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5oR5; else goto c5oR4;
       c5oR5: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.OldList.subsequences_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oR4: // global
           I64[Hp - 40] = sat_s5l8H_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.472477349 UTC

[section ""data" . Data.OldList.permutations1_closure" {
     Data.OldList.permutations1_closure:
         const Data.OldList.permutations1_info;
 },
 sat_s5l8X_entry() //  [R1, R2]
         { info_tbl: [(c5oRL,
                       label: sat_s5l8X_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oRL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oRP; else goto c5oRO;
       c5oRP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oRO: // global
           _s5l8O::P64 = P64[R1 + 7];
           _s5l8S::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8S::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s5l8O::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 ds2_s5l8U_entry() //  [R1]
         { info_tbl: [(c5oRT,
                       label: ds2_s5l8U_info
                       rep:HeapRep 5 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oRT: // global
           _s5l8U::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5oRU; else goto c5oRV;
       c5oRV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oRX; else goto c5oRW;
       c5oRX: // global
           HpAlloc = 24;
           goto c5oRU;
       c5oRU: // global
           R1 = _s5l8U::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oRW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l8U::P64;
           _s5l8N::P64 = P64[_s5l8U::P64 + 16];
           _s5l8O::P64 = P64[_s5l8U::P64 + 24];
           _s5l8Q::P64 = P64[_s5l8U::P64 + 32];
           _s5l8S::P64 = P64[_s5l8U::P64 + 40];
           _s5l8T::P64 = P64[_s5l8U::P64 + 48];
           I64[Hp - 16] = sat_s5l8X_info;
           P64[Hp - 8] = _s5l8O::P64;
           P64[Hp] = _s5l8S::P64;
           I64[Sp - 24] = block_c5oRQ_info;
           R4 = _s5l8Q::P64;
           R3 = _s5l8T::P64;
           R2 = Hp - 15;
           R1 = _s5l8N::P64;
           Sp = Sp - 24;
           call $winterleave'_s5l8N_entry(R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5oRQ() //  [R1, R2]
         { info_tbl: [(c5oRQ,
                       label: block_c5oRQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oRQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oS0; else goto c5oRZ;
       c5oS0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5oRZ: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5l98_entry() //  [R1]
         { info_tbl: [(c5oS9,
                       label: sat_s5l98_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oS9: // global
           _s5l98::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5oSa; else goto c5oSb;
       c5oSb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5oSd; else goto c5oSc;
       c5oSd: // global
           HpAlloc = 48;
           goto c5oSa;
       c5oSa: // global
           R1 = _s5l98::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oSc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l98::P64;
           _s5l8L::P64 = P64[_s5l98::P64 + 16];
           _s5l8O::P64 = P64[_s5l98::P64 + 24];
           _s5l8S::P64 = P64[_s5l98::P64 + 32];
           _s5l91::P64 = P64[_s5l98::P64 + 40];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5l8S::P64;
           P64[Hp - 24] = _s5l91::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8L::P64;
           P64[Hp] = Hp - 38;
           R2 = Hp - 14;
           R1 = _s5l8O::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 $winterleave'_s5l8N_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c5oSi,
                       label: $winterleave'_s5l8N_info
                       rep:HeapRep 2 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oSi: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5oSj; else goto c5oSk;
       c5oSj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5oSk: // global
           I64[Sp - 48] = block_c5oRv_info;
           _s5l8N::P64 = R1;
           _s5l8L::P64 = P64[R1 + 5];
           _s5l8M::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 40] = _s5l8L::P64;
           P64[Sp - 32] = _s5l8M::P64;
           P64[Sp - 24] = _s5l8N::P64;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u5oSs; else goto c5oRw;
       u5oSs: // global
           call _c5oRv(R1) args: 0, res: 0, upd: 0;
       c5oRw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oRv() //  [R1]
         { info_tbl: [(c5oRv,
                       label: block_c5oRv_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oRv: // global
           _s5l8Q::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c5oSf; else goto c5oSg;
       c5oSf: // global
           R2 = _s5l8Q::P64;
           R1 = P64[Sp + 16];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5oSg: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c5oSr; else goto c5oSq;
       c5oSr: // global
           HpAlloc = 200;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oSq: // global
           _s5l8S::P64 = P64[R1 + 6];
           _s5l8T::P64 = P64[R1 + 14];
           I64[Hp - 192] = ds2_s5l8U_info;
           P64[Hp - 176] = P64[Sp + 24];
           _s5l8O::P64 = P64[Sp + 32];
           P64[Hp - 168] = _s5l8O::P64;
           P64[Hp - 160] = _s5l8Q::P64;
           P64[Hp - 152] = _s5l8S::P64;
           P64[Hp - 144] = _s5l8T::P64;
           I64[Hp - 136] = stg_sel_0_upd_info;
           _c5oRB::P64 = Hp - 192;
           P64[Hp - 120] = _c5oRB::P64;
           I64[Hp - 112] = stg_sel_1_upd_info;
           P64[Hp - 96] = _c5oRB::P64;
           I64[Hp - 88] = sat_s5l98_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _s5l8O::P64;
           P64[Hp - 56] = _s5l8S::P64;
           _c5oS1::P64 = Hp - 136;
           P64[Hp - 48] = _c5oS1::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 88;
           P64[Hp - 24] = Hp - 112;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8S::P64;
           P64[Hp] = _c5oS1::P64;
           R2 = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 z_s5l9e_entry() //  [R1]
         { info_tbl: [(c5oSy,
                       label: z_s5l9e_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oSy: // global
           _s5l9e::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5oSz; else goto c5oSA;
       c5oSA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oSC; else goto c5oSB;
       c5oSC: // global
           HpAlloc = 24;
           goto c5oSz;
       c5oSz: // global
           R1 = _s5l9e::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oSB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5l9e::P64;
           _s5l8J::P64 = P64[_s5l9e::P64 + 16];
           _s5l8L::P64 = P64[_s5l9e::P64 + 24];
           _s5l8M::P64 = P64[_s5l9e::P64 + 32];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8L::P64;
           P64[Hp] = _s5l8J::P64;
           R3 = Hp - 14;
           R2 = _s5l8M::P64;
           Sp = Sp - 16;
           call Data.OldList.permutations1_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 go_s5l9g_entry() //  [R1, R2]
         { info_tbl: [(c5oSP,
                       label: go_s5l9g_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oSP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5oSQ; else goto c5oSR;
       c5oSQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oSR: // global
           I64[Sp - 32] = block_c5oSI_info;
           _s5l9g::P64 = R1;
           _s5l8N::P64 = P64[R1 + 7];
           _s5l9e::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s5l8N::P64;
           P64[Sp - 16] = _s5l9e::P64;
           P64[Sp - 8] = _s5l9g::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5oT4; else goto c5oSJ;
       u5oT4: // global
           call _c5oSI(R1) args: 0, res: 0, upd: 0;
       c5oSJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oSI() //  [R1]
         { info_tbl: [(c5oSI,
                       label: block_c5oSI_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oSI: // global
           if (R1 & 7 == 1) goto c5oSM; else goto c5oSN;
       c5oSM: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5oSN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5oT1; else goto c5oT0;
       c5oT1: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oT0: // global
           _s5l9j::P64 = P64[R1 + 6];
           _s5l9k::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s5l9k::P64;
           I64[Sp + 24] = block_c5oSY_info;
           R4 = Hp - 24;
           R3 = _s5l9j::P64;
           R2 = GHC.Base.id_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call $winterleave'_s5l8N_entry(R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oSY() //  [R2]
         { info_tbl: [(c5oSY,
                       label: block_c5oSY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oSY: // global
           R1 = R2 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5l9p_entry() //  [R1]
         { info_tbl: [(c5oT9,
                       label: sat_s5l9p_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oT9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5oTa; else goto c5oTb;
       c5oTa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oTb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.permutations1_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.permutations1_entry() //  [R2, R3]
         { info_tbl: [(c5oTg,
                       label: Data.OldList.permutations1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oTg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5oTh; else goto c5oTi;
       c5oTh: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.permutations1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5oTi: // global
           I64[Sp - 16] = block_c5oRk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5oTp; else goto c5oRl;
       u5oTp: // global
           call _c5oRk(R1) args: 0, res: 0, upd: 0;
       c5oRl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oRk() //  [R1]
         { info_tbl: [(c5oRk,
                       label: block_c5oRk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oRk: // global
           if (R1 & 7 == 1) goto c5oTd; else goto c5oTe;
       c5oTd: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5oTe: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c5oTo; else goto c5oTn;
       c5oTo: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oTn: // global
           _s5l8L::P64 = P64[R1 + 6];
           _s5l8M::P64 = P64[R1 + 14];
           I64[Hp - 128] = $winterleave'_s5l8N_info;
           P64[Hp - 120] = _s5l8L::P64;
           P64[Hp - 112] = _s5l8M::P64;
           I64[Hp - 104] = z_s5l9e_info;
           _s5l8J::P64 = P64[Sp + 8];
           P64[Hp - 88] = _s5l8J::P64;
           P64[Hp - 80] = _s5l8L::P64;
           P64[Hp - 72] = _s5l8M::P64;
           I64[Hp - 64] = go_s5l9g_info;
           P64[Hp - 56] = Hp - 125;
           P64[Hp - 48] = Hp - 104;
           I64[Hp - 40] = sat_s5l9p_info;
           P64[Hp - 24] = _s5l8J::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l8J::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           R1 = Hp - 63;
           Sp = Sp + 16;
           call go_s5l9g_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.505200469 UTC

[section ""data" . Data.OldList.permutations_closure" {
     Data.OldList.permutations_closure:
         const Data.OldList.permutations_info;
 },
 sat_s5l9s_entry() //  [R1]
         { info_tbl: [(c5oUJ,
                       label: sat_s5l9s_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oUJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5oUK; else goto c5oUL;
       c5oUK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oUL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.permutations1_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.permutations_entry() //  [R2]
         { info_tbl: [(c5oUN,
                       label: Data.OldList.permutations_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oUN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5oUR; else goto c5oUQ;
       c5oUR: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.OldList.permutations_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oUQ: // global
           I64[Hp - 40] = sat_s5l9s_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.510980936 UTC

[section ""data" . lvl6_r5kSo_closure" {
     lvl6_r5kSo_closure:
         const :_con_info;
         const GHC.Types.[]_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.518394657 UTC

[section ""data" . Data.OldList.sortBy_closure" {
     Data.OldList.sortBy_closure:
         const Data.OldList.sortBy_info;
 },
 merge_s5l9v_entry() //  [R1, R2, R3]
         { info_tbl: [(c5oVY,
                       label: merge_s5l9v_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oVY: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5oVZ; else goto c5oW0;
       c5oVZ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5oW0: // global
           I64[Sp - 32] = block_c5oVR_info;
           _s5l9v::P64 = R1;
           _s5l9t::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 24] = _s5l9t::P64;
           P64[Sp - 16] = _s5l9v::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5oWF; else goto c5oVS;
       u5oWF: // global
           call _c5oVR(R1) args: 0, res: 0, upd: 0;
       c5oVS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oVR() //  [R1]
         { info_tbl: [(c5oVR,
                       label: block_c5oVR_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oVR: // global
           _s5l9x::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5oVV; else goto c5oVW;
       c5oVV: // global
           R1 = _s5l9x::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5oVW: // global
           I64[Sp - 16] = block_c5oW6_info;
           _s5l9y::P64 = R1;
           _s5l9z::P64 = P64[R1 + 6];
           _s5l9A::P64 = P64[R1 + 14];
           R1 = _s5l9x::P64;
           P64[Sp - 8] = _s5l9A::P64;
           P64[Sp] = _s5l9z::P64;
           P64[Sp + 24] = _s5l9y::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5oWE; else goto c5oW8;
       u5oWE: // global
           call _c5oW6(R1) args: 0, res: 0, upd: 0;
       c5oW8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oW6() //  [R1]
         { info_tbl: [(c5oW6,
                       label: block_c5oW6_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oW6: // global
           if (R1 & 7 == 1) goto c5oWe; else goto c5oWj;
       c5oWe: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5oWj: // global
           I64[Sp - 16] = block_c5oWh_info;
           _s5l9C::P64 = P64[R1 + 6];
           R3 = _s5l9C::P64;
           R2 = P64[Sp + 16];
           _s5l9B::P64 = R1;
           _s5l9D::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp - 8] = _s5l9D::P64;
           P64[Sp] = _s5l9C::P64;
           P64[Sp + 24] = _s5l9B::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oWh() //  [R1]
         { info_tbl: [(c5oWh,
                       label: block_c5oWh_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oWh: // global
           _s5l9v::P64 = P64[Sp + 48];
           if (R1 & 7 == 3) goto c5oWy; else goto c5oWq;
       c5oWy: // global
           Hp = Hp + 64;
           _s5l9E::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5oWB; else goto c5oWA;
       c5oWA: // global
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _s5l9v::P64;
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5oWq: // global
           Hp = Hp + 64;
           _s5l9E::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5oWB; else goto c5oWs;
       c5oWB: // global
           HpAlloc = 64;
           R1 = _s5l9E::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oWs: // global
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _s5l9v::P64;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 mergePairs_s5l9H_entry() //  [R1, R2]
         { info_tbl: [(c5oWQ,
                       label: mergePairs_s5l9H_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oWQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5oWR; else goto c5oWS;
       c5oWR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oWS: // global
           I64[Sp - 24] = block_c5oWJ_info;
           _s5l9H::P64 = R1;
           _s5l9v::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s5l9v::P64;
           P64[Sp - 8] = _s5l9H::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5oXm; else goto c5oWK;
       u5oXm: // global
           call _c5oWJ(R1) args: 0, res: 0, upd: 0;
       c5oWK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oWJ() //  [R1]
         { info_tbl: [(c5oWJ,
                       label: block_c5oWJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oWJ: // global
           if (R1 & 7 == 1) goto c5oWN; else goto c5oWO;
       c5oWN: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5oWO: // global
           I64[Sp - 16] = block_c5oWY_info;
           _s5l9J::P64 = R1;
           _s5l9K::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s5l9K::P64;
           P64[Sp] = _s5l9J::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5oXl; else goto c5oX0;
       u5oXl: // global
           call _c5oWY(R1) args: 0, res: 0, upd: 0;
       c5oX0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oWY() //  [R1]
         { info_tbl: [(c5oWY,
                       label: block_c5oWY_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oWY: // global
           if (R1 & 7 == 1) goto c5oX6; else goto c5oXg;
       c5oX6: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5oXg: // global
           I64[Sp + 16] = block_c5oX9_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           _s5l9O::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s5l9O::P64;
           Sp = Sp + 16;
           call merge_s5l9v_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oX9() //  [R1]
         { info_tbl: [(c5oX9,
                       label: block_c5oX9_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oX9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5oXj; else goto c5oXi;
       c5oXj: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oXi: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl12_s5l9R_entry() //  [R1]
         { info_tbl: [(c5oXp,
                       label: lvl12_s5l9R_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oXp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5oXq; else goto c5oXr;
       c5oXq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oXr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call mergePairs_s5l9H_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5la4_entry() //  [R1, R2]
         { info_tbl: [(c5oXR,
                       label: sat_s5la4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oXR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oXV; else goto c5oXU;
       c5oXV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oXU: // global
           _s5l9Y::P64 = P64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l9Y::P64;
           P64[Hp] = R2;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sequences_s5l9S_entry() //  [R1, R2]
         { info_tbl: [(c5oY0,
                       label: sequences_s5l9S_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oY0: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5oY1; else goto c5oY2;
       c5oY1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oY2: // global
           I64[Sp - 32] = block_c5oXv_info;
           _s5l9t::P64 = P64[R1 + 7];
           _s5l9U::P64 = P64[R1 + 15];
           _s5l9V::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s5l9t::P64;
           P64[Sp - 16] = _s5l9U::P64;
           P64[Sp - 8] = _s5l9V::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5oYu; else goto c5oXw;
       u5oYu: // global
           call _c5oXv(R1) args: 0, res: 0, upd: 0;
       c5oXw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oXv() //  [R1]
         { info_tbl: [(c5oXv,
                       label: block_c5oXv_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oXv: // global
           if (R1 & 7 == 1) goto c5oXX; else goto c5oXY;
       c5oXX: // global
           R1 = lvl6_r5kSo_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5oXY: // global
           I64[Sp - 16] = block_c5oXB_info;
           _s5l9X::P64 = R1;
           _s5l9Y::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s5l9Y::P64;
           P64[Sp] = _s5l9X::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5oYt; else goto c5oXC;
       u5oYt: // global
           call _c5oXB(R1) args: 0, res: 0, upd: 0;
       c5oXC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oXB() //  [R1]
         { info_tbl: [(c5oXB,
                       label: block_c5oXB_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oXB: // global
           if (R1 & 7 == 1) goto c5oY9; else goto c5oYe;
       c5oY9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oYc; else goto c5oYb;
       c5oYc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oYb: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5oYe: // global
           I64[Sp] = block_c5oXH_info;
           _s5la1::P64 = P64[R1 + 6];
           R3 = _s5la1::P64;
           R2 = P64[Sp + 8];
           _s5la2::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _s5la2::P64;
           P64[Sp + 24] = _s5la1::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oXH() //  [R1]
         { info_tbl: [(c5oXH,
                       label: block_c5oXH_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oXH: // global
           _s5l9Y::P64 = P64[Sp + 8];
           _s5la1::P64 = P64[Sp + 24];
           _s5la2::P64 = P64[Sp + 16];
           if (R1 & 7 == 3) goto c5oYn; else goto c5oYg;
       c5oYn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oYq; else goto c5oYp;
       c5oYq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oYp: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5l9Y::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R4 = _s5la2::P64;
           R3 = Hp - 14;
           R2 = _s5la1::P64;
           R1 = P64[Sp + 32];
           Sp = Sp + 48;
           call descending_s5l9U_entry(R4,
                                       R3,
                                       R2,
                                       R1) args: 8, res: 0, upd: 8;
       c5oYg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5oYj; else goto c5oYi;
       c5oYj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oYi: // global
           I64[Hp - 8] = sat_s5la4_info;
           P64[Hp] = _s5l9Y::P64;
           R4 = _s5la2::P64;
           R3 = Hp - 7;
           R2 = _s5la1::P64;
           R1 = P64[Sp + 40];
           Sp = Sp + 48;
           call ascending_s5l9V_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl13_s5l9T_entry() //  [R1]
         { info_tbl: [(c5oYx,
                       label: lvl13_s5l9T_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oYx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5oYy; else goto c5oYz;
       c5oYy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5oYz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call sequences_s5l9S_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 descending_s5l9U_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c5oYE,
                       label: descending_s5l9U_info
                       rep:HeapRep 3 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oYE: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5oYF; else goto u5oZ2;
       c5oYF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5oZ2: // global
           P64[Sp - 32] = R1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call _c5oVk() args: 0, res: 0, upd: 0;
     }
 },
 _c5oVk() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oVk: // global
           I64[Sp - 24] = block_c5oVn_info;
           R1 = P64[Sp + 24];
           _s5l9U::P64 = P64[Sp];
           P64[Sp - 16] = P64[_s5l9U::P64 + 13];
           P64[Sp - 8] = P64[_s5l9U::P64 + 21];
           P64[Sp + 24] = P64[_s5l9U::P64 + 5];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5oZ4; else goto c5oVo;
       u5oZ4: // global
           call _c5oVn(R1) args: 0, res: 0, upd: 0;
       c5oVo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oVn() //  [R1]
         { info_tbl: [(c5oVn,
                       label: block_c5oVn_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oVn: // global
           _s5la6::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5oYB; else goto c5oYC;
       c5oYB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5oYM; else goto c5oYL;
       c5oYM: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oYL: // global
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5la6::P64;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5oYC: // global
           I64[Sp - 8] = block_c5oVt_info;
           _s5lab::P64 = P64[R1 + 6];
           R3 = _s5lab::P64;
           R2 = _s5la6::P64;
           _s5la9::P64 = R1;
           _s5lac::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5lac::P64;
           P64[Sp + 16] = _s5lab::P64;
           P64[Sp + 48] = _s5la9::P64;
           Sp = Sp - 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oVt() //  [R1]
         { info_tbl: [(c5oVt,
                       label: block_c5oVt_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oVt: // global
           _s5la6::P64 = P64[Sp + 40];
           _s5la7::P64 = P64[Sp + 48];
           if (R1 & 7 == 3) goto c5oYX; else goto c5oYT;
       c5oYX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oZ0; else goto c5oYZ;
       c5oZ0: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oYZ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5la6::P64;
           P64[Hp] = _s5la7::P64;
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = Hp - 14;
           P64[Sp + 56] = P64[Sp + 8];
           Sp = Sp + 32;
           call _c5oVk() args: 0, res: 0, upd: 0;
       c5oYT: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5oYW; else goto c5oYV;
       c5oYW: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oYV: // global
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 56];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5la6::P64;
           P64[Hp - 24] = _s5la7::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5las_entry() //  [R1, R2]
         { info_tbl: [(c5oZc,
                       label: sat_s5las_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oZc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oZg; else goto c5oZf;
       c5oZg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5oZf: // global
           _s5lah::P64 = P64[R1 + 7];
           _s5lai::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5lah::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s5lai::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 ascending_s5l9V_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c5oZl,
                       label: ascending_s5l9V_info
                       rep:HeapRep 3 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oZl: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5oZm; else goto u5oZY;
       c5oZm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5oZY: // global
           P64[Sp - 32] = R1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call _c5oVA() args: 0, res: 0, upd: 0;
     }
 },
 _c5oVA() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oVA: // global
           I64[Sp - 24] = block_c5oVD_info;
           R1 = P64[Sp + 24];
           _s5l9V::P64 = P64[Sp];
           P64[Sp - 16] = P64[_s5l9V::P64 + 13];
           P64[Sp - 8] = P64[_s5l9V::P64 + 21];
           P64[Sp + 24] = P64[_s5l9V::P64 + 5];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5p00; else goto c5oVE;
       u5p00: // global
           call _c5oVD(R1) args: 0, res: 0, upd: 0;
       c5oVE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oVD() //  [R1]
         { info_tbl: [(c5oVD,
                       label: block_c5oVD_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oVD: // global
           _s5lah::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5oZi; else goto c5oZj;
       c5oZi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oZx; else goto c5oZw;
       c5oZx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oZw: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5lah::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp + 8] = block_c5oZq_info;
           R2 = Hp - 14;
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c5oZj: // global
           I64[Sp - 8] = block_c5oVJ_info;
           _s5lan::P64 = P64[R1 + 6];
           R3 = _s5lan::P64;
           R2 = _s5lah::P64;
           _s5lak::P64 = R1;
           _s5lao::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5lao::P64;
           P64[Sp + 16] = _s5lan::P64;
           P64[Sp + 48] = _s5lak::P64;
           Sp = Sp - 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5oZq() //  [R1]
         { info_tbl: [(c5oZq,
                       label: block_c5oZq_info
                       rep:StackRep [False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oZq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5oZA; else goto c5oZz;
       c5oZA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oZz: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5oVJ() //  [R1]
         { info_tbl: [(c5oVJ,
                       label: block_c5oVJ_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oVJ: // global
           _s5lah::P64 = P64[Sp + 40];
           _s5lai::P64 = P64[Sp + 48];
           if (R1 & 7 == 3) goto c5oZQ; else goto c5oZD;
       c5oZQ: // global
           Hp = Hp + 24;
           _s5lap::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5oZT; else goto c5oZS;
       c5oZS: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5lah::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp + 8] = block_c5oZK_info;
           R2 = Hp - 14;
           R1 = _s5lai::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c5oZD: // global
           Hp = Hp + 24;
           _s5lap::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5oZT; else goto c5oZF;
       c5oZT: // global
           HpAlloc = 24;
           R1 = _s5lap::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oZF: // global
           I64[Hp - 16] = sat_s5las_info;
           P64[Hp - 8] = _s5lah::P64;
           P64[Hp] = _s5lai::P64;
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = Hp - 15;
           P64[Sp + 56] = P64[Sp + 8];
           Sp = Sp + 32;
           call _c5oVA() args: 0, res: 0, upd: 0;
     }
 },
 _c5oZK() //  [R1]
         { info_tbl: [(c5oZK,
                       label: block_c5oZK_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5oZK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5oZW; else goto c5oZV;
       c5oZW: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5oZV: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 48];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.sortBy_entry() //  [R2, R3]
         { info_tbl: [(c5p05,
                       label: Data.OldList.sortBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p05: // global
           _s5l9u::P64 = R3;
           _s5l9t::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c5p06; else goto c5p07;
       c5p07: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c5p09; else goto c5p08;
       c5p09: // global
           HpAlloc = 176;
           goto c5p06;
       c5p06: // global
           R3 = _s5l9u::P64;
           R2 = _s5l9t::P64;
           R1 = Data.OldList.sortBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5p08: // global
           I64[Hp - 168] = merge_s5l9v_info;
           P64[Hp - 160] = _s5l9t::P64;
           I64[Hp - 152] = mergePairs_s5l9H_info;
           P64[Hp - 144] = Hp - 166;
           I64[Hp - 136] = lvl12_s5l9R_info;
           _c5oV9::P64 = Hp - 151;
           P64[Hp - 120] = _c5oV9::P64;
           I64[Hp - 112] = sequences_s5l9S_info;
           P64[Hp - 104] = _s5l9t::P64;
           P64[Hp - 96] = Hp - 53;
           P64[Hp - 88] = Hp - 21;
           I64[Hp - 80] = lvl13_s5l9T_info;
           _c5oVd::P64 = Hp - 111;
           P64[Hp - 64] = _c5oVd::P64;
           I64[Hp - 56] = descending_s5l9U_info;
           P64[Hp - 48] = _s5l9t::P64;
           P64[Hp - 40] = _c5oVd::P64;
           _c5oVe::P64 = Hp - 80;
           P64[Hp - 32] = _c5oVe::P64;
           I64[Hp - 24] = ascending_s5l9V_info;
           P64[Hp - 16] = _s5l9t::P64;
           P64[Hp - 8] = _c5oVd::P64;
           P64[Hp] = _c5oVe::P64;
           I64[Sp - 24] = block_c5p03_info;
           R2 = _s5l9u::P64;
           R1 = _c5oVd::P64;
           P64[Sp - 16] = _c5oV9::P64;
           P64[Sp - 8] = Hp - 136;
           Sp = Sp - 24;
           call sequences_s5l9S_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5p03() //  [R1]
         { info_tbl: [(c5p03,
                       label: block_c5p03_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p03: // global
           P64[Sp] = R1;
           call _c5p0g() args: 0, res: 0, upd: 0;
     }
 },
 _c5p0g() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p0g: // global
           _s5lax::P64 = P64[Sp];
           I64[Sp] = block_c5p0i_info;
           R1 = _s5lax::P64;
           if (R1 & 7 != 0) goto u5p0S; else goto c5p0k;
       u5p0S: // global
           call _c5p0i(R1) args: 0, res: 0, upd: 0;
       c5p0k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5p0i() //  [R1]
         { info_tbl: [(c5p0i,
                       label: block_c5p0i_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p0i: // global
           if (R1 & 7 == 1) goto c5p0q; else goto c5p0v;
       c5p0q: // global
           P64[Sp] = P64[Sp + 16];
           call _c5p0g() args: 0, res: 0, upd: 0;
       c5p0v: // global
           I64[Sp - 16] = block_c5p0t_info;
           _s5lay::P64 = R1;
           _s5laz::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s5laz::P64;
           P64[Sp] = _s5lay::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5p0T; else goto c5p0w;
       u5p0T: // global
           call _c5p0t(R1) args: 0, res: 0, upd: 0;
       c5p0w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5p0t() //  [R1]
         { info_tbl: [(c5p0t,
                       label: block_c5p0t_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p0t: // global
           if (R1 & 7 == 1) goto c5p0C; else goto c5p0H;
       c5p0C: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5p0H: // global
           _s5lay::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5p0F_info;
           R2 = _s5lay::P64;
           R1 = P64[Sp + 24];
           Sp = Sp + 16;
           call mergePairs_s5l9H_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5p0F() //  [R1]
         { info_tbl: [(c5p0F,
                       label: block_c5p0F_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p0F: // global
           P64[Sp] = R1;
           call _c5p0g() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.595249193 UTC

[section ""data" . Data.OldList.sortOn_closure" {
     Data.OldList.sortOn_closure:
         const Data.OldList.sortOn_info;
 },
 sat_s5laW_entry() //  [R1, R2]
         { info_tbl: [(c5p4l,
                       label: sat_s5laW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p4l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5p4m; else goto c5p4n;
       c5p4m: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5p4n: // global
           I64[Sp - 16] = block_c5p4i_info;
           _s5laU::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s5laU::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5p4i() //  [R1]
         { info_tbl: [(c5p4i,
                       label: block_c5p4i_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p4i: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5p4q; else goto c5p4p;
       c5p4q: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5p4p: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5laT_entry() //  [R1, R2, R3]
         { info_tbl: [(c5p4C,
                       label: sat_s5laT_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p4C: // global
           _s5laK::P64 = R3;
           _s5laJ::P64 = R2;
           _s5laT::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5p4D; else goto c5p4E;
       c5p4E: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5p4G; else goto c5p4F;
       c5p4G: // global
           HpAlloc = 48;
           goto c5p4D;
       c5p4D: // global
           R3 = _s5laK::P64;
           R2 = _s5laJ::P64;
           R1 = _s5laT::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5p4F: // global
           _s5laG::P64 = P64[_s5laT::P64 + 6];
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _s5laK::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s5laJ::P64;
           R2 = _s5laG::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 Data.OldList.sortOn_entry() //  [R2, R3, R4]
         { info_tbl: [(c5p4H,
                       label: Data.OldList.sortOn_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p4H: // global
           _s5laI::P64 = R4;
           _s5laH::P64 = R3;
           _s5laG::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c5p4J; else goto c5p4K;
       c5p4K: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5p4M; else goto c5p4L;
       c5p4M: // global
           HpAlloc = 16;
           goto c5p4J;
       c5p4J: // global
           R4 = _s5laI::P64;
           R3 = _s5laH::P64;
           R2 = _s5laG::P64;
           R1 = Data.OldList.sortOn_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5p4L: // global
           I64[Hp - 8] = sat_s5laW_info;
           P64[Hp] = _s5laH::P64;
           I64[Sp - 16] = block_c5p4r_info;
           R3 = _s5laI::P64;
           R2 = Hp - 7;
           P64[Sp - 8] = _s5laG::P64;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5p4r() //  [R1]
         { info_tbl: [(c5p4r,
                       label: block_c5p4r_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p4r: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5p4P; else goto c5p4O;
       c5p4P: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5p4O: // global
           I64[Hp - 8] = sat_s5laT_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c5p4I_info;
           R3 = R1;
           R2 = Hp - 6;
           Sp = Sp + 8;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5p4I() //  [R1]
         { info_tbl: [(c5p4I,
                       label: block_c5p4I_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p4I: // global
           R3 = R1;
           R2 = Data.Tuple.snd_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.610561398 UTC

[section ""data" . Data.OldList.sort_closure" {
     Data.OldList.sort_closure:
         const Data.OldList.sort_info;
 },
 sat_s5lb1_entry() //  [R1]
         { info_tbl: [(c5p5t,
                       label: sat_s5lb1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p5t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5p5u; else goto c5p5v;
       c5p5u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5p5v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.sort_entry() //  [R2, R3]
         { info_tbl: [(c5p5w,
                       label: Data.OldList.sort_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p5w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5p5A; else goto c5p5z;
       c5p5A: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.sort_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5p5z: // global
           I64[Hp - 16] = sat_s5lb1_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.617820684 UTC

[section ""data" . Data.OldList.unfoldr_closure" {
     Data.OldList.unfoldr_closure:
         const Data.OldList.unfoldr_info;
 },
 go_s5lb4_entry() //  [R1, R2]
         { info_tbl: [(c5p5Y,
                       label: go_s5lb4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p5Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5p5Z; else goto c5p60;
       c5p5Z: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5p60: // global
           I64[Sp - 16] = block_c5p5S_info;
           R2 = R2;
           _s5lb4::P64 = R1;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s5lb4::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5p5S() //  [R1]
         { info_tbl: [(c5p5S,
                       label: block_c5p5S_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p5S: // global
           if (R1 & 7 == 1) goto c5p5V; else goto c5p5W;
       c5p5V: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5p5W: // global
           I64[Sp] = block_c5p66_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u5p6h; else goto c5p67;
       u5p6h: // global
           call _c5p66(R1) args: 0, res: 0, upd: 0;
       c5p67: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5p66() //  [R1]
         { info_tbl: [(c5p66,
                       label: block_c5p66_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p66: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5p6g; else goto c5p6f;
       c5p6g: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5p6f: // global
           _s5lb9::P64 = P64[R1 + 7];
           _s5lba::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s5lba::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5lb9::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.unfoldr_entry() //  [R2, R3]
         { info_tbl: [(c5p6i,
                       label: Data.OldList.unfoldr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p6i: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5p6m; else goto c5p6l;
       c5p6m: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.unfoldr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5p6l: // global
           I64[Hp - 8] = go_s5lb4_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go_s5lb4_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.627463661 UTC

[section ""data" . lvl7_r5kSp_closure" {
     lvl7_r5kSp_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.629964759 UTC

[section ""data" . Data.OldList.unlines_closure" {
     Data.OldList.unlines_closure:
         const Data.OldList.unlines_info;
 },
 sat_s5lbg_entry() //  [R1]
         { info_tbl: [(c5p6X,
                       label: sat_s5lbg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p6X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5p6Y; else goto c5p6Z;
       c5p6Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5p6Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.unlines_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.unlines_entry() //  [R2]
         { info_tbl: [(c5p74,
                       label: Data.OldList.unlines_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p74: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5p75; else goto c5p76;
       c5p75: // global
           R2 = R2;
           R1 = Data.OldList.unlines_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5p76: // global
           I64[Sp - 8] = block_c5p6N_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5p7d; else goto c5p6O;
       u5p7d: // global
           call _c5p6N(R1) args: 0, res: 0, upd: 0;
       c5p6O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5p6N() //  [R1]
         { info_tbl: [(c5p6N,
                       label: block_c5p6N_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p6N: // global
           if (R1 & 7 == 1) goto c5p71; else goto c5p72;
       c5p71: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5p72: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5p7c; else goto c5p7b;
       c5p7c: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5p7b: // global
           _s5lbe::P64 = P64[R1 + 6];
           _s5lbf::P64 = P64[R1 + 14];
           I64[Hp - 40] = sat_s5lbg_info;
           P64[Hp - 24] = _s5lbf::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl7_r5kSp_closure+1;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = _s5lbe::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.640517561 UTC

[section ""data" . Data.OldList.wordsFB_closure" {
     Data.OldList.wordsFB_closure:
         const Data.OldList.wordsFB_info;
 },
 ds_s5lbq_entry() //  [R1]
         { info_tbl: [(c5p7Q,
                       label: ds_s5lbq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p7Q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5p7R; else goto c5p7S;
       c5p7R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5p7S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5p7N_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.isSpace_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5p7N() //  [R1, R2]
         { info_tbl: [(c5p7N,
                       label: block_c5p7N_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p7N: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5p7V; else goto c5p7U;
       c5p7V: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5p7U: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lbB_entry() //  [R1]
         { info_tbl: [(c5p83,
                       label: sat_s5lbB_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p83: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5p84; else goto c5p85;
       c5p84: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5p85: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c5p80_info;
           _s5lbl::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s5lbl::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5p89; else goto c5p81;
       u5p89: // global
           call _c5p80(R1) args: 0, res: 0, upd: 0;
       c5p81: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5p80() //  [R1]
         { info_tbl: [(c5p80,
                       label: block_c5p80_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p80: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s5lbl_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 go_s5lbl_entry() //  [R1, R2]
         { info_tbl: [(c5p8e,
                       label: go_s5lbl_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p8e: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5p8f; else goto c5p8g;
       c5p8f: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5p8g: // global
           I64[Sp - 32] = block_c5p7E_info;
           R3 = R2;
           R2 = GHC.Unicode.isSpace_closure+1;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = R1;
           Sp = Sp - 32;
           call GHC.List.dropWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5p7E() //  [R1]
         { info_tbl: [(c5p7E,
                       label: block_c5p7E_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p7E: // global
           if (R1 & 7 == 1) goto c5p8b; else goto c5p8c;
       c5p8b: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5p8c: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5p8m; else goto c5p8l;
       c5p8m: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5p8l: // global
           I64[Hp - 72] = ds_s5lbq_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_s5lbB_info;
           P64[Hp - 32] = P64[Sp + 24];
           _c5p7J::P64 = Hp - 72;
           P64[Hp - 24] = _c5p7J::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5p7J::P64;
           R3 = Hp - 48;
           R2 = Hp - 16;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.wordsFB_entry() //  [R2, R3, R4]
         { info_tbl: [(c5p8n,
                       label: Data.OldList.wordsFB_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p8n: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5p8r; else goto c5p8q;
       c5p8r: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.wordsFB_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5p8q: // global
           I64[Hp - 16] = go_s5lbl_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = R4;
           R1 = Hp - 15;
           call go_s5lbl_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Data.OldList.words_closure" {
     Data.OldList.words_closure:
         const Data.OldList.words_info;
 },
 ds_s5lbG_entry() //  [R1]
         { info_tbl: [(c5p8I,
                       label: ds_s5lbG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p8I: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5p8J; else goto c5p8K;
       c5p8J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5p8K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5p8F_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.isSpace_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5p8F() //  [R1, R2]
         { info_tbl: [(c5p8F,
                       label: block_c5p8F_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p8F: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5p8N; else goto c5p8M;
       c5p8N: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5p8M: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lbR_entry() //  [R1]
         { info_tbl: [(c5p8V,
                       label: sat_s5lbR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p8V: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5p8W; else goto c5p8X;
       c5p8W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5p8X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5p8S_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5p91; else goto c5p8T;
       u5p91: // global
           call _c5p8S(R1) args: 0, res: 0, upd: 0;
       c5p8T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5p8S() //  [R1]
         { info_tbl: [(c5p8S,
                       label: block_c5p8S_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p8S: // global
           R2 = P64[R1 + 15];
           Sp = Sp + 8;
           call Data.OldList.words_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.words_entry() //  [R2]
         { info_tbl: [(c5p96,
                       label: Data.OldList.words_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p96: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5p97; else goto c5p98;
       c5p97: // global
           R2 = R2;
           R1 = Data.OldList.words_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5p98: // global
           I64[Sp - 8] = block_c5p8w_info;
           R3 = R2;
           R2 = GHC.Unicode.isSpace_closure+1;
           Sp = Sp - 8;
           call GHC.List.dropWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5p8w() //  [R1]
         { info_tbl: [(c5p8w,
                       label: block_c5p8w_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5p8w: // global
           if (R1 & 7 == 1) goto c5p93; else goto c5p94;
       c5p93: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5p94: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c5p9f; else goto c5p9e;
       c5p9f: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5p9e: // global
           I64[Hp - 88] = ds_s5lbG_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = sat_s5lbR_info;
           _c5p8B::P64 = Hp - 88;
           P64[Hp - 48] = _c5p8B::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5p8B::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.670104465 UTC

[section ""data" . lvl8_r5kSq_closure" {
     lvl8_r5kSq_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.672377942 UTC

[section ""data" . Data.OldList.unwordsFB_closure" {
     Data.OldList.unwordsFB_closure:
         const Data.OldList.unwordsFB_info;
 },
 sat_s5lbU_entry() //  [R1]
         { info_tbl: [(c5pap,
                       label: sat_s5lbU_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pap: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5paq; else goto c5par;
       c5paq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5par: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.unwordsFB_entry() //  [R2, R3]
         { info_tbl: [(c5pat,
                       label: Data.OldList.unwordsFB_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pat: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5pax; else goto c5paw;
       c5pax: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.unwordsFB_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5paw: // global
           I64[Hp - 48] = sat_s5lbU_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl8_r5kSq_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.679850858 UTC

[section ""data" . Data.OldList.unwords_go_closure" {
     Data.OldList.unwords_go_closure:
         const Data.OldList.unwords_go_info;
 },
 sat_s5lbZ_entry() //  [R1]
         { info_tbl: [(c5pb0,
                       label: sat_s5lbZ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pb0: // global
           R2 = P64[R1 + 16];
           call Data.OldList.unwords_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5lc0_entry() //  [R1]
         { info_tbl: [(c5pb3,
                       label: sat_s5lc0_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pb3: // global
           _s5lc0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5pb4; else goto c5pb5;
       c5pb5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5pb7; else goto c5pb6;
       c5pb7: // global
           HpAlloc = 24;
           goto c5pb4;
       c5pb4: // global
           R1 = _s5lc0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5pb6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5lc0::P64;
           _s5lbX::P64 = P64[_s5lc0::P64 + 16];
           _s5lbY::P64 = P64[_s5lc0::P64 + 24];
           I64[Hp - 16] = sat_s5lbZ_info;
           P64[Hp] = _s5lbY::P64;
           R3 = Hp - 16;
           R2 = _s5lbX::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.unwords_go_entry() //  [R2]
         { info_tbl: [(c5pbc,
                       label: Data.OldList.unwords_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pbc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5pbd; else goto c5pbe;
       c5pbd: // global
           R2 = R2;
           R1 = Data.OldList.unwords_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5pbe: // global
           I64[Sp - 8] = block_c5paM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5pbl; else goto c5paN;
       u5pbl: // global
           call _c5paM(R1) args: 0, res: 0, upd: 0;
       c5paN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5paM() //  [R1]
         { info_tbl: [(c5paM,
                       label: block_c5paM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5paM: // global
           if (R1 & 7 == 1) goto c5pb9; else goto c5pba;
       c5pb9: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pba: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5pbk; else goto c5pbj;
       c5pbk: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5pbj: // global
           _s5lbX::P64 = P64[R1 + 6];
           _s5lbY::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s5lc0_info;
           P64[Hp - 32] = _s5lbX::P64;
           P64[Hp - 24] = _s5lbY::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl8_r5kSq_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.692228027 UTC

[section ""data" . Data.OldList.tailUnwords_closure" {
     Data.OldList.tailUnwords_closure:
         const Data.OldList.tailUnwords_info;
 },
 Data.OldList.tailUnwords_entry() //  [R2]
         { info_tbl: [(c5pbS,
                       label: Data.OldList.tailUnwords_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pbS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5pbT; else goto c5pbU;
       c5pbT: // global
           R2 = R2;
           R1 = Data.OldList.tailUnwords_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5pbU: // global
           I64[Sp - 8] = block_c5pbL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5pc1; else goto c5pbM;
       u5pc1: // global
           call _c5pbL(R1) args: 0, res: 0, upd: 0;
       c5pbM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pbL() //  [R1]
         { info_tbl: [(c5pbL,
                       label: block_c5pbL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pbL: // global
           if (R1 & 7 == 1) goto c5pbP; else goto c5pbQ;
       c5pbP: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pbQ: // global
           R1 = P64[R1 + 14] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Data.OldList.unwords_closure" {
     Data.OldList.unwords_closure:
         const Data.OldList.unwords_info;
 },
 sat_s5lc9_entry() //  [R1]
         { info_tbl: [(c5pcg,
                       label: sat_s5lc9_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pcg: // global
           R2 = P64[R1 + 16];
           call Data.OldList.unwords_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.unwords_entry() //  [R2]
         { info_tbl: [(c5pcn,
                       label: Data.OldList.unwords_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pcn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5pco; else goto c5pcp;
       c5pco: // global
           R2 = R2;
           R1 = Data.OldList.unwords_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5pcp: // global
           I64[Sp - 8] = block_c5pc6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5pcv; else goto c5pc7;
       u5pcv: // global
           call _c5pc6(R1) args: 0, res: 0, upd: 0;
       c5pc7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pc6() //  [R1]
         { info_tbl: [(c5pc6,
                       label: block_c5pc6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pc6: // global
           if (R1 & 7 == 1) goto c5pck; else goto c5pcl;
       c5pck: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pcl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5pcu; else goto c5pct;
       c5pcu: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5pct: // global
           _s5lc7::P64 = P64[R1 + 6];
           _s5lc8::P64 = P64[R1 + 14];
           I64[Hp - 16] = sat_s5lc9_info;
           P64[Hp] = _s5lc8::P64;
           R3 = Hp - 16;
           R2 = _s5lc7::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.708998529 UTC

[section ""data" . lvl9_r5kSr_closure" {
     lvl9_r5kSr_closure:
         const lvl9_r5kSr_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r5kSr_entry() //  [R1]
         { info_tbl: [(c5pd5,
                       label: lvl9_r5kSr_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pd5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5pd6; else goto c5pd7;
       c5pd6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5pd7: // global
           (_c5pd2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5pd2::I64 == 0) goto c5pd4; else goto c5pd3;
       c5pd4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5pd3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5pd2::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.List.reverse1_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.71484344 UTC

[section ""data" . lvl10_r5kSs_closure" {
     lvl10_r5kSs_closure:
         const lvl10_r5kSs_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_r5kSs_entry() //  [R1]
         { info_tbl: [(c5pdl,
                       label: lvl10_r5kSs_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pdl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5pdm; else goto c5pdn;
       c5pdm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5pdn: // global
           (_c5pdi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5pdi::I64 == 0) goto c5pdk; else goto c5pdj;
       c5pdk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5pdj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5pdi::I64;
           R3 = lvl9_r5kSr_closure;
           R2 = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.724399177 UTC

[section ""data" . poly_$wgo_r5kSt_closure" {
     poly_$wgo_r5kSt_closure:
         const poly_$wgo_r5kSt_info;
         const 0;
 },
 poly_$wgo_r5kSt_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pdw: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2,
                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5lco_entry() //  [R1]
         { info_tbl: [(c5pe0,
                       label: sat_s5lco_info
                       rep:HeapRep 3 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pe0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5pe1; else goto c5pe2;
       c5pe1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5pe2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 32];
           R4 = P64[R1 + 16];
           R3 = I64[R1 + 40];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lcm_entry() //  [R1]
         { info_tbl: [(c5peb,
                       label: sat_s5lcm_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5peb: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5lcn_entry() //  [R1]
         { info_tbl: [(c5pee,
                       label: sat_s5lcn_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pee: // global
           _s5lcn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5pef; else goto c5peg;
       c5peg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5pei; else goto c5peh;
       c5pei: // global
           HpAlloc = 24;
           goto c5pef;
       c5pef: // global
           R1 = _s5lcn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5peh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5lcn::P64;
           _s5lcc::P64 = P64[_s5lcn::P64 + 16];
           _s5lcl::P64 = P64[_s5lcn::P64 + 24];
           I64[Hp - 16] = sat_s5lcm_info;
           P64[Hp] = _s5lcl::P64;
           R3 = Hp - 16;
           R2 = _s5lcc::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lcr_entry() //  [R1]
         { info_tbl: [(c5pew,
                       label: sat_s5lcr_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pew: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5peA; else goto c5pez;
       c5peA: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5pez: // global
           _s5lcd::P64 = P64[R1 + 16];
           _s5lcf::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5lcf::P64;
           P64[Hp] = _s5lcd::P64;
           R3 = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 b'_s5lcp_entry() //  [R1]
         { info_tbl: [(c5peB,
                       label: b'_s5lcp_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5peB: // global
           _s5lcp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5peC; else goto c5peD;
       c5peD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5peF; else goto c5peE;
       c5peF: // global
           HpAlloc = 32;
           goto c5peC;
       c5peC: // global
           R1 = _s5lcp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5peE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5lcp::P64;
           _s5lcc::P64 = P64[_s5lcp::P64 + 16];
           _s5lcd::P64 = P64[_s5lcp::P64 + 24];
           _s5lcf::P64 = P64[_s5lcp::P64 + 32];
           I64[Hp - 24] = sat_s5lcr_info;
           P64[Hp - 8] = _s5lcd::P64;
           P64[Hp] = _s5lcf::P64;
           R3 = Hp - 24;
           R2 = _s5lcc::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lct_entry() //  [R1]
         { info_tbl: [(c5peK,
                       label: sat_s5lct_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5peK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5peL; else goto c5peM;
       c5peL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5peM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = GHC.Types.[]_closure+1;
           R4 = P64[R1 + 24];
           R3 = I64[R1 + 32];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lcs_entry() //  [R1]
         { info_tbl: [(c5peR,
                       label: sat_s5lcs_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5peR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5peS; else goto c5peT;
       c5peS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5peT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl9_r5kSr_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lcx_entry() //  [R1]
         { info_tbl: [(c5pf0,
                       label: sat_s5lcx_info
                       rep:HeapRep 3 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pf0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5pf1; else goto c5pf2;
       c5pf1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5pf2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 32];
           R4 = P64[R1 + 16];
           R3 = I64[R1 + 40];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5lcv_entry() //  [R1]
         { info_tbl: [(c5pfb,
                       label: sat_s5lcv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pfb: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5lcw_entry() //  [R1]
         { info_tbl: [(c5pfe,
                       label: sat_s5lcw_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pfe: // global
           _s5lcw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5pff; else goto c5pfg;
       c5pfg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5pfi; else goto c5pfh;
       c5pfi: // global
           HpAlloc = 24;
           goto c5pff;
       c5pff: // global
           R1 = _s5lcw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5pfh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5lcw::P64;
           _s5lcc::P64 = P64[_s5lcw::P64 + 16];
           _s5lcu::P64 = P64[_s5lcw::P64 + 24];
           I64[Hp - 16] = sat_s5lcv_info;
           P64[Hp] = _s5lcu::P64;
           R3 = Hp - 16;
           R2 = _s5lcc::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_$wgo_r5kSt_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5pfn,
                       label: poly_$wgo_r5kSt_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pfn: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c5pfo; else goto c5pfp;
       c5pfo: // global
           R1 = poly_$wgo_r5kSt_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c5pfp: // global
           I64[Sp - 32] = block_c5pdA_info;
           R1 = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5pfS; else goto c5pdB;
       u5pfS: // global
           call _c5pdA(R1) args: 0, res: 0, upd: 0;
       c5pdB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pdA() //  [R1]
         { info_tbl: [(c5pdA,
                       label: block_c5pdA_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pdA: // global
           if (R1 & 7 == 1) goto c5pfk; else goto c5pfl;
       c5pfk: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pfl: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c5pfu; else goto c5pft;
       c5pfu: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5pft: // global
           _s5lcf::P64 = P64[R1 + 6];
           _s5lcg::P64 = P64[R1 + 14];
           _s5lch::I64 = I64[Sp + 8] + 1;
           if (_s5lch::I64 >= 255) goto c5pfH; else goto c5pfJ;
       c5pfH: // global
           Hp = Hp - 128;
           _s5lck::I64 = _s5lch::I64 & (_s5lch::I64 + 1);
           if (_s5lck::I64 != 0) goto u5pfL; else goto u5pfK;
       u5pfL: // global
           I64[Sp - 16] = _s5lch::I64;
           I64[Sp - 8] = _s5lck::I64;
           P64[Sp] = _s5lcg::P64;
           P64[Sp + 8] = _s5lcf::P64;
           Sp = Sp - 16;
           call _c5pdT() args: 0, res: 0, upd: 0;
       u5pfK: // global
           I64[Sp - 16] = _s5lch::I64;
           I64[Sp - 8] = _s5lck::I64;
           P64[Sp] = _s5lcg::P64;
           P64[Sp + 8] = _s5lcf::P64;
           Sp = Sp - 16;
           call _c5pel() args: 0, res: 0, upd: 0;
       c5pfJ: // global
           I64[Hp - 120] = :_con_info;
           P64[Hp - 112] = _s5lcf::P64;
           P64[Hp - 104] = P64[Sp + 24];
           I64[Hp - 96] = sat_s5lcx_info;
           _s5lcc::P64 = P64[Sp + 16];
           P64[Hp - 80] = _s5lcc::P64;
           P64[Hp - 72] = _s5lcg::P64;
           _c5peV::P64 = Hp - 118;
           P64[Hp - 64] = _c5peV::P64;
           I64[Hp - 56] = _s5lch::I64;
           I64[Hp - 48] = sat_s5lcw_info;
           P64[Hp - 32] = _s5lcc::P64;
           P64[Hp - 24] = _c5peV::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5pdT() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pdT: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c5pfA; else goto c5pfz;
       c5pfA: // global
           HpAlloc = 128;
           I64[Sp - 8] = block_c5pdS_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c5pfz: // global
           I64[Hp - 120] = :_con_info;
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 40];
           I64[Hp - 96] = sat_s5lco_info;
           _s5lcc::P64 = P64[Sp + 32];
           P64[Hp - 80] = _s5lcc::P64;
           P64[Hp - 72] = P64[Sp + 16];
           _c5pdV::P64 = Hp - 118;
           P64[Hp - 64] = _c5pdV::P64;
           I64[Hp - 56] = I64[Sp];
           I64[Hp - 48] = sat_s5lcn_info;
           P64[Hp - 32] = _s5lcc::P64;
           P64[Hp - 24] = _c5pdV::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5pdS() //  [R1]
         { info_tbl: [(c5pdS,
                       label: block_c5pdS_info
                       rep:StackRep [True, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pdS: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c5pdT() args: 0, res: 0, upd: 0;
     }
 },
 _c5pel() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pel: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c5pfF; else goto c5pfE;
       c5pfF: // global
           HpAlloc = 128;
           I64[Sp - 8] = block_c5pek_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c5pfE: // global
           I64[Hp - 120] = b'_s5lcp_info;
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 24];
           I64[Hp - 80] = sat_s5lct_info;
           P64[Hp - 64] = P64[Sp + 16];
           _c5pen::P64 = Hp - 120;
           P64[Hp - 56] = _c5pen::P64;
           I64[Hp - 48] = I64[Sp];
           I64[Hp - 40] = sat_s5lcs_info;
           P64[Hp - 24] = _c5pen::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5pek() //  [R1]
         { info_tbl: [(c5pek,
                       label: block_c5pek_info
                       rep:StackRep [True, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pek: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c5pel() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.768740686 UTC

[section ""data" . Data.OldList.$winits_closure" {
     Data.OldList.$winits_closure:
         const Data.OldList.$winits_info;
         const 0;
 },
 sat_s5lcz_entry() //  [R1]
         { info_tbl: [(c5phm,
                       label: sat_s5lcz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5phm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5phn; else goto c5pho;
       c5phn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5pho: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.[]_closure+1;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$winits_entry() //  [R2]
         { info_tbl: [(c5php,
                       label: Data.OldList.$winits_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5php: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5pht; else goto c5phs;
       c5pht: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.OldList.$winits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5phs: // global
           I64[Hp - 16] = sat_s5lcz_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = lvl10_r5kSs_closure;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.776682557 UTC

[section ""data" . Data.OldList.inits_closure" {
     Data.OldList.inits_closure:
         const Data.OldList.inits_info;
         const 0;
 },
 Data.OldList.inits_entry() //  [R2]
         { info_tbl: [(c5phK,
                       label: Data.OldList.inits_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5phK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5phL; else goto c5phM;
       c5phL: // global
           R2 = R2;
           R1 = Data.OldList.inits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5phM: // global
           I64[Sp - 8] = block_c5phH_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$winits_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5phH() //  [R1, R2]
         { info_tbl: [(c5phH,
                       label: block_c5phH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5phH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5phP; else goto c5phO;
       c5phP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5phO: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.784679189 UTC

[section ""cstring" . Data.OldList.$tc'SnocBuilder3_bytes" {
     Data.OldList.$tc'SnocBuilder3_bytes:
         I8[] [39,83,110,111,99,66,117,105,108,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.787105483 UTC

[section ""data" . Data.OldList.$tc'SnocBuilder2_closure" {
     Data.OldList.$tc'SnocBuilder2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.OldList.$tc'SnocBuilder3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.789424009 UTC

[section ""cstring" . Data.OldList.$tcSnocBuilder2_bytes" {
     Data.OldList.$tcSnocBuilder2_bytes:
         I8[] [83,110,111,99,66,117,105,108,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.791781197 UTC

[section ""data" . Data.OldList.$tcSnocBuilder1_closure" {
     Data.OldList.$tcSnocBuilder1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.OldList.$tcSnocBuilder2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.794141664 UTC

[section ""cstring" . Data.OldList.$trModule2_bytes" {
     Data.OldList.$trModule2_bytes:
         I8[] [68,97,116,97,46,79,108,100,76,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.796437262 UTC

[section ""data" . Data.OldList.$trModule1_closure" {
     Data.OldList.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.OldList.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.799171353 UTC

[section ""cstring" . Data.OldList.$trModule4_bytes" {
     Data.OldList.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.801822488 UTC

[section ""data" . Data.OldList.$trModule3_closure" {
     Data.OldList.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.OldList.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.805345295 UTC

[section ""data" . Data.OldList.$trModule_closure" {
     Data.OldList.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.OldList.$trModule3_closure+1;
         const Data.OldList.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.808094097 UTC

[section ""data" . Data.OldList.$tcSnocBuilder_closure" {
     Data.OldList.$tcSnocBuilder_closure:
         const GHC.Types.TyCon_con_info;
         const Data.OldList.$trModule_closure+1;
         const Data.OldList.$tcSnocBuilder1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 17650604350574790456;
         const 3021529305462083578;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.811065775 UTC

[section ""data" . $krep_r5kSu_closure" {
     $krep_r5kSu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.813772094 UTC

[section ""data" . $krep1_r5kSv_closure" {
     $krep1_r5kSv_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.816367092 UTC

[section ""data" . $krep2_r5kSw_closure" {
     $krep2_r5kSw_closure:
         const :_con_info;
         const $krep1_r5kSv_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.818999587 UTC

[section ""data" . $krep3_r5kSx_closure" {
     $krep3_r5kSx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep2_r5kSw_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.821688948 UTC

[section ""data" . $krep4_r5kSy_closure" {
     $krep4_r5kSy_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.OldList.$tcSnocBuilder_closure+1;
         const $krep2_r5kSw_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.824346488 UTC

[section ""data" . $krep5_r5kSz_closure" {
     $krep5_r5kSz_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5kSx_closure+1;
         const $krep4_r5kSy_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.827164973 UTC

[section ""data" . $krep6_r5kSA_closure" {
     $krep6_r5kSA_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5kSx_closure+1;
         const $krep5_r5kSz_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.829892132 UTC

[section ""data" . Data.OldList.$tc'SnocBuilder1_closure" {
     Data.OldList.$tc'SnocBuilder1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r5kSu_closure+1;
         const $krep6_r5kSA_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.832677849 UTC

[section ""data" . Data.OldList.$tc'SnocBuilder_closure" {
     Data.OldList.$tc'SnocBuilder_closure:
         const GHC.Types.TyCon_con_info;
         const Data.OldList.$trModule_closure+1;
         const Data.OldList.$tc'SnocBuilder2_closure+1;
         const Data.OldList.$tc'SnocBuilder1_closure+4;
         const 6719263830224029004;
         const 9134053658265160069;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.836315383 UTC

[section ""data" . lvl11_r5kSB_closure" {
     lvl11_r5kSB_closure:
         const lvl11_r5kSB_info;
 },
 lvl11_r5kSB_entry() //  [R2]
         { info_tbl: [(c5pip,
                       label: lvl11_r5kSB_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pip: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5piq; else goto c5pir;
       c5piq: // global
           R2 = R2;
           R1 = lvl11_r5kSB_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5pir: // global
           I64[Sp - 8] = block_c5pim_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5piz; else goto c5pin;
       u5piz: // global
           call _c5pim(R1) args: 0, res: 0, upd: 0;
       c5pin: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pim() //  [R1]
         { info_tbl: [(c5pim,
                       label: block_c5pim_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pim: // global
           if (I64[R1 + 7] == 10) goto c5piy; else goto c5pix;
       c5piy: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pix: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.847647367 UTC

[section ""data" . Data.OldList.lines_closure" {
     Data.OldList.lines_closure:
         const Data.OldList.lines_info;
 },
 sat_s5lcT_entry() //  [R1]
         { info_tbl: [(c5pjc,
                       label: sat_s5lcT_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pjc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5pjd; else goto c5pje;
       c5pjd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5pje: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5pj5_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5pjl; else goto c5pj6;
       u5pjl: // global
           call _c5pj5(R1) args: 0, res: 0, upd: 0;
       c5pj6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5pj5() //  [R1]
         { info_tbl: [(c5pj5,
                       label: block_c5pj5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pj5: // global
           if (R1 & 7 == 1) goto c5pj9; else goto c5pja;
       c5pj9: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5pja: // global
           R2 = P64[R1 + 14];
           Sp = Sp + 8;
           call Data.OldList.lines_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 ds1_s5lcM_entry() //  [R1]
         { info_tbl: [(c5pjn,
                       label: ds1_s5lcM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pjn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5pjo; else goto c5pjp;
       c5pjo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5pjp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5piZ_info;
           R3 = P64[R1 + 16];
           R2 = lvl11_r5kSB_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5piZ() //  [R1, R2]
         { info_tbl: [(c5piZ,
                       label: block_c5piZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5piZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5pjs; else goto c5pjr;
       c5pjs: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5pjr: // global
           I64[Hp - 40] = sat_s5lcT_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.lines_entry() //  [R2]
         { info_tbl: [(c5pjx,
                       label: Data.OldList.lines_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pjx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5pjy; else goto c5pjz;
       c5pjy: // global
           R2 = R2;
           R1 = Data.OldList.lines_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5pjz: // global
           I64[Sp - 8] = block_c5piP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5pjI; else goto c5piQ;
       u5pjI: // global
           call _c5piP(R1) args: 0, res: 0, upd: 0;
       c5piQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5piP() //  [R1]
         { info_tbl: [(c5piP,
                       label: block_c5piP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5piP: // global
           if (R1 & 7 == 1) goto c5pju; else goto c5pjv;
       c5pju: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pjv: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c5pjH; else goto c5pjG;
       c5pjH: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5pjG: // global
           I64[Hp - 88] = ds1_s5lcM_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c5piV::P64 = Hp - 88;
           P64[Hp - 48] = _c5piV::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5piV::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.874795192 UTC

[section ""data" . Data.OldList.SnocBuilder_closure" {
     Data.OldList.SnocBuilder_closure:
         const Data.OldList.SnocBuilder_info;
 },
 Data.OldList.SnocBuilder_entry() //  [R2, R3, R4]
         { info_tbl: [(c5pkn,
                       label: Data.OldList.SnocBuilder_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pkn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5pkr; else goto c5pkq;
       c5pkr: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.SnocBuilder_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5pkq: // global
           I64[Hp - 24] = Data.OldList.SnocBuilder_con_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           I64[Hp] = R2;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.881885952 UTC

[Data.OldList.SnocBuilder_con_entry() //  [R1]
         { info_tbl: [(c5pkx,
                       label: Data.OldList.SnocBuilder_con_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,68,97,116,97,46,79,108,100,76,105,115,116,46,83,110,111,99,66,117,105,108,100,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pkx: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:20.887494918 UTC

[section ""relreadonly" . S5lDv_srt" {
     S5lDv_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.OldList.maximumBy_closure;
         const Data.OldList.maximumBy1_closure;
         const Data.OldList.minimumBy_closure;
         const Data.OldList.minimumBy1_closure;
         const sat_s5l01_closure;
         const Data.OldList.genericLength2_closure;
         const Data.OldList.genericLength1_closure;
         const Data.OldList.strictGenericLength_closure;
         const Data.OldList.genericLength_closure;
         const Data.OldList.genericTake_closure;
         const Data.OldList.genericReplicate_closure;
         const Data.OldList.genericDrop_closure;
         const Data.OldList.$wgenericSplitAt_closure;
         const Data.OldList.genericSplitAt_closure;
         const Data.OldList.genericIndex_closure;
         const lvl3_r5kSk_closure;
         const lvl5_r5kSm_closure;
         const lvl9_r5kSr_closure;
         const poly_$wgo_r5kSt_closure;
         const Data.OldList.$winits_closure;
         const lvl10_r5kSs_closure;
         const Data.OldList.inits_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.564912254 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:25.567314696 UTC

[section ""data" . Data.OldList.$WSnocBuilder_closure" {
     Data.OldList.$WSnocBuilder_closure:
         const Data.OldList.$WSnocBuilder_info;
 },
 Data.OldList.$WSnocBuilder_entry() //  [R2, R3, R4]
         { info_tbl: [(c5pFa,
                       label: Data.OldList.$WSnocBuilder_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pFa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5pFe; else goto c5pFf;
       c5pFe: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$WSnocBuilder_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5pFf: // global
           I64[Sp - 24] = block_c5pF7_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5pFj; else goto c5pF8;
       u5pFj: // global
           call _c5pF7(R1) args: 0, res: 0, upd: 0;
       c5pF8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pF7() //  [R1]
         { info_tbl: [(c5pF7,
                       label: block_c5pF7_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pF7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5pFi; else goto c5pFh;
       c5pFi: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5pFh: // global
           _s5pkI::I64 = I64[R1 + 7];
           I64[Hp - 24] = Data.OldList.SnocBuilder_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = _s5pkI::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.578210158 UTC

[section ""data" . Data.OldList.dropWhileEnd_closure" {
     Data.OldList.dropWhileEnd_closure:
         const Data.OldList.dropWhileEnd_info;
 },
 go_s5pkL_entry() //  [R1, R2]
         { info_tbl: [(c5pFO,
                       label: go_s5pkL_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pFO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5pFP; else goto c5pFQ;
       c5pFP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5pFQ: // global
           I64[Sp - 24] = block_c5pFH_info;
           _s5pkL::P64 = R1;
           _s5pkJ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s5pkJ::P64;
           P64[Sp - 8] = _s5pkL::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5pGv; else goto c5pFI;
       u5pGv: // global
           call _c5pFH(R1) args: 0, res: 0, upd: 0;
       c5pFI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pFH() //  [R1]
         { info_tbl: [(c5pFH,
                       label: block_c5pFH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pFH: // global
           if (R1 & 7 == 1) goto u5pGs; else goto c5pFM;
       u5pGs: // global
           Sp = Sp + 24;
           call _c5pGi() args: 0, res: 0, upd: 0;
       c5pFM: // global
           I64[Sp - 8] = block_c5pFW_info;
           _s5pkO::P64 = P64[R1 + 6];
           R2 = _s5pkO::P64;
           _s5pkP::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s5pkP::P64;
           P64[Sp + 8] = _s5pkO::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pFW() //  [R1]
         { info_tbl: [(c5pFW,
                       label: block_c5pFW_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pFW: // global
           _s5pkL::P64 = P64[Sp + 24];
           _s5pkP::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5pG4; else goto c5pGc;
       c5pG4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5pG7; else goto c5pG6;
       c5pG7: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5pG6: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s5pkL::P64;
           P64[Hp - 24] = _s5pkP::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pGc: // global
           I64[Sp + 8] = block_c5pGa_info;
           R2 = _s5pkP::P64;
           R1 = _s5pkL::P64;
           Sp = Sp + 8;
           call go_s5pkL_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pGa() //  [R1]
         { info_tbl: [(c5pGa,
                       label: block_c5pGa_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pGa: // global
           if (R1 & 7 == 1) goto u5pGt; else goto c5pGm;
       u5pGt: // global
           Sp = Sp + 24;
           call _c5pGi() args: 0, res: 0, upd: 0;
       c5pGm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5pGp; else goto c5pGo;
       c5pGp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5pGo: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5pGi() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pGi: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.dropWhileEnd_entry() //  [R2, R3]
         { info_tbl: [(c5pGx,
                       label: Data.OldList.dropWhileEnd_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pGx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5pGB; else goto c5pGA;
       c5pGB: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.dropWhileEnd_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5pGA: // global
           I64[Hp - 8] = go_s5pkL_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go_s5pkL_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.601103381 UTC

[section ""data" . Data.OldList.stripPrefix_closure" {
     Data.OldList.stripPrefix_closure:
         const Data.OldList.stripPrefix_info;
 },
 Data.OldList.stripPrefix_entry() //  [R2, R3, R4]
         { info_tbl: [(c5pHr,
                       label: Data.OldList.stripPrefix_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pHr: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c5pHs; else goto u5pI2;
       c5pHs: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.stripPrefix_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5pI2: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5pHh() args: 0, res: 0, upd: 0;
     }
 },
 _c5pHh() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pHh: // global
           I64[Sp - 8] = block_c5pHk_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5pI6; else goto c5pHl;
       u5pI6: // global
           call _c5pHk(R1) args: 0, res: 0, upd: 0;
       c5pHl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pHk() //  [R1]
         { info_tbl: [(c5pHk,
                       label: block_c5pHk_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pHk: // global
           _s5pkX::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5pHo; else goto c5pHp;
       c5pHo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5pHz; else goto c5pHy;
       c5pHz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5pHy: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s5pkX::P64;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pHp: // global
           I64[Sp] = block_c5pHC_info;
           _s5pkZ::P64 = P64[R1 + 6];
           _s5pl0::P64 = P64[R1 + 14];
           R1 = _s5pkX::P64;
           P64[Sp + 16] = _s5pl0::P64;
           P64[Sp + 24] = _s5pkZ::P64;
           if (R1 & 7 != 0) goto u5pI7; else goto c5pHE;
       u5pI7: // global
           call _c5pHC(R1) args: 0, res: 0, upd: 0;
       c5pHE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pHC() //  [R1]
         { info_tbl: [(c5pHC,
                       label: block_c5pHC_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pHC: // global
           if (R1 & 7 == 1) goto u5pI3; else goto c5pHP;
       u5pI3: // global
           Sp = Sp + 32;
           call _c5pHV() args: 0, res: 0, upd: 0;
       c5pHP: // global
           I64[Sp] = block_c5pHN_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5pHN() //  [R1]
         { info_tbl: [(c5pHN,
                       label: block_c5pHN_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pHN: // global
           if (R1 & 7 == 1) goto u5pI4; else goto c5pHZ;
       u5pI4: // global
           Sp = Sp + 32;
           call _c5pHV() args: 0, res: 0, upd: 0;
       c5pHZ: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 24];
           Sp = Sp + 8;
           call _c5pHh() args: 0, res: 0, upd: 0;
     }
 },
 _c5pHV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pHV: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.620251573 UTC

[section ""data" . Data.OldList.find_closure" {
     Data.OldList.find_closure:
         const Data.OldList.find_info;
 },
 Data.OldList.find_entry() //  [R2, R3]
         { info_tbl: [(c5pIW,
                       label: Data.OldList.find_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pIW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5pIX; else goto c5pIY;
       c5pIX: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.find_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5pIY: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c5pJ0() args: 0, res: 0, upd: 0;
     }
 },
 _c5pJ0() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pJ0: // global
           I64[Sp - 8] = block_c5pJ2_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5pJy; else goto c5pJ4;
       u5pJy: // global
           call _c5pJ2(R1) args: 0, res: 0, upd: 0;
       c5pJ4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pJ2() //  [R1]
         { info_tbl: [(c5pJ2,
                       label: block_c5pJ2_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pJ2: // global
           if (R1 & 7 == 1) goto c5pJa; else goto c5pJf;
       c5pJa: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pJf: // global
           I64[Sp - 8] = block_c5pJd_info;
           _s5pla::P64 = P64[R1 + 6];
           R2 = _s5pla::P64;
           _s5plb::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s5plb::P64;
           P64[Sp + 16] = _s5pla::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pJd() //  [R1]
         { info_tbl: [(c5pJd,
                       label: block_c5pJd_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pJd: // global
           if (R1 & 7 == 1) goto c5pJl; else goto c5pJp;
       c5pJl: // global
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c5pJ0() args: 0, res: 0, upd: 0;
       c5pJp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5pJs; else goto c5pJr;
       c5pJs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5pJr: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.635025825 UTC

[section ""data" . Data.OldList.elemIndex_closure" {
     Data.OldList.elemIndex_closure:
         const Data.OldList.elemIndex_info;
 },
 p_s5plf_entry() //  [R1]
         { info_tbl: [(c5pK8,
                       label: p_s5plf_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pK8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5pK9; else goto c5pKa;
       c5pK9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5pKa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5plq_entry() //  [R1, R2]
         { info_tbl: [(c5pKi,
                       label: sat_s5plq_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pKi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5pKj; else goto c5pKk;
       c5pKj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5pKk: // global
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = R2;
           I64[Sp - 8] = 0;
           Sp = Sp - 24;
           call _c5pKl() args: 0, res: 0, upd: 0;
     }
 },
 _c5pKl() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pKl: // global
           I64[Sp - 8] = block_c5pKo_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5pKW; else goto c5pKq;
       u5pKW: // global
           call _c5pKo(R1) args: 0, res: 0, upd: 0;
       c5pKq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pKo() //  [R1]
         { info_tbl: [(c5pKo,
                       label: block_c5pKo_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pKo: // global
           if (R1 & 7 == 1) goto c5pKw; else goto c5pKB;
       c5pKw: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pKB: // global
           I64[Sp] = block_c5pKz_info;
           R2 = P64[R1 + 6];
           _s5plm::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 16] = _s5plm::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pKz() //  [R1]
         { info_tbl: [(c5pKz,
                       label: block_c5pKz_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pKz: // global
           _s5plj::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto c5pKH; else goto c5pKM;
       c5pKH: // global
           P64[Sp + 16] = P64[Sp + 16];
           I64[Sp + 24] = _s5plj::I64 + 1;
           Sp = Sp + 8;
           call _c5pKl() args: 0, res: 0, upd: 0;
       c5pKM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5pKP; else goto c5pKO;
       c5pKP: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5pKO: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s5plj::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.elemIndex_entry() //  [R2, R3]
         { info_tbl: [(c5pKY,
                       label: Data.OldList.elemIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pKY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5pL2; else goto c5pL1;
       c5pL2: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.elemIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5pL1: // global
           I64[Hp - 40] = p_s5plf_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s5plq_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.656532886 UTC

[section ""data" . Data.OldList.findIndex_closure" {
     Data.OldList.findIndex_closure:
         const Data.OldList.findIndex_info;
 },
 Data.OldList.findIndex_entry() //  [R2, R3]
         { info_tbl: [(c5pLQ,
                       label: Data.OldList.findIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pLQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5pLR; else goto c5pLS;
       c5pLR: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.findIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5pLS: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = 0;
           Sp = Sp - 24;
           call _c5pLT() args: 0, res: 0, upd: 0;
     }
 },
 _c5pLT() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pLT: // global
           I64[Sp - 8] = block_c5pLW_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5pMu; else goto c5pLY;
       u5pMu: // global
           call _c5pLW(R1) args: 0, res: 0, upd: 0;
       c5pLY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pLW() //  [R1]
         { info_tbl: [(c5pLW,
                       label: block_c5pLW_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pLW: // global
           if (R1 & 7 == 1) goto c5pM4; else goto c5pM9;
       c5pM4: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pM9: // global
           I64[Sp] = block_c5pM7_info;
           R2 = P64[R1 + 6];
           _s5ply::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 16] = _s5ply::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pM7() //  [R1]
         { info_tbl: [(c5pM7,
                       label: block_c5pM7_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pM7: // global
           _s5plv::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto c5pMf; else goto c5pMk;
       c5pMf: // global
           P64[Sp + 16] = P64[Sp + 16];
           I64[Sp + 24] = _s5plv::I64 + 1;
           Sp = Sp + 8;
           call _c5pLT() args: 0, res: 0, upd: 0;
       c5pMk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5pMn; else goto c5pMm;
       c5pMn: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5pMm: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s5plv::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.66982629 UTC

[section ""data" . Data.OldList.findIndices_closure" {
     Data.OldList.findIndices_closure:
         const Data.OldList.findIndices_info;
 },
 sat_s5plO_entry() //  [R1]
         { info_tbl: [(c5pNo,
                       label: sat_s5plO_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pNo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5pNp; else goto c5pNq;
       c5pNp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5pNq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 32] + 1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s5plE_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 go_s5plE_entry() //  [R1, R2, R3]
         { info_tbl: [(c5pNv,
                       label: go_s5plE_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 14} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pNv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5pNw; else goto u5pNN;
       c5pNw: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5pNN: // global
           P64[Sp - 24] = R1;
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           call _c5pN4() args: 0, res: 0, upd: 0;
     }
 },
 _c5pN4() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pN4: // global
           _s5plC::P64 = P64[P64[Sp] + 6];
           I64[Sp - 8] = block_c5pN7_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5plC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5pNP; else goto c5pN8;
       u5pNP: // global
           call _c5pN7(R1) args: 0, res: 0, upd: 0;
       c5pN8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pN7() //  [R1]
         { info_tbl: [(c5pN7,
                       label: block_c5pN7_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pN7: // global
           if (R1 & 7 == 1) goto c5pNs; else goto c5pNt;
       c5pNs: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pNt: // global
           I64[Sp] = block_c5pNd_info;
           R2 = P64[R1 + 6];
           _s5plJ::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s5plJ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pNd() //  [R1]
         { info_tbl: [(c5pNd,
                       label: block_c5pNd_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pNd: // global
           _s5plG::I64 = I64[Sp + 24];
           _s5plJ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5pNE; else goto c5pNH;
       c5pNE: // global
           P64[Sp + 16] = _s5plJ::P64;
           I64[Sp + 24] = _s5plG::I64 + 1;
           Sp = Sp + 8;
           call _c5pN4() args: 0, res: 0, upd: 0;
       c5pNH: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5pNK; else goto c5pNJ;
       c5pNK: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5pNJ: // global
           I64[Hp - 72] = sat_s5plO_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = _s5plJ::P64;
           I64[Hp - 40] = _s5plG::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s5plG::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.findIndices_entry() //  [R2, R3]
         { info_tbl: [(c5pNS,
                       label: Data.OldList.findIndices_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pNS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5pNW; else goto c5pNV;
       c5pNW: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.findIndices_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5pNV: // global
           I64[Hp - 8] = go_s5plE_info;
           P64[Hp] = R2;
           _s5plD::P64 = R3;
           R3 = 0;
           R2 = _s5plD::P64;
           R1 = Hp - 6;
           call go_s5plE_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.683641455 UTC

[section ""data" . Data.OldList.elemIndices_closure" {
     Data.OldList.elemIndices_closure:
         const Data.OldList.elemIndices_info;
 },
 sat_s5plR_entry() //  [R1]
         { info_tbl: [(c5pOK,
                       label: sat_s5plR_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pOK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5pOL; else goto c5pOM;
       c5pOL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5pOM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.OldList.elemIndices_entry() //  [R2, R3]
         { info_tbl: [(c5pON,
                       label: Data.OldList.elemIndices_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pON: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5pOR; else goto c5pOQ;
       c5pOR: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.elemIndices_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5pOQ: // global
           I64[Hp - 24] = sat_s5plR_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Data.OldList.findIndices_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.693016102 UTC

[section ""data" . Data.OldList.isPrefixOf_closure" {
     Data.OldList.isPrefixOf_closure:
         const Data.OldList.isPrefixOf_info;
 },
 Data.OldList.isPrefixOf_entry() //  [R2, R3, R4]
         { info_tbl: [(c5pPf,
                       label: Data.OldList.isPrefixOf_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pPf: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c5pPg; else goto u5pPN;
       c5pPg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.isPrefixOf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5pPN: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5pP5() args: 0, res: 0, upd: 0;
     }
 },
 _c5pP5() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pP5: // global
           I64[Sp - 8] = block_c5pP8_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5pPR; else goto c5pP9;
       u5pPR: // global
           call _c5pP8(R1) args: 0, res: 0, upd: 0;
       c5pP9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pP8() //  [R1]
         { info_tbl: [(c5pP8,
                       label: block_c5pP8_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pP8: // global
           if (R1 & 7 == 1) goto c5pPc; else goto c5pPd;
       c5pPc: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pPd: // global
           I64[Sp] = block_c5pPn_info;
           _s5plW::P64 = P64[R1 + 6];
           _s5plX::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _s5plX::P64;
           P64[Sp + 24] = _s5plW::P64;
           if (R1 & 7 != 0) goto u5pPS; else goto c5pPp;
       u5pPS: // global
           call _c5pPn(R1) args: 0, res: 0, upd: 0;
       c5pPp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pPn() //  [R1]
         { info_tbl: [(c5pPn,
                       label: block_c5pPn_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pPn: // global
           if (R1 & 7 == 1) goto u5pPO; else goto c5pPA;
       u5pPO: // global
           Sp = Sp + 32;
           call _c5pPG() args: 0, res: 0, upd: 0;
       c5pPA: // global
           I64[Sp] = block_c5pPy_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5pPy() //  [R1]
         { info_tbl: [(c5pPy,
                       label: block_c5pPy_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pPy: // global
           if (R1 & 7 == 1) goto u5pPP; else goto c5pPK;
       u5pPP: // global
           Sp = Sp + 32;
           call _c5pPG() args: 0, res: 0, upd: 0;
       c5pPK: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 24];
           Sp = Sp + 8;
           call _c5pP5() args: 0, res: 0, upd: 0;
     }
 },
 _c5pPG() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pPG: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.710384018 UTC

[section ""data" . Data.OldList.isInfixOf_closure" {
     Data.OldList.isInfixOf_closure:
         const Data.OldList.isInfixOf_info;
 },
 Data.OldList.isInfixOf_entry() //  [R2, R3, R4]
         { info_tbl: [(c5pQH,
                       label: Data.OldList.isInfixOf_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pQH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5pQI; else goto c5pQJ;
       c5pQI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.isInfixOf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5pQJ: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5pQL() args: 0, res: 0, upd: 0;
     }
 },
 _c5pQL() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pQL: // global
           I64[Sp - 8] = block_c5pQN_info;
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           Sp = Sp - 8;
           call Data.OldList.isPrefixOf_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5pQN() //  [R1]
         { info_tbl: [(c5pQN,
                       label: block_c5pQN_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pQN: // global
           if (R1 & 7 == 1) goto c5pQV; else goto c5pRa;
       c5pQV: // global
           I64[Sp] = block_c5pQS_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u5pRg; else goto c5pQW;
       u5pRg: // global
           call _c5pQS(R1) args: 0, res: 0, upd: 0;
       c5pQW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5pRa: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5pQS() //  [R1]
         { info_tbl: [(c5pQS,
                       label: block_c5pQS_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pQS: // global
           if (R1 & 7 == 1) goto c5pR2; else goto c5pR6;
       c5pR2: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pR6: // global
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp + 8;
           call _c5pQL() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.719558989 UTC

[section ""data" . Data.OldList.dropLength_closure" {
     Data.OldList.dropLength_closure:
         const Data.OldList.dropLength_info;
 },
 Data.OldList.dropLength_entry() //  [R2, R3]
         { info_tbl: [(c5pRS,
                       label: Data.OldList.dropLength_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pRS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5pRT; else goto u5pSe;
       c5pRT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.dropLength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5pSe: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c5pRI() args: 0, res: 0, upd: 0;
     }
 },
 _c5pRI() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pRI: // global
           _s5pmb::P64 = P64[Sp];
           I64[Sp] = block_c5pRL_info;
           R1 = _s5pmb::P64;
           if (R1 & 7 != 0) goto u5pSg; else goto c5pRM;
       u5pSg: // global
           call _c5pRL(R1) args: 0, res: 0, upd: 0;
       c5pRM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pRL() //  [R1]
         { info_tbl: [(c5pRL,
                       label: block_c5pRL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pRL: // global
           _s5pmc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5pRP; else goto c5pRQ;
       c5pRP: // global
           R1 = _s5pmc::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5pRQ: // global
           I64[Sp] = block_c5pS0_info;
           _s5pmf::P64 = P64[R1 + 14];
           R1 = _s5pmc::P64;
           P64[Sp + 8] = _s5pmf::P64;
           if (R1 & 7 != 0) goto u5pSh; else goto c5pS2;
       u5pSh: // global
           call _c5pS0(R1) args: 0, res: 0, upd: 0;
       c5pS2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pS0() //  [R1]
         { info_tbl: [(c5pS0,
                       label: block_c5pS0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pS0: // global
           if (R1 & 7 == 1) goto c5pS8; else goto c5pSc;
       c5pS8: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pSc: // global
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 14];
           call _c5pRI() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.729034999 UTC

[section ""data" . Data.OldList.dropLengthMaybe_closure" {
     Data.OldList.dropLengthMaybe_closure:
         const Data.OldList.dropLengthMaybe_info;
 },
 Data.OldList.dropLengthMaybe_entry() //  [R2, R3]
         { info_tbl: [(c5pSW,
                       label: Data.OldList.dropLengthMaybe_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pSW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5pSX; else goto u5pTl;
       c5pSX: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.dropLengthMaybe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5pTl: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c5pSM() args: 0, res: 0, upd: 0;
     }
 },
 _c5pSM() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pSM: // global
           _s5pmj::P64 = P64[Sp];
           I64[Sp] = block_c5pSP_info;
           R1 = _s5pmj::P64;
           if (R1 & 7 != 0) goto u5pTn; else goto c5pSQ;
       u5pTn: // global
           call _c5pSP(R1) args: 0, res: 0, upd: 0;
       c5pSQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pSP() //  [R1]
         { info_tbl: [(c5pSP,
                       label: block_c5pSP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pSP: // global
           _s5pmk::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5pST; else goto c5pSU;
       c5pST: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5pT4; else goto c5pT3;
       c5pT4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5pT3: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s5pmk::P64;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pSU: // global
           I64[Sp] = block_c5pT7_info;
           _s5pmn::P64 = P64[R1 + 14];
           R1 = _s5pmk::P64;
           P64[Sp + 8] = _s5pmn::P64;
           if (R1 & 7 != 0) goto u5pTo; else goto c5pT9;
       u5pTo: // global
           call _c5pT7(R1) args: 0, res: 0, upd: 0;
       c5pT9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pT7() //  [R1]
         { info_tbl: [(c5pT7,
                       label: block_c5pT7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pT7: // global
           if (R1 & 7 == 1) goto c5pTf; else goto c5pTj;
       c5pTf: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pTj: // global
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 14];
           call _c5pSM() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.74255452 UTC

[section ""data" . Data.OldList.isSuffixOf_closure" {
     Data.OldList.isSuffixOf_closure:
         const Data.OldList.isSuffixOf_info;
 },
 Data.OldList.isSuffixOf_entry() //  [R2, R3, R4]
         { info_tbl: [(c5pU2,
                       label: Data.OldList.isSuffixOf_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pU2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5pU3; else goto c5pU4;
       c5pU3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.isSuffixOf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5pU4: // global
           I64[Sp - 32] = block_c5pTW_info;
           _s5pms::P64 = R3;
           R3 = R4;
           _s5pmr::P64 = R2;
           R2 = _s5pms::P64;
           P64[Sp - 24] = _s5pmr::P64;
           P64[Sp - 16] = _s5pms::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call Data.OldList.dropLengthMaybe_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5pTW() //  [R1]
         { info_tbl: [(c5pTW,
                       label: block_c5pTW_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pTW: // global
           if (R1 & 7 == 1) goto c5pTZ; else goto c5pU0;
       c5pTZ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pU0: // global
           I64[Sp] = block_c5pUa_info;
           R3 = P64[Sp + 24];
           R2 = P64[R1 + 6];
           call Data.OldList.dropLength_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5pUa() //  [R1]
         { info_tbl: [(c5pUa,
                       label: block_c5pUa_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pUa: // global
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Classes.$fEq[]_$c==_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.755969935 UTC

[section ""data" . Data.OldList.elem_by_closure" {
     Data.OldList.elem_by_closure:
         const Data.OldList.elem_by_info;
 },
 Data.OldList.elem_by_entry() //  [R2, R3, R4]
         { info_tbl: [(c5pUI,
                       label: Data.OldList.elem_by_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pUI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5pUJ; else goto u5pV3;
       c5pUJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.elem_by_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5pV3: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5pUy() args: 0, res: 0, upd: 0;
     }
 },
 _c5pUy() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pUy: // global
           I64[Sp - 8] = block_c5pUB_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5pV5; else goto c5pUC;
       u5pV5: // global
           call _c5pUB(R1) args: 0, res: 0, upd: 0;
       c5pUC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pUB() //  [R1]
         { info_tbl: [(c5pUB,
                       label: block_c5pUB_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pUB: // global
           if (R1 & 7 == 1) goto c5pUF; else goto c5pUG;
       c5pUF: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pUG: // global
           I64[Sp] = block_c5pUQ_info;
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 6];
           _s5pmC::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 24] = _s5pmC::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pUQ() //  [R1]
         { info_tbl: [(c5pUQ,
                       label: block_c5pUQ_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pUQ: // global
           if (R1 & 7 == 1) goto c5pUX; else goto c5pV1;
       c5pUX: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 24];
           Sp = Sp + 8;
           call _c5pUy() args: 0, res: 0, upd: 0;
       c5pV1: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.769886602 UTC

[section ""data" . Data.OldList.nubBy_closure" {
     Data.OldList.nubBy_closure:
         const Data.OldList.nubBy_info;
 },
 sat_s5pmO_entry() //  [R1]
         { info_tbl: [(c5pVX,
                       label: sat_s5pmO_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pVX: // global
           _s5pmO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5pVY; else goto c5pVZ;
       c5pVZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5pW1; else goto c5pW0;
       c5pW1: // global
           HpAlloc = 24;
           goto c5pVY;
       c5pVY: // global
           R1 = _s5pmO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5pW0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5pmO::P64;
           _s5pmG::P64 = P64[_s5pmO::P64 + 16];
           _s5pmI::P64 = P64[_s5pmO::P64 + 24];
           _s5pmK::P64 = P64[_s5pmO::P64 + 32];
           _s5pmL::P64 = P64[_s5pmO::P64 + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pmK::P64;
           P64[Hp] = _s5pmI::P64;
           R3 = Hp - 14;
           R2 = _s5pmL::P64;
           R1 = _s5pmG::P64;
           Sp = Sp - 16;
           call nubBy'_s5pmG_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 nubBy'_s5pmG_entry() //  [R1, R2, R3]
         { info_tbl: [(c5pW6,
                       label: nubBy'_s5pmG_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pW6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5pW7; else goto u5pWn;
       c5pW7: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u5pWn: // global
           P64[Sp - 24] = R1;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call _c5pVF() args: 0, res: 0, upd: 0;
     }
 },
 _c5pVF() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pVF: // global
           _s5pmE::P64 = P64[P64[Sp] + 6];
           I64[Sp - 8] = block_c5pVI_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5pmE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5pWp; else goto c5pVJ;
       u5pWp: // global
           call _c5pVI(R1) args: 0, res: 0, upd: 0;
       c5pVJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pVI() //  [R1]
         { info_tbl: [(c5pVI,
                       label: block_c5pVI_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pVI: // global
           if (R1 & 7 == 1) goto c5pW3; else goto c5pW4;
       c5pW3: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pW4: // global
           I64[Sp - 8] = block_c5pVO_info;
           R4 = P64[Sp + 24];
           _s5pmK::P64 = P64[R1 + 6];
           R3 = _s5pmK::P64;
           R2 = P64[Sp + 16];
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 16] = _s5pmK::P64;
           Sp = Sp - 8;
           call Data.OldList.elem_by_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5pVO() //  [R1]
         { info_tbl: [(c5pVO,
                       label: block_c5pVO_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pVO: // global
           _s5pmI::P64 = P64[Sp + 32];
           _s5pmL::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5pWe; else goto c5pWl;
       c5pWe: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5pWh; else goto c5pWg;
       c5pWh: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5pWg: // global
           I64[Hp - 64] = sat_s5pmO_info;
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = _s5pmI::P64;
           _s5pmK::P64 = P64[Sp + 24];
           P64[Hp - 32] = _s5pmK::P64;
           P64[Hp - 24] = _s5pmL::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pmK::P64;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pWl: // global
           P64[Sp + 24] = _s5pmL::P64;
           P64[Sp + 32] = _s5pmI::P64;
           Sp = Sp + 16;
           call _c5pVF() args: 0, res: 0, upd: 0;
     }
 },
 Data.OldList.nubBy_entry() //  [R2, R3]
         { info_tbl: [(c5pWs,
                       label: Data.OldList.nubBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pWs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5pWw; else goto c5pWv;
       c5pWw: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.nubBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5pWv: // global
           I64[Hp - 8] = nubBy'_s5pmG_info;
           P64[Hp] = R2;
           _s5pmF::P64 = R3;
           R3 = GHC.Types.[]_closure+1;
           R2 = _s5pmF::P64;
           R1 = Hp - 6;
           call nubBy'_s5pmG_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.788377637 UTC

[section ""data" . Data.OldList.nub_closure" {
     Data.OldList.nub_closure:
         const Data.OldList.nub_info;
 },
 sat_s5pmR_entry() //  [R1]
         { info_tbl: [(c5pXj,
                       label: sat_s5pmR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pXj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5pXk; else goto c5pXl;
       c5pXk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5pXl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.nub_entry() //  [R2, R3]
         { info_tbl: [(c5pXm,
                       label: Data.OldList.nub_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pXm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5pXq; else goto c5pXp;
       c5pXq: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.nub_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5pXp: // global
           I64[Hp - 16] = sat_s5pmR_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.nubBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.804705347 UTC

[section ""data" . Data.OldList.deleteBy_closure" {
     Data.OldList.deleteBy_closure:
         const Data.OldList.deleteBy_info;
 },
 sat_s5pmZ_entry() //  [R1]
         { info_tbl: [(c5pXT,
                       label: sat_s5pmZ_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pXT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5pXU; else goto c5pXV;
       c5pXU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5pXV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.deleteBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5pY0,
                       label: Data.OldList.deleteBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pY0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5pY1; else goto c5pY2;
       c5pY1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.deleteBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5pY2: // global
           I64[Sp - 24] = block_c5pXF_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5pYh; else goto c5pXG;
       u5pYh: // global
           call _c5pXF(R1) args: 0, res: 0, upd: 0;
       c5pXG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pXF() //  [R1]
         { info_tbl: [(c5pXF,
                       label: block_c5pXF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pXF: // global
           if (R1 & 7 == 1) goto c5pXX; else goto c5pXY;
       c5pXX: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pXY: // global
           I64[Sp - 16] = block_c5pXL_info;
           _s5pmW::P64 = P64[R1 + 6];
           R3 = _s5pmW::P64;
           R2 = P64[Sp + 16];
           _s5pmX::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s5pmX::P64;
           P64[Sp] = _s5pmW::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pXL() //  [R1]
         { info_tbl: [(c5pXL,
                       label: block_c5pXL_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pXL: // global
           _s5pmX::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5pY8; else goto c5pYf;
       c5pY8: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5pYb; else goto c5pYa;
       c5pYb: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5pYa: // global
           I64[Hp - 56] = sat_s5pmZ_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _s5pmX::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5pYf: // global
           R1 = _s5pmX::P64 & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.823920802 UTC

[section ""data" . Data.OldList.deleteFirstsBy_closure" {
     Data.OldList.deleteFirstsBy_closure:
         const Data.OldList.deleteFirstsBy_info;
 },
 Data.OldList.deleteFirstsBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5pYW,
                       label: Data.OldList.deleteFirstsBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pYW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5pYX; else goto c5pYY;
       c5pYX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.deleteFirstsBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5pYY: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call _c5pZ0() args: 0, res: 0, upd: 0;
     }
 },
 _c5pZ0() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pZ0: // global
           I64[Sp - 8] = block_c5pZ2_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5pZo; else goto c5pZ4;
       u5pZo: // global
           call _c5pZ2(R1) args: 0, res: 0, upd: 0;
       c5pZ4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5pZ2() //  [R1]
         { info_tbl: [(c5pZ2,
                       label: block_c5pZ2_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pZ2: // global
           _s5pn5::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5pZa; else goto c5pZf;
       c5pZa: // global
           R1 = _s5pn5::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5pZf: // global
           I64[Sp] = block_c5pZd_info;
           R4 = _s5pn5::P64;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 14];
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5pZd() //  [R1]
         { info_tbl: [(c5pZd,
                       label: block_c5pZd_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pZd: // global
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c5pZ0() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.83798774 UTC

[section ""data" . Data.OldList.delete_closure" {
     Data.OldList.delete_closure:
         const Data.OldList.delete_info;
 },
 sat_s5pnd_entry() //  [R1]
         { info_tbl: [(c5pZU,
                       label: sat_s5pnd_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pZU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5pZV; else goto c5pZW;
       c5pZV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5pZW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.delete_entry() //  [R2, R3, R4]
         { info_tbl: [(c5pZX,
                       label: Data.OldList.delete_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5pZX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5q01; else goto c5q00;
       c5q01: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.delete_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5q00: // global
           I64[Hp - 16] = sat_s5pnd_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.848112988 UTC

[section ""data" . Data.OldList.\\_closure" {
     Data.OldList.\\_closure:
         const Data.OldList.\\_info;
 },
 lvl12_s5pnh_entry() //  [R1]
         { info_tbl: [(c5q0k,
                       label: lvl12_s5pnh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q0k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5q0l; else goto c5q0m;
       c5q0l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5q0m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.\\_entry() //  [R2, R3, R4]
         { info_tbl: [(c5q0p,
                       label: Data.OldList.\\_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q0p: // global
           _s5png::P64 = R4;
           _s5pnf::P64 = R3;
           _s5pne::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c5q0q; else goto c5q0r;
       c5q0r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5q0t; else goto c5q0s;
       c5q0t: // global
           HpAlloc = 24;
           goto c5q0q;
       c5q0q: // global
           R4 = _s5png::P64;
           R3 = _s5pnf::P64;
           R2 = _s5pne::P64;
           R1 = Data.OldList.\\_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5q0s: // global
           I64[Hp - 16] = lvl12_s5pnh_info;
           P64[Hp] = _s5pne::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _s5png::P64;
           P64[Sp - 8] = _s5pnf::P64;
           Sp = Sp - 24;
           call _c5q0v() args: 0, res: 0, upd: 0;
     }
 },
 _c5q0v() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q0v: // global
           I64[Sp - 8] = block_c5q0x_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5q0T; else goto c5q0z;
       u5q0T: // global
           call _c5q0x(R1) args: 0, res: 0, upd: 0;
       c5q0z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5q0x() //  [R1]
         { info_tbl: [(c5q0x,
                       label: block_c5q0x_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q0x: // global
           _s5pnk::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5q0F; else goto c5q0K;
       c5q0F: // global
           R1 = _s5pnk::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5q0K: // global
           I64[Sp] = block_c5q0I_info;
           R4 = _s5pnk::P64;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 14];
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5q0I() //  [R1]
         { info_tbl: [(c5q0I,
                       label: block_c5q0I_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q0I: // global
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c5q0v() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.866858797 UTC

[section ""data" . Data.OldList.unionBy_closure" {
     Data.OldList.unionBy_closure:
         const Data.OldList.unionBy_info;
 },
 sat_s5pnA_entry() //  [R1]
         { info_tbl: [(c5q1y,
                       label: sat_s5pnA_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q1y: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5q1z; else goto c5q1A;
       c5q1z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5q1A: // global
           I64[Sp - 24] = block_c5q1w_info;
           R3 = P64[R1 + 32];
           _s5pnp::P64 = P64[R1 + 16];
           R2 = _s5pnp::P64;
           P64[Sp - 16] = _s5pnp::P64;
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 24;
           call Data.OldList.nubBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5q1w() //  [R1]
         { info_tbl: [(c5q1w,
                       label: block_c5q1w_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q1w: // global
           P64[Sp] = R1;
           P64[Sp + 16] = P64[Sp + 16];
           call _c5q1H() args: 0, res: 0, upd: 0;
     }
 },
 _c5q1H() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q1H: // global
           I64[Sp - 8] = block_c5q1J_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5q25; else goto c5q1L;
       u5q25: // global
           call _c5q1J(R1) args: 0, res: 0, upd: 0;
       c5q1L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5q1J() //  [R1]
         { info_tbl: [(c5q1J,
                       label: block_c5q1J_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q1J: // global
           _s5pnu::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5q1R; else goto c5q1W;
       c5q1R: // global
           R1 = _s5pnu::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5q1W: // global
           I64[Sp + 8] = block_c5q1U_info;
           R4 = _s5pnu::P64;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp + 8;
           call Data.OldList.deleteBy_entry(R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5q1U() //  [R1]
         { info_tbl: [(c5q1U,
                       label: block_c5q1U_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q1U: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp] = R1;
           call _c5q1H() args: 0, res: 0, upd: 0;
     }
 },
 Data.OldList.unionBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5q27,
                       label: Data.OldList.unionBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q27: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5q2b; else goto c5q2a;
       c5q2b: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.unionBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5q2a: // global
           I64[Hp - 32] = sat_s5pnA_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s5pnq::P64 = R3;
           R3 = Hp - 32;
           R2 = _s5pnq::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.8805594 UTC

[section ""data" . Data.OldList.union_closure" {
     Data.OldList.union_closure:
         const Data.OldList.union_info;
 },
 sat_s5pnE_entry() //  [R1]
         { info_tbl: [(c5q2Q,
                       label: sat_s5pnE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q2Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5q2R; else goto c5q2S;
       c5q2R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5q2S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.union_entry() //  [R2, R3, R4]
         { info_tbl: [(c5q2T,
                       label: Data.OldList.union_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q2T: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5q2X; else goto c5q2W;
       c5q2X: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.union_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5q2W: // global
           I64[Hp - 16] = sat_s5pnE_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.unionBy_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.888560869 UTC

[section ""data" . Data.OldList.intersectBy_closure" {
     Data.OldList.intersectBy_closure:
         const Data.OldList.intersectBy_info;
 },
 go_s5pnO_entry() //  [R1, R2]
         { info_tbl: [(c5q3A,
                       label: go_s5pnO_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q3A: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5q3B; else goto u5q42;
       c5q3B: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5q42: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c5q3q() args: 0, res: 0, upd: 0;
     }
 },
 _c5q3q() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q3q: // global
           I64[Sp - 16] = block_c5q3t_info;
           R1 = P64[Sp + 8];
           _s5pnO::P64 = P64[Sp];
           P64[Sp - 8] = P64[_s5pnO::P64 + 15];
           P64[Sp + 8] = P64[_s5pnO::P64 + 7];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5q44; else goto c5q3u;
       u5q44: // global
           call _c5q3t(R1) args: 0, res: 0, upd: 0;
       c5q3u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5q3t() //  [R1]
         { info_tbl: [(c5q3t,
                       label: block_c5q3t_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q3t: // global
           if (R1 & 7 == 1) goto c5q3x; else goto c5q3y;
       c5q3x: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5q3y: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5q3M; else goto c5q3L;
       c5q3M: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5q3L: // global
           _s5pnR::P64 = P64[R1 + 6];
           _s5pnS::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s5pnR::P64;
           I64[Sp] = block_c5q3J_info;
           R3 = P64[Sp + 8];
           R2 = Hp - 24;
           P64[Sp + 8] = _s5pnS::P64;
           P64[Sp + 24] = _s5pnR::P64;
           call GHC.List.any_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5q3J() //  [R1]
         { info_tbl: [(c5q3J,
                       label: block_c5q3J_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q3J: // global
           _s5pnS::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5q3S; else goto c5q3X;
       c5q3S: // global
           P64[Sp + 24] = _s5pnS::P64;
           Sp = Sp + 16;
           call _c5q3q() args: 0, res: 0, upd: 0;
       c5q3X: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5q40; else goto c5q3Z;
       c5q40: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5q3Z: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s5pnS::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.intersectBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5q4b,
                       label: Data.OldList.intersectBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q4b: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5q4c; else goto c5q4d;
       c5q4c: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.intersectBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5q4d: // global
           I64[Sp - 24] = block_c5q3c_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5q4v; else goto c5q3d;
       u5q4v: // global
           call _c5q3c(R1) args: 0, res: 0, upd: 0;
       c5q3d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5q3c() //  [R1]
         { info_tbl: [(c5q3c,
                       label: block_c5q3c_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q3c: // global
           if (R1 & 7 == 1) goto u5q4q; else goto c5q49;
       u5q4q: // global
           Sp = Sp + 24;
           call _c5q4k() args: 0, res: 0, upd: 0;
       c5q49: // global
           I64[Sp] = block_c5q3i_info;
           _s5pnI::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s5pnI::P64;
           if (R1 & 7 != 0) goto u5q4s; else goto c5q3j;
       u5q4s: // global
           call _c5q3i(R1) args: 0, res: 0, upd: 0;
       c5q3j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5q3i() //  [R1]
         { info_tbl: [(c5q3i,
                       label: block_c5q3i_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q3i: // global
           if (R1 & 7 == 1) goto u5q4r; else goto c5q4l;
       u5q4r: // global
           Sp = Sp + 24;
           call _c5q4k() args: 0, res: 0, upd: 0;
       c5q4l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5q4o; else goto c5q4n;
       c5q4o: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5q4n: // global
           I64[Hp - 16] = go_s5pnO_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R2 = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go_s5pnO_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5q4k() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q4k: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.907056787 UTC

[section ""data" . Data.OldList.intersect_closure" {
     Data.OldList.intersect_closure:
         const Data.OldList.intersect_info;
 },
 sat_s5pnZ_entry() //  [R1]
         { info_tbl: [(c5q5y,
                       label: sat_s5pnZ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q5y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5q5z; else goto c5q5A;
       c5q5z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5q5A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.intersect_entry() //  [R2, R3, R4]
         { info_tbl: [(c5q5B,
                       label: Data.OldList.intersect_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q5B: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5q5F; else goto c5q5E;
       c5q5F: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.intersect_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5q5E: // global
           I64[Hp - 16] = sat_s5pnZ_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.intersectBy_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.916742067 UTC

[section ""data" . Data.OldList.prependToAll_closure" {
     Data.OldList.prependToAll_closure:
         const Data.OldList.prependToAll_info;
 },
 sat_s5po5_entry() //  [R1]
         { info_tbl: [(c5q64,
                       label: sat_s5po5_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q64: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5q65; else goto c5q66;
       c5q65: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5q66: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.prependToAll_entry() //  [R2, R3]
         { info_tbl: [(c5q6b,
                       label: Data.OldList.prependToAll_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q6b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5q6c; else goto c5q6d;
       c5q6c: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.prependToAll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5q6d: // global
           I64[Sp - 16] = block_c5q5U_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5q6l; else goto c5q5V;
       u5q6l: // global
           call _c5q5U(R1) args: 0, res: 0, upd: 0;
       c5q5V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5q5U() //  [R1]
         { info_tbl: [(c5q5U,
                       label: block_c5q5U_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q5U: // global
           if (R1 & 7 == 1) goto c5q68; else goto c5q69;
       c5q68: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5q69: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5q6k; else goto c5q6j;
       c5q6k: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5q6j: // global
           _s5po3::P64 = P64[R1 + 6];
           _s5po4::P64 = P64[R1 + 14];
           I64[Hp - 72] = sat_s5po5_info;
           _s5po0::P64 = P64[Sp + 8];
           P64[Hp - 56] = _s5po0::P64;
           P64[Hp - 48] = _s5po4::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5po3::P64;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5po0::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.93125784 UTC

[section ""data" . Data.OldList.intersperse_closure" {
     Data.OldList.intersperse_closure:
         const Data.OldList.intersperse_info;
 },
 sat_s5poc_entry() //  [R1]
         { info_tbl: [(c5q6Z,
                       label: sat_s5poc_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q6Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5q70; else goto c5q71;
       c5q70: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5q71: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.intersperse_entry() //  [R2, R3]
         { info_tbl: [(c5q76,
                       label: Data.OldList.intersperse_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q76: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5q77; else goto c5q78;
       c5q77: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.intersperse_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5q78: // global
           I64[Sp - 16] = block_c5q6P_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5q7f; else goto c5q6Q;
       u5q7f: // global
           call _c5q6P(R1) args: 0, res: 0, upd: 0;
       c5q6Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5q6P() //  [R1]
         { info_tbl: [(c5q6P,
                       label: block_c5q6P_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q6P: // global
           if (R1 & 7 == 1) goto c5q73; else goto c5q74;
       c5q73: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5q74: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5q7e; else goto c5q7d;
       c5q7e: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5q7d: // global
           _s5poa::P64 = P64[R1 + 6];
           _s5pob::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s5poc_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s5pob::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5poa::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.941619939 UTC

[section ""data" . Data.OldList.intercalate1_closure" {
     Data.OldList.intercalate1_closure:
         const Data.OldList.intercalate1_info;
 },
 sat_s5poh_entry() //  [R1]
         { info_tbl: [(c5q7S,
                       label: sat_s5poh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q7S: // global
           R2 = P64[R1 + 16];
           call Data.OldList.intercalate1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.intercalate1_entry() //  [R2]
         { info_tbl: [(c5q7Z,
                       label: Data.OldList.intercalate1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q7Z: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5q80; else goto c5q81;
       c5q80: // global
           R2 = R2;
           R1 = Data.OldList.intercalate1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5q81: // global
           I64[Sp - 8] = block_c5q7I_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5q87; else goto c5q7J;
       u5q87: // global
           call _c5q7I(R1) args: 0, res: 0, upd: 0;
       c5q7J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5q7I() //  [R1]
         { info_tbl: [(c5q7I,
                       label: block_c5q7I_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q7I: // global
           if (R1 & 7 == 1) goto c5q7W; else goto c5q7X;
       c5q7W: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5q7X: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5q86; else goto c5q85;
       c5q86: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5q85: // global
           _s5pof::P64 = P64[R1 + 6];
           _s5pog::P64 = P64[R1 + 14];
           I64[Hp - 16] = sat_s5poh_info;
           P64[Hp] = _s5pog::P64;
           R3 = Hp - 16;
           R2 = _s5pof::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.950164808 UTC

[section ""data" . Data.OldList.intercalate_closure" {
     Data.OldList.intercalate_closure:
         const Data.OldList.intercalate_info;
 },
 sat_s5pon_entry() //  [R1]
         { info_tbl: [(c5q8E,
                       label: sat_s5pon_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q8E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5q8F; else goto c5q8G;
       c5q8F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5q8G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.intercalate_entry() //  [R2, R3]
         { info_tbl: [(c5q8L,
                       label: Data.OldList.intercalate_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q8L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5q8M; else goto c5q8N;
       c5q8M: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.intercalate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5q8N: // global
           I64[Sp - 16] = block_c5q8u_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5q8U; else goto c5q8v;
       u5q8U: // global
           call _c5q8u(R1) args: 0, res: 0, upd: 0;
       c5q8v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5q8u() //  [R1]
         { info_tbl: [(c5q8u,
                       label: block_c5q8u_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q8u: // global
           if (R1 & 7 == 1) goto c5q8I; else goto c5q8J;
       c5q8I: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5q8J: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5q8T; else goto c5q8S;
       c5q8T: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5q8S: // global
           _s5pol::P64 = P64[R1 + 6];
           _s5pom::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s5pon_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s5pom::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pol::P64;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call Data.OldList.intercalate1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.959891638 UTC

[section ""data" . poly_go_r5kSf_closure" {
     poly_go_r5kSf_closure:
         const poly_go_r5kSf_info;
 },
 sat_s5pow_entry() //  [R1]
         { info_tbl: [(c5q9C,
                       label: sat_s5pow_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q9C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5q9D; else goto c5q9E;
       c5q9D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5q9E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_r5kSf_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go_r5kSf_entry() //  [R2]
         { info_tbl: [(c5q9J,
                       label: poly_go_r5kSf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q9J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5q9K; else goto u5q9Z;
       c5q9K: // global
           R2 = R2;
           R1 = poly_go_r5kSf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5q9Z: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5q9j() args: 0, res: 0, upd: 0;
     }
 },
 _c5q9j() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q9j: // global
           _s5pop::P64 = P64[Sp];
           I64[Sp] = block_c5q9m_info;
           R1 = _s5pop::P64;
           if (R1 & 7 != 0) goto u5qa1; else goto c5q9n;
       u5qa1: // global
           call _c5q9m(R1) args: 0, res: 0, upd: 0;
       c5q9n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5q9m() //  [R1]
         { info_tbl: [(c5q9m,
                       label: block_c5q9m_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q9m: // global
           if (R1 & 7 == 1) goto c5q9G; else goto c5q9H;
       c5q9G: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5q9H: // global
           I64[Sp - 8] = block_c5q9s_info;
           _s5pos::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5pos::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qa2; else goto c5q9t;
       u5qa2: // global
           call _c5q9s(R1) args: 0, res: 0, upd: 0;
       c5q9t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5q9s() //  [R1]
         { info_tbl: [(c5q9s,
                       label: block_c5q9s_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5q9s: // global
           _s5pos::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5q9S; else goto c5q9U;
       c5q9S: // global
           P64[Sp + 8] = _s5pos::P64;
           Sp = Sp + 8;
           call _c5q9j() args: 0, res: 0, upd: 0;
       c5q9U: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5q9X; else goto c5q9W;
       c5q9X: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5q9W: // global
           _s5pov::P64 = P64[R1 + 14];
           I64[Hp - 40] = sat_s5pow_info;
           P64[Hp - 24] = _s5pos::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pov::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.976475388 UTC

[section ""data" . poly_go1_r5kSg_closure" {
     poly_go1_r5kSg_closure:
         const poly_go1_r5kSg_info;
 },
 sat_s5poE_entry() //  [R1]
         { info_tbl: [(c5qaV,
                       label: sat_s5poE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qaV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qaW; else goto c5qaX;
       c5qaW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qaX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_r5kSg_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go1_r5kSg_entry() //  [R2]
         { info_tbl: [(c5qb2,
                       label: poly_go1_r5kSg_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qb2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qb3; else goto u5qbi;
       c5qb3: // global
           R2 = R2;
           R1 = poly_go1_r5kSg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5qbi: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5qaC() args: 0, res: 0, upd: 0;
     }
 },
 _c5qaC() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qaC: // global
           _s5pox::P64 = P64[Sp];
           I64[Sp] = block_c5qaF_info;
           R1 = _s5pox::P64;
           if (R1 & 7 != 0) goto u5qbk; else goto c5qaG;
       u5qbk: // global
           call _c5qaF(R1) args: 0, res: 0, upd: 0;
       c5qaG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qaF() //  [R1]
         { info_tbl: [(c5qaF,
                       label: block_c5qaF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qaF: // global
           if (R1 & 7 == 1) goto c5qaZ; else goto c5qb0;
       c5qaZ: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5qb0: // global
           I64[Sp - 8] = block_c5qaL_info;
           _s5poA::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5poA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qbl; else goto c5qaM;
       u5qbl: // global
           call _c5qaL(R1) args: 0, res: 0, upd: 0;
       c5qaM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qaL() //  [R1]
         { info_tbl: [(c5qaL,
                       label: block_c5qaL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qaL: // global
           _s5poA::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5qbb; else goto c5qbd;
       c5qbb: // global
           P64[Sp + 8] = _s5poA::P64;
           Sp = Sp + 8;
           call _c5qaC() args: 0, res: 0, upd: 0;
       c5qbd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5qbg; else goto c5qbf;
       c5qbg: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qbf: // global
           _s5poC::P64 = P64[R1 + 6];
           I64[Hp - 40] = sat_s5poE_info;
           P64[Hp - 24] = _s5poA::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5poC::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:25.993531032 UTC

[section ""data" . Data.OldList.transpose_closure" {
     Data.OldList.transpose_closure:
         const Data.OldList.transpose_info;
 },
 sat_s5poO_entry() //  [R1]
         { info_tbl: [(c5qci,
                       label: sat_s5poO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qci: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qcj; else goto c5qck;
       c5qcj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qck: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_r5kSf_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5poQ_entry() //  [R1]
         { info_tbl: [(c5qcm,
                       label: sat_s5poQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qcm: // global
           _s5poQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5qcn; else goto c5qco;
       c5qco: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5qcq; else goto c5qcp;
       c5qcq: // global
           HpAlloc = 48;
           goto c5qcn;
       c5qcn: // global
           R1 = _s5poQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qcp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5poQ::P64;
           _s5poI::P64 = P64[_s5poQ::P64 + 16];
           _s5poL::P64 = P64[_s5poQ::P64 + 24];
           I64[Hp - 40] = sat_s5poO_info;
           P64[Hp - 24] = _s5poI::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5poL::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call Data.OldList.transpose_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5poM_entry() //  [R1]
         { info_tbl: [(c5qcv,
                       label: sat_s5poM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qcv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qcw; else goto c5qcx;
       c5qcw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qcx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_r5kSg_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.transpose_entry() //  [R2]
         { info_tbl: [(c5qcC,
                       label: Data.OldList.transpose_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qcC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qcD; else goto u5qcT;
       c5qcD: // global
           R2 = R2;
           R1 = Data.OldList.transpose_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5qcT: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5qbV() args: 0, res: 0, upd: 0;
     }
 },
 _c5qbV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qbV: // global
           _s5poF::P64 = P64[Sp];
           I64[Sp] = block_c5qbY_info;
           R1 = _s5poF::P64;
           if (R1 & 7 != 0) goto u5qcV; else goto c5qbZ;
       u5qcV: // global
           call _c5qbY(R1) args: 0, res: 0, upd: 0;
       c5qbZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qbY() //  [R1]
         { info_tbl: [(c5qbY,
                       label: block_c5qbY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qbY: // global
           if (R1 & 7 == 1) goto c5qcz; else goto c5qcA;
       c5qcz: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5qcA: // global
           I64[Sp - 8] = block_c5qc4_info;
           _s5poI::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5poI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qcW; else goto c5qc5;
       u5qcW: // global
           call _c5qc4(R1) args: 0, res: 0, upd: 0;
       c5qc5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qc4() //  [R1]
         { info_tbl: [(c5qc4,
                       label: block_c5qc4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qc4: // global
           _s5poI::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5qcL; else goto c5qcO;
       c5qcL: // global
           P64[Sp + 8] = _s5poI::P64;
           Sp = Sp + 8;
           call _c5qbV() args: 0, res: 0, upd: 0;
       c5qcO: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c5qcR; else goto c5qcQ;
       c5qcR: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qcQ: // global
           _s5poK::P64 = P64[R1 + 6];
           _s5poL::P64 = P64[R1 + 14];
           I64[Hp - 96] = sat_s5poQ_info;
           P64[Hp - 80] = _s5poI::P64;
           P64[Hp - 72] = _s5poL::P64;
           I64[Hp - 64] = sat_s5poM_info;
           P64[Hp - 48] = _s5poI::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5poK::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.017658041 UTC

[section ""data" . Data.OldList.select_closure" {
     Data.OldList.select_closure:
         const Data.OldList.select_info;
 },
 Data.OldList.select_entry() //  [R2, R3, R4]
         { info_tbl: [(c5qdW,
                       label: Data.OldList.select_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qdW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5qdX; else goto c5qdY;
       c5qdX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.select_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qdY: // global
           I64[Sp - 24] = block_c5qdQ_info;
           _s5poR::P64 = R2;
           R2 = R3;
           R1 = _s5poR::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qdQ() //  [R1]
         { info_tbl: [(c5qdQ,
                       label: block_c5qdQ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qdQ: // global
           _s5poS::P64 = P64[Sp + 8];
           _s5poT::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5qdT; else goto c5qdU;
       c5qdT: // global
           Hp = Hp + 96;
           _s5poU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5qeg; else goto c5qe6;
       c5qe6: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _s5poT::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5poS::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _s5poT::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5qdU: // global
           Hp = Hp + 96;
           _s5poU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5qeg; else goto c5qef;
       c5qeg: // global
           HpAlloc = 96;
           R1 = _s5poU::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qef: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _s5poT::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _s5poT::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5poS::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.031236789 UTC

[section ""data" . Data.OldList.partition_closure" {
     Data.OldList.partition_closure:
         const Data.OldList.partition_info;
 },
 w1_s5ppk_entry() //  [R1]
         { info_tbl: [(c5qf4,
                       label: w1_s5ppk_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qf4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5qf5; else goto c5qf6;
       c5qf5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qf6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5qf1_info;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgo_s5ppf_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5qf1() //  [R1, R2]
         { info_tbl: [(c5qf1,
                       label: block_c5qf1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qf1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qf9; else goto c5qf8;
       c5qf9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5qf8: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $wgo_s5ppf_entry() //  [R1, R2]
         { info_tbl: [(c5qfe,
                       label: $wgo_s5ppf_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qfe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5qff; else goto c5qfg;
       c5qff: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5qfg: // global
           I64[Sp - 24] = block_c5qeR_info;
           _s5ppf::P64 = R1;
           _s5ppd::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s5ppd::P64;
           P64[Sp - 8] = _s5ppf::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5qfI; else goto c5qeS;
       u5qfI: // global
           call _c5qeR(R1) args: 0, res: 0, upd: 0;
       c5qeS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qeR() //  [R1]
         { info_tbl: [(c5qeR,
                       label: block_c5qeR_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qeR: // global
           if (R1 & 7 == 1) goto c5qfb; else goto c5qfc;
       c5qfb: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5qfc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5qfm; else goto c5qfl;
       c5qfm: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qfl: // global
           _s5ppi::P64 = P64[R1 + 6];
           _s5ppj::P64 = P64[R1 + 14];
           I64[Hp - 24] = w1_s5ppk_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s5ppj::P64;
           I64[Sp] = block_c5qfj_info;
           R2 = _s5ppi::P64;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5ppi::P64;
           P64[Sp + 16] = Hp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qfj() //  [R1]
         { info_tbl: [(c5qfj,
                       label: block_c5qfj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qfj: // global
           _c5qeX::P64 = P64[Sp + 16];
           _s5ppi::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5qfu; else goto c5qfD;
       c5qfu: // global
           Hp = Hp + 72;
           _s5ppo::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5qfG; else goto c5qfw;
       c5qfw: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5qeX::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5ppi::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5qeX::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5qfD: // global
           Hp = Hp + 72;
           _s5ppo::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5qfG; else goto c5qfF;
       c5qfG: // global
           HpAlloc = 72;
           R1 = _s5ppo::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qfF: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5qeX::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5qeX::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5ppi::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.partition_entry() //  [R2, R3]
         { info_tbl: [(c5qfM,
                       label: Data.OldList.partition_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qfM: // global
           _s5ppe::P64 = R3;
           _s5ppd::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5qfN; else goto c5qfO;
       c5qfO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5qfQ; else goto c5qfP;
       c5qfQ: // global
           HpAlloc = 16;
           goto c5qfN;
       c5qfN: // global
           R3 = _s5ppe::P64;
           R2 = _s5ppd::P64;
           R1 = Data.OldList.partition_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qfP: // global
           I64[Hp - 8] = $wgo_s5ppf_info;
           P64[Hp] = _s5ppd::P64;
           I64[Sp - 8] = block_c5qfJ_info;
           R2 = _s5ppe::P64;
           R1 = Hp - 7;
           Sp = Sp - 8;
           call $wgo_s5ppf_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qfJ() //  [R1, R2]
         { info_tbl: [(c5qfJ,
                       label: block_c5qfJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qfJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qfT; else goto c5qfS;
       c5qfT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5qfS: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.066627262 UTC

[section ""data" . Data.OldList.pairWithNil_closure" {
     Data.OldList.pairWithNil_closure:
         const Data.OldList.pairWithNil_info;
 },
 Data.OldList.pairWithNil_entry() //  [R2]
         { info_tbl: [(c5qgT,
                       label: Data.OldList.pairWithNil_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qgT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qgX; else goto c5qgW;
       c5qgX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.OldList.pairWithNil_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5qgW: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.073445651 UTC

[section ""data" . Data.OldList.mapAccumLF_closure" {
     Data.OldList.mapAccumLF_closure:
         const Data.OldList.mapAccumLF_info;
 },
 ds1_s5ppQ_entry() //  [R1]
         { info_tbl: [(c5qhg,
                       label: ds1_s5ppQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qhg: // global
           _s5ppQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5qhh; else goto c5qhi;
       c5qhi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qhk; else goto c5qhj;
       c5qhk: // global
           HpAlloc = 24;
           goto c5qhh;
       c5qhh: // global
           R1 = _s5ppQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qhj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5ppQ::P64;
           _s5ppN::P64 = P64[_s5ppQ::P64 + 16];
           _s5ppP::P64 = P64[_s5ppQ::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s5ppP::P64;
           R2 = Hp - 16;
           R1 = _s5ppN::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.mapAccumLF_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5qhq,
                       label: Data.OldList.mapAccumLF_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qhq: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto c5qhu; else goto c5qht;
       c5qhu: // global
           HpAlloc = 192;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.mapAccumLF_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qht: // global
           I64[Hp - 184] = stg_ap_3_upd_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R5;
           P64[Hp - 152] = R3;
           I64[Hp - 144] = ds1_s5ppQ_info;
           P64[Hp - 128] = R4;
           _c5qha::P64 = Hp - 184;
           P64[Hp - 120] = _c5qha::P64;
           I64[Hp - 112] = stg_sel_1_upd_info;
           _c5qhb::P64 = Hp - 144;
           P64[Hp - 96] = _c5qhb::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5qha::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5qhb::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.08565857 UTC

[section ""data" . Data.OldList.$wmapAccumL_closure" {
     Data.OldList.$wmapAccumL_closure:
         const Data.OldList.$wmapAccumL_info;
 },
 ds1_s5pqf_entry() //  [R1]
         { info_tbl: [(c5qia,
                       label: ds1_s5pqf_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qia: // global
           _s5pqf::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5qib; else goto c5qic;
       c5qic: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qie; else goto c5qid;
       c5qie: // global
           HpAlloc = 24;
           goto c5qib;
       c5qib: // global
           R1 = _s5pqf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qid: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5pqf::P64;
           _s5pq8::P64 = P64[_s5pqf::P64 + 16];
           _s5pqd::P64 = P64[_s5pqf::P64 + 24];
           _s5pqe::P64 = P64[_s5pqf::P64 + 32];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s5pqe::P64;
           I64[Sp - 24] = block_c5qi7_info;
           R4 = _s5pqd::P64;
           R3 = Hp - 16;
           R2 = _s5pq8::P64;
           Sp = Sp - 24;
           call Data.OldList.$wmapAccumL_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5qi7() //  [R1, R2]
         { info_tbl: [(c5qi7,
                       label: block_c5qi7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qi7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qih; else goto c5qig;
       c5qih: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5qig: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wmapAccumL_entry() //  [R2, R3, R4]
         { info_tbl: [(c5qim,
                       label: Data.OldList.$wmapAccumL_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qim: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5qin; else goto c5qio;
       c5qin: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$wmapAccumL_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qio: // global
           I64[Sp - 24] = block_c5qhV_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5qiy; else goto c5qhW;
       u5qiy: // global
           call _c5qhV(R1) args: 0, res: 0, upd: 0;
       c5qhW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qhV() //  [R1]
         { info_tbl: [(c5qhV,
                       label: block_c5qhV_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qhV: // global
           _s5pq9::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5qij; else goto c5qik;
       c5qij: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = _s5pq9::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5qik: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c5qix; else goto c5qiw;
       c5qix: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qiw: // global
           _s5pqc::P64 = P64[R1 + 6];
           _s5pqd::P64 = P64[R1 + 14];
           I64[Hp - 168] = stg_ap_3_upd_info;
           _s5pq8::P64 = P64[Sp + 8];
           P64[Hp - 152] = _s5pq8::P64;
           P64[Hp - 144] = _s5pq9::P64;
           P64[Hp - 136] = _s5pqc::P64;
           I64[Hp - 128] = ds1_s5pqf_info;
           P64[Hp - 112] = _s5pq8::P64;
           P64[Hp - 104] = _s5pqd::P64;
           _c5qi1::P64 = Hp - 168;
           P64[Hp - 96] = _c5qi1::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           _c5qi2::P64 = Hp - 128;
           P64[Hp - 72] = _c5qi2::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _c5qi1::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5qi2::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.104353083 UTC

[section ""data" . Data.OldList.mapAccumL_closure" {
     Data.OldList.mapAccumL_closure:
         const Data.OldList.mapAccumL_info;
 },
 Data.OldList.mapAccumL_entry() //  [R2, R3, R4]
         { info_tbl: [(c5qjf,
                       label: Data.OldList.mapAccumL_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qjf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5qjg; else goto c5qjh;
       c5qjg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.mapAccumL_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qjh: // global
           I64[Sp - 8] = block_c5qjc_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wmapAccumL_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5qjc() //  [R1, R2]
         { info_tbl: [(c5qjc,
                       label: block_c5qjc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qjc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qjk; else goto c5qjj;
       c5qjk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5qjj: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.114710055 UTC

[section ""data" . Data.OldList.$wmapAccumR_closure" {
     Data.OldList.$wmapAccumR_closure:
         const Data.OldList.$wmapAccumR_info;
 },
 ds_s5pqM_entry() //  [R1]
         { info_tbl: [(c5qjN,
                       label: ds_s5pqM_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qjN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5qjO; else goto c5qjP;
       c5qjO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qjP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5qjK_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wmapAccumR_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5qjK() //  [R1, R2]
         { info_tbl: [(c5qjK,
                       label: block_c5qjK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qjK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qjS; else goto c5qjR;
       c5qjS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5qjR: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds1_s5pqQ_entry() //  [R1]
         { info_tbl: [(c5qjY,
                       label: ds1_s5pqQ_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qjY: // global
           _s5pqQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5qjZ; else goto c5qk0;
       c5qk0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qk2; else goto c5qk1;
       c5qk2: // global
           HpAlloc = 24;
           goto c5qjZ;
       c5qjZ: // global
           R1 = _s5pqQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qk1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5pqQ::P64;
           _s5pqG::P64 = P64[_s5pqQ::P64 + 16];
           _s5pqK::P64 = P64[_s5pqQ::P64 + 24];
           _s5pqM::P64 = P64[_s5pqQ::P64 + 32];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s5pqM::P64;
           R3 = _s5pqK::P64;
           R2 = Hp - 16;
           R1 = _s5pqG::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wmapAccumR_entry() //  [R2, R3, R4]
         { info_tbl: [(c5qk7,
                       label: Data.OldList.$wmapAccumR_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qk7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5qk8; else goto c5qk9;
       c5qk8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$wmapAccumR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qk9: // global
           I64[Sp - 24] = block_c5qjA_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5qkj; else goto c5qjB;
       u5qkj: // global
           call _c5qjA(R1) args: 0, res: 0, upd: 0;
       c5qjB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qjA() //  [R1]
         { info_tbl: [(c5qjA,
                       label: block_c5qjA_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qjA: // global
           _s5pqH::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5qk4; else goto c5qk5;
       c5qk4: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = _s5pqH::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5qk5: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c5qki; else goto c5qkh;
       c5qki: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qkh: // global
           _s5pqK::P64 = P64[R1 + 6];
           _s5pqL::P64 = P64[R1 + 14];
           I64[Hp - 168] = ds_s5pqM_info;
           _s5pqG::P64 = P64[Sp + 8];
           P64[Hp - 152] = _s5pqG::P64;
           P64[Hp - 144] = _s5pqH::P64;
           P64[Hp - 136] = _s5pqL::P64;
           I64[Hp - 128] = ds1_s5pqQ_info;
           P64[Hp - 112] = _s5pqG::P64;
           P64[Hp - 104] = _s5pqK::P64;
           _c5qjG::P64 = Hp - 168;
           P64[Hp - 96] = _c5qjG::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5qjG::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c5qjT::P64 = Hp - 128;
           P64[Hp - 48] = _c5qjT::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5qjT::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.140061707 UTC

[section ""data" . Data.OldList.mapAccumR_closure" {
     Data.OldList.mapAccumR_closure:
         const Data.OldList.mapAccumR_info;
 },
 Data.OldList.mapAccumR_entry() //  [R2, R3, R4]
         { info_tbl: [(c5ql5,
                       label: Data.OldList.mapAccumR_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ql5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5ql6; else goto c5ql7;
       c5ql6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.mapAccumR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5ql7: // global
           I64[Sp - 8] = block_c5ql2_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wmapAccumR_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5ql2() //  [R1, R2]
         { info_tbl: [(c5ql2,
                       label: block_c5ql2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ql2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qla; else goto c5ql9;
       c5qla: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5ql9: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.150881175 UTC

[section ""data" . Data.OldList.insertBy_closure" {
     Data.OldList.insertBy_closure:
         const Data.OldList.insertBy_info;
 },
 Data.OldList.insertBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5qlt,
                       label: Data.OldList.insertBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qlt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5qlu; else goto c5qlv;
       c5qlu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.insertBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qlv: // global
           I64[Sp - 8] = block_c5qlq_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$winsertBy_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5qlq() //  [R1, R2]
         { info_tbl: [(c5qlq,
                       label: block_c5qlq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qlq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qly; else goto c5qlx;
       c5qly: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5qlx: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Data.OldList.$winsertBy_closure" {
     Data.OldList.$winsertBy_closure:
         const Data.OldList.$winsertBy_info;
 },
 sat_s5prr_entry() //  [R1]
         { info_tbl: [(c5qlS,
                       label: sat_s5prr_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qlS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qlT; else goto c5qlU;
       c5qlT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qlU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.insertBy_entry(R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$winsertBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c5qlZ,
                       label: Data.OldList.$winsertBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qlZ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5qm0; else goto c5qm1;
       c5qm0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$winsertBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qm1: // global
           I64[Sp - 24] = block_c5qlD_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5qme; else goto c5qlE;
       u5qme: // global
           call _c5qlD(R1) args: 0, res: 0, upd: 0;
       c5qlE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qlD() //  [R1]
         { info_tbl: [(c5qlD,
                       label: block_c5qlD_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qlD: // global
           _s5prl::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5qlW; else goto c5qlX;
       c5qlW: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = _s5prl::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5qlX: // global
           I64[Sp - 24] = block_c5qlJ_info;
           _s5pro::P64 = P64[R1 + 6];
           R3 = _s5pro::P64;
           R2 = _s5prl::P64;
           _s5prn::P64 = R1;
           _s5prp::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp - 16] = _s5pro::P64;
           P64[Sp - 8] = _s5prp::P64;
           P64[Sp] = _s5prn::P64;
           Sp = Sp - 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qlJ() //  [R1]
         { info_tbl: [(c5qlJ,
                       label: block_c5qlJ_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qlJ: // global
           _s5prl::P64 = P64[Sp + 40];
           if (R1 & 7 == 3) goto c5qm9; else goto c5qm8;
       c5qm9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5qmc; else goto c5qmb;
       c5qmc: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qmb: // global
           I64[Hp - 32] = sat_s5prr_info;
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = _s5prl::P64;
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 32;
           R1 = P64[Sp + 8];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5qm8: // global
           R2 = P64[Sp + 24];
           R1 = _s5prl::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.175667651 UTC

[section ""data" . Data.OldList.insert_closure" {
     Data.OldList.insert_closure:
         const Data.OldList.insert_info;
 },
 sat_s5prv_entry() //  [R1]
         { info_tbl: [(c5qn2,
                       label: sat_s5prv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qn2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qn3; else goto c5qn4;
       c5qn3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qn4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.insert_entry() //  [R2, R3, R4]
         { info_tbl: [(c5qn8,
                       label: Data.OldList.insert_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qn8: // global
           _s5pru::P64 = R4;
           _s5prt::P64 = R3;
           _s5prs::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5qn9; else goto c5qna;
       c5qna: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qnc; else goto c5qnb;
       c5qnc: // global
           HpAlloc = 24;
           goto c5qn9;
       c5qn9: // global
           R4 = _s5pru::P64;
           R3 = _s5prt::P64;
           R2 = _s5prs::P64;
           R1 = Data.OldList.insert_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qnb: // global
           I64[Hp - 16] = sat_s5prv_info;
           P64[Hp] = _s5prs::P64;
           I64[Sp - 8] = block_c5qn5_info;
           R4 = _s5pru::P64;
           R3 = _s5prt::P64;
           R2 = Hp - 16;
           Sp = Sp - 8;
           call Data.OldList.$winsertBy_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5qn5() //  [R1, R2]
         { info_tbl: [(c5qn5,
                       label: block_c5qn5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qn5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qnf; else goto c5qne;
       c5qnf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5qne: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.187930764 UTC

[section ""cstring" . lvl_r5kSh_bytes" {
     lvl_r5kSh_bytes:
         I8[] [76,105,115,116,46,109,97,120,105,109,117,109,66,121,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.190929465 UTC

[section ""data" . Data.OldList.maximumBy1_closure" {
     Data.OldList.maximumBy1_closure:
         const Data.OldList.maximumBy1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.OldList.maximumBy1_entry() //  [R1]
         { info_tbl: [(c5qnG,
                       label: Data.OldList.maximumBy1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qnG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5qnH; else goto c5qnI;
       c5qnH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qnI: // global
           (_c5qnB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5qnB::I64 == 0) goto c5qnD; else goto c5qnC;
       c5qnD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5qnC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5qnB::I64;
           I64[Sp - 24] = block_c5qnE_info;
           R2 = lvl_r5kSh_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5qnE() //  [R1]
         { info_tbl: [(c5qnE,
                       label: block_c5qnE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qnE: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.203733279 UTC

[section ""data" . Data.OldList.maximumBy_closure" {
     Data.OldList.maximumBy_closure:
         const Data.OldList.maximumBy_info;
         const 0;
 },
 sat_s5prM_entry() //  [R1]
         { info_tbl: [(c5qou,
                       label: sat_s5prM_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qou: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5qov; else goto c5qow;
       c5qov: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qow: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c5qoo_info;
           _s5prJ::P64 = P64[R1 + 32];
           R3 = _s5prJ::P64;
           _s5prH::P64 = P64[R1 + 24];
           R2 = _s5prH::P64;
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s5prH::P64;
           P64[Sp - 24] = _s5prJ::P64;
           Sp = Sp - 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5qoo() //  [R1]
         { info_tbl: [(c5qoo,
                       label: block_c5qoo_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qoo: // global
           if (R1 & 7 == 3) goto c5qos; else goto c5qor;
       c5qos: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c5qor: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.maximumBy_entry() //  [R2, R3]
         { info_tbl: [(c5qoH,
                       label: Data.OldList.maximumBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qoH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5qoI; else goto c5qoJ;
       c5qoI: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.maximumBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qoJ: // global
           I64[Sp - 16] = block_c5qo3_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5qp2; else goto c5qo4;
       u5qp2: // global
           call _c5qo3(R1) args: 0, res: 0, upd: 0;
       c5qo4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qo3() //  [R1]
         { info_tbl: [(c5qo3,
                       label: block_c5qo3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qo3: // global
           if (R1 & 7 == 1) goto c5qoE; else goto c5qoF;
       c5qoE: // global
           R1 = Data.OldList.maximumBy1_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5qoF: // global
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = P64[R1 + 14];
           Sp = Sp - 8;
           call _c5qoc() args: 0, res: 0, upd: 0;
     }
 },
 _c5qoc() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qoc: // global
           I64[Sp - 8] = block_c5qoe_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qp0; else goto c5qof;
       u5qp0: // global
           call _c5qoe(R1) args: 0, res: 0, upd: 0;
       c5qof: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qoe() //  [R1]
         { info_tbl: [(c5qoe,
                       label: block_c5qoe_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qoe: // global
           _s5prH::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5qoR; else goto c5qoS;
       c5qoR: // global
           R1 = _s5prH::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5qoS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5qoV; else goto c5qoU;
       c5qoV: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qoU: // global
           _s5prJ::P64 = P64[R1 + 6];
           _s5prK::P64 = P64[R1 + 14];
           I64[Hp - 32] = sat_s5prM_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s5prH::P64;
           P64[Hp] = _s5prJ::P64;
           P64[Sp + 16] = _s5prK::P64;
           P64[Sp + 8] = Hp - 32;
           Sp = Sp + 8;
           call _c5qoc() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.217860626 UTC

[section ""cstring" . lvl1_r5kSi_bytes" {
     lvl1_r5kSi_bytes:
         I8[] [76,105,115,116,46,109,105,110,105,109,117,109,66,121,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.219966428 UTC

[section ""data" . Data.OldList.minimumBy1_closure" {
     Data.OldList.minimumBy1_closure:
         const Data.OldList.minimumBy1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.OldList.minimumBy1_entry() //  [R1]
         { info_tbl: [(c5qpN,
                       label: Data.OldList.minimumBy1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qpN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5qpO; else goto c5qpP;
       c5qpO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qpP: // global
           (_c5qpI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5qpI::I64 == 0) goto c5qpK; else goto c5qpJ;
       c5qpK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5qpJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5qpI::I64;
           I64[Sp - 24] = block_c5qpL_info;
           R2 = lvl1_r5kSi_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5qpL() //  [R1]
         { info_tbl: [(c5qpL,
                       label: block_c5qpL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qpL: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.226752728 UTC

[section ""data" . Data.OldList.minimumBy_closure" {
     Data.OldList.minimumBy_closure:
         const Data.OldList.minimumBy_info;
         const 0;
 },
 sat_s5ps0_entry() //  [R1]
         { info_tbl: [(c5qqA,
                       label: sat_s5ps0_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qqA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5qqB; else goto c5qqC;
       c5qqB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qqC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c5qqu_info;
           _s5prX::P64 = P64[R1 + 32];
           R3 = _s5prX::P64;
           _s5prV::P64 = P64[R1 + 24];
           R2 = _s5prV::P64;
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s5prV::P64;
           P64[Sp - 24] = _s5prX::P64;
           Sp = Sp - 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5qqu() //  [R1]
         { info_tbl: [(c5qqu,
                       label: block_c5qqu_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qqu: // global
           if (R1 & 7 == 3) goto c5qqy; else goto c5qqx;
       c5qqy: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c5qqx: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.minimumBy_entry() //  [R2, R3]
         { info_tbl: [(c5qqN,
                       label: Data.OldList.minimumBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qqN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5qqO; else goto c5qqP;
       c5qqO: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.minimumBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qqP: // global
           I64[Sp - 16] = block_c5qq9_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5qr8; else goto c5qqa;
       u5qr8: // global
           call _c5qq9(R1) args: 0, res: 0, upd: 0;
       c5qqa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qq9() //  [R1]
         { info_tbl: [(c5qq9,
                       label: block_c5qq9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qq9: // global
           if (R1 & 7 == 1) goto c5qqK; else goto c5qqL;
       c5qqK: // global
           R1 = Data.OldList.minimumBy1_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5qqL: // global
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp] = P64[R1 + 14];
           Sp = Sp - 8;
           call _c5qqi() args: 0, res: 0, upd: 0;
     }
 },
 _c5qqi() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qqi: // global
           I64[Sp - 8] = block_c5qqk_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qr6; else goto c5qql;
       u5qr6: // global
           call _c5qqk(R1) args: 0, res: 0, upd: 0;
       c5qql: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qqk() //  [R1]
         { info_tbl: [(c5qqk,
                       label: block_c5qqk_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qqk: // global
           _s5prV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5qqX; else goto c5qqY;
       c5qqX: // global
           R1 = _s5prV::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5qqY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5qr1; else goto c5qr0;
       c5qr1: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qr0: // global
           _s5prX::P64 = P64[R1 + 6];
           _s5prY::P64 = P64[R1 + 14];
           I64[Hp - 32] = sat_s5ps0_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s5prV::P64;
           P64[Hp] = _s5prX::P64;
           P64[Sp + 16] = _s5prY::P64;
           P64[Sp + 8] = Hp - 32;
           Sp = Sp + 8;
           call _c5qqi() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.241023115 UTC

[section ""data" . sat_s5ps1_closure" {
     sat_s5ps1_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.242756619 UTC

[section ""data" . sat_s5ps2_closure" {
     sat_s5ps2_closure:
         const :_con_info;
         const sat_s5ps1_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.244781707 UTC

[section ""data" . Data.OldList.genericLength2_closure" {
     Data.OldList.genericLength2_closure:
         const Data.OldList.genericLength2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.OldList.genericLength2_entry() //  [R1]
         { info_tbl: [(c5qrS,
                       label: Data.OldList.genericLength2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qrS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qrT; else goto c5qrU;
       c5qrT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qrU: // global
           (_c5qrP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5qrP::I64 == 0) goto c5qrR; else goto c5qrQ;
       c5qrR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5qrQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5qrP::I64;
           R3 = sat_s5ps2_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.249301062 UTC

[section ""data" . Data.OldList.genericLength1_closure" {
     Data.OldList.genericLength1_closure:
         const Data.OldList.genericLength1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.OldList.genericLength1_entry() //  [R1]
         { info_tbl: [(c5qsa,
                       label: Data.OldList.genericLength1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qsa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qsb; else goto c5qsc;
       c5qsb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qsc: // global
           (_c5qs7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5qs7::I64 == 0) goto c5qs9; else goto c5qs8;
       c5qs9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5qs8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5qs7::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.254363413 UTC

[section ""data" . Data.OldList.strictGenericLength_closure" {
     Data.OldList.strictGenericLength_closure:
         const Data.OldList.strictGenericLength_info;
         const 0;
 },
 lvl12_s5ps5_entry() //  [R1]
         { info_tbl: [(c5qsw,
                       label: lvl12_s5ps5_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qsw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5qsx; else goto c5qsy;
       c5qsx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qsy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5psd_entry() //  [R1]
         { info_tbl: [(c5qsC,
                       label: sat_s5psd_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qsC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5qsD; else goto c5qsE;
       c5qsD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qsE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.OldList.strictGenericLength_entry() //  [R2, R3]
         { info_tbl: [(c5qsH,
                       label: Data.OldList.strictGenericLength_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qsH: // global
           _s5ps4::P64 = R3;
           _s5ps3::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c5qsI; else goto c5qsJ;
       c5qsJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5qsL; else goto c5qsK;
       c5qsL: // global
           HpAlloc = 48;
           goto c5qsI;
       c5qsI: // global
           R3 = _s5ps4::P64;
           R2 = _s5ps3::P64;
           R1 = Data.OldList.strictGenericLength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qsK: // global
           I64[Hp - 40] = lvl12_s5ps5_info;
           P64[Hp - 24] = _s5ps3::P64;
           I64[Hp - 16] = sat_s5psd_info;
           P64[Hp] = _s5ps3::P64;
           P64[Sp - 32] = Hp - 40;
           P64[Sp - 24] = _s5ps3::P64;
           P64[Sp - 16] = _s5ps4::P64;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 32;
           call _c5qsN() args: 0, res: 0, upd: 0;
     }
 },
 _c5qsN() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qsN: // global
           I64[Sp - 8] = block_c5qsP_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qt9; else goto c5qsR;
       u5qt9: // global
           call _c5qsP(R1) args: 0, res: 0, upd: 0;
       c5qsR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qsP() //  [R1]
         { info_tbl: [(c5qsP,
                       label: block_c5qsP_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qsP: // global
           _s5ps8::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5qsX; else goto c5qt2;
       c5qsX: // global
           R1 = _s5ps8::P64;
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5qt2: // global
           I64[Sp] = block_c5qt0_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s5ps8::P64;
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 14];
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5qt0() //  [R1]
         { info_tbl: [(c5qt0,
                       label: block_c5qt0_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qt0: // global
           P64[Sp + 24] = P64[Sp + 32];
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c5qsN() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.268197055 UTC

[section ""data" . Data.OldList.genericLength_closure" {
     Data.OldList.genericLength_closure:
         const Data.OldList.genericLength_info;
         const 0;
 },
 sat_s5psk_entry() //  [R1]
         { info_tbl: [(c5qu3,
                       label: sat_s5psk_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qu3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qu4; else goto c5qu5;
       c5qu4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qu5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.genericLength_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5psj_entry() //  [R1]
         { info_tbl: [(c5qua,
                       label: sat_s5psj_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qua: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5qub; else goto c5quc;
       c5qub: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5quc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.OldList.genericLength_entry() //  [R2, R3]
         { info_tbl: [(c5quh,
                       label: Data.OldList.genericLength_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5quh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5qui; else goto c5quj;
       c5qui: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericLength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5quj: // global
           I64[Sp - 16] = block_c5qtT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5qup; else goto c5qtU;
       u5qup: // global
           call _c5qtT(R1) args: 0, res: 0, upd: 0;
       c5qtU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qtT() //  [R1]
         { info_tbl: [(c5qtT,
                       label: block_c5qtT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qtT: // global
           _s5pse::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c5que; else goto c5quf;
       c5que: // global
           R2 = _s5pse::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = Data.OldList.genericLength1_closure;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
       c5quf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5quo; else goto c5qun;
       c5quo: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qun: // global
           _s5psi::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s5psk_info;
           P64[Hp - 32] = _s5pse::P64;
           P64[Hp - 24] = _s5psi::P64;
           I64[Hp - 16] = sat_s5psj_info;
           P64[Hp] = _s5pse::P64;
           R2 = _s5pse::P64;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Hp - 16;
           P64[Sp + 8] = Hp - 48;
           Sp = Sp - 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.280192562 UTC

[section ""data" . Data.OldList.genericTake_closure" {
     Data.OldList.genericTake_closure:
         const Data.OldList.genericTake_info;
         const 0;
 },
 $dNum_s5psp_entry() //  [R1]
         { info_tbl: [(c5qv7,
                       label: $dNum_s5psp_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qv7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qv8; else goto c5qv9;
       c5qv8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qv9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5psr_entry() //  [R1]
         { info_tbl: [(c5qve,
                       label: sat_s5psr_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qve: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5qvf; else goto c5qvg;
       c5qvf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qvg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5psw_entry() //  [R1]
         { info_tbl: [(c5qvH,
                       label: sat_s5psw_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qvH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5qvI; else goto c5qvJ;
       c5qvI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qvJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5psx_entry() //  [R1]
         { info_tbl: [(c5qvK,
                       label: sat_s5psx_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qvK: // global
           _s5psx::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5qvL; else goto c5qvM;
       c5qvM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qvO; else goto c5qvN;
       c5qvO: // global
           HpAlloc = 24;
           goto c5qvL;
       c5qvL: // global
           R1 = _s5psx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qvN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5psx::P64;
           _s5psm::P64 = P64[_s5psx::P64 + 16];
           _s5psp::P64 = P64[_s5psx::P64 + 24];
           I64[Hp - 16] = sat_s5psw_info;
           P64[Hp] = _s5psp::P64;
           R2 = _s5psp::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s5psm::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5psy_entry() //  [R1]
         { info_tbl: [(c5qvP,
                       label: sat_s5psy_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qvP: // global
           _s5psy::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5qvQ; else goto c5qvR;
       c5qvR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5qvT; else goto c5qvS;
       c5qvT: // global
           HpAlloc = 32;
           goto c5qvQ;
       c5qvQ: // global
           R1 = _s5psy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qvS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5psy::P64;
           _s5psl::P64 = P64[_s5psy::P64 + 16];
           _s5psm::P64 = P64[_s5psy::P64 + 24];
           _s5psp::P64 = P64[_s5psy::P64 + 32];
           _s5psv::P64 = P64[_s5psy::P64 + 40];
           I64[Hp - 24] = sat_s5psx_info;
           P64[Hp - 8] = _s5psm::P64;
           P64[Hp] = _s5psp::P64;
           R4 = _s5psv::P64;
           R3 = Hp - 24;
           R2 = _s5psl::P64;
           Sp = Sp - 16;
           call Data.OldList.genericTake_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.genericTake_entry() //  [R2, R3, R4]
         { info_tbl: [(c5qvU,
                       label: Data.OldList.genericTake_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qvU: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5qvV; else goto c5qvW;
       c5qvV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericTake_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qvW: // global
           I64[Sp - 32] = block_c5quZ_info;
           _s5psl::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s5psl::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5quZ() //  [R1]
         { info_tbl: [(c5quZ,
                       label: block_c5quZ_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5quZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5qvZ; else goto c5qvY;
       c5qvZ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qvY: // global
           I64[Hp - 40] = $dNum_s5psp_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s5psr_info;
           _c5qv3::P64 = Hp - 40;
           P64[Hp] = _c5qv3::P64;
           I64[Sp - 16] = block_c5qvh_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = _c5qv3::P64;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5qvh() //  [R1]
         { info_tbl: [(c5qvh,
                       label: block_c5qvh_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qvh: // global
           _c5qva::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5qvl_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c5qva::P64;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5qvl() //  [R1]
         { info_tbl: [(c5qvl,
                       label: block_c5qvl_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qvl: // global
           if (R1 & 7 == 1) goto c5qw3; else goto u5qwj;
       c5qw3: // global
           I64[Sp] = block_c5qvp_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto u5qwl; else goto c5qvq;
       u5qwl: // global
           call _c5qvp(R1) args: 0, res: 0, upd: 0;
       c5qvq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u5qwj: // global
           Sp = Sp + 40;
           call _c5qwg() args: 0, res: 0, upd: 0;
     }
 },
 _c5qvp() //  [R1]
         { info_tbl: [(c5qvp,
                       label: block_c5qvp_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qvp: // global
           if (R1 & 7 == 1) goto u5qwk; else goto c5qw9;
       u5qwk: // global
           Sp = Sp + 40;
           call _c5qwg() args: 0, res: 0, upd: 0;
       c5qw9: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5qwc; else goto c5qwb;
       c5qwc: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qwb: // global
           _s5psu::P64 = P64[R1 + 6];
           _s5psv::P64 = P64[R1 + 14];
           I64[Hp - 64] = sat_s5psy_info;
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s5psv::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5psu::P64;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5qwg() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qwg: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.304776292 UTC

[section ""data" . Data.OldList.genericReplicate_closure" {
     Data.OldList.genericReplicate_closure:
         const Data.OldList.genericReplicate_info;
         const 0;
 },
 sat_s5psC_entry() //  [R1]
         { info_tbl: [(c5qxJ,
                       label: sat_s5psC_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qxJ: // global
           R2 = P64[R1 + 16];
           call GHC.List.repeat_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.genericReplicate_entry() //  [R2, R3, R4]
         { info_tbl: [(c5qxM,
                       label: Data.OldList.genericReplicate_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qxM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qxQ; else goto c5qxP;
       c5qxQ: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericReplicate_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qxP: // global
           I64[Hp - 16] = sat_s5psC_info;
           P64[Hp] = R4;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           call Data.OldList.genericTake_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.31217532 UTC

[section ""data" . Data.OldList.genericDrop_closure" {
     Data.OldList.genericDrop_closure:
         const Data.OldList.genericDrop_info;
         const 0;
 },
 $dNum_s5psH_entry() //  [R1]
         { info_tbl: [(c5qys,
                       label: $dNum_s5psH_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qys: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qyt; else goto c5qyu;
       c5qyt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qyu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5psJ_entry() //  [R1]
         { info_tbl: [(c5qyx,
                       label: sat_s5psJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qyx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5qyy; else goto c5qyz;
       c5qyy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qyz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5psO_entry() //  [R1]
         { info_tbl: [(c5qyH,
                       label: sat_s5psO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qyH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5qyI; else goto c5qyJ;
       c5qyI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qyJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5psP_entry() //  [R1]
         { info_tbl: [(c5qyK,
                       label: sat_s5psP_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qyK: // global
           _s5psP::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5qyL; else goto c5qyM;
       c5qyM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qyO; else goto c5qyN;
       c5qyO: // global
           HpAlloc = 24;
           goto c5qyL;
       c5qyL: // global
           R1 = _s5psP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qyN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5psP::P64;
           _s5psE::P64 = P64[_s5psP::P64 + 16];
           _s5psH::P64 = P64[_s5psP::P64 + 24];
           I64[Hp - 16] = sat_s5psO_info;
           P64[Hp] = _s5psH::P64;
           R2 = _s5psH::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s5psE::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 Data.OldList.genericDrop_entry() //  [R2, R3, R4]
         { info_tbl: [(c5qyP,
                       label: Data.OldList.genericDrop_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qyP: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5qyQ; else goto u5qzd;
       c5qyQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericDrop_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5qzd: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5qy0() args: 0, res: 0, upd: 0;
     }
 },
 _c5qy0() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qy0: // global
           I64[Sp - 8] = block_c5qy3_info;
           R2 = P64[Sp];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5qy3() //  [R1]
         { info_tbl: [(c5qy3,
                       label: block_c5qy3_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qy3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5qyU; else goto c5qyT;
       c5qyU: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qyT: // global
           I64[Hp - 40] = $dNum_s5psH_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s5psJ_info;
           _c5qy7::P64 = Hp - 40;
           P64[Hp] = _c5qy7::P64;
           I64[Sp - 16] = block_c5qyb_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = _c5qy7::P64;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5qyb() //  [R1]
         { info_tbl: [(c5qyb,
                       label: block_c5qyb_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qyb: // global
           _c5qy9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5qyf_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c5qy9::P64;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5qyf() //  [R1]
         { info_tbl: [(c5qyf,
                       label: block_c5qyf_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qyf: // global
           _s5psF::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5qyY; else goto c5qza;
       c5qyY: // global
           I64[Sp] = block_c5qyj_info;
           R1 = _s5psF::P64;
           if (R1 & 7 != 0) goto u5qzf; else goto c5qyk;
       u5qzf: // global
           call _c5qyj(R1) args: 0, res: 0, upd: 0;
       c5qyk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5qza: // global
           R1 = _s5psF::P64 & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5qyj() //  [R1]
         { info_tbl: [(c5qyj,
                       label: block_c5qyj_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qyj: // global
           if (R1 & 7 == 1) goto c5qz2; else goto c5qz3;
       c5qz2: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5qz3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5qz6; else goto c5qz5;
       c5qz6: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qz5: // global
           _s5psN::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_s5psP_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = Hp - 24;
           P64[Sp + 32] = _s5psN::P64;
           Sp = Sp + 16;
           call _c5qy0() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.335969584 UTC

[section ""data" . Data.OldList.$wgenericSplitAt_closure" {
     Data.OldList.$wgenericSplitAt_closure:
         const Data.OldList.$wgenericSplitAt_info;
         const 0;
 },
 $dNum_s5psU_entry() //  [R1]
         { info_tbl: [(c5qAB,
                       label: $dNum_s5psU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qAB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qAC; else goto c5qAD;
       c5qAC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qAD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5psW_entry() //  [R1]
         { info_tbl: [(c5qAI,
                       label: sat_s5psW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qAI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5qAJ; else goto c5qAK;
       c5qAJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qAK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5pt2_entry() //  [R1]
         { info_tbl: [(c5qBb,
                       label: sat_s5pt2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qBb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5qBc; else goto c5qBd;
       c5qBc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qBd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5pt3_entry() //  [R1]
         { info_tbl: [(c5qBe,
                       label: sat_s5pt3_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qBe: // global
           _s5pt3::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5qBf; else goto c5qBg;
       c5qBg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qBi; else goto c5qBh;
       c5qBi: // global
           HpAlloc = 24;
           goto c5qBf;
       c5qBf: // global
           R1 = _s5pt3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qBh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5pt3::P64;
           _s5psR::P64 = P64[_s5pt3::P64 + 16];
           _s5psU::P64 = P64[_s5pt3::P64 + 24];
           I64[Hp - 16] = sat_s5pt2_info;
           P64[Hp] = _s5psU::P64;
           R2 = _s5psU::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s5psR::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 ds_s5pt1_entry() //  [R1]
         { info_tbl: [(c5qBm,
                       label: ds_s5pt1_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qBm: // global
           _s5pt1::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5qBn; else goto c5qBo;
       c5qBo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5qBq; else goto c5qBp;
       c5qBq: // global
           HpAlloc = 32;
           goto c5qBn;
       c5qBn: // global
           R1 = _s5pt1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qBp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5pt1::P64;
           _s5psQ::P64 = P64[_s5pt1::P64 + 16];
           _s5psR::P64 = P64[_s5pt1::P64 + 24];
           _s5psU::P64 = P64[_s5pt1::P64 + 32];
           _s5pt0::P64 = P64[_s5pt1::P64 + 40];
           I64[Hp - 24] = sat_s5pt3_info;
           P64[Hp - 8] = _s5psR::P64;
           P64[Hp] = _s5psU::P64;
           I64[Sp - 24] = block_c5qBj_info;
           R4 = _s5pt0::P64;
           R3 = Hp - 24;
           R2 = _s5psQ::P64;
           Sp = Sp - 24;
           call Data.OldList.$wgenericSplitAt_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5qBj() //  [R1, R2]
         { info_tbl: [(c5qBj,
                       label: block_c5qBj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qBj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qBt; else goto c5qBs;
       c5qBt: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5qBs: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wgenericSplitAt_entry() //  [R2, R3, R4]
         { info_tbl: [(c5qBu,
                       label: Data.OldList.$wgenericSplitAt_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qBu: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5qBv; else goto c5qBw;
       c5qBv: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.$wgenericSplitAt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qBw: // global
           I64[Sp - 32] = block_c5qAt_info;
           _s5psQ::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s5psQ::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5qAt() //  [R1]
         { info_tbl: [(c5qAt,
                       label: block_c5qAt_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qAt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5qBz; else goto c5qBy;
       c5qBz: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qBy: // global
           I64[Hp - 40] = $dNum_s5psU_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s5psW_info;
           _c5qAx::P64 = Hp - 40;
           P64[Hp] = _c5qAx::P64;
           I64[Sp - 16] = block_c5qAL_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = _c5qAx::P64;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5qAL() //  [R1]
         { info_tbl: [(c5qAL,
                       label: block_c5qAL_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qAL: // global
           _c5qAE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5qAP_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c5qAE::P64;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5qAP() //  [R1]
         { info_tbl: [(c5qAP,
                       label: block_c5qAP_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qAP: // global
           _s5psS::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5qBD; else goto c5qBS;
       c5qBD: // global
           I64[Sp] = block_c5qAT_info;
           R1 = _s5psS::P64;
           if (R1 & 7 != 0) goto u5qBV; else goto c5qAU;
       u5qBV: // global
           call _c5qAT(R1) args: 0, res: 0, upd: 0;
       c5qAU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c5qBS: // global
           R2 = _s5psS::P64;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5qAT() //  [R1]
         { info_tbl: [(c5qAT,
                       label: block_c5qAT_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qAT: // global
           if (R1 & 7 == 1) goto c5qBH; else goto c5qBL;
       c5qBH: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5qBL: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c5qBO; else goto c5qBN;
       c5qBO: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qBN: // global
           _s5psZ::P64 = P64[R1 + 6];
           _s5pt0::P64 = P64[R1 + 14];
           I64[Hp - 112] = ds_s5pt1_info;
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = _s5pt0::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c5qAZ::P64 = Hp - 112;
           P64[Hp - 48] = _c5qAZ::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5qAZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5psZ::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.366355541 UTC

[section ""data" . Data.OldList.genericSplitAt_closure" {
     Data.OldList.genericSplitAt_closure:
         const Data.OldList.genericSplitAt_info;
         const 0;
 },
 Data.OldList.genericSplitAt_entry() //  [R2, R3, R4]
         { info_tbl: [(c5qDp,
                       label: Data.OldList.genericSplitAt_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qDp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5qDq; else goto c5qDr;
       c5qDq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericSplitAt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qDr: // global
           I64[Sp - 8] = block_c5qDm_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wgenericSplitAt_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5qDm() //  [R1, R2]
         { info_tbl: [(c5qDm,
                       label: block_c5qDm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qDm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qDu; else goto c5qDt;
       c5qDu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5qDt: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.375154015 UTC

[section ""cstring" . lvl2_r5kSj_bytes" {
     lvl2_r5kSj_bytes:
         I8[] [76,105,115,116,46,103,101,110,101,114,105,99,73,110,100,101,120,58,32,110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116,46]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.379081698 UTC

[section ""data" . lvl3_r5kSk_closure" {
     lvl3_r5kSk_closure:
         const lvl3_r5kSk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r5kSk_entry() //  [R1]
         { info_tbl: [(c5qDP,
                       label: lvl3_r5kSk_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qDP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5qDQ; else goto c5qDR;
       c5qDQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qDR: // global
           (_c5qDK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5qDK::I64 == 0) goto c5qDM; else goto c5qDL;
       c5qDM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5qDL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5qDK::I64;
           I64[Sp - 24] = block_c5qDN_info;
           R2 = lvl2_r5kSj_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5qDN() //  [R1]
         { info_tbl: [(c5qDN,
                       label: block_c5qDN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qDN: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.387585328 UTC

[section ""cstring" . lvl4_r5kSl_bytes" {
     lvl4_r5kSl_bytes:
         I8[] [76,105,115,116,46,103,101,110,101,114,105,99,73,110,100,101,120,58,32,105,110,100,101,120,32,116,111,111,32,108,97,114,103,101,46]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.390663766 UTC

[section ""data" . lvl5_r5kSm_closure" {
     lvl5_r5kSm_closure:
         const lvl5_r5kSm_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r5kSm_entry() //  [R1]
         { info_tbl: [(c5qEg,
                       label: lvl5_r5kSm_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qEg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5qEh; else goto c5qEi;
       c5qEh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qEi: // global
           (_c5qEb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5qEb::I64 == 0) goto c5qEd; else goto c5qEc;
       c5qEd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5qEc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5qEb::I64;
           I64[Sp - 24] = block_c5qEe_info;
           R2 = lvl4_r5kSl_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5qEe() //  [R1]
         { info_tbl: [(c5qEe,
                       label: block_c5qEe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qEe: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.402303351 UTC

[section ""data" . Data.OldList.genericIndex_closure" {
     Data.OldList.genericIndex_closure:
         const Data.OldList.genericIndex_info;
         const 0;
 },
 $dNum_s5ptv_entry() //  [R1]
         { info_tbl: [(c5qFc,
                       label: $dNum_s5ptv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qFc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qFd; else goto c5qFe;
       c5qFd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qFe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5pty_entry() //  [R1]
         { info_tbl: [(c5qFh,
                       label: sat_s5pty_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qFh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5qFi; else goto c5qFj;
       c5qFi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qFj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5ptA_entry() //  [R1]
         { info_tbl: [(c5qFm,
                       label: sat_s5ptA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qFm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5qFn; else goto c5qFo;
       c5qFn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qFo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5ptC_entry() //  [R1]
         { info_tbl: [(c5qFw,
                       label: sat_s5ptC_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qFw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5qFx; else goto c5qFy;
       c5qFx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qFy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.OldList.genericLength2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s5ptD_entry() //  [R1]
         { info_tbl: [(c5qFz,
                       label: sat_s5ptD_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qFz: // global
           _s5ptD::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c5qFA; else goto c5qFB;
       c5qFB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qFD; else goto c5qFC;
       c5qFD: // global
           HpAlloc = 24;
           goto c5qFA;
       c5qFA: // global
           R1 = _s5ptD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qFC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5ptD::P64;
           _s5ptq::P64 = P64[_s5ptD::P64 + 16];
           _s5ptv::P64 = P64[_s5ptD::P64 + 24];
           I64[Hp - 16] = sat_s5ptC_info;
           P64[Hp] = _s5ptv::P64;
           R2 = _s5ptv::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s5ptq::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 Data.OldList.genericIndex_entry() //  [R2, R3, R4]
         { info_tbl: [(c5qFI,
                       label: Data.OldList.genericIndex_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qFI: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c5qFJ; else goto u5qGe;
       c5qFJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.genericIndex_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5qGe: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c5qEz() args: 0, res: 0, upd: 0;
     }
 },
 _c5qEz() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qEz: // global
           I64[Sp - 8] = block_c5qEC_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qGg; else goto c5qED;
       u5qGg: // global
           call _c5qEC(R1) args: 0, res: 0, upd: 0;
       c5qED: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qEC() //  [R1]
         { info_tbl: [(c5qEC,
                       label: block_c5qEC_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qEC: // global
           if (R1 & 7 == 1) goto c5qFF; else goto c5qFG;
       c5qFF: // global
           R1 = lvl5_r5kSm_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5qFG: // global
           I64[Sp - 8] = block_c5qEI_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 16] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5qEI() //  [R1]
         { info_tbl: [(c5qEI,
                       label: block_c5qEI_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qEI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qFQ; else goto c5qFP;
       c5qFQ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qFP: // global
           I64[Hp - 16] = $dNum_s5ptv_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c5qEO_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5qEO() //  [R1]
         { info_tbl: [(c5qEO,
                       label: block_c5qEO_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qEO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qFT; else goto c5qFS;
       c5qFT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qFS: // global
           I64[Hp - 16] = sat_s5pty_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 16] = block_c5qEU_info;
           R2 = R1;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5qEU() //  [R1]
         { info_tbl: [(c5qEU,
                       label: block_c5qEU_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qEU: // global
           I64[Sp] = block_c5qEY_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 56];
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5qEY() //  [R1]
         { info_tbl: [(c5qEY,
                       label: block_c5qEY_info
                       rep:StackRep [False, True, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qEY: // global
           if (R1 & 7 == 1) goto c5qFW; else goto c5qGb;
       c5qFW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5qFZ; else goto c5qFY;
       c5qFZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qFY: // global
           I64[Hp - 16] = sat_s5ptA_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 16] = block_c5qF4_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 56];
           P64[Sp + 8] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Classes.>_entry(R2) args: 32, res: 8, upd: 8;
       c5qGb: // global
           R1 = P64[Sp + 48];
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5qF4() //  [R1]
         { info_tbl: [(c5qF4,
                       label: block_c5qF4_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qF4: // global
           if (R1 & 7 == 1) goto c5qG3; else goto c5qG4;
       c5qG3: // global
           R1 = lvl3_r5kSk_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5qG4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5qG7; else goto c5qG6;
       c5qG7: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qG6: // global
           I64[Hp - 24] = sat_s5ptD_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 8];
           P64[Sp + 24] = P64[Sp + 24];
           P64[Sp + 32] = P64[Sp + 16];
           P64[Sp + 40] = Hp - 24;
           Sp = Sp + 24;
           call _c5qEz() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.448802652 UTC

[section ""data" . Data.OldList.zipWith4_closure" {
     Data.OldList.zipWith4_closure:
         const Data.OldList.zipWith4_info;
 },
 sat_s5ptW_entry() //  [R1]
         { info_tbl: [(c5qIk,
                       label: sat_s5ptW_info
                       rep:HeapRep 5 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qIk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qIl; else goto c5qIm;
       c5qIl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qIm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.zipWith4_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.zipWith4_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5qIr,
                       label: Data.OldList.zipWith4_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qIr: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5qIs; else goto c5qIt;
       c5qIs: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.zipWith4_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qIt: // global
           I64[Sp - 40] = block_c5qHS_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u5qJ7; else goto c5qHT;
       u5qJ7: // global
           call _c5qHS(R1) args: 0, res: 0, upd: 0;
       c5qHT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qHS() //  [R1]
         { info_tbl: [(c5qHS,
                       label: block_c5qHS_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qHS: // global
           if (R1 & 7 == 1) goto u5qIW; else goto c5qIp;
       u5qIW: // global
           Sp = Sp + 40;
           call _c5qIM() args: 0, res: 0, upd: 0;
       c5qIp: // global
           I64[Sp - 8] = block_c5qHY_info;
           _s5ptK::P64 = P64[R1 + 6];
           _s5ptL::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _s5ptL::P64;
           P64[Sp + 16] = _s5ptK::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qJ0; else goto c5qHZ;
       u5qJ0: // global
           call _c5qHY(R1) args: 0, res: 0, upd: 0;
       c5qHZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qHY() //  [R1]
         { info_tbl: [(c5qHY,
                       label: block_c5qHY_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qHY: // global
           if (R1 & 7 == 1) goto u5qIX; else goto c5qIC;
       u5qIX: // global
           Sp = Sp + 48;
           call _c5qIM() args: 0, res: 0, upd: 0;
       c5qIC: // global
           I64[Sp - 8] = block_c5qI4_info;
           _s5ptN::P64 = P64[R1 + 6];
           _s5ptO::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _s5ptO::P64;
           P64[Sp + 32] = _s5ptN::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qJ2; else goto c5qI5;
       u5qJ2: // global
           call _c5qI4(R1) args: 0, res: 0, upd: 0;
       c5qI5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qI4() //  [R1]
         { info_tbl: [(c5qI4,
                       label: block_c5qI4_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qI4: // global
           if (R1 & 7 == 1) goto u5qIY; else goto c5qII;
       u5qIY: // global
           Sp = Sp + 56;
           call _c5qIM() args: 0, res: 0, upd: 0;
       c5qII: // global
           I64[Sp - 8] = block_c5qIa_info;
           _s5ptQ::P64 = P64[R1 + 6];
           _s5ptR::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5ptR::P64;
           P64[Sp + 48] = _s5ptQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qJ4; else goto c5qIb;
       u5qJ4: // global
           call _c5qIa(R1) args: 0, res: 0, upd: 0;
       c5qIb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qIa() //  [R1]
         { info_tbl: [(c5qIa,
                       label: block_c5qIa_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qIa: // global
           if (R1 & 7 == 1) goto u5qIZ; else goto c5qIP;
       u5qIZ: // global
           Sp = Sp + 64;
           call _c5qIM() args: 0, res: 0, upd: 0;
       c5qIP: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c5qIS; else goto c5qIR;
       c5qIS: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qIR: // global
           _s5ptT::P64 = P64[R1 + 6];
           _s5ptU::P64 = P64[R1 + 14];
           I64[Hp - 128] = sat_s5ptW_info;
           _s5ptE::P64 = P64[Sp + 32];
           P64[Hp - 112] = _s5ptE::P64;
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = P64[Sp + 8];
           P64[Hp - 80] = _s5ptU::P64;
           I64[Hp - 72] = stg_ap_5_upd_info;
           P64[Hp - 56] = _s5ptE::P64;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = _s5ptT::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5qIM() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qIM: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.47107108 UTC

[section ""data" . Data.OldList.zip4_closure" {
     Data.OldList.zip4_closure:
         const Data.OldList.zip4_info;
 },
 Data.OldList.zip4_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5qK4,
                       label: Data.OldList.zip4_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qK4: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Tuple.(,,,)_closure+4;
           call Data.OldList.zipWith4_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.476008655 UTC

[section ""data" . Data.OldList.zipWith5_closure" {
     Data.OldList.zipWith5_closure:
         const Data.OldList.zipWith5_info;
 },
 sat_s5puj_entry() //  [R1]
         { info_tbl: [(c5qKO,
                       label: sat_s5puj_info
                       rep:HeapRep 6 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qKO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5qKP; else goto c5qKQ;
       c5qKP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qKQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 24;
           call Data.OldList.zipWith5_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 32, res: 0, upd: 24;
     }
 },
 Data.OldList.zipWith5_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5qKV,
                       label: Data.OldList.zipWith5_info
                       rep:HeapRep static { Fun {arity: 6 fun_type: ArgSpec 26} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qKV: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c5qKW; else goto c5qKX;
       c5qKW: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.zipWith5_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c5qKX: // global
           I64[Sp - 40] = block_c5qKg_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u5qLL; else goto c5qKh;
       u5qLL: // global
           call _c5qKg(R1) args: 0, res: 0, upd: 0;
       c5qKh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qKg() //  [R1]
         { info_tbl: [(c5qKg,
                       label: block_c5qKg_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qKg: // global
           if (R1 & 7 == 1) goto u5qLx; else goto c5qKT;
       u5qLx: // global
           Sp = Sp + 48;
           call _c5qLm() args: 0, res: 0, upd: 0;
       c5qKT: // global
           I64[Sp - 8] = block_c5qKm_info;
           _s5pu4::P64 = P64[R1 + 6];
           _s5pu5::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _s5pu5::P64;
           P64[Sp + 16] = _s5pu4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qLC; else goto c5qKn;
       u5qLC: // global
           call _c5qKm(R1) args: 0, res: 0, upd: 0;
       c5qKn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qKm() //  [R1]
         { info_tbl: [(c5qKm,
                       label: block_c5qKm_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qKm: // global
           if (R1 & 7 == 1) goto u5qLy; else goto c5qL6;
       u5qLy: // global
           Sp = Sp + 56;
           call _c5qLm() args: 0, res: 0, upd: 0;
       c5qL6: // global
           I64[Sp - 8] = block_c5qKs_info;
           _s5pu7::P64 = P64[R1 + 6];
           _s5pu8::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _s5pu8::P64;
           P64[Sp + 32] = _s5pu7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qLE; else goto c5qKt;
       u5qLE: // global
           call _c5qKs(R1) args: 0, res: 0, upd: 0;
       c5qKt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qKs() //  [R1]
         { info_tbl: [(c5qKs,
                       label: block_c5qKs_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qKs: // global
           if (R1 & 7 == 1) goto u5qLz; else goto c5qLc;
       u5qLz: // global
           Sp = Sp + 64;
           call _c5qLm() args: 0, res: 0, upd: 0;
       c5qLc: // global
           I64[Sp - 8] = block_c5qKy_info;
           _s5pua::P64 = P64[R1 + 6];
           _s5pub::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5pub::P64;
           P64[Sp + 48] = _s5pua::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qLG; else goto c5qKz;
       u5qLG: // global
           call _c5qKy(R1) args: 0, res: 0, upd: 0;
       c5qKz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qKy() //  [R1]
         { info_tbl: [(c5qKy,
                       label: block_c5qKy_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qKy: // global
           if (R1 & 7 == 1) goto u5qLA; else goto c5qLi;
       u5qLA: // global
           Sp = Sp + 72;
           call _c5qLm() args: 0, res: 0, upd: 0;
       c5qLi: // global
           I64[Sp - 8] = block_c5qKE_info;
           _s5pud::P64 = P64[R1 + 6];
           _s5pue::P64 = P64[R1 + 14];
           R1 = P64[Sp + 64];
           P64[Sp] = _s5pue::P64;
           P64[Sp + 64] = _s5pud::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qLI; else goto c5qKF;
       u5qLI: // global
           call _c5qKE(R1) args: 0, res: 0, upd: 0;
       c5qKF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qKE() //  [R1]
         { info_tbl: [(c5qKE,
                       label: block_c5qKE_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qKE: // global
           if (R1 & 7 == 1) goto u5qLB; else goto c5qLp;
       u5qLB: // global
           Sp = Sp + 80;
           call _c5qLm() args: 0, res: 0, upd: 0;
       c5qLp: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c5qLs; else goto c5qLr;
       c5qLs: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qLr: // global
           _s5pug::P64 = P64[R1 + 6];
           _s5puh::P64 = P64[R1 + 14];
           I64[Hp - 144] = sat_s5puj_info;
           _s5ptX::P64 = P64[Sp + 40];
           P64[Hp - 128] = _s5ptX::P64;
           P64[Hp - 120] = P64[Sp + 32];
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 8];
           P64[Hp - 88] = _s5puh::P64;
           I64[Hp - 80] = stg_ap_6_upd_info;
           P64[Hp - 64] = _s5ptX::P64;
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 72];
           P64[Hp - 24] = _s5pug::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 144;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5qLm() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qLm: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.498946738 UTC

[section ""data" . Data.OldList.zip5_closure" {
     Data.OldList.zip5_closure:
         const Data.OldList.zip5_info;
 },
 Data.OldList.zip5_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5qMS,
                       label: Data.OldList.zip5_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qMS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5qMT; else goto c5qMU;
       c5qMT: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.zip5_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qMU: // global
           _B1::P64 = R6;
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Tuple.(,,,,)_closure+5;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.OldList.zipWith5_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 16, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.507459903 UTC

[section ""data" . Data.OldList.zipWith6_closure" {
     Data.OldList.zipWith6_closure:
         const Data.OldList.zipWith6_info;
 },
 Data.OldList.zipWith6_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qN2: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.OldList.zipWith6_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s5puK_entry() //  [R1]
         { info_tbl: [(c5qNK,
                       label: sat_s5puK_info
                       rep:HeapRep 7 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qNK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5qNL; else goto c5qNM;
       c5qNL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qNM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 56];
           P64[Sp - 24] = P64[R1 + 64];
           Sp = Sp - 32;
           call Data.OldList.zipWith6_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.OldList.zipWith6_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5qNR,
                       label: Data.OldList.zipWith6_info
                       rep:HeapRep static {
                             Fun {arity: 7
                                  fun_type: ArgGen [False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qNR: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c5qNS; else goto c5qNT;
       c5qNS: // global
           R1 = Data.OldList.zipWith6_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c5qNT: // global
           I64[Sp - 40] = block_c5qN6_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u5qOR; else goto c5qN7;
       u5qOR: // global
           call _c5qN6(R1) args: 0, res: 0, upd: 0;
       c5qN7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qN6() //  [R1]
         { info_tbl: [(c5qN6,
                       label: block_c5qN6_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qN6: // global
           if (R1 & 7 == 1) goto u5qOA; else goto c5qNP;
       u5qOA: // global
           Sp = Sp + 56;
           call _c5qOo() args: 0, res: 0, upd: 0;
       c5qNP: // global
           I64[Sp - 8] = block_c5qNc_info;
           _s5pus::P64 = P64[R1 + 6];
           _s5put::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _s5put::P64;
           P64[Sp + 16] = _s5pus::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qOG; else goto c5qNd;
       u5qOG: // global
           call _c5qNc(R1) args: 0, res: 0, upd: 0;
       c5qNd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qNc() //  [R1]
         { info_tbl: [(c5qNc,
                       label: block_c5qNc_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qNc: // global
           if (R1 & 7 == 1) goto u5qOB; else goto c5qO2;
       u5qOB: // global
           Sp = Sp + 64;
           call _c5qOo() args: 0, res: 0, upd: 0;
       c5qO2: // global
           I64[Sp - 8] = block_c5qNi_info;
           _s5puv::P64 = P64[R1 + 6];
           _s5puw::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _s5puw::P64;
           P64[Sp + 32] = _s5puv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qOI; else goto c5qNj;
       u5qOI: // global
           call _c5qNi(R1) args: 0, res: 0, upd: 0;
       c5qNj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qNi() //  [R1]
         { info_tbl: [(c5qNi,
                       label: block_c5qNi_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qNi: // global
           if (R1 & 7 == 1) goto u5qOC; else goto c5qO8;
       u5qOC: // global
           Sp = Sp + 72;
           call _c5qOo() args: 0, res: 0, upd: 0;
       c5qO8: // global
           I64[Sp - 8] = block_c5qNo_info;
           _s5puy::P64 = P64[R1 + 6];
           _s5puz::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5puz::P64;
           P64[Sp + 48] = _s5puy::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qOK; else goto c5qNp;
       u5qOK: // global
           call _c5qNo(R1) args: 0, res: 0, upd: 0;
       c5qNp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qNo() //  [R1]
         { info_tbl: [(c5qNo,
                       label: block_c5qNo_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qNo: // global
           if (R1 & 7 == 1) goto u5qOD; else goto c5qOe;
       u5qOD: // global
           Sp = Sp + 80;
           call _c5qOo() args: 0, res: 0, upd: 0;
       c5qOe: // global
           I64[Sp - 8] = block_c5qNu_info;
           _s5puB::P64 = P64[R1 + 6];
           _s5puC::P64 = P64[R1 + 14];
           R1 = P64[Sp + 64];
           P64[Sp] = _s5puC::P64;
           P64[Sp + 64] = _s5puB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qOM; else goto c5qNv;
       u5qOM: // global
           call _c5qNu(R1) args: 0, res: 0, upd: 0;
       c5qNv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qNu() //  [R1]
         { info_tbl: [(c5qNu,
                       label: block_c5qNu_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qNu: // global
           if (R1 & 7 == 1) goto u5qOE; else goto c5qOk;
       u5qOE: // global
           Sp = Sp + 88;
           call _c5qOo() args: 0, res: 0, upd: 0;
       c5qOk: // global
           I64[Sp - 8] = block_c5qNA_info;
           _s5puE::P64 = P64[R1 + 6];
           _s5puF::P64 = P64[R1 + 14];
           R1 = P64[Sp + 80];
           P64[Sp] = _s5puF::P64;
           P64[Sp + 80] = _s5puE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qOO; else goto c5qNB;
       u5qOO: // global
           call _c5qNA(R1) args: 0, res: 0, upd: 0;
       c5qNB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qNA() //  [R1]
         { info_tbl: [(c5qNA,
                       label: block_c5qNA_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qNA: // global
           if (R1 & 7 == 1) goto u5qOF; else goto c5qOr;
       u5qOF: // global
           Sp = Sp + 96;
           call _c5qOo() args: 0, res: 0, upd: 0;
       c5qOr: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c5qOu; else goto c5qOt;
       c5qOu: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qOt: // global
           _s5puH::P64 = P64[R1 + 6];
           _s5puI::P64 = P64[R1 + 14];
           I64[Hp - 160] = sat_s5puK_info;
           _s5puk::P64 = P64[Sp + 48];
           P64[Hp - 144] = _s5puk::P64;
           P64[Hp - 136] = P64[Sp + 40];
           P64[Hp - 128] = P64[Sp + 32];
           P64[Hp - 120] = P64[Sp + 24];
           P64[Hp - 112] = P64[Sp + 16];
           P64[Hp - 104] = P64[Sp + 8];
           P64[Hp - 96] = _s5puI::P64;
           I64[Hp - 88] = stg_ap_7_upd_info;
           P64[Hp - 72] = _s5puk::P64;
           P64[Hp - 64] = P64[Sp + 56];
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = P64[Sp + 80];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = _s5puH::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 88;
           P64[Hp] = Hp - 160;
           R1 = Hp - 14;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5qOo() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qOo: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.535743352 UTC

[section ""data" . Data.OldList.zip6_closure" {
     Data.OldList.zip6_closure:
         const Data.OldList.zip6_info;
 },
 Data.OldList.zip6_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5qQa,
                       label: Data.OldList.zip6_info
                       rep:HeapRep static { Fun {arity: 6 fun_type: ArgSpec 26} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qQa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5qQb; else goto c5qQc;
       c5qQb: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.zip6_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c5qQc: // global
           _B2::P64 = R6;
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Tuple.(,,,,,)_closure+6;
           P64[Sp - 8] = _B2::P64;
           Sp = Sp - 8;
           call Data.OldList.zipWith6_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.542221429 UTC

[section ""data" . Data.OldList.zipWith7_closure" {
     Data.OldList.zipWith7_closure:
         const Data.OldList.zipWith7_info;
 },
 Data.OldList.zipWith7_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qQk: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.OldList.zipWith7_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s5pvf_entry() //  [R1]
         { info_tbl: [(c5qR8,
                       label: sat_s5pvf_info
                       rep:HeapRep 8 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qR8: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5qR9; else goto c5qRa;
       c5qR9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qRa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 56];
           P64[Sp - 32] = P64[R1 + 64];
           P64[Sp - 24] = P64[R1 + 72];
           Sp = Sp - 40;
           call Data.OldList.zipWith7_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s5pve_entry() //  [R1]
         { info_tbl: [(c5qRf,
                       label: sat_s5pve_info
                       rep:HeapRep 8 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qRf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5qRg; else goto c5qRh;
       c5qRg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qRh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 56];
           R5 = P64[R1 + 48];
           R4 = P64[R1 + 40];
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 24];
           _s5pv9::P64 = P64[R1 + 64];
           _s5pvc::P64 = P64[R1 + 72];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s5pv9::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = _s5pvc::P64;
           Sp = Sp - 40;
           call stg_ap_pppppp_fast(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 48, res: 0, upd: 24;
     }
 },
 Data.OldList.zipWith7_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5qRm,
                       label: Data.OldList.zipWith7_info
                       rep:HeapRep static {
                             Fun {arity: 8
                                  fun_type: ArgGen [False, False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qRm: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c5qRn; else goto c5qRo;
       c5qRn: // global
           R1 = Data.OldList.zipWith7_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c5qRo: // global
           I64[Sp - 40] = block_c5qQo_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u5qSv; else goto c5qQp;
       u5qSv: // global
           call _c5qQo(R1) args: 0, res: 0, upd: 0;
       c5qQp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qQo() //  [R1]
         { info_tbl: [(c5qQo,
                       label: block_c5qQo_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qQo: // global
           if (R1 & 7 == 1) goto u5qSb; else goto c5qRk;
       u5qSb: // global
           Sp = Sp + 64;
           call _c5qRZ() args: 0, res: 0, upd: 0;
       c5qRk: // global
           I64[Sp - 8] = block_c5qQu_info;
           _s5puU::P64 = P64[R1 + 6];
           _s5puV::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _s5puV::P64;
           P64[Sp + 16] = _s5puU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qSi; else goto c5qQv;
       u5qSi: // global
           call _c5qQu(R1) args: 0, res: 0, upd: 0;
       c5qQv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qQu() //  [R1]
         { info_tbl: [(c5qQu,
                       label: block_c5qQu_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qQu: // global
           if (R1 & 7 == 1) goto u5qSc; else goto c5qRx;
       u5qSc: // global
           Sp = Sp + 72;
           call _c5qRZ() args: 0, res: 0, upd: 0;
       c5qRx: // global
           I64[Sp - 8] = block_c5qQA_info;
           _s5puX::P64 = P64[R1 + 6];
           _s5puY::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _s5puY::P64;
           P64[Sp + 32] = _s5puX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qSk; else goto c5qQB;
       u5qSk: // global
           call _c5qQA(R1) args: 0, res: 0, upd: 0;
       c5qQB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qQA() //  [R1]
         { info_tbl: [(c5qQA,
                       label: block_c5qQA_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qQA: // global
           if (R1 & 7 == 1) goto u5qSd; else goto c5qRD;
       u5qSd: // global
           Sp = Sp + 80;
           call _c5qRZ() args: 0, res: 0, upd: 0;
       c5qRD: // global
           I64[Sp - 8] = block_c5qQG_info;
           _s5pv0::P64 = P64[R1 + 6];
           _s5pv1::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5pv1::P64;
           P64[Sp + 48] = _s5pv0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qSm; else goto c5qQH;
       u5qSm: // global
           call _c5qQG(R1) args: 0, res: 0, upd: 0;
       c5qQH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qQG() //  [R1]
         { info_tbl: [(c5qQG,
                       label: block_c5qQG_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qQG: // global
           if (R1 & 7 == 1) goto u5qSe; else goto c5qRJ;
       u5qSe: // global
           Sp = Sp + 88;
           call _c5qRZ() args: 0, res: 0, upd: 0;
       c5qRJ: // global
           I64[Sp - 8] = block_c5qQM_info;
           _s5pv3::P64 = P64[R1 + 6];
           _s5pv4::P64 = P64[R1 + 14];
           R1 = P64[Sp + 64];
           P64[Sp] = _s5pv4::P64;
           P64[Sp + 64] = _s5pv3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qSo; else goto c5qQN;
       u5qSo: // global
           call _c5qQM(R1) args: 0, res: 0, upd: 0;
       c5qQN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qQM() //  [R1]
         { info_tbl: [(c5qQM,
                       label: block_c5qQM_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qQM: // global
           if (R1 & 7 == 1) goto u5qSf; else goto c5qRP;
       u5qSf: // global
           Sp = Sp + 96;
           call _c5qRZ() args: 0, res: 0, upd: 0;
       c5qRP: // global
           I64[Sp - 8] = block_c5qQS_info;
           _s5pv6::P64 = P64[R1 + 6];
           _s5pv7::P64 = P64[R1 + 14];
           R1 = P64[Sp + 80];
           P64[Sp] = _s5pv7::P64;
           P64[Sp + 80] = _s5pv6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qSq; else goto c5qQT;
       u5qSq: // global
           call _c5qQS(R1) args: 0, res: 0, upd: 0;
       c5qQT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qQS() //  [R1]
         { info_tbl: [(c5qQS,
                       label: block_c5qQS_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qQS: // global
           if (R1 & 7 == 1) goto u5qSg; else goto c5qRV;
       u5qSg: // global
           Sp = Sp + 104;
           call _c5qRZ() args: 0, res: 0, upd: 0;
       c5qRV: // global
           I64[Sp - 8] = block_c5qQY_info;
           _s5pv9::P64 = P64[R1 + 6];
           _s5pva::P64 = P64[R1 + 14];
           R1 = P64[Sp + 96];
           P64[Sp] = _s5pva::P64;
           P64[Sp + 96] = _s5pv9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qSs; else goto c5qQZ;
       u5qSs: // global
           call _c5qQY(R1) args: 0, res: 0, upd: 0;
       c5qQZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qQY() //  [R1]
         { info_tbl: [(c5qQY,
                       label: block_c5qQY_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qQY: // global
           if (R1 & 7 == 1) goto u5qSh; else goto c5qS1;
       u5qSh: // global
           Sp = Sp + 112;
           call _c5qRZ() args: 0, res: 0, upd: 0;
       c5qS1: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto c5qS4; else goto c5qS3;
       c5qS4: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qS3: // global
           _s5pvc::P64 = P64[R1 + 6];
           _s5pvd::P64 = P64[R1 + 14];
           I64[Hp - 176] = sat_s5pvf_info;
           _s5puL::P64 = P64[Sp + 56];
           P64[Hp - 160] = _s5puL::P64;
           P64[Hp - 152] = P64[Sp + 48];
           P64[Hp - 144] = P64[Sp + 40];
           P64[Hp - 136] = P64[Sp + 32];
           P64[Hp - 128] = P64[Sp + 24];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = _s5pvd::P64;
           I64[Hp - 96] = sat_s5pve_info;
           P64[Hp - 80] = _s5puL::P64;
           P64[Hp - 72] = P64[Sp + 64];
           P64[Hp - 64] = P64[Sp + 72];
           P64[Hp - 56] = P64[Sp + 80];
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = P64[Sp + 96];
           P64[Hp - 32] = P64[Sp + 104];
           P64[Hp - 24] = _s5pvc::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 96;
           P64[Hp] = Hp - 176;
           R1 = Hp - 14;
           Sp = Sp + 112;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5qRZ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qRZ: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.57193478 UTC

[section ""data" . Data.OldList.zip7_closure" {
     Data.OldList.zip7_closure:
         const Data.OldList.zip7_info;
 },
 Data.OldList.zip7_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qU1: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.OldList.zip7_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2,
                                        R1) args: 24, res: 0, upd: 8;
     }
 },
 Data.OldList.zip7_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c5qU5,
                       label: Data.OldList.zip7_info
                       rep:HeapRep static {
                             Fun {arity: 7
                                  fun_type: ArgGen [False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qU5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5qU6; else goto c5qU7;
       c5qU6: // global
           R1 = Data.OldList.zip7_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c5qU7: // global
           _B3::P64 = R6;
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Tuple.(,,,,,,)_closure+7;
           P64[Sp - 8] = _B3::P64;
           Sp = Sp - 8;
           call Data.OldList.zipWith7_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.581001804 UTC

[section ""data" . Data.OldList.$wunzip4_closure" {
     Data.OldList.$wunzip4_closure:
         const Data.OldList.$wunzip4_info;
 },
 ds_s5pvp_entry() //  [R1]
         { info_tbl: [(c5qUC,
                       label: ds_s5pvp_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qUC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5qUD; else goto c5qUE;
       c5qUD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qUE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5qUz_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wunzip4_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5qUz() //  [R1, R2, R3, R4]
         { info_tbl: [(c5qUz,
                       label: block_c5qUz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qUz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5qUH; else goto c5qUG;
       c5qUH: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       c5qUG: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wunzip4_entry() //  [R2]
         { info_tbl: [(c5qUM,
                       label: Data.OldList.$wunzip4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qUM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qUN; else goto c5qUO;
       c5qUN: // global
           R2 = R2;
           R1 = Data.OldList.$wunzip4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5qUO: // global
           I64[Sp - 8] = block_c5qUk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qV4; else goto c5qUl;
       u5qV4: // global
           call _c5qUk(R1) args: 0, res: 0, upd: 0;
       c5qUl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qUk() //  [R1]
         { info_tbl: [(c5qUk,
                       label: block_c5qUk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qUk: // global
           if (R1 & 7 == 1) goto c5qUJ; else goto c5qUK;
       c5qUJ: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qUK: // global
           I64[Sp - 8] = block_c5qUq_info;
           _s5pvj::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5pvj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qV3; else goto c5qUr;
       u5qV3: // global
           call _c5qUq(R1) args: 0, res: 0, upd: 0;
       c5qUr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qUq() //  [R1]
         { info_tbl: [(c5qUq,
                       label: block_c5qUq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qUq: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto c5qV2; else goto c5qV1;
       c5qV2: // global
           HpAlloc = 216;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qV1: // global
           _s5pvl::P64 = P64[R1 + 7];
           _s5pvm::P64 = P64[R1 + 15];
           _s5pvn::P64 = P64[R1 + 23];
           _s5pvo::P64 = P64[R1 + 31];
           I64[Hp - 208] = ds_s5pvp_info;
           P64[Hp - 192] = P64[Sp + 8];
           I64[Hp - 184] = stg_sel_3_upd_info;
           _c5qUv::P64 = Hp - 208;
           P64[Hp - 168] = _c5qUv::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = _s5pvo::P64;
           P64[Hp - 144] = Hp - 184;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _c5qUv::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _s5pvn::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5qUv::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5pvm::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5qUv::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pvl::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 158;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.602447958 UTC

[section ""data" . Data.OldList.unzip4_closure" {
     Data.OldList.unzip4_closure:
         const Data.OldList.unzip4_info;
 },
 Data.OldList.unzip4_entry() //  [R2]
         { info_tbl: [(c5qVY,
                       label: Data.OldList.unzip4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qVY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5qVZ; else goto c5qW0;
       c5qVZ: // global
           R2 = R2;
           R1 = Data.OldList.unzip4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5qW0: // global
           I64[Sp - 8] = block_c5qVV_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wunzip4_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5qVV() //  [R1, R2, R3, R4]
         { info_tbl: [(c5qVV,
                       label: block_c5qVV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qVV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c5qW3; else goto c5qW2;
       c5qW3: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       c5qW2: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.613461071 UTC

[section ""data" . Data.OldList.$wunzip5_closure" {
     Data.OldList.$wunzip5_closure:
         const Data.OldList.$wunzip5_info;
 },
 ds_s5pwd_entry() //  [R1]
         { info_tbl: [(c5qWD,
                       label: ds_s5pwd_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qWD: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5qWE; else goto c5qWF;
       c5qWE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qWF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5qWy_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wunzip5_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5qWy() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c5qWy,
                       label: block_c5qWy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qWy: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           P64[Sp] = R1;
           Sp = Sp - 40;
           call _c5qWz() args: 0, res: 0, upd: 0;
     }
 },
 _c5qWz() //  []
         { info_tbl: [(c5qWz,
                       label: block_c5qWz_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qWz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5qWI; else goto c5qWH;
       c5qWI: // global
           HpAlloc = 48;
           I64[Sp] = block_c5qWz_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c5qWH: // global
           I64[Hp - 40] = (,,,,)_con_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 39;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wunzip5_entry() //  [R2]
         { info_tbl: [(c5qWP,
                       label: Data.OldList.$wunzip5_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qWP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qWQ; else goto c5qWR;
       c5qWQ: // global
           R2 = R2;
           R1 = Data.OldList.$wunzip5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5qWR: // global
           I64[Sp - 8] = block_c5qWj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qX9; else goto c5qWk;
       u5qX9: // global
           call _c5qWj(R1) args: 0, res: 0, upd: 0;
       c5qWk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qWj() //  [R1]
         { info_tbl: [(c5qWj,
                       label: block_c5qWj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qWj: // global
           if (R1 & 7 == 1) goto c5qWM; else goto c5qWN;
       c5qWM: // global
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5qWN: // global
           I64[Sp - 8] = block_c5qWp_info;
           _s5pw6::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5pw6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qX8; else goto c5qWq;
       u5qX8: // global
           call _c5qWp(R1) args: 0, res: 0, upd: 0;
       c5qWq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qWp() //  [R1]
         { info_tbl: [(c5qWp,
                       label: block_c5qWp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qWp: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c5qX7; else goto c5qX6;
       c5qX7: // global
           HpAlloc = 264;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qX6: // global
           _s5pw8::P64 = P64[R1 + 7];
           _s5pw9::P64 = P64[R1 + 15];
           _s5pwa::P64 = P64[R1 + 23];
           _s5pwb::P64 = P64[R1 + 31];
           _s5pwc::P64 = P64[R1 + 39];
           I64[Hp - 256] = ds_s5pwd_info;
           P64[Hp - 240] = P64[Sp + 8];
           I64[Hp - 232] = stg_sel_4_upd_info;
           _c5qWu::P64 = Hp - 256;
           P64[Hp - 216] = _c5qWu::P64;
           I64[Hp - 208] = :_con_info;
           P64[Hp - 200] = _s5pwc::P64;
           P64[Hp - 192] = Hp - 232;
           I64[Hp - 184] = stg_sel_3_upd_info;
           P64[Hp - 168] = _c5qWu::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = _s5pwb::P64;
           P64[Hp - 144] = Hp - 184;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _c5qWu::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _s5pwa::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5qWu::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5pw9::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5qWu::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pw8::P64;
           P64[Hp] = Hp - 40;
           R5 = Hp - 206;
           R4 = Hp - 158;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.635950916 UTC

[section ""data" . Data.OldList.unzip5_closure" {
     Data.OldList.unzip5_closure:
         const Data.OldList.unzip5_info;
 },
 Data.OldList.unzip5_entry() //  [R2]
         { info_tbl: [(c5qYi,
                       label: Data.OldList.unzip5_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qYi: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5qYj; else goto c5qYk;
       c5qYj: // global
           R2 = R2;
           R1 = Data.OldList.unzip5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5qYk: // global
           I64[Sp - 8] = block_c5qYd_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wunzip5_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5qYd() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c5qYd,
                       label: block_c5qYd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qYd: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           P64[Sp] = R1;
           Sp = Sp - 40;
           call _c5qYe() args: 0, res: 0, upd: 0;
     }
 },
 _c5qYe() //  []
         { info_tbl: [(c5qYe,
                       label: block_c5qYe_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qYe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5qYn; else goto c5qYm;
       c5qYn: // global
           HpAlloc = 48;
           I64[Sp] = block_c5qYe_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c5qYm: // global
           I64[Hp - 40] = (,,,,)_con_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 39;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.6445091 UTC

[section ""data" . Data.OldList.$wunzip6_closure" {
     Data.OldList.$wunzip6_closure:
         const Data.OldList.$wunzip6_info;
 },
 ds_s5pxg_entry() //  [R1]
         { info_tbl: [(c5qZ8,
                       label: ds_s5pxg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qZ8: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c5qZ9; else goto c5qZa;
       c5qZ9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5qZa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5qZ3_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wunzip6_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5qZ3() //  [R1, R2, R3, R4, R5, R6]
         { info_tbl: [(c5qZ3,
                       label: block_c5qZ3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qZ3: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R1;
           Sp = Sp - 48;
           call _c5qZ4() args: 0, res: 0, upd: 0;
     }
 },
 _c5qZ4() //  []
         { info_tbl: [(c5qZ4,
                       label: block_c5qZ4_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qZ4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5qZd; else goto c5qZc;
       c5qZd: // global
           HpAlloc = 56;
           I64[Sp] = block_c5qZ4_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c5qZc: // global
           I64[Hp - 48] = (,,,,,)_con_info;
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wunzip6_entry() //  [R2]
         { info_tbl: [(c5qZk,
                       label: Data.OldList.$wunzip6_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qZk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5qZl; else goto c5qZm;
       c5qZl: // global
           R2 = R2;
           R1 = Data.OldList.$wunzip6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5qZm: // global
           I64[Sp - 8] = block_c5qYO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qZG; else goto c5qYP;
       u5qZG: // global
           call _c5qYO(R1) args: 0, res: 0, upd: 0;
       c5qYP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qYO() //  [R1]
         { info_tbl: [(c5qYO,
                       label: block_c5qYO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qYO: // global
           if (R1 & 7 == 1) goto c5qZh; else goto c5qZi;
       c5qZh: // global
           R6 = GHC.Types.[]_closure+1;
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R6,
                               R5,
                               R4,
                               R3,
                               R2,
                               R1) args: 8, res: 0, upd: 8;
       c5qZi: // global
           I64[Sp - 8] = block_c5qYU_info;
           _s5px8::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5px8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5qZF; else goto c5qYV;
       u5qZF: // global
           call _c5qYU(R1) args: 0, res: 0, upd: 0;
       c5qYV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5qYU() //  [R1]
         { info_tbl: [(c5qYU,
                       label: block_c5qYU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5qYU: // global
           Hp = Hp + 312;
           if (Hp > HpLim) (likely: False) goto c5qZE; else goto c5qZD;
       c5qZE: // global
           HpAlloc = 312;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5qZD: // global
           _s5pxa::P64 = P64[R1 + 7];
           _s5pxb::P64 = P64[R1 + 15];
           _s5pxc::P64 = P64[R1 + 23];
           _s5pxd::P64 = P64[R1 + 31];
           _s5pxe::P64 = P64[R1 + 39];
           _s5pxf::P64 = P64[R1 + 47];
           I64[Hp - 304] = ds_s5pxg_info;
           P64[Hp - 288] = P64[Sp + 8];
           I64[Hp - 280] = stg_sel_5_upd_info;
           _c5qYZ::P64 = Hp - 304;
           P64[Hp - 264] = _c5qYZ::P64;
           I64[Hp - 256] = :_con_info;
           P64[Hp - 248] = _s5pxf::P64;
           P64[Hp - 240] = Hp - 280;
           I64[Hp - 232] = stg_sel_4_upd_info;
           P64[Hp - 216] = _c5qYZ::P64;
           I64[Hp - 208] = :_con_info;
           P64[Hp - 200] = _s5pxe::P64;
           P64[Hp - 192] = Hp - 232;
           I64[Hp - 184] = stg_sel_3_upd_info;
           P64[Hp - 168] = _c5qYZ::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = _s5pxd::P64;
           P64[Hp - 144] = Hp - 184;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _c5qYZ::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _s5pxc::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5qYZ::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5pxb::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5qYZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pxa::P64;
           P64[Hp] = Hp - 40;
           R6 = Hp - 254;
           R5 = Hp - 206;
           R4 = Hp - 158;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R6,
                               R5,
                               R4,
                               R3,
                               R2,
                               R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.668498059 UTC

[section ""data" . Data.OldList.unzip6_closure" {
     Data.OldList.unzip6_closure:
         const Data.OldList.unzip6_info;
 },
 Data.OldList.unzip6_entry() //  [R2]
         { info_tbl: [(c5r0U,
                       label: Data.OldList.unzip6_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r0U: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c5r0V; else goto c5r0W;
       c5r0V: // global
           R2 = R2;
           R1 = Data.OldList.unzip6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5r0W: // global
           I64[Sp - 8] = block_c5r0P_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wunzip6_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5r0P() //  [R1, R2, R3, R4, R5, R6]
         { info_tbl: [(c5r0P,
                       label: block_c5r0P_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r0P: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R1;
           Sp = Sp - 48;
           call _c5r0Q() args: 0, res: 0, upd: 0;
     }
 },
 _c5r0Q() //  []
         { info_tbl: [(c5r0Q,
                       label: block_c5r0Q_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r0Q: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5r0Z; else goto c5r0Y;
       c5r0Z: // global
           HpAlloc = 56;
           I64[Sp] = block_c5r0Q_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c5r0Y: // global
           I64[Hp - 48] = (,,,,,)_con_info;
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.680146991 UTC

[section ""data" . Data.OldList.$wunzip7_closure" {
     Data.OldList.$wunzip7_closure:
         const Data.OldList.$wunzip7_info;
 },
 ds_s5pyA_entry() //  [R1]
         { info_tbl: [(c5r1L,
                       label: ds_s5pyA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r1L: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c5r1M; else goto c5r1N;
       c5r1M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5r1N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5r1G_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.OldList.$wunzip7_entry(R2) args: 8, res: 16, upd: 24;
     }
 },
 _c5r1G() //  [R1, R2, R3, R4, R5, R6]
         { info_tbl: [(c5r1G,
                       label: block_c5r1G_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r1G: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 8] = R1;
           Sp = Sp - 48;
           call _c5r1H() args: 0, res: 0, upd: 0;
     }
 },
 _c5r1H() //  []
         { info_tbl: [(c5r1H,
                       label: block_c5r1H_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r1H: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5r1Q; else goto c5r1P;
       c5r1Q: // global
           HpAlloc = 64;
           I64[Sp] = block_c5r1H_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c5r1P: // global
           I64[Hp - 56] = (,,,,,,)_con_info;
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 55;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$wunzip7_entry() //  [R2]
         { info_tbl: [(c5r1X,
                       label: Data.OldList.$wunzip7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r1X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5r1Y; else goto c5r1Z;
       c5r1Y: // global
           R2 = R2;
           R1 = Data.OldList.$wunzip7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5r1Z: // global
           I64[Sp - 8] = block_c5r1r_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5r2l; else goto c5r1s;
       u5r2l: // global
           call _c5r1r(R1) args: 0, res: 0, upd: 0;
       c5r1s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5r1r() //  [R1]
         { info_tbl: [(c5r1r,
                       label: block_c5r1r_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r1r: // global
           if (R1 & 7 == 1) goto c5r1U; else goto c5r1V;
       c5r1U: // global
           R6 = GHC.Types.[]_closure+1;
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           P64[Sp] = GHC.Types.[]_closure+1;
           call (I64[P64[Sp + 8]])(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
       c5r1V: // global
           I64[Sp - 8] = block_c5r1x_info;
           _s5pyr::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5pyr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5r2k; else goto c5r1y;
       u5r2k: // global
           call _c5r1x(R1) args: 0, res: 0, upd: 0;
       c5r1y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5r1x() //  [R1]
         { info_tbl: [(c5r1x,
                       label: block_c5r1x_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r1x: // global
           Hp = Hp + 360;
           if (Hp > HpLim) (likely: False) goto c5r2j; else goto c5r2i;
       c5r2j: // global
           HpAlloc = 360;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5r2i: // global
           _s5pyt::P64 = P64[R1 + 7];
           _s5pyu::P64 = P64[R1 + 15];
           _s5pyv::P64 = P64[R1 + 23];
           _s5pyw::P64 = P64[R1 + 31];
           _s5pyx::P64 = P64[R1 + 39];
           _s5pyy::P64 = P64[R1 + 47];
           _s5pyz::P64 = P64[R1 + 55];
           I64[Hp - 352] = ds_s5pyA_info;
           P64[Hp - 336] = P64[Sp + 8];
           I64[Hp - 328] = stg_sel_6_upd_info;
           _c5r1C::P64 = Hp - 352;
           P64[Hp - 312] = _c5r1C::P64;
           I64[Hp - 304] = :_con_info;
           P64[Hp - 296] = _s5pyz::P64;
           P64[Hp - 288] = Hp - 328;
           I64[Hp - 280] = stg_sel_5_upd_info;
           P64[Hp - 264] = _c5r1C::P64;
           I64[Hp - 256] = :_con_info;
           P64[Hp - 248] = _s5pyy::P64;
           P64[Hp - 240] = Hp - 280;
           I64[Hp - 232] = stg_sel_4_upd_info;
           P64[Hp - 216] = _c5r1C::P64;
           I64[Hp - 208] = :_con_info;
           P64[Hp - 200] = _s5pyx::P64;
           P64[Hp - 192] = Hp - 232;
           I64[Hp - 184] = stg_sel_3_upd_info;
           P64[Hp - 168] = _c5r1C::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = _s5pyw::P64;
           P64[Hp - 144] = Hp - 184;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _c5r1C::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _s5pyv::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _c5r1C::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _s5pyu::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5r1C::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pyt::P64;
           P64[Hp] = Hp - 40;
           R6 = Hp - 254;
           R5 = Hp - 206;
           R4 = Hp - 158;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           P64[Sp + 8] = Hp - 302;
           Sp = Sp + 8;
           call (I64[P64[Sp + 8]])(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.705590796 UTC

[section ""data" . Data.OldList.unzip7_closure" {
     Data.OldList.unzip7_closure:
         const Data.OldList.unzip7_info;
 },
 Data.OldList.unzip7_entry() //  [R2]
         { info_tbl: [(c5r3G,
                       label: Data.OldList.unzip7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r3G: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5r3H; else goto c5r3I;
       c5r3H: // global
           R2 = R2;
           R1 = Data.OldList.unzip7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5r3I: // global
           I64[Sp - 8] = block_c5r3B_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$wunzip7_entry(R2) args: 8, res: 16, upd: 8;
     }
 },
 _c5r3B() //  [R1, R2, R3, R4, R5, R6]
         { info_tbl: [(c5r3B,
                       label: block_c5r3B_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r3B: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 8] = R1;
           Sp = Sp - 48;
           call _c5r3C() args: 0, res: 0, upd: 0;
     }
 },
 _c5r3C() //  []
         { info_tbl: [(c5r3C,
                       label: block_c5r3C_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r3C: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c5r3L; else goto c5r3K;
       c5r3L: // global
           HpAlloc = 64;
           I64[Sp] = block_c5r3C_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c5r3K: // global
           I64[Hp - 56] = (,,,,,,)_con_info;
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 55;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.71933421 UTC

[section ""data" . Data.OldList.groupBy_closure" {
     Data.OldList.groupBy_closure:
         const Data.OldList.groupBy_info;
 },
 ds2_s5pA5_entry() //  [R1]
         { info_tbl: [(c5r4s,
                       label: ds2_s5pA5_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r4s: // global
           _s5pA5::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5r4t; else goto c5r4u;
       c5r4u: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5r4w; else goto c5r4v;
       c5r4w: // global
           HpAlloc = 32;
           goto c5r4t;
       c5r4t: // global
           R1 = _s5pA5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5r4v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5pA5::P64;
           _s5pA0::P64 = P64[_s5pA5::P64 + 16];
           _s5pA3::P64 = P64[_s5pA5::P64 + 24];
           _s5pA4::P64 = P64[_s5pA5::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s5pA0::P64;
           P64[Hp] = _s5pA3::P64;
           I64[Sp - 24] = block_c5r4p_info;
           R3 = _s5pA4::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5r4p() //  [R1, R2]
         { info_tbl: [(c5r4p,
                       label: block_c5r4p_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r4p: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5r4z; else goto c5r4y;
       c5r4z: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5r4y: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5pAi_entry() //  [R1]
         { info_tbl: [(c5r4H,
                       label: sat_s5pAi_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r4H: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5r4I; else goto c5r4J;
       c5r4I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5r4J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c5r4E_info;
           _s5pA0::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s5pA0::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5r4N; else goto c5r4F;
       u5r4N: // global
           call _c5r4E(R1) args: 0, res: 0, upd: 0;
       c5r4F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5r4E() //  [R1]
         { info_tbl: [(c5r4E,
                       label: block_c5r4E_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r4E: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.OldList.groupBy_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.groupBy_entry() //  [R2, R3]
         { info_tbl: [(c5r4S,
                       label: Data.OldList.groupBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r4S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5r4T; else goto c5r4U;
       c5r4T: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.groupBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5r4U: // global
           I64[Sp - 16] = block_c5r4e_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5r53; else goto c5r4f;
       u5r53: // global
           call _c5r4e(R1) args: 0, res: 0, upd: 0;
       c5r4f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5r4e() //  [R1]
         { info_tbl: [(c5r4e,
                       label: block_c5r4e_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r4e: // global
           if (R1 & 7 == 1) goto c5r4P; else goto c5r4Q;
       c5r4P: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5r4Q: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c5r52; else goto c5r51;
       c5r52: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5r51: // global
           _s5pA3::P64 = P64[R1 + 6];
           _s5pA4::P64 = P64[R1 + 14];
           I64[Hp - 136] = ds2_s5pA5_info;
           _s5pA0::P64 = P64[Sp + 8];
           P64[Hp - 120] = _s5pA0::P64;
           P64[Hp - 112] = _s5pA3::P64;
           P64[Hp - 104] = _s5pA4::P64;
           I64[Hp - 96] = sat_s5pAi_info;
           P64[Hp - 80] = _s5pA0::P64;
           _c5r4k::P64 = Hp - 136;
           P64[Hp - 72] = _c5r4k::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _c5r4k::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5pA3::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.740190636 UTC

[section ""data" . Data.OldList.group_closure" {
     Data.OldList.group_closure:
         const Data.OldList.group_info;
 },
 sat_s5pAl_entry() //  [R1]
         { info_tbl: [(c5r5V,
                       label: sat_s5pAl_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r5V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5r5W; else goto c5r5X;
       c5r5W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5r5X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.group_entry() //  [R2, R3]
         { info_tbl: [(c5r5Y,
                       label: Data.OldList.group_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r5Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5r62; else goto c5r61;
       c5r62: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.group_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5r61: // global
           I64[Hp - 16] = sat_s5pAl_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.groupBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.746689866 UTC

[section ""data" . poly_tailsGo_r5kSn_closure" {
     poly_tailsGo_r5kSn_closure:
         const poly_tailsGo_r5kSn_info;
 },
 sat_s5pAq_entry() //  [R1]
         { info_tbl: [(c5r6s,
                       label: sat_s5pAq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r6s: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5r6t; else goto c5r6u;
       c5r6t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5r6u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5r6l_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5r6B; else goto c5r6m;
       u5r6B: // global
           call _c5r6l(R1) args: 0, res: 0, upd: 0;
       c5r6m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5r6l() //  [R1]
         { info_tbl: [(c5r6l,
                       label: block_c5r6l_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r6l: // global
           if (R1 & 7 == 1) goto c5r6p; else goto c5r6q;
       c5r6p: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5r6q: // global
           R2 = P64[R1 + 14];
           Sp = Sp + 8;
           call poly_tailsGo_r5kSn_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_tailsGo_r5kSn_entry() //  [R2]
         { info_tbl: [(c5r6D,
                       label: poly_tailsGo_r5kSn_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r6D: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5r6H; else goto c5r6G;
       c5r6H: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = poly_tailsGo_r5kSn_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5r6G: // global
           I64[Hp - 40] = sat_s5pAq_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.754510835 UTC

[section ""data" . Data.OldList.tails_closure" {
     Data.OldList.tails_closure:
         const Data.OldList.tails_info;
 },
 Data.OldList.tails_entry() //  [R2]
         { info_tbl: [(c5r78,
                       label: Data.OldList.tails_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r78: // global
           R2 = R2;
           call poly_tailsGo_r5kSn_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.759143431 UTC

[section ""data" . Data.OldList.nonEmptySubsequences_closure" {
     Data.OldList.nonEmptySubsequences_closure:
         const Data.OldList.nonEmptySubsequences_info;
 },
 go_s5pAx_entry() //  [R1, R2]
         { info_tbl: [(c5r7F,
                       label: go_s5pAx_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r7F: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5r7G; else goto c5r7H;
       c5r7G: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5r7H: // global
           I64[Sp - 24] = block_c5r7y_info;
           _s5pAx::P64 = R1;
           _s5pAu::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s5pAu::P64;
           P64[Sp - 8] = _s5pAx::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5r7U; else goto c5r7z;
       u5r7U: // global
           call _c5r7y(R1) args: 0, res: 0, upd: 0;
       c5r7z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5r7y() //  [R1]
         { info_tbl: [(c5r7y,
                       label: block_c5r7y_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r7y: // global
           if (R1 & 7 == 1) goto c5r7C; else goto c5r7D;
       c5r7C: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5r7D: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c5r7T; else goto c5r7S;
       c5r7T: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5r7S: // global
           _s5pAA::P64 = P64[R1 + 6];
           _s5pAB::P64 = P64[R1 + 14];
           I64[Hp - 96] = stg_ap_2_upd_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = _s5pAB::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = _s5pAA::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 62;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pAA::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5pAG_entry() //  [R1]
         { info_tbl: [(c5r7X,
                       label: sat_s5pAG_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r7X: // global
           _s5pAG::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c5r7Y; else goto c5r7Z;
       c5r7Z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5r81; else goto c5r80;
       c5r81: // global
           HpAlloc = 16;
           goto c5r7Y;
       c5r7Y: // global
           R1 = _s5pAG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5r80: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5pAG::P64;
           _s5pAu::P64 = P64[_s5pAG::P64 + 16];
           _s5pAv::P64 = P64[_s5pAG::P64 + 24];
           I64[Hp - 8] = go_s5pAx_info;
           P64[Hp] = _s5pAu::P64;
           I64[Sp - 32] = block_c5r7V_info;
           R2 = _s5pAv::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Data.OldList.nonEmptySubsequences_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5r7V() //  [R1]
         { info_tbl: [(c5r7V,
                       label: block_c5r7V_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r7V: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s5pAx_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.nonEmptySubsequences_entry() //  [R2]
         { info_tbl: [(c5r89,
                       label: Data.OldList.nonEmptySubsequences_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r89: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5r8a; else goto c5r8b;
       c5r8a: // global
           R2 = R2;
           R1 = Data.OldList.nonEmptySubsequences_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5r8b: // global
           I64[Sp - 8] = block_c5r7j_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5r8j; else goto c5r7k;
       u5r8j: // global
           call _c5r7j(R1) args: 0, res: 0, upd: 0;
       c5r7k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5r7j() //  [R1]
         { info_tbl: [(c5r7j,
                       label: block_c5r7j_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r7j: // global
           if (R1 & 7 == 1) goto c5r86; else goto c5r87;
       c5r86: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5r87: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5r8i; else goto c5r8h;
       c5r8i: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5r8h: // global
           _s5pAu::P64 = P64[R1 + 6];
           _s5pAv::P64 = P64[R1 + 14];
           I64[Hp - 72] = sat_s5pAG_info;
           P64[Hp - 56] = _s5pAu::P64;
           P64[Hp - 48] = _s5pAv::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5pAu::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.775162189 UTC

[section ""data" . Data.OldList.subsequences_closure" {
     Data.OldList.subsequences_closure:
         const Data.OldList.subsequences_info;
 },
 sat_s5pAI_entry() //  [R1]
         { info_tbl: [(c5r9m,
                       label: sat_s5pAI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r9m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5r9n; else goto c5r9o;
       c5r9n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5r9o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.nonEmptySubsequences_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.subsequences_entry() //  [R2]
         { info_tbl: [(c5r9q,
                       label: Data.OldList.subsequences_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r9q: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5r9u; else goto c5r9t;
       c5r9u: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.OldList.subsequences_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5r9t: // global
           I64[Hp - 40] = sat_s5pAI_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.784695952 UTC

[section ""data" . Data.OldList.permutations1_closure" {
     Data.OldList.permutations1_closure:
         const Data.OldList.permutations1_info;
 },
 sat_s5pAY_entry() //  [R1, R2]
         { info_tbl: [(c5raf,
                       label: sat_s5pAY_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5raf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5raj; else goto c5rai;
       c5raj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rai: // global
           _s5pAP::P64 = P64[R1 + 7];
           _s5pAT::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pAT::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s5pAP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 ds2_s5pAV_entry() //  [R1]
         { info_tbl: [(c5ran,
                       label: ds2_s5pAV_info
                       rep:HeapRep 5 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ran: // global
           _s5pAV::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5rao; else goto c5rap;
       c5rap: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rar; else goto c5raq;
       c5rar: // global
           HpAlloc = 24;
           goto c5rao;
       c5rao: // global
           R1 = _s5pAV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5raq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5pAV::P64;
           _s5pAO::P64 = P64[_s5pAV::P64 + 16];
           _s5pAP::P64 = P64[_s5pAV::P64 + 24];
           _s5pAR::P64 = P64[_s5pAV::P64 + 32];
           _s5pAT::P64 = P64[_s5pAV::P64 + 40];
           _s5pAU::P64 = P64[_s5pAV::P64 + 48];
           I64[Hp - 16] = sat_s5pAY_info;
           P64[Hp - 8] = _s5pAP::P64;
           P64[Hp] = _s5pAT::P64;
           I64[Sp - 24] = block_c5rak_info;
           R4 = _s5pAR::P64;
           R3 = _s5pAU::P64;
           R2 = Hp - 15;
           R1 = _s5pAO::P64;
           Sp = Sp - 24;
           call $winterleave'_s5pAO_entry(R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5rak() //  [R1, R2]
         { info_tbl: [(c5rak,
                       label: block_c5rak_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rak: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rau; else goto c5rat;
       c5rau: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5rat: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5pB9_entry() //  [R1]
         { info_tbl: [(c5raD,
                       label: sat_s5pB9_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5raD: // global
           _s5pB9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5raE; else goto c5raF;
       c5raF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5raH; else goto c5raG;
       c5raH: // global
           HpAlloc = 48;
           goto c5raE;
       c5raE: // global
           R1 = _s5pB9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5raG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5pB9::P64;
           _s5pAM::P64 = P64[_s5pB9::P64 + 16];
           _s5pAP::P64 = P64[_s5pB9::P64 + 24];
           _s5pAT::P64 = P64[_s5pB9::P64 + 32];
           _s5pB2::P64 = P64[_s5pB9::P64 + 40];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5pAT::P64;
           P64[Hp - 24] = _s5pB2::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pAM::P64;
           P64[Hp] = Hp - 38;
           R2 = Hp - 14;
           R1 = _s5pAP::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 $winterleave'_s5pAO_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c5raM,
                       label: $winterleave'_s5pAO_info
                       rep:HeapRep 2 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5raM: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5raN; else goto c5raO;
       c5raN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5raO: // global
           I64[Sp - 48] = block_c5r9Z_info;
           _s5pAO::P64 = R1;
           _s5pAM::P64 = P64[R1 + 5];
           _s5pAN::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 40] = _s5pAM::P64;
           P64[Sp - 32] = _s5pAN::P64;
           P64[Sp - 24] = _s5pAO::P64;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u5raW; else goto c5ra0;
       u5raW: // global
           call _c5r9Z(R1) args: 0, res: 0, upd: 0;
       c5ra0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5r9Z() //  [R1]
         { info_tbl: [(c5r9Z,
                       label: block_c5r9Z_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r9Z: // global
           _s5pAR::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c5raJ; else goto c5raK;
       c5raJ: // global
           R2 = _s5pAR::P64;
           R1 = P64[Sp + 16];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c5raK: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c5raV; else goto c5raU;
       c5raV: // global
           HpAlloc = 200;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5raU: // global
           _s5pAT::P64 = P64[R1 + 6];
           _s5pAU::P64 = P64[R1 + 14];
           I64[Hp - 192] = ds2_s5pAV_info;
           P64[Hp - 176] = P64[Sp + 24];
           _s5pAP::P64 = P64[Sp + 32];
           P64[Hp - 168] = _s5pAP::P64;
           P64[Hp - 160] = _s5pAR::P64;
           P64[Hp - 152] = _s5pAT::P64;
           P64[Hp - 144] = _s5pAU::P64;
           I64[Hp - 136] = stg_sel_0_upd_info;
           _c5ra5::P64 = Hp - 192;
           P64[Hp - 120] = _c5ra5::P64;
           I64[Hp - 112] = stg_sel_1_upd_info;
           P64[Hp - 96] = _c5ra5::P64;
           I64[Hp - 88] = sat_s5pB9_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _s5pAP::P64;
           P64[Hp - 56] = _s5pAT::P64;
           _c5rav::P64 = Hp - 136;
           P64[Hp - 48] = _c5rav::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 88;
           P64[Hp - 24] = Hp - 112;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pAT::P64;
           P64[Hp] = _c5rav::P64;
           R2 = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 z_s5pBf_entry() //  [R1]
         { info_tbl: [(c5rb2,
                       label: z_s5pBf_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rb2: // global
           _s5pBf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5rb3; else goto c5rb4;
       c5rb4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rb6; else goto c5rb5;
       c5rb6: // global
           HpAlloc = 24;
           goto c5rb3;
       c5rb3: // global
           R1 = _s5pBf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rb5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5pBf::P64;
           _s5pAK::P64 = P64[_s5pBf::P64 + 16];
           _s5pAM::P64 = P64[_s5pBf::P64 + 24];
           _s5pAN::P64 = P64[_s5pBf::P64 + 32];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pAM::P64;
           P64[Hp] = _s5pAK::P64;
           R3 = Hp - 14;
           R2 = _s5pAN::P64;
           Sp = Sp - 16;
           call Data.OldList.permutations1_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 go_s5pBh_entry() //  [R1, R2]
         { info_tbl: [(c5rbj,
                       label: go_s5pBh_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rbj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5rbk; else goto c5rbl;
       c5rbk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rbl: // global
           I64[Sp - 32] = block_c5rbc_info;
           _s5pBh::P64 = R1;
           _s5pAO::P64 = P64[R1 + 7];
           _s5pBf::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s5pAO::P64;
           P64[Sp - 16] = _s5pBf::P64;
           P64[Sp - 8] = _s5pBh::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5rby; else goto c5rbd;
       u5rby: // global
           call _c5rbc(R1) args: 0, res: 0, upd: 0;
       c5rbd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rbc() //  [R1]
         { info_tbl: [(c5rbc,
                       label: block_c5rbc_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rbc: // global
           if (R1 & 7 == 1) goto c5rbg; else goto c5rbh;
       c5rbg: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5rbh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5rbv; else goto c5rbu;
       c5rbv: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5rbu: // global
           _s5pBk::P64 = P64[R1 + 6];
           _s5pBl::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s5pBl::P64;
           I64[Sp + 24] = block_c5rbs_info;
           R4 = Hp - 24;
           R3 = _s5pBk::P64;
           R2 = GHC.Base.id_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call $winterleave'_s5pAO_entry(R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rbs() //  [R2]
         { info_tbl: [(c5rbs,
                       label: block_c5rbs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rbs: // global
           R1 = R2 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5pBq_entry() //  [R1]
         { info_tbl: [(c5rbD,
                       label: sat_s5pBq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rbD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5rbE; else goto c5rbF;
       c5rbE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rbF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.permutations1_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.permutations1_entry() //  [R2, R3]
         { info_tbl: [(c5rbK,
                       label: Data.OldList.permutations1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rbK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5rbL; else goto c5rbM;
       c5rbL: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.permutations1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5rbM: // global
           I64[Sp - 16] = block_c5r9O_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5rbT; else goto c5r9P;
       u5rbT: // global
           call _c5r9O(R1) args: 0, res: 0, upd: 0;
       c5r9P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5r9O() //  [R1]
         { info_tbl: [(c5r9O,
                       label: block_c5r9O_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5r9O: // global
           if (R1 & 7 == 1) goto c5rbH; else goto c5rbI;
       c5rbH: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5rbI: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c5rbS; else goto c5rbR;
       c5rbS: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5rbR: // global
           _s5pAM::P64 = P64[R1 + 6];
           _s5pAN::P64 = P64[R1 + 14];
           I64[Hp - 128] = $winterleave'_s5pAO_info;
           P64[Hp - 120] = _s5pAM::P64;
           P64[Hp - 112] = _s5pAN::P64;
           I64[Hp - 104] = z_s5pBf_info;
           _s5pAK::P64 = P64[Sp + 8];
           P64[Hp - 88] = _s5pAK::P64;
           P64[Hp - 80] = _s5pAM::P64;
           P64[Hp - 72] = _s5pAN::P64;
           I64[Hp - 64] = go_s5pBh_info;
           P64[Hp - 56] = Hp - 125;
           P64[Hp - 48] = Hp - 104;
           I64[Hp - 40] = sat_s5pBq_info;
           P64[Hp - 24] = _s5pAK::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pAK::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           R1 = Hp - 63;
           Sp = Sp + 16;
           call go_s5pBh_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.817786565 UTC

[section ""data" . Data.OldList.permutations_closure" {
     Data.OldList.permutations_closure:
         const Data.OldList.permutations_info;
 },
 sat_s5pBt_entry() //  [R1]
         { info_tbl: [(c5rdH,
                       label: sat_s5pBt_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rdH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5rdI; else goto c5rdJ;
       c5rdI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rdJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.permutations1_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.permutations_entry() //  [R2]
         { info_tbl: [(c5rdL,
                       label: Data.OldList.permutations_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rdL: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5rdP; else goto c5rdO;
       c5rdP: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.OldList.permutations_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rdO: // global
           I64[Hp - 40] = sat_s5pBt_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.824686117 UTC

[section ""data" . lvl6_r5kSo_closure" {
     lvl6_r5kSo_closure:
         const :_con_info;
         const GHC.Types.[]_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.833843102 UTC

[section ""data" . Data.OldList.sortBy_closure" {
     Data.OldList.sortBy_closure:
         const Data.OldList.sortBy_info;
 },
 merge_s5pBw_entry() //  [R1, R2, R3]
         { info_tbl: [(c5rf0,
                       label: merge_s5pBw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rf0: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5rf1; else goto c5rf2;
       c5rf1: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5rf2: // global
           I64[Sp - 32] = block_c5reT_info;
           _s5pBw::P64 = R1;
           _s5pBu::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 24] = _s5pBu::P64;
           P64[Sp - 16] = _s5pBw::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5rfH; else goto c5reU;
       u5rfH: // global
           call _c5reT(R1) args: 0, res: 0, upd: 0;
       c5reU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5reT() //  [R1]
         { info_tbl: [(c5reT,
                       label: block_c5reT_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5reT: // global
           _s5pBy::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c5reX; else goto c5reY;
       c5reX: // global
           R1 = _s5pBy::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5reY: // global
           I64[Sp - 16] = block_c5rf8_info;
           _s5pBz::P64 = R1;
           _s5pBA::P64 = P64[R1 + 6];
           _s5pBB::P64 = P64[R1 + 14];
           R1 = _s5pBy::P64;
           P64[Sp - 8] = _s5pBB::P64;
           P64[Sp] = _s5pBA::P64;
           P64[Sp + 24] = _s5pBz::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5rfG; else goto c5rfa;
       u5rfG: // global
           call _c5rf8(R1) args: 0, res: 0, upd: 0;
       c5rfa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rf8() //  [R1]
         { info_tbl: [(c5rf8,
                       label: block_c5rf8_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rf8: // global
           if (R1 & 7 == 1) goto c5rfg; else goto c5rfl;
       c5rfg: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5rfl: // global
           I64[Sp - 16] = block_c5rfj_info;
           _s5pBD::P64 = P64[R1 + 6];
           R3 = _s5pBD::P64;
           R2 = P64[Sp + 16];
           _s5pBC::P64 = R1;
           _s5pBE::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp - 8] = _s5pBE::P64;
           P64[Sp] = _s5pBD::P64;
           P64[Sp + 24] = _s5pBC::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rfj() //  [R1]
         { info_tbl: [(c5rfj,
                       label: block_c5rfj_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rfj: // global
           _s5pBw::P64 = P64[Sp + 48];
           if (R1 & 7 == 3) goto c5rfA; else goto c5rfs;
       c5rfA: // global
           Hp = Hp + 64;
           _s5pBF::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5rfD; else goto c5rfC;
       c5rfC: // global
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _s5pBw::P64;
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5rfs: // global
           Hp = Hp + 64;
           _s5pBF::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5rfD; else goto c5rfu;
       c5rfD: // global
           HpAlloc = 64;
           R1 = _s5pBF::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5rfu: // global
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _s5pBw::P64;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 mergePairs_s5pBI_entry() //  [R1, R2]
         { info_tbl: [(c5rfS,
                       label: mergePairs_s5pBI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rfS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5rfT; else goto c5rfU;
       c5rfT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rfU: // global
           I64[Sp - 24] = block_c5rfL_info;
           _s5pBI::P64 = R1;
           _s5pBw::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s5pBw::P64;
           P64[Sp - 8] = _s5pBI::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5rgo; else goto c5rfM;
       u5rgo: // global
           call _c5rfL(R1) args: 0, res: 0, upd: 0;
       c5rfM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rfL() //  [R1]
         { info_tbl: [(c5rfL,
                       label: block_c5rfL_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rfL: // global
           if (R1 & 7 == 1) goto c5rfP; else goto c5rfQ;
       c5rfP: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5rfQ: // global
           I64[Sp - 16] = block_c5rg0_info;
           _s5pBK::P64 = R1;
           _s5pBL::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s5pBL::P64;
           P64[Sp] = _s5pBK::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5rgn; else goto c5rg2;
       u5rgn: // global
           call _c5rg0(R1) args: 0, res: 0, upd: 0;
       c5rg2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rg0() //  [R1]
         { info_tbl: [(c5rg0,
                       label: block_c5rg0_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rg0: // global
           if (R1 & 7 == 1) goto c5rg8; else goto c5rgi;
       c5rg8: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5rgi: // global
           I64[Sp + 16] = block_c5rgb_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           _s5pBP::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s5pBP::P64;
           Sp = Sp + 16;
           call merge_s5pBw_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rgb() //  [R1]
         { info_tbl: [(c5rgb,
                       label: block_c5rgb_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rgb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5rgl; else goto c5rgk;
       c5rgl: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5rgk: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl12_s5pBS_entry() //  [R1]
         { info_tbl: [(c5rgr,
                       label: lvl12_s5pBS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rgr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5rgs; else goto c5rgt;
       c5rgs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rgt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call mergePairs_s5pBI_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5pC5_entry() //  [R1, R2]
         { info_tbl: [(c5rgT,
                       label: sat_s5pC5_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rgT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rgX; else goto c5rgW;
       c5rgX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rgW: // global
           _s5pBZ::P64 = P64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pBZ::P64;
           P64[Hp] = R2;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sequences_s5pBT_entry() //  [R1, R2]
         { info_tbl: [(c5rh2,
                       label: sequences_s5pBT_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rh2: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c5rh3; else goto c5rh4;
       c5rh3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rh4: // global
           I64[Sp - 32] = block_c5rgx_info;
           _s5pBu::P64 = P64[R1 + 7];
           _s5pBV::P64 = P64[R1 + 15];
           _s5pBW::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s5pBu::P64;
           P64[Sp - 16] = _s5pBV::P64;
           P64[Sp - 8] = _s5pBW::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5rhw; else goto c5rgy;
       u5rhw: // global
           call _c5rgx(R1) args: 0, res: 0, upd: 0;
       c5rgy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rgx() //  [R1]
         { info_tbl: [(c5rgx,
                       label: block_c5rgx_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rgx: // global
           if (R1 & 7 == 1) goto c5rgZ; else goto c5rh0;
       c5rgZ: // global
           R1 = lvl6_r5kSo_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5rh0: // global
           I64[Sp - 16] = block_c5rgD_info;
           _s5pBY::P64 = R1;
           _s5pBZ::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s5pBZ::P64;
           P64[Sp] = _s5pBY::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5rhv; else goto c5rgE;
       u5rhv: // global
           call _c5rgD(R1) args: 0, res: 0, upd: 0;
       c5rgE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rgD() //  [R1]
         { info_tbl: [(c5rgD,
                       label: block_c5rgD_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rgD: // global
           if (R1 & 7 == 1) goto c5rhb; else goto c5rhg;
       c5rhb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rhe; else goto c5rhd;
       c5rhe: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5rhd: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5rhg: // global
           I64[Sp] = block_c5rgJ_info;
           _s5pC2::P64 = P64[R1 + 6];
           R3 = _s5pC2::P64;
           R2 = P64[Sp + 8];
           _s5pC3::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _s5pC3::P64;
           P64[Sp + 24] = _s5pC2::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rgJ() //  [R1]
         { info_tbl: [(c5rgJ,
                       label: block_c5rgJ_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rgJ: // global
           _s5pBZ::P64 = P64[Sp + 8];
           _s5pC2::P64 = P64[Sp + 24];
           _s5pC3::P64 = P64[Sp + 16];
           if (R1 & 7 == 3) goto c5rhp; else goto c5rhi;
       c5rhp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rhs; else goto c5rhr;
       c5rhs: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5rhr: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pBZ::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R4 = _s5pC3::P64;
           R3 = Hp - 14;
           R2 = _s5pC2::P64;
           R1 = P64[Sp + 32];
           Sp = Sp + 48;
           call descending_s5pBV_entry(R4,
                                       R3,
                                       R2,
                                       R1) args: 8, res: 0, upd: 8;
       c5rhi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5rhl; else goto c5rhk;
       c5rhl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5rhk: // global
           I64[Hp - 8] = sat_s5pC5_info;
           P64[Hp] = _s5pBZ::P64;
           R4 = _s5pC3::P64;
           R3 = Hp - 7;
           R2 = _s5pC2::P64;
           R1 = P64[Sp + 40];
           Sp = Sp + 48;
           call ascending_s5pBW_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl13_s5pBU_entry() //  [R1]
         { info_tbl: [(c5rhz,
                       label: lvl13_s5pBU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rhz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5rhA; else goto c5rhB;
       c5rhA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rhB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call sequences_s5pBT_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 descending_s5pBV_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c5rhG,
                       label: descending_s5pBV_info
                       rep:HeapRep 3 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rhG: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5rhH; else goto u5ri4;
       c5rhH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5ri4: // global
           P64[Sp - 32] = R1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call _c5rem() args: 0, res: 0, upd: 0;
     }
 },
 _c5rem() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rem: // global
           I64[Sp - 24] = block_c5rep_info;
           R1 = P64[Sp + 24];
           _s5pBV::P64 = P64[Sp];
           P64[Sp - 16] = P64[_s5pBV::P64 + 13];
           P64[Sp - 8] = P64[_s5pBV::P64 + 21];
           P64[Sp + 24] = P64[_s5pBV::P64 + 5];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5ri6; else goto c5req;
       u5ri6: // global
           call _c5rep(R1) args: 0, res: 0, upd: 0;
       c5req: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rep() //  [R1]
         { info_tbl: [(c5rep,
                       label: block_c5rep_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rep: // global
           _s5pC7::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5rhD; else goto c5rhE;
       c5rhD: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5rhO; else goto c5rhN;
       c5rhO: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5rhN: // global
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5pC7::P64;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5rhE: // global
           I64[Sp - 8] = block_c5rev_info;
           _s5pCc::P64 = P64[R1 + 6];
           R3 = _s5pCc::P64;
           R2 = _s5pC7::P64;
           _s5pCa::P64 = R1;
           _s5pCd::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5pCd::P64;
           P64[Sp + 16] = _s5pCc::P64;
           P64[Sp + 48] = _s5pCa::P64;
           Sp = Sp - 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rev() //  [R1]
         { info_tbl: [(c5rev,
                       label: block_c5rev_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rev: // global
           _s5pC7::P64 = P64[Sp + 40];
           _s5pC8::P64 = P64[Sp + 48];
           if (R1 & 7 == 3) goto c5rhZ; else goto c5rhV;
       c5rhZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5ri2; else goto c5ri1;
       c5ri2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ri1: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pC7::P64;
           P64[Hp] = _s5pC8::P64;
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = Hp - 14;
           P64[Sp + 56] = P64[Sp + 8];
           Sp = Sp + 32;
           call _c5rem() args: 0, res: 0, upd: 0;
       c5rhV: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5rhY; else goto c5rhX;
       c5rhY: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5rhX: // global
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 56];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s5pC7::P64;
           P64[Hp - 24] = _s5pC8::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5pCt_entry() //  [R1, R2]
         { info_tbl: [(c5rie,
                       label: sat_s5pCt_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rie: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rii; else goto c5rih;
       c5rii: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rih: // global
           _s5pCi::P64 = P64[R1 + 7];
           _s5pCj::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pCi::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s5pCj::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 ascending_s5pBW_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c5rin,
                       label: ascending_s5pBW_info
                       rep:HeapRep 3 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rin: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c5rio; else goto u5rj0;
       c5rio: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u5rj0: // global
           P64[Sp - 32] = R1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call _c5reC() args: 0, res: 0, upd: 0;
     }
 },
 _c5reC() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5reC: // global
           I64[Sp - 24] = block_c5reF_info;
           R1 = P64[Sp + 24];
           _s5pBW::P64 = P64[Sp];
           P64[Sp - 16] = P64[_s5pBW::P64 + 13];
           P64[Sp - 8] = P64[_s5pBW::P64 + 21];
           P64[Sp + 24] = P64[_s5pBW::P64 + 5];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5rj2; else goto c5reG;
       u5rj2: // global
           call _c5reF(R1) args: 0, res: 0, upd: 0;
       c5reG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5reF() //  [R1]
         { info_tbl: [(c5reF,
                       label: block_c5reF_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5reF: // global
           _s5pCi::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c5rik; else goto c5ril;
       c5rik: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5riz; else goto c5riy;
       c5riz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5riy: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pCi::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp + 8] = block_c5ris_info;
           R2 = Hp - 14;
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c5ril: // global
           I64[Sp - 8] = block_c5reL_info;
           _s5pCo::P64 = P64[R1 + 6];
           R3 = _s5pCo::P64;
           R2 = _s5pCi::P64;
           _s5pCl::P64 = R1;
           _s5pCp::P64 = P64[R1 + 14];
           R1 = P64[Sp + 48];
           P64[Sp] = _s5pCp::P64;
           P64[Sp + 16] = _s5pCo::P64;
           P64[Sp + 48] = _s5pCl::P64;
           Sp = Sp - 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ris() //  [R1]
         { info_tbl: [(c5ris,
                       label: block_c5ris_info
                       rep:StackRep [False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ris: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5riC; else goto c5riB;
       c5riC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5riB: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5reL() //  [R1]
         { info_tbl: [(c5reL,
                       label: block_c5reL_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5reL: // global
           _s5pCi::P64 = P64[Sp + 40];
           _s5pCj::P64 = P64[Sp + 48];
           if (R1 & 7 == 3) goto c5riS; else goto c5riF;
       c5riS: // global
           Hp = Hp + 24;
           _s5pCq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5riV; else goto c5riU;
       c5riU: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pCi::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp + 8] = block_c5riM_info;
           R2 = Hp - 14;
           R1 = _s5pCj::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c5riF: // global
           Hp = Hp + 24;
           _s5pCq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c5riV; else goto c5riH;
       c5riV: // global
           HpAlloc = 24;
           R1 = _s5pCq::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5riH: // global
           I64[Hp - 16] = sat_s5pCt_info;
           P64[Hp - 8] = _s5pCi::P64;
           P64[Hp] = _s5pCj::P64;
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = Hp - 15;
           P64[Sp + 56] = P64[Sp + 8];
           Sp = Sp + 32;
           call _c5reC() args: 0, res: 0, upd: 0;
     }
 },
 _c5riM() //  [R1]
         { info_tbl: [(c5riM,
                       label: block_c5riM_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5riM: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5riY; else goto c5riX;
       c5riY: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5riX: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 48];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.sortBy_entry() //  [R2, R3]
         { info_tbl: [(c5rj7,
                       label: Data.OldList.sortBy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rj7: // global
           _s5pBv::P64 = R3;
           _s5pBu::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c5rj8; else goto c5rj9;
       c5rj9: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c5rjb; else goto c5rja;
       c5rjb: // global
           HpAlloc = 176;
           goto c5rj8;
       c5rj8: // global
           R3 = _s5pBv::P64;
           R2 = _s5pBu::P64;
           R1 = Data.OldList.sortBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5rja: // global
           I64[Hp - 168] = merge_s5pBw_info;
           P64[Hp - 160] = _s5pBu::P64;
           I64[Hp - 152] = mergePairs_s5pBI_info;
           P64[Hp - 144] = Hp - 166;
           I64[Hp - 136] = lvl12_s5pBS_info;
           _c5reb::P64 = Hp - 151;
           P64[Hp - 120] = _c5reb::P64;
           I64[Hp - 112] = sequences_s5pBT_info;
           P64[Hp - 104] = _s5pBu::P64;
           P64[Hp - 96] = Hp - 53;
           P64[Hp - 88] = Hp - 21;
           I64[Hp - 80] = lvl13_s5pBU_info;
           _c5ref::P64 = Hp - 111;
           P64[Hp - 64] = _c5ref::P64;
           I64[Hp - 56] = descending_s5pBV_info;
           P64[Hp - 48] = _s5pBu::P64;
           P64[Hp - 40] = _c5ref::P64;
           _c5reg::P64 = Hp - 80;
           P64[Hp - 32] = _c5reg::P64;
           I64[Hp - 24] = ascending_s5pBW_info;
           P64[Hp - 16] = _s5pBu::P64;
           P64[Hp - 8] = _c5ref::P64;
           P64[Hp] = _c5reg::P64;
           I64[Sp - 24] = block_c5rj5_info;
           R2 = _s5pBv::P64;
           R1 = _c5ref::P64;
           P64[Sp - 16] = _c5reb::P64;
           P64[Sp - 8] = Hp - 136;
           Sp = Sp - 24;
           call sequences_s5pBT_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rj5() //  [R1]
         { info_tbl: [(c5rj5,
                       label: block_c5rj5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rj5: // global
           P64[Sp] = R1;
           call _c5rji() args: 0, res: 0, upd: 0;
     }
 },
 _c5rji() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rji: // global
           _s5pCy::P64 = P64[Sp];
           I64[Sp] = block_c5rjk_info;
           R1 = _s5pCy::P64;
           if (R1 & 7 != 0) goto u5rjU; else goto c5rjm;
       u5rjU: // global
           call _c5rjk(R1) args: 0, res: 0, upd: 0;
       c5rjm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rjk() //  [R1]
         { info_tbl: [(c5rjk,
                       label: block_c5rjk_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rjk: // global
           if (R1 & 7 == 1) goto c5rjs; else goto c5rjx;
       c5rjs: // global
           P64[Sp] = P64[Sp + 16];
           call _c5rji() args: 0, res: 0, upd: 0;
       c5rjx: // global
           I64[Sp - 16] = block_c5rjv_info;
           _s5pCz::P64 = R1;
           _s5pCA::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s5pCA::P64;
           P64[Sp] = _s5pCz::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5rjV; else goto c5rjy;
       u5rjV: // global
           call _c5rjv(R1) args: 0, res: 0, upd: 0;
       c5rjy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rjv() //  [R1]
         { info_tbl: [(c5rjv,
                       label: block_c5rjv_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rjv: // global
           if (R1 & 7 == 1) goto c5rjE; else goto c5rjJ;
       c5rjE: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5rjJ: // global
           _s5pCz::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c5rjH_info;
           R2 = _s5pCz::P64;
           R1 = P64[Sp + 24];
           Sp = Sp + 16;
           call mergePairs_s5pBI_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rjH() //  [R1]
         { info_tbl: [(c5rjH,
                       label: block_c5rjH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rjH: // global
           P64[Sp] = R1;
           call _c5rji() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.91537611 UTC

[section ""data" . Data.OldList.sortOn_closure" {
     Data.OldList.sortOn_closure:
         const Data.OldList.sortOn_info;
 },
 sat_s5pCX_entry() //  [R1, R2]
         { info_tbl: [(c5ron,
                       label: sat_s5pCX_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ron: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5roo; else goto c5rop;
       c5roo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rop: // global
           I64[Sp - 16] = block_c5rok_info;
           _s5pCV::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s5pCV::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rok() //  [R1]
         { info_tbl: [(c5rok,
                       label: block_c5rok_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rok: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5ros; else goto c5ror;
       c5ros: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5ror: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5pCU_entry() //  [R1, R2, R3]
         { info_tbl: [(c5roE,
                       label: sat_s5pCU_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5roE: // global
           _s5pCL::P64 = R3;
           _s5pCK::P64 = R2;
           _s5pCU::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c5roF; else goto c5roG;
       c5roG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5roI; else goto c5roH;
       c5roI: // global
           HpAlloc = 48;
           goto c5roF;
       c5roF: // global
           R3 = _s5pCL::P64;
           R2 = _s5pCK::P64;
           R1 = _s5pCU::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5roH: // global
           _s5pCH::P64 = P64[_s5pCU::P64 + 6];
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _s5pCL::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s5pCK::P64;
           R2 = _s5pCH::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 Data.OldList.sortOn_entry() //  [R2, R3, R4]
         { info_tbl: [(c5roJ,
                       label: Data.OldList.sortOn_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5roJ: // global
           _s5pCJ::P64 = R4;
           _s5pCI::P64 = R3;
           _s5pCH::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c5roL; else goto c5roM;
       c5roM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5roO; else goto c5roN;
       c5roO: // global
           HpAlloc = 16;
           goto c5roL;
       c5roL: // global
           R4 = _s5pCJ::P64;
           R3 = _s5pCI::P64;
           R2 = _s5pCH::P64;
           R1 = Data.OldList.sortOn_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5roN: // global
           I64[Hp - 8] = sat_s5pCX_info;
           P64[Hp] = _s5pCI::P64;
           I64[Sp - 16] = block_c5rot_info;
           R3 = _s5pCJ::P64;
           R2 = Hp - 7;
           P64[Sp - 8] = _s5pCH::P64;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5rot() //  [R1]
         { info_tbl: [(c5rot,
                       label: block_c5rot_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rot: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5roR; else goto c5roQ;
       c5roR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5roQ: // global
           I64[Hp - 8] = sat_s5pCU_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c5roK_info;
           R3 = R1;
           R2 = Hp - 6;
           Sp = Sp + 8;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5roK() //  [R1]
         { info_tbl: [(c5roK,
                       label: block_c5roK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5roK: // global
           R3 = R1;
           R2 = Data.Tuple.snd_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.930523091 UTC

[section ""data" . Data.OldList.sort_closure" {
     Data.OldList.sort_closure:
         const Data.OldList.sort_info;
 },
 sat_s5pD2_entry() //  [R1]
         { info_tbl: [(c5rpF,
                       label: sat_s5pD2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rpF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5rpG; else goto c5rpH;
       c5rpG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rpH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.sort_entry() //  [R2, R3]
         { info_tbl: [(c5rpI,
                       label: Data.OldList.sort_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rpI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rpM; else goto c5rpL;
       c5rpM: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.sort_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5rpL: // global
           I64[Hp - 16] = sat_s5pD2_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = Hp - 16;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.936847099 UTC

[section ""data" . Data.OldList.unfoldr_closure" {
     Data.OldList.unfoldr_closure:
         const Data.OldList.unfoldr_info;
 },
 go_s5pD5_entry() //  [R1, R2]
         { info_tbl: [(c5rqc,
                       label: go_s5pD5_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rqc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5rqd; else goto c5rqe;
       c5rqd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rqe: // global
           I64[Sp - 16] = block_c5rq6_info;
           R2 = R2;
           _s5pD5::P64 = R1;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s5pD5::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rq6() //  [R1]
         { info_tbl: [(c5rq6,
                       label: block_c5rq6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rq6: // global
           if (R1 & 7 == 1) goto c5rq9; else goto c5rqa;
       c5rq9: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5rqa: // global
           I64[Sp] = block_c5rqk_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u5rqv; else goto c5rql;
       u5rqv: // global
           call _c5rqk(R1) args: 0, res: 0, upd: 0;
       c5rql: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rqk() //  [R1]
         { info_tbl: [(c5rqk,
                       label: block_c5rqk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rqk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5rqu; else goto c5rqt;
       c5rqu: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5rqt: // global
           _s5pDa::P64 = P64[R1 + 7];
           _s5pDb::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s5pDb::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pDa::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.unfoldr_entry() //  [R2, R3]
         { info_tbl: [(c5rqw,
                       label: Data.OldList.unfoldr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rqw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5rqA; else goto c5rqz;
       c5rqA: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.unfoldr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5rqz: // global
           I64[Hp - 8] = go_s5pD5_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go_s5pD5_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.947006177 UTC

[section ""data" . lvl7_r5kSp_closure" {
     lvl7_r5kSp_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.949616263 UTC

[section ""data" . Data.OldList.unlines_closure" {
     Data.OldList.unlines_closure:
         const Data.OldList.unlines_info;
 },
 sat_s5pDh_entry() //  [R1]
         { info_tbl: [(c5rrh,
                       label: sat_s5pDh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rrh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5rri; else goto c5rrj;
       c5rri: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rrj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.unlines_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.unlines_entry() //  [R2]
         { info_tbl: [(c5rro,
                       label: Data.OldList.unlines_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rro: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5rrp; else goto c5rrq;
       c5rrp: // global
           R2 = R2;
           R1 = Data.OldList.unlines_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rrq: // global
           I64[Sp - 8] = block_c5rr7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5rrx; else goto c5rr8;
       u5rrx: // global
           call _c5rr7(R1) args: 0, res: 0, upd: 0;
       c5rr8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rr7() //  [R1]
         { info_tbl: [(c5rr7,
                       label: block_c5rr7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rr7: // global
           if (R1 & 7 == 1) goto c5rrl; else goto c5rrm;
       c5rrl: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5rrm: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5rrw; else goto c5rrv;
       c5rrw: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5rrv: // global
           _s5pDf::P64 = P64[R1 + 6];
           _s5pDg::P64 = P64[R1 + 14];
           I64[Hp - 40] = sat_s5pDh_info;
           P64[Hp - 24] = _s5pDg::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl7_r5kSp_closure+1;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = _s5pDf::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:26.959864469 UTC

[section ""data" . Data.OldList.wordsFB_closure" {
     Data.OldList.wordsFB_closure:
         const Data.OldList.wordsFB_info;
 },
 ds_s5pDr_entry() //  [R1]
         { info_tbl: [(c5rsg,
                       label: ds_s5pDr_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rsg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5rsh; else goto c5rsi;
       c5rsh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rsi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5rsd_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.isSpace_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5rsd() //  [R1, R2]
         { info_tbl: [(c5rsd,
                       label: block_c5rsd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rsd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rsl; else goto c5rsk;
       c5rsl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5rsk: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5pDC_entry() //  [R1]
         { info_tbl: [(c5rst,
                       label: sat_s5pDC_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rst: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5rsu; else goto c5rsv;
       c5rsu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rsv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c5rsq_info;
           _s5pDm::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s5pDm::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5rsz; else goto c5rsr;
       u5rsz: // global
           call _c5rsq(R1) args: 0, res: 0, upd: 0;
       c5rsr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5rsq() //  [R1]
         { info_tbl: [(c5rsq,
                       label: block_c5rsq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rsq: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s5pDm_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 go_s5pDm_entry() //  [R1, R2]
         { info_tbl: [(c5rsE,
                       label: go_s5pDm_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rsE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c5rsF; else goto c5rsG;
       c5rsF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rsG: // global
           I64[Sp - 32] = block_c5rs4_info;
           R3 = R2;
           R2 = GHC.Unicode.isSpace_closure+1;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = R1;
           Sp = Sp - 32;
           call GHC.List.dropWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5rs4() //  [R1]
         { info_tbl: [(c5rs4,
                       label: block_c5rs4_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rs4: // global
           if (R1 & 7 == 1) goto c5rsB; else goto c5rsC;
       c5rsB: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c5rsC: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c5rsM; else goto c5rsL;
       c5rsM: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5rsL: // global
           I64[Hp - 72] = ds_s5pDr_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_s5pDC_info;
           P64[Hp - 32] = P64[Sp + 24];
           _c5rs9::P64 = Hp - 72;
           P64[Hp - 24] = _c5rs9::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c5rs9::P64;
           R3 = Hp - 48;
           R2 = Hp - 16;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.wordsFB_entry() //  [R2, R3, R4]
         { info_tbl: [(c5rsN,
                       label: Data.OldList.wordsFB_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rsN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rsR; else goto c5rsQ;
       c5rsR: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.wordsFB_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5rsQ: // global
           I64[Hp - 16] = go_s5pDm_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = R4;
           R1 = Hp - 15;
           call go_s5pDm_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Data.OldList.words_closure" {
     Data.OldList.words_closure:
         const Data.OldList.words_info;
 },
 ds_s5pDH_entry() //  [R1]
         { info_tbl: [(c5rt8,
                       label: ds_s5pDH_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rt8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5rt9; else goto c5rta;
       c5rt9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rta: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5rt5_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Unicode.isSpace_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5rt5() //  [R1, R2]
         { info_tbl: [(c5rt5,
                       label: block_c5rt5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rt5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rtd; else goto c5rtc;
       c5rtd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5rtc: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5pDS_entry() //  [R1]
         { info_tbl: [(c5rtl,
                       label: sat_s5pDS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rtl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5rtm; else goto c5rtn;
       c5rtm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rtn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5rti_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5rtr; else goto c5rtj;
       u5rtr: // global
           call _c5rti(R1) args: 0, res: 0, upd: 0;
       c5rtj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5rti() //  [R1]
         { info_tbl: [(c5rti,
                       label: block_c5rti_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rti: // global
           R2 = P64[R1 + 15];
           Sp = Sp + 8;
           call Data.OldList.words_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.words_entry() //  [R2]
         { info_tbl: [(c5rtw,
                       label: Data.OldList.words_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rtw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5rtx; else goto c5rty;
       c5rtx: // global
           R2 = R2;
           R1 = Data.OldList.words_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rty: // global
           I64[Sp - 8] = block_c5rsW_info;
           R3 = R2;
           R2 = GHC.Unicode.isSpace_closure+1;
           Sp = Sp - 8;
           call GHC.List.dropWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5rsW() //  [R1]
         { info_tbl: [(c5rsW,
                       label: block_c5rsW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rsW: // global
           if (R1 & 7 == 1) goto c5rtt; else goto c5rtu;
       c5rtt: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5rtu: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c5rtF; else goto c5rtE;
       c5rtF: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5rtE: // global
           I64[Hp - 88] = ds_s5pDH_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = sat_s5pDS_info;
           _c5rt1::P64 = Hp - 88;
           P64[Hp - 48] = _c5rt1::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5rt1::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.002678002 UTC

[section ""data" . lvl8_r5kSq_closure" {
     lvl8_r5kSq_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.005530906 UTC

[section ""data" . Data.OldList.unwordsFB_closure" {
     Data.OldList.unwordsFB_closure:
         const Data.OldList.unwordsFB_info;
 },
 sat_s5pDV_entry() //  [R1]
         { info_tbl: [(c5rve,
                       label: sat_s5pDV_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rve: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5rvf; else goto c5rvg;
       c5rvf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rvg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.unwordsFB_entry() //  [R2, R3]
         { info_tbl: [(c5rvi,
                       label: Data.OldList.unwordsFB_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rvi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5rvm; else goto c5rvl;
       c5rvm: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.unwordsFB_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5rvl: // global
           I64[Hp - 48] = sat_s5pDV_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl8_r5kSq_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.016098285 UTC

[section ""data" . Data.OldList.unwords_go_closure" {
     Data.OldList.unwords_go_closure:
         const Data.OldList.unwords_go_info;
 },
 sat_s5pE0_entry() //  [R1]
         { info_tbl: [(c5rvT,
                       label: sat_s5pE0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rvT: // global
           R2 = P64[R1 + 16];
           call Data.OldList.unwords_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5pE1_entry() //  [R1]
         { info_tbl: [(c5rvW,
                       label: sat_s5pE1_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rvW: // global
           _s5pE1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5rvX; else goto c5rvY;
       c5rvY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rw0; else goto c5rvZ;
       c5rw0: // global
           HpAlloc = 24;
           goto c5rvX;
       c5rvX: // global
           R1 = _s5pE1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rvZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5pE1::P64;
           _s5pDY::P64 = P64[_s5pE1::P64 + 16];
           _s5pDZ::P64 = P64[_s5pE1::P64 + 24];
           I64[Hp - 16] = sat_s5pE0_info;
           P64[Hp] = _s5pDZ::P64;
           R3 = Hp - 16;
           R2 = _s5pDY::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.unwords_go_entry() //  [R2]
         { info_tbl: [(c5rw5,
                       label: Data.OldList.unwords_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rw5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5rw6; else goto c5rw7;
       c5rw6: // global
           R2 = R2;
           R1 = Data.OldList.unwords_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rw7: // global
           I64[Sp - 8] = block_c5rvF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5rwe; else goto c5rvG;
       u5rwe: // global
           call _c5rvF(R1) args: 0, res: 0, upd: 0;
       c5rvG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rvF() //  [R1]
         { info_tbl: [(c5rvF,
                       label: block_c5rvF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rvF: // global
           if (R1 & 7 == 1) goto c5rw2; else goto c5rw3;
       c5rw2: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5rw3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c5rwd; else goto c5rwc;
       c5rwd: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5rwc: // global
           _s5pDY::P64 = P64[R1 + 6];
           _s5pDZ::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s5pE1_info;
           P64[Hp - 32] = _s5pDY::P64;
           P64[Hp - 24] = _s5pDZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl8_r5kSq_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.029981011 UTC

[section ""data" . Data.OldList.tailUnwords_closure" {
     Data.OldList.tailUnwords_closure:
         const Data.OldList.tailUnwords_info;
 },
 Data.OldList.tailUnwords_entry() //  [R2]
         { info_tbl: [(c5rwS,
                       label: Data.OldList.tailUnwords_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rwS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5rwT; else goto c5rwU;
       c5rwT: // global
           R2 = R2;
           R1 = Data.OldList.tailUnwords_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rwU: // global
           I64[Sp - 8] = block_c5rwL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5rx1; else goto c5rwM;
       u5rx1: // global
           call _c5rwL(R1) args: 0, res: 0, upd: 0;
       c5rwM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rwL() //  [R1]
         { info_tbl: [(c5rwL,
                       label: block_c5rwL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rwL: // global
           if (R1 & 7 == 1) goto c5rwP; else goto c5rwQ;
       c5rwP: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5rwQ: // global
           R1 = P64[R1 + 14] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Data.OldList.unwords_closure" {
     Data.OldList.unwords_closure:
         const Data.OldList.unwords_info;
 },
 sat_s5pEa_entry() //  [R1]
         { info_tbl: [(c5rxg,
                       label: sat_s5pEa_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rxg: // global
           R2 = P64[R1 + 16];
           call Data.OldList.unwords_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.OldList.unwords_entry() //  [R2]
         { info_tbl: [(c5rxn,
                       label: Data.OldList.unwords_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rxn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5rxo; else goto c5rxp;
       c5rxo: // global
           R2 = R2;
           R1 = Data.OldList.unwords_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rxp: // global
           I64[Sp - 8] = block_c5rx6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5rxv; else goto c5rx7;
       u5rxv: // global
           call _c5rx6(R1) args: 0, res: 0, upd: 0;
       c5rx7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rx6() //  [R1]
         { info_tbl: [(c5rx6,
                       label: block_c5rx6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rx6: // global
           if (R1 & 7 == 1) goto c5rxk; else goto c5rxl;
       c5rxk: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5rxl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rxu; else goto c5rxt;
       c5rxu: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5rxt: // global
           _s5pE8::P64 = P64[R1 + 6];
           _s5pE9::P64 = P64[R1 + 14];
           I64[Hp - 16] = sat_s5pEa_info;
           P64[Hp] = _s5pE9::P64;
           R3 = Hp - 16;
           R2 = _s5pE8::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.042335191 UTC

[section ""data" . lvl9_r5kSr_closure" {
     lvl9_r5kSr_closure:
         const lvl9_r5kSr_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r5kSr_entry() //  [R1]
         { info_tbl: [(c5rya,
                       label: lvl9_r5kSr_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rya: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5ryb; else goto c5ryc;
       c5ryb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ryc: // global
           (_c5ry7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5ry7::I64 == 0) goto c5ry9; else goto c5ry8;
       c5ry9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5ry8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5ry7::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.List.reverse1_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.046889264 UTC

[section ""data" . lvl10_r5kSs_closure" {
     lvl10_r5kSs_closure:
         const lvl10_r5kSs_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_r5kSs_entry() //  [R1]
         { info_tbl: [(c5ryt,
                       label: lvl10_r5kSs_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ryt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5ryu; else goto c5ryv;
       c5ryu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ryv: // global
           (_c5ryq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5ryq::I64 == 0) goto c5rys; else goto c5ryr;
       c5rys: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5ryr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5ryq::I64;
           R3 = lvl9_r5kSr_closure;
           R2 = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.053708074 UTC

[section ""data" . poly_$wgo_r5kSt_closure" {
     poly_$wgo_r5kSt_closure:
         const poly_$wgo_r5kSt_info;
         const 0;
 },
 poly_$wgo_r5kSt_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ryG: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2,
                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5pEp_entry() //  [R1]
         { info_tbl: [(c5rza,
                       label: sat_s5pEp_info
                       rep:HeapRep 3 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rza: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5rzb; else goto c5rzc;
       c5rzb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rzc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 32];
           R4 = P64[R1 + 16];
           R3 = I64[R1 + 40];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5pEn_entry() //  [R1]
         { info_tbl: [(c5rzl,
                       label: sat_s5pEn_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rzl: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5pEo_entry() //  [R1]
         { info_tbl: [(c5rzo,
                       label: sat_s5pEo_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rzo: // global
           _s5pEo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5rzp; else goto c5rzq;
       c5rzq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rzs; else goto c5rzr;
       c5rzs: // global
           HpAlloc = 24;
           goto c5rzp;
       c5rzp: // global
           R1 = _s5pEo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rzr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5pEo::P64;
           _s5pEd::P64 = P64[_s5pEo::P64 + 16];
           _s5pEm::P64 = P64[_s5pEo::P64 + 24];
           I64[Hp - 16] = sat_s5pEn_info;
           P64[Hp] = _s5pEm::P64;
           R3 = Hp - 16;
           R2 = _s5pEd::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5pEs_entry() //  [R1]
         { info_tbl: [(c5rzG,
                       label: sat_s5pEs_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rzG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rzK; else goto c5rzJ;
       c5rzK: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rzJ: // global
           _s5pEe::P64 = P64[R1 + 16];
           _s5pEg::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s5pEg::P64;
           P64[Hp] = _s5pEe::P64;
           R3 = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 b'_s5pEq_entry() //  [R1]
         { info_tbl: [(c5rzL,
                       label: b'_s5pEq_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rzL: // global
           _s5pEq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5rzM; else goto c5rzN;
       c5rzN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5rzP; else goto c5rzO;
       c5rzP: // global
           HpAlloc = 32;
           goto c5rzM;
       c5rzM: // global
           R1 = _s5pEq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rzO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5pEq::P64;
           _s5pEd::P64 = P64[_s5pEq::P64 + 16];
           _s5pEe::P64 = P64[_s5pEq::P64 + 24];
           _s5pEg::P64 = P64[_s5pEq::P64 + 32];
           I64[Hp - 24] = sat_s5pEs_info;
           P64[Hp - 8] = _s5pEe::P64;
           P64[Hp] = _s5pEg::P64;
           R3 = Hp - 24;
           R2 = _s5pEd::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5pEu_entry() //  [R1]
         { info_tbl: [(c5rzU,
                       label: sat_s5pEu_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rzU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5rzV; else goto c5rzW;
       c5rzV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rzW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = GHC.Types.[]_closure+1;
           R4 = P64[R1 + 24];
           R3 = I64[R1 + 32];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5pEt_entry() //  [R1]
         { info_tbl: [(c5rA1,
                       label: sat_s5pEt_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rA1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5rA2; else goto c5rA3;
       c5rA2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rA3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl9_r5kSr_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5pEy_entry() //  [R1]
         { info_tbl: [(c5rAa,
                       label: sat_s5pEy_info
                       rep:HeapRep 3 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rAa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5rAb; else goto c5rAc;
       c5rAb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rAc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 32];
           R4 = P64[R1 + 16];
           R3 = I64[R1 + 40];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s5pEw_entry() //  [R1]
         { info_tbl: [(c5rAl,
                       label: sat_s5pEw_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rAl: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5pEx_entry() //  [R1]
         { info_tbl: [(c5rAo,
                       label: sat_s5pEx_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rAo: // global
           _s5pEx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c5rAp; else goto c5rAq;
       c5rAq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rAs; else goto c5rAr;
       c5rAs: // global
           HpAlloc = 24;
           goto c5rAp;
       c5rAp: // global
           R1 = _s5pEx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rAr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s5pEx::P64;
           _s5pEd::P64 = P64[_s5pEx::P64 + 16];
           _s5pEv::P64 = P64[_s5pEx::P64 + 24];
           I64[Hp - 16] = sat_s5pEw_info;
           P64[Hp] = _s5pEv::P64;
           R3 = Hp - 16;
           R2 = _s5pEd::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_$wgo_r5kSt_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5rAx,
                       label: poly_$wgo_r5kSt_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rAx: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c5rAy; else goto c5rAz;
       c5rAy: // global
           R1 = poly_$wgo_r5kSt_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c5rAz: // global
           I64[Sp - 32] = block_c5ryK_info;
           R1 = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u5rB2; else goto c5ryL;
       u5rB2: // global
           call _c5ryK(R1) args: 0, res: 0, upd: 0;
       c5ryL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ryK() //  [R1]
         { info_tbl: [(c5ryK,
                       label: block_c5ryK_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ryK: // global
           if (R1 & 7 == 1) goto c5rAu; else goto c5rAv;
       c5rAu: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5rAv: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c5rAE; else goto c5rAD;
       c5rAE: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5rAD: // global
           _s5pEg::P64 = P64[R1 + 6];
           _s5pEh::P64 = P64[R1 + 14];
           _s5pEi::I64 = I64[Sp + 8] + 1;
           if (_s5pEi::I64 >= 255) goto c5rAR; else goto c5rAT;
       c5rAR: // global
           Hp = Hp - 128;
           _s5pEl::I64 = _s5pEi::I64 & (_s5pEi::I64 + 1);
           if (_s5pEl::I64 != 0) goto u5rAV; else goto u5rAU;
       u5rAV: // global
           I64[Sp - 16] = _s5pEi::I64;
           I64[Sp - 8] = _s5pEl::I64;
           P64[Sp] = _s5pEh::P64;
           P64[Sp + 8] = _s5pEg::P64;
           Sp = Sp - 16;
           call _c5rz3() args: 0, res: 0, upd: 0;
       u5rAU: // global
           I64[Sp - 16] = _s5pEi::I64;
           I64[Sp - 8] = _s5pEl::I64;
           P64[Sp] = _s5pEh::P64;
           P64[Sp + 8] = _s5pEg::P64;
           Sp = Sp - 16;
           call _c5rzv() args: 0, res: 0, upd: 0;
       c5rAT: // global
           I64[Hp - 120] = :_con_info;
           P64[Hp - 112] = _s5pEg::P64;
           P64[Hp - 104] = P64[Sp + 24];
           I64[Hp - 96] = sat_s5pEy_info;
           _s5pEd::P64 = P64[Sp + 16];
           P64[Hp - 80] = _s5pEd::P64;
           P64[Hp - 72] = _s5pEh::P64;
           _c5rA5::P64 = Hp - 118;
           P64[Hp - 64] = _c5rA5::P64;
           I64[Hp - 56] = _s5pEi::I64;
           I64[Hp - 48] = sat_s5pEx_info;
           P64[Hp - 32] = _s5pEd::P64;
           P64[Hp - 24] = _c5rA5::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5rz3() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rz3: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c5rAK; else goto c5rAJ;
       c5rAK: // global
           HpAlloc = 128;
           I64[Sp - 8] = block_c5rz2_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c5rAJ: // global
           I64[Hp - 120] = :_con_info;
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 40];
           I64[Hp - 96] = sat_s5pEp_info;
           _s5pEd::P64 = P64[Sp + 32];
           P64[Hp - 80] = _s5pEd::P64;
           P64[Hp - 72] = P64[Sp + 16];
           _c5rz5::P64 = Hp - 118;
           P64[Hp - 64] = _c5rz5::P64;
           I64[Hp - 56] = I64[Sp];
           I64[Hp - 48] = sat_s5pEo_info;
           P64[Hp - 32] = _s5pEd::P64;
           P64[Hp - 24] = _c5rz5::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5rz2() //  [R1]
         { info_tbl: [(c5rz2,
                       label: block_c5rz2_info
                       rep:StackRep [True, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rz2: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c5rz3() args: 0, res: 0, upd: 0;
     }
 },
 _c5rzv() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rzv: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c5rAP; else goto c5rAO;
       c5rAP: // global
           HpAlloc = 128;
           I64[Sp - 8] = block_c5rzu_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c5rAO: // global
           I64[Hp - 120] = b'_s5pEq_info;
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 24];
           I64[Hp - 80] = sat_s5pEu_info;
           P64[Hp - 64] = P64[Sp + 16];
           _c5rzx::P64 = Hp - 120;
           P64[Hp - 56] = _c5rzx::P64;
           I64[Hp - 48] = I64[Sp];
           I64[Hp - 40] = sat_s5pEt_info;
           P64[Hp - 24] = _c5rzx::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c5rzu() //  [R1]
         { info_tbl: [(c5rzu,
                       label: block_c5rzu_info
                       rep:StackRep [True, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rzu: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c5rzv() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.099680822 UTC

[section ""data" . Data.OldList.$winits_closure" {
     Data.OldList.$winits_closure:
         const Data.OldList.$winits_info;
         const 0;
 },
 sat_s5pEA_entry() //  [R1]
         { info_tbl: [(c5rD1,
                       label: sat_s5pEA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rD1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5rD2; else goto c5rD3;
       c5rD2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rD3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = GHC.Types.[]_closure+1;
           R4 = GHC.Types.[]_closure+1;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_$wgo_r5kSt_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.$winits_entry() //  [R2]
         { info_tbl: [(c5rD4,
                       label: Data.OldList.$winits_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rD4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rD8; else goto c5rD7;
       c5rD8: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.OldList.$winits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rD7: // global
           I64[Hp - 16] = sat_s5pEA_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = lvl10_r5kSs_closure;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.106867178 UTC

[section ""data" . Data.OldList.inits_closure" {
     Data.OldList.inits_closure:
         const Data.OldList.inits_info;
         const 0;
 },
 Data.OldList.inits_entry() //  [R2]
         { info_tbl: [(c5rDt,
                       label: Data.OldList.inits_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rDt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5rDu; else goto c5rDv;
       c5rDu: // global
           R2 = R2;
           R1 = Data.OldList.inits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rDv: // global
           I64[Sp - 8] = block_c5rDq_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.OldList.$winits_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5rDq() //  [R1, R2]
         { info_tbl: [(c5rDq,
                       label: block_c5rDq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rDq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5rDy; else goto c5rDx;
       c5rDy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5rDx: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.112637654 UTC

[section ""cstring" . Data.OldList.$tc'SnocBuilder3_bytes" {
     Data.OldList.$tc'SnocBuilder3_bytes:
         I8[] [39,83,110,111,99,66,117,105,108,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.115329628 UTC

[section ""data" . Data.OldList.$tc'SnocBuilder2_closure" {
     Data.OldList.$tc'SnocBuilder2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.OldList.$tc'SnocBuilder3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.118698572 UTC

[section ""cstring" . Data.OldList.$tcSnocBuilder2_bytes" {
     Data.OldList.$tcSnocBuilder2_bytes:
         I8[] [83,110,111,99,66,117,105,108,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.121114058 UTC

[section ""data" . Data.OldList.$tcSnocBuilder1_closure" {
     Data.OldList.$tcSnocBuilder1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.OldList.$tcSnocBuilder2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.123753604 UTC

[section ""cstring" . Data.OldList.$trModule2_bytes" {
     Data.OldList.$trModule2_bytes:
         I8[] [68,97,116,97,46,79,108,100,76,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.126390002 UTC

[section ""data" . Data.OldList.$trModule1_closure" {
     Data.OldList.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.OldList.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.128924492 UTC

[section ""cstring" . Data.OldList.$trModule4_bytes" {
     Data.OldList.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.131606112 UTC

[section ""data" . Data.OldList.$trModule3_closure" {
     Data.OldList.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.OldList.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.134300849 UTC

[section ""data" . Data.OldList.$trModule_closure" {
     Data.OldList.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.OldList.$trModule3_closure+1;
         const Data.OldList.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.137051007 UTC

[section ""data" . Data.OldList.$tcSnocBuilder_closure" {
     Data.OldList.$tcSnocBuilder_closure:
         const GHC.Types.TyCon_con_info;
         const Data.OldList.$trModule_closure+1;
         const Data.OldList.$tcSnocBuilder1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 17650604350574790456;
         const 3021529305462083578;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.1400861 UTC

[section ""data" . $krep_r5kSu_closure" {
     $krep_r5kSu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.142908193 UTC

[section ""data" . $krep1_r5kSv_closure" {
     $krep1_r5kSv_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.145338927 UTC

[section ""data" . $krep2_r5kSw_closure" {
     $krep2_r5kSw_closure:
         const :_con_info;
         const $krep1_r5kSv_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.147920461 UTC

[section ""data" . $krep3_r5kSx_closure" {
     $krep3_r5kSx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep2_r5kSw_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.150799708 UTC

[section ""data" . $krep4_r5kSy_closure" {
     $krep4_r5kSy_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.OldList.$tcSnocBuilder_closure+1;
         const $krep2_r5kSw_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.153933406 UTC

[section ""data" . $krep5_r5kSz_closure" {
     $krep5_r5kSz_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5kSx_closure+1;
         const $krep4_r5kSy_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.157606563 UTC

[section ""data" . $krep6_r5kSA_closure" {
     $krep6_r5kSA_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5kSx_closure+1;
         const $krep5_r5kSz_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.16032375 UTC

[section ""data" . Data.OldList.$tc'SnocBuilder1_closure" {
     Data.OldList.$tc'SnocBuilder1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r5kSu_closure+1;
         const $krep6_r5kSA_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.163133875 UTC

[section ""data" . Data.OldList.$tc'SnocBuilder_closure" {
     Data.OldList.$tc'SnocBuilder_closure:
         const GHC.Types.TyCon_con_info;
         const Data.OldList.$trModule_closure+1;
         const Data.OldList.$tc'SnocBuilder2_closure+1;
         const Data.OldList.$tc'SnocBuilder1_closure+4;
         const 6719263830224029004;
         const 9134053658265160069;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.166630708 UTC

[section ""data" . lvl11_r5kSB_closure" {
     lvl11_r5kSB_closure:
         const lvl11_r5kSB_info;
 },
 lvl11_r5kSB_entry() //  [R2]
         { info_tbl: [(c5rEa,
                       label: lvl11_r5kSB_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rEa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5rEb; else goto c5rEc;
       c5rEb: // global
           R2 = R2;
           R1 = lvl11_r5kSB_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rEc: // global
           I64[Sp - 8] = block_c5rE7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5rEk; else goto c5rE8;
       u5rEk: // global
           call _c5rE7(R1) args: 0, res: 0, upd: 0;
       c5rE8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rE7() //  [R1]
         { info_tbl: [(c5rE7,
                       label: block_c5rE7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rE7: // global
           if (I64[R1 + 7] == 10) goto c5rEj; else goto c5rEi;
       c5rEj: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5rEi: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.176616333 UTC

[section ""data" . Data.OldList.lines_closure" {
     Data.OldList.lines_closure:
         const Data.OldList.lines_info;
 },
 sat_s5pEU_entry() //  [R1]
         { info_tbl: [(c5rF0,
                       label: sat_s5pEU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rF0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5rF1; else goto c5rF2;
       c5rF1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rF2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5rET_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5rF9; else goto c5rEU;
       u5rF9: // global
           call _c5rET(R1) args: 0, res: 0, upd: 0;
       c5rEU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c5rET() //  [R1]
         { info_tbl: [(c5rET,
                       label: block_c5rET_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rET: // global
           if (R1 & 7 == 1) goto c5rEX; else goto c5rEY;
       c5rEX: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c5rEY: // global
           R2 = P64[R1 + 14];
           Sp = Sp + 8;
           call Data.OldList.lines_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 ds1_s5pEN_entry() //  [R1]
         { info_tbl: [(c5rFb,
                       label: ds1_s5pEN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rFb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5rFc; else goto c5rFd;
       c5rFc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5rFd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c5rEN_info;
           R3 = P64[R1 + 16];
           R2 = lvl11_r5kSB_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c5rEN() //  [R1, R2]
         { info_tbl: [(c5rEN,
                       label: block_c5rEN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rEN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5rFg; else goto c5rFf;
       c5rFg: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c5rFf: // global
           I64[Hp - 40] = sat_s5pEU_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.OldList.lines_entry() //  [R2]
         { info_tbl: [(c5rFl,
                       label: Data.OldList.lines_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rFl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5rFm; else goto c5rFn;
       c5rFm: // global
           R2 = R2;
           R1 = Data.OldList.lines_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5rFn: // global
           I64[Sp - 8] = block_c5rED_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5rFw; else goto c5rEE;
       u5rFw: // global
           call _c5rED(R1) args: 0, res: 0, upd: 0;
       c5rEE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5rED() //  [R1]
         { info_tbl: [(c5rED,
                       label: block_c5rED_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rED: // global
           if (R1 & 7 == 1) goto c5rFi; else goto c5rFj;
       c5rFi: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5rFj: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c5rFv; else goto c5rFu;
       c5rFv: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5rFu: // global
           I64[Hp - 88] = ds1_s5pEN_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c5rEJ::P64 = Hp - 88;
           P64[Hp - 48] = _c5rEJ::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c5rEJ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.19227452 UTC

[section ""data" . Data.OldList.SnocBuilder_closure" {
     Data.OldList.SnocBuilder_closure:
         const Data.OldList.SnocBuilder_info;
 },
 Data.OldList.SnocBuilder_entry() //  [R2, R3, R4]
         { info_tbl: [(c5rGo,
                       label: Data.OldList.SnocBuilder_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rGo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c5rGs; else goto c5rGr;
       c5rGs: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.OldList.SnocBuilder_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5rGr: // global
           I64[Hp - 24] = Data.OldList.SnocBuilder_con_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           I64[Hp] = R2;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.196270738 UTC

[Data.OldList.SnocBuilder_con_entry() //  [R1]
         { info_tbl: [(c5rGz,
                       label: Data.OldList.SnocBuilder_con_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,68,97,116,97,46,79,108,100,76,105,115,116,46,83,110,111,99,66,117,105,108,100,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5rGz: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.199507688 UTC

[section ""relreadonly" . S5qnM_srt" {
     S5qnM_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.OldList.maximumBy_closure;
         const Data.OldList.maximumBy1_closure;
         const Data.OldList.minimumBy_closure;
         const Data.OldList.minimumBy1_closure;
         const sat_s5ps2_closure;
         const Data.OldList.genericLength2_closure;
         const Data.OldList.genericLength1_closure;
         const Data.OldList.strictGenericLength_closure;
         const Data.OldList.genericLength_closure;
         const Data.OldList.genericTake_closure;
         const Data.OldList.genericReplicate_closure;
         const Data.OldList.genericDrop_closure;
         const Data.OldList.$wgenericSplitAt_closure;
         const Data.OldList.genericSplitAt_closure;
         const Data.OldList.genericIndex_closure;
         const lvl3_r5kSk_closure;
         const lvl5_r5kSm_closure;
         const lvl9_r5kSr_closure;
         const poly_$wgo_r5kSt_closure;
         const Data.OldList.$winits_closure;
         const lvl10_r5kSs_closure;
         const Data.OldList.inits_closure;
 }]

