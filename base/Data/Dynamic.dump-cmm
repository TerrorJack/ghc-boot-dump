
==================== Output Cmm ====================
2018-03-16 16:04:43.108917217 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:04:43.109573881 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic3_closure" {
     Data.Dynamic.$fExceptionDynamic3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.110164585 UTC

[section ""cstring" . Data.Dynamic.$fExceptionDynamic4_bytes" {
     Data.Dynamic.$fExceptionDynamic4_bytes:
         I8[] [60,60]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.110708987 UTC

[section ""cstring" . Data.Dynamic.$fExceptionDynamic2_bytes" {
     Data.Dynamic.$fExceptionDynamic2_bytes:
         I8[] [62,62]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.112278744 UTC

[section ""data" . Data.Dynamic.$w$cshowsPrec_closure" {
     Data.Dynamic.$w$cshowsPrec_closure:
         const Data.Dynamic.$w$cshowsPrec_info;
         const 0;
 },
 f_s9BhE_entry() //  [R1]
         { info_tbl: [(c9Blx,
                       label: f_s9BhE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Blx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Bly; else goto c9Blz;
       c9Bly: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Blz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           Sp = Sp - 16;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BhG_entry() //  [R1]
         { info_tbl: [(c9BlN,
                       label: sat_s9BhG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BlN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9BlO; else goto c9BlP;
       c9BlO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BlP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BhH_entry() //  [R1]
         { info_tbl: [(c9BlQ,
                       label: sat_s9BhH_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BlQ: // global
           _s9BhH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9BlR; else goto c9BlS;
       c9BlS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9BlU; else goto c9BlT;
       c9BlU: // global
           HpAlloc = 24;
           goto c9BlR;
       c9BlR: // global
           R1 = _s9BhH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BlT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9BhH::P64;
           _s9BhE::P64 = P64[_s9BhH::P64 + 16];
           _s9BhF::P64 = P64[_s9BhH::P64 + 24];
           I64[Hp - 16] = sat_s9BhG_info;
           P64[Hp] = _s9BhF::P64;
           R2 = Hp - 16;
           R1 = _s9BhE::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BhI_entry() //  [R1, R2]
         { info_tbl: [(c9BlV,
                       label: sat_s9BhI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BlV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9BlZ; else goto c9BlY;
       c9BlZ: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9BlY: // global
           _s9BhE::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s9BhH_info;
           P64[Hp - 8] = _s9BhE::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Dynamic.$w$cshowsPrec_entry() //  [R2]
         { info_tbl: [(c9Bm0,
                       label: Data.Dynamic.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bm0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Bm1; else goto c9Bm2;
       c9Bm1: // global
           R2 = R2;
           R1 = Data.Dynamic.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Bm2: // global
           I64[Sp - 8] = block_c9Blo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Bm6; else goto c9Blp;
       u9Bm6: // global
           call _c9Blo(R1) args: 0, res: 0, upd: 0;
       c9Blp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Blo() //  [R1]
         { info_tbl: [(c9Blo,
                       label: block_c9Blo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Blo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Bm5; else goto c9Bm4;
       c9Bm5: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Bm4: // global
           _s9BhC::P64 = P64[R1 + 7];
           I64[Hp - 32] = f_s9BhE_info;
           P64[Hp - 16] = _s9BhC::P64;
           I64[Hp - 8] = sat_s9BhI_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.114808537 UTC

[section ""data" . Data.Dynamic.$fShowDynamic_$cshowsPrec_closure" {
     Data.Dynamic.$fShowDynamic_$cshowsPrec_closure:
         const Data.Dynamic.$fShowDynamic_$cshowsPrec_info;
         const 0;
 },
 Data.Dynamic.$fShowDynamic_$cshowsPrec_entry() //  [R3]
         { info_tbl: [(c9Bmc,
                       label: Data.Dynamic.$fShowDynamic_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bmc: // global
           R2 = R3;
           call Data.Dynamic.$w$cshowsPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.115722428 UTC

[section ""data" . Data.Dynamic.toDyn_closure" {
     Data.Dynamic.toDyn_closure:
         const Data.Dynamic.toDyn_info;
 },
 Data.Dynamic.toDyn_entry() //  [R2, R3]
         { info_tbl: [(c9Bmk,
                       label: Data.Dynamic.toDyn_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bmk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Bmo; else goto c9Bmn;
       c9Bmo: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.toDyn_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Bmn: // global
           I64[Hp - 16] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.116956489 UTC

[section ""data" . Data.Dynamic.fromDyn_closure" {
     Data.Dynamic.fromDyn_closure:
         const Data.Dynamic.fromDyn_info;
         const 0;
 },
 Data.Dynamic.fromDyn_entry() //  [R2, R3, R4]
         { info_tbl: [(c9Bmw,
                       label: Data.Dynamic.fromDyn_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bmw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Bmx; else goto c9Bmy;
       c9Bmx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.fromDyn_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Bmy: // global
           I64[Sp - 24] = block_c9Bmt_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9BmO; else goto c9Bmu;
       u9BmO: // global
           call _c9Bmt(R1) args: 0, res: 0, upd: 0;
       c9Bmu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Bmt() //  [R1]
         { info_tbl: [(c9Bmt,
                       label: block_c9Bmt_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bmt: // global
           I64[Sp] = block_c9BmB_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9BmB() //  [R1]
         { info_tbl: [(c9BmB,
                       label: block_c9BmB_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BmB: // global
           if (R1 & 7 == 1) goto c9BmI; else goto c9BmM;
       c9BmI: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c9BmM: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.118675196 UTC

[section ""data" . Data.Dynamic.fromDynamic_closure" {
     Data.Dynamic.fromDynamic_closure:
         const Data.Dynamic.fromDynamic_info;
         const 0;
 },
 Data.Dynamic.fromDynamic_entry() //  [R2, R3]
         { info_tbl: [(c9BmW,
                       label: Data.Dynamic.fromDynamic_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BmW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9BmX; else goto c9BmY;
       c9BmX: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.fromDynamic_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9BmY: // global
           I64[Sp - 16] = block_c9BmT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Bnh; else goto c9BmU;
       u9Bnh: // global
           call _c9BmT(R1) args: 0, res: 0, upd: 0;
       c9BmU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BmT() //  [R1]
         { info_tbl: [(c9BmT,
                       label: block_c9BmT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BmT: // global
           I64[Sp] = block_c9Bn1_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Bn1() //  [R1]
         { info_tbl: [(c9Bn1,
                       label: block_c9Bn1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bn1: // global
           if (R1 & 7 == 1) goto c9Bn8; else goto c9Bnc;
       c9Bn8: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Bnc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Bnf; else goto c9Bne;
       c9Bnf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Bne: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.120643252 UTC

[section ""data" . lvl_r9Bhp_closure" {
     lvl_r9Bhp_closure:
         const lvl_r9Bhp_info;
         const 0;
         const 0;
         const 0;
 },
 lvl_r9Bhp_entry() //  [R1]
         { info_tbl: [(c9Bny,
                       label: lvl_r9Bhp_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bny: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c9Bnz; else goto c9BnA;
       c9Bnz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BnA: // global
           (_c9Bnl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Bnl::I64 == 0) goto c9Bnn; else goto c9Bnm;
       c9Bnn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Bnm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Bnl::I64;
           I64[Sp - 24] = block_c9Bno_info;
           R6 = 0;
           R5 = GHC.Types.$tcTYPE2_closure;
           R4 = GHC.Types.tr$ModuleGHCPrim_closure;
           R3 = 12502576999761269576;
           R2 = 16277905407886699876;
           P64[Sp - 40] = GHC.Types.$tcTYPE1_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Bno() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Bno,
                       label: block_c9Bno_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bno: // global
           I64[Sp - 40] = block_c9Bns_info;
           R6 = 0;
           _s9Bi3::P64 = R5;
           R5 = GHC.Types.$tc'LiftedRep1_closure;
           _s9Bi2::P64 = R4;
           R4 = GHC.Types.tr$ModuleGHCPrim_closure;
           _s9Bi1::P64 = R3;
           R3 = 5595830777317938557;
           _s9Bi0::I64 = R2;
           R2 = 16105171405184389724;
           P64[Sp - 56] = GHC.Types.$tc'AddrRep1_closure;
           P64[Sp - 48] = GHC.Types.[]_closure+1;
           I64[Sp - 32] = _s9Bi0::I64;
           P64[Sp - 24] = _s9Bi1::P64;
           P64[Sp - 16] = _s9Bi2::P64;
           P64[Sp - 8] = _s9Bi3::P64;
           I64[Sp] = R1;
           Sp = Sp - 56;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Bns() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Bns,
                       label: block_c9Bns_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bns: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Bnt() args: 0, res: 0, upd: 0;
     }
 },
 _c9Bnt() //  []
         { info_tbl: [(c9Bnt,
                       label: block_c9Bnt_info
                       rep:StackRep [True, False, False, False, True, True, False, False,
                                     False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bnt: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c9BnE; else goto c9BnD;
       c9BnE: // global
           HpAlloc = 96;
           I64[Sp] = block_c9Bnt_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9BnD: // global
           I64[Hp - 88] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = P64[Sp + 64];
           P64[Hp - 16] = P64[Sp + 72];
           I64[Hp - 8] = I64[Sp + 80];
           I64[Hp] = I64[Sp + 48];
           R3 = Hp - 86;
           R2 = Hp - 38;
           Sp = Sp + 88;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.128823295 UTC

[section ""data" . Data.Dynamic.dynApply_closure" {
     Data.Dynamic.dynApply_closure:
         const Data.Dynamic.dynApply_info;
         const 0;
 },
 Data.Dynamic.dynApply_entry() //  [R2, R3]
         { info_tbl: [(c9BnO,
                       label: Data.Dynamic.dynApply_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BnO: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c9BnP; else goto c9BnQ;
       c9BnP: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.dynApply_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9BnQ: // global
           I64[Sp - 16] = block_c9BnL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9BtX; else goto c9BnM;
       u9BtX: // global
           call _c9BnL(R1) args: 0, res: 0, upd: 0;
       c9BnM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BnL() //  [R1]
         { info_tbl: [(c9BnL,
                       label: block_c9BnL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BnL: // global
           I64[Sp - 8] = block_c9BnT_info;
           _s9Big::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9Big::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BtW; else goto c9BnV;
       u9BtW: // global
           call _c9BnT(R1) args: 0, res: 0, upd: 0;
       c9BnV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BnT() //  [R1]
         { info_tbl: [(c9BnT,
                       label: block_c9BnT_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BnT: // global
           if (R1 & 7 == 4) goto c9Bo6; else goto u9Btw;
       c9Bo6: // global
           I64[Sp - 8] = block_c9Bo4_info;
           _s9Bik::P64 = P64[R1 + 4];
           _s9Bil::P64 = P64[R1 + 12];
           R1 = P64[Sp + 16];
           P64[Sp] = _s9Bil::P64;
           P64[Sp + 16] = _s9Bik::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BtY; else goto c9Bo7;
       u9BtY: // global
           call _c9Bo4(R1) args: 0, res: 0, upd: 0;
       c9Bo7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9Btw: // global
           Sp = Sp + 24;
           call _c9Bt6() args: 0, res: 0, upd: 0;
     }
 },
 _c9Bo4() //  [R1]
         { info_tbl: [(c9Bo4,
                       label: block_c9Bo4_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bo4: // global
           I64[Sp] = block_c9Bob_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 15];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Bob() //  [R1]
         { info_tbl: [(c9Bob,
                       label: block_c9Bob_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bob: // global
           if (R1 & 7 == 1) goto u9Btx; else goto c9Bon;
       u9Btx: // global
           Sp = Sp + 32;
           call _c9Bt6() args: 0, res: 0, upd: 0;
       c9Bon: // global
           _s9Bil::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9Bol_info;
           R1 = _s9Bil::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Bu0; else goto c9Boo;
       u9Bu0: // global
           call _c9Bol(R1) args: 0, res: 0, upd: 0;
       c9Boo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Bol() //  [R1]
         { info_tbl: [(c9Bol,
                       label: block_c9Bol_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bol: // global
           _c9Bti::P64 = R1 & 7;
           if (_c9Bti::P64 < 3) goto u9Btp; else goto u9Btq;
       u9Btp: // global
           if (_c9Bti::P64 < 2) goto c9Bp0; else goto c9BqN;
       c9Bp0: // global
           I64[Sp - 8] = block_c9Bou_info;
           _s9Biq::P64 = R1;
           R1 = lvl_r9Bhp_closure;
           P64[Sp] = _s9Biq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Bu2; else goto c9Bp1;
       u9Bu2: // global
           call _c9Bou(R1) args: 0, res: 0, upd: 0;
       c9Bp1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9BqN: // global
           I64[Sp - 16] = block_c9Bpq_info;
           _s9Biq::P64 = R1;
           _s9BiT::P64 = P64[R1 + 22];
           R1 = lvl_r9Bhp_closure;
           P64[Sp - 8] = _s9BiT::P64;
           P64[Sp] = _s9Biq::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Bu3; else goto c9BqO;
       u9Bu3: // global
           call _c9Bpq(R1) args: 0, res: 0, upd: 0;
       c9BqO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9Btq: // global
           if (_c9Bti::P64 < 4) goto c9BsA; else goto c9Bt0;
       c9BsA: // global
           I64[Sp - 16] = block_c9Brd_info;
           _s9Biq::P64 = R1;
           _s9BjF::P64 = P64[R1 + 21];
           R1 = lvl_r9Bhp_closure;
           P64[Sp - 8] = _s9BjF::P64;
           P64[Sp] = _s9Biq::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Bu4; else goto c9BsB;
       u9Bu4: // global
           call _c9Brd(R1) args: 0, res: 0, upd: 0;
       c9BsB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Bt0: // global
           I64[Sp - 8] = block_c9BsY_info;
           R3 = Data.Typeable.Internal.$mApp1_closure;
           R2 = lvl_r9Bhp_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Bou() //  [R1]
         { info_tbl: [(c9Bou,
                       label: block_c9Bou_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bou: // global
           _c9Bto::P64 = R1 & 7;
           if (_c9Bto::P64 < 3) goto u9Btr; else goto c9Bpl;
       u9Btr: // global
           if (_c9Bto::P64 < 2) goto c9Bp8; else goto c9Bph;
       c9Bp8: // global
           I64[Sp] = block_c9Bp5_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9Bu5; else goto c9Bp9;
       u9Bu5: // global
           call _c9Bp5(R1) args: 0, res: 0, upd: 0;
       c9Bp9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Bph: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u9Bu7;
       c9Bpl: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u9Bu7;
       u9Bu7: // global
           call _s9Bir() args: 0, res: 0, upd: 0;
     }
 },
 _c9Bp5() //  [R1]
         { info_tbl: [(c9Bp5,
                       label: block_c9Bp5_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bp5: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s9Bir() args: 0, res: 0, upd: 0;
     }
 },
 _s9Bir() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s9Bir: // global
           I64[Sp - 8] = block_c9Boz_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Buy; else goto c9BoB;
       u9Buy: // global
           call _c9Boz(R1) args: 0, res: 0, upd: 0;
       c9BoB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Boz() //  [R1]
         { info_tbl: [(c9Boz,
                       label: block_c9Boz_info
                       rep:StackRep [True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Boz: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9BoH; else goto c9BoG;
       c9BoH: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BoG: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c9BoY; else goto u9BtB;
       c9BoY: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c9BoX; else goto u9BtC;
       c9BoX: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BtC: // global
           Sp = Sp + 48;
           goto u9Bu9;
       u9BtB: // global
           Sp = Sp + 48;
           goto u9Bu9;
       u9Bu9: // global
           call _c9Bss() args: 0, res: 0, upd: 0;
     }
 },
 _c9Bpq() //  [R1]
         { info_tbl: [(c9Bpq,
                       label: block_c9Bpq_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bpq: // global
           _c9Btm::P64 = R1 & 7;
           if (_c9Btm::P64 < 3) goto u9Bts; else goto c9Br8;
       u9Bts: // global
           if (_c9Btm::P64 < 2) goto c9BqV; else goto c9Br4;
       c9BqV: // global
           I64[Sp] = block_c9BqS_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9Bub; else goto c9BqW;
       u9Bub: // global
           call _c9BqS(R1) args: 0, res: 0, upd: 0;
       c9BqW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Br4: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u9Bud;
       c9Br8: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u9Bud;
       u9Bud: // global
           call _s9BiU() args: 0, res: 0, upd: 0;
     }
 },
 _c9BqS() //  [R1]
         { info_tbl: [(c9BqS,
                       label: block_c9BqS_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BqS: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s9BiU() args: 0, res: 0, upd: 0;
     }
 },
 _s9BiU() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s9BiU: // global
           I64[Sp - 8] = block_c9Bpv_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Buz; else goto c9Bpx;
       u9Buz: // global
           call _c9Bpv(R1) args: 0, res: 0, upd: 0;
       c9Bpx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Bpv() //  [R1]
         { info_tbl: [(c9Bpv,
                       label: block_c9Bpv_info
                       rep:StackRep [True, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bpv: // global
           _s9Big::P64 = P64[Sp + 40];
           _s9Bio::P64 = P64[Sp + 48];
           _s9Biq::P64 = P64[Sp + 32];
           _s9BiV::I64 = I64[Sp + 16];
           _s9BiW::I64 = I64[Sp + 8];
           _c9Btn::P64 = R1 & 7;
           if (_c9Btn::P64 < 3) goto u9Btt; else goto c9Bqq;
       u9Btt: // global
           if (_c9Btn::P64 < 2) goto c9BpE; else goto c9Bq3;
       c9BpE: // global
           I64[Sp] = block_c9BpB_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9Bue; else goto c9BpF;
       u9Bue: // global
           call _c9BpB(R1) args: 0, res: 0, upd: 0;
       c9BpF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Bq3: // global
           Hp = Hp + 72;
           _s9BiX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c9Bqv; else goto c9Bq7;
       c9Bq7: // global
           if (_s9BiV::I64 == I64[_s9BiX::P64 + 30]) goto c9Bqp; else goto u9BtI;
       c9Bqp: // global
           if (_s9BiW::I64 == I64[_s9BiX::P64 + 38]) goto c9Bqo; else goto u9BtJ;
       c9Bqo: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s9Big::P64;
           P64[Hp - 40] = _s9Bio::P64;
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = _s9Biq::P64;
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BtJ: // global
           Sp = Sp + 56;
           goto u9Bui;
       u9BtI: // global
           Sp = Sp + 56;
           goto u9Bui;
       c9Bqq: // global
           Hp = Hp + 72;
           _s9BiX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c9Bqv; else goto c9Bqu;
       c9Bqv: // global
           HpAlloc = 72;
           R1 = _s9BiX::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Bqu: // global
           if (_s9BiV::I64 == I64[_s9BiX::P64 + 29]) goto c9BqM; else goto u9BtK;
       c9BqM: // global
           if (_s9BiW::I64 == I64[_s9BiX::P64 + 37]) goto c9BqL; else goto u9BtL;
       c9BqL: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s9Big::P64;
           P64[Hp - 40] = _s9Bio::P64;
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = _s9Biq::P64;
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BtL: // global
           Sp = Sp + 56;
           goto u9Bui;
       u9BtK: // global
           Sp = Sp + 56;
           goto u9Bui;
       u9Bui: // global
           call _c9Bss() args: 0, res: 0, upd: 0;
     }
 },
 _c9BpB() //  [R1]
         { info_tbl: [(c9BpB,
                       label: block_c9BpB_info
                       rep:StackRep [True, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BpB: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9BpL; else goto c9BpK;
       c9BpL: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BpK: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c9Bq2; else goto u9BtG;
       c9Bq2: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c9Bq1; else goto u9BtH;
       c9Bq1: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BtH: // global
           Sp = Sp + 56;
           goto u9Buk;
       u9BtG: // global
           Sp = Sp + 56;
           goto u9Buk;
       u9Buk: // global
           call _c9Bss() args: 0, res: 0, upd: 0;
     }
 },
 _c9Brd() //  [R1]
         { info_tbl: [(c9Brd,
                       label: block_c9Brd_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Brd: // global
           _c9Btk::P64 = R1 & 7;
           if (_c9Btk::P64 < 3) goto u9Btu; else goto c9BsV;
       u9Btu: // global
           if (_c9Btk::P64 < 2) goto c9BsI; else goto c9BsR;
       c9BsI: // global
           I64[Sp] = block_c9BsF_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9Bum; else goto c9BsJ;
       u9Bum: // global
           call _c9BsF(R1) args: 0, res: 0, upd: 0;
       c9BsJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9BsR: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u9Buo;
       c9BsV: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u9Buo;
       u9Buo: // global
           call _s9BjG() args: 0, res: 0, upd: 0;
     }
 },
 _c9BsF() //  [R1]
         { info_tbl: [(c9BsF,
                       label: block_c9BsF_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BsF: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s9BjG() args: 0, res: 0, upd: 0;
     }
 },
 _s9BjG() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s9BjG: // global
           I64[Sp - 8] = block_c9Bri_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BuA; else goto c9Brk;
       u9BuA: // global
           call _c9Bri(R1) args: 0, res: 0, upd: 0;
       c9Brk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Bri() //  [R1]
         { info_tbl: [(c9Bri,
                       label: block_c9Bri_info
                       rep:StackRep [True, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bri: // global
           _s9Big::P64 = P64[Sp + 40];
           _s9Bio::P64 = P64[Sp + 48];
           _s9Biq::P64 = P64[Sp + 32];
           _s9BjH::I64 = I64[Sp + 16];
           _s9BjI::I64 = I64[Sp + 8];
           _c9Btl::P64 = R1 & 7;
           if (_c9Btl::P64 < 3) goto u9Btv; else goto c9Bsd;
       u9Btv: // global
           if (_c9Btl::P64 < 2) goto c9Brr; else goto c9BrQ;
       c9Brr: // global
           I64[Sp] = block_c9Bro_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9Bup; else goto c9Brs;
       u9Bup: // global
           call _c9Bro(R1) args: 0, res: 0, upd: 0;
       c9Brs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9BrQ: // global
           Hp = Hp + 72;
           _s9BjJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c9Bsi; else goto c9BrU;
       c9BrU: // global
           if (_s9BjH::I64 == I64[_s9BjJ::P64 + 30]) goto c9Bsc; else goto u9BtR;
       c9Bsc: // global
           if (_s9BjI::I64 == I64[_s9BjJ::P64 + 38]) goto c9Bsb; else goto u9BtS;
       c9Bsb: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s9Big::P64;
           P64[Hp - 40] = _s9Bio::P64;
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = _s9Biq::P64;
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BtS: // global
           Sp = Sp + 56;
           goto u9But;
       u9BtR: // global
           Sp = Sp + 56;
           goto u9But;
       c9Bsd: // global
           Hp = Hp + 72;
           _s9BjJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c9Bsi; else goto c9Bsh;
       c9Bsi: // global
           HpAlloc = 72;
           R1 = _s9BjJ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Bsh: // global
           if (_s9BjH::I64 == I64[_s9BjJ::P64 + 29]) goto c9Bsz; else goto u9BtT;
       c9Bsz: // global
           if (_s9BjI::I64 == I64[_s9BjJ::P64 + 37]) goto c9Bsy; else goto u9BtU;
       c9Bsy: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s9Big::P64;
           P64[Hp - 40] = _s9Bio::P64;
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = _s9Biq::P64;
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BtU: // global
           Sp = Sp + 56;
           goto u9But;
       u9BtT: // global
           Sp = Sp + 56;
           goto u9But;
       u9But: // global
           call _c9Bss() args: 0, res: 0, upd: 0;
     }
 },
 _c9Bro() //  [R1]
         { info_tbl: [(c9Bro,
                       label: block_c9Bro_info
                       rep:StackRep [True, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bro: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9Bry; else goto c9Brx;
       c9Bry: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Brx: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c9BrP; else goto u9BtP;
       c9BrP: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c9BrO; else goto u9BtQ;
       c9BrO: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BtQ: // global
           Sp = Sp + 56;
           goto u9Buv;
       u9BtP: // global
           Sp = Sp + 56;
           goto u9Buv;
       u9Buv: // global
           call _c9Bss() args: 0, res: 0, upd: 0;
     }
 },
 _c9Bss() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bss: // global
           Hp = Hp - 72;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9BsY() //  [R1]
         { info_tbl: [(c9BsY,
                       label: block_c9BsY_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BsY: // global
           if (R1 & 7 == 1) goto u9BtV; else goto c9Btc;
       u9BtV: // global
           Sp = Sp + 32;
           call _c9Bt6() args: 0, res: 0, upd: 0;
       c9Btc: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9Btf; else goto c9Bte;
       c9Btf: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Bte: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Bt6() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bt6: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.136957068 UTC

[section ""data" . Data.Dynamic.dynTypeRep_closure" {
     Data.Dynamic.dynTypeRep_closure:
         const Data.Dynamic.dynTypeRep_info;
 },
 Data.Dynamic.dynTypeRep_entry() //  [R2]
         { info_tbl: [(c9BuI,
                       label: Data.Dynamic.dynTypeRep_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BuI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9BuJ; else goto c9BuK;
       c9BuJ: // global
           R2 = R2;
           R1 = Data.Dynamic.dynTypeRep_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9BuK: // global
           I64[Sp - 8] = block_c9BuF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BuO; else goto c9BuG;
       u9BuO: // global
           call _c9BuF(R1) args: 0, res: 0, upd: 0;
       c9BuG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BuF() //  [R1]
         { info_tbl: [(c9BuF,
                       label: block_c9BuF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BuF: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.137962868 UTC

[section ""cstring" . Data.Dynamic.$trModule4_bytes" {
     Data.Dynamic.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.1384607 UTC

[section ""data" . Data.Dynamic.$trModule3_closure" {
     Data.Dynamic.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Dynamic.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.13899783 UTC

[section ""cstring" . Data.Dynamic.$trModule2_bytes" {
     Data.Dynamic.$trModule2_bytes:
         I8[] [68,97,116,97,46,68,121,110,97,109,105,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.139543692 UTC

[section ""data" . Data.Dynamic.$trModule1_closure" {
     Data.Dynamic.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Dynamic.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.140075669 UTC

[section ""data" . Data.Dynamic.$trModule_closure" {
     Data.Dynamic.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Dynamic.$trModule3_closure+1;
         const Data.Dynamic.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.140668015 UTC

[section ""data" . $krep_r9Bhq_closure" {
     $krep_r9Bhq_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.14122911 UTC

[section ""data" . $krep1_r9Bhr_closure" {
     $krep1_r9Bhr_closure:
         const :_con_info;
         const $krep_r9Bhq_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.141803931 UTC

[section ""data" . $krep2_r9Bhs_closure" {
     $krep2_r9Bhs_closure:
         const :_con_info;
         const GHC.Types.krep$*_closure;
         const $krep1_r9Bhr_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.142393584 UTC

[section ""data" . $krep3_r9Bht_closure" {
     $krep3_r9Bht_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Typeable.Internal.$tcTypeRep_closure;
         const $krep2_r9Bhs_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.142954079 UTC

[section ""cstring" . Data.Dynamic.$fExceptionDynamic7_bytes" {
     Data.Dynamic.$fExceptionDynamic7_bytes:
         I8[] [68,121,110,97,109,105,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.143526926 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic6_closure" {
     Data.Dynamic.$fExceptionDynamic6_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Dynamic.$fExceptionDynamic7_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.144145551 UTC

[section ""data" . Data.Dynamic.$tcDynamic_closure" {
     Data.Dynamic.$tcDynamic_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Dynamic.$trModule_closure+1;
         const Data.Dynamic.$fExceptionDynamic6_closure+1;
         const GHC.Types.krep$*_closure;
         const 12333845116585145369;
         const 13454739855111402131;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.144756887 UTC

[section ""data" . $krep4_r9Bhu_closure" {
     $krep4_r9Bhu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Dynamic.$tcDynamic_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.145416425 UTC

[section ""data" . $krep5_r9Bhv_closure" {
     $krep5_r9Bhv_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r9Bhq_closure+2;
         const $krep4_r9Bhu_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.145997145 UTC

[section ""data" . Data.Dynamic.$tc'Dynamic1_closure" {
     Data.Dynamic.$tc'Dynamic1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r9Bht_closure+1;
         const $krep5_r9Bhv_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.146583613 UTC

[section ""cstring" . Data.Dynamic.$tc'Dynamic3_bytes" {
     Data.Dynamic.$tc'Dynamic3_bytes:
         I8[] [39,68,121,110,97,109,105,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.14714922 UTC

[section ""data" . Data.Dynamic.$tc'Dynamic2_closure" {
     Data.Dynamic.$tc'Dynamic2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Dynamic.$tc'Dynamic3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.147724432 UTC

[section ""data" . Data.Dynamic.$tc'Dynamic_closure" {
     Data.Dynamic.$tc'Dynamic_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Dynamic.$trModule_closure+1;
         const Data.Dynamic.$tc'Dynamic2_closure+1;
         const Data.Dynamic.$tc'Dynamic1_closure+4;
         const 11394777848779697579;
         const 644307381671950132;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.148868453 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic5_closure" {
     Data.Dynamic.$fExceptionDynamic5_closure:
         const Data.Dynamic.$fExceptionDynamic5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Dynamic.$fExceptionDynamic5_entry() //  [R1]
         { info_tbl: [(c9Bv0,
                       label: Data.Dynamic.$fExceptionDynamic5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bv0: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Bv1; else goto c9Bv2;
       c9Bv1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Bv2: // global
           (_c9BuS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9BuS::I64 == 0) goto c9BuU; else goto c9BuT;
       c9BuU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9BuT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9BuS::I64;
           I64[Sp - 24] = block_c9BuV_info;
           R6 = 0;
           R5 = Data.Dynamic.$fExceptionDynamic6_closure+1;
           R4 = Data.Dynamic.$trModule_closure+1;
           R3 = 13454739855111402131;
           R2 = 12333845116585145369;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9BuV() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9BuV,
                       label: block_c9BuV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BuV: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9BuW() args: 0, res: 0, upd: 0;
     }
 },
 _c9BuW() //  []
         { info_tbl: [(c9BuW,
                       label: block_c9BuW_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BuW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Bv5; else goto c9Bv4;
       c9Bv5: // global
           HpAlloc = 48;
           I64[Sp] = block_c9BuW_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Bv4: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.150699719 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic1_closure" {
     Data.Dynamic.$fExceptionDynamic1_closure:
         const Data.Dynamic.$fExceptionDynamic1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Dynamic.$fExceptionDynamic1_entry() //  [R1]
         { info_tbl: [(c9Bve,
                       label: Data.Dynamic.$fExceptionDynamic1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bve: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Bvf; else goto c9Bvg;
       c9Bvf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Bvg: // global
           (_c9Bvb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Bvb::I64 == 0) goto c9Bvd; else goto c9Bvc;
       c9Bvd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Bvc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Bvb::I64;
           R2 = Data.Dynamic.$fExceptionDynamic2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.15197755 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic_$cshow_closure" {
     Data.Dynamic.$fExceptionDynamic_$cshow_closure:
         const Data.Dynamic.$fExceptionDynamic_$cshow_info;
         const 0;
 },
 sat_s9BkI_entry() //  [R1]
         { info_tbl: [(c9Bvu,
                       label: sat_s9BkI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bvu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9Bvv; else goto c9Bvw;
       c9Bvv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Bvw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Dynamic.$fExceptionDynamic1_closure;
           Sp = Sp - 32;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.Dynamic.$fExceptionDynamic_$cshow_entry() //  [R2]
         { info_tbl: [(c9Bvx,
                       label: Data.Dynamic.$fExceptionDynamic_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bvx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Bvy; else goto c9Bvz;
       c9Bvy: // global
           R2 = R2;
           R1 = Data.Dynamic.$fExceptionDynamic_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Bvz: // global
           I64[Sp - 8] = block_c9Bvl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BvD; else goto c9Bvm;
       u9BvD: // global
           call _c9Bvl(R1) args: 0, res: 0, upd: 0;
       c9Bvm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Bvl() //  [R1]
         { info_tbl: [(c9Bvl,
                       label: block_c9Bvl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bvl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9BvC; else goto c9BvB;
       c9BvC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BvB: // global
           _s9BkG::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s9BkI_info;
           P64[Hp] = _s9BkG::P64;
           R3 = Hp - 16;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.154229862 UTC

[section ""data" . Data.Dynamic.$fShowDynamic1_closure" {
     Data.Dynamic.$fShowDynamic1_closure:
         const Data.Dynamic.$fShowDynamic1_info;
         const 0;
 },
 f_s9BkN_entry() //  [R1]
         { info_tbl: [(c9BvR,
                       label: f_s9BkN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BvR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9BvS; else goto c9BvT;
       c9BvS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BvT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           Sp = Sp - 16;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BkP_entry() //  [R1]
         { info_tbl: [(c9Bw7,
                       label: sat_s9BkP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bw7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Bw8; else goto c9Bw9;
       c9Bw8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Bw9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BkQ_entry() //  [R1]
         { info_tbl: [(c9Bwa,
                       label: sat_s9BkQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bwa: // global
           _s9BkQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Bwb; else goto c9Bwc;
       c9Bwc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Bwe; else goto c9Bwd;
       c9Bwe: // global
           HpAlloc = 24;
           goto c9Bwb;
       c9Bwb: // global
           R1 = _s9BkQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Bwd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9BkQ::P64;
           _s9BkN::P64 = P64[_s9BkQ::P64 + 16];
           _s9BkO::P64 = P64[_s9BkQ::P64 + 24];
           I64[Hp - 16] = sat_s9BkP_info;
           P64[Hp] = _s9BkO::P64;
           R2 = Hp - 16;
           R1 = _s9BkN::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BkR_entry() //  [R1, R2]
         { info_tbl: [(c9Bwf,
                       label: sat_s9BkR_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bwf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Bwj; else goto c9Bwi;
       c9Bwj: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Bwi: // global
           _s9BkN::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s9BkQ_info;
           P64[Hp - 8] = _s9BkN::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Dynamic.$fShowDynamic1_entry() //  [R2]
         { info_tbl: [(c9Bwk,
                       label: Data.Dynamic.$fShowDynamic1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bwk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Bwl; else goto c9Bwm;
       c9Bwl: // global
           R2 = R2;
           R1 = Data.Dynamic.$fShowDynamic1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Bwm: // global
           I64[Sp - 8] = block_c9BvI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Bwq; else goto c9BvJ;
       u9Bwq: // global
           call _c9BvI(R1) args: 0, res: 0, upd: 0;
       c9BvJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BvI() //  [R1]
         { info_tbl: [(c9BvI,
                       label: block_c9BvI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BvI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Bwp; else goto c9Bwo;
       c9Bwp: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Bwo: // global
           _s9BkL::P64 = P64[R1 + 7];
           I64[Hp - 32] = f_s9BkN_info;
           P64[Hp - 16] = _s9BkL::P64;
           I64[Hp - 8] = sat_s9BkR_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.156555751 UTC

[section ""data" . Data.Dynamic.$fShowDynamic_$cshowList_closure" {
     Data.Dynamic.$fShowDynamic_$cshowList_closure:
         const Data.Dynamic.$fShowDynamic_$cshowList_info;
         const 0;
 },
 Data.Dynamic.$fShowDynamic_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c9Bwv,
                       label: Data.Dynamic.$fShowDynamic_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bwv: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Dynamic.$fShowDynamic1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.157349712 UTC

[section ""data" . Data.Dynamic.$fShowDynamic_closure" {
     Data.Dynamic.$fShowDynamic_closure:
         const GHC.Show.C:Show_con_info;
         const Data.Dynamic.$fShowDynamic_$cshowsPrec_closure+2;
         const Data.Dynamic.$fExceptionDynamic_$cshow_closure+1;
         const Data.Dynamic.$fShowDynamic_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.158326251 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic_$cfromException_closure" {
     Data.Dynamic.$fExceptionDynamic_$cfromException_closure:
         const Data.Dynamic.$fExceptionDynamic_$cfromException_info;
         const 0;
 },
 Data.Dynamic.$fExceptionDynamic_$cfromException_entry() //  [R2]
         { info_tbl: [(c9BwF,
                       label: Data.Dynamic.$fExceptionDynamic_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BwF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9BwJ; else goto c9BwK;
       c9BwJ: // global
           R2 = R2;
           R1 = Data.Dynamic.$fExceptionDynamic_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9BwK: // global
           I64[Sp - 8] = block_c9BwC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Bx5; else goto c9BwD;
       u9Bx5: // global
           call _c9BwC(R1) args: 0, res: 0, upd: 0;
       c9BwD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BwC() //  [R1]
         { info_tbl: [(c9BwC,
                       label: block_c9BwC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BwC: // global
           I64[Sp - 8] = block_c9BwI_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9BwI() //  [R1]
         { info_tbl: [(c9BwI,
                       label: block_c9BwI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BwI: // global
           I64[Sp] = block_c9BwP_info;
           R3 = Data.Dynamic.$fExceptionDynamic5_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9BwP() //  [R1]
         { info_tbl: [(c9BwP,
                       label: block_c9BwP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BwP: // global
           if (R1 & 7 == 1) goto c9BwW; else goto c9Bx0;
       c9BwW: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Bx0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Bx3; else goto c9Bx2;
       c9Bx3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Bx2: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.159935454 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic_closure" {
     Data.Dynamic.$fExceptionDynamic_closure:
         const GHC.Exception.C:Exception_con_info;
         const Data.Dynamic.$fExceptionDynamic5_closure;
         const Data.Dynamic.$fShowDynamic_closure+1;
         const Data.Dynamic.$fExceptionDynamic_$ctoException_closure+1;
         const Data.Dynamic.$fExceptionDynamic_$cfromException_closure+1;
         const Data.Dynamic.$fExceptionDynamic_$cshow_closure+1;
         const 0;
 },
 section ""data" . Data.Dynamic.$fExceptionDynamic_$ctoException_closure" {
     Data.Dynamic.$fExceptionDynamic_$ctoException_closure:
         const Data.Dynamic.$fExceptionDynamic_$ctoException_info;
         const 0;
 },
 Data.Dynamic.$fExceptionDynamic_$ctoException_entry() //  [R2]
         { info_tbl: [(c9Bxb,
                       label: Data.Dynamic.$fExceptionDynamic_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bxb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Bxf; else goto c9Bxe;
       c9Bxf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Dynamic.$fExceptionDynamic_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Bxe: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Data.Dynamic.$fExceptionDynamic_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.160862981 UTC

[section ""cstring" . lvl1_r9Bhw_bytes" {
     lvl1_r9Bhw_bytes:
         I8[] [84,121,112,101,32,101,114,114,111,114,32,105,110,32,100,121,110,97,109,105,99,32,97,112,112,108,105,99,97,116,105,111,110,46,10]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.161515258 UTC

[section ""cstring" . lvl2_r9Bhx_bytes" {
     lvl2_r9Bhx_bytes:
         I8[] [67,97,110,39,116,32,97,112,112,108,121,32,102,117,110,99,116,105,111,110,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.162119406 UTC

[section ""cstring" . lvl3_r9Bhy_bytes" {
     lvl3_r9Bhy_bytes:
         I8[] [32,116,111,32,97,114,103,117,109,101,110,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.164034365 UTC

[section ""data" . Data.Dynamic.dynApp1_closure" {
     Data.Dynamic.dynApp1_closure:
         const Data.Dynamic.dynApp1_info;
         const 0;
 },
 sat_s9Bl9_entry() //  [R1]
         { info_tbl: [(c9BxS,
                       label: sat_s9Bl9_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BxS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9BxT; else goto c9BxU;
       c9BxT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BxU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Dynamic.$fExceptionDynamic1_closure;
           Sp = Sp - 32;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s9Bla_entry() //  [R1]
         { info_tbl: [(c9BxV,
                       label: sat_s9Bla_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BxV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9BxW; else goto c9BxX;
       c9BxW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BxX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9BxJ_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9By1; else goto c9BxK;
       u9By1: // global
           call _c9BxJ(R1) args: 0, res: 0, upd: 0;
       c9BxK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9BxJ() //  [R1]
         { info_tbl: [(c9BxJ,
                       label: block_c9BxJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BxJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9By0; else goto c9BxZ;
       c9By0: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9BxZ: // global
           _s9Bl7::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s9Bl9_info;
           P64[Hp] = _s9Bl7::P64;
           R3 = Hp - 16;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Blb_entry() //  [R1]
         { info_tbl: [(c9By2,
                       label: sat_s9Blb_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9By2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9By6; else goto c9By5;
       c9By6: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9By5: // global
           _s9Bl0::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s9Bla_info;
           P64[Hp] = _s9Bl0::P64;
           R3 = Hp - 16;
           R2 = lvl3_r9Bhy_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Blc_entry() //  [R1]
         { info_tbl: [(c9By9,
                       label: sat_s9Blc_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9By9: // global
           _s9Blc::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto c9Bya; else goto c9Byb;
       c9Byb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Byd; else goto c9Byc;
       c9Byd: // global
           HpAlloc = 24;
           goto c9Bya;
       c9Bya: // global
           R1 = _s9Blc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Byc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9Blc::P64;
           _s9Bl0::P64 = P64[_s9Blc::P64 + 16];
           _s9Bl3::P64 = P64[_s9Blc::P64 + 24];
           I64[Hp - 16] = sat_s9Blb_info;
           P64[Hp] = _s9Bl0::P64;
           I64[Sp - 32] = block_c9By7_info;
           R3 = _s9Bl3::P64;
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Data.Dynamic.$fExceptionDynamic1_closure;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 48;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9By7() //  [R1]
         { info_tbl: [(c9By7,
                       label: block_c9By7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9By7: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Bld_entry() //  [R1]
         { info_tbl: [(c9Byh,
                       label: sat_s9Bld_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Byh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9Byi; else goto c9Byj;
       c9Byi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Byj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9Bxs_info;
           _s9Bl0::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s9Bl0::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9Byn; else goto c9Bxt;
       u9Byn: // global
           call _c9Bxs(R1) args: 0, res: 0, upd: 0;
       c9Bxt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Bxs() //  [R1]
         { info_tbl: [(c9Bxs,
                       label: block_c9Bxs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bxs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Bym; else goto c9Byl;
       c9Bym: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Byl: // global
           _s9Bl3::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s9Blc_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s9Bl3::P64;
           R3 = Hp - 24;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Ble_entry() //  [R1]
         { info_tbl: [(c9Byo,
                       label: sat_s9Ble_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Byo: // global
           _s9Ble::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Byp; else goto c9Byq;
       c9Byq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Bys; else goto c9Byr;
       c9Bys: // global
           HpAlloc = 32;
           goto c9Byp;
       c9Byp: // global
           R1 = _s9Ble::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Byr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9Ble::P64;
           _s9Bl0::P64 = P64[_s9Ble::P64 + 16];
           _s9Bl1::P64 = P64[_s9Ble::P64 + 24];
           I64[Hp - 24] = sat_s9Bld_info;
           P64[Hp - 8] = _s9Bl0::P64;
           P64[Hp] = _s9Bl1::P64;
           R3 = Hp - 24;
           R2 = lvl2_r9Bhx_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Dynamic.dynApp1_entry() //  [R2, R3]
         { info_tbl: [(c9Byv,
                       label: Data.Dynamic.dynApp1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Byv: // global
           _s9Bl1::P64 = R3;
           _s9Bl0::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9Byw; else goto c9Byx;
       c9Byx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Byz; else goto c9Byy;
       c9Byz: // global
           HpAlloc = 32;
           goto c9Byw;
       c9Byw: // global
           R3 = _s9Bl1::P64;
           R2 = _s9Bl0::P64;
           R1 = Data.Dynamic.dynApp1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Byy: // global
           I64[Hp - 24] = sat_s9Ble_info;
           P64[Hp - 8] = _s9Bl0::P64;
           P64[Hp] = _s9Bl1::P64;
           I64[Sp - 8] = block_c9Byt_info;
           R3 = Hp - 24;
           R2 = lvl1_r9Bhw_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Byt() //  [R1]
         { info_tbl: [(c9Byt,
                       label: block_c9Byt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Byt: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.169732769 UTC

[section ""data" . Data.Dynamic.dynApp_closure" {
     Data.Dynamic.dynApp_closure:
         const Data.Dynamic.dynApp_info;
         const 0;
 },
 Data.Dynamic.dynApp_entry() //  [R2, R3]
         { info_tbl: [(c9ByN,
                       label: Data.Dynamic.dynApp_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ByN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9ByO; else goto c9ByP;
       c9ByO: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.dynApp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9ByP: // global
           I64[Sp - 24] = block_c9ByH_info;
           _s9Blh::P64 = R3;
           R3 = R3;
           _s9Blg::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s9Blg::P64;
           P64[Sp - 8] = _s9Blh::P64;
           Sp = Sp - 24;
           call Data.Dynamic.dynApply_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9ByH() //  [R1]
         { info_tbl: [(c9ByH,
                       label: block_c9ByH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ByH: // global
           if (R1 & 7 == 1) goto c9ByK; else goto c9ByL;
       c9ByK: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Dynamic.dynApp1_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9ByL: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.170979064 UTC

[section ""data" . Data.Dynamic.Dynamic_closure" {
     Data.Dynamic.Dynamic_closure:
         const Data.Dynamic.Dynamic_info;
 },
 Data.Dynamic.Dynamic_entry() //  [R2, R3]
         { info_tbl: [(c9Bz1,
                       label: Data.Dynamic.Dynamic_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bz1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Bz5; else goto c9Bz4;
       c9Bz5: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.Dynamic_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Bz4: // global
           I64[Hp - 16] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.17183912 UTC

[Data.Dynamic.Dynamic_con_entry() //  [R1]
         { info_tbl: [(c9Bz6,
                       label: Data.Dynamic.Dynamic_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,68,97,116,97,46,68,121,110,97,109,105,99,46,68,121,110,97,109,105,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bz6: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.172480252 UTC

[section ""relreadonly" . S9Bm7_srt" {
     S9Bm7_srt:
         const Data.Typeable.Internal.showTypeable_closure;
         const Data.Dynamic.$w$cshowsPrec_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Data.Dynamic.fromDyn_closure;
         const Data.Dynamic.fromDynamic_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.fpTYPELiftedRep_closure;
         const Data.Typeable.Internal.$mApp1_closure;
         const Data.Dynamic.dynApply_closure;
         const lvl_r9Bhp_closure;
         const Data.Dynamic.$fExceptionDynamic1_closure;
         const Data.Dynamic.$fExceptionDynamic_$cshow_closure;
         const Data.Dynamic.$fShowDynamic1_closure;
         const Data.Dynamic.$fExceptionDynamic_$cfromException_closure;
         const Data.Dynamic.$fExceptionDynamic5_closure;
         const Data.Dynamic.$fExceptionDynamic_closure;
         const Data.Dynamic.$fExceptionDynamic_$ctoException_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Dynamic.dynApp1_closure;
         const Data.Dynamic.dynApp_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.173122788 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:04:43.173675983 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic3_closure" {
     Data.Dynamic.$fExceptionDynamic3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.174243017 UTC

[section ""cstring" . Data.Dynamic.$fExceptionDynamic4_bytes" {
     Data.Dynamic.$fExceptionDynamic4_bytes:
         I8[] [60,60]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.174767625 UTC

[section ""cstring" . Data.Dynamic.$fExceptionDynamic2_bytes" {
     Data.Dynamic.$fExceptionDynamic2_bytes:
         I8[] [62,62]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.176125236 UTC

[section ""data" . Data.Dynamic.$w$cshowsPrec_closure" {
     Data.Dynamic.$w$cshowsPrec_closure:
         const Data.Dynamic.$w$cshowsPrec_info;
         const 0;
 },
 f_s9BhE_entry() //  [R1]
         { info_tbl: [(c9Bzk,
                       label: f_s9BhE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bzk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Bzl; else goto c9Bzm;
       c9Bzl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Bzm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           Sp = Sp - 16;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BhG_entry() //  [R1]
         { info_tbl: [(c9BzA,
                       label: sat_s9BhG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BzA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9BzB; else goto c9BzC;
       c9BzB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BzC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BhH_entry() //  [R1]
         { info_tbl: [(c9BzD,
                       label: sat_s9BhH_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BzD: // global
           _s9BhH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9BzE; else goto c9BzF;
       c9BzF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9BzH; else goto c9BzG;
       c9BzH: // global
           HpAlloc = 24;
           goto c9BzE;
       c9BzE: // global
           R1 = _s9BhH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BzG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9BhH::P64;
           _s9BhE::P64 = P64[_s9BhH::P64 + 16];
           _s9BhF::P64 = P64[_s9BhH::P64 + 24];
           I64[Hp - 16] = sat_s9BhG_info;
           P64[Hp] = _s9BhF::P64;
           R2 = Hp - 16;
           R1 = _s9BhE::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BhI_entry() //  [R1, R2]
         { info_tbl: [(c9BzI,
                       label: sat_s9BhI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BzI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9BzM; else goto c9BzL;
       c9BzM: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9BzL: // global
           _s9BhE::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s9BhH_info;
           P64[Hp - 8] = _s9BhE::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Dynamic.$w$cshowsPrec_entry() //  [R2]
         { info_tbl: [(c9BzN,
                       label: Data.Dynamic.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BzN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9BzO; else goto c9BzP;
       c9BzO: // global
           R2 = R2;
           R1 = Data.Dynamic.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9BzP: // global
           I64[Sp - 8] = block_c9Bzb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BzT; else goto c9Bzc;
       u9BzT: // global
           call _c9Bzb(R1) args: 0, res: 0, upd: 0;
       c9Bzc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Bzb() //  [R1]
         { info_tbl: [(c9Bzb,
                       label: block_c9Bzb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Bzb: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9BzS; else goto c9BzR;
       c9BzS: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BzR: // global
           _s9BhC::P64 = P64[R1 + 7];
           I64[Hp - 32] = f_s9BhE_info;
           P64[Hp - 16] = _s9BhC::P64;
           I64[Hp - 8] = sat_s9BhI_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.178406009 UTC

[section ""data" . Data.Dynamic.$fShowDynamic_$cshowsPrec_closure" {
     Data.Dynamic.$fShowDynamic_$cshowsPrec_closure:
         const Data.Dynamic.$fShowDynamic_$cshowsPrec_info;
         const 0;
 },
 Data.Dynamic.$fShowDynamic_$cshowsPrec_entry() //  [R3]
         { info_tbl: [(c9BzY,
                       label: Data.Dynamic.$fShowDynamic_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BzY: // global
           R2 = R3;
           call Data.Dynamic.$w$cshowsPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.179289281 UTC

[section ""data" . Data.Dynamic.toDyn_closure" {
     Data.Dynamic.toDyn_closure:
         const Data.Dynamic.toDyn_info;
 },
 Data.Dynamic.toDyn_entry() //  [R2, R3]
         { info_tbl: [(c9BA6,
                       label: Data.Dynamic.toDyn_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BA6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9BAa; else goto c9BA9;
       c9BAa: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.toDyn_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9BA9: // global
           I64[Hp - 16] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.180530479 UTC

[section ""data" . Data.Dynamic.fromDyn_closure" {
     Data.Dynamic.fromDyn_closure:
         const Data.Dynamic.fromDyn_info;
         const 0;
 },
 Data.Dynamic.fromDyn_entry() //  [R2, R3, R4]
         { info_tbl: [(c9BAi,
                       label: Data.Dynamic.fromDyn_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BAi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9BAj; else goto c9BAk;
       c9BAj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.fromDyn_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9BAk: // global
           I64[Sp - 24] = block_c9BAf_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9BAA; else goto c9BAg;
       u9BAA: // global
           call _c9BAf(R1) args: 0, res: 0, upd: 0;
       c9BAg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BAf() //  [R1]
         { info_tbl: [(c9BAf,
                       label: block_c9BAf_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BAf: // global
           I64[Sp] = block_c9BAn_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9BAn() //  [R1]
         { info_tbl: [(c9BAn,
                       label: block_c9BAn_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BAn: // global
           if (R1 & 7 == 1) goto c9BAu; else goto c9BAy;
       c9BAu: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c9BAy: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.182417124 UTC

[section ""data" . Data.Dynamic.fromDynamic_closure" {
     Data.Dynamic.fromDynamic_closure:
         const Data.Dynamic.fromDynamic_info;
         const 0;
 },
 Data.Dynamic.fromDynamic_entry() //  [R2, R3]
         { info_tbl: [(c9BAI,
                       label: Data.Dynamic.fromDynamic_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BAI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9BAJ; else goto c9BAK;
       c9BAJ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.fromDynamic_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9BAK: // global
           I64[Sp - 16] = block_c9BAF_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9BB3; else goto c9BAG;
       u9BB3: // global
           call _c9BAF(R1) args: 0, res: 0, upd: 0;
       c9BAG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BAF() //  [R1]
         { info_tbl: [(c9BAF,
                       label: block_c9BAF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BAF: // global
           I64[Sp] = block_c9BAN_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9BAN() //  [R1]
         { info_tbl: [(c9BAN,
                       label: block_c9BAN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BAN: // global
           if (R1 & 7 == 1) goto c9BAU; else goto c9BAY;
       c9BAU: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9BAY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9BB1; else goto c9BB0;
       c9BB1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BB0: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.18430376 UTC

[section ""data" . lvl_r9Bhp_closure" {
     lvl_r9Bhp_closure:
         const lvl_r9Bhp_info;
         const 0;
         const 0;
         const 0;
 },
 lvl_r9Bhp_entry() //  [R1]
         { info_tbl: [(c9BBk,
                       label: lvl_r9Bhp_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BBk: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c9BBl; else goto c9BBm;
       c9BBl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BBm: // global
           (_c9BB7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9BB7::I64 == 0) goto c9BB9; else goto c9BB8;
       c9BB9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9BB8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9BB7::I64;
           I64[Sp - 24] = block_c9BBa_info;
           R6 = 0;
           R5 = GHC.Types.$tcTYPE2_closure;
           R4 = GHC.Types.tr$ModuleGHCPrim_closure;
           R3 = 12502576999761269576;
           R2 = 16277905407886699876;
           P64[Sp - 40] = GHC.Types.$tcTYPE1_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9BBa() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9BBa,
                       label: block_c9BBa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BBa: // global
           I64[Sp - 40] = block_c9BBe_info;
           R6 = 0;
           _s9Bi3::P64 = R5;
           R5 = GHC.Types.$tc'LiftedRep1_closure;
           _s9Bi2::P64 = R4;
           R4 = GHC.Types.tr$ModuleGHCPrim_closure;
           _s9Bi1::P64 = R3;
           R3 = 5595830777317938557;
           _s9Bi0::I64 = R2;
           R2 = 16105171405184389724;
           P64[Sp - 56] = GHC.Types.$tc'AddrRep1_closure;
           P64[Sp - 48] = GHC.Types.[]_closure+1;
           I64[Sp - 32] = _s9Bi0::I64;
           P64[Sp - 24] = _s9Bi1::P64;
           P64[Sp - 16] = _s9Bi2::P64;
           P64[Sp - 8] = _s9Bi3::P64;
           I64[Sp] = R1;
           Sp = Sp - 56;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9BBe() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9BBe,
                       label: block_c9BBe_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BBe: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9BBf() args: 0, res: 0, upd: 0;
     }
 },
 _c9BBf() //  []
         { info_tbl: [(c9BBf,
                       label: block_c9BBf_info
                       rep:StackRep [True, False, False, False, True, True, False, False,
                                     False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BBf: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c9BBq; else goto c9BBp;
       c9BBq: // global
           HpAlloc = 96;
           I64[Sp] = block_c9BBf_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9BBp: // global
           I64[Hp - 88] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = P64[Sp + 64];
           P64[Hp - 16] = P64[Sp + 72];
           I64[Hp - 8] = I64[Sp + 80];
           I64[Hp] = I64[Sp + 48];
           R3 = Hp - 86;
           R2 = Hp - 38;
           Sp = Sp + 88;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.19097043 UTC

[section ""data" . Data.Dynamic.dynApply_closure" {
     Data.Dynamic.dynApply_closure:
         const Data.Dynamic.dynApply_info;
         const 0;
 },
 Data.Dynamic.dynApply_entry() //  [R2, R3]
         { info_tbl: [(c9BBA,
                       label: Data.Dynamic.dynApply_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BBA: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c9BBB; else goto c9BBC;
       c9BBB: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.dynApply_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9BBC: // global
           I64[Sp - 16] = block_c9BBx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9BHJ; else goto c9BBy;
       u9BHJ: // global
           call _c9BBx(R1) args: 0, res: 0, upd: 0;
       c9BBy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BBx() //  [R1]
         { info_tbl: [(c9BBx,
                       label: block_c9BBx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BBx: // global
           I64[Sp - 8] = block_c9BBF_info;
           _s9Big::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9Big::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BHI; else goto c9BBH;
       u9BHI: // global
           call _c9BBF(R1) args: 0, res: 0, upd: 0;
       c9BBH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BBF() //  [R1]
         { info_tbl: [(c9BBF,
                       label: block_c9BBF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BBF: // global
           if (R1 & 7 == 4) goto c9BBS; else goto u9BHi;
       c9BBS: // global
           I64[Sp - 8] = block_c9BBQ_info;
           _s9Bik::P64 = P64[R1 + 4];
           _s9Bil::P64 = P64[R1 + 12];
           R1 = P64[Sp + 16];
           P64[Sp] = _s9Bil::P64;
           P64[Sp + 16] = _s9Bik::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BHK; else goto c9BBT;
       u9BHK: // global
           call _c9BBQ(R1) args: 0, res: 0, upd: 0;
       c9BBT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9BHi: // global
           Sp = Sp + 24;
           call _c9BGS() args: 0, res: 0, upd: 0;
     }
 },
 _c9BBQ() //  [R1]
         { info_tbl: [(c9BBQ,
                       label: block_c9BBQ_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BBQ: // global
           I64[Sp] = block_c9BBX_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 15];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9BBX() //  [R1]
         { info_tbl: [(c9BBX,
                       label: block_c9BBX_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BBX: // global
           if (R1 & 7 == 1) goto u9BHj; else goto c9BC9;
       u9BHj: // global
           Sp = Sp + 32;
           call _c9BGS() args: 0, res: 0, upd: 0;
       c9BC9: // global
           _s9Bil::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9BC7_info;
           R1 = _s9Bil::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9BHM; else goto c9BCa;
       u9BHM: // global
           call _c9BC7(R1) args: 0, res: 0, upd: 0;
       c9BCa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BC7() //  [R1]
         { info_tbl: [(c9BC7,
                       label: block_c9BC7_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BC7: // global
           _c9BH4::P64 = R1 & 7;
           if (_c9BH4::P64 < 3) goto u9BHb; else goto u9BHc;
       u9BHb: // global
           if (_c9BH4::P64 < 2) goto c9BCM; else goto c9BEz;
       c9BCM: // global
           I64[Sp - 8] = block_c9BCg_info;
           _s9Biq::P64 = R1;
           R1 = lvl_r9Bhp_closure;
           P64[Sp] = _s9Biq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BHO; else goto c9BCN;
       u9BHO: // global
           call _c9BCg(R1) args: 0, res: 0, upd: 0;
       c9BCN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9BEz: // global
           I64[Sp - 16] = block_c9BDc_info;
           _s9Biq::P64 = R1;
           _s9BiT::P64 = P64[R1 + 22];
           R1 = lvl_r9Bhp_closure;
           P64[Sp - 8] = _s9BiT::P64;
           P64[Sp] = _s9Biq::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9BHP; else goto c9BEA;
       u9BHP: // global
           call _c9BDc(R1) args: 0, res: 0, upd: 0;
       c9BEA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9BHc: // global
           if (_c9BH4::P64 < 4) goto c9BGm; else goto c9BGM;
       c9BGm: // global
           I64[Sp - 16] = block_c9BEZ_info;
           _s9Biq::P64 = R1;
           _s9BjF::P64 = P64[R1 + 21];
           R1 = lvl_r9Bhp_closure;
           P64[Sp - 8] = _s9BjF::P64;
           P64[Sp] = _s9Biq::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9BHQ; else goto c9BGn;
       u9BHQ: // global
           call _c9BEZ(R1) args: 0, res: 0, upd: 0;
       c9BGn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9BGM: // global
           I64[Sp - 8] = block_c9BGK_info;
           R3 = Data.Typeable.Internal.$mApp1_closure;
           R2 = lvl_r9Bhp_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9BCg() //  [R1]
         { info_tbl: [(c9BCg,
                       label: block_c9BCg_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BCg: // global
           _c9BHa::P64 = R1 & 7;
           if (_c9BHa::P64 < 3) goto u9BHd; else goto c9BD7;
       u9BHd: // global
           if (_c9BHa::P64 < 2) goto c9BCU; else goto c9BD3;
       c9BCU: // global
           I64[Sp] = block_c9BCR_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9BHR; else goto c9BCV;
       u9BHR: // global
           call _c9BCR(R1) args: 0, res: 0, upd: 0;
       c9BCV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9BD3: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u9BHT;
       c9BD7: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u9BHT;
       u9BHT: // global
           call _s9Bir() args: 0, res: 0, upd: 0;
     }
 },
 _c9BCR() //  [R1]
         { info_tbl: [(c9BCR,
                       label: block_c9BCR_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BCR: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s9Bir() args: 0, res: 0, upd: 0;
     }
 },
 _s9Bir() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s9Bir: // global
           I64[Sp - 8] = block_c9BCl_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BIk; else goto c9BCn;
       u9BIk: // global
           call _c9BCl(R1) args: 0, res: 0, upd: 0;
       c9BCn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BCl() //  [R1]
         { info_tbl: [(c9BCl,
                       label: block_c9BCl_info
                       rep:StackRep [True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BCl: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9BCt; else goto c9BCs;
       c9BCt: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BCs: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c9BCK; else goto u9BHn;
       c9BCK: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c9BCJ; else goto u9BHo;
       c9BCJ: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BHo: // global
           Sp = Sp + 48;
           goto u9BHV;
       u9BHn: // global
           Sp = Sp + 48;
           goto u9BHV;
       u9BHV: // global
           call _c9BGe() args: 0, res: 0, upd: 0;
     }
 },
 _c9BDc() //  [R1]
         { info_tbl: [(c9BDc,
                       label: block_c9BDc_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BDc: // global
           _c9BH8::P64 = R1 & 7;
           if (_c9BH8::P64 < 3) goto u9BHe; else goto c9BEU;
       u9BHe: // global
           if (_c9BH8::P64 < 2) goto c9BEH; else goto c9BEQ;
       c9BEH: // global
           I64[Sp] = block_c9BEE_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9BHX; else goto c9BEI;
       u9BHX: // global
           call _c9BEE(R1) args: 0, res: 0, upd: 0;
       c9BEI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9BEQ: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u9BHZ;
       c9BEU: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u9BHZ;
       u9BHZ: // global
           call _s9BiU() args: 0, res: 0, upd: 0;
     }
 },
 _c9BEE() //  [R1]
         { info_tbl: [(c9BEE,
                       label: block_c9BEE_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BEE: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s9BiU() args: 0, res: 0, upd: 0;
     }
 },
 _s9BiU() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s9BiU: // global
           I64[Sp - 8] = block_c9BDh_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BIl; else goto c9BDj;
       u9BIl: // global
           call _c9BDh(R1) args: 0, res: 0, upd: 0;
       c9BDj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BDh() //  [R1]
         { info_tbl: [(c9BDh,
                       label: block_c9BDh_info
                       rep:StackRep [True, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BDh: // global
           _s9Big::P64 = P64[Sp + 40];
           _s9Bio::P64 = P64[Sp + 48];
           _s9Biq::P64 = P64[Sp + 32];
           _s9BiV::I64 = I64[Sp + 16];
           _s9BiW::I64 = I64[Sp + 8];
           _c9BH9::P64 = R1 & 7;
           if (_c9BH9::P64 < 3) goto u9BHf; else goto c9BEc;
       u9BHf: // global
           if (_c9BH9::P64 < 2) goto c9BDq; else goto c9BDP;
       c9BDq: // global
           I64[Sp] = block_c9BDn_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9BI0; else goto c9BDr;
       u9BI0: // global
           call _c9BDn(R1) args: 0, res: 0, upd: 0;
       c9BDr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9BDP: // global
           Hp = Hp + 72;
           _s9BiX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c9BEh; else goto c9BDT;
       c9BDT: // global
           if (_s9BiV::I64 == I64[_s9BiX::P64 + 30]) goto c9BEb; else goto u9BHu;
       c9BEb: // global
           if (_s9BiW::I64 == I64[_s9BiX::P64 + 38]) goto c9BEa; else goto u9BHv;
       c9BEa: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s9Big::P64;
           P64[Hp - 40] = _s9Bio::P64;
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = _s9Biq::P64;
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BHv: // global
           Sp = Sp + 56;
           goto u9BI4;
       u9BHu: // global
           Sp = Sp + 56;
           goto u9BI4;
       c9BEc: // global
           Hp = Hp + 72;
           _s9BiX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c9BEh; else goto c9BEg;
       c9BEh: // global
           HpAlloc = 72;
           R1 = _s9BiX::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BEg: // global
           if (_s9BiV::I64 == I64[_s9BiX::P64 + 29]) goto c9BEy; else goto u9BHw;
       c9BEy: // global
           if (_s9BiW::I64 == I64[_s9BiX::P64 + 37]) goto c9BEx; else goto u9BHx;
       c9BEx: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s9Big::P64;
           P64[Hp - 40] = _s9Bio::P64;
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = _s9Biq::P64;
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BHx: // global
           Sp = Sp + 56;
           goto u9BI4;
       u9BHw: // global
           Sp = Sp + 56;
           goto u9BI4;
       u9BI4: // global
           call _c9BGe() args: 0, res: 0, upd: 0;
     }
 },
 _c9BDn() //  [R1]
         { info_tbl: [(c9BDn,
                       label: block_c9BDn_info
                       rep:StackRep [True, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BDn: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9BDx; else goto c9BDw;
       c9BDx: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BDw: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c9BDO; else goto u9BHs;
       c9BDO: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c9BDN; else goto u9BHt;
       c9BDN: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BHt: // global
           Sp = Sp + 56;
           goto u9BI6;
       u9BHs: // global
           Sp = Sp + 56;
           goto u9BI6;
       u9BI6: // global
           call _c9BGe() args: 0, res: 0, upd: 0;
     }
 },
 _c9BEZ() //  [R1]
         { info_tbl: [(c9BEZ,
                       label: block_c9BEZ_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BEZ: // global
           _c9BH6::P64 = R1 & 7;
           if (_c9BH6::P64 < 3) goto u9BHg; else goto c9BGH;
       u9BHg: // global
           if (_c9BH6::P64 < 2) goto c9BGu; else goto c9BGD;
       c9BGu: // global
           I64[Sp] = block_c9BGr_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9BI8; else goto c9BGv;
       u9BI8: // global
           call _c9BGr(R1) args: 0, res: 0, upd: 0;
       c9BGv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9BGD: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u9BIa;
       c9BGH: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u9BIa;
       u9BIa: // global
           call _s9BjG() args: 0, res: 0, upd: 0;
     }
 },
 _c9BGr() //  [R1]
         { info_tbl: [(c9BGr,
                       label: block_c9BGr_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BGr: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s9BjG() args: 0, res: 0, upd: 0;
     }
 },
 _s9BjG() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s9BjG: // global
           I64[Sp - 8] = block_c9BF4_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BIm; else goto c9BF6;
       u9BIm: // global
           call _c9BF4(R1) args: 0, res: 0, upd: 0;
       c9BF6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BF4() //  [R1]
         { info_tbl: [(c9BF4,
                       label: block_c9BF4_info
                       rep:StackRep [True, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BF4: // global
           _s9Big::P64 = P64[Sp + 40];
           _s9Bio::P64 = P64[Sp + 48];
           _s9Biq::P64 = P64[Sp + 32];
           _s9BjH::I64 = I64[Sp + 16];
           _s9BjI::I64 = I64[Sp + 8];
           _c9BH7::P64 = R1 & 7;
           if (_c9BH7::P64 < 3) goto u9BHh; else goto c9BFZ;
       u9BHh: // global
           if (_c9BH7::P64 < 2) goto c9BFd; else goto c9BFC;
       c9BFd: // global
           I64[Sp] = block_c9BFa_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9BIb; else goto c9BFe;
       u9BIb: // global
           call _c9BFa(R1) args: 0, res: 0, upd: 0;
       c9BFe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9BFC: // global
           Hp = Hp + 72;
           _s9BjJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c9BG4; else goto c9BFG;
       c9BFG: // global
           if (_s9BjH::I64 == I64[_s9BjJ::P64 + 30]) goto c9BFY; else goto u9BHD;
       c9BFY: // global
           if (_s9BjI::I64 == I64[_s9BjJ::P64 + 38]) goto c9BFX; else goto u9BHE;
       c9BFX: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s9Big::P64;
           P64[Hp - 40] = _s9Bio::P64;
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = _s9Biq::P64;
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BHE: // global
           Sp = Sp + 56;
           goto u9BIf;
       u9BHD: // global
           Sp = Sp + 56;
           goto u9BIf;
       c9BFZ: // global
           Hp = Hp + 72;
           _s9BjJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c9BG4; else goto c9BG3;
       c9BG4: // global
           HpAlloc = 72;
           R1 = _s9BjJ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BG3: // global
           if (_s9BjH::I64 == I64[_s9BjJ::P64 + 29]) goto c9BGl; else goto u9BHF;
       c9BGl: // global
           if (_s9BjI::I64 == I64[_s9BjJ::P64 + 37]) goto c9BGk; else goto u9BHG;
       c9BGk: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s9Big::P64;
           P64[Hp - 40] = _s9Bio::P64;
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = _s9Biq::P64;
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BHG: // global
           Sp = Sp + 56;
           goto u9BIf;
       u9BHF: // global
           Sp = Sp + 56;
           goto u9BIf;
       u9BIf: // global
           call _c9BGe() args: 0, res: 0, upd: 0;
     }
 },
 _c9BFa() //  [R1]
         { info_tbl: [(c9BFa,
                       label: block_c9BFa_info
                       rep:StackRep [True, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BFa: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9BFk; else goto c9BFj;
       c9BFk: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BFj: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c9BFB; else goto u9BHB;
       c9BFB: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c9BFA; else goto u9BHC;
       c9BFA: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BHC: // global
           Sp = Sp + 56;
           goto u9BIh;
       u9BHB: // global
           Sp = Sp + 56;
           goto u9BIh;
       u9BIh: // global
           call _c9BGe() args: 0, res: 0, upd: 0;
     }
 },
 _c9BGe() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BGe: // global
           Hp = Hp - 72;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9BGK() //  [R1]
         { info_tbl: [(c9BGK,
                       label: block_c9BGK_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BGK: // global
           if (R1 & 7 == 1) goto u9BHH; else goto c9BGY;
       u9BHH: // global
           Sp = Sp + 32;
           call _c9BGS() args: 0, res: 0, upd: 0;
       c9BGY: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9BH1; else goto c9BH0;
       c9BH1: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BH0: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9BGS() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BGS: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.199507704 UTC

[section ""data" . Data.Dynamic.dynTypeRep_closure" {
     Data.Dynamic.dynTypeRep_closure:
         const Data.Dynamic.dynTypeRep_info;
 },
 Data.Dynamic.dynTypeRep_entry() //  [R2]
         { info_tbl: [(c9BIu,
                       label: Data.Dynamic.dynTypeRep_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BIu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9BIv; else goto c9BIw;
       c9BIv: // global
           R2 = R2;
           R1 = Data.Dynamic.dynTypeRep_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9BIw: // global
           I64[Sp - 8] = block_c9BIr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BIA; else goto c9BIs;
       u9BIA: // global
           call _c9BIr(R1) args: 0, res: 0, upd: 0;
       c9BIs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BIr() //  [R1]
         { info_tbl: [(c9BIr,
                       label: block_c9BIr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BIr: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.200452642 UTC

[section ""cstring" . Data.Dynamic.$trModule4_bytes" {
     Data.Dynamic.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.201029282 UTC

[section ""data" . Data.Dynamic.$trModule3_closure" {
     Data.Dynamic.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Dynamic.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.201611921 UTC

[section ""cstring" . Data.Dynamic.$trModule2_bytes" {
     Data.Dynamic.$trModule2_bytes:
         I8[] [68,97,116,97,46,68,121,110,97,109,105,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.202142004 UTC

[section ""data" . Data.Dynamic.$trModule1_closure" {
     Data.Dynamic.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Dynamic.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.202686912 UTC

[section ""data" . Data.Dynamic.$trModule_closure" {
     Data.Dynamic.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Dynamic.$trModule3_closure+1;
         const Data.Dynamic.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.20322568 UTC

[section ""data" . $krep_r9Bhq_closure" {
     $krep_r9Bhq_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.203763356 UTC

[section ""data" . $krep1_r9Bhr_closure" {
     $krep1_r9Bhr_closure:
         const :_con_info;
         const $krep_r9Bhq_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.204356156 UTC

[section ""data" . $krep2_r9Bhs_closure" {
     $krep2_r9Bhs_closure:
         const :_con_info;
         const GHC.Types.krep$*_closure;
         const $krep1_r9Bhr_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.204952832 UTC

[section ""data" . $krep3_r9Bht_closure" {
     $krep3_r9Bht_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Typeable.Internal.$tcTypeRep_closure;
         const $krep2_r9Bhs_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.205540945 UTC

[section ""cstring" . Data.Dynamic.$fExceptionDynamic7_bytes" {
     Data.Dynamic.$fExceptionDynamic7_bytes:
         I8[] [68,121,110,97,109,105,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.206132682 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic6_closure" {
     Data.Dynamic.$fExceptionDynamic6_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Dynamic.$fExceptionDynamic7_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.20675271 UTC

[section ""data" . Data.Dynamic.$tcDynamic_closure" {
     Data.Dynamic.$tcDynamic_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Dynamic.$trModule_closure+1;
         const Data.Dynamic.$fExceptionDynamic6_closure+1;
         const GHC.Types.krep$*_closure;
         const 12333845116585145369;
         const 13454739855111402131;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.207385712 UTC

[section ""data" . $krep4_r9Bhu_closure" {
     $krep4_r9Bhu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Dynamic.$tcDynamic_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.207995214 UTC

[section ""data" . $krep5_r9Bhv_closure" {
     $krep5_r9Bhv_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r9Bhq_closure+2;
         const $krep4_r9Bhu_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.208613465 UTC

[section ""data" . Data.Dynamic.$tc'Dynamic1_closure" {
     Data.Dynamic.$tc'Dynamic1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r9Bht_closure+1;
         const $krep5_r9Bhv_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.209217501 UTC

[section ""cstring" . Data.Dynamic.$tc'Dynamic3_bytes" {
     Data.Dynamic.$tc'Dynamic3_bytes:
         I8[] [39,68,121,110,97,109,105,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.211213046 UTC

[section ""data" . Data.Dynamic.$tc'Dynamic2_closure" {
     Data.Dynamic.$tc'Dynamic2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Dynamic.$tc'Dynamic3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.211780649 UTC

[section ""data" . Data.Dynamic.$tc'Dynamic_closure" {
     Data.Dynamic.$tc'Dynamic_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Dynamic.$trModule_closure+1;
         const Data.Dynamic.$tc'Dynamic2_closure+1;
         const Data.Dynamic.$tc'Dynamic1_closure+4;
         const 11394777848779697579;
         const 644307381671950132;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.212920315 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic5_closure" {
     Data.Dynamic.$fExceptionDynamic5_closure:
         const Data.Dynamic.$fExceptionDynamic5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Dynamic.$fExceptionDynamic5_entry() //  [R1]
         { info_tbl: [(c9BIM,
                       label: Data.Dynamic.$fExceptionDynamic5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BIM: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9BIN; else goto c9BIO;
       c9BIN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BIO: // global
           (_c9BIE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9BIE::I64 == 0) goto c9BIG; else goto c9BIF;
       c9BIG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9BIF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9BIE::I64;
           I64[Sp - 24] = block_c9BIH_info;
           R6 = 0;
           R5 = Data.Dynamic.$fExceptionDynamic6_closure+1;
           R4 = Data.Dynamic.$trModule_closure+1;
           R3 = 13454739855111402131;
           R2 = 12333845116585145369;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9BIH() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9BIH,
                       label: block_c9BIH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BIH: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9BII() args: 0, res: 0, upd: 0;
     }
 },
 _c9BII() //  []
         { info_tbl: [(c9BII,
                       label: block_c9BII_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BII: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9BIR; else goto c9BIQ;
       c9BIR: // global
           HpAlloc = 48;
           I64[Sp] = block_c9BII_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9BIQ: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.214578641 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic1_closure" {
     Data.Dynamic.$fExceptionDynamic1_closure:
         const Data.Dynamic.$fExceptionDynamic1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Dynamic.$fExceptionDynamic1_entry() //  [R1]
         { info_tbl: [(c9BJ0,
                       label: Data.Dynamic.$fExceptionDynamic1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BJ0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9BJ1; else goto c9BJ2;
       c9BJ1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BJ2: // global
           (_c9BIX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9BIX::I64 == 0) goto c9BIZ; else goto c9BIY;
       c9BIZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9BIY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9BIX::I64;
           R2 = Data.Dynamic.$fExceptionDynamic2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.215878153 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic_$cshow_closure" {
     Data.Dynamic.$fExceptionDynamic_$cshow_closure:
         const Data.Dynamic.$fExceptionDynamic_$cshow_info;
         const 0;
 },
 sat_s9BkI_entry() //  [R1]
         { info_tbl: [(c9BJg,
                       label: sat_s9BkI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BJg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9BJh; else goto c9BJi;
       c9BJh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BJi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Dynamic.$fExceptionDynamic1_closure;
           Sp = Sp - 32;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.Dynamic.$fExceptionDynamic_$cshow_entry() //  [R2]
         { info_tbl: [(c9BJj,
                       label: Data.Dynamic.$fExceptionDynamic_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BJj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9BJk; else goto c9BJl;
       c9BJk: // global
           R2 = R2;
           R1 = Data.Dynamic.$fExceptionDynamic_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9BJl: // global
           I64[Sp - 8] = block_c9BJ7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BJp; else goto c9BJ8;
       u9BJp: // global
           call _c9BJ7(R1) args: 0, res: 0, upd: 0;
       c9BJ8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BJ7() //  [R1]
         { info_tbl: [(c9BJ7,
                       label: block_c9BJ7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BJ7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9BJo; else goto c9BJn;
       c9BJo: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BJn: // global
           _s9BkG::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s9BkI_info;
           P64[Hp] = _s9BkG::P64;
           R3 = Hp - 16;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.218177353 UTC

[section ""data" . Data.Dynamic.$fShowDynamic1_closure" {
     Data.Dynamic.$fShowDynamic1_closure:
         const Data.Dynamic.$fShowDynamic1_info;
         const 0;
 },
 f_s9BkN_entry() //  [R1]
         { info_tbl: [(c9BJD,
                       label: f_s9BkN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BJD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9BJE; else goto c9BJF;
       c9BJE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BJF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           Sp = Sp - 16;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BkP_entry() //  [R1]
         { info_tbl: [(c9BJT,
                       label: sat_s9BkP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BJT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9BJU; else goto c9BJV;
       c9BJU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BJV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BkQ_entry() //  [R1]
         { info_tbl: [(c9BJW,
                       label: sat_s9BkQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BJW: // global
           _s9BkQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9BJX; else goto c9BJY;
       c9BJY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9BK0; else goto c9BJZ;
       c9BK0: // global
           HpAlloc = 24;
           goto c9BJX;
       c9BJX: // global
           R1 = _s9BkQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BJZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9BkQ::P64;
           _s9BkN::P64 = P64[_s9BkQ::P64 + 16];
           _s9BkO::P64 = P64[_s9BkQ::P64 + 24];
           I64[Hp - 16] = sat_s9BkP_info;
           P64[Hp] = _s9BkO::P64;
           R2 = Hp - 16;
           R1 = _s9BkN::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BkR_entry() //  [R1, R2]
         { info_tbl: [(c9BK1,
                       label: sat_s9BkR_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BK1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9BK5; else goto c9BK4;
       c9BK5: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9BK4: // global
           _s9BkN::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s9BkQ_info;
           P64[Hp - 8] = _s9BkN::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Dynamic.$fShowDynamic1_entry() //  [R2]
         { info_tbl: [(c9BK6,
                       label: Data.Dynamic.$fShowDynamic1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BK6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9BK7; else goto c9BK8;
       c9BK7: // global
           R2 = R2;
           R1 = Data.Dynamic.$fShowDynamic1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9BK8: // global
           I64[Sp - 8] = block_c9BJu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BKc; else goto c9BJv;
       u9BKc: // global
           call _c9BJu(R1) args: 0, res: 0, upd: 0;
       c9BJv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BJu() //  [R1]
         { info_tbl: [(c9BJu,
                       label: block_c9BJu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BJu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9BKb; else goto c9BKa;
       c9BKb: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BKa: // global
           _s9BkL::P64 = P64[R1 + 7];
           I64[Hp - 32] = f_s9BkN_info;
           P64[Hp - 16] = _s9BkL::P64;
           I64[Hp - 8] = sat_s9BkR_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.220471723 UTC

[section ""data" . Data.Dynamic.$fShowDynamic_$cshowList_closure" {
     Data.Dynamic.$fShowDynamic_$cshowList_closure:
         const Data.Dynamic.$fShowDynamic_$cshowList_info;
         const 0;
 },
 Data.Dynamic.$fShowDynamic_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c9BKh,
                       label: Data.Dynamic.$fShowDynamic_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BKh: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Dynamic.$fShowDynamic1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.221274219 UTC

[section ""data" . Data.Dynamic.$fShowDynamic_closure" {
     Data.Dynamic.$fShowDynamic_closure:
         const GHC.Show.C:Show_con_info;
         const Data.Dynamic.$fShowDynamic_$cshowsPrec_closure+2;
         const Data.Dynamic.$fExceptionDynamic_$cshow_closure+1;
         const Data.Dynamic.$fShowDynamic_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.222275738 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic_$cfromException_closure" {
     Data.Dynamic.$fExceptionDynamic_$cfromException_closure:
         const Data.Dynamic.$fExceptionDynamic_$cfromException_info;
         const 0;
 },
 Data.Dynamic.$fExceptionDynamic_$cfromException_entry() //  [R2]
         { info_tbl: [(c9BKr,
                       label: Data.Dynamic.$fExceptionDynamic_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BKr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9BKv; else goto c9BKw;
       c9BKv: // global
           R2 = R2;
           R1 = Data.Dynamic.$fExceptionDynamic_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9BKw: // global
           I64[Sp - 8] = block_c9BKo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BKR; else goto c9BKp;
       u9BKR: // global
           call _c9BKo(R1) args: 0, res: 0, upd: 0;
       c9BKp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BKo() //  [R1]
         { info_tbl: [(c9BKo,
                       label: block_c9BKo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BKo: // global
           I64[Sp - 8] = block_c9BKu_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9BKu() //  [R1]
         { info_tbl: [(c9BKu,
                       label: block_c9BKu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BKu: // global
           I64[Sp] = block_c9BKB_info;
           R3 = Data.Dynamic.$fExceptionDynamic5_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9BKB() //  [R1]
         { info_tbl: [(c9BKB,
                       label: block_c9BKB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BKB: // global
           if (R1 & 7 == 1) goto c9BKI; else goto c9BKM;
       c9BKI: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9BKM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9BKP; else goto c9BKO;
       c9BKP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BKO: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.223838998 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic_closure" {
     Data.Dynamic.$fExceptionDynamic_closure:
         const GHC.Exception.C:Exception_con_info;
         const Data.Dynamic.$fExceptionDynamic5_closure;
         const Data.Dynamic.$fShowDynamic_closure+1;
         const Data.Dynamic.$fExceptionDynamic_$ctoException_closure+1;
         const Data.Dynamic.$fExceptionDynamic_$cfromException_closure+1;
         const Data.Dynamic.$fExceptionDynamic_$cshow_closure+1;
         const 0;
 },
 section ""data" . Data.Dynamic.$fExceptionDynamic_$ctoException_closure" {
     Data.Dynamic.$fExceptionDynamic_$ctoException_closure:
         const Data.Dynamic.$fExceptionDynamic_$ctoException_info;
         const 0;
 },
 Data.Dynamic.$fExceptionDynamic_$ctoException_entry() //  [R2]
         { info_tbl: [(c9BKX,
                       label: Data.Dynamic.$fExceptionDynamic_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BKX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9BL1; else goto c9BL0;
       c9BL1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Dynamic.$fExceptionDynamic_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9BL0: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Data.Dynamic.$fExceptionDynamic_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.224756258 UTC

[section ""cstring" . lvl1_r9Bhw_bytes" {
     lvl1_r9Bhw_bytes:
         I8[] [84,121,112,101,32,101,114,114,111,114,32,105,110,32,100,121,110,97,109,105,99,32,97,112,112,108,105,99,97,116,105,111,110,46,10]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.225311 UTC

[section ""cstring" . lvl2_r9Bhx_bytes" {
     lvl2_r9Bhx_bytes:
         I8[] [67,97,110,39,116,32,97,112,112,108,121,32,102,117,110,99,116,105,111,110,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.225851112 UTC

[section ""cstring" . lvl3_r9Bhy_bytes" {
     lvl3_r9Bhy_bytes:
         I8[] [32,116,111,32,97,114,103,117,109,101,110,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.227735177 UTC

[section ""data" . Data.Dynamic.dynApp1_closure" {
     Data.Dynamic.dynApp1_closure:
         const Data.Dynamic.dynApp1_info;
         const 0;
 },
 sat_s9Bl9_entry() //  [R1]
         { info_tbl: [(c9BLE,
                       label: sat_s9Bl9_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BLE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9BLF; else goto c9BLG;
       c9BLF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BLG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Dynamic.$fExceptionDynamic1_closure;
           Sp = Sp - 32;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s9Bla_entry() //  [R1]
         { info_tbl: [(c9BLH,
                       label: sat_s9Bla_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BLH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9BLI; else goto c9BLJ;
       c9BLI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BLJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9BLv_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9BLN; else goto c9BLw;
       u9BLN: // global
           call _c9BLv(R1) args: 0, res: 0, upd: 0;
       c9BLw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9BLv() //  [R1]
         { info_tbl: [(c9BLv,
                       label: block_c9BLv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BLv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9BLM; else goto c9BLL;
       c9BLM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9BLL: // global
           _s9Bl7::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s9Bl9_info;
           P64[Hp] = _s9Bl7::P64;
           R3 = Hp - 16;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Blb_entry() //  [R1]
         { info_tbl: [(c9BLO,
                       label: sat_s9Blb_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BLO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9BLS; else goto c9BLR;
       c9BLS: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BLR: // global
           _s9Bl0::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s9Bla_info;
           P64[Hp] = _s9Bl0::P64;
           R3 = Hp - 16;
           R2 = lvl3_r9Bhy_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Blc_entry() //  [R1]
         { info_tbl: [(c9BLV,
                       label: sat_s9Blc_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BLV: // global
           _s9Blc::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto c9BLW; else goto c9BLX;
       c9BLX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9BLZ; else goto c9BLY;
       c9BLZ: // global
           HpAlloc = 24;
           goto c9BLW;
       c9BLW: // global
           R1 = _s9Blc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BLY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9Blc::P64;
           _s9Bl0::P64 = P64[_s9Blc::P64 + 16];
           _s9Bl3::P64 = P64[_s9Blc::P64 + 24];
           I64[Hp - 16] = sat_s9Blb_info;
           P64[Hp] = _s9Bl0::P64;
           I64[Sp - 32] = block_c9BLT_info;
           R3 = _s9Bl3::P64;
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Data.Dynamic.$fExceptionDynamic1_closure;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 48;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9BLT() //  [R1]
         { info_tbl: [(c9BLT,
                       label: block_c9BLT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BLT: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Bld_entry() //  [R1]
         { info_tbl: [(c9BM3,
                       label: sat_s9Bld_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BM3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9BM4; else goto c9BM5;
       c9BM4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BM5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9BLe_info;
           _s9Bl0::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s9Bl0::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9BM9; else goto c9BLf;
       u9BM9: // global
           call _c9BLe(R1) args: 0, res: 0, upd: 0;
       c9BLf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9BLe() //  [R1]
         { info_tbl: [(c9BLe,
                       label: block_c9BLe_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BLe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9BM8; else goto c9BM7;
       c9BM8: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9BM7: // global
           _s9Bl3::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s9Blc_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s9Bl3::P64;
           R3 = Hp - 24;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Ble_entry() //  [R1]
         { info_tbl: [(c9BMa,
                       label: sat_s9Ble_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BMa: // global
           _s9Ble::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9BMb; else goto c9BMc;
       c9BMc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9BMe; else goto c9BMd;
       c9BMe: // global
           HpAlloc = 32;
           goto c9BMb;
       c9BMb: // global
           R1 = _s9Ble::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BMd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9Ble::P64;
           _s9Bl0::P64 = P64[_s9Ble::P64 + 16];
           _s9Bl1::P64 = P64[_s9Ble::P64 + 24];
           I64[Hp - 24] = sat_s9Bld_info;
           P64[Hp - 8] = _s9Bl0::P64;
           P64[Hp] = _s9Bl1::P64;
           R3 = Hp - 24;
           R2 = lvl2_r9Bhx_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Dynamic.dynApp1_entry() //  [R2, R3]
         { info_tbl: [(c9BMh,
                       label: Data.Dynamic.dynApp1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BMh: // global
           _s9Bl1::P64 = R3;
           _s9Bl0::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9BMi; else goto c9BMj;
       c9BMj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9BMl; else goto c9BMk;
       c9BMl: // global
           HpAlloc = 32;
           goto c9BMi;
       c9BMi: // global
           R3 = _s9Bl1::P64;
           R2 = _s9Bl0::P64;
           R1 = Data.Dynamic.dynApp1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9BMk: // global
           I64[Hp - 24] = sat_s9Ble_info;
           P64[Hp - 8] = _s9Bl0::P64;
           P64[Hp] = _s9Bl1::P64;
           I64[Sp - 8] = block_c9BMf_info;
           R3 = Hp - 24;
           R2 = lvl1_r9Bhw_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9BMf() //  [R1]
         { info_tbl: [(c9BMf,
                       label: block_c9BMf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BMf: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.231503098 UTC

[section ""data" . Data.Dynamic.dynApp_closure" {
     Data.Dynamic.dynApp_closure:
         const Data.Dynamic.dynApp_info;
         const 0;
 },
 Data.Dynamic.dynApp_entry() //  [R2, R3]
         { info_tbl: [(c9BMz,
                       label: Data.Dynamic.dynApp_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BMz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9BMA; else goto c9BMB;
       c9BMA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.dynApp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9BMB: // global
           I64[Sp - 24] = block_c9BMt_info;
           _s9Blh::P64 = R3;
           R3 = R3;
           _s9Blg::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s9Blg::P64;
           P64[Sp - 8] = _s9Blh::P64;
           Sp = Sp - 24;
           call Data.Dynamic.dynApply_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9BMt() //  [R1]
         { info_tbl: [(c9BMt,
                       label: block_c9BMt_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BMt: // global
           if (R1 & 7 == 1) goto c9BMw; else goto c9BMx;
       c9BMw: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Dynamic.dynApp1_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9BMx: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.232765461 UTC

[section ""data" . Data.Dynamic.Dynamic_closure" {
     Data.Dynamic.Dynamic_closure:
         const Data.Dynamic.Dynamic_info;
 },
 Data.Dynamic.Dynamic_entry() //  [R2, R3]
         { info_tbl: [(c9BMN,
                       label: Data.Dynamic.Dynamic_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BMN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9BMR; else goto c9BMQ;
       c9BMR: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.Dynamic_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9BMQ: // global
           I64[Hp - 16] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.23365806 UTC

[Data.Dynamic.Dynamic_con_entry() //  [R1]
         { info_tbl: [(c9BMS,
                       label: Data.Dynamic.Dynamic_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,68,97,116,97,46,68,121,110,97,109,105,99,46,68,121,110,97,109,105,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BMS: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.234377918 UTC

[section ""relreadonly" . S9Bm7_srt" {
     S9Bm7_srt:
         const Data.Typeable.Internal.showTypeable_closure;
         const Data.Dynamic.$w$cshowsPrec_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Data.Dynamic.fromDyn_closure;
         const Data.Dynamic.fromDynamic_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.fpTYPELiftedRep_closure;
         const Data.Typeable.Internal.$mApp1_closure;
         const Data.Dynamic.dynApply_closure;
         const lvl_r9Bhp_closure;
         const Data.Dynamic.$fExceptionDynamic1_closure;
         const Data.Dynamic.$fExceptionDynamic_$cshow_closure;
         const Data.Dynamic.$fShowDynamic1_closure;
         const Data.Dynamic.$fExceptionDynamic_$cfromException_closure;
         const Data.Dynamic.$fExceptionDynamic5_closure;
         const Data.Dynamic.$fExceptionDynamic_closure;
         const Data.Dynamic.$fExceptionDynamic_$ctoException_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Dynamic.dynApp1_closure;
         const Data.Dynamic.dynApp_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.235247011 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:04:43.236340309 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic3_closure" {
     Data.Dynamic.$fExceptionDynamic3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.238693192 UTC

[section ""cstring" . Data.Dynamic.$fExceptionDynamic4_bytes" {
     Data.Dynamic.$fExceptionDynamic4_bytes:
         I8[] [60,60]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.240409703 UTC

[section ""cstring" . Data.Dynamic.$fExceptionDynamic2_bytes" {
     Data.Dynamic.$fExceptionDynamic2_bytes:
         I8[] [62,62]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.243043949 UTC

[section ""data" . Data.Dynamic.$w$cshowsPrec_closure" {
     Data.Dynamic.$w$cshowsPrec_closure:
         const Data.Dynamic.$w$cshowsPrec_info;
         const 0;
 },
 f_s9BhE_entry() //  [R1]
         { info_tbl: [(c9BNa,
                       label: f_s9BhE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BNa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9BNb; else goto c9BNc;
       c9BNb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BNc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           Sp = Sp - 16;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BhG_entry() //  [R1]
         { info_tbl: [(c9BNq,
                       label: sat_s9BhG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BNq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9BNr; else goto c9BNs;
       c9BNr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BNs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BhH_entry() //  [R1]
         { info_tbl: [(c9BNt,
                       label: sat_s9BhH_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BNt: // global
           _s9BhH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9BNu; else goto c9BNv;
       c9BNv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9BNx; else goto c9BNw;
       c9BNx: // global
           HpAlloc = 24;
           goto c9BNu;
       c9BNu: // global
           R1 = _s9BhH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BNw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9BhH::P64;
           _s9BhE::P64 = P64[_s9BhH::P64 + 16];
           _s9BhF::P64 = P64[_s9BhH::P64 + 24];
           I64[Hp - 16] = sat_s9BhG_info;
           P64[Hp] = _s9BhF::P64;
           R2 = Hp - 16;
           R1 = _s9BhE::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BhI_entry() //  [R1, R2]
         { info_tbl: [(c9BNy,
                       label: sat_s9BhI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BNy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9BNC; else goto c9BNB;
       c9BNC: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9BNB: // global
           _s9BhE::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s9BhH_info;
           P64[Hp - 8] = _s9BhE::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Dynamic.$w$cshowsPrec_entry() //  [R2]
         { info_tbl: [(c9BND,
                       label: Data.Dynamic.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BND: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9BNE; else goto c9BNF;
       c9BNE: // global
           R2 = R2;
           R1 = Data.Dynamic.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9BNF: // global
           I64[Sp - 8] = block_c9BN1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BNJ; else goto c9BN2;
       u9BNJ: // global
           call _c9BN1(R1) args: 0, res: 0, upd: 0;
       c9BN2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BN1() //  [R1]
         { info_tbl: [(c9BN1,
                       label: block_c9BN1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BN1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9BNI; else goto c9BNH;
       c9BNI: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BNH: // global
           _s9BhC::P64 = P64[R1 + 7];
           I64[Hp - 32] = f_s9BhE_info;
           P64[Hp - 16] = _s9BhC::P64;
           I64[Hp - 8] = sat_s9BhI_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.258394634 UTC

[section ""data" . Data.Dynamic.$fShowDynamic_$cshowsPrec_closure" {
     Data.Dynamic.$fShowDynamic_$cshowsPrec_closure:
         const Data.Dynamic.$fShowDynamic_$cshowsPrec_info;
         const 0;
 },
 Data.Dynamic.$fShowDynamic_$cshowsPrec_entry() //  [R3]
         { info_tbl: [(c9BOe,
                       label: Data.Dynamic.$fShowDynamic_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BOe: // global
           R2 = R3;
           call Data.Dynamic.$w$cshowsPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.261925889 UTC

[section ""data" . Data.Dynamic.toDyn_closure" {
     Data.Dynamic.toDyn_closure:
         const Data.Dynamic.toDyn_info;
 },
 Data.Dynamic.toDyn_entry() //  [R2, R3]
         { info_tbl: [(c9BOq,
                       label: Data.Dynamic.toDyn_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BOq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9BOu; else goto c9BOt;
       c9BOu: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.toDyn_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9BOt: // global
           I64[Hp - 16] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.265995224 UTC

[section ""data" . Data.Dynamic.fromDyn_closure" {
     Data.Dynamic.fromDyn_closure:
         const Data.Dynamic.fromDyn_info;
         const 0;
 },
 Data.Dynamic.fromDyn_entry() //  [R2, R3, R4]
         { info_tbl: [(c9BOH,
                       label: Data.Dynamic.fromDyn_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BOH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9BOI; else goto c9BOJ;
       c9BOI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.fromDyn_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9BOJ: // global
           I64[Sp - 24] = block_c9BOE_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9BOZ; else goto c9BOF;
       u9BOZ: // global
           call _c9BOE(R1) args: 0, res: 0, upd: 0;
       c9BOF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BOE() //  [R1]
         { info_tbl: [(c9BOE,
                       label: block_c9BOE_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BOE: // global
           I64[Sp] = block_c9BOM_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9BOM() //  [R1]
         { info_tbl: [(c9BOM,
                       label: block_c9BOM_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BOM: // global
           if (R1 & 7 == 1) goto c9BOT; else goto c9BOX;
       c9BOT: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c9BOX: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.273480898 UTC

[section ""data" . Data.Dynamic.fromDynamic_closure" {
     Data.Dynamic.fromDynamic_closure:
         const Data.Dynamic.fromDynamic_info;
         const 0;
 },
 Data.Dynamic.fromDynamic_entry() //  [R2, R3]
         { info_tbl: [(c9BPm,
                       label: Data.Dynamic.fromDynamic_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BPm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9BPn; else goto c9BPo;
       c9BPn: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.fromDynamic_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9BPo: // global
           I64[Sp - 16] = block_c9BPj_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9BPH; else goto c9BPk;
       u9BPH: // global
           call _c9BPj(R1) args: 0, res: 0, upd: 0;
       c9BPk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BPj() //  [R1]
         { info_tbl: [(c9BPj,
                       label: block_c9BPj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BPj: // global
           I64[Sp] = block_c9BPr_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9BPr() //  [R1]
         { info_tbl: [(c9BPr,
                       label: block_c9BPr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BPr: // global
           if (R1 & 7 == 1) goto c9BPy; else goto c9BPC;
       c9BPy: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9BPC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9BPF; else goto c9BPE;
       c9BPF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BPE: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.281900702 UTC

[section ""data" . lvl_r9Bhp_closure" {
     lvl_r9Bhp_closure:
         const lvl_r9Bhp_info;
         const 0;
         const 0;
         const 0;
 },
 lvl_r9Bhp_entry() //  [R1]
         { info_tbl: [(c9BQg,
                       label: lvl_r9Bhp_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BQg: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c9BQh; else goto c9BQi;
       c9BQh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9BQi: // global
           (_c9BQ3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9BQ3::I64 == 0) goto c9BQ5; else goto c9BQ4;
       c9BQ5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9BQ4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9BQ3::I64;
           I64[Sp - 24] = block_c9BQ6_info;
           R6 = 0;
           R5 = GHC.Types.$tcTYPE2_closure;
           R4 = GHC.Types.tr$ModuleGHCPrim_closure;
           R3 = 12502576999761269576;
           R2 = 16277905407886699876;
           P64[Sp - 40] = GHC.Types.$tcTYPE1_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9BQ6() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9BQ6,
                       label: block_c9BQ6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BQ6: // global
           I64[Sp - 40] = block_c9BQa_info;
           R6 = 0;
           _s9Bi3::P64 = R5;
           R5 = GHC.Types.$tc'LiftedRep1_closure;
           _s9Bi2::P64 = R4;
           R4 = GHC.Types.tr$ModuleGHCPrim_closure;
           _s9Bi1::P64 = R3;
           R3 = 5595830777317938557;
           _s9Bi0::I64 = R2;
           R2 = 16105171405184389724;
           P64[Sp - 56] = GHC.Types.$tc'AddrRep1_closure;
           P64[Sp - 48] = GHC.Types.[]_closure+1;
           I64[Sp - 32] = _s9Bi0::I64;
           P64[Sp - 24] = _s9Bi1::P64;
           P64[Sp - 16] = _s9Bi2::P64;
           P64[Sp - 8] = _s9Bi3::P64;
           I64[Sp] = R1;
           Sp = Sp - 56;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9BQa() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9BQa,
                       label: block_c9BQa_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BQa: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9BQb() args: 0, res: 0, upd: 0;
     }
 },
 _c9BQb() //  []
         { info_tbl: [(c9BQb,
                       label: block_c9BQb_info
                       rep:StackRep [True, False, False, False, True, True, False, False,
                                     False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BQb: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c9BQm; else goto c9BQl;
       c9BQm: // global
           HpAlloc = 96;
           I64[Sp] = block_c9BQb_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9BQl: // global
           I64[Hp - 88] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = P64[Sp + 64];
           P64[Hp - 16] = P64[Sp + 72];
           I64[Hp - 8] = I64[Sp + 80];
           I64[Hp] = I64[Sp + 48];
           R3 = Hp - 86;
           R2 = Hp - 38;
           Sp = Sp + 88;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.297784956 UTC

[section ""data" . Data.Dynamic.dynApply_closure" {
     Data.Dynamic.dynApply_closure:
         const Data.Dynamic.dynApply_info;
         const 0;
 },
 Data.Dynamic.dynApply_entry() //  [R2, R3]
         { info_tbl: [(c9BQW,
                       label: Data.Dynamic.dynApply_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BQW: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c9BQX; else goto c9BQY;
       c9BQX: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.dynApply_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9BQY: // global
           I64[Sp - 16] = block_c9BQT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9BX5; else goto c9BQU;
       u9BX5: // global
           call _c9BQT(R1) args: 0, res: 0, upd: 0;
       c9BQU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BQT() //  [R1]
         { info_tbl: [(c9BQT,
                       label: block_c9BQT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BQT: // global
           I64[Sp - 8] = block_c9BR1_info;
           _s9Big::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9Big::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BX4; else goto c9BR3;
       u9BX4: // global
           call _c9BR1(R1) args: 0, res: 0, upd: 0;
       c9BR3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BR1() //  [R1]
         { info_tbl: [(c9BR1,
                       label: block_c9BR1_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BR1: // global
           if (R1 & 7 == 4) goto c9BRe; else goto u9BWE;
       c9BRe: // global
           I64[Sp - 8] = block_c9BRc_info;
           _s9Bik::P64 = P64[R1 + 4];
           _s9Bil::P64 = P64[R1 + 12];
           R1 = P64[Sp + 16];
           P64[Sp] = _s9Bil::P64;
           P64[Sp + 16] = _s9Bik::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BX6; else goto c9BRf;
       u9BX6: // global
           call _c9BRc(R1) args: 0, res: 0, upd: 0;
       c9BRf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9BWE: // global
           Sp = Sp + 24;
           call _c9BWe() args: 0, res: 0, upd: 0;
     }
 },
 _c9BRc() //  [R1]
         { info_tbl: [(c9BRc,
                       label: block_c9BRc_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BRc: // global
           I64[Sp] = block_c9BRj_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 15];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9BRj() //  [R1]
         { info_tbl: [(c9BRj,
                       label: block_c9BRj_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BRj: // global
           if (R1 & 7 == 1) goto u9BWF; else goto c9BRv;
       u9BWF: // global
           Sp = Sp + 32;
           call _c9BWe() args: 0, res: 0, upd: 0;
       c9BRv: // global
           _s9Bil::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9BRt_info;
           R1 = _s9Bil::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9BX8; else goto c9BRw;
       u9BX8: // global
           call _c9BRt(R1) args: 0, res: 0, upd: 0;
       c9BRw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BRt() //  [R1]
         { info_tbl: [(c9BRt,
                       label: block_c9BRt_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BRt: // global
           _c9BWq::P64 = R1 & 7;
           if (_c9BWq::P64 < 3) goto u9BWx; else goto u9BWy;
       u9BWx: // global
           if (_c9BWq::P64 < 2) goto c9BS8; else goto c9BTV;
       c9BS8: // global
           I64[Sp - 8] = block_c9BRC_info;
           _s9Biq::P64 = R1;
           R1 = lvl_r9Bhp_closure;
           P64[Sp] = _s9Biq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BXa; else goto c9BS9;
       u9BXa: // global
           call _c9BRC(R1) args: 0, res: 0, upd: 0;
       c9BS9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9BTV: // global
           I64[Sp - 16] = block_c9BSy_info;
           _s9Biq::P64 = R1;
           _s9BiT::P64 = P64[R1 + 22];
           R1 = lvl_r9Bhp_closure;
           P64[Sp - 8] = _s9BiT::P64;
           P64[Sp] = _s9Biq::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9BXb; else goto c9BTW;
       u9BXb: // global
           call _c9BSy(R1) args: 0, res: 0, upd: 0;
       c9BTW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9BWy: // global
           if (_c9BWq::P64 < 4) goto c9BVI; else goto c9BW8;
       c9BVI: // global
           I64[Sp - 16] = block_c9BUl_info;
           _s9Biq::P64 = R1;
           _s9BjF::P64 = P64[R1 + 21];
           R1 = lvl_r9Bhp_closure;
           P64[Sp - 8] = _s9BjF::P64;
           P64[Sp] = _s9Biq::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9BXc; else goto c9BVJ;
       u9BXc: // global
           call _c9BUl(R1) args: 0, res: 0, upd: 0;
       c9BVJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9BW8: // global
           I64[Sp - 8] = block_c9BW6_info;
           R3 = Data.Typeable.Internal.$mApp1_closure;
           R2 = lvl_r9Bhp_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9BRC() //  [R1]
         { info_tbl: [(c9BRC,
                       label: block_c9BRC_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BRC: // global
           _c9BWw::P64 = R1 & 7;
           if (_c9BWw::P64 < 3) goto u9BWz; else goto c9BSt;
       u9BWz: // global
           if (_c9BWw::P64 < 2) goto c9BSg; else goto c9BSp;
       c9BSg: // global
           I64[Sp] = block_c9BSd_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9BXd; else goto c9BSh;
       u9BXd: // global
           call _c9BSd(R1) args: 0, res: 0, upd: 0;
       c9BSh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9BSp: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u9BXf;
       c9BSt: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u9BXf;
       u9BXf: // global
           call _s9Bir() args: 0, res: 0, upd: 0;
     }
 },
 _c9BSd() //  [R1]
         { info_tbl: [(c9BSd,
                       label: block_c9BSd_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BSd: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s9Bir() args: 0, res: 0, upd: 0;
     }
 },
 _s9Bir() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s9Bir: // global
           I64[Sp - 8] = block_c9BRH_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BXG; else goto c9BRJ;
       u9BXG: // global
           call _c9BRH(R1) args: 0, res: 0, upd: 0;
       c9BRJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BRH() //  [R1]
         { info_tbl: [(c9BRH,
                       label: block_c9BRH_info
                       rep:StackRep [True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BRH: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9BRP; else goto c9BRO;
       c9BRP: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BRO: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c9BS6; else goto u9BWJ;
       c9BS6: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c9BS5; else goto u9BWK;
       c9BS5: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BWK: // global
           Sp = Sp + 48;
           goto u9BXh;
       u9BWJ: // global
           Sp = Sp + 48;
           goto u9BXh;
       u9BXh: // global
           call _c9BVA() args: 0, res: 0, upd: 0;
     }
 },
 _c9BSy() //  [R1]
         { info_tbl: [(c9BSy,
                       label: block_c9BSy_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BSy: // global
           _c9BWu::P64 = R1 & 7;
           if (_c9BWu::P64 < 3) goto u9BWA; else goto c9BUg;
       u9BWA: // global
           if (_c9BWu::P64 < 2) goto c9BU3; else goto c9BUc;
       c9BU3: // global
           I64[Sp] = block_c9BU0_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9BXj; else goto c9BU4;
       u9BXj: // global
           call _c9BU0(R1) args: 0, res: 0, upd: 0;
       c9BU4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9BUc: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u9BXl;
       c9BUg: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u9BXl;
       u9BXl: // global
           call _s9BiU() args: 0, res: 0, upd: 0;
     }
 },
 _c9BU0() //  [R1]
         { info_tbl: [(c9BU0,
                       label: block_c9BU0_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BU0: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s9BiU() args: 0, res: 0, upd: 0;
     }
 },
 _s9BiU() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s9BiU: // global
           I64[Sp - 8] = block_c9BSD_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BXH; else goto c9BSF;
       u9BXH: // global
           call _c9BSD(R1) args: 0, res: 0, upd: 0;
       c9BSF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BSD() //  [R1]
         { info_tbl: [(c9BSD,
                       label: block_c9BSD_info
                       rep:StackRep [True, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BSD: // global
           _s9Big::P64 = P64[Sp + 40];
           _s9Bio::P64 = P64[Sp + 48];
           _s9Biq::P64 = P64[Sp + 32];
           _s9BiV::I64 = I64[Sp + 16];
           _s9BiW::I64 = I64[Sp + 8];
           _c9BWv::P64 = R1 & 7;
           if (_c9BWv::P64 < 3) goto u9BWB; else goto c9BTy;
       u9BWB: // global
           if (_c9BWv::P64 < 2) goto c9BSM; else goto c9BTb;
       c9BSM: // global
           I64[Sp] = block_c9BSJ_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9BXm; else goto c9BSN;
       u9BXm: // global
           call _c9BSJ(R1) args: 0, res: 0, upd: 0;
       c9BSN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9BTb: // global
           Hp = Hp + 72;
           _s9BiX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c9BTD; else goto c9BTf;
       c9BTf: // global
           if (_s9BiV::I64 == I64[_s9BiX::P64 + 30]) goto c9BTx; else goto u9BWQ;
       c9BTx: // global
           if (_s9BiW::I64 == I64[_s9BiX::P64 + 38]) goto c9BTw; else goto u9BWR;
       c9BTw: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s9Big::P64;
           P64[Hp - 40] = _s9Bio::P64;
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = _s9Biq::P64;
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BWR: // global
           Sp = Sp + 56;
           goto u9BXq;
       u9BWQ: // global
           Sp = Sp + 56;
           goto u9BXq;
       c9BTy: // global
           Hp = Hp + 72;
           _s9BiX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c9BTD; else goto c9BTC;
       c9BTD: // global
           HpAlloc = 72;
           R1 = _s9BiX::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BTC: // global
           if (_s9BiV::I64 == I64[_s9BiX::P64 + 29]) goto c9BTU; else goto u9BWS;
       c9BTU: // global
           if (_s9BiW::I64 == I64[_s9BiX::P64 + 37]) goto c9BTT; else goto u9BWT;
       c9BTT: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s9Big::P64;
           P64[Hp - 40] = _s9Bio::P64;
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = _s9Biq::P64;
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BWT: // global
           Sp = Sp + 56;
           goto u9BXq;
       u9BWS: // global
           Sp = Sp + 56;
           goto u9BXq;
       u9BXq: // global
           call _c9BVA() args: 0, res: 0, upd: 0;
     }
 },
 _c9BSJ() //  [R1]
         { info_tbl: [(c9BSJ,
                       label: block_c9BSJ_info
                       rep:StackRep [True, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BSJ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9BST; else goto c9BSS;
       c9BST: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BSS: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c9BTa; else goto u9BWO;
       c9BTa: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c9BT9; else goto u9BWP;
       c9BT9: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BWP: // global
           Sp = Sp + 56;
           goto u9BXs;
       u9BWO: // global
           Sp = Sp + 56;
           goto u9BXs;
       u9BXs: // global
           call _c9BVA() args: 0, res: 0, upd: 0;
     }
 },
 _c9BUl() //  [R1]
         { info_tbl: [(c9BUl,
                       label: block_c9BUl_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BUl: // global
           _c9BWs::P64 = R1 & 7;
           if (_c9BWs::P64 < 3) goto u9BWC; else goto c9BW3;
       u9BWC: // global
           if (_c9BWs::P64 < 2) goto c9BVQ; else goto c9BVZ;
       c9BVQ: // global
           I64[Sp] = block_c9BVN_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9BXu; else goto c9BVR;
       u9BXu: // global
           call _c9BVN(R1) args: 0, res: 0, upd: 0;
       c9BVR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9BVZ: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u9BXw;
       c9BW3: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u9BXw;
       u9BXw: // global
           call _s9BjG() args: 0, res: 0, upd: 0;
     }
 },
 _c9BVN() //  [R1]
         { info_tbl: [(c9BVN,
                       label: block_c9BVN_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BVN: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s9BjG() args: 0, res: 0, upd: 0;
     }
 },
 _s9BjG() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s9BjG: // global
           I64[Sp - 8] = block_c9BUq_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9BXI; else goto c9BUs;
       u9BXI: // global
           call _c9BUq(R1) args: 0, res: 0, upd: 0;
       c9BUs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9BUq() //  [R1]
         { info_tbl: [(c9BUq,
                       label: block_c9BUq_info
                       rep:StackRep [True, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BUq: // global
           _s9Big::P64 = P64[Sp + 40];
           _s9Bio::P64 = P64[Sp + 48];
           _s9Biq::P64 = P64[Sp + 32];
           _s9BjH::I64 = I64[Sp + 16];
           _s9BjI::I64 = I64[Sp + 8];
           _c9BWt::P64 = R1 & 7;
           if (_c9BWt::P64 < 3) goto u9BWD; else goto c9BVl;
       u9BWD: // global
           if (_c9BWt::P64 < 2) goto c9BUz; else goto c9BUY;
       c9BUz: // global
           I64[Sp] = block_c9BUw_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9BXx; else goto c9BUA;
       u9BXx: // global
           call _c9BUw(R1) args: 0, res: 0, upd: 0;
       c9BUA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9BUY: // global
           Hp = Hp + 72;
           _s9BjJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c9BVq; else goto c9BV2;
       c9BV2: // global
           if (_s9BjH::I64 == I64[_s9BjJ::P64 + 30]) goto c9BVk; else goto u9BWZ;
       c9BVk: // global
           if (_s9BjI::I64 == I64[_s9BjJ::P64 + 38]) goto c9BVj; else goto u9BX0;
       c9BVj: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s9Big::P64;
           P64[Hp - 40] = _s9Bio::P64;
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = _s9Biq::P64;
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BX0: // global
           Sp = Sp + 56;
           goto u9BXB;
       u9BWZ: // global
           Sp = Sp + 56;
           goto u9BXB;
       c9BVl: // global
           Hp = Hp + 72;
           _s9BjJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c9BVq; else goto c9BVp;
       c9BVq: // global
           HpAlloc = 72;
           R1 = _s9BjJ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BVp: // global
           if (_s9BjH::I64 == I64[_s9BjJ::P64 + 29]) goto c9BVH; else goto u9BX1;
       c9BVH: // global
           if (_s9BjI::I64 == I64[_s9BjJ::P64 + 37]) goto c9BVG; else goto u9BX2;
       c9BVG: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s9Big::P64;
           P64[Hp - 40] = _s9Bio::P64;
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = _s9Biq::P64;
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BX2: // global
           Sp = Sp + 56;
           goto u9BXB;
       u9BX1: // global
           Sp = Sp + 56;
           goto u9BXB;
       u9BXB: // global
           call _c9BVA() args: 0, res: 0, upd: 0;
     }
 },
 _c9BUw() //  [R1]
         { info_tbl: [(c9BUw,
                       label: block_c9BUw_info
                       rep:StackRep [True, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BUw: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9BUG; else goto c9BUF;
       c9BUG: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BUF: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c9BUX; else goto u9BWX;
       c9BUX: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c9BUW; else goto u9BWY;
       c9BUW: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9BWY: // global
           Sp = Sp + 56;
           goto u9BXD;
       u9BWX: // global
           Sp = Sp + 56;
           goto u9BXD;
       u9BXD: // global
           call _c9BVA() args: 0, res: 0, upd: 0;
     }
 },
 _c9BVA() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BVA: // global
           Hp = Hp - 72;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9BW6() //  [R1]
         { info_tbl: [(c9BW6,
                       label: block_c9BW6_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BW6: // global
           if (R1 & 7 == 1) goto u9BX3; else goto c9BWk;
       u9BX3: // global
           Sp = Sp + 32;
           call _c9BWe() args: 0, res: 0, upd: 0;
       c9BWk: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9BWn; else goto c9BWm;
       c9BWn: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9BWm: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9BWe() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9BWe: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.346354258 UTC

[section ""data" . Data.Dynamic.dynTypeRep_closure" {
     Data.Dynamic.dynTypeRep_closure:
         const Data.Dynamic.dynTypeRep_info;
 },
 Data.Dynamic.dynTypeRep_entry() //  [R2]
         { info_tbl: [(c9C0m,
                       label: Data.Dynamic.dynTypeRep_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C0m: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9C0n; else goto c9C0o;
       c9C0n: // global
           R2 = R2;
           R1 = Data.Dynamic.dynTypeRep_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9C0o: // global
           I64[Sp - 8] = block_c9C0j_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9C0s; else goto c9C0k;
       u9C0s: // global
           call _c9C0j(R1) args: 0, res: 0, upd: 0;
       c9C0k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9C0j() //  [R1]
         { info_tbl: [(c9C0j,
                       label: block_c9C0j_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C0j: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.351485514 UTC

[section ""cstring" . Data.Dynamic.$trModule4_bytes" {
     Data.Dynamic.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.3531418 UTC

[section ""data" . Data.Dynamic.$trModule3_closure" {
     Data.Dynamic.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Dynamic.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.354898337 UTC

[section ""cstring" . Data.Dynamic.$trModule2_bytes" {
     Data.Dynamic.$trModule2_bytes:
         I8[] [68,97,116,97,46,68,121,110,97,109,105,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.356510389 UTC

[section ""data" . Data.Dynamic.$trModule1_closure" {
     Data.Dynamic.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Dynamic.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.358793903 UTC

[section ""data" . Data.Dynamic.$trModule_closure" {
     Data.Dynamic.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Dynamic.$trModule3_closure+1;
         const Data.Dynamic.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.360662767 UTC

[section ""data" . $krep_r9Bhq_closure" {
     $krep_r9Bhq_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.362404925 UTC

[section ""data" . $krep1_r9Bhr_closure" {
     $krep1_r9Bhr_closure:
         const :_con_info;
         const $krep_r9Bhq_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.364627166 UTC

[section ""data" . $krep2_r9Bhs_closure" {
     $krep2_r9Bhs_closure:
         const :_con_info;
         const GHC.Types.krep$*_closure;
         const $krep1_r9Bhr_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.366370669 UTC

[section ""data" . $krep3_r9Bht_closure" {
     $krep3_r9Bht_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Typeable.Internal.$tcTypeRep_closure;
         const $krep2_r9Bhs_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.368087172 UTC

[section ""cstring" . Data.Dynamic.$fExceptionDynamic7_bytes" {
     Data.Dynamic.$fExceptionDynamic7_bytes:
         I8[] [68,121,110,97,109,105,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.371390037 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic6_closure" {
     Data.Dynamic.$fExceptionDynamic6_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Dynamic.$fExceptionDynamic7_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.373154098 UTC

[section ""data" . Data.Dynamic.$tcDynamic_closure" {
     Data.Dynamic.$tcDynamic_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Dynamic.$trModule_closure+1;
         const Data.Dynamic.$fExceptionDynamic6_closure+1;
         const GHC.Types.krep$*_closure;
         const 12333845116585145369;
         const 13454739855111402131;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.375603658 UTC

[section ""data" . $krep4_r9Bhu_closure" {
     $krep4_r9Bhu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Dynamic.$tcDynamic_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.377381416 UTC

[section ""data" . $krep5_r9Bhv_closure" {
     $krep5_r9Bhv_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r9Bhq_closure+2;
         const $krep4_r9Bhu_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.379156461 UTC

[section ""data" . Data.Dynamic.$tc'Dynamic1_closure" {
     Data.Dynamic.$tc'Dynamic1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r9Bht_closure+1;
         const $krep5_r9Bhv_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.380946467 UTC

[section ""cstring" . Data.Dynamic.$tc'Dynamic3_bytes" {
     Data.Dynamic.$tc'Dynamic3_bytes:
         I8[] [39,68,121,110,97,109,105,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.382622144 UTC

[section ""data" . Data.Dynamic.$tc'Dynamic2_closure" {
     Data.Dynamic.$tc'Dynamic2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Dynamic.$tc'Dynamic3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.384343147 UTC

[section ""data" . Data.Dynamic.$tc'Dynamic_closure" {
     Data.Dynamic.$tc'Dynamic_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Dynamic.$trModule_closure+1;
         const Data.Dynamic.$tc'Dynamic2_closure+1;
         const Data.Dynamic.$tc'Dynamic1_closure+4;
         const 11394777848779697579;
         const 644307381671950132;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.38737943 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic5_closure" {
     Data.Dynamic.$fExceptionDynamic5_closure:
         const Data.Dynamic.$fExceptionDynamic5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Dynamic.$fExceptionDynamic5_entry() //  [R1]
         { info_tbl: [(c9C15,
                       label: Data.Dynamic.$fExceptionDynamic5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C15: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9C16; else goto c9C17;
       c9C16: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9C17: // global
           (_c9C0X::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9C0X::I64 == 0) goto c9C0Z; else goto c9C0Y;
       c9C0Z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9C0Y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9C0X::I64;
           I64[Sp - 24] = block_c9C10_info;
           R6 = 0;
           R5 = Data.Dynamic.$fExceptionDynamic6_closure+1;
           R4 = Data.Dynamic.$trModule_closure+1;
           R3 = 13454739855111402131;
           R2 = 12333845116585145369;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9C10() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9C10,
                       label: block_c9C10_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C10: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9C11() args: 0, res: 0, upd: 0;
     }
 },
 _c9C11() //  []
         { info_tbl: [(c9C11,
                       label: block_c9C11_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C11: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9C1a; else goto c9C19;
       c9C1a: // global
           HpAlloc = 48;
           I64[Sp] = block_c9C11_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9C19: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.396395488 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic1_closure" {
     Data.Dynamic.$fExceptionDynamic1_closure:
         const Data.Dynamic.$fExceptionDynamic1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Dynamic.$fExceptionDynamic1_entry() //  [R1]
         { info_tbl: [(c9C1C,
                       label: Data.Dynamic.$fExceptionDynamic1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C1C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9C1D; else goto c9C1E;
       c9C1D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9C1E: // global
           (_c9C1z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9C1z::I64 == 0) goto c9C1B; else goto c9C1A;
       c9C1B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9C1A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9C1z::I64;
           R2 = Data.Dynamic.$fExceptionDynamic2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.400779105 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic_$cshow_closure" {
     Data.Dynamic.$fExceptionDynamic_$cshow_closure:
         const Data.Dynamic.$fExceptionDynamic_$cshow_info;
         const 0;
 },
 sat_s9BkI_entry() //  [R1]
         { info_tbl: [(c9C1Z,
                       label: sat_s9BkI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C1Z: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9C20; else goto c9C21;
       c9C20: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9C21: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Dynamic.$fExceptionDynamic1_closure;
           Sp = Sp - 32;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.Dynamic.$fExceptionDynamic_$cshow_entry() //  [R2]
         { info_tbl: [(c9C22,
                       label: Data.Dynamic.$fExceptionDynamic_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C22: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9C23; else goto c9C24;
       c9C23: // global
           R2 = R2;
           R1 = Data.Dynamic.$fExceptionDynamic_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9C24: // global
           I64[Sp - 8] = block_c9C1Q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9C28; else goto c9C1R;
       u9C28: // global
           call _c9C1Q(R1) args: 0, res: 0, upd: 0;
       c9C1R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9C1Q() //  [R1]
         { info_tbl: [(c9C1Q,
                       label: block_c9C1Q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C1Q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9C27; else goto c9C26;
       c9C27: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9C26: // global
           _s9BkG::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s9BkI_info;
           P64[Hp] = _s9BkG::P64;
           R3 = Hp - 16;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.409066114 UTC

[section ""data" . Data.Dynamic.$fShowDynamic1_closure" {
     Data.Dynamic.$fShowDynamic1_closure:
         const Data.Dynamic.$fShowDynamic1_info;
         const 0;
 },
 f_s9BkN_entry() //  [R1]
         { info_tbl: [(c9C2z,
                       label: f_s9BkN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C2z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9C2A; else goto c9C2B;
       c9C2A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9C2B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           Sp = Sp - 16;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BkP_entry() //  [R1]
         { info_tbl: [(c9C2P,
                       label: sat_s9BkP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C2P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9C2Q; else goto c9C2R;
       c9C2Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9C2R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BkQ_entry() //  [R1]
         { info_tbl: [(c9C2S,
                       label: sat_s9BkQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C2S: // global
           _s9BkQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9C2T; else goto c9C2U;
       c9C2U: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9C2W; else goto c9C2V;
       c9C2W: // global
           HpAlloc = 24;
           goto c9C2T;
       c9C2T: // global
           R1 = _s9BkQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9C2V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9BkQ::P64;
           _s9BkN::P64 = P64[_s9BkQ::P64 + 16];
           _s9BkO::P64 = P64[_s9BkQ::P64 + 24];
           I64[Hp - 16] = sat_s9BkP_info;
           P64[Hp] = _s9BkO::P64;
           R2 = Hp - 16;
           R1 = _s9BkN::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9BkR_entry() //  [R1, R2]
         { info_tbl: [(c9C2X,
                       label: sat_s9BkR_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C2X: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9C31; else goto c9C30;
       c9C31: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9C30: // global
           _s9BkN::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s9BkQ_info;
           P64[Hp - 8] = _s9BkN::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Dynamic.$fShowDynamic1_entry() //  [R2]
         { info_tbl: [(c9C32,
                       label: Data.Dynamic.$fShowDynamic1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C32: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9C33; else goto c9C34;
       c9C33: // global
           R2 = R2;
           R1 = Data.Dynamic.$fShowDynamic1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9C34: // global
           I64[Sp - 8] = block_c9C2q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9C38; else goto c9C2r;
       u9C38: // global
           call _c9C2q(R1) args: 0, res: 0, upd: 0;
       c9C2r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9C2q() //  [R1]
         { info_tbl: [(c9C2q,
                       label: block_c9C2q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C2q: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9C37; else goto c9C36;
       c9C37: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9C36: // global
           _s9BkL::P64 = P64[R1 + 7];
           I64[Hp - 32] = f_s9BkN_info;
           P64[Hp - 16] = _s9BkL::P64;
           I64[Hp - 8] = sat_s9BkR_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.423341964 UTC

[section ""data" . Data.Dynamic.$fShowDynamic_$cshowList_closure" {
     Data.Dynamic.$fShowDynamic_$cshowList_closure:
         const Data.Dynamic.$fShowDynamic_$cshowList_info;
         const 0;
 },
 Data.Dynamic.$fShowDynamic_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c9C3D,
                       label: Data.Dynamic.$fShowDynamic_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C3D: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Dynamic.$fShowDynamic1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.426793867 UTC

[section ""data" . Data.Dynamic.$fShowDynamic_closure" {
     Data.Dynamic.$fShowDynamic_closure:
         const GHC.Show.C:Show_con_info;
         const Data.Dynamic.$fShowDynamic_$cshowsPrec_closure+2;
         const Data.Dynamic.$fExceptionDynamic_$cshow_closure+1;
         const Data.Dynamic.$fShowDynamic_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.429079405 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic_$cfromException_closure" {
     Data.Dynamic.$fExceptionDynamic_$cfromException_closure:
         const Data.Dynamic.$fExceptionDynamic_$cfromException_info;
         const 0;
 },
 Data.Dynamic.$fExceptionDynamic_$cfromException_entry() //  [R2]
         { info_tbl: [(c9C3S,
                       label: Data.Dynamic.$fExceptionDynamic_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C3S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9C3W; else goto c9C3X;
       c9C3W: // global
           R2 = R2;
           R1 = Data.Dynamic.$fExceptionDynamic_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9C3X: // global
           I64[Sp - 8] = block_c9C3P_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9C4i; else goto c9C3Q;
       u9C4i: // global
           call _c9C3P(R1) args: 0, res: 0, upd: 0;
       c9C3Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9C3P() //  [R1]
         { info_tbl: [(c9C3P,
                       label: block_c9C3P_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C3P: // global
           I64[Sp - 8] = block_c9C3V_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9C3V() //  [R1]
         { info_tbl: [(c9C3V,
                       label: block_c9C3V_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C3V: // global
           I64[Sp] = block_c9C42_info;
           R3 = Data.Dynamic.$fExceptionDynamic5_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9C42() //  [R1]
         { info_tbl: [(c9C42,
                       label: block_c9C42_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C42: // global
           if (R1 & 7 == 1) goto c9C49; else goto c9C4d;
       c9C49: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9C4d: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9C4g; else goto c9C4f;
       c9C4g: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9C4f: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.439467523 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic_closure" {
     Data.Dynamic.$fExceptionDynamic_closure:
         const GHC.Exception.C:Exception_con_info;
         const Data.Dynamic.$fExceptionDynamic5_closure;
         const Data.Dynamic.$fShowDynamic_closure+1;
         const Data.Dynamic.$fExceptionDynamic_$ctoException_closure+1;
         const Data.Dynamic.$fExceptionDynamic_$cfromException_closure+1;
         const Data.Dynamic.$fExceptionDynamic_$cshow_closure+1;
         const 0;
 },
 section ""data" . Data.Dynamic.$fExceptionDynamic_$ctoException_closure" {
     Data.Dynamic.$fExceptionDynamic_$ctoException_closure:
         const Data.Dynamic.$fExceptionDynamic_$ctoException_info;
         const 0;
 },
 Data.Dynamic.$fExceptionDynamic_$ctoException_entry() //  [R2]
         { info_tbl: [(c9C4J,
                       label: Data.Dynamic.$fExceptionDynamic_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C4J: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9C4N; else goto c9C4M;
       c9C4N: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Dynamic.$fExceptionDynamic_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9C4M: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Data.Dynamic.$fExceptionDynamic_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.44393524 UTC

[section ""cstring" . lvl1_r9Bhw_bytes" {
     lvl1_r9Bhw_bytes:
         I8[] [84,121,112,101,32,101,114,114,111,114,32,105,110,32,100,121,110,97,109,105,99,32,97,112,112,108,105,99,97,116,105,111,110,46,10]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.445534323 UTC

[section ""cstring" . lvl2_r9Bhx_bytes" {
     lvl2_r9Bhx_bytes:
         I8[] [67,97,110,39,116,32,97,112,112,108,121,32,102,117,110,99,116,105,111,110,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.447163522 UTC

[section ""cstring" . lvl3_r9Bhy_bytes" {
     lvl3_r9Bhy_bytes:
         I8[] [32,116,111,32,97,114,103,117,109,101,110,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.450224105 UTC

[section ""data" . Data.Dynamic.dynApp1_closure" {
     Data.Dynamic.dynApp1_closure:
         const Data.Dynamic.dynApp1_info;
         const 0;
 },
 sat_s9Bl9_entry() //  [R1]
         { info_tbl: [(c9C5z,
                       label: sat_s9Bl9_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C5z: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9C5A; else goto c9C5B;
       c9C5A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9C5B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Dynamic.$fExceptionDynamic1_closure;
           Sp = Sp - 32;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s9Bla_entry() //  [R1]
         { info_tbl: [(c9C5C,
                       label: sat_s9Bla_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C5C: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9C5D; else goto c9C5E;
       c9C5D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9C5E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9C5q_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9C5I; else goto c9C5r;
       u9C5I: // global
           call _c9C5q(R1) args: 0, res: 0, upd: 0;
       c9C5r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9C5q() //  [R1]
         { info_tbl: [(c9C5q,
                       label: block_c9C5q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C5q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9C5H; else goto c9C5G;
       c9C5H: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9C5G: // global
           _s9Bl7::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s9Bl9_info;
           P64[Hp] = _s9Bl7::P64;
           R3 = Hp - 16;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Blb_entry() //  [R1]
         { info_tbl: [(c9C5J,
                       label: sat_s9Blb_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C5J: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9C5N; else goto c9C5M;
       c9C5N: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9C5M: // global
           _s9Bl0::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s9Bla_info;
           P64[Hp] = _s9Bl0::P64;
           R3 = Hp - 16;
           R2 = lvl3_r9Bhy_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Blc_entry() //  [R1]
         { info_tbl: [(c9C5Q,
                       label: sat_s9Blc_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C5Q: // global
           _s9Blc::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto c9C5R; else goto c9C5S;
       c9C5S: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9C5U; else goto c9C5T;
       c9C5U: // global
           HpAlloc = 24;
           goto c9C5R;
       c9C5R: // global
           R1 = _s9Blc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9C5T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9Blc::P64;
           _s9Bl0::P64 = P64[_s9Blc::P64 + 16];
           _s9Bl3::P64 = P64[_s9Blc::P64 + 24];
           I64[Hp - 16] = sat_s9Blb_info;
           P64[Hp] = _s9Bl0::P64;
           I64[Sp - 32] = block_c9C5O_info;
           R3 = _s9Bl3::P64;
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Data.Dynamic.$fExceptionDynamic1_closure;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 48;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9C5O() //  [R1]
         { info_tbl: [(c9C5O,
                       label: block_c9C5O_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C5O: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Bld_entry() //  [R1]
         { info_tbl: [(c9C5Y,
                       label: sat_s9Bld_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C5Y: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9C5Z; else goto c9C60;
       c9C5Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9C60: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9C59_info;
           _s9Bl0::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s9Bl0::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9C64; else goto c9C5a;
       u9C64: // global
           call _c9C59(R1) args: 0, res: 0, upd: 0;
       c9C5a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9C59() //  [R1]
         { info_tbl: [(c9C59,
                       label: block_c9C59_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C59: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9C63; else goto c9C62;
       c9C63: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9C62: // global
           _s9Bl3::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s9Blc_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s9Bl3::P64;
           R3 = Hp - 24;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Ble_entry() //  [R1]
         { info_tbl: [(c9C65,
                       label: sat_s9Ble_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C65: // global
           _s9Ble::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9C66; else goto c9C67;
       c9C67: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9C69; else goto c9C68;
       c9C69: // global
           HpAlloc = 32;
           goto c9C66;
       c9C66: // global
           R1 = _s9Ble::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9C68: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9Ble::P64;
           _s9Bl0::P64 = P64[_s9Ble::P64 + 16];
           _s9Bl1::P64 = P64[_s9Ble::P64 + 24];
           I64[Hp - 24] = sat_s9Bld_info;
           P64[Hp - 8] = _s9Bl0::P64;
           P64[Hp] = _s9Bl1::P64;
           R3 = Hp - 24;
           R2 = lvl2_r9Bhx_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Dynamic.dynApp1_entry() //  [R2, R3]
         { info_tbl: [(c9C6c,
                       label: Data.Dynamic.dynApp1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C6c: // global
           _s9Bl1::P64 = R3;
           _s9Bl0::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9C6d; else goto c9C6e;
       c9C6e: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9C6g; else goto c9C6f;
       c9C6g: // global
           HpAlloc = 32;
           goto c9C6d;
       c9C6d: // global
           R3 = _s9Bl1::P64;
           R2 = _s9Bl0::P64;
           R1 = Data.Dynamic.dynApp1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9C6f: // global
           I64[Hp - 24] = sat_s9Ble_info;
           P64[Hp - 8] = _s9Bl0::P64;
           P64[Hp] = _s9Bl1::P64;
           I64[Sp - 8] = block_c9C6a_info;
           R3 = Hp - 24;
           R2 = lvl1_r9Bhw_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9C6a() //  [R1]
         { info_tbl: [(c9C6a,
                       label: block_c9C6a_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C6a: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.47468023 UTC

[section ""data" . Data.Dynamic.dynApp_closure" {
     Data.Dynamic.dynApp_closure:
         const Data.Dynamic.dynApp_info;
         const 0;
 },
 Data.Dynamic.dynApp_entry() //  [R2, R3]
         { info_tbl: [(c9C7c,
                       label: Data.Dynamic.dynApp_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C7c: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9C7d; else goto c9C7e;
       c9C7d: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.dynApp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9C7e: // global
           I64[Sp - 24] = block_c9C76_info;
           _s9Blh::P64 = R3;
           R3 = R3;
           _s9Blg::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s9Blg::P64;
           P64[Sp - 8] = _s9Blh::P64;
           Sp = Sp - 24;
           call Data.Dynamic.dynApply_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9C76() //  [R1]
         { info_tbl: [(c9C76,
                       label: block_c9C76_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C76: // global
           if (R1 & 7 == 1) goto c9C79; else goto c9C7a;
       c9C79: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Dynamic.dynApp1_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9C7a: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.480407017 UTC

[section ""data" . Data.Dynamic.Dynamic_closure" {
     Data.Dynamic.Dynamic_closure:
         const Data.Dynamic.Dynamic_info;
 },
 Data.Dynamic.Dynamic_entry() //  [R2, R3]
         { info_tbl: [(c9C7C,
                       label: Data.Dynamic.Dynamic_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C7C: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9C7G; else goto c9C7F;
       c9C7G: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.Dynamic_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9C7F: // global
           I64[Hp - 16] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.484523619 UTC

[Data.Dynamic.Dynamic_con_entry() //  [R1]
         { info_tbl: [(c9C7M,
                       label: Data.Dynamic.Dynamic_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,68,97,116,97,46,68,121,110,97,109,105,99,46,68,121,110,97,109,105,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9C7M: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:43.487668551 UTC

[section ""relreadonly" . S9Bm7_srt" {
     S9Bm7_srt:
         const Data.Typeable.Internal.showTypeable_closure;
         const Data.Dynamic.$w$cshowsPrec_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Data.Dynamic.fromDyn_closure;
         const Data.Dynamic.fromDynamic_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.fpTYPELiftedRep_closure;
         const Data.Typeable.Internal.$mApp1_closure;
         const Data.Dynamic.dynApply_closure;
         const lvl_r9Bhp_closure;
         const Data.Dynamic.$fExceptionDynamic1_closure;
         const Data.Dynamic.$fExceptionDynamic_$cshow_closure;
         const Data.Dynamic.$fShowDynamic1_closure;
         const Data.Dynamic.$fExceptionDynamic_$cfromException_closure;
         const Data.Dynamic.$fExceptionDynamic5_closure;
         const Data.Dynamic.$fExceptionDynamic_closure;
         const Data.Dynamic.$fExceptionDynamic_$ctoException_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Dynamic.dynApp1_closure;
         const Data.Dynamic.dynApp_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.131624074 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:04:44.133858419 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic3_closure" {
     Data.Dynamic.$fExceptionDynamic3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.13544745 UTC

[section ""cstring" . Data.Dynamic.$fExceptionDynamic4_bytes" {
     Data.Dynamic.$fExceptionDynamic4_bytes:
         I8[] [60,60]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.137027492 UTC

[section ""cstring" . Data.Dynamic.$fExceptionDynamic2_bytes" {
     Data.Dynamic.$fExceptionDynamic2_bytes:
         I8[] [62,62]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.139777212 UTC

[section ""data" . Data.Dynamic.$w$cshowsPrec_closure" {
     Data.Dynamic.$w$cshowsPrec_closure:
         const Data.Dynamic.$w$cshowsPrec_info;
         const 0;
 },
 f_s9C7X_entry() //  [R1]
         { info_tbl: [(c9CbT,
                       label: f_s9C7X_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CbT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9CbU; else goto c9CbV;
       c9CbU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9CbV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           Sp = Sp - 16;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9C7Z_entry() //  [R1]
         { info_tbl: [(c9Cc9,
                       label: sat_s9C7Z_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cc9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Cca; else goto c9Ccb;
       c9Cca: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ccb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9C80_entry() //  [R1]
         { info_tbl: [(c9Ccc,
                       label: sat_s9C80_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ccc: // global
           _s9C80::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ccd; else goto c9Cce;
       c9Cce: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ccg; else goto c9Ccf;
       c9Ccg: // global
           HpAlloc = 24;
           goto c9Ccd;
       c9Ccd: // global
           R1 = _s9C80::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ccf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9C80::P64;
           _s9C7X::P64 = P64[_s9C80::P64 + 16];
           _s9C7Y::P64 = P64[_s9C80::P64 + 24];
           I64[Hp - 16] = sat_s9C7Z_info;
           P64[Hp] = _s9C7Y::P64;
           R2 = Hp - 16;
           R1 = _s9C7X::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9C81_entry() //  [R1, R2]
         { info_tbl: [(c9Cch,
                       label: sat_s9C81_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cch: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Ccl; else goto c9Cck;
       c9Ccl: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Cck: // global
           _s9C7X::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s9C80_info;
           P64[Hp - 8] = _s9C7X::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Dynamic.$w$cshowsPrec_entry() //  [R2]
         { info_tbl: [(c9Ccm,
                       label: Data.Dynamic.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ccm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Ccn; else goto c9Cco;
       c9Ccn: // global
           R2 = R2;
           R1 = Data.Dynamic.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Cco: // global
           I64[Sp - 8] = block_c9CbK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Ccs; else goto c9CbL;
       u9Ccs: // global
           call _c9CbK(R1) args: 0, res: 0, upd: 0;
       c9CbL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9CbK() //  [R1]
         { info_tbl: [(c9CbK,
                       label: block_c9CbK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CbK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Ccr; else goto c9Ccq;
       c9Ccr: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ccq: // global
           _s9C7V::P64 = P64[R1 + 7];
           I64[Hp - 32] = f_s9C7X_info;
           P64[Hp - 16] = _s9C7V::P64;
           I64[Hp - 8] = sat_s9C81_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.152760188 UTC

[section ""data" . Data.Dynamic.$fShowDynamic_$cshowsPrec_closure" {
     Data.Dynamic.$fShowDynamic_$cshowsPrec_closure:
         const Data.Dynamic.$fShowDynamic_$cshowsPrec_info;
         const 0;
 },
 Data.Dynamic.$fShowDynamic_$cshowsPrec_entry() //  [R3]
         { info_tbl: [(c9Cd6,
                       label: Data.Dynamic.$fShowDynamic_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cd6: // global
           R2 = R3;
           call Data.Dynamic.$w$cshowsPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.156033271 UTC

[section ""data" . Data.Dynamic.toDyn_closure" {
     Data.Dynamic.toDyn_closure:
         const Data.Dynamic.toDyn_info;
 },
 Data.Dynamic.toDyn_entry() //  [R2, R3]
         { info_tbl: [(c9Cdi,
                       label: Data.Dynamic.toDyn_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cdi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Cdm; else goto c9Cdl;
       c9Cdm: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.toDyn_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Cdl: // global
           I64[Hp - 16] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.159782629 UTC

[section ""data" . Data.Dynamic.fromDyn_closure" {
     Data.Dynamic.fromDyn_closure:
         const Data.Dynamic.fromDyn_info;
         const 0;
 },
 Data.Dynamic.fromDyn_entry() //  [R2, R3, R4]
         { info_tbl: [(c9CdA,
                       label: Data.Dynamic.fromDyn_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CdA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9CdB; else goto c9CdC;
       c9CdB: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.fromDyn_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9CdC: // global
           I64[Sp - 24] = block_c9Cdx_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9CdS; else goto c9Cdy;
       u9CdS: // global
           call _c9Cdx(R1) args: 0, res: 0, upd: 0;
       c9Cdy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Cdx() //  [R1]
         { info_tbl: [(c9Cdx,
                       label: block_c9Cdx_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cdx: // global
           I64[Sp] = block_c9CdF_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9CdF() //  [R1]
         { info_tbl: [(c9CdF,
                       label: block_c9CdF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CdF: // global
           if (R1 & 7 == 1) goto c9CdM; else goto c9CdQ;
       c9CdM: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c9CdQ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.167108672 UTC

[section ""data" . Data.Dynamic.fromDynamic_closure" {
     Data.Dynamic.fromDynamic_closure:
         const Data.Dynamic.fromDynamic_info;
         const 0;
 },
 Data.Dynamic.fromDynamic_entry() //  [R2, R3]
         { info_tbl: [(c9Ceh,
                       label: Data.Dynamic.fromDynamic_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ceh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Cei; else goto c9Cej;
       c9Cei: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.fromDynamic_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Cej: // global
           I64[Sp - 16] = block_c9Cee_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9CeC; else goto c9Cef;
       u9CeC: // global
           call _c9Cee(R1) args: 0, res: 0, upd: 0;
       c9Cef: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Cee() //  [R1]
         { info_tbl: [(c9Cee,
                       label: block_c9Cee_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cee: // global
           I64[Sp] = block_c9Cem_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Cem() //  [R1]
         { info_tbl: [(c9Cem,
                       label: block_c9Cem_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cem: // global
           if (R1 & 7 == 1) goto c9Cet; else goto c9Cex;
       c9Cet: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Cex: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9CeA; else goto c9Cez;
       c9CeA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Cez: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.174689077 UTC

[section ""data" . lvl_r9Bhp_closure" {
     lvl_r9Bhp_closure:
         const lvl_r9Bhp_info;
         const 0;
         const 0;
         const 0;
 },
 lvl_r9Bhp_entry() //  [R1]
         { info_tbl: [(c9Cff,
                       label: lvl_r9Bhp_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cff: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c9Cfg; else goto c9Cfh;
       c9Cfg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Cfh: // global
           (_c9Cf2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Cf2::I64 == 0) goto c9Cf4; else goto c9Cf3;
       c9Cf4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Cf3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Cf2::I64;
           I64[Sp - 24] = block_c9Cf5_info;
           R6 = 0;
           R5 = GHC.Types.$tcTYPE2_closure;
           R4 = GHC.Types.tr$ModuleGHCPrim_closure;
           R3 = 12502576999761269576;
           R2 = 16277905407886699876;
           P64[Sp - 40] = GHC.Types.$tcTYPE1_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Cf5() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Cf5,
                       label: block_c9Cf5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cf5: // global
           I64[Sp - 40] = block_c9Cf9_info;
           R6 = 0;
           _s9C8m::P64 = R5;
           R5 = GHC.Types.$tc'LiftedRep1_closure;
           _s9C8l::P64 = R4;
           R4 = GHC.Types.tr$ModuleGHCPrim_closure;
           _s9C8k::P64 = R3;
           R3 = 5595830777317938557;
           _s9C8j::I64 = R2;
           R2 = 16105171405184389724;
           P64[Sp - 56] = GHC.Types.$tc'AddrRep1_closure;
           P64[Sp - 48] = GHC.Types.[]_closure+1;
           I64[Sp - 32] = _s9C8j::I64;
           P64[Sp - 24] = _s9C8k::P64;
           P64[Sp - 16] = _s9C8l::P64;
           P64[Sp - 8] = _s9C8m::P64;
           I64[Sp] = R1;
           Sp = Sp - 56;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Cf9() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Cf9,
                       label: block_c9Cf9_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cf9: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Cfa() args: 0, res: 0, upd: 0;
     }
 },
 _c9Cfa() //  []
         { info_tbl: [(c9Cfa,
                       label: block_c9Cfa_info
                       rep:StackRep [True, False, False, False, True, True, False, False,
                                     False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cfa: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c9Cfl; else goto c9Cfk;
       c9Cfl: // global
           HpAlloc = 96;
           I64[Sp] = block_c9Cfa_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Cfk: // global
           I64[Hp - 88] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = P64[Sp + 64];
           P64[Hp - 16] = P64[Sp + 72];
           I64[Hp - 8] = I64[Sp + 80];
           I64[Hp] = I64[Sp + 48];
           R3 = Hp - 86;
           R2 = Hp - 38;
           Sp = Sp + 88;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.190366108 UTC

[section ""data" . Data.Dynamic.dynApply_closure" {
     Data.Dynamic.dynApply_closure:
         const Data.Dynamic.dynApply_info;
         const 0;
 },
 Data.Dynamic.dynApply_entry() //  [R2, R3]
         { info_tbl: [(c9Cg7,
                       label: Data.Dynamic.dynApply_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cg7: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c9Cg8; else goto c9Cg9;
       c9Cg8: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.dynApply_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Cg9: // global
           I64[Sp - 16] = block_c9Cg4_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Cmg; else goto c9Cg5;
       u9Cmg: // global
           call _c9Cg4(R1) args: 0, res: 0, upd: 0;
       c9Cg5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Cg4() //  [R1]
         { info_tbl: [(c9Cg4,
                       label: block_c9Cg4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cg4: // global
           I64[Sp - 8] = block_c9Cgc_info;
           _s9C8z::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9C8z::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Cmf; else goto c9Cge;
       u9Cmf: // global
           call _c9Cgc(R1) args: 0, res: 0, upd: 0;
       c9Cge: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Cgc() //  [R1]
         { info_tbl: [(c9Cgc,
                       label: block_c9Cgc_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cgc: // global
           if (R1 & 7 == 4) goto c9Cgp; else goto u9ClP;
       c9Cgp: // global
           I64[Sp - 8] = block_c9Cgn_info;
           _s9C8D::P64 = P64[R1 + 4];
           _s9C8E::P64 = P64[R1 + 12];
           R1 = P64[Sp + 16];
           P64[Sp] = _s9C8E::P64;
           P64[Sp + 16] = _s9C8D::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Cmh; else goto c9Cgq;
       u9Cmh: // global
           call _c9Cgn(R1) args: 0, res: 0, upd: 0;
       c9Cgq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9ClP: // global
           Sp = Sp + 24;
           call _c9Clp() args: 0, res: 0, upd: 0;
     }
 },
 _c9Cgn() //  [R1]
         { info_tbl: [(c9Cgn,
                       label: block_c9Cgn_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cgn: // global
           I64[Sp] = block_c9Cgu_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 15];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Cgu() //  [R1]
         { info_tbl: [(c9Cgu,
                       label: block_c9Cgu_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cgu: // global
           if (R1 & 7 == 1) goto u9ClQ; else goto c9CgG;
       u9ClQ: // global
           Sp = Sp + 32;
           call _c9Clp() args: 0, res: 0, upd: 0;
       c9CgG: // global
           _s9C8E::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9CgE_info;
           R1 = _s9C8E::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Cmj; else goto c9CgH;
       u9Cmj: // global
           call _c9CgE(R1) args: 0, res: 0, upd: 0;
       c9CgH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9CgE() //  [R1]
         { info_tbl: [(c9CgE,
                       label: block_c9CgE_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CgE: // global
           _c9ClB::P64 = R1 & 7;
           if (_c9ClB::P64 < 3) goto u9ClI; else goto u9ClJ;
       u9ClI: // global
           if (_c9ClB::P64 < 2) goto c9Chj; else goto c9Cj6;
       c9Chj: // global
           I64[Sp - 8] = block_c9CgN_info;
           _s9C8J::P64 = R1;
           R1 = lvl_r9Bhp_closure;
           P64[Sp] = _s9C8J::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Cml; else goto c9Chk;
       u9Cml: // global
           call _c9CgN(R1) args: 0, res: 0, upd: 0;
       c9Chk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Cj6: // global
           I64[Sp - 16] = block_c9ChJ_info;
           _s9C8J::P64 = R1;
           _s9C9c::P64 = P64[R1 + 22];
           R1 = lvl_r9Bhp_closure;
           P64[Sp - 8] = _s9C9c::P64;
           P64[Sp] = _s9C8J::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Cmm; else goto c9Cj7;
       u9Cmm: // global
           call _c9ChJ(R1) args: 0, res: 0, upd: 0;
       c9Cj7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9ClJ: // global
           if (_c9ClB::P64 < 4) goto c9CkT; else goto c9Clj;
       c9CkT: // global
           I64[Sp - 16] = block_c9Cjw_info;
           _s9C8J::P64 = R1;
           _s9C9Y::P64 = P64[R1 + 21];
           R1 = lvl_r9Bhp_closure;
           P64[Sp - 8] = _s9C9Y::P64;
           P64[Sp] = _s9C8J::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Cmn; else goto c9CkU;
       u9Cmn: // global
           call _c9Cjw(R1) args: 0, res: 0, upd: 0;
       c9CkU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Clj: // global
           I64[Sp - 8] = block_c9Clh_info;
           R3 = Data.Typeable.Internal.$mApp1_closure;
           R2 = lvl_r9Bhp_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9CgN() //  [R1]
         { info_tbl: [(c9CgN,
                       label: block_c9CgN_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CgN: // global
           _c9ClH::P64 = R1 & 7;
           if (_c9ClH::P64 < 3) goto u9ClK; else goto c9ChE;
       u9ClK: // global
           if (_c9ClH::P64 < 2) goto c9Chr; else goto c9ChA;
       c9Chr: // global
           I64[Sp] = block_c9Cho_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9Cmo; else goto c9Chs;
       u9Cmo: // global
           call _c9Cho(R1) args: 0, res: 0, upd: 0;
       c9Chs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9ChA: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u9Cmq;
       c9ChE: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u9Cmq;
       u9Cmq: // global
           call _s9C8K() args: 0, res: 0, upd: 0;
     }
 },
 _c9Cho() //  [R1]
         { info_tbl: [(c9Cho,
                       label: block_c9Cho_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cho: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s9C8K() args: 0, res: 0, upd: 0;
     }
 },
 _s9C8K() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s9C8K: // global
           I64[Sp - 8] = block_c9CgS_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9CmR; else goto c9CgU;
       u9CmR: // global
           call _c9CgS(R1) args: 0, res: 0, upd: 0;
       c9CgU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9CgS() //  [R1]
         { info_tbl: [(c9CgS,
                       label: block_c9CgS_info
                       rep:StackRep [True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CgS: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9Ch0; else goto c9CgZ;
       c9Ch0: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9CgZ: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c9Chh; else goto u9ClU;
       c9Chh: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c9Chg; else goto u9ClV;
       c9Chg: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9ClV: // global
           Sp = Sp + 48;
           goto u9Cms;
       u9ClU: // global
           Sp = Sp + 48;
           goto u9Cms;
       u9Cms: // global
           call _c9CkL() args: 0, res: 0, upd: 0;
     }
 },
 _c9ChJ() //  [R1]
         { info_tbl: [(c9ChJ,
                       label: block_c9ChJ_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ChJ: // global
           _c9ClF::P64 = R1 & 7;
           if (_c9ClF::P64 < 3) goto u9ClL; else goto c9Cjr;
       u9ClL: // global
           if (_c9ClF::P64 < 2) goto c9Cje; else goto c9Cjn;
       c9Cje: // global
           I64[Sp] = block_c9Cjb_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9Cmu; else goto c9Cjf;
       u9Cmu: // global
           call _c9Cjb(R1) args: 0, res: 0, upd: 0;
       c9Cjf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Cjn: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u9Cmw;
       c9Cjr: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u9Cmw;
       u9Cmw: // global
           call _s9C9d() args: 0, res: 0, upd: 0;
     }
 },
 _c9Cjb() //  [R1]
         { info_tbl: [(c9Cjb,
                       label: block_c9Cjb_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cjb: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s9C9d() args: 0, res: 0, upd: 0;
     }
 },
 _s9C9d() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s9C9d: // global
           I64[Sp - 8] = block_c9ChO_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9CmS; else goto c9ChQ;
       u9CmS: // global
           call _c9ChO(R1) args: 0, res: 0, upd: 0;
       c9ChQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ChO() //  [R1]
         { info_tbl: [(c9ChO,
                       label: block_c9ChO_info
                       rep:StackRep [True, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ChO: // global
           _s9C8z::P64 = P64[Sp + 40];
           _s9C8H::P64 = P64[Sp + 48];
           _s9C8J::P64 = P64[Sp + 32];
           _s9C9e::I64 = I64[Sp + 16];
           _s9C9f::I64 = I64[Sp + 8];
           _c9ClG::P64 = R1 & 7;
           if (_c9ClG::P64 < 3) goto u9ClM; else goto c9CiJ;
       u9ClM: // global
           if (_c9ClG::P64 < 2) goto c9ChX; else goto c9Cim;
       c9ChX: // global
           I64[Sp] = block_c9ChU_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9Cmx; else goto c9ChY;
       u9Cmx: // global
           call _c9ChU(R1) args: 0, res: 0, upd: 0;
       c9ChY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Cim: // global
           Hp = Hp + 72;
           _s9C9g::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c9CiO; else goto c9Ciq;
       c9Ciq: // global
           if (_s9C9e::I64 == I64[_s9C9g::P64 + 30]) goto c9CiI; else goto u9Cm1;
       c9CiI: // global
           if (_s9C9f::I64 == I64[_s9C9g::P64 + 38]) goto c9CiH; else goto u9Cm2;
       c9CiH: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s9C8z::P64;
           P64[Hp - 40] = _s9C8H::P64;
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = _s9C8J::P64;
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9Cm2: // global
           Sp = Sp + 56;
           goto u9CmB;
       u9Cm1: // global
           Sp = Sp + 56;
           goto u9CmB;
       c9CiJ: // global
           Hp = Hp + 72;
           _s9C9g::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c9CiO; else goto c9CiN;
       c9CiO: // global
           HpAlloc = 72;
           R1 = _s9C9g::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9CiN: // global
           if (_s9C9e::I64 == I64[_s9C9g::P64 + 29]) goto c9Cj5; else goto u9Cm3;
       c9Cj5: // global
           if (_s9C9f::I64 == I64[_s9C9g::P64 + 37]) goto c9Cj4; else goto u9Cm4;
       c9Cj4: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s9C8z::P64;
           P64[Hp - 40] = _s9C8H::P64;
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = _s9C8J::P64;
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9Cm4: // global
           Sp = Sp + 56;
           goto u9CmB;
       u9Cm3: // global
           Sp = Sp + 56;
           goto u9CmB;
       u9CmB: // global
           call _c9CkL() args: 0, res: 0, upd: 0;
     }
 },
 _c9ChU() //  [R1]
         { info_tbl: [(c9ChU,
                       label: block_c9ChU_info
                       rep:StackRep [True, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ChU: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9Ci4; else goto c9Ci3;
       c9Ci4: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ci3: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c9Cil; else goto u9ClZ;
       c9Cil: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c9Cik; else goto u9Cm0;
       c9Cik: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9Cm0: // global
           Sp = Sp + 56;
           goto u9CmD;
       u9ClZ: // global
           Sp = Sp + 56;
           goto u9CmD;
       u9CmD: // global
           call _c9CkL() args: 0, res: 0, upd: 0;
     }
 },
 _c9Cjw() //  [R1]
         { info_tbl: [(c9Cjw,
                       label: block_c9Cjw_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cjw: // global
           _c9ClD::P64 = R1 & 7;
           if (_c9ClD::P64 < 3) goto u9ClN; else goto c9Cle;
       u9ClN: // global
           if (_c9ClD::P64 < 2) goto c9Cl1; else goto c9Cla;
       c9Cl1: // global
           I64[Sp] = block_c9CkY_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9CmF; else goto c9Cl2;
       u9CmF: // global
           call _c9CkY(R1) args: 0, res: 0, upd: 0;
       c9Cl2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Cla: // global
           I64[Sp] = I64[R1 + 30];
           I64[Sp - 8] = I64[R1 + 38];
           Sp = Sp - 8;
           goto u9CmH;
       c9Cle: // global
           I64[Sp] = I64[R1 + 29];
           I64[Sp - 8] = I64[R1 + 37];
           Sp = Sp - 8;
           goto u9CmH;
       u9CmH: // global
           call _s9C9Z() args: 0, res: 0, upd: 0;
     }
 },
 _c9CkY() //  [R1]
         { info_tbl: [(c9CkY,
                       label: block_c9CkY_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CkY: // global
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _s9C9Z() args: 0, res: 0, upd: 0;
     }
 },
 _s9C9Z() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s9C9Z: // global
           I64[Sp - 8] = block_c9CjB_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9CmT; else goto c9CjD;
       u9CmT: // global
           call _c9CjB(R1) args: 0, res: 0, upd: 0;
       c9CjD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9CjB() //  [R1]
         { info_tbl: [(c9CjB,
                       label: block_c9CjB_info
                       rep:StackRep [True, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CjB: // global
           _s9C8z::P64 = P64[Sp + 40];
           _s9C8H::P64 = P64[Sp + 48];
           _s9C8J::P64 = P64[Sp + 32];
           _s9Ca0::I64 = I64[Sp + 16];
           _s9Ca1::I64 = I64[Sp + 8];
           _c9ClE::P64 = R1 & 7;
           if (_c9ClE::P64 < 3) goto u9ClO; else goto c9Ckw;
       u9ClO: // global
           if (_c9ClE::P64 < 2) goto c9CjK; else goto c9Ck9;
       c9CjK: // global
           I64[Sp] = block_c9CjH_info;
           R1 = Data.Typeable.Internal.fpTYPELiftedRep_closure;
           if (R1 & 7 != 0) goto u9CmI; else goto c9CjL;
       u9CmI: // global
           call _c9CjH(R1) args: 0, res: 0, upd: 0;
       c9CjL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Ck9: // global
           Hp = Hp + 72;
           _s9Ca2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c9CkB; else goto c9Ckd;
       c9Ckd: // global
           if (_s9Ca0::I64 == I64[_s9Ca2::P64 + 30]) goto c9Ckv; else goto u9Cma;
       c9Ckv: // global
           if (_s9Ca1::I64 == I64[_s9Ca2::P64 + 38]) goto c9Cku; else goto u9Cmb;
       c9Cku: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s9C8z::P64;
           P64[Hp - 40] = _s9C8H::P64;
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = _s9C8J::P64;
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9Cmb: // global
           Sp = Sp + 56;
           goto u9CmM;
       u9Cma: // global
           Sp = Sp + 56;
           goto u9CmM;
       c9Ckw: // global
           Hp = Hp + 72;
           _s9Ca2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c9CkB; else goto c9CkA;
       c9CkB: // global
           HpAlloc = 72;
           R1 = _s9Ca2::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9CkA: // global
           if (_s9Ca0::I64 == I64[_s9Ca2::P64 + 29]) goto c9CkS; else goto u9Cmc;
       c9CkS: // global
           if (_s9Ca1::I64 == I64[_s9Ca2::P64 + 37]) goto c9CkR; else goto u9Cmd;
       c9CkR: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s9C8z::P64;
           P64[Hp - 40] = _s9C8H::P64;
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = _s9C8J::P64;
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9Cmd: // global
           Sp = Sp + 56;
           goto u9CmM;
       u9Cmc: // global
           Sp = Sp + 56;
           goto u9CmM;
       u9CmM: // global
           call _c9CkL() args: 0, res: 0, upd: 0;
     }
 },
 _c9CjH() //  [R1]
         { info_tbl: [(c9CjH,
                       label: block_c9CjH_info
                       rep:StackRep [True, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CjH: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9CjR; else goto c9CjQ;
       c9CjR: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9CjQ: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c9Ck8; else goto u9Cm8;
       c9Ck8: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c9Ck7; else goto u9Cm9;
       c9Ck7: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9Cm9: // global
           Sp = Sp + 56;
           goto u9CmO;
       u9Cm8: // global
           Sp = Sp + 56;
           goto u9CmO;
       u9CmO: // global
           call _c9CkL() args: 0, res: 0, upd: 0;
     }
 },
 _c9CkL() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CkL: // global
           Hp = Hp - 72;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Clh() //  [R1]
         { info_tbl: [(c9Clh,
                       label: block_c9Clh_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Clh: // global
           if (R1 & 7 == 1) goto u9Cme; else goto c9Clv;
       u9Cme: // global
           Sp = Sp + 32;
           call _c9Clp() args: 0, res: 0, upd: 0;
       c9Clv: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9Cly; else goto c9Clx;
       c9Cly: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Clx: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           I64[Hp - 32] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = Hp - 64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Clp() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Clp: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.235816731 UTC

[section ""data" . Data.Dynamic.dynTypeRep_closure" {
     Data.Dynamic.dynTypeRep_closure:
         const Data.Dynamic.dynTypeRep_info;
 },
 Data.Dynamic.dynTypeRep_entry() //  [R2]
         { info_tbl: [(c9Cqe,
                       label: Data.Dynamic.dynTypeRep_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cqe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Cqf; else goto c9Cqg;
       c9Cqf: // global
           R2 = R2;
           R1 = Data.Dynamic.dynTypeRep_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Cqg: // global
           I64[Sp - 8] = block_c9Cqb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Cqk; else goto c9Cqc;
       u9Cqk: // global
           call _c9Cqb(R1) args: 0, res: 0, upd: 0;
       c9Cqc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Cqb() //  [R1]
         { info_tbl: [(c9Cqb,
                       label: block_c9Cqb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cqb: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Typeable.Internal.$WSomeTypeRep_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.240634583 UTC

[section ""cstring" . Data.Dynamic.$trModule4_bytes" {
     Data.Dynamic.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.242374722 UTC

[section ""data" . Data.Dynamic.$trModule3_closure" {
     Data.Dynamic.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Dynamic.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.244076305 UTC

[section ""cstring" . Data.Dynamic.$trModule2_bytes" {
     Data.Dynamic.$trModule2_bytes:
         I8[] [68,97,116,97,46,68,121,110,97,109,105,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.245588699 UTC

[section ""data" . Data.Dynamic.$trModule1_closure" {
     Data.Dynamic.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Dynamic.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.247122563 UTC

[section ""data" . Data.Dynamic.$trModule_closure" {
     Data.Dynamic.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Dynamic.$trModule3_closure+1;
         const Data.Dynamic.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.248807515 UTC

[section ""data" . $krep_r9Bhq_closure" {
     $krep_r9Bhq_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.250428798 UTC

[section ""data" . $krep1_r9Bhr_closure" {
     $krep1_r9Bhr_closure:
         const :_con_info;
         const $krep_r9Bhq_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.251960844 UTC

[section ""data" . $krep2_r9Bhs_closure" {
     $krep2_r9Bhs_closure:
         const :_con_info;
         const GHC.Types.krep$*_closure;
         const $krep1_r9Bhr_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.253659363 UTC

[section ""data" . $krep3_r9Bht_closure" {
     $krep3_r9Bht_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Typeable.Internal.$tcTypeRep_closure;
         const $krep2_r9Bhs_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.255255396 UTC

[section ""cstring" . Data.Dynamic.$fExceptionDynamic7_bytes" {
     Data.Dynamic.$fExceptionDynamic7_bytes:
         I8[] [68,121,110,97,109,105,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.256798063 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic6_closure" {
     Data.Dynamic.$fExceptionDynamic6_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Dynamic.$fExceptionDynamic7_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.2585237 UTC

[section ""data" . Data.Dynamic.$tcDynamic_closure" {
     Data.Dynamic.$tcDynamic_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Dynamic.$trModule_closure+1;
         const Data.Dynamic.$fExceptionDynamic6_closure+1;
         const GHC.Types.krep$*_closure;
         const 12333845116585145369;
         const 13454739855111402131;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.260212787 UTC

[section ""data" . $krep4_r9Bhu_closure" {
     $krep4_r9Bhu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Dynamic.$tcDynamic_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.262022545 UTC

[section ""data" . $krep5_r9Bhv_closure" {
     $krep5_r9Bhv_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r9Bhq_closure+2;
         const $krep4_r9Bhu_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.263753699 UTC

[section ""data" . Data.Dynamic.$tc'Dynamic1_closure" {
     Data.Dynamic.$tc'Dynamic1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r9Bht_closure+1;
         const $krep5_r9Bhv_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.265429411 UTC

[section ""cstring" . Data.Dynamic.$tc'Dynamic3_bytes" {
     Data.Dynamic.$tc'Dynamic3_bytes:
         I8[] [39,68,121,110,97,109,105,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.267086453 UTC

[section ""data" . Data.Dynamic.$tc'Dynamic2_closure" {
     Data.Dynamic.$tc'Dynamic2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Dynamic.$tc'Dynamic3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.268686663 UTC

[section ""data" . Data.Dynamic.$tc'Dynamic_closure" {
     Data.Dynamic.$tc'Dynamic_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Dynamic.$trModule_closure+1;
         const Data.Dynamic.$tc'Dynamic2_closure+1;
         const Data.Dynamic.$tc'Dynamic1_closure+4;
         const 11394777848779697579;
         const 644307381671950132;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.270812711 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic5_closure" {
     Data.Dynamic.$fExceptionDynamic5_closure:
         const Data.Dynamic.$fExceptionDynamic5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Dynamic.$fExceptionDynamic5_entry() //  [R1]
         { info_tbl: [(c9CqY,
                       label: Data.Dynamic.$fExceptionDynamic5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CqY: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9CqZ; else goto c9Cr0;
       c9CqZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Cr0: // global
           (_c9CqQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9CqQ::I64 == 0) goto c9CqS; else goto c9CqR;
       c9CqS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9CqR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9CqQ::I64;
           I64[Sp - 24] = block_c9CqT_info;
           R6 = 0;
           R5 = Data.Dynamic.$fExceptionDynamic6_closure+1;
           R4 = Data.Dynamic.$trModule_closure+1;
           R3 = 13454739855111402131;
           R2 = 12333845116585145369;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9CqT() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9CqT,
                       label: block_c9CqT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CqT: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9CqU() args: 0, res: 0, upd: 0;
     }
 },
 _c9CqU() //  []
         { info_tbl: [(c9CqU,
                       label: block_c9CqU_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CqU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Cr3; else goto c9Cr2;
       c9Cr3: // global
           HpAlloc = 48;
           I64[Sp] = block_c9CqU_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Cr2: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.278967996 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic1_closure" {
     Data.Dynamic.$fExceptionDynamic1_closure:
         const Data.Dynamic.$fExceptionDynamic1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Dynamic.$fExceptionDynamic1_entry() //  [R1]
         { info_tbl: [(c9CrC,
                       label: Data.Dynamic.$fExceptionDynamic1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CrC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9CrD; else goto c9CrE;
       c9CrD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9CrE: // global
           (_c9Crz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Crz::I64 == 0) goto c9CrB; else goto c9CrA;
       c9CrB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9CrA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Crz::I64;
           R2 = Data.Dynamic.$fExceptionDynamic2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.283012412 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic_$cshow_closure" {
     Data.Dynamic.$fExceptionDynamic_$cshow_closure:
         const Data.Dynamic.$fExceptionDynamic_$cshow_info;
         const 0;
 },
 sat_s9Cb1_entry() //  [R1]
         { info_tbl: [(c9Cs0,
                       label: sat_s9Cb1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cs0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9Cs1; else goto c9Cs2;
       c9Cs1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Cs2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Dynamic.$fExceptionDynamic1_closure;
           Sp = Sp - 32;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 40, res: 0, upd: 24;
     }
 },
 Data.Dynamic.$fExceptionDynamic_$cshow_entry() //  [R2]
         { info_tbl: [(c9Cs3,
                       label: Data.Dynamic.$fExceptionDynamic_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cs3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Cs4; else goto c9Cs5;
       c9Cs4: // global
           R2 = R2;
           R1 = Data.Dynamic.$fExceptionDynamic_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Cs5: // global
           I64[Sp - 8] = block_c9CrR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Cs9; else goto c9CrS;
       u9Cs9: // global
           call _c9CrR(R1) args: 0, res: 0, upd: 0;
       c9CrS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9CrR() //  [R1]
         { info_tbl: [(c9CrR,
                       label: block_c9CrR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CrR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Cs8; else goto c9Cs7;
       c9Cs8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Cs7: // global
           _s9CaZ::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s9Cb1_info;
           P64[Hp] = _s9CaZ::P64;
           R3 = Hp - 16;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.29118018 UTC

[section ""data" . Data.Dynamic.$fShowDynamic1_closure" {
     Data.Dynamic.$fShowDynamic1_closure:
         const Data.Dynamic.$fShowDynamic1_info;
         const 0;
 },
 f_s9Cb6_entry() //  [R1]
         { info_tbl: [(c9CsF,
                       label: f_s9Cb6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CsF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9CsG; else goto c9CsH;
       c9CsG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9CsH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           Sp = Sp - 16;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Cb8_entry() //  [R1]
         { info_tbl: [(c9CsV,
                       label: sat_s9Cb8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CsV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9CsW; else goto c9CsX;
       c9CsW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9CsX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Cb9_entry() //  [R1]
         { info_tbl: [(c9CsY,
                       label: sat_s9Cb9_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CsY: // global
           _s9Cb9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9CsZ; else goto c9Ct0;
       c9Ct0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ct2; else goto c9Ct1;
       c9Ct2: // global
           HpAlloc = 24;
           goto c9CsZ;
       c9CsZ: // global
           R1 = _s9Cb9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ct1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9Cb9::P64;
           _s9Cb6::P64 = P64[_s9Cb9::P64 + 16];
           _s9Cb7::P64 = P64[_s9Cb9::P64 + 24];
           I64[Hp - 16] = sat_s9Cb8_info;
           P64[Hp] = _s9Cb7::P64;
           R2 = Hp - 16;
           R1 = _s9Cb6::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Cba_entry() //  [R1, R2]
         { info_tbl: [(c9Ct3,
                       label: sat_s9Cba_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ct3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Ct7; else goto c9Ct6;
       c9Ct7: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Ct6: // global
           _s9Cb6::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s9Cb9_info;
           P64[Hp - 8] = _s9Cb6::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 Data.Dynamic.$fShowDynamic1_entry() //  [R2]
         { info_tbl: [(c9Ct8,
                       label: Data.Dynamic.$fShowDynamic1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ct8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Ct9; else goto c9Cta;
       c9Ct9: // global
           R2 = R2;
           R1 = Data.Dynamic.$fShowDynamic1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Cta: // global
           I64[Sp - 8] = block_c9Csw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Cte; else goto c9Csx;
       u9Cte: // global
           call _c9Csw(R1) args: 0, res: 0, upd: 0;
       c9Csx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Csw() //  [R1]
         { info_tbl: [(c9Csw,
                       label: block_c9Csw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Csw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Ctd; else goto c9Ctc;
       c9Ctd: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ctc: // global
           _s9Cb4::P64 = P64[R1 + 7];
           I64[Hp - 32] = f_s9Cb6_info;
           P64[Hp - 16] = _s9Cb4::P64;
           I64[Hp - 8] = sat_s9Cba_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.304270342 UTC

[section ""data" . Data.Dynamic.$fShowDynamic_$cshowList_closure" {
     Data.Dynamic.$fShowDynamic_$cshowList_closure:
         const Data.Dynamic.$fShowDynamic_$cshowList_info;
         const 0;
 },
 Data.Dynamic.$fShowDynamic_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c9CtR,
                       label: Data.Dynamic.$fShowDynamic_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CtR: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Dynamic.$fShowDynamic1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.307497833 UTC

[section ""data" . Data.Dynamic.$fShowDynamic_closure" {
     Data.Dynamic.$fShowDynamic_closure:
         const GHC.Show.C:Show_con_info;
         const Data.Dynamic.$fShowDynamic_$cshowsPrec_closure+2;
         const Data.Dynamic.$fExceptionDynamic_$cshow_closure+1;
         const Data.Dynamic.$fShowDynamic_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.309642377 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic_$cfromException_closure" {
     Data.Dynamic.$fExceptionDynamic_$cfromException_closure:
         const Data.Dynamic.$fExceptionDynamic_$cfromException_info;
         const 0;
 },
 Data.Dynamic.$fExceptionDynamic_$cfromException_entry() //  [R2]
         { info_tbl: [(c9Cu6,
                       label: Data.Dynamic.$fExceptionDynamic_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cu6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Cua; else goto c9Cub;
       c9Cua: // global
           R2 = R2;
           R1 = Data.Dynamic.$fExceptionDynamic_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Cub: // global
           I64[Sp - 8] = block_c9Cu3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Cuw; else goto c9Cu4;
       u9Cuw: // global
           call _c9Cu3(R1) args: 0, res: 0, upd: 0;
       c9Cu4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Cu3() //  [R1]
         { info_tbl: [(c9Cu3,
                       label: block_c9Cu3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cu3: // global
           I64[Sp - 8] = block_c9Cu9_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Cu9() //  [R1]
         { info_tbl: [(c9Cu9,
                       label: block_c9Cu9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cu9: // global
           I64[Sp] = block_c9Cug_info;
           R3 = Data.Dynamic.$fExceptionDynamic5_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Cug() //  [R1]
         { info_tbl: [(c9Cug,
                       label: block_c9Cug_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cug: // global
           if (R1 & 7 == 1) goto c9Cun; else goto c9Cur;
       c9Cun: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Cur: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Cuu; else goto c9Cut;
       c9Cuu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Cut: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.318375681 UTC

[section ""data" . Data.Dynamic.$fExceptionDynamic_closure" {
     Data.Dynamic.$fExceptionDynamic_closure:
         const GHC.Exception.C:Exception_con_info;
         const Data.Dynamic.$fExceptionDynamic5_closure;
         const Data.Dynamic.$fShowDynamic_closure+1;
         const Data.Dynamic.$fExceptionDynamic_$ctoException_closure+1;
         const Data.Dynamic.$fExceptionDynamic_$cfromException_closure+1;
         const Data.Dynamic.$fExceptionDynamic_$cshow_closure+1;
         const 0;
 },
 section ""data" . Data.Dynamic.$fExceptionDynamic_$ctoException_closure" {
     Data.Dynamic.$fExceptionDynamic_$ctoException_closure:
         const Data.Dynamic.$fExceptionDynamic_$ctoException_info;
         const 0;
 },
 Data.Dynamic.$fExceptionDynamic_$ctoException_entry() //  [R2]
         { info_tbl: [(c9Cv2,
                       label: Data.Dynamic.$fExceptionDynamic_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cv2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Cv6; else goto c9Cv5;
       c9Cv6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Dynamic.$fExceptionDynamic_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Cv5: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Data.Dynamic.$fExceptionDynamic_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.322440412 UTC

[section ""cstring" . lvl1_r9Bhw_bytes" {
     lvl1_r9Bhw_bytes:
         I8[] [84,121,112,101,32,101,114,114,111,114,32,105,110,32,100,121,110,97,109,105,99,32,97,112,112,108,105,99,97,116,105,111,110,46,10]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.32416867 UTC

[section ""cstring" . lvl2_r9Bhx_bytes" {
     lvl2_r9Bhx_bytes:
         I8[] [67,97,110,39,116,32,97,112,112,108,121,32,102,117,110,99,116,105,111,110,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.325658926 UTC

[section ""cstring" . lvl3_r9Bhy_bytes" {
     lvl3_r9Bhy_bytes:
         I8[] [32,116,111,32,97,114,103,117,109,101,110,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.32876299 UTC

[section ""data" . Data.Dynamic.dynApp1_closure" {
     Data.Dynamic.dynApp1_closure:
         const Data.Dynamic.dynApp1_info;
         const 0;
 },
 sat_s9Cbs_entry() //  [R1]
         { info_tbl: [(c9CvU,
                       label: sat_s9Cbs_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CvU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9CvV; else goto c9CvW;
       c9CvV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9CvW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Dynamic.$fExceptionDynamic1_closure;
           Sp = Sp - 32;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s9Cbt_entry() //  [R1]
         { info_tbl: [(c9CvX,
                       label: sat_s9Cbt_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CvX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9CvY; else goto c9CvZ;
       c9CvY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9CvZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9CvL_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Cw3; else goto c9CvM;
       u9Cw3: // global
           call _c9CvL(R1) args: 0, res: 0, upd: 0;
       c9CvM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9CvL() //  [R1]
         { info_tbl: [(c9CvL,
                       label: block_c9CvL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CvL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Cw2; else goto c9Cw1;
       c9Cw2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Cw1: // global
           _s9Cbq::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s9Cbs_info;
           P64[Hp] = _s9Cbq::P64;
           R3 = Hp - 16;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Cbu_entry() //  [R1]
         { info_tbl: [(c9Cw4,
                       label: sat_s9Cbu_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cw4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Cw8; else goto c9Cw7;
       c9Cw8: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Cw7: // global
           _s9Cbj::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s9Cbt_info;
           P64[Hp] = _s9Cbj::P64;
           R3 = Hp - 16;
           R2 = lvl3_r9Bhy_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Cbv_entry() //  [R1]
         { info_tbl: [(c9Cwb,
                       label: sat_s9Cbv_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cwb: // global
           _s9Cbv::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto c9Cwc; else goto c9Cwd;
       c9Cwd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Cwf; else goto c9Cwe;
       c9Cwf: // global
           HpAlloc = 24;
           goto c9Cwc;
       c9Cwc: // global
           R1 = _s9Cbv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Cwe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9Cbv::P64;
           _s9Cbj::P64 = P64[_s9Cbv::P64 + 16];
           _s9Cbm::P64 = P64[_s9Cbv::P64 + 24];
           I64[Hp - 16] = sat_s9Cbu_info;
           P64[Hp] = _s9Cbj::P64;
           I64[Sp - 32] = block_c9Cw9_info;
           R3 = _s9Cbm::P64;
           R2 = Data.Dynamic.$fExceptionDynamic3_closure+1;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Data.Dynamic.$fExceptionDynamic1_closure;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 48;
           call Data.Typeable.Internal.showTypeable_entry(R3,
                                                          R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Cw9() //  [R1]
         { info_tbl: [(c9Cw9,
                       label: block_c9Cw9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cw9: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Cbw_entry() //  [R1]
         { info_tbl: [(c9Cwj,
                       label: sat_s9Cbw_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cwj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9Cwk; else goto c9Cwl;
       c9Cwk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Cwl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9Cvu_info;
           _s9Cbj::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s9Cbj::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9Cwp; else goto c9Cvv;
       u9Cwp: // global
           call _c9Cvu(R1) args: 0, res: 0, upd: 0;
       c9Cvv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Cvu() //  [R1]
         { info_tbl: [(c9Cvu,
                       label: block_c9Cvu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cvu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Cwo; else goto c9Cwn;
       c9Cwo: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Cwn: // global
           _s9Cbm::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s9Cbv_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s9Cbm::P64;
           R3 = Hp - 24;
           R2 = Data.Dynamic.$fExceptionDynamic4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Cbx_entry() //  [R1]
         { info_tbl: [(c9Cwq,
                       label: sat_s9Cbx_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cwq: // global
           _s9Cbx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Cwr; else goto c9Cws;
       c9Cws: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Cwu; else goto c9Cwt;
       c9Cwu: // global
           HpAlloc = 32;
           goto c9Cwr;
       c9Cwr: // global
           R1 = _s9Cbx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Cwt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9Cbx::P64;
           _s9Cbj::P64 = P64[_s9Cbx::P64 + 16];
           _s9Cbk::P64 = P64[_s9Cbx::P64 + 24];
           I64[Hp - 24] = sat_s9Cbw_info;
           P64[Hp - 8] = _s9Cbj::P64;
           P64[Hp] = _s9Cbk::P64;
           R3 = Hp - 24;
           R2 = lvl2_r9Bhx_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 Data.Dynamic.dynApp1_entry() //  [R2, R3]
         { info_tbl: [(c9Cwx,
                       label: Data.Dynamic.dynApp1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cwx: // global
           _s9Cbk::P64 = R3;
           _s9Cbj::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9Cwy; else goto c9Cwz;
       c9Cwz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9CwB; else goto c9CwA;
       c9CwB: // global
           HpAlloc = 32;
           goto c9Cwy;
       c9Cwy: // global
           R3 = _s9Cbk::P64;
           R2 = _s9Cbj::P64;
           R1 = Data.Dynamic.dynApp1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9CwA: // global
           I64[Hp - 24] = sat_s9Cbx_info;
           P64[Hp - 8] = _s9Cbj::P64;
           P64[Hp] = _s9Cbk::P64;
           I64[Sp - 8] = block_c9Cwv_info;
           R3 = Hp - 24;
           R2 = lvl1_r9Bhw_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Cwv() //  [R1]
         { info_tbl: [(c9Cwv,
                       label: block_c9Cwv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cwv: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.351225797 UTC

[section ""data" . Data.Dynamic.dynApp_closure" {
     Data.Dynamic.dynApp_closure:
         const Data.Dynamic.dynApp_info;
         const 0;
 },
 Data.Dynamic.dynApp_entry() //  [R2, R3]
         { info_tbl: [(c9CxQ,
                       label: Data.Dynamic.dynApp_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CxQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9CxR; else goto c9CxS;
       c9CxR: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.dynApp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9CxS: // global
           I64[Sp - 24] = block_c9CxK_info;
           _s9CbA::P64 = R3;
           R3 = R3;
           _s9Cbz::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s9Cbz::P64;
           P64[Sp - 8] = _s9CbA::P64;
           Sp = Sp - 24;
           call Data.Dynamic.dynApply_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9CxK() //  [R1]
         { info_tbl: [(c9CxK,
                       label: block_c9CxK_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9CxK: // global
           if (R1 & 7 == 1) goto c9CxN; else goto c9CxO;
       c9CxN: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Dynamic.dynApp1_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9CxO: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.356813967 UTC

[section ""data" . Data.Dynamic.Dynamic_closure" {
     Data.Dynamic.Dynamic_closure:
         const Data.Dynamic.Dynamic_info;
 },
 Data.Dynamic.Dynamic_entry() //  [R2, R3]
         { info_tbl: [(c9Cyh,
                       label: Data.Dynamic.Dynamic_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cyh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Cyl; else goto c9Cyk;
       c9Cyl: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Dynamic.Dynamic_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Cyk: // global
           I64[Hp - 16] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.360297109 UTC

[Data.Dynamic.Dynamic_con_entry() //  [R1]
         { info_tbl: [(c9Cys,
                       label: Data.Dynamic.Dynamic_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,68,97,116,97,46,68,121,110,97,109,105,99,46,68,121,110,97,109,105,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Cys: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:44.363202869 UTC

[section ""relreadonly" . S9Cct_srt" {
     S9Cct_srt:
         const Data.Typeable.Internal.showTypeable_closure;
         const Data.Dynamic.$w$cshowsPrec_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Data.Dynamic.fromDyn_closure;
         const Data.Dynamic.fromDynamic_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.fpTYPELiftedRep_closure;
         const Data.Typeable.Internal.$mApp1_closure;
         const Data.Dynamic.dynApply_closure;
         const lvl_r9Bhp_closure;
         const Data.Dynamic.$fExceptionDynamic1_closure;
         const Data.Dynamic.$fExceptionDynamic_$cshow_closure;
         const Data.Dynamic.$fShowDynamic1_closure;
         const Data.Dynamic.$fExceptionDynamic_$cfromException_closure;
         const Data.Dynamic.$fExceptionDynamic5_closure;
         const Data.Dynamic.$fExceptionDynamic_closure;
         const Data.Dynamic.$fExceptionDynamic_$ctoException_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Dynamic.dynApp1_closure;
         const Data.Dynamic.dynApp_closure;
 }]

