
==================== Pre unarise: ====================
2018-03-16 16:06:56.179321822 UTC

Data.List.isSubsequenceOf [Occ=LoopBreaker]
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_sc1ZV ds_sc1ZW ds1_sc1ZX]
        case ds_sc1ZW of wild_sc1ZY {
          [] -> GHC.Types.True [];
          : ipv_sc1ZZ [Occ=Once] ipv1_sc200 [Occ=Once] ->
              case ds1_sc1ZX of {
                [] -> GHC.Types.False [];
                : ipv2_sc202 [Occ=Once] ipv3_sc203 [Occ=Once*] ->
                    case GHC.Classes.== $dEq_sc1ZV ipv_sc1ZZ ipv2_sc202 of {
                      GHC.Types.False ->
                          Data.List.isSubsequenceOf $dEq_sc1ZV wild_sc1ZY ipv3_sc203;
                      GHC.Types.True ->
                          Data.List.isSubsequenceOf $dEq_sc1ZV ipv1_sc200 ipv3_sc203;
                    };
              };
        };

Data.List.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.List.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.List.$trModule4];

Data.List.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.List"#;

Data.List.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.List.$trModule2];

Data.List.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.List.$trModule3
                                     Data.List.$trModule1];


==================== STG syntax: ====================
2018-03-16 16:06:56.18056038 UTC

Data.List.isSubsequenceOf [Occ=LoopBreaker]
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_sc1ZV ds_sc1ZW ds1_sc1ZX]
        case ds_sc1ZW of wild_sc1ZY {
          [] -> GHC.Types.True [];
          : ipv_sc1ZZ [Occ=Once] ipv1_sc200 [Occ=Once] ->
              case ds1_sc1ZX of {
                [] -> GHC.Types.False [];
                : ipv2_sc202 [Occ=Once] ipv3_sc203 [Occ=Once*] ->
                    case GHC.Classes.== $dEq_sc1ZV ipv_sc1ZZ ipv2_sc202 of {
                      GHC.Types.False ->
                          Data.List.isSubsequenceOf $dEq_sc1ZV wild_sc1ZY ipv3_sc203;
                      GHC.Types.True ->
                          Data.List.isSubsequenceOf $dEq_sc1ZV ipv1_sc200 ipv3_sc203;
                    };
              };
        };

Data.List.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.List.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.List.$trModule4];

Data.List.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.List"#;

Data.List.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.List.$trModule2];

Data.List.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.List.$trModule3
                                     Data.List.$trModule1];


==================== Pre unarise: ====================
2018-03-16 16:06:56.249983798 UTC

Data.List.isSubsequenceOf [Occ=LoopBreaker]
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_sc23g ds_sc23h ds1_sc23i]
        case ds_sc23h of wild_sc23j {
          [] -> GHC.Types.True [];
          : ipv_sc23k [Occ=Once] ipv1_sc23l [Occ=Once] ->
              case ds1_sc23i of {
                [] -> GHC.Types.False [];
                : ipv2_sc23n [Occ=Once] ipv3_sc23o [Occ=Once*] ->
                    case GHC.Classes.== $dEq_sc23g ipv_sc23k ipv2_sc23n of {
                      GHC.Types.False ->
                          Data.List.isSubsequenceOf $dEq_sc23g wild_sc23j ipv3_sc23o;
                      GHC.Types.True ->
                          Data.List.isSubsequenceOf $dEq_sc23g ipv1_sc23l ipv3_sc23o;
                    };
              };
        };

Data.List.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.List.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.List.$trModule4];

Data.List.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.List"#;

Data.List.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.List.$trModule2];

Data.List.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.List.$trModule3
                                     Data.List.$trModule1];


==================== STG syntax: ====================
2018-03-16 16:06:56.251274534 UTC

Data.List.isSubsequenceOf [Occ=LoopBreaker]
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_sc23g ds_sc23h ds1_sc23i]
        case ds_sc23h of wild_sc23j {
          [] -> GHC.Types.True [];
          : ipv_sc23k [Occ=Once] ipv1_sc23l [Occ=Once] ->
              case ds1_sc23i of {
                [] -> GHC.Types.False [];
                : ipv2_sc23n [Occ=Once] ipv3_sc23o [Occ=Once*] ->
                    case GHC.Classes.== $dEq_sc23g ipv_sc23k ipv2_sc23n of {
                      GHC.Types.False ->
                          Data.List.isSubsequenceOf $dEq_sc23g wild_sc23j ipv3_sc23o;
                      GHC.Types.True ->
                          Data.List.isSubsequenceOf $dEq_sc23g ipv1_sc23l ipv3_sc23o;
                    };
              };
        };

Data.List.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.List.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.List.$trModule4];

Data.List.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.List"#;

Data.List.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.List.$trModule2];

Data.List.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.List.$trModule3
                                     Data.List.$trModule1];

