
==================== Raw Cmm ====================
2018-03-16 15:56:23.772441239 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:56:23.774476074 UTC

[section ""data" . Data.Bits.$p1FiniteBits_closure" {
     Data.Bits.$p1FiniteBits_closure:
         const Data.Bits.$p1FiniteBits_info;
 },
 Data.Bits.$p1FiniteBits_entry() //  [R2]
         { []
         }
     {offset
       c1FaZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Fb0; else goto c1Fb1;
       c1Fb0: // global
           R2 = R2;
           R1 = Data.Bits.$p1FiniteBits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Fb1: // global
           I64[Sp - 8] = block_c1FaW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Fb5; else goto c1FaX;
       u1Fb5: // global
           call _c1FaW(R1) args: 0, res: 0, upd: 0;
       c1FaX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$p1FiniteBits_info" {
     Data.Bits.$p1FiniteBits_info:
         const Data.Bits.$p1FiniteBits_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FaW() //  [R1]
         { []
         }
     {offset
       c1FaW: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FaW_info" {
     block_c1FaW_info:
         const _c1FaW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.780957464 UTC

[section ""data" . Data.Bits.finiteBitSize_closure" {
     Data.Bits.finiteBitSize_closure:
         const Data.Bits.finiteBitSize_info;
 },
 Data.Bits.finiteBitSize_entry() //  [R2]
         { []
         }
     {offset
       c1Fbo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Fbp; else goto c1Fbq;
       c1Fbp: // global
           R2 = R2;
           R1 = Data.Bits.finiteBitSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Fbq: // global
           I64[Sp - 8] = block_c1Fbl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Fbu; else goto c1Fbm;
       u1Fbu: // global
           call _c1Fbl(R1) args: 0, res: 0, upd: 0;
       c1Fbm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.finiteBitSize_info" {
     Data.Bits.finiteBitSize_info:
         const Data.Bits.finiteBitSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Fbl() //  [R1]
         { []
         }
     {offset
       c1Fbl: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fbl_info" {
     block_c1Fbl_info:
         const _c1Fbl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.787368177 UTC

[section ""data" . Data.Bits.countLeadingZeros_closure" {
     Data.Bits.countLeadingZeros_closure:
         const Data.Bits.countLeadingZeros_info;
 },
 Data.Bits.countLeadingZeros_entry() //  [R2]
         { []
         }
     {offset
       c1FbL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FbM; else goto c1FbN;
       c1FbM: // global
           R2 = R2;
           R1 = Data.Bits.countLeadingZeros_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FbN: // global
           I64[Sp - 8] = block_c1FbI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FbR; else goto c1FbJ;
       u1FbR: // global
           call _c1FbI(R1) args: 0, res: 0, upd: 0;
       c1FbJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.countLeadingZeros_info" {
     Data.Bits.countLeadingZeros_info:
         const Data.Bits.countLeadingZeros_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FbI() //  [R1]
         { []
         }
     {offset
       c1FbI: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FbI_info" {
     block_c1FbI_info:
         const _c1FbI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.793007666 UTC

[section ""data" . Data.Bits.countTrailingZeros_closure" {
     Data.Bits.countTrailingZeros_closure:
         const Data.Bits.countTrailingZeros_info;
 },
 Data.Bits.countTrailingZeros_entry() //  [R2]
         { []
         }
     {offset
       c1Fc8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Fc9; else goto c1Fca;
       c1Fc9: // global
           R2 = R2;
           R1 = Data.Bits.countTrailingZeros_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Fca: // global
           I64[Sp - 8] = block_c1Fc5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Fce; else goto c1Fc6;
       u1Fce: // global
           call _c1Fc5(R1) args: 0, res: 0, upd: 0;
       c1Fc6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.countTrailingZeros_info" {
     Data.Bits.countTrailingZeros_info:
         const Data.Bits.countTrailingZeros_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Fc5() //  [R1]
         { []
         }
     {offset
       c1Fc5: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fc5_info" {
     block_c1Fc5_info:
         const _c1Fc5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.799058128 UTC

[section ""data" . Data.Bits.$p1Bits_closure" {
     Data.Bits.$p1Bits_closure:
         const Data.Bits.$p1Bits_info;
 },
 Data.Bits.$p1Bits_entry() //  [R2]
         { []
         }
     {offset
       c1Fcv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Fcw; else goto c1Fcx;
       c1Fcw: // global
           R2 = R2;
           R1 = Data.Bits.$p1Bits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Fcx: // global
           I64[Sp - 8] = block_c1Fcs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FcB; else goto c1Fct;
       u1FcB: // global
           call _c1Fcs(R1) args: 0, res: 0, upd: 0;
       c1Fct: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$p1Bits_info" {
     Data.Bits.$p1Bits_info:
         const Data.Bits.$p1Bits_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Fcs() //  [R1]
         { []
         }
     {offset
       c1Fcs: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fcs_info" {
     block_c1Fcs_info:
         const _c1Fcs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.804646418 UTC

[section ""data" . Data.Bits..&._closure" {
     Data.Bits..&._closure:
         const Data.Bits..&._info;
 },
 Data.Bits..&._entry() //  [R2]
         { []
         }
     {offset
       c1FcU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FcV; else goto c1FcW;
       c1FcV: // global
           R2 = R2;
           R1 = Data.Bits..&._closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FcW: // global
           I64[Sp - 8] = block_c1FcR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Fd0; else goto c1FcS;
       u1Fd0: // global
           call _c1FcR(R1) args: 0, res: 0, upd: 0;
       c1FcS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits..&._info" {
     Data.Bits..&._info:
         const Data.Bits..&._entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FcR() //  [R1]
         { []
         }
     {offset
       c1FcR: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FcR_info" {
     block_c1FcR_info:
         const _c1FcR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.8104065 UTC

[section ""data" . Data.Bits..|._closure" {
     Data.Bits..|._closure:
         const Data.Bits..|._info;
 },
 Data.Bits..|._entry() //  [R2]
         { []
         }
     {offset
       c1Fdh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Fdi; else goto c1Fdj;
       c1Fdi: // global
           R2 = R2;
           R1 = Data.Bits..|._closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Fdj: // global
           I64[Sp - 8] = block_c1Fde_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Fdn; else goto c1Fdf;
       u1Fdn: // global
           call _c1Fde(R1) args: 0, res: 0, upd: 0;
       c1Fdf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits..|._info" {
     Data.Bits..|._info:
         const Data.Bits..|._entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Fde() //  [R1]
         { []
         }
     {offset
       c1Fde: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fde_info" {
     block_c1Fde_info:
         const _c1Fde;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.816245245 UTC

[section ""data" . Data.Bits.xor_closure" {
     Data.Bits.xor_closure:
         const Data.Bits.xor_info;
 },
 Data.Bits.xor_entry() //  [R2]
         { []
         }
     {offset
       c1FdE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FdF; else goto c1FdG;
       c1FdF: // global
           R2 = R2;
           R1 = Data.Bits.xor_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FdG: // global
           I64[Sp - 8] = block_c1FdB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FdK; else goto c1FdC;
       u1FdK: // global
           call _c1FdB(R1) args: 0, res: 0, upd: 0;
       c1FdC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.xor_info" {
     Data.Bits.xor_info:
         const Data.Bits.xor_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FdB() //  [R1]
         { []
         }
     {offset
       c1FdB: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FdB_info" {
     block_c1FdB_info:
         const _c1FdB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.822155767 UTC

[section ""data" . Data.Bits.complement_closure" {
     Data.Bits.complement_closure:
         const Data.Bits.complement_info;
 },
 Data.Bits.complement_entry() //  [R2]
         { []
         }
     {offset
       c1Fe1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Fe2; else goto c1Fe3;
       c1Fe2: // global
           R2 = R2;
           R1 = Data.Bits.complement_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Fe3: // global
           I64[Sp - 8] = block_c1FdY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Fe7; else goto c1FdZ;
       u1Fe7: // global
           call _c1FdY(R1) args: 0, res: 0, upd: 0;
       c1FdZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.complement_info" {
     Data.Bits.complement_info:
         const Data.Bits.complement_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FdY() //  [R1]
         { []
         }
     {offset
       c1FdY: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FdY_info" {
     block_c1FdY_info:
         const _c1FdY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.828141114 UTC

[section ""data" . Data.Bits.shift_closure" {
     Data.Bits.shift_closure:
         const Data.Bits.shift_info;
 },
 Data.Bits.shift_entry() //  [R2]
         { []
         }
     {offset
       c1Feo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Fep; else goto c1Feq;
       c1Fep: // global
           R2 = R2;
           R1 = Data.Bits.shift_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Feq: // global
           I64[Sp - 8] = block_c1Fel_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Feu; else goto c1Fem;
       u1Feu: // global
           call _c1Fel(R1) args: 0, res: 0, upd: 0;
       c1Fem: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.shift_info" {
     Data.Bits.shift_info:
         const Data.Bits.shift_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Fel() //  [R1]
         { []
         }
     {offset
       c1Fel: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fel_info" {
     block_c1Fel_info:
         const _c1Fel;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.833789832 UTC

[section ""data" . Data.Bits.rotate_closure" {
     Data.Bits.rotate_closure:
         const Data.Bits.rotate_info;
 },
 Data.Bits.rotate_entry() //  [R2]
         { []
         }
     {offset
       c1FeL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FeM; else goto c1FeN;
       c1FeM: // global
           R2 = R2;
           R1 = Data.Bits.rotate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FeN: // global
           I64[Sp - 8] = block_c1FeI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FeR; else goto c1FeJ;
       u1FeR: // global
           call _c1FeI(R1) args: 0, res: 0, upd: 0;
       c1FeJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.rotate_info" {
     Data.Bits.rotate_info:
         const Data.Bits.rotate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FeI() //  [R1]
         { []
         }
     {offset
       c1FeI: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FeI_info" {
     block_c1FeI_info:
         const _c1FeI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.839610293 UTC

[section ""data" . Data.Bits.zeroBits_closure" {
     Data.Bits.zeroBits_closure:
         const Data.Bits.zeroBits_info;
 },
 Data.Bits.zeroBits_entry() //  [R2]
         { []
         }
     {offset
       c1Ff8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Ff9; else goto c1Ffa;
       c1Ff9: // global
           R2 = R2;
           R1 = Data.Bits.zeroBits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Ffa: // global
           I64[Sp - 8] = block_c1Ff5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Ffe; else goto c1Ff6;
       u1Ffe: // global
           call _c1Ff5(R1) args: 0, res: 0, upd: 0;
       c1Ff6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.zeroBits_info" {
     Data.Bits.zeroBits_info:
         const Data.Bits.zeroBits_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Ff5() //  [R1]
         { []
         }
     {offset
       c1Ff5: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Ff5_info" {
     block_c1Ff5_info:
         const _c1Ff5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.845186759 UTC

[section ""data" . Data.Bits.bit_closure" {
     Data.Bits.bit_closure:
         const Data.Bits.bit_info;
 },
 Data.Bits.bit_entry() //  [R2]
         { []
         }
     {offset
       c1Ffv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Ffw; else goto c1Ffx;
       c1Ffw: // global
           R2 = R2;
           R1 = Data.Bits.bit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Ffx: // global
           I64[Sp - 8] = block_c1Ffs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FfB; else goto c1Fft;
       u1FfB: // global
           call _c1Ffs(R1) args: 0, res: 0, upd: 0;
       c1Fft: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.bit_info" {
     Data.Bits.bit_info:
         const Data.Bits.bit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Ffs() //  [R1]
         { []
         }
     {offset
       c1Ffs: // global
           R1 = P64[R1 + 71];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Ffs_info" {
     block_c1Ffs_info:
         const _c1Ffs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.851036031 UTC

[section ""data" . Data.Bits.setBit_closure" {
     Data.Bits.setBit_closure:
         const Data.Bits.setBit_info;
 },
 Data.Bits.setBit_entry() //  [R2]
         { []
         }
     {offset
       c1FfS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FfT; else goto c1FfU;
       c1FfT: // global
           R2 = R2;
           R1 = Data.Bits.setBit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FfU: // global
           I64[Sp - 8] = block_c1FfP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FfY; else goto c1FfQ;
       u1FfY: // global
           call _c1FfP(R1) args: 0, res: 0, upd: 0;
       c1FfQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.setBit_info" {
     Data.Bits.setBit_info:
         const Data.Bits.setBit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FfP() //  [R1]
         { []
         }
     {offset
       c1FfP: // global
           R1 = P64[R1 + 79];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FfP_info" {
     block_c1FfP_info:
         const _c1FfP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.857488897 UTC

[section ""data" . Data.Bits.clearBit_closure" {
     Data.Bits.clearBit_closure:
         const Data.Bits.clearBit_info;
 },
 Data.Bits.clearBit_entry() //  [R2]
         { []
         }
     {offset
       c1Fgf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Fgg; else goto c1Fgh;
       c1Fgg: // global
           R2 = R2;
           R1 = Data.Bits.clearBit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Fgh: // global
           I64[Sp - 8] = block_c1Fgc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Fgl; else goto c1Fgd;
       u1Fgl: // global
           call _c1Fgc(R1) args: 0, res: 0, upd: 0;
       c1Fgd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.clearBit_info" {
     Data.Bits.clearBit_info:
         const Data.Bits.clearBit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Fgc() //  [R1]
         { []
         }
     {offset
       c1Fgc: // global
           R1 = P64[R1 + 87];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fgc_info" {
     block_c1Fgc_info:
         const _c1Fgc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.863350689 UTC

[section ""data" . Data.Bits.complementBit_closure" {
     Data.Bits.complementBit_closure:
         const Data.Bits.complementBit_info;
 },
 Data.Bits.complementBit_entry() //  [R2]
         { []
         }
     {offset
       c1FgC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FgD; else goto c1FgE;
       c1FgD: // global
           R2 = R2;
           R1 = Data.Bits.complementBit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FgE: // global
           I64[Sp - 8] = block_c1Fgz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FgI; else goto c1FgA;
       u1FgI: // global
           call _c1Fgz(R1) args: 0, res: 0, upd: 0;
       c1FgA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.complementBit_info" {
     Data.Bits.complementBit_info:
         const Data.Bits.complementBit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Fgz() //  [R1]
         { []
         }
     {offset
       c1Fgz: // global
           R1 = P64[R1 + 95];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fgz_info" {
     block_c1Fgz_info:
         const _c1Fgz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.869826807 UTC

[section ""data" . Data.Bits.testBit_closure" {
     Data.Bits.testBit_closure:
         const Data.Bits.testBit_info;
 },
 Data.Bits.testBit_entry() //  [R2]
         { []
         }
     {offset
       c1FgZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Fh0; else goto c1Fh1;
       c1Fh0: // global
           R2 = R2;
           R1 = Data.Bits.testBit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Fh1: // global
           I64[Sp - 8] = block_c1FgW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Fh5; else goto c1FgX;
       u1Fh5: // global
           call _c1FgW(R1) args: 0, res: 0, upd: 0;
       c1FgX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.testBit_info" {
     Data.Bits.testBit_info:
         const Data.Bits.testBit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FgW() //  [R1]
         { []
         }
     {offset
       c1FgW: // global
           R1 = P64[R1 + 103];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FgW_info" {
     block_c1FgW_info:
         const _c1FgW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.875212512 UTC

[section ""data" . Data.Bits.bitSizeMaybe_closure" {
     Data.Bits.bitSizeMaybe_closure:
         const Data.Bits.bitSizeMaybe_info;
 },
 Data.Bits.bitSizeMaybe_entry() //  [R2]
         { []
         }
     {offset
       c1Fhm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Fhn; else goto c1Fho;
       c1Fhn: // global
           R2 = R2;
           R1 = Data.Bits.bitSizeMaybe_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Fho: // global
           I64[Sp - 8] = block_c1Fhj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Fhs; else goto c1Fhk;
       u1Fhs: // global
           call _c1Fhj(R1) args: 0, res: 0, upd: 0;
       c1Fhk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.bitSizeMaybe_info" {
     Data.Bits.bitSizeMaybe_info:
         const Data.Bits.bitSizeMaybe_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Fhj() //  [R1]
         { []
         }
     {offset
       c1Fhj: // global
           R1 = P64[R1 + 111];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fhj_info" {
     block_c1Fhj_info:
         const _c1Fhj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.8809467 UTC

[section ""data" . Data.Bits.bitSize_closure" {
     Data.Bits.bitSize_closure:
         const Data.Bits.bitSize_info;
 },
 Data.Bits.bitSize_entry() //  [R2]
         { []
         }
     {offset
       c1FhJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FhK; else goto c1FhL;
       c1FhK: // global
           R2 = R2;
           R1 = Data.Bits.bitSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FhL: // global
           I64[Sp - 8] = block_c1FhG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FhP; else goto c1FhH;
       u1FhP: // global
           call _c1FhG(R1) args: 0, res: 0, upd: 0;
       c1FhH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.bitSize_info" {
     Data.Bits.bitSize_info:
         const Data.Bits.bitSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FhG() //  [R1]
         { []
         }
     {offset
       c1FhG: // global
           R1 = P64[R1 + 119];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FhG_info" {
     block_c1FhG_info:
         const _c1FhG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.886447796 UTC

[section ""data" . Data.Bits.isSigned_closure" {
     Data.Bits.isSigned_closure:
         const Data.Bits.isSigned_info;
 },
 Data.Bits.isSigned_entry() //  [R2]
         { []
         }
     {offset
       c1Fi6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Fi7; else goto c1Fi8;
       c1Fi7: // global
           R2 = R2;
           R1 = Data.Bits.isSigned_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Fi8: // global
           I64[Sp - 8] = block_c1Fi3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Fic; else goto c1Fi4;
       u1Fic: // global
           call _c1Fi3(R1) args: 0, res: 0, upd: 0;
       c1Fi4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.isSigned_info" {
     Data.Bits.isSigned_info:
         const Data.Bits.isSigned_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Fi3() //  [R1]
         { []
         }
     {offset
       c1Fi3: // global
           R1 = P64[R1 + 127];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fi3_info" {
     block_c1Fi3_info:
         const _c1Fi3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.892304937 UTC

[section ""data" . Data.Bits.shiftL_closure" {
     Data.Bits.shiftL_closure:
         const Data.Bits.shiftL_info;
 },
 Data.Bits.shiftL_entry() //  [R2]
         { []
         }
     {offset
       c1Fit: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Fiu; else goto c1Fiv;
       c1Fiu: // global
           R2 = R2;
           R1 = Data.Bits.shiftL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Fiv: // global
           I64[Sp - 8] = block_c1Fiq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Fiz; else goto c1Fir;
       u1Fiz: // global
           call _c1Fiq(R1) args: 0, res: 0, upd: 0;
       c1Fir: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.shiftL_info" {
     Data.Bits.shiftL_info:
         const Data.Bits.shiftL_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Fiq() //  [R1]
         { []
         }
     {offset
       c1Fiq: // global
           R1 = P64[R1 + 135];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fiq_info" {
     block_c1Fiq_info:
         const _c1Fiq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.898117132 UTC

[section ""data" . Data.Bits.unsafeShiftL_closure" {
     Data.Bits.unsafeShiftL_closure:
         const Data.Bits.unsafeShiftL_info;
 },
 Data.Bits.unsafeShiftL_entry() //  [R2]
         { []
         }
     {offset
       c1FiQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FiR; else goto c1FiS;
       c1FiR: // global
           R2 = R2;
           R1 = Data.Bits.unsafeShiftL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FiS: // global
           I64[Sp - 8] = block_c1FiN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FiW; else goto c1FiO;
       u1FiW: // global
           call _c1FiN(R1) args: 0, res: 0, upd: 0;
       c1FiO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.unsafeShiftL_info" {
     Data.Bits.unsafeShiftL_info:
         const Data.Bits.unsafeShiftL_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FiN() //  [R1]
         { []
         }
     {offset
       c1FiN: // global
           R1 = P64[R1 + 143];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FiN_info" {
     block_c1FiN_info:
         const _c1FiN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.903850534 UTC

[section ""data" . Data.Bits.shiftR_closure" {
     Data.Bits.shiftR_closure:
         const Data.Bits.shiftR_info;
 },
 Data.Bits.shiftR_entry() //  [R2]
         { []
         }
     {offset
       c1Fjd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Fje; else goto c1Fjf;
       c1Fje: // global
           R2 = R2;
           R1 = Data.Bits.shiftR_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Fjf: // global
           I64[Sp - 8] = block_c1Fja_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Fjj; else goto c1Fjb;
       u1Fjj: // global
           call _c1Fja(R1) args: 0, res: 0, upd: 0;
       c1Fjb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.shiftR_info" {
     Data.Bits.shiftR_info:
         const Data.Bits.shiftR_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Fja() //  [R1]
         { []
         }
     {offset
       c1Fja: // global
           R1 = P64[R1 + 151];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fja_info" {
     block_c1Fja_info:
         const _c1Fja;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.909829073 UTC

[section ""data" . Data.Bits.unsafeShiftR_closure" {
     Data.Bits.unsafeShiftR_closure:
         const Data.Bits.unsafeShiftR_info;
 },
 Data.Bits.unsafeShiftR_entry() //  [R2]
         { []
         }
     {offset
       c1FjA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FjB; else goto c1FjC;
       c1FjB: // global
           R2 = R2;
           R1 = Data.Bits.unsafeShiftR_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FjC: // global
           I64[Sp - 8] = block_c1Fjx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FjG; else goto c1Fjy;
       u1FjG: // global
           call _c1Fjx(R1) args: 0, res: 0, upd: 0;
       c1Fjy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.unsafeShiftR_info" {
     Data.Bits.unsafeShiftR_info:
         const Data.Bits.unsafeShiftR_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Fjx() //  [R1]
         { []
         }
     {offset
       c1Fjx: // global
           R1 = P64[R1 + 159];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fjx_info" {
     block_c1Fjx_info:
         const _c1Fjx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.915266412 UTC

[section ""data" . Data.Bits.rotateL_closure" {
     Data.Bits.rotateL_closure:
         const Data.Bits.rotateL_info;
 },
 Data.Bits.rotateL_entry() //  [R2]
         { []
         }
     {offset
       c1FjX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FjY; else goto c1FjZ;
       c1FjY: // global
           R2 = R2;
           R1 = Data.Bits.rotateL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FjZ: // global
           I64[Sp - 8] = block_c1FjU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Fk3; else goto c1FjV;
       u1Fk3: // global
           call _c1FjU(R1) args: 0, res: 0, upd: 0;
       c1FjV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.rotateL_info" {
     Data.Bits.rotateL_info:
         const Data.Bits.rotateL_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FjU() //  [R1]
         { []
         }
     {offset
       c1FjU: // global
           R1 = P64[R1 + 167];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FjU_info" {
     block_c1FjU_info:
         const _c1FjU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.921151171 UTC

[section ""data" . Data.Bits.rotateR_closure" {
     Data.Bits.rotateR_closure:
         const Data.Bits.rotateR_info;
 },
 Data.Bits.rotateR_entry() //  [R2]
         { []
         }
     {offset
       c1Fkk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Fkl; else goto c1Fkm;
       c1Fkl: // global
           R2 = R2;
           R1 = Data.Bits.rotateR_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Fkm: // global
           I64[Sp - 8] = block_c1Fkh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Fkq; else goto c1Fki;
       u1Fkq: // global
           call _c1Fkh(R1) args: 0, res: 0, upd: 0;
       c1Fki: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.rotateR_info" {
     Data.Bits.rotateR_info:
         const Data.Bits.rotateR_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Fkh() //  [R1]
         { []
         }
     {offset
       c1Fkh: // global
           R1 = P64[R1 + 175];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fkh_info" {
     block_c1Fkh_info:
         const _c1Fkh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.926945513 UTC

[section ""data" . Data.Bits.popCount_closure" {
     Data.Bits.popCount_closure:
         const Data.Bits.popCount_info;
 },
 Data.Bits.popCount_entry() //  [R2]
         { []
         }
     {offset
       c1FkH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FkI; else goto c1FkJ;
       c1FkI: // global
           R2 = R2;
           R1 = Data.Bits.popCount_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FkJ: // global
           I64[Sp - 8] = block_c1FkE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FkN; else goto c1FkF;
       u1FkN: // global
           call _c1FkE(R1) args: 0, res: 0, upd: 0;
       c1FkF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.popCount_info" {
     Data.Bits.popCount_info:
         const Data.Bits.popCount_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FkE() //  [R1]
         { []
         }
     {offset
       c1FkE: // global
           R1 = P64[R1 + 183];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FkE_info" {
     block_c1FkE_info:
         const _c1FkE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.932079467 UTC

[section ""data" . Data.Bits.$fBitsBool2_closure" {
     Data.Bits.$fBitsBool2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.93380032 UTC

[section ""data" . Data.Bits.$fBitsBool1_closure" {
     Data.Bits.$fBitsBool1_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.9363752 UTC

[section ""data" . Data.Bits.$fBitsBool_$cpopCount_closure" {
     Data.Bits.$fBitsBool_$cpopCount_closure:
         const Data.Bits.$fBitsBool_$cpopCount_info;
 },
 Data.Bits.$fBitsBool_$cpopCount_entry() //  [R2]
         { []
         }
     {offset
       c1Fla: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Flb; else goto c1Flc;
       c1Flb: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsBool_$cpopCount_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Flc: // global
           I64[Sp - 8] = block_c1Fl3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Flj; else goto c1Fl4;
       u1Flj: // global
           call _c1Fl3(R1) args: 0, res: 0, upd: 0;
       c1Fl4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cpopCount_info" {
     Data.Bits.$fBitsBool_$cpopCount_info:
         const Data.Bits.$fBitsBool_$cpopCount_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Fl3() //  [R1]
         { []
         }
     {offset
       c1Fl3: // global
           if (R1 & 7 == 1) goto c1Fl7; else goto c1Fl8;
       c1Fl7: // global
           R1 = Data.Bits.$fBitsBool2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1Fl8: // global
           R1 = Data.Bits.$fBitsBool1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fl3_info" {
     block_c1Fl3_info:
         const _c1Fl3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.942212916 UTC

[section ""data" . Data.Bits.$fBitsBool_$cisSigned_closure" {
     Data.Bits.$fBitsBool_$cisSigned_closure:
         const Data.Bits.$fBitsBool_$cisSigned_info;
 },
 Data.Bits.$fBitsBool_$cisSigned_entry() //  []
         { []
         }
     {offset
       c1FlB: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cisSigned_info" {
     Data.Bits.$fBitsBool_$cisSigned_info:
         const Data.Bits.$fBitsBool_$cisSigned_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.945615594 UTC

[section ""data" . Data.Bits.$fBitsBool_$cbitSize_closure" {
     Data.Bits.$fBitsBool_$cbitSize_closure:
         const Data.Bits.$fBitsBool_$cbitSize_info;
 },
 Data.Bits.$fBitsBool_$cbitSize_entry() //  []
         { []
         }
     {offset
       c1FlN: // global
           R1 = Data.Bits.$fBitsBool1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cbitSize_info" {
     Data.Bits.$fBitsBool_$cbitSize_info:
         const Data.Bits.$fBitsBool_$cbitSize_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.949073039 UTC

[section ""data" . Data.Bits.$fBitsBool3_closure" {
     Data.Bits.$fBitsBool3_closure:
         const GHC.Base.Just_con_info;
         const Data.Bits.$fBitsBool1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.951056044 UTC

[section ""data" . Data.Bits.$fBitsBool_$cbitSizeMaybe_closure" {
     Data.Bits.$fBitsBool_$cbitSizeMaybe_closure:
         const Data.Bits.$fBitsBool_$cbitSizeMaybe_info;
 },
 Data.Bits.$fBitsBool_$cbitSizeMaybe_entry() //  []
         { []
         }
     {offset
       c1Fm0: // global
           R1 = Data.Bits.$fBitsBool3_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cbitSizeMaybe_info" {
     Data.Bits.$fBitsBool_$cbitSizeMaybe_info:
         const Data.Bits.$fBitsBool_$cbitSizeMaybe_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.955296945 UTC

[section ""data" . Data.Bits.$fBitsBool_$ctestBit_closure" {
     Data.Bits.$fBitsBool_$ctestBit_closure:
         const Data.Bits.$fBitsBool_$ctestBit_info;
 },
 Data.Bits.$fBitsBool_$ctestBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Fmf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Fmg; else goto c1Fmh;
       c1Fmg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsBool_$ctestBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Fmh: // global
           I64[Sp - 16] = block_c1Fmc_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Fmp; else goto c1Fmd;
       u1Fmp: // global
           call _c1Fmc(R1) args: 0, res: 0, upd: 0;
       c1Fmd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$ctestBit_info" {
     Data.Bits.$fBitsBool_$ctestBit_info:
         const Data.Bits.$fBitsBool_$ctestBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Fmc() //  [R1]
         { []
         }
     {offset
       c1Fmc: // global
           if (I64[R1 + 7] == 0) goto c1Fmo; else goto c1Fmn;
       c1Fmo: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1Fmn: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fmc_info" {
     block_c1Fmc_info:
         const _c1Fmc;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.96185257 UTC

[section ""data" . Data.Bits.$fBitsBool_$cbit_closure" {
     Data.Bits.$fBitsBool_$cbit_closure:
         const Data.Bits.$fBitsBool_$cbit_info;
 },
 Data.Bits.$fBitsBool_$cbit_entry() //  [R2]
         { []
         }
     {offset
       c1FmJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FmK; else goto c1FmL;
       c1FmK: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsBool_$cbit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FmL: // global
           I64[Sp - 8] = block_c1FmG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FmT; else goto c1FmH;
       u1FmT: // global
           call _c1FmG(R1) args: 0, res: 0, upd: 0;
       c1FmH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cbit_info" {
     Data.Bits.$fBitsBool_$cbit_info:
         const Data.Bits.$fBitsBool_$cbit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FmG() //  [R1]
         { []
         }
     {offset
       c1FmG: // global
           if (I64[R1 + 7] == 0) goto c1FmS; else goto c1FmR;
       c1FmS: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1FmR: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FmG_info" {
     block_c1FmG_info:
         const _c1FmG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.966980604 UTC

[section ""data" . Data.Bits.$fBitsBool_$crotate_closure" {
     Data.Bits.$fBitsBool_$crotate_closure:
         const Data.Bits.$fBitsBool_$crotate_info;
 },
 Data.Bits.$fBitsBool_$crotate_entry() //  [R2]
         { []
         }
     {offset
       c1Fn9: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$crotate_info" {
     Data.Bits.$fBitsBool_$crotate_info:
         const Data.Bits.$fBitsBool_$crotate_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.971015172 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cisSigned_closure" {
     Data.Bits.$fBitsInteger_$cisSigned_closure:
         const Data.Bits.$fBitsInteger_$cisSigned_info;
 },
 Data.Bits.$fBitsInteger_$cisSigned_entry() //  []
         { []
         }
     {offset
       c1Fnm: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cisSigned_info" {
     Data.Bits.$fBitsInteger_$cisSigned_info:
         const Data.Bits.$fBitsInteger_$cisSigned_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.974044145 UTC

[section ""cstring" . Data.Bits.$fBitsInteger2_bytes" {
     Data.Bits.$fBitsInteger2_bytes:
         I8[] [68,97,116,97,46,66,105,116,115,46,98,105,116,83,105,122,101,40,73,110,116,101,103,101,114,41]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.976245372 UTC

[section ""data" . Data.Bits.$fBitsInteger1_closure" {
     Data.Bits.$fBitsInteger1_closure:
         const Data.Bits.$fBitsInteger1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Bits.$fBitsInteger1_entry() //  [R1]
         { []
         }
     {offset
       c1FnB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FnC; else goto c1FnD;
       c1FnC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1FnD: // global
           (_c1Fny::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1Fny::I64 == 0) goto c1FnA; else goto c1Fnz;
       c1FnA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1Fnz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1Fny::I64;
           R2 = Data.Bits.$fBitsInteger2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger1_info" {
     Data.Bits.$fBitsInteger1_info:
         const Data.Bits.$fBitsInteger1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.980520515 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cbitSize_closure" {
     Data.Bits.$fBitsInteger_$cbitSize_closure:
         const Data.Bits.$fBitsInteger_$cbitSize_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cbitSize_entry() //  []
         { []
         }
     {offset
       c1FnP: // global
           R2 = Data.Bits.$fBitsInteger1_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cbitSize_info" {
     Data.Bits.$fBitsInteger_$cbitSize_info:
         const Data.Bits.$fBitsInteger_$cbitSize_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1D79_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.983931676 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cbitSizeMaybe_closure" {
     Data.Bits.$fBitsInteger_$cbitSizeMaybe_closure:
         const Data.Bits.$fBitsInteger_$cbitSizeMaybe_info;
 },
 Data.Bits.$fBitsInteger_$cbitSizeMaybe_entry() //  []
         { []
         }
     {offset
       c1Fo0: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cbitSizeMaybe_info" {
     Data.Bits.$fBitsInteger_$cbitSizeMaybe_info:
         const Data.Bits.$fBitsInteger_$cbitSizeMaybe_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.987739678 UTC

[section ""data" . Data.Bits.$fBitsInteger_$ctestBit_closure" {
     Data.Bits.$fBitsInteger_$ctestBit_closure:
         const Data.Bits.$fBitsInteger_$ctestBit_info;
 },
 Data.Bits.$fBitsInteger_$ctestBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Fof: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Fog; else goto c1Foh;
       c1Fog: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$ctestBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Foh: // global
           I64[Sp - 16] = block_c1Foc_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Fol; else goto c1Fod;
       u1Fol: // global
           call _c1Foc(R1) args: 0, res: 0, upd: 0;
       c1Fod: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$ctestBit_info" {
     Data.Bits.$fBitsInteger_$ctestBit_info:
         const Data.Bits.$fBitsInteger_$ctestBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Foc() //  [R1]
         { []
         }
     {offset
       c1Foc: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.testBitInteger_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Foc_info" {
     block_c1Foc_info:
         const _c1Foc;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.993703388 UTC

[section ""data" . Data.Bits.$fBitsInteger_$czeroBits_closure" {
     Data.Bits.$fBitsInteger_$czeroBits_closure:
         const Data.Bits.$fBitsInteger_$czeroBits_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Bits.$fBitsInteger_$czeroBits_entry() //  [R1]
         { []
         }
     {offset
       c1FoB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FoC; else goto c1FoD;
       c1FoC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1FoD: // global
           (_c1Foy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1Foy::I64 == 0) goto c1FoA; else goto c1Foz;
       c1FoA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1Foz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1Foy::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$czeroBits_info" {
     Data.Bits.$fBitsInteger_$czeroBits_info:
         const Data.Bits.$fBitsInteger_$czeroBits_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:23.99775213 UTC

[section ""data" . Data.Bits.$w$cshift_closure" {
     Data.Bits.$w$cshift_closure:
         const Data.Bits.$w$cshift_info;
         const 0;
 },
 Data.Bits.$w$cshift_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FoU: // global
           if (%MO_S_Lt_W64(R3, 0)) goto c1FoS; else goto c1FoT;
       c1FoS: // global
           R3 = -R3;
           R2 = R2;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       c1FoT: // global
           R3 = R3;
           R2 = R2;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$w$cshift_info" {
     Data.Bits.$w$cshift_info:
         const Data.Bits.$w$cshift_entry;
         const 0;
         const 4294967310;
         const 8589934606;
         const S1D79_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.00198354 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cshift_closure" {
     Data.Bits.$fBitsInteger_$cshift_closure:
         const Data.Bits.$fBitsInteger_$cshift_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cshift_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Fpa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Fpb; else goto c1Fpc;
       c1Fpb: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$cshift_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Fpc: // global
           I64[Sp - 16] = block_c1Fp7_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Fpg; else goto c1Fp8;
       u1Fpg: // global
           call _c1Fp7(R1) args: 0, res: 0, upd: 0;
       c1Fp8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cshift_info" {
     Data.Bits.$fBitsInteger_$cshift_info:
         const Data.Bits.$fBitsInteger_$cshift_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1D79_srt+24;
 },
 _c1Fp7() //  [R1]
         { []
         }
     {offset
       c1Fp7: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Bits.$w$cshift_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fp7_info" {
     block_c1Fp7_info:
         const _c1Fp7;
         const 1;
         const 4294967326;
         const S1D79_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.006614108 UTC

[section ""data" . sat_s1COx_closure" {
     sat_s1COx_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.00827326 UTC

[section ""data" . sat_s1COy_closure" {
     sat_s1COy_closure:
         const :_con_info;
         const sat_s1COx_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.011023188 UTC

[section ""data" . Data.Bits.$fBitsInteger3_closure" {
     Data.Bits.$fBitsInteger3_closure:
         const Data.Bits.$fBitsInteger3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Bits.$fBitsInteger3_entry() //  [R1]
         { []
         }
     {offset
       c1Fpy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Fpz; else goto c1FpA;
       c1Fpz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1FpA: // global
           (_c1Fpv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1Fpv::I64 == 0) goto c1Fpx; else goto c1Fpw;
       c1Fpx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1Fpw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1Fpv::I64;
           R3 = sat_s1COy_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger3_info" {
     Data.Bits.$fBitsInteger3_info:
         const Data.Bits.$fBitsInteger3_entry;
         const 0;
         const 4294967317;
         const S1D79_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.015567657 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cbit_closure" {
     Data.Bits.$fBitsInteger_$cbit_closure:
         const Data.Bits.$fBitsInteger_$cbit_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cbit_entry() //  [R2]
         { []
         }
     {offset
       c1FpP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FpQ; else goto c1FpR;
       c1FpQ: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$cbit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FpR: // global
           I64[Sp - 8] = block_c1FpM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Fq2; else goto c1FpN;
       u1Fq2: // global
           call _c1FpM(R1) args: 0, res: 0, upd: 0;
       c1FpN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cbit_info" {
     Data.Bits.$fBitsInteger_$cbit_info:
         const Data.Bits.$fBitsInteger_$cbit_entry;
         const 0;
         const 210453397518;
         const 4294967301;
         const S1D79_srt+16;
 },
 _c1FpM() //  [R1]
         { []
         }
     {offset
       c1FpM: // global
           _s1COB::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1COB::I64, 0)) goto c1FpY; else goto c1FpZ;
       c1FpY: // global
           R3 = -_s1COB::I64;
           R2 = Data.Bits.$fBitsInteger3_closure;
           Sp = Sp + 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       c1FpZ: // global
           R3 = _s1COB::I64;
           R2 = Data.Bits.$fBitsInteger3_closure;
           Sp = Sp + 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FpM_info" {
     block_c1FpM_info:
         const _c1FpM;
         const 0;
         const 73014444062;
         const S1D79_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.023158359 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cclearBit_closure" {
     Data.Bits.$fBitsInteger_$cclearBit_closure:
         const Data.Bits.$fBitsInteger_$cclearBit_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cclearBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Fqj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Fqk; else goto c1Fql;
       c1Fqk: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$cclearBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Fql: // global
           I64[Sp - 16] = block_c1Fqg_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FqT; else goto c1Fqh;
       u1FqT: // global
           call _c1Fqg(R1) args: 0, res: 0, upd: 0;
       c1Fqh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cclearBit_info" {
     Data.Bits.$fBitsInteger_$cclearBit_info:
         const Data.Bits.$fBitsInteger_$cclearBit_entry;
         const 0;
         const 897648164878;
         const 8589934607;
         const S1D79_srt+16;
 },
 _c1Fqg() //  [R1]
         { []
         }
     {offset
       c1Fqg: // global
           _s1COH::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1COH::I64, 0)) goto c1FqB; else goto c1FqN;
       c1FqB: // global
           I64[Sp] = block_c1Fqv_info;
           R3 = -_s1COH::I64;
           R2 = Data.Bits.$fBitsInteger3_closure;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c1FqN: // global
           I64[Sp] = block_c1FqI_info;
           R3 = _s1COH::I64;
           R2 = Data.Bits.$fBitsInteger3_closure;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fqg_info" {
     block_c1Fqg_info:
         const _c1Fqg;
         const 1;
         const 347892351006;
         const S1D79_srt+16;
 },
 _c1Fqv() //  [R1]
         { []
         }
     {offset
       c1Fqv: // global
           I64[Sp] = block_c1Fqz_info;
           R2 = R1;
           call GHC.Integer.Type.complementInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fqv_info" {
     block_c1Fqv_info:
         const _c1Fqv;
         const 1;
         const 4294967326;
         const S1D79_srt+64;
 },
 _c1Fqz() //  [R1]
         { []
         }
     {offset
       c1Fqz: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.andInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fqz_info" {
     block_c1Fqz_info:
         const _c1Fqz;
         const 1;
         const 30;
 },
 _c1FqI() //  [R1]
         { []
         }
     {offset
       c1FqI: // global
           I64[Sp] = block_c1FqM_info;
           R2 = R1;
           call GHC.Integer.Type.complementInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FqI_info" {
     block_c1FqI_info:
         const _c1FqI;
         const 1;
         const 4294967326;
         const S1D79_srt+64;
 },
 _c1FqM() //  [R1]
         { []
         }
     {offset
       c1FqM: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.andInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FqM_info" {
     block_c1FqM_info:
         const _c1FqM;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.035221303 UTC

[section ""data" . Data.Bits.$fBitsInteger_$ccomplementBit_closure" {
     Data.Bits.$fBitsInteger_$ccomplementBit_closure:
         const Data.Bits.$fBitsInteger_$ccomplementBit_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$ccomplementBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Frm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Frn; else goto c1Fro;
       c1Frn: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$ccomplementBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Fro: // global
           I64[Sp - 16] = block_c1Frj_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FrM; else goto c1Frk;
       u1FrM: // global
           call _c1Frj(R1) args: 0, res: 0, upd: 0;
       c1Frk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$ccomplementBit_info" {
     Data.Bits.$fBitsInteger_$ccomplementBit_info:
         const Data.Bits.$fBitsInteger_$ccomplementBit_entry;
         const 0;
         const 1172526071822;
         const 8589934607;
         const S1D79_srt+16;
 },
 _c1Frj() //  [R1]
         { []
         }
     {offset
       c1Frj: // global
           _s1COR::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1COR::I64, 0)) goto c1FrA; else goto c1FrH;
       c1FrA: // global
           I64[Sp] = block_c1Fry_info;
           R3 = -_s1COR::I64;
           R2 = Data.Bits.$fBitsInteger3_closure;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c1FrH: // global
           I64[Sp] = block_c1FrG_info;
           R3 = _s1COR::I64;
           R2 = Data.Bits.$fBitsInteger3_closure;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Frj_info" {
     block_c1Frj_info:
         const _c1Frj;
         const 1;
         const 73014444062;
         const S1D79_srt+16;
 },
 _c1Fry() //  [R1]
         { []
         }
     {offset
       c1Fry: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.xorInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fry_info" {
     block_c1Fry_info:
         const _c1Fry;
         const 1;
         const 30;
 },
 _c1FrG() //  [R1]
         { []
         }
     {offset
       c1FrG: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.xorInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FrG_info" {
     block_c1FrG_info:
         const _c1FrG;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.044582223 UTC

[section ""data" . Data.Bits.$fBitsInteger_$csetBit_closure" {
     Data.Bits.$fBitsInteger_$csetBit_closure:
         const Data.Bits.$fBitsInteger_$csetBit_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$csetBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Fs9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Fsa; else goto c1Fsb;
       c1Fsa: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$csetBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Fsb: // global
           I64[Sp - 16] = block_c1Fs6_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Fsz; else goto c1Fs7;
       u1Fsz: // global
           call _c1Fs6(R1) args: 0, res: 0, upd: 0;
       c1Fs7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$csetBit_info" {
     Data.Bits.$fBitsInteger_$csetBit_info:
         const Data.Bits.$fBitsInteger_$csetBit_entry;
         const 0;
         const 2272037699598;
         const 8589934607;
         const S1D79_srt+16;
 },
 _c1Fs6() //  [R1]
         { []
         }
     {offset
       c1Fs6: // global
           _s1COZ::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1COZ::I64, 0)) goto c1Fsn; else goto c1Fsu;
       c1Fsn: // global
           I64[Sp] = block_c1Fsl_info;
           R3 = -_s1COZ::I64;
           R2 = Data.Bits.$fBitsInteger3_closure;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c1Fsu: // global
           I64[Sp] = block_c1Fst_info;
           R3 = _s1COZ::I64;
           R2 = Data.Bits.$fBitsInteger3_closure;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fs6_info" {
     block_c1Fs6_info:
         const _c1Fs6;
         const 1;
         const 73014444062;
         const S1D79_srt+16;
 },
 _c1Fsl() //  [R1]
         { []
         }
     {offset
       c1Fsl: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.orInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fsl_info" {
     block_c1Fsl_info:
         const _c1Fsl;
         const 1;
         const 30;
 },
 _c1Fst() //  [R1]
         { []
         }
     {offset
       c1Fst: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.orInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fst_info" {
     block_c1Fst_info:
         const _c1Fst;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.053078235 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cunsafeShiftL_closure" {
     Data.Bits.$fBitsInteger_$cunsafeShiftL_closure:
         const Data.Bits.$fBitsInteger_$cunsafeShiftL_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cunsafeShiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FsT: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshift_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cunsafeShiftL_info" {
     Data.Bits.$fBitsInteger_$cunsafeShiftL_info:
         const Data.Bits.$fBitsInteger_$cunsafeShiftL_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S1D79_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.056380999 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cshiftL_closure" {
     Data.Bits.$fBitsInteger_$cshiftL_closure:
         const Data.Bits.$fBitsInteger_$cshiftL_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cshiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Ft4: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshift_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cshiftL_info" {
     Data.Bits.$fBitsInteger_$cshiftL_info:
         const Data.Bits.$fBitsInteger_$cshiftL_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S1D79_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.060513902 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cshiftR_closure" {
     Data.Bits.$fBitsInteger_$cshiftR_closure:
         const Data.Bits.$fBitsInteger_$cshiftR_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cshiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Fti: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Ftj; else goto c1Ftk;
       c1Ftj: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$cshiftR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Ftk: // global
           I64[Sp - 16] = block_c1Ftf_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Fty; else goto c1Ftg;
       u1Fty: // global
           call _c1Ftf(R1) args: 0, res: 0, upd: 0;
       c1Ftg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cshiftR_info" {
     Data.Bits.$fBitsInteger_$cshiftR_info:
         const Data.Bits.$fBitsInteger_$cshiftR_entry;
         const 0;
         const 4402341478414;
         const 8589934607;
         const S1D79_srt+16;
 },
 _c1Ftf() //  [R1]
         { []
         }
     {offset
       c1Ftf: // global
           _s1CP4::P64 = P64[Sp + 8];
           _s1CP8::I64 = -I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1CP8::I64, 0)) goto c1Ftu; else goto c1Ftv;
       c1Ftu: // global
           R3 = -_s1CP8::I64;
           R2 = _s1CP4::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       c1Ftv: // global
           R3 = _s1CP8::I64;
           R2 = _s1CP4::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Ftf_info" {
     block_c1Ftf_info:
         const _c1Ftf;
         const 1;
         const 4294967326;
         const S1D79_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.06679286 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cunsafeShiftR_closure" {
     Data.Bits.$fBitsInteger_$cunsafeShiftR_closure:
         const Data.Bits.$fBitsInteger_$cunsafeShiftR_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cunsafeShiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FtM: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshiftR_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cunsafeShiftR_info" {
     Data.Bits.$fBitsInteger_$cunsafeShiftR_info:
         const Data.Bits.$fBitsInteger_$cunsafeShiftR_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S1D79_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.070934136 UTC

[section ""data" . Data.Bits.$fBitsInteger_$crotateR_closure" {
     Data.Bits.$fBitsInteger_$crotateR_closure:
         const Data.Bits.$fBitsInteger_$crotateR_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$crotateR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Fu0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Fu1; else goto c1Fu2;
       c1Fu1: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$crotateR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Fu2: // global
           I64[Sp - 16] = block_c1FtX_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Fug; else goto c1FtY;
       u1Fug: // global
           call _c1FtX(R1) args: 0, res: 0, upd: 0;
       c1FtY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$crotateR_info" {
     Data.Bits.$fBitsInteger_$crotateR_info:
         const Data.Bits.$fBitsInteger_$crotateR_entry;
         const 0;
         const 8800387989518;
         const 8589934607;
         const S1D79_srt+16;
 },
 _c1FtX() //  [R1]
         { []
         }
     {offset
       c1FtX: // global
           _s1CPb::P64 = P64[Sp + 8];
           _s1CPf::I64 = -I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1CPf::I64, 0)) goto c1Fuc; else goto c1Fud;
       c1Fuc: // global
           R3 = -_s1CPf::I64;
           R2 = _s1CPb::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       c1Fud: // global
           R3 = _s1CPf::I64;
           R2 = _s1CPb::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FtX_info" {
     block_c1FtX_info:
         const _c1FtX;
         const 1;
         const 4294967326;
         const S1D79_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.076827895 UTC

[section ""data" . Data.Bits.$fBitsInteger_$crotateL_closure" {
     Data.Bits.$fBitsInteger_$crotateL_closure:
         const Data.Bits.$fBitsInteger_$crotateL_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$crotateL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Fuu: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshift_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$crotateL_info" {
     Data.Bits.$fBitsInteger_$crotateL_info:
         const Data.Bits.$fBitsInteger_$crotateL_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S1D79_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.080905053 UTC

[section ""data" . Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_closure" {
     Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_closure:
         const Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_info;
 },
 Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_entry() //  [R2]
         { []
         }
     {offset
       c1FuM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FuN; else goto c1FuO;
       c1FuN: // global
           R2 = R2;
           R1 = Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FuO: // global
           I64[Sp - 8] = block_c1FuF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FuV; else goto c1FuG;
       u1FuV: // global
           call _c1FuF(R1) args: 0, res: 0, upd: 0;
       c1FuG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_info" {
     Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_info:
         const Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FuF() //  [R1]
         { []
         }
     {offset
       c1FuF: // global
           if (R1 & 7 == 1) goto c1FuJ; else goto c1FuK;
       c1FuJ: // global
           R1 = Data.Bits.$fBitsBool1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1FuK: // global
           R1 = Data.Bits.$fBitsBool2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FuF_info" {
     block_c1FuF_info:
         const _c1FuF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.087894186 UTC

[section ""data" . Data.Bits.$fBitsInt_$cpopCount_closure" {
     Data.Bits.$fBitsInt_$cpopCount_closure:
         const Data.Bits.$fBitsInt_$cpopCount_info;
 },
 Data.Bits.$fBitsInt_$cpopCount_entry() //  [R2]
         { []
         }
     {offset
       c1Fvg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Fvu; else goto c1Fvv;
       c1Fvu: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cpopCount_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Fvv: // global
           I64[Sp - 8] = block_c1Fvd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Fvz; else goto c1Fve;
       u1Fvz: // global
           call _c1Fvd(R1) args: 0, res: 0, upd: 0;
       c1Fve: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cpopCount_info" {
     Data.Bits.$fBitsInt_$cpopCount_info:
         const Data.Bits.$fBitsInt_$cpopCount_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Fvd() //  [R1]
         { []
         }
     {offset
       c1Fvd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Fvy; else goto c1Fvx;
       c1Fvy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Fvx: // global
           (_c1Fvm::I64) = call MO_PopCnt W64(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _c1Fvm::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fvd_info" {
     block_c1Fvd_info:
         const _c1Fvd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.094985904 UTC

[section ""data" . Data.Bits.$fBitsInt_$cunsafeShiftR_closure" {
     Data.Bits.$fBitsInt_$cunsafeShiftR_closure:
         const Data.Bits.$fBitsInt_$cunsafeShiftR_info;
 },
 Data.Bits.$fBitsInt_$cunsafeShiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FvR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Fw3; else goto c1Fw4;
       c1Fw3: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cunsafeShiftR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Fw4: // global
           I64[Sp - 16] = block_c1FvO_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Fwa; else goto c1FvP;
       u1Fwa: // global
           call _c1FvO(R1) args: 0, res: 0, upd: 0;
       c1FvP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cunsafeShiftR_info" {
     Data.Bits.$fBitsInt_$cunsafeShiftR_info:
         const Data.Bits.$fBitsInt_$cunsafeShiftR_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FvO() //  [R1]
         { []
         }
     {offset
       c1FvO: // global
           I64[Sp] = block_c1FvU_info;
           _s1CPt::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CPt::I64;
           if (R1 & 7 != 0) goto u1Fw9; else goto c1FvV;
       u1Fw9: // global
           call _c1FvU(R1) args: 0, res: 0, upd: 0;
       c1FvV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FvO_info" {
     block_c1FvO_info:
         const _c1FvO;
         const 1;
         const 30;
 },
 _c1FvU() //  [R1]
         { []
         }
     {offset
       c1FvU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Fw8; else goto c1Fw7;
       c1Fw8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Fw7: // global
           _s1CPw::I64 = %MO_S_Shr_W64(I64[Sp + 8], I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1CPw::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FvU_info" {
     block_c1FvU_info:
         const _c1FvU;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.101590604 UTC

[section ""data" . lvl_r1CDD_closure" {
     lvl_r1CDD_closure:
         const GHC.Types.I#_con_info;
         const (-1);
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.105390014 UTC

[section ""data" . Data.Bits.$fBitsInt_$cshiftR_closure" {
     Data.Bits.$fBitsInt_$cshiftR_closure:
         const Data.Bits.$fBitsInt_$cshiftR_info;
 },
 Data.Bits.$fBitsInt_$cshiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Fwy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FwC; else goto c1FwD;
       c1FwC: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cshiftR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FwD: // global
           I64[Sp - 16] = block_c1Fwv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Fx3; else goto c1Fww;
       u1Fx3: // global
           call _c1Fwv(R1) args: 0, res: 0, upd: 0;
       c1Fww: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cshiftR_info" {
     Data.Bits.$fBitsInt_$cshiftR_info:
         const Data.Bits.$fBitsInt_$cshiftR_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Fwv() //  [R1]
         { []
         }
     {offset
       c1Fwv: // global
           I64[Sp] = block_c1FwB_info;
           _s1CPA::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CPA::I64;
           if (R1 & 7 != 0) goto u1Fx2; else goto c1FwF;
       u1Fx2: // global
           call _c1FwB(R1) args: 0, res: 0, upd: 0;
       c1FwF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fwv_info" {
     block_c1Fwv_info:
         const _c1Fwv;
         const 1;
         const 30;
 },
 _c1FwB() //  [R1]
         { []
         }
     {offset
       c1FwB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FwL; else goto c1FwK;
       c1FwL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FwK: // global
           _s1CPA::I64 = I64[Sp + 8];
           _s1CPC::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1CPC::I64, 64)) goto c1FwU; else goto c1Fx1;
       c1FwU: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = %MO_S_Shr_W64(_s1CPA::I64, _s1CPC::I64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1Fx1: // global
           if (%MO_S_Ge_W64(_s1CPA::I64, 0)) goto c1FwZ; else goto c1Fx0;
       c1FwZ: // global
           Hp = Hp - 16;
           R1 = Data.Bits.$fBitsBool2_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1Fx0: // global
           Hp = Hp - 16;
           R1 = lvl_r1CDD_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FwB_info" {
     block_c1FwB_info:
         const _c1FwB;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.114263642 UTC

[section ""data" . Data.Bits.$fBitsInt_$cunsafeShiftL_closure" {
     Data.Bits.$fBitsInt_$cunsafeShiftL_closure:
         const Data.Bits.$fBitsInt_$cunsafeShiftL_info;
 },
 Data.Bits.$fBitsInt_$cunsafeShiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Fxs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FxE; else goto c1FxF;
       c1FxE: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cunsafeShiftL_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FxF: // global
           I64[Sp - 16] = block_c1Fxp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FxL; else goto c1Fxq;
       u1FxL: // global
           call _c1Fxp(R1) args: 0, res: 0, upd: 0;
       c1Fxq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cunsafeShiftL_info" {
     Data.Bits.$fBitsInt_$cunsafeShiftL_info:
         const Data.Bits.$fBitsInt_$cunsafeShiftL_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Fxp() //  [R1]
         { []
         }
     {offset
       c1Fxp: // global
           I64[Sp] = block_c1Fxv_info;
           _s1CPJ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CPJ::I64;
           if (R1 & 7 != 0) goto u1FxK; else goto c1Fxw;
       u1FxK: // global
           call _c1Fxv(R1) args: 0, res: 0, upd: 0;
       c1Fxw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fxp_info" {
     block_c1Fxp_info:
         const _c1Fxp;
         const 1;
         const 30;
 },
 _c1Fxv() //  [R1]
         { []
         }
     {offset
       c1Fxv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FxJ; else goto c1FxI;
       c1FxJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FxI: // global
           _s1CPM::I64 = I64[Sp + 8] << I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1CPM::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fxv_info" {
     block_c1Fxv_info:
         const _c1Fxv;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.122541556 UTC

[section ""data" . Data.Bits.$fBitsInt_$cshiftL_closure" {
     Data.Bits.$fBitsInt_$cshiftL_closure:
         const Data.Bits.$fBitsInt_$cshiftL_info;
 },
 Data.Bits.$fBitsInt_$cshiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Fy8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Fyc; else goto c1Fyd;
       c1Fyc: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cshiftL_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Fyd: // global
           I64[Sp - 16] = block_c1Fy5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Fyx; else goto c1Fy6;
       u1Fyx: // global
           call _c1Fy5(R1) args: 0, res: 0, upd: 0;
       c1Fy6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cshiftL_info" {
     Data.Bits.$fBitsInt_$cshiftL_info:
         const Data.Bits.$fBitsInt_$cshiftL_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Fy5() //  [R1]
         { []
         }
     {offset
       c1Fy5: // global
           I64[Sp] = block_c1Fyb_info;
           _s1CPQ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CPQ::I64;
           if (R1 & 7 != 0) goto u1Fyw; else goto c1Fyf;
       u1Fyw: // global
           call _c1Fyb(R1) args: 0, res: 0, upd: 0;
       c1Fyf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fy5_info" {
     block_c1Fy5_info:
         const _c1Fy5;
         const 1;
         const 30;
 },
 _c1Fyb() //  [R1]
         { []
         }
     {offset
       c1Fyb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Fyl; else goto c1Fyk;
       c1Fyl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Fyk: // global
           _s1CPS::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1CPS::I64, 64)) goto c1Fyu; else goto c1Fyv;
       c1Fyu: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8] << _s1CPS::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1Fyv: // global
           Hp = Hp - 16;
           R1 = Data.Bits.$fBitsBool2_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fyb_info" {
     block_c1Fyb_info:
         const _c1Fyb;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.130007929 UTC

[section ""data" . Data.Bits.$fBitsInt_$cisSigned_closure" {
     Data.Bits.$fBitsInt_$cisSigned_closure:
         const Data.Bits.$fBitsInt_$cisSigned_info;
 },
 Data.Bits.$fBitsInt_$cisSigned_entry() //  []
         { []
         }
     {offset
       c1FyS: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cisSigned_info" {
     Data.Bits.$fBitsInt_$cisSigned_info:
         const Data.Bits.$fBitsInt_$cisSigned_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.135410748 UTC

[section ""data" . Data.Bits.$fBitsInt_$crotate_closure" {
     Data.Bits.$fBitsInt_$crotate_closure:
         const Data.Bits.$fBitsInt_$crotate_info;
 },
 Data.Bits.$fBitsInt_$crotate_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Fz7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Fzv; else goto c1Fzw;
       c1Fzv: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$crotate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Fzw: // global
           I64[Sp - 16] = block_c1Fz4_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FzC; else goto c1Fz5;
       u1FzC: // global
           call _c1Fz4(R1) args: 0, res: 0, upd: 0;
       c1Fz5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$crotate_info" {
     Data.Bits.$fBitsInt_$crotate_info:
         const Data.Bits.$fBitsInt_$crotate_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Fz4() //  [R1]
         { []
         }
     {offset
       c1Fz4: // global
           I64[Sp] = block_c1Fza_info;
           _s1CPZ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CPZ::I64;
           if (R1 & 7 != 0) goto u1FzB; else goto c1Fzb;
       u1FzB: // global
           call _c1Fza(R1) args: 0, res: 0, upd: 0;
       c1Fzb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fz4_info" {
     block_c1Fz4_info:
         const _c1Fz4;
         const 1;
         const 30;
 },
 _c1Fza() //  [R1]
         { []
         }
     {offset
       c1Fza: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FzA; else goto c1Fzz;
       c1FzA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Fzz: // global
           _s1CQ2::I64 = I64[R1 + 7] & 63;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s1CPZ::I64 = I64[Sp + 8];
           I64[Hp] = (_s1CPZ::I64 << _s1CQ2::I64) | (_s1CPZ::I64 >> 64 - _s1CQ2::I64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Fza_info" {
     block_c1Fza_info:
         const _c1Fza;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.14397505 UTC

[section ""data" . Data.Bits.$fBitsInt_$cshift_closure" {
     Data.Bits.$fBitsInt_$cshift_closure:
         const Data.Bits.$fBitsInt_$cshift_info;
 },
 Data.Bits.$fBitsInt_$cshift_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FA4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FA8; else goto c1FA9;
       c1FA8: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cshift_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FA9: // global
           I64[Sp - 16] = block_c1FA1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FAT; else goto c1FA2;
       u1FAT: // global
           call _c1FA1(R1) args: 0, res: 0, upd: 0;
       c1FA2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cshift_info" {
     Data.Bits.$fBitsInt_$cshift_info:
         const Data.Bits.$fBitsInt_$cshift_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FA1() //  [R1]
         { []
         }
     {offset
       c1FA1: // global
           I64[Sp] = block_c1FA7_info;
           _s1CQa::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CQa::I64;
           if (R1 & 7 != 0) goto u1FAS; else goto c1FAb;
       u1FAS: // global
           call _c1FA7(R1) args: 0, res: 0, upd: 0;
       c1FAb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FA1_info" {
     block_c1FA1_info:
         const _c1FA1;
         const 1;
         const 30;
 },
 _c1FA7() //  [R1]
         { []
         }
     {offset
       c1FA7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FAh; else goto c1FAg;
       c1FAh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FAg: // global
           _s1CQa::I64 = I64[Sp + 8];
           _s1CQc::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1CQc::I64, 0)) goto c1FAF; else goto c1FAR;
       c1FAF: // global
           _s1CQe::I64 = -_s1CQc::I64;
           if (%MO_S_Lt_W64(_s1CQe::I64, 64)) goto c1FAw; else goto c1FAD;
       c1FAw: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = %MO_S_Shr_W64(_s1CQa::I64, _s1CQe::I64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1FAD: // global
           if (%MO_S_Ge_W64(_s1CQa::I64, 0)) goto c1FAQ; else goto c1FAC;
       c1FAC: // global
           Hp = Hp - 16;
           R1 = lvl_r1CDD_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1FAR: // global
           if (%MO_S_Ge_W64(_s1CQc::I64, 64)) goto c1FAQ; else goto c1FAP;
       c1FAQ: // global
           Hp = Hp - 16;
           R1 = Data.Bits.$fBitsBool2_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1FAP: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1CQa::I64 << _s1CQc::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FA7_info" {
     block_c1FA7_info:
         const _c1FA7;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.15316106 UTC

[section ""data" . Data.Bits.$fBitsInt_$ccomplement_closure" {
     Data.Bits.$fBitsInt_$ccomplement_closure:
         const Data.Bits.$fBitsInt_$ccomplement_info;
 },
 Data.Bits.$fBitsInt_$ccomplement_entry() //  [R2]
         { []
         }
     {offset
       c1FBk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FBr; else goto c1FBs;
       c1FBr: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$ccomplement_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FBs: // global
           I64[Sp - 8] = block_c1FBh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FBw; else goto c1FBi;
       u1FBw: // global
           call _c1FBh(R1) args: 0, res: 0, upd: 0;
       c1FBi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$ccomplement_info" {
     Data.Bits.$fBitsInt_$ccomplement_info:
         const Data.Bits.$fBitsInt_$ccomplement_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FBh() //  [R1]
         { []
         }
     {offset
       c1FBh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FBv; else goto c1FBu;
       c1FBv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FBu: // global
           _s1CQn::I64 = ~I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1CQn::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FBh_info" {
     block_c1FBh_info:
         const _c1FBh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.160177067 UTC

[section ""data" . Data.Bits.$fBitsInt_$cxor_closure" {
     Data.Bits.$fBitsInt_$cxor_closure:
         const Data.Bits.$fBitsInt_$cxor_info;
 },
 Data.Bits.$fBitsInt_$cxor_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FBO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FC0; else goto c1FC1;
       c1FC0: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cxor_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FC1: // global
           I64[Sp - 16] = block_c1FBL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FC7; else goto c1FBM;
       u1FC7: // global
           call _c1FBL(R1) args: 0, res: 0, upd: 0;
       c1FBM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cxor_info" {
     Data.Bits.$fBitsInt_$cxor_info:
         const Data.Bits.$fBitsInt_$cxor_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FBL() //  [R1]
         { []
         }
     {offset
       c1FBL: // global
           I64[Sp] = block_c1FBR_info;
           _s1CQr::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CQr::I64;
           if (R1 & 7 != 0) goto u1FC6; else goto c1FBS;
       u1FC6: // global
           call _c1FBR(R1) args: 0, res: 0, upd: 0;
       c1FBS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FBL_info" {
     block_c1FBL_info:
         const _c1FBL;
         const 1;
         const 30;
 },
 _c1FBR() //  [R1]
         { []
         }
     {offset
       c1FBR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FC5; else goto c1FC4;
       c1FC5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FC4: // global
           _s1CQu::I64 = I64[Sp + 8] ^ I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1CQu::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FBR_info" {
     block_c1FBR_info:
         const _c1FBR;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.168606616 UTC

[section ""data" . Data.Bits.$fBitsInt_$c.|._closure" {
     Data.Bits.$fBitsInt_$c.|._closure:
         const Data.Bits.$fBitsInt_$c.|._info;
 },
 Data.Bits.$fBitsInt_$c.|._entry() //  [R2, R3]
         { []
         }
     {offset
       c1FCv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FCH; else goto c1FCI;
       c1FCH: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$c.|._closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FCI: // global
           I64[Sp - 16] = block_c1FCs_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FCO; else goto c1FCt;
       u1FCO: // global
           call _c1FCs(R1) args: 0, res: 0, upd: 0;
       c1FCt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$c.|._info" {
     Data.Bits.$fBitsInt_$c.|._info:
         const Data.Bits.$fBitsInt_$c.|._entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FCs() //  [R1]
         { []
         }
     {offset
       c1FCs: // global
           I64[Sp] = block_c1FCy_info;
           _s1CQy::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CQy::I64;
           if (R1 & 7 != 0) goto u1FCN; else goto c1FCz;
       u1FCN: // global
           call _c1FCy(R1) args: 0, res: 0, upd: 0;
       c1FCz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FCs_info" {
     block_c1FCs_info:
         const _c1FCs;
         const 1;
         const 30;
 },
 _c1FCy() //  [R1]
         { []
         }
     {offset
       c1FCy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FCM; else goto c1FCL;
       c1FCM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FCL: // global
           _s1CQB::I64 = I64[Sp + 8] | I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1CQB::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FCy_info" {
     block_c1FCy_info:
         const _c1FCy;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.176944034 UTC

[section ""data" . Data.Bits.$fBitsInt_$c.&._closure" {
     Data.Bits.$fBitsInt_$c.&._closure:
         const Data.Bits.$fBitsInt_$c.&._info;
 },
 Data.Bits.$fBitsInt_$c.&._entry() //  [R2, R3]
         { []
         }
     {offset
       c1FDc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FDo; else goto c1FDp;
       c1FDo: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$c.&._closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FDp: // global
           I64[Sp - 16] = block_c1FD9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FDv; else goto c1FDa;
       u1FDv: // global
           call _c1FD9(R1) args: 0, res: 0, upd: 0;
       c1FDa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$c.&._info" {
     Data.Bits.$fBitsInt_$c.&._info:
         const Data.Bits.$fBitsInt_$c.&._entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FD9() //  [R1]
         { []
         }
     {offset
       c1FD9: // global
           I64[Sp] = block_c1FDf_info;
           _s1CQF::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CQF::I64;
           if (R1 & 7 != 0) goto u1FDu; else goto c1FDg;
       u1FDu: // global
           call _c1FDf(R1) args: 0, res: 0, upd: 0;
       c1FDg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FD9_info" {
     block_c1FD9_info:
         const _c1FD9;
         const 1;
         const 30;
 },
 _c1FDf() //  [R1]
         { []
         }
     {offset
       c1FDf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FDt; else goto c1FDs;
       c1FDt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FDs: // global
           _s1CQI::I64 = I64[Sp + 8] & I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1CQI::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FDf_info" {
     block_c1FDf_info:
         const _c1FDf;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.184776748 UTC

[section ""data" . Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_closure" {
     Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_closure:
         const Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_info;
 },
 Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_entry() //  [R2]
         { []
         }
     {offset
       c1FDT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FE7; else goto c1FE8;
       c1FE7: // global
           R2 = R2;
           R1 = Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FE8: // global
           I64[Sp - 8] = block_c1FDQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FEc; else goto c1FDR;
       u1FEc: // global
           call _c1FDQ(R1) args: 0, res: 0, upd: 0;
       c1FDR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_info" {
     Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_info:
         const Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FDQ() //  [R1]
         { []
         }
     {offset
       c1FDQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FEb; else goto c1FEa;
       c1FEb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FEa: // global
           (_c1FDZ::I64) = call MO_Ctz W64(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _c1FDZ::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FDQ_info" {
     block_c1FDQ_info:
         const _c1FDQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.191299503 UTC

[section ""data" . Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_closure" {
     Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_closure:
         const Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_info;
 },
 Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_entry() //  [R2]
         { []
         }
     {offset
       c1FEw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FEK; else goto c1FEL;
       c1FEK: // global
           R2 = R2;
           R1 = Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FEL: // global
           I64[Sp - 8] = block_c1FEt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FEP; else goto c1FEu;
       u1FEP: // global
           call _c1FEt(R1) args: 0, res: 0, upd: 0;
       c1FEu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_info" {
     Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_info:
         const Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FEt() //  [R1]
         { []
         }
     {offset
       c1FEt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FEO; else goto c1FEN;
       c1FEO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FEN: // global
           (_c1FEC::I64) = call MO_Clz W64(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _c1FEC::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FEt_info" {
     block_c1FEt_info:
         const _c1FEt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.19636093 UTC

[section ""data" . Data.Bits.$fBitsInt1_closure" {
     Data.Bits.$fBitsInt1_closure:
         const GHC.Types.I#_con_info;
         const 64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.198966709 UTC

[section ""data" . Data.Bits.$fBitsInt_$cfiniteBitSize_closure" {
     Data.Bits.$fBitsInt_$cfiniteBitSize_closure:
         const Data.Bits.$fBitsInt_$cfiniteBitSize_info;
 },
 Data.Bits.$fBitsInt_$cfiniteBitSize_entry() //  []
         { []
         }
     {offset
       c1FF7: // global
           R1 = Data.Bits.$fBitsInt1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cfiniteBitSize_info" {
     Data.Bits.$fBitsInt_$cfiniteBitSize_info:
         const Data.Bits.$fBitsInt_$cfiniteBitSize_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.203123745 UTC

[section ""data" . Data.Bits.$fBitsWord_$cpopCount_closure" {
     Data.Bits.$fBitsWord_$cpopCount_closure:
         const Data.Bits.$fBitsWord_$cpopCount_info;
 },
 Data.Bits.$fBitsWord_$cpopCount_entry() //  [R2]
         { []
         }
     {offset
       c1FFm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FFx; else goto c1FFy;
       c1FFx: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cpopCount_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FFy: // global
           I64[Sp - 8] = block_c1FFj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FFC; else goto c1FFk;
       u1FFC: // global
           call _c1FFj(R1) args: 0, res: 0, upd: 0;
       c1FFk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cpopCount_info" {
     Data.Bits.$fBitsWord_$cpopCount_info:
         const Data.Bits.$fBitsWord_$cpopCount_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FFj() //  [R1]
         { []
         }
     {offset
       c1FFj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FFB; else goto c1FFA;
       c1FFB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FFA: // global
           (_c1FFp::I64) = call MO_PopCnt W64(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _c1FFp::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FFj_info" {
     block_c1FFj_info:
         const _c1FFj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.210254573 UTC

[section ""data" . Data.Bits.$fBitsWord_$cunsafeShiftR_closure" {
     Data.Bits.$fBitsWord_$cunsafeShiftR_closure:
         const Data.Bits.$fBitsWord_$cunsafeShiftR_info;
 },
 Data.Bits.$fBitsWord_$cunsafeShiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FFU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FG6; else goto c1FG7;
       c1FG6: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cunsafeShiftR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FG7: // global
           I64[Sp - 16] = block_c1FFR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FGd; else goto c1FFS;
       u1FGd: // global
           call _c1FFR(R1) args: 0, res: 0, upd: 0;
       c1FFS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cunsafeShiftR_info" {
     Data.Bits.$fBitsWord_$cunsafeShiftR_info:
         const Data.Bits.$fBitsWord_$cunsafeShiftR_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FFR() //  [R1]
         { []
         }
     {offset
       c1FFR: // global
           I64[Sp] = block_c1FFX_info;
           _s1CR4::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CR4::I64;
           if (R1 & 7 != 0) goto u1FGc; else goto c1FFY;
       u1FGc: // global
           call _c1FFX(R1) args: 0, res: 0, upd: 0;
       c1FFY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FFR_info" {
     block_c1FFR_info:
         const _c1FFR;
         const 1;
         const 30;
 },
 _c1FFX() //  [R1]
         { []
         }
     {offset
       c1FFX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FGb; else goto c1FGa;
       c1FGb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FGa: // global
           _s1CR7::I64 = I64[Sp + 8] >> I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1CR7::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FFX_info" {
     block_c1FFX_info:
         const _c1FFX;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.217066061 UTC

[section ""data" . Data.Bits.$fBitsWord1_closure" {
     Data.Bits.$fBitsWord1_closure:
         const GHC.Types.W#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.220759306 UTC

[section ""data" . Data.Bits.$fBitsWord_$cshiftR_closure" {
     Data.Bits.$fBitsWord_$cshiftR_closure:
         const Data.Bits.$fBitsWord_$cshiftR_info;
 },
 Data.Bits.$fBitsWord_$cshiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FGB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FGF; else goto c1FGG;
       c1FGF: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cshiftR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FGG: // global
           I64[Sp - 16] = block_c1FGy_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FH0; else goto c1FGz;
       u1FH0: // global
           call _c1FGy(R1) args: 0, res: 0, upd: 0;
       c1FGz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cshiftR_info" {
     Data.Bits.$fBitsWord_$cshiftR_info:
         const Data.Bits.$fBitsWord_$cshiftR_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FGy() //  [R1]
         { []
         }
     {offset
       c1FGy: // global
           I64[Sp] = block_c1FGE_info;
           _s1CRb::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CRb::I64;
           if (R1 & 7 != 0) goto u1FGZ; else goto c1FGI;
       u1FGZ: // global
           call _c1FGE(R1) args: 0, res: 0, upd: 0;
       c1FGI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FGy_info" {
     block_c1FGy_info:
         const _c1FGy;
         const 1;
         const 30;
 },
 _c1FGE() //  [R1]
         { []
         }
     {offset
       c1FGE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FGO; else goto c1FGN;
       c1FGO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FGN: // global
           _s1CRd::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1CRd::I64, 64)) goto c1FGX; else goto c1FGY;
       c1FGX: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = I64[Sp + 8] >> _s1CRd::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1FGY: // global
           Hp = Hp - 16;
           R1 = Data.Bits.$fBitsWord1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FGE_info" {
     block_c1FGE_info:
         const _c1FGE;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.230114974 UTC

[section ""data" . Data.Bits.$fBitsWord_$cunsafeShiftL_closure" {
     Data.Bits.$fBitsWord_$cunsafeShiftL_closure:
         const Data.Bits.$fBitsWord_$cunsafeShiftL_info;
 },
 Data.Bits.$fBitsWord_$cunsafeShiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FHo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FHA; else goto c1FHB;
       c1FHA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cunsafeShiftL_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FHB: // global
           I64[Sp - 16] = block_c1FHl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FHH; else goto c1FHm;
       u1FHH: // global
           call _c1FHl(R1) args: 0, res: 0, upd: 0;
       c1FHm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cunsafeShiftL_info" {
     Data.Bits.$fBitsWord_$cunsafeShiftL_info:
         const Data.Bits.$fBitsWord_$cunsafeShiftL_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FHl() //  [R1]
         { []
         }
     {offset
       c1FHl: // global
           I64[Sp] = block_c1FHr_info;
           _s1CRj::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CRj::I64;
           if (R1 & 7 != 0) goto u1FHG; else goto c1FHs;
       u1FHG: // global
           call _c1FHr(R1) args: 0, res: 0, upd: 0;
       c1FHs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FHl_info" {
     block_c1FHl_info:
         const _c1FHl;
         const 1;
         const 30;
 },
 _c1FHr() //  [R1]
         { []
         }
     {offset
       c1FHr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FHF; else goto c1FHE;
       c1FHF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FHE: // global
           _s1CRm::I64 = I64[Sp + 8] << I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1CRm::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FHr_info" {
     block_c1FHr_info:
         const _c1FHr;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.238332045 UTC

[section ""data" . Data.Bits.$fBitsWord_$cshiftL_closure" {
     Data.Bits.$fBitsWord_$cshiftL_closure:
         const Data.Bits.$fBitsWord_$cshiftL_info;
 },
 Data.Bits.$fBitsWord_$cshiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FI4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FI8; else goto c1FI9;
       c1FI8: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cshiftL_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FI9: // global
           I64[Sp - 16] = block_c1FI1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FIt; else goto c1FI2;
       u1FIt: // global
           call _c1FI1(R1) args: 0, res: 0, upd: 0;
       c1FI2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cshiftL_info" {
     Data.Bits.$fBitsWord_$cshiftL_info:
         const Data.Bits.$fBitsWord_$cshiftL_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FI1() //  [R1]
         { []
         }
     {offset
       c1FI1: // global
           I64[Sp] = block_c1FI7_info;
           _s1CRq::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CRq::I64;
           if (R1 & 7 != 0) goto u1FIs; else goto c1FIb;
       u1FIs: // global
           call _c1FI7(R1) args: 0, res: 0, upd: 0;
       c1FIb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FI1_info" {
     block_c1FI1_info:
         const _c1FI1;
         const 1;
         const 30;
 },
 _c1FI7() //  [R1]
         { []
         }
     {offset
       c1FI7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FIh; else goto c1FIg;
       c1FIh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FIg: // global
           _s1CRs::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1CRs::I64, 64)) goto c1FIq; else goto c1FIr;
       c1FIq: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = I64[Sp + 8] << _s1CRs::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1FIr: // global
           Hp = Hp - 16;
           R1 = Data.Bits.$fBitsWord1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FI7_info" {
     block_c1FI7_info:
         const _c1FI7;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.245958433 UTC

[section ""data" . Data.Bits.$fBitsWord_$cisSigned_closure" {
     Data.Bits.$fBitsWord_$cisSigned_closure:
         const Data.Bits.$fBitsWord_$cisSigned_info;
 },
 Data.Bits.$fBitsWord_$cisSigned_entry() //  []
         { []
         }
     {offset
       c1FIO: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cisSigned_info" {
     Data.Bits.$fBitsWord_$cisSigned_info:
         const Data.Bits.$fBitsWord_$cisSigned_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.251269525 UTC

[section ""data" . Data.Bits.$fBitsWord_$crotate_closure" {
     Data.Bits.$fBitsWord_$crotate_closure:
         const Data.Bits.$fBitsWord_$crotate_info;
 },
 Data.Bits.$fBitsWord_$crotate_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FJ3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1FJ7; else goto c1FJ8;
       c1FJ7: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$crotate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FJ8: // global
           I64[Sp - 16] = block_c1FJ0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FJM; else goto c1FJ1;
       u1FJM: // global
           call _c1FJ0(R1) args: 0, res: 0, upd: 0;
       c1FJ1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$crotate_info" {
     Data.Bits.$fBitsWord_$crotate_info:
         const Data.Bits.$fBitsWord_$crotate_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FJ0() //  [R1]
         { []
         }
     {offset
       c1FJ0: // global
           I64[Sp - 8] = block_c1FJ6_info;
           _s1CRy::P64 = R1;
           _s1CRz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s1CRz::I64;
           P64[Sp + 8] = _s1CRy::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FJL; else goto c1FJa;
       u1FJL: // global
           call _c1FJ6(R1) args: 0, res: 0, upd: 0;
       c1FJa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FJ0_info" {
     block_c1FJ0_info:
         const _c1FJ0;
         const 1;
         const 30;
 },
 _c1FJ6() //  [R1]
         { []
         }
     {offset
       c1FJ6: // global
           _s1CRC::I64 = I64[R1 + 7] & 63;
           if (_s1CRC::I64 != 0) goto u1FJJ; else goto c1FJF;
       u1FJJ: // global
           I64[Sp + 16] = _s1CRC::I64;
           Sp = Sp + 8;
           call _c1FJj() args: 0, res: 0, upd: 0;
       c1FJF: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FJ6_info" {
     block_c1FJ6_info:
         const _c1FJ6;
         const 66;
         const 30;
 },
 _c1FJj() //  []
         { []
         }
     {offset
       c1FJj: // global
           Hp = Hp + 16;
           _s1CRC::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c1FJC; else goto c1FJB;
       c1FJC: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c1FJi_info;
           R1 = _s1CRC::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1FJB: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           _s1CRz::I64 = I64[Sp];
           I64[Hp] = (_s1CRz::I64 << _s1CRC::I64) | (_s1CRz::I64 >> 64 - _s1CRC::I64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1FJi() //  [R1]
         { []
         }
     {offset
       c1FJi: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c1FJj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1FJi_info" {
     block_c1FJi_info:
         const _c1FJi;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.262753163 UTC

[section ""data" . Data.Bits.$fBitsWord_$cshift_closure" {
     Data.Bits.$fBitsWord_$cshift_closure:
         const Data.Bits.$fBitsWord_$cshift_info;
 },
 Data.Bits.$fBitsWord_$cshift_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FKn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FKr; else goto c1FKs;
       c1FKr: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cshift_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FKs: // global
           I64[Sp - 16] = block_c1FKk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FL6; else goto c1FKl;
       u1FL6: // global
           call _c1FKk(R1) args: 0, res: 0, upd: 0;
       c1FKl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cshift_info" {
     Data.Bits.$fBitsWord_$cshift_info:
         const Data.Bits.$fBitsWord_$cshift_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FKk() //  [R1]
         { []
         }
     {offset
       c1FKk: // global
           I64[Sp] = block_c1FKq_info;
           _s1CRK::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CRK::I64;
           if (R1 & 7 != 0) goto u1FL5; else goto c1FKu;
       u1FL5: // global
           call _c1FKq(R1) args: 0, res: 0, upd: 0;
       c1FKu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FKk_info" {
     block_c1FKk_info:
         const _c1FKk;
         const 1;
         const 30;
 },
 _c1FKq() //  [R1]
         { []
         }
     {offset
       c1FKq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FKA; else goto c1FKz;
       c1FKA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FKz: // global
           _s1CRK::I64 = I64[Sp + 8];
           _s1CRM::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1CRM::I64, 0)) goto c1FKS; else goto c1FL4;
       c1FKS: // global
           _s1CRO::I64 = -_s1CRM::I64;
           if (%MO_S_Ge_W64(_s1CRO::I64, 64)) goto c1FL3; else goto c1FKP;
       c1FKP: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1CRK::I64 >> _s1CRO::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1FL4: // global
           if (%MO_S_Ge_W64(_s1CRM::I64, 64)) goto c1FL3; else goto c1FL2;
       c1FL3: // global
           Hp = Hp - 16;
           R1 = Data.Bits.$fBitsWord1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1FL2: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1CRK::I64 << _s1CRM::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FKq_info" {
     block_c1FKq_info:
         const _c1FKq;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.271542756 UTC

[section ""data" . Data.Bits.$fBitsWord_$ccomplement_closure" {
     Data.Bits.$fBitsWord_$ccomplement_closure:
         const Data.Bits.$fBitsWord_$ccomplement_info;
 },
 Data.Bits.$fBitsWord_$ccomplement_entry() //  [R2]
         { []
         }
     {offset
       c1FLw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FLD; else goto c1FLE;
       c1FLD: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$ccomplement_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FLE: // global
           I64[Sp - 8] = block_c1FLt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FLI; else goto c1FLu;
       u1FLI: // global
           call _c1FLt(R1) args: 0, res: 0, upd: 0;
       c1FLu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$ccomplement_info" {
     Data.Bits.$fBitsWord_$ccomplement_info:
         const Data.Bits.$fBitsWord_$ccomplement_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FLt() //  [R1]
         { []
         }
     {offset
       c1FLt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FLH; else goto c1FLG;
       c1FLH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FLG: // global
           _s1CRW::I64 = I64[R1 + 7] ^ 18446744073709551615;
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1CRW::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FLt_info" {
     block_c1FLt_info:
         const _c1FLt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.27796891 UTC

[section ""data" . Data.Bits.$fBitsWord_$cxor_closure" {
     Data.Bits.$fBitsWord_$cxor_closure:
         const Data.Bits.$fBitsWord_$cxor_info;
 },
 Data.Bits.$fBitsWord_$cxor_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FM1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FMd; else goto c1FMe;
       c1FMd: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cxor_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FMe: // global
           I64[Sp - 16] = block_c1FLY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FMk; else goto c1FLZ;
       u1FMk: // global
           call _c1FLY(R1) args: 0, res: 0, upd: 0;
       c1FLZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cxor_info" {
     Data.Bits.$fBitsWord_$cxor_info:
         const Data.Bits.$fBitsWord_$cxor_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FLY() //  [R1]
         { []
         }
     {offset
       c1FLY: // global
           I64[Sp] = block_c1FM4_info;
           _s1CS0::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CS0::I64;
           if (R1 & 7 != 0) goto u1FMj; else goto c1FM5;
       u1FMj: // global
           call _c1FM4(R1) args: 0, res: 0, upd: 0;
       c1FM5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FLY_info" {
     block_c1FLY_info:
         const _c1FLY;
         const 1;
         const 30;
 },
 _c1FM4() //  [R1]
         { []
         }
     {offset
       c1FM4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FMi; else goto c1FMh;
       c1FMi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FMh: // global
           _s1CS3::I64 = I64[Sp + 8] ^ I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1CS3::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FM4_info" {
     block_c1FM4_info:
         const _c1FM4;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.286550957 UTC

[section ""data" . Data.Bits.$fBitsWord_$c.|._closure" {
     Data.Bits.$fBitsWord_$c.|._closure:
         const Data.Bits.$fBitsWord_$c.|._info;
 },
 Data.Bits.$fBitsWord_$c.|._entry() //  [R2, R3]
         { []
         }
     {offset
       c1FMI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FMU; else goto c1FMV;
       c1FMU: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$c.|._closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FMV: // global
           I64[Sp - 16] = block_c1FMF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FN1; else goto c1FMG;
       u1FN1: // global
           call _c1FMF(R1) args: 0, res: 0, upd: 0;
       c1FMG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$c.|._info" {
     Data.Bits.$fBitsWord_$c.|._info:
         const Data.Bits.$fBitsWord_$c.|._entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FMF() //  [R1]
         { []
         }
     {offset
       c1FMF: // global
           I64[Sp] = block_c1FML_info;
           _s1CS7::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CS7::I64;
           if (R1 & 7 != 0) goto u1FN0; else goto c1FMM;
       u1FN0: // global
           call _c1FML(R1) args: 0, res: 0, upd: 0;
       c1FMM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FMF_info" {
     block_c1FMF_info:
         const _c1FMF;
         const 1;
         const 30;
 },
 _c1FML() //  [R1]
         { []
         }
     {offset
       c1FML: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FMZ; else goto c1FMY;
       c1FMZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FMY: // global
           _s1CSa::I64 = I64[Sp + 8] | I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1CSa::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FML_info" {
     block_c1FML_info:
         const _c1FML;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.295134348 UTC

[section ""data" . Data.Bits.$fBitsWord_$c.&._closure" {
     Data.Bits.$fBitsWord_$c.&._closure:
         const Data.Bits.$fBitsWord_$c.&._info;
 },
 Data.Bits.$fBitsWord_$c.&._entry() //  [R2, R3]
         { []
         }
     {offset
       c1FNp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FNB; else goto c1FNC;
       c1FNB: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$c.&._closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FNC: // global
           I64[Sp - 16] = block_c1FNm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FNI; else goto c1FNn;
       u1FNI: // global
           call _c1FNm(R1) args: 0, res: 0, upd: 0;
       c1FNn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$c.&._info" {
     Data.Bits.$fBitsWord_$c.&._info:
         const Data.Bits.$fBitsWord_$c.&._entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FNm() //  [R1]
         { []
         }
     {offset
       c1FNm: // global
           I64[Sp] = block_c1FNs_info;
           _s1CSe::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CSe::I64;
           if (R1 & 7 != 0) goto u1FNH; else goto c1FNt;
       u1FNH: // global
           call _c1FNs(R1) args: 0, res: 0, upd: 0;
       c1FNt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FNm_info" {
     block_c1FNm_info:
         const _c1FNm;
         const 1;
         const 30;
 },
 _c1FNs() //  [R1]
         { []
         }
     {offset
       c1FNs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FNG; else goto c1FNF;
       c1FNG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FNF: // global
           _s1CSh::I64 = I64[Sp + 8] & I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1CSh::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FNs_info" {
     block_c1FNs_info:
         const _c1FNs;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.303372776 UTC

[section ""data" . Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_closure" {
     Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_closure:
         const Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_info;
 },
 Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_entry() //  [R2]
         { []
         }
     {offset
       c1FO6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FOh; else goto c1FOi;
       c1FOh: // global
           R2 = R2;
           R1 = Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FOi: // global
           I64[Sp - 8] = block_c1FO3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FOm; else goto c1FO4;
       u1FOm: // global
           call _c1FO3(R1) args: 0, res: 0, upd: 0;
       c1FO4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_info" {
     Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_info:
         const Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FO3() //  [R1]
         { []
         }
     {offset
       c1FO3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FOl; else goto c1FOk;
       c1FOl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FOk: // global
           (_c1FO9::I64) = call MO_Ctz W64(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _c1FO9::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FO3_info" {
     block_c1FO3_info:
         const _c1FO3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.309908991 UTC

[section ""data" . Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_closure" {
     Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_closure:
         const Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_info;
 },
 Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_entry() //  [R2]
         { []
         }
     {offset
       c1FOG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1FOR; else goto c1FOS;
       c1FOR: // global
           R2 = R2;
           R1 = Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FOS: // global
           I64[Sp - 8] = block_c1FOD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1FOW; else goto c1FOE;
       u1FOW: // global
           call _c1FOD(R1) args: 0, res: 0, upd: 0;
       c1FOE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_info" {
     Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_info:
         const Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1FOD() //  [R1]
         { []
         }
     {offset
       c1FOD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FOV; else goto c1FOU;
       c1FOV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FOU: // global
           (_c1FOJ::I64) = call MO_Clz W64(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _c1FOJ::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FOD_info" {
     block_c1FOD_info:
         const _c1FOD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.31578408 UTC

[section ""data" . Data.Bits.$fBitsWord_$cfiniteBitSize_closure" {
     Data.Bits.$fBitsWord_$cfiniteBitSize_closure:
         const Data.Bits.$fBitsWord_$cfiniteBitSize_info;
 },
 Data.Bits.$fBitsWord_$cfiniteBitSize_entry() //  []
         { []
         }
     {offset
       c1FPd: // global
           R1 = Data.Bits.$fBitsInt1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cfiniteBitSize_info" {
     Data.Bits.$fBitsWord_$cfiniteBitSize_info:
         const Data.Bits.$fBitsWord_$cfiniteBitSize_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.321948461 UTC

[section ""data" . Data.Bits.$dmcountTrailingZeros_closure" {
     Data.Bits.$dmcountTrailingZeros_closure:
         const Data.Bits.$dmcountTrailingZeros_info;
 },
 $dBits_s1CSx_entry() //  [R1]
         { []
         }
     {offset
       c1FPx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FPy; else goto c1FPz;
       c1FPy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1FPz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.$p1FiniteBits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dBits_s1CSx_info" {
     $dBits_s1CSx_info:
         const $dBits_s1CSx_entry;
         const 1;
         const 16;
 },
 Data.Bits.$dmcountTrailingZeros_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FPA: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c1FPB; else goto c1FPC;
       c1FPB: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$dmcountTrailingZeros_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FPC: // global
           I64[Sp - 24] = block_c1FPp_info;
           _s1CSt::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = _s1CSt::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call Data.Bits.finiteBitSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmcountTrailingZeros_info" {
     Data.Bits.$dmcountTrailingZeros_info:
         const Data.Bits.$dmcountTrailingZeros_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FPp() //  [R1]
         { []
         }
     {offset
       c1FPp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1FPF; else goto c1FPE;
       c1FPF: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FPE: // global
           _s1CSw::I64 = I64[R1 + 7];
           I64[Hp - 16] = $dBits_s1CSx_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = 0;
           I64[Sp] = _s1CSw::I64;
           P64[Sp + 8] = Hp - 16;
           Sp = Sp - 8;
           call _c1FPJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1FPp_info" {
     block_c1FPp_info:
         const _c1FPp;
         const 2;
         const 30;
 },
 _c1FPJ() //  []
         { []
         }
     {offset
       c1FPJ: // global
           Hp = Hp + 16;
           _s1CSz::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c1FPN; else goto c1FPM;
       c1FPN: // global
           HpAlloc = 16;
           I64[Sp] = block_c1FPI_info;
           R1 = _s1CSz::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1FPM: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1CSz::I64;
           _c1FPO::P64 = Hp - 7;
           if (%MO_S_Lt_W64(_s1CSz::I64,
                            I64[Sp + 8])) goto c1FPU; else goto u1FQa;
       c1FPU: // global
           I64[Sp - 16] = block_c1FPS_info;
           R2 = P64[Sp + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[Sp + 24];
           P64[Sp - 24] = _c1FPO::P64;
           P64[Sp - 8] = _c1FPO::P64;
           Sp = Sp - 40;
           call Data.Bits.testBit_entry(R2) args: 32, res: 8, upd: 8;
       u1FQa: // global
           P64[Sp + 24] = _c1FPO::P64;
           Sp = Sp + 24;
           call _c1FQ5() args: 0, res: 0, upd: 0;
     }
 },
 _c1FPI() //  [R1]
         { []
         }
     {offset
       c1FPI: // global
           I64[Sp] = R1;
           call _c1FPJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1FPI_info" {
     block_c1FPI_info:
         const _c1FPI;
         const 67;
         const 30;
 },
 _c1FPS() //  [R1]
         { []
         }
     {offset
       c1FPS: // global
           if (R1 & 7 == 1) goto c1FQ0; else goto u1FQb;
       c1FQ0: // global
           I64[Sp + 16] = I64[Sp + 16] + 1;
           Sp = Sp + 16;
           call _c1FPJ() args: 0, res: 0, upd: 0;
       u1FQb: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call _c1FQ5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1FPS_info" {
     block_c1FPS_info:
         const _c1FPS;
         const 389;
         const 30;
 },
 _c1FQ5() //  []
         { []
         }
     {offset
       c1FQ5: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.337609387 UTC

[section ""data" . Data.Bits.$dmcountLeadingZeros_closure" {
     Data.Bits.$dmcountLeadingZeros_closure:
         const Data.Bits.$dmcountLeadingZeros_info;
 },
 $dBits_s1CSI_entry() //  [R1]
         { []
         }
     {offset
       c1FQX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FQY; else goto c1FQZ;
       c1FQY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1FQZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.$p1FiniteBits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dBits_s1CSI_info" {
     $dBits_s1CSI_info:
         const $dBits_s1CSI_entry;
         const 1;
         const 16;
 },
 Data.Bits.$dmcountLeadingZeros_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FR0: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c1FR1; else goto c1FR2;
       c1FR1: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$dmcountLeadingZeros_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FR2: // global
           I64[Sp - 24] = block_c1FQP_info;
           _s1CSE::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = _s1CSE::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call Data.Bits.finiteBitSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmcountLeadingZeros_info" {
     Data.Bits.$dmcountLeadingZeros_info:
         const Data.Bits.$dmcountLeadingZeros_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FQP() //  [R1]
         { []
         }
     {offset
       c1FQP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1FR5; else goto c1FR4;
       c1FR5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1FR4: // global
           _s1CSH::I64 = I64[R1 + 7];
           I64[Hp - 16] = $dBits_s1CSI_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = _s1CSH::I64 - 1;
           I64[Sp] = _s1CSH::I64;
           P64[Sp + 8] = Hp - 16;
           Sp = Sp - 8;
           call _c1FRG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1FQP_info" {
     block_c1FQP_info:
         const _c1FQP;
         const 2;
         const 30;
 },
 _c1FRG() //  []
         { []
         }
     {offset
       c1FRG: // global
           Hp = Hp + 16;
           _s1CSS::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c1FRK; else goto c1FRJ;
       c1FRK: // global
           HpAlloc = 16;
           I64[Sp] = block_c1FRF_info;
           R1 = _s1CSS::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1FRJ: // global
           if (%MO_S_Ge_W64(_s1CSS::I64, 0)) goto c1FRR; else goto c1FS2;
       c1FRR: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1CSS::I64;
           I64[Sp - 8] = block_c1FRP_info;
           R2 = P64[Sp + 16];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 24];
           P64[Sp - 16] = Hp - 7;
           Sp = Sp - 32;
           call Data.Bits.testBit_entry(R2) args: 32, res: 8, upd: 8;
       c1FS2: // global
           Hp = Hp - 16;
           I64[Sp + 24] = _s1CSS::I64;
           Sp = Sp + 8;
           call _c1FRr() args: 0, res: 0, upd: 0;
     }
 },
 _c1FRF() //  [R1]
         { []
         }
     {offset
       c1FRF: // global
           I64[Sp] = R1;
           call _c1FRG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1FRF_info" {
     block_c1FRF_info:
         const _c1FRF;
         const 67;
         const 30;
 },
 _c1FRP() //  [R1]
         { []
         }
     {offset
       c1FRP: // global
           _s1CSS::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto c1FRX; else goto c1FS1;
       c1FRX: // global
           I64[Sp + 8] = _s1CSS::I64 - 1;
           Sp = Sp + 8;
           call _c1FRG() args: 0, res: 0, upd: 0;
       c1FS1: // global
           I64[Sp + 32] = _s1CSS::I64;
           Sp = Sp + 16;
           call _c1FRc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1FRP_info" {
     block_c1FRP_info:
         const _c1FRP;
         const 196;
         const 30;
 },
 _c1FRc() //  []
         { []
         }
     {offset
       c1FRc: // global
           Hp = Hp + 16;
           _s1CSK::I64 = I64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto c1FRn; else goto c1FRm;
       c1FRn: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c1FRb_info;
           R1 = _s1CSK::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1FRm: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp] + ((-1) - _s1CSK::I64);
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1FRb() //  [R1]
         { []
         }
     {offset
       c1FRb: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c1FRc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1FRb_info" {
     block_c1FRb_info:
         const _c1FRb;
         const 451;
         const 30;
 },
 _c1FRr() //  []
         { []
         }
     {offset
       c1FRr: // global
           Hp = Hp + 16;
           _s1CSO::I64 = I64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto c1FRC; else goto c1FRB;
       c1FRC: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c1FRq_info;
           R1 = _s1CSO::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1FRB: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp] + ((-1) - _s1CSO::I64);
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1FRq() //  [R1]
         { []
         }
     {offset
       c1FRq: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c1FRr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1FRq_info" {
     block_c1FRq_info:
         const _c1FRq;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.355854139 UTC

[section ""data" . Data.Bits.$dmrotateR_closure" {
     Data.Bits.$dmrotateR_closure:
         const Data.Bits.$dmrotateR_info;
 },
 sat_s1CT4_entry() //  [R1]
         { []
         }
     {offset
       c1FTg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1FTn; else goto c1FTo;
       c1FTn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1FTo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1FTd_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1FTs; else goto c1FTe;
       u1FTs: // global
           call _c1FTd(R1) args: 0, res: 0, upd: 0;
       c1FTe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CT4_info" {
     sat_s1CT4_info:
         const sat_s1CT4_entry;
         const 1;
         const 16;
 },
 _c1FTd() //  [R1]
         { []
         }
     {offset
       c1FTd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FTr; else goto c1FTq;
       c1FTr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1FTq: // global
           _s1CT3::I64 = -I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1CT3::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1FTd_info" {
     block_c1FTd_info:
         const _c1FTd;
         const 0;
         const 30;
 },
 Data.Bits.$dmrotateR_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1FTt: // global
           _s1CT0::P64 = R4;
           _s1CSZ::P64 = R3;
           _s1CSY::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1FTu; else goto c1FTv;
       c1FTv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1FTx; else goto c1FTw;
       c1FTx: // global
           HpAlloc = 24;
           goto c1FTu;
       c1FTu: // global
           R4 = _s1CT0::P64;
           R3 = _s1CSZ::P64;
           R2 = _s1CSY::P64;
           R1 = Data.Bits.$dmrotateR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FTw: // global
           I64[Hp - 16] = sat_s1CT4_info;
           P64[Hp] = _s1CT0::P64;
           R2 = _s1CSY::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1CSZ::P64;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call Data.Bits.rotate_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmrotateR_info" {
     Data.Bits.$dmrotateR_info:
         const Data.Bits.$dmrotateR_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.363918393 UTC

[section ""data" . Data.Bits.$dmrotateL_closure" {
     Data.Bits.$dmrotateL_closure:
         const Data.Bits.$dmrotateL_info;
 },
 Data.Bits.$dmrotateL_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1FTR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1FTS; else goto c1FTT;
       c1FTS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$dmrotateL_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FTT: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call Data.Bits.rotate_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmrotateL_info" {
     Data.Bits.$dmrotateL_info:
         const Data.Bits.$dmrotateL_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.367863548 UTC

[section ""data" . Data.Bits.$dmunsafeShiftR_closure" {
     Data.Bits.$dmunsafeShiftR_closure:
         const Data.Bits.$dmunsafeShiftR_info;
 },
 Data.Bits.$dmunsafeShiftR_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1FU3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1FU4; else goto c1FU5;
       c1FU4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$dmunsafeShiftR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FU5: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call Data.Bits.shiftR_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmunsafeShiftR_info" {
     Data.Bits.$dmunsafeShiftR_info:
         const Data.Bits.$dmunsafeShiftR_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.373543462 UTC

[section ""data" . Data.Bits.$dmshiftR_closure" {
     Data.Bits.$dmshiftR_closure:
         const Data.Bits.$dmshiftR_info;
 },
 sat_s1CTh_entry() //  [R1]
         { []
         }
     {offset
       c1FUm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1FUt; else goto c1FUu;
       c1FUt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1FUu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1FUj_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1FUy; else goto c1FUk;
       u1FUy: // global
           call _c1FUj(R1) args: 0, res: 0, upd: 0;
       c1FUk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CTh_info" {
     sat_s1CTh_info:
         const sat_s1CTh_entry;
         const 1;
         const 16;
 },
 _c1FUj() //  [R1]
         { []
         }
     {offset
       c1FUj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1FUx; else goto c1FUw;
       c1FUx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1FUw: // global
           _s1CTg::I64 = -I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1CTg::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1FUj_info" {
     block_c1FUj_info:
         const _c1FUj;
         const 0;
         const 30;
 },
 Data.Bits.$dmshiftR_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1FUz: // global
           _s1CTd::P64 = R4;
           _s1CTc::P64 = R3;
           _s1CTb::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1FUA; else goto c1FUB;
       c1FUB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1FUD; else goto c1FUC;
       c1FUD: // global
           HpAlloc = 24;
           goto c1FUA;
       c1FUA: // global
           R4 = _s1CTd::P64;
           R3 = _s1CTc::P64;
           R2 = _s1CTb::P64;
           R1 = Data.Bits.$dmshiftR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FUC: // global
           I64[Hp - 16] = sat_s1CTh_info;
           P64[Hp] = _s1CTd::P64;
           R2 = _s1CTb::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1CTc::P64;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call Data.Bits.shift_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmshiftR_info" {
     Data.Bits.$dmshiftR_info:
         const Data.Bits.$dmshiftR_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.381117484 UTC

[section ""data" . Data.Bits.$dmunsafeShiftL_closure" {
     Data.Bits.$dmunsafeShiftL_closure:
         const Data.Bits.$dmunsafeShiftL_info;
 },
 Data.Bits.$dmunsafeShiftL_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1FUX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1FUY; else goto c1FUZ;
       c1FUY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$dmunsafeShiftL_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FUZ: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call Data.Bits.shiftL_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmunsafeShiftL_info" {
     Data.Bits.$dmunsafeShiftL_info:
         const Data.Bits.$dmunsafeShiftL_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.385598216 UTC

[section ""data" . Data.Bits.$dmshiftL_closure" {
     Data.Bits.$dmshiftL_closure:
         const Data.Bits.$dmshiftL_info;
 },
 Data.Bits.$dmshiftL_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1FV9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1FVa; else goto c1FVb;
       c1FVa: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$dmshiftL_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FVb: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call Data.Bits.shift_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmshiftL_info" {
     Data.Bits.$dmshiftL_info:
         const Data.Bits.$dmshiftL_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.390026212 UTC

[section ""data" . Data.Bits.$dmcomplementBit_closure" {
     Data.Bits.$dmcomplementBit_closure:
         const Data.Bits.$dmcomplementBit_info;
 },
 sat_s1CTr_entry() //  [R1]
         { []
         }
     {offset
       c1FVp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1FVq; else goto c1FVr;
       c1FVq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1FVr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Bits.bit_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CTr_info" {
     sat_s1CTr_info:
         const sat_s1CTr_entry;
         const 2;
         const 18;
 },
 Data.Bits.$dmcomplementBit_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1FVs: // global
           _s1CTq::P64 = R4;
           _s1CTp::P64 = R3;
           _s1CTo::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1FVt; else goto c1FVu;
       c1FVu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1FVw; else goto c1FVv;
       c1FVw: // global
           HpAlloc = 32;
           goto c1FVt;
       c1FVt: // global
           R4 = _s1CTq::P64;
           R3 = _s1CTp::P64;
           R2 = _s1CTo::P64;
           R1 = Data.Bits.$dmcomplementBit_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FVv: // global
           I64[Hp - 24] = sat_s1CTr_info;
           P64[Hp - 8] = _s1CTo::P64;
           P64[Hp] = _s1CTq::P64;
           R2 = _s1CTo::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1CTp::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call Data.Bits.xor_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmcomplementBit_info" {
     Data.Bits.$dmcomplementBit_info:
         const Data.Bits.$dmcomplementBit_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.397400968 UTC

[section ""data" . Data.Bits.$dmclearBit_closure" {
     Data.Bits.$dmclearBit_closure:
         const Data.Bits.$dmclearBit_info;
 },
 sat_s1CTv_entry() //  [R1]
         { []
         }
     {offset
       c1FVU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1FVV; else goto c1FVW;
       c1FVV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1FVW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Bits.bit_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CTv_info" {
     sat_s1CTv_info:
         const sat_s1CTv_entry;
         const 2;
         const 18;
 },
 sat_s1CTw_entry() //  [R1]
         { []
         }
     {offset
       c1FVX: // global
           _s1CTw::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1FVY; else goto c1FVZ;
       c1FVZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1FW1; else goto c1FW0;
       c1FW1: // global
           HpAlloc = 32;
           goto c1FVY;
       c1FVY: // global
           R1 = _s1CTw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1FW0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1CTw::P64;
           _s1CTs::P64 = P64[_s1CTw::P64 + 16];
           _s1CTu::P64 = P64[_s1CTw::P64 + 24];
           I64[Hp - 24] = sat_s1CTv_info;
           P64[Hp - 8] = _s1CTs::P64;
           P64[Hp] = _s1CTu::P64;
           R2 = _s1CTs::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call Data.Bits.complement_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CTw_info" {
     sat_s1CTw_info:
         const sat_s1CTw_entry;
         const 2;
         const 18;
 },
 Data.Bits.$dmclearBit_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1FW2: // global
           _s1CTu::P64 = R4;
           _s1CTt::P64 = R3;
           _s1CTs::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1FW3; else goto c1FW4;
       c1FW4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1FW6; else goto c1FW5;
       c1FW6: // global
           HpAlloc = 32;
           goto c1FW3;
       c1FW3: // global
           R4 = _s1CTu::P64;
           R3 = _s1CTt::P64;
           R2 = _s1CTs::P64;
           R1 = Data.Bits.$dmclearBit_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FW5: // global
           I64[Hp - 24] = sat_s1CTw_info;
           P64[Hp - 8] = _s1CTs::P64;
           P64[Hp] = _s1CTu::P64;
           R2 = _s1CTs::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1CTt::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call Data.Bits..&._entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmclearBit_info" {
     Data.Bits.$dmclearBit_info:
         const Data.Bits.$dmclearBit_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.406078826 UTC

[section ""data" . Data.Bits.$dmsetBit_closure" {
     Data.Bits.$dmsetBit_closure:
         const Data.Bits.$dmsetBit_info;
 },
 sat_s1CTA_entry() //  [R1]
         { []
         }
     {offset
       c1FWv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1FWw; else goto c1FWx;
       c1FWw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1FWx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Bits.bit_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CTA_info" {
     sat_s1CTA_info:
         const sat_s1CTA_entry;
         const 2;
         const 18;
 },
 Data.Bits.$dmsetBit_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1FWy: // global
           _s1CTz::P64 = R4;
           _s1CTy::P64 = R3;
           _s1CTx::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1FWz; else goto c1FWA;
       c1FWA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1FWC; else goto c1FWB;
       c1FWC: // global
           HpAlloc = 32;
           goto c1FWz;
       c1FWz: // global
           R4 = _s1CTz::P64;
           R3 = _s1CTy::P64;
           R2 = _s1CTx::P64;
           R1 = Data.Bits.$dmsetBit_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FWB: // global
           I64[Hp - 24] = sat_s1CTA_info;
           P64[Hp - 8] = _s1CTx::P64;
           P64[Hp] = _s1CTz::P64;
           R2 = _s1CTx::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1CTy::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call Data.Bits..|._entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmsetBit_info" {
     Data.Bits.$dmsetBit_info:
         const Data.Bits.$dmsetBit_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.413031919 UTC

[section ""data" . Data.Bits.$dmzeroBits_closure" {
     Data.Bits.$dmzeroBits_closure:
         const Data.Bits.$dmzeroBits_info;
 },
 sat_s1CTC_entry() //  [R1]
         { []
         }
     {offset
       c1FWW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1FWX; else goto c1FWY;
       c1FWX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1FWY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Bits.$fBitsBool2_closure+1;
           Sp = Sp - 32;
           call Data.Bits.bit_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CTC_info" {
     sat_s1CTC_info:
         const sat_s1CTC_entry;
         const 1;
         const 16;
 },
 Data.Bits.$dmzeroBits_entry() //  [R2]
         { []
         }
     {offset
       c1FWZ: // global
           _s1CTB::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1FX0; else goto c1FX1;
       c1FX1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1FX3; else goto c1FX2;
       c1FX3: // global
           HpAlloc = 24;
           goto c1FX0;
       c1FX0: // global
           R2 = _s1CTB::P64;
           R1 = Data.Bits.$dmzeroBits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1FX2: // global
           I64[Hp - 16] = sat_s1CTC_info;
           P64[Hp] = _s1CTB::P64;
           R2 = _s1CTB::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Data.Bits.$fBitsBool2_closure+1;
           Sp = Sp - 24;
           call Data.Bits.clearBit_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmzeroBits_info" {
     Data.Bits.$dmzeroBits_info:
         const Data.Bits.$dmzeroBits_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.418646235 UTC

[section ""data" . Data.Bits.$fBitsBool_$crotateL_closure" {
     Data.Bits.$fBitsBool_$crotateL_closure:
         const Data.Bits.$fBitsBool_$crotateL_info;
 },
 Data.Bits.$fBitsBool_$crotateL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FXi: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsBool_$crotate_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$crotateL_info" {
     Data.Bits.$fBitsBool_$crotateL_info:
         const Data.Bits.$fBitsBool_$crotateL_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.422534355 UTC

[section ""data" . Data.Bits.$fBitsBool_$cshiftR_closure" {
     Data.Bits.$fBitsBool_$cshiftR_closure:
         const Data.Bits.$fBitsBool_$cshiftR_info;
 },
 Data.Bits.$fBitsBool_$cshiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FXt: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsBool_$ctestBit_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cshiftR_info" {
     Data.Bits.$fBitsBool_$cshiftR_info:
         const Data.Bits.$fBitsBool_$cshiftR_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.425814911 UTC

[section ""data" . Data.Bits.$fBitsBool_$cunsafeShiftR_closure" {
     Data.Bits.$fBitsBool_$cunsafeShiftR_closure:
         const Data.Bits.$fBitsBool_$cunsafeShiftR_info;
 },
 Data.Bits.$fBitsBool_$cunsafeShiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FXE: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsBool_$cshiftR_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cunsafeShiftR_info" {
     Data.Bits.$fBitsBool_$cunsafeShiftR_info:
         const Data.Bits.$fBitsBool_$cunsafeShiftR_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.42917031 UTC

[section ""data" . Data.Bits.$fBitsBool_$cshiftL_closure" {
     Data.Bits.$fBitsBool_$cshiftL_closure:
         const Data.Bits.$fBitsBool_$cshiftL_info;
 },
 Data.Bits.$fBitsBool_$cshiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FXP: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsBool_$ctestBit_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cshiftL_info" {
     Data.Bits.$fBitsBool_$cshiftL_info:
         const Data.Bits.$fBitsBool_$cshiftL_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.432878726 UTC

[section ""data" . Data.Bits.$fBitsBool_$cunsafeShiftL_closure" {
     Data.Bits.$fBitsBool_$cunsafeShiftL_closure:
         const Data.Bits.$fBitsBool_$cunsafeShiftL_info;
 },
 Data.Bits.$fBitsBool_$cunsafeShiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FY0: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsBool_$cshiftL_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cunsafeShiftL_info" {
     Data.Bits.$fBitsBool_$cunsafeShiftL_info:
         const Data.Bits.$fBitsBool_$cunsafeShiftL_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.43802251 UTC

[section ""data" . Data.Bits.$fBitsBool_$ccomplementBit_closure" {
     Data.Bits.$fBitsBool_$ccomplementBit_closure:
         const Data.Bits.$fBitsBool_$ccomplementBit_info;
 },
 Data.Bits.$fBitsBool_$ccomplementBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FYi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FYj; else goto c1FYk;
       c1FYj: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsBool_$ccomplementBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FYk: // global
           I64[Sp - 16] = block_c1FYb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FYR; else goto c1FYc;
       u1FYR: // global
           call _c1FYb(R1) args: 0, res: 0, upd: 0;
       c1FYc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$ccomplementBit_info" {
     Data.Bits.$fBitsBool_$ccomplementBit_info:
         const Data.Bits.$fBitsBool_$ccomplementBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FYb() //  [R1]
         { []
         }
     {offset
       c1FYb: // global
           _s1CTE::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c1FYf; else goto c1FYg;
       c1FYf: // global
           I64[Sp + 8] = block_c1FYn_info;
           R1 = _s1CTE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u1FYP; else goto c1FYp;
       u1FYP: // global
           call _c1FYn(R1) args: 0, res: 0, upd: 0;
       c1FYp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1FYg: // global
           I64[Sp + 8] = block_c1FYA_info;
           R1 = _s1CTE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u1FYQ; else goto c1FYC;
       u1FYQ: // global
           call _c1FYA(R1) args: 0, res: 0, upd: 0;
       c1FYC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FYb_info" {
     block_c1FYb_info:
         const _c1FYb;
         const 1;
         const 30;
 },
 _c1FYn() //  [R1]
         { []
         }
     {offset
       c1FYn: // global
           if (I64[R1 + 7] == 0) goto u1FYN; else goto u1FYO;
       u1FYN: // global
           Sp = Sp + 8;
           call _c1FYJ() args: 0, res: 0, upd: 0;
       u1FYO: // global
           Sp = Sp + 8;
           call _c1FYK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1FYn_info" {
     block_c1FYn_info:
         const _c1FYn;
         const 0;
         const 30;
 },
 _c1FYA() //  [R1]
         { []
         }
     {offset
       c1FYA: // global
           if (I64[R1 + 7] == 0) goto u1FYL; else goto u1FYM;
       u1FYL: // global
           Sp = Sp + 8;
           call _c1FYK() args: 0, res: 0, upd: 0;
       u1FYM: // global
           Sp = Sp + 8;
           call _c1FYJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1FYA_info" {
     block_c1FYA_info:
         const _c1FYA;
         const 0;
         const 30;
 },
 _c1FYK() //  []
         { []
         }
     {offset
       c1FYK: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1FYJ() //  []
         { []
         }
     {offset
       c1FYJ: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.449355247 UTC

[section ""data" . Data.Bits.$fBitsBool_$cclearBit_closure" {
     Data.Bits.$fBitsBool_$cclearBit_closure:
         const Data.Bits.$fBitsBool_$cclearBit_info;
 },
 Data.Bits.$fBitsBool_$cclearBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1FZw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1FZx; else goto c1FZy;
       c1FZx: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsBool_$cclearBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1FZy: // global
           I64[Sp - 16] = block_c1FZp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1FZT; else goto c1FZq;
       u1FZT: // global
           call _c1FZp(R1) args: 0, res: 0, upd: 0;
       c1FZq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cclearBit_info" {
     Data.Bits.$fBitsBool_$cclearBit_info:
         const Data.Bits.$fBitsBool_$cclearBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1FZp() //  [R1]
         { []
         }
     {offset
       c1FZp: // global
           if (R1 & 7 == 1) goto u1FZP; else goto c1FZu;
       u1FZP: // global
           Sp = Sp + 16;
           call _c1FZO() args: 0, res: 0, upd: 0;
       c1FZu: // global
           _s1CTN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1FZE_info;
           R1 = _s1CTN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u1FZR; else goto c1FZG;
       u1FZR: // global
           call _c1FZE(R1) args: 0, res: 0, upd: 0;
       c1FZG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FZp_info" {
     block_c1FZp_info:
         const _c1FZp;
         const 1;
         const 30;
 },
 _c1FZE() //  [R1]
         { []
         }
     {offset
       c1FZE: // global
           if (I64[R1 + 7] == 0) goto u1FZQ; else goto c1FZN;
       u1FZQ: // global
           Sp = Sp + 8;
           call _c1FZO() args: 0, res: 0, upd: 0;
       c1FZN: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1FZE_info" {
     block_c1FZE_info:
         const _c1FZE;
         const 0;
         const 30;
 },
 _c1FZO() //  []
         { []
         }
     {offset
       c1FZO: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.458388459 UTC

[section ""data" . Data.Bits.$fBitsBool_$csetBit_closure" {
     Data.Bits.$fBitsBool_$csetBit_closure:
         const Data.Bits.$fBitsBool_$csetBit_info;
 },
 Data.Bits.$fBitsBool_$csetBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1G0p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1G0q; else goto c1G0r;
       c1G0q: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsBool_$csetBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1G0r: // global
           I64[Sp - 16] = block_c1G0i_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1G0y; else goto c1G0j;
       u1G0y: // global
           call _c1G0i(R1) args: 0, res: 0, upd: 0;
       c1G0j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$csetBit_info" {
     Data.Bits.$fBitsBool_$csetBit_info:
         const Data.Bits.$fBitsBool_$csetBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1G0i() //  [R1]
         { []
         }
     {offset
       c1G0i: // global
           if (R1 & 7 == 1) goto c1G0m; else goto c1G0n;
       c1G0m: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Bits.$fBitsBool_$cbit_entry(R2) args: 8, res: 0, upd: 8;
       c1G0n: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1G0i_info" {
     block_c1G0i_info:
         const _c1G0i;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.464205767 UTC

[section ""data" . Data.Bits.$fBitsBool_$crotateR_closure" {
     Data.Bits.$fBitsBool_$crotateR_closure:
         const Data.Bits.$fBitsBool_$crotateR_info;
 },
 Data.Bits.$fBitsBool_$crotateR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1G0P: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsBool_$crotate_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$crotateR_info" {
     Data.Bits.$fBitsBool_$crotateR_info:
         const Data.Bits.$fBitsBool_$crotateR_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.467418718 UTC

[section ""data" . Data.Bits.$fBitsBool_closure" {
     Data.Bits.$fBitsBool_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Classes.$fEqBool_closure;
         const GHC.Classes.&&_closure+2;
         const GHC.Classes.||_closure+2;
         const GHC.Classes.$fEqBool_$c/=_closure+2;
         const GHC.Classes.not_closure+1;
         const Data.Bits.$fBitsBool_$ctestBit_closure+2;
         const Data.Bits.$fBitsBool_$crotate_closure+2;
         const GHC.Types.False_closure+1;
         const Data.Bits.$fBitsBool_$cbit_closure+1;
         const Data.Bits.$fBitsBool_$csetBit_closure+2;
         const Data.Bits.$fBitsBool_$cclearBit_closure+2;
         const Data.Bits.$fBitsBool_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsBool_$ctestBit_closure+2;
         const Data.Bits.$fBitsBool_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsBool_$cbitSize_closure+1;
         const Data.Bits.$fBitsBool_$cisSigned_closure+1;
         const Data.Bits.$fBitsBool_$cshiftL_closure+2;
         const Data.Bits.$fBitsBool_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsBool_$cshiftR_closure+2;
         const Data.Bits.$fBitsBool_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsBool_$crotateL_closure+2;
         const Data.Bits.$fBitsBool_$crotateR_closure+2;
         const Data.Bits.$fBitsBool_$cpopCount_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.469646062 UTC

[section ""data" . Data.Bits.$fFiniteBitsBool_closure" {
     Data.Bits.$fFiniteBitsBool_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Data.Bits.$fBitsBool_closure+1;
         const Data.Bits.$fBitsBool_$cbitSize_closure+1;
         const Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_closure+1;
         const Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.473379068 UTC

[section ""data" . Data.Bits.$dmrotate_closure" {
     Data.Bits.$dmrotate_closure:
         const Data.Bits.$dmrotate_info;
 },
 Data.Bits.$dmrotate_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1G15: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1G16; else goto c1G17;
       c1G16: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$dmrotate_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1G17: // global
           I64[Sp - 24] = block_c1G12_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1G1t; else goto c1G13;
       u1G1t: // global
           call _c1G12(R1) args: 0, res: 0, upd: 0;
       c1G13: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmrotate_info" {
     Data.Bits.$dmrotate_info:
         const Data.Bits.$dmrotate_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1G12() //  [R1]
         { []
         }
     {offset
       c1G12: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1G1c; else goto c1G1b;
       c1G1c: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1G1b: // global
           _s1CTV::P64 = P64[Sp + 8];
           _s1CTW::P64 = P64[Sp + 16];
           _s1CTZ::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1CTZ::I64, 0)) goto c1G1m; else goto c1G1n;
       c1G1m: // global
           if (%MO_S_Le_W64(_s1CTZ::I64, 0)) goto c1G1j; else goto c1G1k;
       c1G1j: // global
           Hp = Hp - 16;
           R1 = _s1CTW::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1G1k: // global
           Hp = Hp - 16;
           R2 = _s1CTV::P64;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s1CTW::P64;
           P64[Sp + 16] = R1;
           call Data.Bits.rotateL_entry(R2) args: 32, res: 0, upd: 8;
       c1G1n: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -_s1CTZ::I64;
           R2 = _s1CTV::P64;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s1CTW::P64;
           P64[Sp + 16] = Hp - 7;
           call Data.Bits.rotateR_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1G12_info" {
     block_c1G12_info:
         const _c1G12;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.4809492 UTC

[section ""data" . Data.Bits.$dmshift_closure" {
     Data.Bits.$dmshift_closure:
         const Data.Bits.$dmshift_info;
 },
 Data.Bits.$dmshift_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1G1M: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1G1N; else goto c1G1O;
       c1G1N: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$dmshift_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1G1O: // global
           I64[Sp - 24] = block_c1G1J_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1G2a; else goto c1G1K;
       u1G2a: // global
           call _c1G1J(R1) args: 0, res: 0, upd: 0;
       c1G1K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmshift_info" {
     Data.Bits.$dmshift_info:
         const Data.Bits.$dmshift_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1G1J() //  [R1]
         { []
         }
     {offset
       c1G1J: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1G1T; else goto c1G1S;
       c1G1T: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1G1S: // global
           _s1CU4::P64 = P64[Sp + 8];
           _s1CU5::P64 = P64[Sp + 16];
           _s1CU8::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1CU8::I64, 0)) goto c1G23; else goto c1G24;
       c1G23: // global
           if (%MO_S_Le_W64(_s1CU8::I64, 0)) goto c1G20; else goto c1G21;
       c1G20: // global
           Hp = Hp - 16;
           R1 = _s1CU5::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1G21: // global
           Hp = Hp - 16;
           R2 = _s1CU4::P64;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s1CU5::P64;
           P64[Sp + 16] = R1;
           call Data.Bits.shiftL_entry(R2) args: 32, res: 0, upd: 8;
       c1G24: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -_s1CU8::I64;
           R2 = _s1CU4::P64;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s1CU5::P64;
           P64[Sp + 16] = Hp - 7;
           call Data.Bits.shiftR_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1G1J_info" {
     block_c1G1J_info:
         const _c1G1J;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.488034307 UTC

[section ""data" . Data.Bits.bitDefault_closure" {
     Data.Bits.bitDefault_closure:
         const Data.Bits.bitDefault_info;
         const 0;
 },
 sat_s1CUg_entry() //  [R1]
         { []
         }
     {offset
       c1G2u: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1G2v; else goto c1G2w;
       c1G2v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1G2w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Bits.$fBitsInteger3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CUg_info" {
     sat_s1CUg_info:
         const sat_s1CUg_entry;
         const 1;
         const 4294967312;
         const S1D79_srt+48;
 },
 Data.Bits.bitDefault_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1G2x: // global
           _s1CUf::P64 = R4;
           _s1CUe::P64 = R3;
           _s1CUd::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1G2y; else goto c1G2z;
       c1G2z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1G2B; else goto c1G2A;
       c1G2B: // global
           HpAlloc = 24;
           goto c1G2y;
       c1G2y: // global
           R4 = _s1CUf::P64;
           R3 = _s1CUe::P64;
           R2 = _s1CUd::P64;
           R1 = Data.Bits.bitDefault_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1G2A: // global
           I64[Hp - 16] = sat_s1CUg_info;
           P64[Hp] = _s1CUe::P64;
           R2 = _s1CUd::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _s1CUf::P64;
           Sp = Sp - 24;
           call Data.Bits.shiftL_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.bitDefault_info" {
     Data.Bits.bitDefault_info:
         const Data.Bits.bitDefault_entry;
         const 0;
         const 1103806595086;
         const 12884901911;
         const S1D79_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.496503167 UTC

[section ""data" . Data.Bits.testBitDefault_closure" {
     Data.Bits.testBitDefault_closure:
         const Data.Bits.testBitDefault_info;
         const 0;
 },
 sat_s1CUo_entry() //  [R1]
         { []
         }
     {offset
       c1G2U: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1G2V; else goto c1G2W;
       c1G2V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1G2W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Bits.$fBitsInteger_$czeroBits_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CUo_info" {
     sat_s1CUo_info:
         const sat_s1CUo_entry;
         const 1;
         const 4294967312;
         const S1D79_srt+120;
 },
 sat_s1CUm_entry() //  [R1]
         { []
         }
     {offset
       c1G35: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1G36; else goto c1G37;
       c1G36: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1G37: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Bits.bit_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CUm_info" {
     sat_s1CUm_info:
         const sat_s1CUm_entry;
         const 2;
         const 18;
 },
 sat_s1CUn_entry() //  [R1]
         { []
         }
     {offset
       c1G38: // global
           _s1CUn::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1G39; else goto c1G3a;
       c1G3a: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1G3c; else goto c1G3b;
       c1G3c: // global
           HpAlloc = 32;
           goto c1G39;
       c1G39: // global
           R1 = _s1CUn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1G3b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1CUn::P64;
           _s1CUh::P64 = P64[_s1CUn::P64 + 16];
           _s1CUj::P64 = P64[_s1CUn::P64 + 24];
           _s1CUk::P64 = P64[_s1CUn::P64 + 32];
           I64[Hp - 24] = sat_s1CUm_info;
           P64[Hp - 8] = _s1CUh::P64;
           P64[Hp] = _s1CUk::P64;
           R2 = _s1CUh::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s1CUj::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 40;
           call Data.Bits..&._entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CUn_info" {
     sat_s1CUn_info:
         const sat_s1CUn_entry;
         const 3;
         const 15;
 },
 Data.Bits.testBitDefault_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1G3f: // global
           _s1CUk::P64 = R5;
           _s1CUj::P64 = R4;
           _s1CUi::P64 = R3;
           _s1CUh::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1G3g; else goto c1G3h;
       c1G3h: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c1G3j; else goto c1G3i;
       c1G3j: // global
           HpAlloc = 64;
           goto c1G3g;
       c1G3g: // global
           R5 = _s1CUk::P64;
           R4 = _s1CUj::P64;
           R3 = _s1CUi::P64;
           R2 = _s1CUh::P64;
           R1 = Data.Bits.testBitDefault_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1G3i: // global
           I64[Hp - 56] = sat_s1CUo_info;
           P64[Hp - 40] = _s1CUi::P64;
           I64[Hp - 32] = sat_s1CUn_info;
           P64[Hp - 16] = _s1CUh::P64;
           P64[Hp - 8] = _s1CUj::P64;
           P64[Hp] = _s1CUk::P64;
           I64[Sp - 24] = block_c1G3d_info;
           R2 = _s1CUh::P64;
           P64[Sp - 16] = Hp - 56;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 24;
           call Data.Bits.$p1Bits_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.testBitDefault_info" {
     Data.Bits.testBitDefault_info:
         const Data.Bits.testBitDefault_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S1D79_srt+120;
 },
 _c1G3d() //  [R1]
         { []
         }
     {offset
       c1G3d: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _c1G2Q::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _c1G2Q::P64;
           call GHC.Classes./=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1G3d_info" {
     block_c1G3d_info:
         const _c1G3d;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.507920797 UTC

[section ""data" . Data.Bits.$fBitsInt2_closure" {
     Data.Bits.$fBitsInt2_closure:
         const GHC.Base.Just_con_info;
         const Data.Bits.$fBitsInt1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.510030382 UTC

[section ""data" . Data.Bits.$fBitsWord_$cbitSizeMaybe_closure" {
     Data.Bits.$fBitsWord_$cbitSizeMaybe_closure:
         const Data.Bits.$fBitsWord_$cbitSizeMaybe_info;
 },
 Data.Bits.$fBitsWord_$cbitSizeMaybe_entry() //  []
         { []
         }
     {offset
       c1G3R: // global
           R1 = Data.Bits.$fBitsInt2_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cbitSizeMaybe_info" {
     Data.Bits.$fBitsWord_$cbitSizeMaybe_info:
         const Data.Bits.$fBitsWord_$cbitSizeMaybe_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.514614654 UTC

[section ""data" . Data.Bits.$fBitsWord_$cbit_closure" {
     Data.Bits.$fBitsWord_$cbit_closure:
         const Data.Bits.$fBitsWord_$cbit_info;
 },
 Data.Bits.$fBitsWord_$cbit_entry() //  [R2]
         { []
         }
     {offset
       c1G46: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1G47; else goto c1G48;
       c1G47: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cbit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1G48: // global
           I64[Sp - 8] = block_c1G43_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1G4o; else goto c1G44;
       u1G4o: // global
           call _c1G43(R1) args: 0, res: 0, upd: 0;
       c1G44: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cbit_info" {
     Data.Bits.$fBitsWord_$cbit_info:
         const Data.Bits.$fBitsWord_$cbit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1G43() //  [R1]
         { []
         }
     {offset
       c1G43: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1G4d; else goto c1G4c;
       c1G4d: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1G4c: // global
           _s1CUs::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1CUs::I64, 64)) goto c1G4m; else goto c1G4n;
       c1G4m: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = 1 << _s1CUs::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1G4n: // global
           Hp = Hp - 16;
           R1 = Data.Bits.$fBitsWord1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1G43_info" {
     block_c1G43_info:
         const _c1G43;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.52182336 UTC

[section ""data" . Data.Bits.$fBitsWord_$ctestBit_closure" {
     Data.Bits.$fBitsWord_$ctestBit_closure:
         const Data.Bits.$fBitsWord_$ctestBit_info;
 },
 Data.Bits.$fBitsWord_$ctestBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1G4I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1G4M; else goto c1G4N;
       c1G4M: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$ctestBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1G4N: // global
           I64[Sp - 16] = block_c1G4F_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1G5j; else goto c1G4G;
       u1G5j: // global
           call _c1G4F(R1) args: 0, res: 0, upd: 0;
       c1G4G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$ctestBit_info" {
     Data.Bits.$fBitsWord_$ctestBit_info:
         const Data.Bits.$fBitsWord_$ctestBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1G4F() //  [R1]
         { []
         }
     {offset
       c1G4F: // global
           I64[Sp] = block_c1G4L_info;
           _s1CUy::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CUy::I64;
           if (R1 & 7 != 0) goto u1G5i; else goto c1G4P;
       u1G5i: // global
           call _c1G4L(R1) args: 0, res: 0, upd: 0;
       c1G4P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1G4F_info" {
     block_c1G4F_info:
         const _c1G4F;
         const 1;
         const 30;
 },
 _c1G4L() //  [R1]
         { []
         }
     {offset
       c1G4L: // global
           _s1CUA::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1CUA::I64, 64)) goto c1G5h; else goto c1G5g;
       c1G5g: // global
           if (I64[Sp + 8] & (1 << _s1CUA::I64) == 0) goto c1G5h; else goto c1G55;
       c1G5h: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1G55: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1G4L_info" {
     block_c1G4L_info:
         const _c1G4L;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.530488905 UTC

[section ""data" . Data.Bits.$fBitsWord_$crotateR_closure" {
     Data.Bits.$fBitsWord_$crotateR_closure:
         const Data.Bits.$fBitsWord_$crotateR_info;
 },
 Data.Bits.$fBitsWord_$crotateR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1G5J: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1G5N; else goto c1G5O;
       c1G5N: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$crotateR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1G5O: // global
           I64[Sp - 16] = block_c1G5G_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1G6v; else goto c1G5H;
       u1G6v: // global
           call _c1G5G(R1) args: 0, res: 0, upd: 0;
       c1G5H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$crotateR_info" {
     Data.Bits.$fBitsWord_$crotateR_info:
         const Data.Bits.$fBitsWord_$crotateR_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1G5G() //  [R1]
         { []
         }
     {offset
       c1G5G: // global
           I64[Sp - 8] = block_c1G5M_info;
           _s1CUG::P64 = R1;
           _s1CUH::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s1CUH::I64;
           P64[Sp + 8] = _s1CUG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1G6u; else goto c1G5Q;
       u1G6u: // global
           call _c1G5M(R1) args: 0, res: 0, upd: 0;
       c1G5Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1G5G_info" {
     block_c1G5G_info:
         const _c1G5G;
         const 1;
         const 30;
 },
 _c1G5M() //  [R1]
         { []
         }
     {offset
       c1G5M: // global
           _s1CUL::I64 = -I64[R1 + 7] & 63;
           if (_s1CUL::I64 != 0) goto u1G6s; else goto c1G6o;
       u1G6s: // global
           I64[Sp + 16] = _s1CUL::I64;
           Sp = Sp + 8;
           call _c1G62() args: 0, res: 0, upd: 0;
       c1G6o: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1G5M_info" {
     block_c1G5M_info:
         const _c1G5M;
         const 66;
         const 30;
 },
 _c1G62() //  []
         { []
         }
     {offset
       c1G62: // global
           Hp = Hp + 16;
           _s1CUL::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c1G6l; else goto c1G6k;
       c1G6l: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c1G61_info;
           R1 = _s1CUL::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1G6k: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           _s1CUH::I64 = I64[Sp];
           I64[Hp] = (_s1CUH::I64 << _s1CUL::I64) | (_s1CUH::I64 >> 64 - _s1CUL::I64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1G61() //  [R1]
         { []
         }
     {offset
       c1G61: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c1G62() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1G61_info" {
     block_c1G61_info:
         const _c1G61;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.541996065 UTC

[section ""data" . Data.Bits.$fBitsWord_$ccomplementBit_closure" {
     Data.Bits.$fBitsWord_$ccomplementBit_closure:
         const Data.Bits.$fBitsWord_$ccomplementBit_info;
 },
 Data.Bits.$fBitsWord_$ccomplementBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1G76: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1G7a; else goto c1G7b;
       c1G7a: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$ccomplementBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1G7b: // global
           I64[Sp - 16] = block_c1G73_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1G7y; else goto c1G74;
       u1G7y: // global
           call _c1G73(R1) args: 0, res: 0, upd: 0;
       c1G74: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$ccomplementBit_info" {
     Data.Bits.$fBitsWord_$ccomplementBit_info:
         const Data.Bits.$fBitsWord_$ccomplementBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1G73() //  [R1]
         { []
         }
     {offset
       c1G73: // global
           I64[Sp - 8] = block_c1G79_info;
           _s1CUS::P64 = R1;
           _s1CUT::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s1CUT::I64;
           P64[Sp + 8] = _s1CUS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1G7x; else goto c1G7d;
       u1G7x: // global
           call _c1G79(R1) args: 0, res: 0, upd: 0;
       c1G7d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1G73_info" {
     block_c1G73_info:
         const _c1G73;
         const 1;
         const 30;
 },
 _c1G79() //  [R1]
         { []
         }
     {offset
       c1G79: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1G7j; else goto c1G7i;
       c1G7j: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1G7i: // global
           _s1CUV::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1CUV::I64, 64)) goto c1G7v; else goto c1G7w;
       c1G7v: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = I64[Sp + 8] ^ (1 << _s1CUV::I64);
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1G7w: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1G79_info" {
     block_c1G79_info:
         const _c1G79;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.551089178 UTC

[section ""data" . Data.Bits.$fBitsWord_$cclearBit_closure" {
     Data.Bits.$fBitsWord_$cclearBit_closure:
         const Data.Bits.$fBitsWord_$cclearBit_info;
 },
 Data.Bits.$fBitsWord_$cclearBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1G7Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1G83; else goto c1G84;
       c1G83: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cclearBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1G84: // global
           I64[Sp - 16] = block_c1G7W_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1G8z; else goto c1G7X;
       u1G8z: // global
           call _c1G7W(R1) args: 0, res: 0, upd: 0;
       c1G7X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cclearBit_info" {
     Data.Bits.$fBitsWord_$cclearBit_info:
         const Data.Bits.$fBitsWord_$cclearBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1G7W() //  [R1]
         { []
         }
     {offset
       c1G7W: // global
           I64[Sp] = block_c1G82_info;
           _s1CV2::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CV2::I64;
           if (R1 & 7 != 0) goto u1G8y; else goto c1G86;
       u1G8y: // global
           call _c1G82(R1) args: 0, res: 0, upd: 0;
       c1G86: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1G7W_info" {
     block_c1G7W_info:
         const _c1G7W;
         const 1;
         const 30;
 },
 _c1G82() //  [R1]
         { []
         }
     {offset
       c1G82: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1G8c; else goto c1G8b;
       c1G8c: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1G8b: // global
           _s1CV2::I64 = I64[Sp + 8];
           _s1CV4::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1CV4::I64, 64)) goto c1G8r; else goto c1G8x;
       c1G8r: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1CV2::I64 & (1 << _s1CV4::I64) ^ 18446744073709551615;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1G8x: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1CV2::I64 & 18446744073709551615;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1G82_info" {
     block_c1G82_info:
         const _c1G82;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.560247781 UTC

[section ""data" . Data.Bits.$fBitsWord_$csetBit_closure" {
     Data.Bits.$fBitsWord_$csetBit_closure:
         const Data.Bits.$fBitsWord_$csetBit_info;
 },
 Data.Bits.$fBitsWord_$csetBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1G93: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1G97; else goto c1G98;
       c1G97: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$csetBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1G98: // global
           I64[Sp - 16] = block_c1G90_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1G9v; else goto c1G91;
       u1G9v: // global
           call _c1G90(R1) args: 0, res: 0, upd: 0;
       c1G91: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$csetBit_info" {
     Data.Bits.$fBitsWord_$csetBit_info:
         const Data.Bits.$fBitsWord_$csetBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1G90() //  [R1]
         { []
         }
     {offset
       c1G90: // global
           I64[Sp - 8] = block_c1G96_info;
           _s1CVc::P64 = R1;
           _s1CVd::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s1CVd::I64;
           P64[Sp + 8] = _s1CVc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1G9u; else goto c1G9a;
       u1G9u: // global
           call _c1G96(R1) args: 0, res: 0, upd: 0;
       c1G9a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1G90_info" {
     block_c1G90_info:
         const _c1G90;
         const 1;
         const 30;
 },
 _c1G96() //  [R1]
         { []
         }
     {offset
       c1G96: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1G9g; else goto c1G9f;
       c1G9g: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1G9f: // global
           _s1CVf::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1CVf::I64, 64)) goto c1G9s; else goto c1G9t;
       c1G9s: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = I64[Sp + 8] | (1 << _s1CVf::I64);
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1G9t: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1G96_info" {
     block_c1G96_info:
         const _c1G96;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.568196999 UTC

[section ""data" . Data.Bits.$fBitsWord_$crotateL_closure" {
     Data.Bits.$fBitsWord_$crotateL_closure:
         const Data.Bits.$fBitsWord_$crotateL_info;
 },
 Data.Bits.$fBitsWord_$crotateL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1G9T: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsWord_$crotate_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$crotateL_info" {
     Data.Bits.$fBitsWord_$crotateL_info:
         const Data.Bits.$fBitsWord_$crotateL_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.57199837 UTC

[section ""data" . Data.Bits.$fBitsWord_closure" {
     Data.Bits.$fBitsWord_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Classes.$fEqWord_closure;
         const Data.Bits.$fBitsWord_$c.&._closure+2;
         const Data.Bits.$fBitsWord_$c.|._closure+2;
         const Data.Bits.$fBitsWord_$cxor_closure+2;
         const Data.Bits.$fBitsWord_$ccomplement_closure+1;
         const Data.Bits.$fBitsWord_$cshift_closure+2;
         const Data.Bits.$fBitsWord_$crotate_closure+2;
         const Data.Bits.$fBitsWord1_closure+1;
         const Data.Bits.$fBitsWord_$cbit_closure+1;
         const Data.Bits.$fBitsWord_$csetBit_closure+2;
         const Data.Bits.$fBitsWord_$cclearBit_closure+2;
         const Data.Bits.$fBitsWord_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsWord_$ctestBit_closure+2;
         const Data.Bits.$fBitsWord_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsWord_$cfiniteBitSize_closure+1;
         const Data.Bits.$fBitsWord_$cisSigned_closure+1;
         const Data.Bits.$fBitsWord_$cshiftL_closure+2;
         const Data.Bits.$fBitsWord_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsWord_$cshiftR_closure+2;
         const Data.Bits.$fBitsWord_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsWord_$crotateL_closure+2;
         const Data.Bits.$fBitsWord_$crotateR_closure+2;
         const Data.Bits.$fBitsWord_$cpopCount_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.574508624 UTC

[section ""data" . Data.Bits.$fFiniteBitsWord_closure" {
     Data.Bits.$fFiniteBitsWord_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Data.Bits.$fBitsWord_closure+1;
         const Data.Bits.$fBitsWord_$cfiniteBitSize_closure+1;
         const Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_closure+1;
         const Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.576618591 UTC

[section ""data" . Data.Bits.$fBitsInt_$cbitSizeMaybe_closure" {
     Data.Bits.$fBitsInt_$cbitSizeMaybe_closure:
         const Data.Bits.$fBitsInt_$cbitSizeMaybe_info;
 },
 Data.Bits.$fBitsInt_$cbitSizeMaybe_entry() //  []
         { []
         }
     {offset
       c1Ga6: // global
           R1 = Data.Bits.$fBitsInt2_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cbitSizeMaybe_info" {
     Data.Bits.$fBitsInt_$cbitSizeMaybe_info:
         const Data.Bits.$fBitsInt_$cbitSizeMaybe_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.580293012 UTC

[section ""data" . Data.Bits.$fBitsInt_$crotateL_closure" {
     Data.Bits.$fBitsInt_$crotateL_closure:
         const Data.Bits.$fBitsInt_$crotateL_info;
 },
 Data.Bits.$fBitsInt_$crotateL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Gai: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInt_$crotate_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$crotateL_info" {
     Data.Bits.$fBitsInt_$crotateL_info:
         const Data.Bits.$fBitsInt_$crotateL_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.585329456 UTC

[section ""data" . Data.Bits.$fBitsInt_$crotateR_closure" {
     Data.Bits.$fBitsInt_$crotateR_closure:
         const Data.Bits.$fBitsInt_$crotateR_info;
 },
 Data.Bits.$fBitsInt_$crotateR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Gaw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1GaX; else goto c1GaY;
       c1GaX: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$crotateR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1GaY: // global
           I64[Sp - 16] = block_c1Gat_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Gb4; else goto c1Gau;
       u1Gb4: // global
           call _c1Gat(R1) args: 0, res: 0, upd: 0;
       c1Gau: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$crotateR_info" {
     Data.Bits.$fBitsInt_$crotateR_info:
         const Data.Bits.$fBitsInt_$crotateR_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Gat() //  [R1]
         { []
         }
     {offset
       c1Gat: // global
           I64[Sp] = block_c1Gaz_info;
           _s1CVn::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CVn::I64;
           if (R1 & 7 != 0) goto u1Gb3; else goto c1GaA;
       u1Gb3: // global
           call _c1Gaz(R1) args: 0, res: 0, upd: 0;
       c1GaA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gat_info" {
     block_c1Gat_info:
         const _c1Gat;
         const 1;
         const 30;
 },
 _c1Gaz() //  [R1]
         { []
         }
     {offset
       c1Gaz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Gb2; else goto c1Gb1;
       c1Gb2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Gb1: // global
           _s1CVq::I64 = -I64[R1 + 7] & 63;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s1CVn::I64 = I64[Sp + 8];
           I64[Hp] = (_s1CVn::I64 << _s1CVq::I64) | (_s1CVn::I64 >> 64 - _s1CVq::I64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gaz_info" {
     block_c1Gaz_info:
         const _c1Gaz;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.594026417 UTC

[section ""data" . Data.Bits.$fBitsInt_$cbit_closure" {
     Data.Bits.$fBitsInt_$cbit_closure:
         const Data.Bits.$fBitsInt_$cbit_info;
 },
 Data.Bits.$fBitsInt_$cbit_entry() //  [R2]
         { []
         }
     {offset
       c1Gbw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Gbx; else goto c1Gby;
       c1Gbx: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cbit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Gby: // global
           I64[Sp - 8] = block_c1Gbt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GbO; else goto c1Gbu;
       u1GbO: // global
           call _c1Gbt(R1) args: 0, res: 0, upd: 0;
       c1Gbu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cbit_info" {
     Data.Bits.$fBitsInt_$cbit_info:
         const Data.Bits.$fBitsInt_$cbit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Gbt() //  [R1]
         { []
         }
     {offset
       c1Gbt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1GbD; else goto c1GbC;
       c1GbD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1GbC: // global
           _s1CVy::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1CVy::I64, 64)) goto c1GbM; else goto c1GbN;
       c1GbM: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = 1 << _s1CVy::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1GbN: // global
           Hp = Hp - 16;
           R1 = Data.Bits.$fBitsBool2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gbt_info" {
     block_c1Gbt_info:
         const _c1Gbt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.600872852 UTC

[section ""data" . Data.Bits.$fBitsInt_$ctestBit_closure" {
     Data.Bits.$fBitsInt_$ctestBit_closure:
         const Data.Bits.$fBitsInt_$ctestBit_info;
 },
 Data.Bits.$fBitsInt_$ctestBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Gc8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Gcc; else goto c1Gcd;
       c1Gcc: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$ctestBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Gcd: // global
           I64[Sp - 16] = block_c1Gc5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1GcJ; else goto c1Gc6;
       u1GcJ: // global
           call _c1Gc5(R1) args: 0, res: 0, upd: 0;
       c1Gc6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$ctestBit_info" {
     Data.Bits.$fBitsInt_$ctestBit_info:
         const Data.Bits.$fBitsInt_$ctestBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Gc5() //  [R1]
         { []
         }
     {offset
       c1Gc5: // global
           I64[Sp] = block_c1Gcb_info;
           _s1CVE::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CVE::I64;
           if (R1 & 7 != 0) goto u1GcI; else goto c1Gcf;
       u1GcI: // global
           call _c1Gcb(R1) args: 0, res: 0, upd: 0;
       c1Gcf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gc5_info" {
     block_c1Gc5_info:
         const _c1Gc5;
         const 1;
         const 30;
 },
 _c1Gcb() //  [R1]
         { []
         }
     {offset
       c1Gcb: // global
           _s1CVG::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1CVG::I64, 64)) goto c1GcH; else goto c1GcG;
       c1GcG: // global
           if (I64[Sp + 8] & (1 << _s1CVG::I64) == 0) goto c1GcH; else goto c1Gcv;
       c1GcH: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1Gcv: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gcb_info" {
     block_c1Gcb_info:
         const _c1Gcb;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.60989965 UTC

[section ""data" . Data.Bits.$fBitsInt_$csetBit_closure" {
     Data.Bits.$fBitsInt_$csetBit_closure:
         const Data.Bits.$fBitsInt_$csetBit_info;
 },
 Data.Bits.$fBitsInt_$csetBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Gd9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1Gdd; else goto c1Gde;
       c1Gdd: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$csetBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Gde: // global
           I64[Sp - 16] = block_c1Gd6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1GdB; else goto c1Gd7;
       u1GdB: // global
           call _c1Gd6(R1) args: 0, res: 0, upd: 0;
       c1Gd7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$csetBit_info" {
     Data.Bits.$fBitsInt_$csetBit_info:
         const Data.Bits.$fBitsInt_$csetBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Gd6() //  [R1]
         { []
         }
     {offset
       c1Gd6: // global
           I64[Sp - 8] = block_c1Gdc_info;
           _s1CVM::P64 = R1;
           _s1CVN::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s1CVN::I64;
           P64[Sp + 8] = _s1CVM::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GdA; else goto c1Gdg;
       u1GdA: // global
           call _c1Gdc(R1) args: 0, res: 0, upd: 0;
       c1Gdg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gd6_info" {
     block_c1Gd6_info:
         const _c1Gd6;
         const 1;
         const 30;
 },
 _c1Gdc() //  [R1]
         { []
         }
     {offset
       c1Gdc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Gdm; else goto c1Gdl;
       c1Gdm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Gdl: // global
           _s1CVP::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1CVP::I64, 64)) goto c1Gdy; else goto c1Gdz;
       c1Gdy: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8] | (1 << _s1CVP::I64);
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1Gdz: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gdc_info" {
     block_c1Gdc_info:
         const _c1Gdc;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.619004174 UTC

[section ""data" . Data.Bits.$fBitsInt_$cclearBit_closure" {
     Data.Bits.$fBitsInt_$cclearBit_closure:
         const Data.Bits.$fBitsInt_$cclearBit_info;
 },
 Data.Bits.$fBitsInt_$cclearBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Ge2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Ge6; else goto c1Ge7;
       c1Ge6: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cclearBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Ge7: // global
           I64[Sp - 16] = block_c1GdZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1GeC; else goto c1Ge0;
       u1GeC: // global
           call _c1GdZ(R1) args: 0, res: 0, upd: 0;
       c1Ge0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cclearBit_info" {
     Data.Bits.$fBitsInt_$cclearBit_info:
         const Data.Bits.$fBitsInt_$cclearBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1GdZ() //  [R1]
         { []
         }
     {offset
       c1GdZ: // global
           I64[Sp] = block_c1Ge5_info;
           _s1CVW::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CVW::I64;
           if (R1 & 7 != 0) goto u1GeB; else goto c1Ge9;
       u1GeB: // global
           call _c1Ge5(R1) args: 0, res: 0, upd: 0;
       c1Ge9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GdZ_info" {
     block_c1GdZ_info:
         const _c1GdZ;
         const 1;
         const 30;
 },
 _c1Ge5() //  [R1]
         { []
         }
     {offset
       c1Ge5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Gef; else goto c1Gee;
       c1Gef: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Gee: // global
           _s1CVW::I64 = I64[Sp + 8];
           _s1CVY::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1CVY::I64, 64)) goto c1Geu; else goto c1GeA;
       c1Geu: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1CVW::I64 & ~(1 << _s1CVY::I64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1GeA: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1CVW::I64 & (-1);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Ge5_info" {
     block_c1Ge5_info:
         const _c1Ge5;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.628117106 UTC

[section ""data" . Data.Bits.$fBitsInt_$ccomplementBit_closure" {
     Data.Bits.$fBitsInt_$ccomplementBit_closure:
         const Data.Bits.$fBitsInt_$ccomplementBit_info;
 },
 Data.Bits.$fBitsInt_$ccomplementBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Gf5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1Gf9; else goto c1Gfa;
       c1Gf9: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$ccomplementBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Gfa: // global
           I64[Sp - 16] = block_c1Gf2_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Gfx; else goto c1Gf3;
       u1Gfx: // global
           call _c1Gf2(R1) args: 0, res: 0, upd: 0;
       c1Gf3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$ccomplementBit_info" {
     Data.Bits.$fBitsInt_$ccomplementBit_info:
         const Data.Bits.$fBitsInt_$ccomplementBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Gf2() //  [R1]
         { []
         }
     {offset
       c1Gf2: // global
           I64[Sp - 8] = block_c1Gf8_info;
           _s1CW6::P64 = R1;
           _s1CW7::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s1CW7::I64;
           P64[Sp + 8] = _s1CW6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Gfw; else goto c1Gfc;
       u1Gfw: // global
           call _c1Gf8(R1) args: 0, res: 0, upd: 0;
       c1Gfc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gf2_info" {
     block_c1Gf2_info:
         const _c1Gf2;
         const 1;
         const 30;
 },
 _c1Gf8() //  [R1]
         { []
         }
     {offset
       c1Gf8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Gfi; else goto c1Gfh;
       c1Gfi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Gfh: // global
           _s1CW9::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1CW9::I64, 64)) goto c1Gfu; else goto c1Gfv;
       c1Gfu: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8] ^ (1 << _s1CW9::I64);
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1Gfv: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gf8_info" {
     block_c1Gf8_info:
         const _c1Gf8;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.636159375 UTC

[section ""data" . Data.Bits.$fBitsInt_closure" {
     Data.Bits.$fBitsInt_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Classes.$fEqInt_closure;
         const Data.Bits.$fBitsInt_$c.&._closure+2;
         const Data.Bits.$fBitsInt_$c.|._closure+2;
         const Data.Bits.$fBitsInt_$cxor_closure+2;
         const Data.Bits.$fBitsInt_$ccomplement_closure+1;
         const Data.Bits.$fBitsInt_$cshift_closure+2;
         const Data.Bits.$fBitsInt_$crotate_closure+2;
         const Data.Bits.$fBitsBool2_closure+1;
         const Data.Bits.$fBitsInt_$cbit_closure+1;
         const Data.Bits.$fBitsInt_$csetBit_closure+2;
         const Data.Bits.$fBitsInt_$cclearBit_closure+2;
         const Data.Bits.$fBitsInt_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsInt_$ctestBit_closure+2;
         const Data.Bits.$fBitsInt_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsInt_$cfiniteBitSize_closure+1;
         const Data.Bits.$fBitsInt_$cisSigned_closure+1;
         const Data.Bits.$fBitsInt_$cshiftL_closure+2;
         const Data.Bits.$fBitsInt_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsInt_$cshiftR_closure+2;
         const Data.Bits.$fBitsInt_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsInt_$crotateL_closure+2;
         const Data.Bits.$fBitsInt_$crotateR_closure+2;
         const Data.Bits.$fBitsInt_$cpopCount_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.638191409 UTC

[section ""data" . Data.Bits.$fFiniteBitsInt_closure" {
     Data.Bits.$fFiniteBitsInt_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Data.Bits.$fBitsInt_closure+1;
         const Data.Bits.$fBitsInt_$cfiniteBitSize_closure+1;
         const Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_closure+1;
         const Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.644178915 UTC

[section ""data" . Data.Bits.$wpopCountDefault_closure" {
     Data.Bits.$wpopCountDefault_closure:
         const Data.Bits.$wpopCountDefault_info;
         const 0;
 },
 lvl1_s1CWg_entry() //  [R1]
         { []
         }
     {offset
       c1Ggh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1Ggi; else goto c1Ggj;
       c1Ggi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Ggj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Bits.$fBitsInteger3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_s1CWg_info" {
     lvl1_s1CWg_info:
         const lvl1_s1CWg_entry;
         const 1;
         const 4294967312;
         const S1D79_srt+48;
 },
 lvl2_s1CWh_entry() //  [R1]
         { []
         }
     {offset
       c1Ggm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1Ggn; else goto c1Ggo;
       c1Ggn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Ggo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Bits.$fBitsInteger_$czeroBits_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s1CWh_info" {
     lvl2_s1CWh_info:
         const lvl2_s1CWh_entry;
         const 1;
         const 4294967312;
         const S1D79_srt+120;
 },
 sat_s1CWo_entry() //  [R1]
         { []
         }
     {offset
       c1Ggw: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1Ggx; else goto c1Ggy;
       c1Ggx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Ggy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CWo_info" {
     sat_s1CWo_info:
         const sat_s1CWo_entry;
         const 3;
         const 15;
 },
 sat_s1CWp_entry() //  [R1]
         { []
         }
     {offset
       c1Ggz: // global
           _s1CWp::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1GgA; else goto c1GgB;
       c1GgB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1GgD; else goto c1GgC;
       c1GgD: // global
           HpAlloc = 40;
           goto c1GgA;
       c1GgA: // global
           R1 = _s1CWp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1GgC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1CWp::P64;
           _s1CWd::P64 = P64[_s1CWp::P64 + 16];
           _s1CWe::P64 = P64[_s1CWp::P64 + 24];
           _s1CWg::P64 = P64[_s1CWp::P64 + 32];
           _s1CWl::P64 = P64[_s1CWp::P64 + 40];
           I64[Hp - 32] = sat_s1CWo_info;
           P64[Hp - 16] = _s1CWe::P64;
           P64[Hp - 8] = _s1CWg::P64;
           P64[Hp] = _s1CWl::P64;
           R2 = _s1CWd::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s1CWl::P64;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 40;
           call Data.Bits..&._entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CWp_info" {
     sat_s1CWp_info:
         const sat_s1CWp_entry;
         const 4;
         const 15;
 },
 Data.Bits.$wpopCountDefault_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1GgE: // global
           _s1CWf::P64 = R4;
           _s1CWe::P64 = R3;
           _s1CWd::P64 = R2;
           if ((Sp + -88) < SpLim) (likely: False) goto c1GgF; else goto c1GgG;
       c1GgG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1GgI; else goto c1GgH;
       c1GgI: // global
           HpAlloc = 48;
           goto c1GgF;
       c1GgF: // global
           R4 = _s1CWf::P64;
           R3 = _s1CWe::P64;
           R2 = _s1CWd::P64;
           R1 = Data.Bits.$wpopCountDefault_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1GgH: // global
           I64[Hp - 40] = lvl1_s1CWg_info;
           P64[Hp - 24] = _s1CWe::P64;
           I64[Hp - 16] = lvl2_s1CWh_info;
           P64[Hp] = _s1CWe::P64;
           I64[Sp - 48] = block_c1Gg1_info;
           R2 = _s1CWd::P64;
           P64[Sp - 40] = Hp - 40;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _s1CWd::P64;
           P64[Sp - 16] = _s1CWe::P64;
           P64[Sp - 8] = _s1CWf::P64;
           Sp = Sp - 48;
           call Data.Bits.$p1Bits_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$wpopCountDefault_info" {
     Data.Bits.$wpopCountDefault_info:
         const Data.Bits.$wpopCountDefault_entry;
         const 0;
         const 10999411245070;
         const 12884901911;
         const S1D79_srt+48;
 },
 _c1Gg1() //  [R1]
         { []
         }
     {offset
       c1Gg1: // global
           P64[Sp - 8] = P64[Sp + 40];
           I64[Sp] = 0;
           P64[Sp + 40] = R1;
           Sp = Sp - 8;
           call _c1Gg7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Gg1_info" {
     block_c1Gg1_info:
         const _c1Gg1;
         const 5;
         const 30;
 },
 _c1Gg7() //  []
         { []
         }
     {offset
       c1Gg7: // global
           I64[Sp - 8] = block_c1Gga_info;
           R2 = P64[Sp + 48];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp];
           P64[Sp - 16] = P64[Sp + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c1Gga() //  [R1]
         { []
         }
     {offset
       c1Gga: // global
           _s1CWk::I64 = I64[Sp + 16];
           if (R1 & 7 == 1) goto c1GgM; else goto c1GgT;
       c1GgM: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1GgP; else goto c1GgO;
       c1GgP: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1GgO: // global
           I64[Hp - 40] = sat_s1CWp_info;
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 16] = _s1CWk::I64 + 1;
           P64[Sp + 8] = Hp - 40;
           Sp = Sp + 8;
           call _c1Gg7() args: 0, res: 0, upd: 0;
       c1GgT: // global
           R1 = _s1CWk::I64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gga_info" {
     block_c1Gga_info:
         const _c1Gga;
         const 135;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.660910476 UTC

[section ""data" . Data.Bits.popCountDefault_closure" {
     Data.Bits.popCountDefault_closure:
         const Data.Bits.popCountDefault_info;
         const 0;
 },
 Data.Bits.popCountDefault_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1GhQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1GhU; else goto c1GhV;
       c1GhU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.popCountDefault_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1GhV: // global
           I64[Sp - 8] = block_c1GhO_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Bits.$wpopCountDefault_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.popCountDefault_info" {
     Data.Bits.popCountDefault_info:
         const Data.Bits.popCountDefault_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1D79_srt+136;
 },
 _c1GhO() //  [R1]
         { []
         }
     {offset
       c1GhO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1GhY; else goto c1GhX;
       c1GhY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1GhX: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GhO_info" {
     block_c1GhO_info:
         const _c1GhO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.667044214 UTC

[section ""data" . Data.Bits.$fBitsInteger_closure" {
     Data.Bits.$fBitsInteger_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Integer.Type.$fEqInteger_closure;
         const GHC.Integer.Type.andInteger_closure+2;
         const GHC.Integer.Type.orInteger_closure+2;
         const GHC.Integer.Type.xorInteger_closure+2;
         const GHC.Integer.Type.complementInteger_closure+1;
         const Data.Bits.$fBitsInteger_$cshift_closure+2;
         const Data.Bits.$fBitsInteger_$cshift_closure+2;
         const Data.Bits.$fBitsInteger_$czeroBits_closure;
         const Data.Bits.$fBitsInteger_$cbit_closure+1;
         const Data.Bits.$fBitsInteger_$csetBit_closure+2;
         const Data.Bits.$fBitsInteger_$cclearBit_closure+2;
         const Data.Bits.$fBitsInteger_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsInteger_$ctestBit_closure+2;
         const Data.Bits.$fBitsInteger_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsInteger_$cbitSize_closure+1;
         const Data.Bits.$fBitsInteger_$cisSigned_closure+1;
         const Data.Bits.$fBitsInteger_$cshiftL_closure+2;
         const Data.Bits.$fBitsInteger_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsInteger_$cshiftR_closure+2;
         const Data.Bits.$fBitsInteger_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsInteger_$crotateL_closure+2;
         const Data.Bits.$fBitsInteger_$crotateR_closure+2;
         const Data.Bits.$fBitsInteger_$cpopCount_closure+1;
         const 0;
 },
 section ""data" . Data.Bits.$fBitsInteger_$cpopCount_closure" {
     Data.Bits.$fBitsInteger_$cpopCount_closure:
         const Data.Bits.$fBitsInteger_$cpopCount_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cpopCount_entry() //  [R2]
         { []
         }
     {offset
       c1Gie: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Gii; else goto c1Gij;
       c1Gii: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$cpopCount_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Gij: // global
           I64[Sp - 8] = block_c1Gic_info;
           R4 = R2;
           R3 = GHC.Num.$fNumInteger_closure;
           R2 = Data.Bits.$fBitsInteger_closure+1;
           Sp = Sp - 8;
           call Data.Bits.$wpopCountDefault_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cpopCount_info" {
     Data.Bits.$fBitsInteger_$cpopCount_info:
         const Data.Bits.$fBitsInteger_$cpopCount_entry;
         const 0;
         const 124554051598;
         const 4294967301;
         const S1D79_srt+136;
 },
 _c1Gic() //  [R1]
         { []
         }
     {offset
       c1Gic: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Gim; else goto c1Gil;
       c1Gim: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1Gil: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gic_info" {
     block_c1Gic_info:
         const _c1Gic;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.728352 UTC

[section ""data" . Data.Bits.toIntegralSized_closure" {
     Data.Bits.toIntegralSized_closure:
         const Data.Bits.toIntegralSized_info;
         const 0;
 },
 sat_s1CWF_entry() //  [R1]
         { []
         }
     {offset
       c1GiN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1GiO; else goto c1GiP;
       c1GiO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1GiP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Real.toInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CWF_info" {
     sat_s1CWF_info:
         const sat_s1CWF_entry;
         const 2;
         const 18;
 },
 y_s1CWC_entry() //  [R1]
         { []
         }
     {offset
       c1GiS: // global
           _s1CWC::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1GiW; else goto c1GiX;
       c1GiX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1GiZ; else goto c1GiY;
       c1GiZ: // global
           HpAlloc = 32;
           goto c1GiW;
       c1GiW: // global
           R1 = _s1CWC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1GiY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1CWC::P64;
           _s1CWw::P64 = P64[_s1CWC::P64 + 16];
           _s1CWx::P64 = P64[_s1CWC::P64 + 24];
           _s1CWA::P64 = P64[_s1CWC::P64 + 32];
           I64[Hp - 24] = sat_s1CWF_info;
           P64[Hp - 8] = _s1CWw::P64;
           P64[Hp] = _s1CWA::P64;
           I64[Sp - 32] = block_c1GiQ_info;
           R2 = _s1CWx::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . y_s1CWC_info" {
     y_s1CWC_info:
         const y_s1CWC_entry;
         const 3;
         const 15;
 },
 _c1GiQ() //  [R1]
         { []
         }
     {offset
       c1GiQ: // global
           I64[Sp] = block_c1GiV_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1GiQ_info" {
     block_c1GiQ_info:
         const _c1GiQ;
         const 1;
         const 30;
 },
 _c1GiV() //  [R1]
         { []
         }
     {offset
       c1GiV: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1GiV_info" {
     block_c1GiV_info:
         const _c1GiV;
         const 1;
         const 30;
 },
 xSigned_s1CWI_entry() //  [R1]
         { []
         }
     {offset
       c1Gjh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1Gji; else goto c1Gjj;
       c1Gji: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Gjj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Bits.isSigned_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . xSigned_s1CWI_info" {
     xSigned_s1CWI_info:
         const xSigned_s1CWI_entry;
         const 2;
         const 18;
 },
 $dReal_s1CWJ_entry() //  [R1]
         { []
         }
     {offset
       c1Gjo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Gjp; else goto c1Gjq;
       c1Gjp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Gjq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dReal_s1CWJ_info" {
     $dReal_s1CWJ_info:
         const $dReal_s1CWJ_entry;
         const 1;
         const 16;
 },
 $dNum_s1CWK_entry() //  [R1]
         { []
         }
     {offset
       c1Gjv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Gjw; else goto c1Gjx;
       c1Gjw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Gjx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1CWK_info" {
     $dNum_s1CWK_info:
         const $dNum_s1CWK_entry;
         const 1;
         const 16;
 },
 $dOrd_s1CWL_entry() //  [R1]
         { []
         }
     {offset
       c1GjC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1GjD; else goto c1GjE;
       c1GjD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1GjE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dOrd_s1CWL_info" {
     $dOrd_s1CWL_info:
         const $dOrd_s1CWL_entry;
         const 1;
         const 16;
 },
 sat_s1CX0_entry() //  [R1]
         { []
         }
     {offset
       c1Gks: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1Gkt; else goto c1Gku;
       c1Gkt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Gku: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Bits.$fBitsInteger3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CX0_info" {
     sat_s1CX0_info:
         const sat_s1CX0_entry;
         const 1;
         const 4294967312;
         const S1D79_srt+48;
 },
 sat_s1CWZ_entry() //  [R1]
         { []
         }
     {offset
       c1Gkz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1GkA; else goto c1GkB;
       c1GkA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1GkB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Bits.bit_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CWZ_info" {
     sat_s1CWZ_info:
         const sat_s1CWZ_entry;
         const 2;
         const 18;
 },
 sat_s1CX1_entry() //  [R1]
         { []
         }
     {offset
       c1GkC: // global
           _s1CX1::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1GkD; else goto c1GkE;
       c1GkE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1GkG; else goto c1GkF;
       c1GkG: // global
           HpAlloc = 56;
           goto c1GkD;
       c1GkD: // global
           R1 = _s1CX1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1GkF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1CX1::P64;
           _s1CWy::P64 = P64[_s1CX1::P64 + 16];
           _s1CWK::P64 = P64[_s1CX1::P64 + 24];
           _s1CWX::P64 = P64[_s1CX1::P64 + 32];
           I64[Hp - 48] = sat_s1CX0_info;
           P64[Hp - 32] = _s1CWK::P64;
           I64[Hp - 24] = sat_s1CWZ_info;
           P64[Hp - 8] = _s1CWy::P64;
           P64[Hp] = _s1CWX::P64;
           R2 = _s1CWK::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CX1_info" {
     sat_s1CX1_info:
         const sat_s1CX1_entry;
         const 3;
         const 4294967311;
         const S1D79_srt+48;
 },
 sat_s1CX8_entry() //  [R1]
         { []
         }
     {offset
       c1GkR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1GkS; else goto c1GkT;
       c1GkS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1GkT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Bits.$fBitsInteger3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CX8_info" {
     sat_s1CX8_info:
         const sat_s1CX8_entry;
         const 1;
         const 4294967312;
         const S1D79_srt+48;
 },
 sat_s1CX6_entry() //  [R1]
         { []
         }
     {offset
       c1Gl5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1Glc; else goto c1Gld;
       c1Glc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Gld: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1Gl2_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1Glh; else goto c1Gl3;
       u1Glh: // global
           call _c1Gl2(R1) args: 0, res: 0, upd: 0;
       c1Gl3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CX6_info" {
     sat_s1CX6_info:
         const sat_s1CX6_entry;
         const 1;
         const 16;
 },
 _c1Gl2() //  [R1]
         { []
         }
     {offset
       c1Gl2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Glg; else goto c1Glf;
       c1Glg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1Glf: // global
           _s1CX5::I64 = I64[R1 + 7] - 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1CX5::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1Gl2_info" {
     block_c1Gl2_info:
         const _c1Gl2;
         const 0;
         const 30;
 },
 sat_s1CX7_entry() //  [R1]
         { []
         }
     {offset
       c1Gli: // global
           _s1CX7::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1Glj; else goto c1Glk;
       c1Glk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1Glm; else goto c1Gll;
       c1Glm: // global
           HpAlloc = 24;
           goto c1Glj;
       c1Glj: // global
           R1 = _s1CX7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Gll: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1CX7::P64;
           _s1CWy::P64 = P64[_s1CX7::P64 + 16];
           _s1CWX::P64 = P64[_s1CX7::P64 + 24];
           I64[Hp - 16] = sat_s1CX6_info;
           P64[Hp] = _s1CWX::P64;
           R2 = _s1CWy::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Bits.bit_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CX7_info" {
     sat_s1CX7_info:
         const sat_s1CX7_entry;
         const 2;
         const 18;
 },
 sat_s1CX9_entry() //  [R1]
         { []
         }
     {offset
       c1Gln: // global
           _s1CX9::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1Glo; else goto c1Glp;
       c1Glp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1Glr; else goto c1Glq;
       c1Glr: // global
           HpAlloc = 56;
           goto c1Glo;
       c1Glo: // global
           R1 = _s1CX9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Glq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1CX9::P64;
           _s1CWy::P64 = P64[_s1CX9::P64 + 16];
           _s1CWK::P64 = P64[_s1CX9::P64 + 24];
           _s1CWX::P64 = P64[_s1CX9::P64 + 32];
           I64[Hp - 48] = sat_s1CX8_info;
           P64[Hp - 32] = _s1CWK::P64;
           I64[Hp - 24] = sat_s1CX7_info;
           P64[Hp - 8] = _s1CWy::P64;
           P64[Hp] = _s1CWX::P64;
           R2 = _s1CWK::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CX9_info" {
     sat_s1CX9_info:
         const sat_s1CX9_entry;
         const 3;
         const 4294967311;
         const S1D79_srt+48;
 },
 sat_s1CYp_entry() //  [R1]
         { []
         }
     {offset
       c1Gmo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1Gmv; else goto c1Gmw;
       c1Gmv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Gmw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1Gml_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1GmA; else goto c1Gmm;
       u1GmA: // global
           call _c1Gml(R1) args: 0, res: 0, upd: 0;
       c1Gmm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CYp_info" {
     sat_s1CYp_info:
         const sat_s1CYp_entry;
         const 1;
         const 16;
 },
 _c1Gml() //  [R1]
         { []
         }
     {offset
       c1Gml: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Gmz; else goto c1Gmy;
       c1Gmz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1Gmy: // global
           _s1CYo::I64 = I64[R1 + 7] - 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1CYo::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1Gml_info" {
     block_c1Gml_info:
         const _c1Gml;
         const 0;
         const 30;
 },
 sat_s1CYq_entry() //  [R1]
         { []
         }
     {offset
       c1GmB: // global
           _s1CYq::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1GmC; else goto c1GmD;
       c1GmD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1GmF; else goto c1GmE;
       c1GmF: // global
           HpAlloc = 24;
           goto c1GmC;
       c1GmC: // global
           R1 = _s1CYq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1GmE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1CYq::P64;
           _s1CWy::P64 = P64[_s1CYq::P64 + 16];
           _s1CYl::P64 = P64[_s1CYq::P64 + 24];
           I64[Hp - 16] = sat_s1CYp_info;
           P64[Hp] = _s1CYl::P64;
           R2 = _s1CWy::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Bits.bit_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CYq_info" {
     sat_s1CYq_info:
         const sat_s1CYq_entry;
         const 2;
         const 18;
 },
 sat_s1CYr_entry() //  [R1]
         { []
         }
     {offset
       c1GmG: // global
           _s1CYr::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1GmH; else goto c1GmI;
       c1GmI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1GmK; else goto c1GmJ;
       c1GmK: // global
           HpAlloc = 32;
           goto c1GmH;
       c1GmH: // global
           R1 = _s1CYr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1GmJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1CYr::P64;
           _s1CWy::P64 = P64[_s1CYr::P64 + 16];
           _s1CWK::P64 = P64[_s1CYr::P64 + 24];
           _s1CYl::P64 = P64[_s1CYr::P64 + 32];
           I64[Hp - 24] = sat_s1CYq_info;
           P64[Hp - 8] = _s1CWy::P64;
           P64[Hp] = _s1CYl::P64;
           R2 = _s1CWK::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CYr_info" {
     sat_s1CYr_info:
         const sat_s1CYr_entry;
         const 3;
         const 15;
 },
 sat_s1CYv_entry() //  [R1]
         { []
         }
     {offset
       c1Gn0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1Gn1; else goto c1Gn2;
       c1Gn1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Gn2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Bits.$fBitsInteger_$czeroBits_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1CYv_info" {
     sat_s1CYv_info:
         const sat_s1CYv_entry;
         const 1;
         const 4294967312;
         const S1D79_srt+120;
 },
 Data.Bits.toIntegralSized_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1Gn3: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c1Gn4; else goto c1Gn5;
       c1Gn4: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.toIntegralSized_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Gn5: // global
           I64[Sp - 48] = block_c1GiB_info;
           _s1CWw::P64 = R2;
           R2 = R4;
           I64[Sp - 64] = stg_ap_p_info;
           P64[Sp - 56] = R6;
           P64[Sp - 40] = _s1CWw::P64;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 64;
           call Data.Bits.bitSizeMaybe_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.toIntegralSized_info" {
     Data.Bits.toIntegralSized_info:
         const Data.Bits.toIntegralSized_entry;
         const 0;
         const 283678294933518;
         const 21474836505;
         const S1D79_srt+48;
 },
 _c1GiB() //  [R1]
         { []
         }
     {offset
       c1GiB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1Gn8; else goto c1Gn7;
       c1Gn8: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Gn7: // global
           I64[Hp - 32] = y_s1CWC_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 40];
           I64[Sp - 8] = block_c1Gj5_info;
           R2 = P64[Sp + 32];
           I64[Sp - 24] = stg_ap_p_info;
           _c1GiF::P64 = Hp - 32;
           P64[Sp - 16] = _c1GiF::P64;
           P64[Sp] = R1;
           P64[Sp + 16] = _c1GiF::P64;
           Sp = Sp - 24;
           call Data.Bits.isSigned_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GiB_info" {
     block_c1GiB_info:
         const _c1GiB;
         const 5;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1Gj5() //  [R1]
         { []
         }
     {offset
       c1Gj5: // global
           I64[Sp] = block_c1Gj9_info;
           R2 = P64[Sp + 40];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 24];
           P64[Sp + 40] = R1;
           Sp = Sp - 16;
           call Data.Bits.bitSizeMaybe_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gj5_info" {
     block_c1Gj5_info:
         const _c1Gj5;
         const 6;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1Gj9() //  [R1]
         { []
         }
     {offset
       c1Gj9: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c1Gnf; else goto c1Gne;
       c1Gnf: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Gne: // global
           I64[Hp - 96] = xSigned_s1CWI_info;
           P64[Hp - 80] = P64[Sp + 32];
           P64[Hp - 72] = P64[Sp + 48];
           I64[Hp - 64] = $dReal_s1CWJ_info;
           P64[Hp - 48] = P64[Sp + 16];
           I64[Hp - 40] = $dNum_s1CWK_info;
           _c1Gjk::P64 = Hp - 64;
           P64[Hp - 24] = _c1Gjk::P64;
           I64[Hp - 16] = $dOrd_s1CWL_info;
           P64[Hp] = _c1Gjk::P64;
           I64[Sp - 24] = block_c1Gnc_info;
           _s1CWH::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _s1CWH::P64;
           P64[Sp] = Hp - 40;
           P64[Sp + 16] = Hp - 96;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1GCz; else goto c1GzI;
       u1GCz: // global
           call _c1Gnc(R1) args: 0, res: 0, upd: 0;
       c1GzI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gj9_info" {
     block_c1Gj9_info:
         const _c1Gj9;
         const 6;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1Gnc() //  [R1]
         { []
         }
     {offset
       c1Gnc: // global
           _s1CWH::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c1GzP; else goto c1GA5;
       c1GzP: // global
           I64[Sp] = block_c1GzM_info;
           R1 = _s1CWH::P64;
           if (R1 & 7 != 0) goto u1GCJ; else goto c1GzQ;
       u1GCJ: // global
           call _c1GzM(R1) args: 0, res: 0, upd: 0;
       c1GzQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1GA5: // global
           I64[Sp - 8] = block_c1GA3_info;
           _s1CZb::P64 = P64[R1 + 6];
           R1 = _s1CWH::P64;
           P64[Sp] = _s1CZb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GCK; else goto c1GA6;
       u1GCK: // global
           call _c1GA3(R1) args: 0, res: 0, upd: 0;
       c1GA6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gnc_info" {
     block_c1Gnc_info:
         const _c1Gnc;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1GzM() //  [R1]
         { []
         }
     {offset
       c1GzM: // global
           if (R1 & 7 == 1) goto u1GBu; else goto u1GBv;
       u1GBu: // global
           Sp = Sp + 8;
           call _s1CZ4() args: 0, res: 0, upd: 0;
       u1GBv: // global
           Sp = Sp + 8;
           call _s1CY9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1GzM_info" {
     block_c1GzM_info:
         const _c1GzM;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1GA3() //  [R1]
         { []
         }
     {offset
       c1GA3: // global
           if (R1 & 7 == 1) goto u1GBr; else goto c1GAm;
       u1GBr: // global
           Sp = Sp + 16;
           call _s1CY9() args: 0, res: 0, upd: 0;
       c1GAm: // global
           I64[Sp] = block_c1GAf_info;
           _s1CZd::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1CZd::P64;
           if (R1 & 7 != 0) goto u1GEp; else goto c1GAg;
       u1GEp: // global
           call _c1GAf(R1) args: 0, res: 0, upd: 0;
       c1GAg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GA3_info" {
     block_c1GA3_info:
         const _c1GA3;
         const 10;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1GAf() //  [R1]
         { []
         }
     {offset
       c1GAf: // global
           I64[Sp] = block_c1GAk_info;
           _s1CZf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CZf::I64;
           if (R1 & 7 != 0) goto u1GEr; else goto c1GAo;
       u1GEr: // global
           call _c1GAk(R1) args: 0, res: 0, upd: 0;
       c1GAo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GAf_info" {
     block_c1GAf_info:
         const _c1GAf;
         const 10;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1GAk() //  [R1]
         { []
         }
     {offset
       c1GAk: // global
           if (I64[Sp + 8] == I64[R1 + 7]) goto u1GBs; else goto u1GBt;
       u1GBs: // global
           Sp = Sp + 16;
           call _s1CZ4() args: 0, res: 0, upd: 0;
       u1GBt: // global
           Sp = Sp + 16;
           call _s1CY9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1GAk_info" {
     block_c1GAk_info:
         const _c1GAk;
         const 74;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _s1CZ4() //  []
         { []
         }
     {offset
       s1CZ4: // global
           I64[Sp - 8] = block_c1Gz7_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GEK; else goto c1Gz9;
       u1GEK: // global
           call _c1Gz7(R1) args: 0, res: 0, upd: 0;
       c1Gz9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Gz7() //  [R1]
         { []
         }
     {offset
       c1Gz7: // global
           _s1CWG::P64 = P64[Sp + 64];
           if (R1 & 7 == 1) goto c1Gzg; else goto c1Gzw;
       c1Gzg: // global
           I64[Sp] = block_c1Gzd_info;
           R1 = _s1CWG::P64;
           if (R1 & 7 != 0) goto u1GEh; else goto c1Gzh;
       u1GEh: // global
           call _c1Gzd(R1) args: 0, res: 0, upd: 0;
       c1Gzh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1Gzw: // global
           I64[Sp] = block_c1Gzu_info;
           R1 = _s1CWG::P64;
           if (R1 & 7 != 0) goto u1GEi; else goto c1Gzx;
       u1GEi: // global
           call _c1Gzu(R1) args: 0, res: 0, upd: 0;
       c1Gzx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gz7_info" {
     block_c1Gz7_info:
         const _c1Gz7;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1Gzd() //  [R1]
         { []
         }
     {offset
       c1Gzd: // global
           if (R1 & 7 == 1) goto u1GBy; else goto u1GBz;
       u1GBy: // global
           Sp = Sp + 8;
           call _s1CWM() args: 0, res: 0, upd: 0;
       u1GBz: // global
           Sp = Sp + 8;
           call _s1CY9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Gzd_info" {
     block_c1Gzd_info:
         const _c1Gzd;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1Gzu() //  [R1]
         { []
         }
     {offset
       c1Gzu: // global
           if (R1 & 7 == 1) goto u1GBw; else goto u1GBx;
       u1GBw: // global
           Sp = Sp + 8;
           call _s1CY9() args: 0, res: 0, upd: 0;
       u1GBx: // global
           Sp = Sp + 8;
           call _s1CWM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Gzu_info" {
     block_c1Gzu_info:
         const _c1Gzu;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _s1CY9() //  []
         { []
         }
     {offset
       s1CY9: // global
           I64[Sp - 8] = block_c1GuC_info;
           R1 = P64[Sp + 56];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GED; else goto c1GyH;
       u1GED: // global
           call _c1GuC(R1) args: 0, res: 0, upd: 0;
       c1GyH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1GuC() //  [R1]
         { []
         }
     {offset
       c1GuC: // global
           if (R1 & 7 == 1) goto u1GBA; else goto c1GyS;
       u1GBA: // global
           Sp = Sp + 8;
           call _s1CYb() args: 0, res: 0, upd: 0;
       c1GyS: // global
           I64[Sp] = block_c1GyQ_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u1GDF; else goto c1GyT;
       u1GDF: // global
           call _c1GyQ(R1) args: 0, res: 0, upd: 0;
       c1GyT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GuC_info" {
     block_c1GuC_info:
         const _c1GuC;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1GyQ() //  [R1]
         { []
         }
     {offset
       c1GyQ: // global
           if (R1 & 7 == 1) goto u1GBB; else goto u1GBC;
       u1GBB: // global
           Sp = Sp + 8;
           call _s1CWM() args: 0, res: 0, upd: 0;
       u1GBC: // global
           Sp = Sp + 8;
           call _s1CYb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1GyQ_info" {
     block_c1GyQ_info:
         const _c1GyQ;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _s1CYb() //  []
         { []
         }
     {offset
       s1CYb: // global
           I64[Sp - 8] = block_c1GuE_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GEE; else goto c1Gy8;
       u1GEE: // global
           call _c1GuE(R1) args: 0, res: 0, upd: 0;
       c1Gy8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1GuE() //  [R1]
         { []
         }
     {offset
       c1GuE: // global
           if (R1 & 7 == 1) goto c1Gyf; else goto u1GBD;
       c1Gyf: // global
           I64[Sp] = block_c1Gyc_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto u1GDH; else goto c1Gyg;
       u1GDH: // global
           call _c1Gyc(R1) args: 0, res: 0, upd: 0;
       c1Gyg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u1GBD: // global
           Sp = Sp + 8;
           call _s1CYd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1GuE_info" {
     block_c1GuE_info:
         const _c1GuE;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1Gyc() //  [R1]
         { []
         }
     {offset
       c1Gyc: // global
           if (R1 & 7 == 1) goto c1Gyn; else goto u1GBE;
       c1Gyn: // global
           I64[Sp] = block_c1Gyk_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u1GEb; else goto c1Gyo;
       u1GEb: // global
           call _c1Gyk(R1) args: 0, res: 0, upd: 0;
       c1Gyo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u1GBE: // global
           Sp = Sp + 8;
           call _s1CYd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Gyc_info" {
     block_c1Gyc_info:
         const _c1Gyc;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1Gyk() //  [R1]
         { []
         }
     {offset
       c1Gyk: // global
           if (R1 & 7 == 1) goto u1GBF; else goto u1GBG;
       u1GBF: // global
           Sp = Sp + 8;
           call _s1CWM() args: 0, res: 0, upd: 0;
       u1GBG: // global
           Sp = Sp + 8;
           call _s1CYd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Gyk_info" {
     block_c1Gyk_info:
         const _c1Gyk;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _s1CYd() //  []
         { []
         }
     {offset
       s1CYd: // global
           I64[Sp - 8] = block_c1GuK_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GEF; else goto c1Gxz;
       u1GEF: // global
           call _c1GuK(R1) args: 0, res: 0, upd: 0;
       c1Gxz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1GuK() //  [R1]
         { []
         }
     {offset
       c1GuK: // global
           _s1CWG::P64 = P64[Sp + 64];
           if (R1 & 7 == 1) goto c1GxG; else goto c1GxW;
       c1GxG: // global
           I64[Sp] = block_c1GxD_info;
           R1 = _s1CWG::P64;
           if (R1 & 7 != 0) goto u1GDJ; else goto c1GxH;
       u1GDJ: // global
           call _c1GxD(R1) args: 0, res: 0, upd: 0;
       c1GxH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1GxW: // global
           I64[Sp] = block_c1GxU_info;
           R1 = _s1CWG::P64;
           if (R1 & 7 != 0) goto u1GDK; else goto c1GxX;
       u1GDK: // global
           call _c1GxU(R1) args: 0, res: 0, upd: 0;
       c1GxX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GuK_info" {
     block_c1GuK_info:
         const _c1GuK;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1GxD() //  [R1]
         { []
         }
     {offset
       c1GxD: // global
           if (R1 & 7 == 1) goto u1GBJ; else goto u1GBK;
       u1GBJ: // global
           Sp = Sp + 8;
           call _s1CYK() args: 0, res: 0, upd: 0;
       u1GBK: // global
           Sp = Sp + 8;
           call _s1CYx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1GxD_info" {
     block_c1GxD_info:
         const _c1GxD;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1GxU() //  [R1]
         { []
         }
     {offset
       c1GxU: // global
           if (R1 & 7 == 1) goto u1GBH; else goto u1GBI;
       u1GBH: // global
           Sp = Sp + 8;
           call _s1CYx() args: 0, res: 0, upd: 0;
       u1GBI: // global
           Sp = Sp + 8;
           call _s1CYK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1GxU_info" {
     block_c1GxU_info:
         const _c1GxU;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _s1CYK() //  []
         { []
         }
     {offset
       s1CYK: // global
           I64[Sp - 8] = block_c1GwT_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GEJ; else goto c1GwV;
       u1GEJ: // global
           call _c1GwT(R1) args: 0, res: 0, upd: 0;
       c1GwV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1GwT() //  [R1]
         { []
         }
     {offset
       c1GwT: // global
           if (R1 & 7 == 1) goto u1GBL; else goto c1Gx6;
       u1GBL: // global
           Sp = Sp + 8;
           call _s1CYx() args: 0, res: 0, upd: 0;
       c1Gx6: // global
           I64[Sp - 8] = block_c1Gx4_info;
           _s1CYM::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1CYM::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GE0; else goto c1Gx7;
       u1GE0: // global
           call _c1Gx4(R1) args: 0, res: 0, upd: 0;
       c1Gx7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GwT_info" {
     block_c1GwT_info:
         const _c1GwT;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1Gx4() //  [R1]
         { []
         }
     {offset
       c1Gx4: // global
           if (R1 & 7 == 1) goto u1GBM; else goto c1Gxn;
       u1GBM: // global
           Sp = Sp + 16;
           call _s1CYx() args: 0, res: 0, upd: 0;
       c1Gxn: // global
           I64[Sp] = block_c1Gxg_info;
           _s1CYO::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1CYO::P64;
           if (R1 & 7 != 0) goto u1GE2; else goto c1Gxh;
       u1GE2: // global
           call _c1Gxg(R1) args: 0, res: 0, upd: 0;
       c1Gxh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gx4_info" {
     block_c1Gx4_info:
         const _c1Gx4;
         const 10;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _s1CYx() //  []
         { []
         }
     {offset
       s1CYx: // global
           I64[Sp - 8] = block_c1GvM_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GEI; else goto c1GvO;
       u1GEI: // global
           call _c1GvM(R1) args: 0, res: 0, upd: 0;
       c1GvO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1GvM() //  [R1]
         { []
         }
     {offset
       c1GvM: // global
           if (R1 & 7 == 1) goto c1GvV; else goto u1GBP;
       c1GvV: // global
           I64[Sp] = block_c1GvS_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto u1GDP; else goto c1GvW;
       u1GDP: // global
           call _c1GvS(R1) args: 0, res: 0, upd: 0;
       c1GvW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u1GBP: // global
           Sp = Sp + 8;
           call _s1CYf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1GvM_info" {
     block_c1GvM_info:
         const _c1GvM;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1GvS() //  [R1]
         { []
         }
     {offset
       c1GvS: // global
           if (R1 & 7 == 1) goto u1GBQ; else goto c1Gw7;
       u1GBQ: // global
           Sp = Sp + 8;
           call _s1CYf() args: 0, res: 0, upd: 0;
       c1Gw7: // global
           I64[Sp] = block_c1Gw5_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto u1GDR; else goto c1Gw8;
       u1GDR: // global
           call _c1Gw5(R1) args: 0, res: 0, upd: 0;
       c1Gw8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GvS_info" {
     block_c1GvS_info:
         const _c1GvS;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1Gw5() //  [R1]
         { []
         }
     {offset
       c1Gw5: // global
           if (R1 & 7 == 1) goto u1GBR; else goto c1Gwj;
       u1GBR: // global
           Sp = Sp + 8;
           call _s1CYf() args: 0, res: 0, upd: 0;
       c1Gwj: // global
           I64[Sp - 8] = block_c1Gwh_info;
           _s1CYC::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1CYC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GDT; else goto c1Gwk;
       u1GDT: // global
           call _c1Gwh(R1) args: 0, res: 0, upd: 0;
       c1Gwk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gw5_info" {
     block_c1Gw5_info:
         const _c1Gw5;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1Gwh() //  [R1]
         { []
         }
     {offset
       c1Gwh: // global
           if (R1 & 7 == 1) goto u1GBS; else goto c1GwA;
       u1GBS: // global
           Sp = Sp + 16;
           call _s1CYf() args: 0, res: 0, upd: 0;
       c1GwA: // global
           I64[Sp] = block_c1Gwt_info;
           _s1CYE::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1CYE::P64;
           if (R1 & 7 != 0) goto u1GDV; else goto c1Gwu;
       u1GDV: // global
           call _c1Gwt(R1) args: 0, res: 0, upd: 0;
       c1Gwu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gwh_info" {
     block_c1Gwh_info:
         const _c1Gwh;
         const 10;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1Gwt() //  [R1]
         { []
         }
     {offset
       c1Gwt: // global
           I64[Sp] = block_c1Gwy_info;
           _s1CYG::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CYG::I64;
           if (R1 & 7 != 0) goto u1GDX; else goto c1GwC;
       u1GDX: // global
           call _c1Gwy(R1) args: 0, res: 0, upd: 0;
       c1GwC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gwt_info" {
     block_c1Gwt_info:
         const _c1Gwt;
         const 10;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1Gwy() //  [R1]
         { []
         }
     {offset
       c1Gwy: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u1GBU; else goto u1GBT;
       u1GBU: // global
           Sp = Sp + 16;
           call _s1CYf() args: 0, res: 0, upd: 0;
       u1GBT: // global
           Sp = Sp + 16;
           call _s1CWM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Gwy_info" {
     block_c1Gwy_info:
         const _c1Gwy;
         const 74;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1Gxg() //  [R1]
         { []
         }
     {offset
       c1Gxg: // global
           I64[Sp] = block_c1Gxl_info;
           _s1CYQ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CYQ::I64;
           if (R1 & 7 != 0) goto u1GE4; else goto c1Gxp;
       u1GE4: // global
           call _c1Gxl(R1) args: 0, res: 0, upd: 0;
       c1Gxp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gxg_info" {
     block_c1Gxg_info:
         const _c1Gxg;
         const 10;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1Gxl() //  [R1]
         { []
         }
     {offset
       c1Gxl: // global
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u1GBO; else goto u1GBN;
       u1GBO: // global
           Sp = Sp + 16;
           call _s1CYf() args: 0, res: 0, upd: 0;
       u1GBN: // global
           Sp = Sp + 16;
           call _s1CWM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Gxl_info" {
     block_c1Gxl_info:
         const _c1Gxl;
         const 74;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _s1CYf() //  []
         { []
         }
     {offset
       s1CYf: // global
           I64[Sp - 8] = block_c1GmL_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GEG; else goto c1GmM;
       u1GEG: // global
           call _c1GmL(R1) args: 0, res: 0, upd: 0;
       c1GmM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1GmL() //  [R1]
         { []
         }
     {offset
       c1GmL: // global
           if (R1 & 7 == 1) goto u1GBV; else goto c1Gvo;
       u1GBV: // global
           Sp = Sp + 8;
           call _s1CYg() args: 0, res: 0, upd: 0;
       c1Gvo: // global
           I64[Sp] = block_c1GmR_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto u1GCG; else goto c1GmS;
       u1GCG: // global
           call _c1GmR(R1) args: 0, res: 0, upd: 0;
       c1GmS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GmL_info" {
     block_c1GmL_info:
         const _c1GmL;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1GmR() //  [R1]
         { []
         }
     {offset
       c1GmR: // global
           if (R1 & 7 == 1) goto c1Gvr; else goto u1GBW;
       c1Gvr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1Gvu; else goto c1Gvt;
       c1Gvu: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Gvt: // global
           I64[Hp - 16] = sat_s1CYv_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_c1Gvp_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = P64[Sp + 72];
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
       u1GBW: // global
           Sp = Sp + 8;
           call _s1CYg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1GmR_info" {
     block_c1GmR_info:
         const _c1GmR;
         const 9;
         const 2203318222878;
         const S1D79_srt+48;
 },
 _c1Gvp() //  [R1]
         { []
         }
     {offset
       c1Gvp: // global
           if (R1 & 7 == 1) goto u1GBX; else goto u1GBY;
       u1GBX: // global
           Sp = Sp + 80;
           call _c1GvA() args: 0, res: 0, upd: 0;
       u1GBY: // global
           Sp = Sp + 8;
           call _s1CWM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Gvp_info" {
     block_c1Gvp_info:
         const _c1Gvp;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _s1CYg() //  []
         { []
         }
     {offset
       s1CYg: // global
           I64[Sp - 8] = block_c1GlR_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GEH; else goto c1GlS;
       u1GEH: // global
           call _c1GlR(R1) args: 0, res: 0, upd: 0;
       c1GlS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1GlR() //  [R1]
         { []
         }
     {offset
       c1GlR: // global
           if (R1 & 7 == 1) goto u1GBZ; else goto c1GuT;
       u1GBZ: // global
           Sp = Sp + 8;
           call _s1CWM() args: 0, res: 0, upd: 0;
       c1GuT: // global
           I64[Sp] = block_c1GlX_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto u1GCB; else goto c1GlY;
       u1GCB: // global
           call _c1GlX(R1) args: 0, res: 0, upd: 0;
       c1GlY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GlR_info" {
     block_c1GlR_info:
         const _c1GlR;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1GlX() //  [R1]
         { []
         }
     {offset
       c1GlX: // global
           if (R1 & 7 == 1) goto u1GC0; else goto c1GuZ;
       u1GC0: // global
           Sp = Sp + 8;
           call _s1CWM() args: 0, res: 0, upd: 0;
       c1GuZ: // global
           I64[Sp] = block_c1Gm3_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u1GCD; else goto c1Gm4;
       u1GCD: // global
           call _c1Gm3(R1) args: 0, res: 0, upd: 0;
       c1Gm4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GlX_info" {
     block_c1GlX_info:
         const _c1GlX;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Gm3() //  [R1]
         { []
         }
     {offset
       c1Gm3: // global
           if (R1 & 7 == 1) goto u1GC1; else goto c1Gv5;
       u1GC1: // global
           Sp = Sp + 8;
           call _s1CWM() args: 0, res: 0, upd: 0;
       c1Gv5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1Gv8; else goto c1Gv7;
       c1Gv8: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Gv7: // global
           _s1CYl::P64 = P64[R1 + 6];
           I64[Hp - 32] = sat_s1CYr_info;
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s1CYl::P64;
           I64[Sp] = block_c1Gv4_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = P64[Sp + 72];
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gm3_info" {
     block_c1Gm3_info:
         const _c1Gm3;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Gv4() //  [R1]
         { []
         }
     {offset
       c1Gv4: // global
           if (R1 & 7 == 1) goto u1GC2; else goto u1GC3;
       u1GC2: // global
           Sp = Sp + 80;
           call _c1GvA() args: 0, res: 0, upd: 0;
       u1GC3: // global
           Sp = Sp + 8;
           call _s1CWM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Gv4_info" {
     block_c1Gv4_info:
         const _c1Gv4;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _s1CWM() //  []
         { []
         }
     {offset
       s1CWM: // global
           I64[Sp - 8] = block_c1Gni_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GEu; else goto c1GtM;
       u1GEu: // global
           call _c1Gni(R1) args: 0, res: 0, upd: 0;
       c1GtM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Gni() //  [R1]
         { []
         }
     {offset
       c1Gni: // global
           _s1CWH::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c1GtT; else goto c1Gu9;
       c1GtT: // global
           I64[Sp] = block_c1GtQ_info;
           R1 = _s1CWH::P64;
           if (R1 & 7 != 0) goto u1GCL; else goto c1GtU;
       u1GCL: // global
           call _c1GtQ(R1) args: 0, res: 0, upd: 0;
       c1GtU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1Gu9: // global
           I64[Sp - 8] = block_c1Gu7_info;
           _s1CY1::P64 = P64[R1 + 6];
           R1 = _s1CWH::P64;
           P64[Sp] = _s1CY1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GCM; else goto c1Gua;
       u1GCM: // global
           call _c1Gu7(R1) args: 0, res: 0, upd: 0;
       c1Gua: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gni_info" {
     block_c1Gni_info:
         const _c1Gni;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1GtQ() //  [R1]
         { []
         }
     {offset
       c1GtQ: // global
           if (R1 & 7 == 1) goto u1GC7; else goto u1GC8;
       u1GC7: // global
           Sp = Sp + 8;
           call _s1CXU() args: 0, res: 0, upd: 0;
       u1GC8: // global
           Sp = Sp + 8;
           call _s1CWN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1GtQ_info" {
     block_c1GtQ_info:
         const _c1GtQ;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Gu7() //  [R1]
         { []
         }
     {offset
       c1Gu7: // global
           if (R1 & 7 == 1) goto u1GC4; else goto c1Guq;
       u1GC4: // global
           Sp = Sp + 16;
           call _s1CWN() args: 0, res: 0, upd: 0;
       c1Guq: // global
           I64[Sp] = block_c1Guj_info;
           _s1CY3::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1CY3::P64;
           if (R1 & 7 != 0) goto u1GDA; else goto c1Guk;
       u1GDA: // global
           call _c1Guj(R1) args: 0, res: 0, upd: 0;
       c1Guk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gu7_info" {
     block_c1Gu7_info:
         const _c1Gu7;
         const 10;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Guj() //  [R1]
         { []
         }
     {offset
       c1Guj: // global
           I64[Sp] = block_c1Guo_info;
           _s1CY5::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CY5::I64;
           if (R1 & 7 != 0) goto u1GDC; else goto c1Gus;
       u1GDC: // global
           call _c1Guo(R1) args: 0, res: 0, upd: 0;
       c1Gus: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Guj_info" {
     block_c1Guj_info:
         const _c1Guj;
         const 10;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Guo() //  [R1]
         { []
         }
     {offset
       c1Guo: // global
           if (I64[Sp + 8] == I64[R1 + 7]) goto u1GC5; else goto u1GC6;
       u1GC5: // global
           Sp = Sp + 16;
           call _s1CXU() args: 0, res: 0, upd: 0;
       u1GC6: // global
           Sp = Sp + 16;
           call _s1CWN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Guo_info" {
     block_c1Guo_info:
         const _c1Guo;
         const 74;
         const 4294967326;
         const S1D79_srt+48;
 },
 _s1CXU() //  []
         { []
         }
     {offset
       s1CXU: // global
           I64[Sp - 8] = block_c1Gt5_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GEC; else goto c1Gt7;
       u1GEC: // global
           call _c1Gt5(R1) args: 0, res: 0, upd: 0;
       c1Gt7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Gt5() //  [R1]
         { []
         }
     {offset
       c1Gt5: // global
           _s1CWG::P64 = P64[Sp + 64];
           if (R1 & 7 == 1) goto c1Gte; else goto c1Gtx;
       c1Gte: // global
           I64[Sp] = block_c1Gtb_info;
           R1 = _s1CWG::P64;
           if (R1 & 7 != 0) goto u1GDu; else goto c1Gtf;
       u1GDu: // global
           call _c1Gtb(R1) args: 0, res: 0, upd: 0;
       c1Gtf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1Gtx: // global
           I64[Sp] = block_c1Gtv_info;
           R1 = _s1CWG::P64;
           if (R1 & 7 != 0) goto u1GDv; else goto c1Gty;
       u1GDv: // global
           call _c1Gtv(R1) args: 0, res: 0, upd: 0;
       c1Gty: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gt5_info" {
     block_c1Gt5_info:
         const _c1Gt5;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Gtb() //  [R1]
         { []
         }
     {offset
       c1Gtb: // global
           if (R1 & 7 == 1) goto c1Gtl; else goto u1GCa;
       c1Gtl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Gto; else goto c1Gtn;
       c1Gto: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Gtn: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 6;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u1GCa: // global
           Sp = Sp + 8;
           call _s1CWN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Gtb_info" {
     block_c1Gtb_info:
         const _c1Gtb;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Gtv() //  [R1]
         { []
         }
     {offset
       c1Gtv: // global
           if (R1 & 7 == 1) goto u1GC9; else goto c1GtI;
       u1GC9: // global
           Sp = Sp + 8;
           call _s1CWN() args: 0, res: 0, upd: 0;
       c1GtI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1GtL; else goto c1GtK;
       c1GtL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1GtK: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 6;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gtv_info" {
     block_c1Gtv_info:
         const _c1Gtv;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _s1CWN() //  []
         { []
         }
     {offset
       s1CWN: // global
           I64[Sp - 8] = block_c1Gnk_info;
           R1 = P64[Sp + 56];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GEv; else goto c1GsC;
       u1GEv: // global
           call _c1Gnk(R1) args: 0, res: 0, upd: 0;
       c1GsC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Gnk() //  [R1]
         { []
         }
     {offset
       c1Gnk: // global
           if (R1 & 7 == 1) goto u1GCb; else goto c1GsN;
       u1GCb: // global
           Sp = Sp + 8;
           call _s1CWP() args: 0, res: 0, upd: 0;
       c1GsN: // global
           I64[Sp] = block_c1GsL_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u1GCN; else goto c1GsO;
       u1GCN: // global
           call _c1GsL(R1) args: 0, res: 0, upd: 0;
       c1GsO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gnk_info" {
     block_c1Gnk_info:
         const _c1Gnk;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1GsL() //  [R1]
         { []
         }
     {offset
       c1GsL: // global
           if (R1 & 7 == 1) goto c1GsU; else goto u1GCc;
       c1GsU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1GsX; else goto c1GsW;
       c1GsX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1GsW: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 6;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u1GCc: // global
           Sp = Sp + 8;
           call _s1CWP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1GsL_info" {
     block_c1GsL_info:
         const _c1GsL;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _s1CWP() //  []
         { []
         }
     {offset
       s1CWP: // global
           I64[Sp - 8] = block_c1Gnm_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GEw; else goto c1Gs0;
       u1GEw: // global
           call _c1Gnm(R1) args: 0, res: 0, upd: 0;
       c1Gs0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Gnm() //  [R1]
         { []
         }
     {offset
       c1Gnm: // global
           if (R1 & 7 == 1) goto c1Gs7; else goto u1GCd;
       c1Gs7: // global
           I64[Sp] = block_c1Gs4_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto u1GCP; else goto c1Gs8;
       u1GCP: // global
           call _c1Gs4(R1) args: 0, res: 0, upd: 0;
       c1Gs8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u1GCd: // global
           Sp = Sp + 8;
           call _s1CWR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Gnm_info" {
     block_c1Gnm_info:
         const _c1Gnm;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Gs4() //  [R1]
         { []
         }
     {offset
       c1Gs4: // global
           if (R1 & 7 == 1) goto c1Gsf; else goto u1GCe;
       c1Gsf: // global
           I64[Sp] = block_c1Gsc_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u1GDq; else goto c1Gsg;
       u1GDq: // global
           call _c1Gsc(R1) args: 0, res: 0, upd: 0;
       c1Gsg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u1GCe: // global
           Sp = Sp + 8;
           call _s1CWR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Gs4_info" {
     block_c1Gs4_info:
         const _c1Gs4;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Gsc() //  [R1]
         { []
         }
     {offset
       c1Gsc: // global
           if (R1 & 7 == 1) goto c1Gsm; else goto u1GCf;
       c1Gsm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Gsp; else goto c1Gso;
       c1Gsp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Gso: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 6;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u1GCf: // global
           Sp = Sp + 8;
           call _s1CWR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Gsc_info" {
     block_c1Gsc_info:
         const _c1Gsc;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _s1CWR() //  []
         { []
         }
     {offset
       s1CWR: // global
           I64[Sp - 8] = block_c1Gns_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GEx; else goto c1Grr;
       u1GEx: // global
           call _c1Gns(R1) args: 0, res: 0, upd: 0;
       c1Grr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Gns() //  [R1]
         { []
         }
     {offset
       c1Gns: // global
           _s1CWG::P64 = P64[Sp + 64];
           if (R1 & 7 == 1) goto c1Gry; else goto c1GrO;
       c1Gry: // global
           I64[Sp] = block_c1Grv_info;
           R1 = _s1CWG::P64;
           if (R1 & 7 != 0) goto u1GCR; else goto c1Grz;
       u1GCR: // global
           call _c1Grv(R1) args: 0, res: 0, upd: 0;
       c1Grz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1GrO: // global
           I64[Sp] = block_c1GrM_info;
           R1 = _s1CWG::P64;
           if (R1 & 7 != 0) goto u1GCS; else goto c1GrP;
       u1GCS: // global
           call _c1GrM(R1) args: 0, res: 0, upd: 0;
       c1GrP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gns_info" {
     block_c1Gns_info:
         const _c1Gns;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Grv() //  [R1]
         { []
         }
     {offset
       c1Grv: // global
           if (R1 & 7 == 1) goto u1GCi; else goto u1GCj;
       u1GCi: // global
           Sp = Sp + 8;
           call _s1CXA() args: 0, res: 0, upd: 0;
       u1GCj: // global
           Sp = Sp + 8;
           call _s1CXn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Grv_info" {
     block_c1Grv_info:
         const _c1Grv;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1GrM() //  [R1]
         { []
         }
     {offset
       c1GrM: // global
           if (R1 & 7 == 1) goto u1GCg; else goto u1GCh;
       u1GCg: // global
           Sp = Sp + 8;
           call _s1CXn() args: 0, res: 0, upd: 0;
       u1GCh: // global
           Sp = Sp + 8;
           call _s1CXA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1GrM_info" {
     block_c1GrM_info:
         const _c1GrM;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _s1CXA() //  []
         { []
         }
     {offset
       s1CXA: // global
           I64[Sp - 8] = block_c1GqG_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GEB; else goto c1GqI;
       u1GEB: // global
           call _c1GqG(R1) args: 0, res: 0, upd: 0;
       c1GqI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1GqG() //  [R1]
         { []
         }
     {offset
       c1GqG: // global
           if (R1 & 7 == 1) goto u1GCk; else goto c1GqT;
       u1GCk: // global
           Sp = Sp + 8;
           call _s1CXn() args: 0, res: 0, upd: 0;
       c1GqT: // global
           I64[Sp - 8] = block_c1GqR_info;
           _s1CXC::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1CXC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GDf; else goto c1GqU;
       u1GDf: // global
           call _c1GqR(R1) args: 0, res: 0, upd: 0;
       c1GqU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GqG_info" {
     block_c1GqG_info:
         const _c1GqG;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1GqR() //  [R1]
         { []
         }
     {offset
       c1GqR: // global
           if (R1 & 7 == 1) goto u1GCl; else goto c1Gra;
       u1GCl: // global
           Sp = Sp + 16;
           call _s1CXn() args: 0, res: 0, upd: 0;
       c1Gra: // global
           I64[Sp] = block_c1Gr3_info;
           _s1CXE::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1CXE::P64;
           if (R1 & 7 != 0) goto u1GDh; else goto c1Gr4;
       u1GDh: // global
           call _c1Gr3(R1) args: 0, res: 0, upd: 0;
       c1Gr4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GqR_info" {
     block_c1GqR_info:
         const _c1GqR;
         const 10;
         const 4294967326;
         const S1D79_srt+48;
 },
 _s1CXn() //  []
         { []
         }
     {offset
       s1CXn: // global
           I64[Sp - 8] = block_c1Gpu_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GEA; else goto c1Gpw;
       u1GEA: // global
           call _c1Gpu(R1) args: 0, res: 0, upd: 0;
       c1Gpw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Gpu() //  [R1]
         { []
         }
     {offset
       c1Gpu: // global
           if (R1 & 7 == 1) goto c1GpD; else goto u1GCn;
       c1GpD: // global
           I64[Sp] = block_c1GpA_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto u1GD5; else goto c1GpE;
       u1GD5: // global
           call _c1GpA(R1) args: 0, res: 0, upd: 0;
       c1GpE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u1GCn: // global
           Sp = Sp + 8;
           call _s1CWT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Gpu_info" {
     block_c1Gpu_info:
         const _c1Gpu;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1GpA() //  [R1]
         { []
         }
     {offset
       c1GpA: // global
           if (R1 & 7 == 1) goto u1GCo; else goto c1GpP;
       u1GCo: // global
           Sp = Sp + 8;
           call _s1CWT() args: 0, res: 0, upd: 0;
       c1GpP: // global
           I64[Sp] = block_c1GpN_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto u1GD7; else goto c1GpQ;
       u1GD7: // global
           call _c1GpN(R1) args: 0, res: 0, upd: 0;
       c1GpQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GpA_info" {
     block_c1GpA_info:
         const _c1GpA;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1GpN() //  [R1]
         { []
         }
     {offset
       c1GpN: // global
           if (R1 & 7 == 1) goto u1GCp; else goto c1Gq1;
       u1GCp: // global
           Sp = Sp + 8;
           call _s1CWT() args: 0, res: 0, upd: 0;
       c1Gq1: // global
           I64[Sp - 8] = block_c1GpZ_info;
           _s1CXs::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1CXs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GD9; else goto c1Gq2;
       u1GD9: // global
           call _c1GpZ(R1) args: 0, res: 0, upd: 0;
       c1Gq2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GpN_info" {
     block_c1GpN_info:
         const _c1GpN;
         const 9;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1GpZ() //  [R1]
         { []
         }
     {offset
       c1GpZ: // global
           if (R1 & 7 == 1) goto u1GCq; else goto c1Gqi;
       u1GCq: // global
           Sp = Sp + 16;
           call _s1CWT() args: 0, res: 0, upd: 0;
       c1Gqi: // global
           I64[Sp] = block_c1Gqb_info;
           _s1CXu::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1CXu::P64;
           if (R1 & 7 != 0) goto u1GDb; else goto c1Gqc;
       u1GDb: // global
           call _c1Gqb(R1) args: 0, res: 0, upd: 0;
       c1Gqc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GpZ_info" {
     block_c1GpZ_info:
         const _c1GpZ;
         const 10;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Gqb() //  [R1]
         { []
         }
     {offset
       c1Gqb: // global
           I64[Sp] = block_c1Gqg_info;
           _s1CXw::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CXw::I64;
           if (R1 & 7 != 0) goto u1GDd; else goto c1Gqk;
       u1GDd: // global
           call _c1Gqg(R1) args: 0, res: 0, upd: 0;
       c1Gqk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gqb_info" {
     block_c1Gqb_info:
         const _c1Gqb;
         const 10;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Gqg() //  [R1]
         { []
         }
     {offset
       c1Gqg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Gqq; else goto c1Gqp;
       c1Gqq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Gqp: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u1GCr; else goto c1Gqy;
       u1GCr: // global
           Sp = Sp + 16;
           call _c1Grm() args: 0, res: 0, upd: 0;
       c1Gqy: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 56];
           R1 = Hp - 6;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gqg_info" {
     block_c1Gqg_info:
         const _c1Gqg;
         const 74;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Gr3() //  [R1]
         { []
         }
     {offset
       c1Gr3: // global
           I64[Sp] = block_c1Gr8_info;
           _s1CXG::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1CXG::I64;
           if (R1 & 7 != 0) goto u1GDj; else goto c1Grc;
       u1GDj: // global
           call _c1Gr8(R1) args: 0, res: 0, upd: 0;
       c1Grc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gr3_info" {
     block_c1Gr3_info:
         const _c1Gr3;
         const 10;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Gr8() //  [R1]
         { []
         }
     {offset
       c1Gr8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Gri; else goto c1Grh;
       c1Gri: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Grh: // global
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u1GCm; else goto c1Grq;
       u1GCm: // global
           Sp = Sp + 16;
           call _c1Grm() args: 0, res: 0, upd: 0;
       c1Grq: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 56];
           R1 = Hp - 6;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gr8_info" {
     block_c1Gr8_info:
         const _c1Gr8;
         const 74;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Grm() //  []
         { []
         }
     {offset
       c1Grm: // global
           Hp = Hp - 16;
           call _s1CWT() args: 0, res: 0, upd: 0;
     }
 },
 _s1CWT() //  []
         { []
         }
     {offset
       s1CWT: // global
           I64[Sp - 8] = block_c1Gnu_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GEy; else goto c1Goh;
       u1GEy: // global
           call _c1Gnu(R1) args: 0, res: 0, upd: 0;
       c1Goh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Gnu() //  [R1]
         { []
         }
     {offset
       c1Gnu: // global
           if (R1 & 7 == 1) goto u1GCs; else goto c1Gos;
       u1GCs: // global
           Sp = Sp + 8;
           call _s1CWU() args: 0, res: 0, upd: 0;
       c1Gos: // global
           I64[Sp] = block_c1Goq_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto u1GCT; else goto c1Got;
       u1GCT: // global
           call _c1Goq(R1) args: 0, res: 0, upd: 0;
       c1Got: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gnu_info" {
     block_c1Gnu_info:
         const _c1Gnu;
         const 1033;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Goq() //  [R1]
         { []
         }
     {offset
       c1Goq: // global
           if (R1 & 7 == 1) goto c1GoA; else goto u1GCt;
       c1GoA: // global
           I64[Sp] = block_c1Gox_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto u1GCX; else goto c1GoB;
       u1GCX: // global
           call _c1Gox(R1) args: 0, res: 0, upd: 0;
       c1GoB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u1GCt: // global
           Sp = Sp + 8;
           call _s1CWU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Goq_info" {
     block_c1Goq_info:
         const _c1Goq;
         const 1033;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Gox() //  [R1]
         { []
         }
     {offset
       c1Gox: // global
           if (R1 & 7 == 1) goto u1GCu; else goto c1GoM;
       u1GCu: // global
           Sp = Sp + 8;
           call _s1CWU() args: 0, res: 0, upd: 0;
       c1GoM: // global
           I64[Sp] = block_c1GoK_info;
           _s1CXe::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 40] = _s1CXe::P64;
           if (R1 & 7 != 0) goto u1GCZ; else goto c1GoN;
       u1GCZ: // global
           call _c1GoK(R1) args: 0, res: 0, upd: 0;
       c1GoN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gox_info" {
     block_c1Gox_info:
         const _c1Gox;
         const 1545;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1GoK() //  [R1]
         { []
         }
     {offset
       c1GoK: // global
           if (R1 & 7 == 1) goto u1GCv; else goto c1Gp3;
       u1GCv: // global
           Sp = Sp + 8;
           call _s1CWU() args: 0, res: 0, upd: 0;
       c1Gp3: // global
           I64[Sp] = block_c1GoW_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u1GD1; else goto c1GoX;
       u1GD1: // global
           call _c1GoW(R1) args: 0, res: 0, upd: 0;
       c1GoX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GoK_info" {
     block_c1GoK_info:
         const _c1GoK;
         const 521;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1GoW() //  [R1]
         { []
         }
     {offset
       c1GoW: // global
           I64[Sp] = block_c1Gp1_info;
           _s1CXi::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _s1CXi::I64;
           if (R1 & 7 != 0) goto u1GD3; else goto c1Gp5;
       u1GD3: // global
           call _c1Gp1(R1) args: 0, res: 0, upd: 0;
       c1Gp5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GoW_info" {
     block_c1GoW_info:
         const _c1GoW;
         const 521;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Gp1() //  [R1]
         { []
         }
     {offset
       c1Gp1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Gpb; else goto c1Gpa;
       c1Gpb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Gpa: // global
           if (%MO_S_Gt_W64(I64[R1 + 7],
                            I64[Sp + 40] + 1)) goto c1Gpi; else goto c1Gpm;
       c1Gpi: // global
           Hp = Hp - 16;
           Sp = Sp + 8;
           call _s1CWU() args: 0, res: 0, upd: 0;
       c1Gpm: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 6;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gp1_info" {
     block_c1Gp1_info:
         const _c1Gp1;
         const 1545;
         const 4294967326;
         const S1D79_srt+48;
 },
 _s1CWU() //  []
         { []
         }
     {offset
       s1CWU: // global
           I64[Sp - 8] = block_c1Gk9_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1GEz; else goto c1Gka;
       u1GEz: // global
           call _c1Gk9(R1) args: 0, res: 0, upd: 0;
       c1Gka: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Gk9() //  [R1]
         { []
         }
     {offset
       c1Gk9: // global
           if (R1 & 7 == 1) goto c1GnA; else goto c1GnF;
       c1GnA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1GnD; else goto c1GnC;
       c1GnD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1GnC: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 6;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1GnF: // global
           I64[Sp] = block_c1Gkf_info;
           _s1CWX::P64 = P64[R1 + 6];
           R1 = P64[Sp + 64];
           P64[Sp + 64] = _s1CWX::P64;
           if (R1 & 7 != 0) goto u1GCA; else goto c1Gkg;
       u1GCA: // global
           call _c1Gkf(R1) args: 0, res: 0, upd: 0;
       c1Gkg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gk9_info" {
     block_c1Gk9_info:
         const _c1Gk9;
         const 1673;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1Gkf() //  [R1]
         { []
         }
     {offset
       c1Gkf: // global
           _c1Gjr::P64 = P64[Sp + 24];
           _c1Gjy::P64 = P64[Sp + 8];
           _s1CWy::P64 = P64[Sp + 56];
           _s1CWA::P64 = P64[Sp + 72];
           _s1CWX::P64 = P64[Sp + 64];
           if (R1 & 7 == 1) goto c1GnI; else goto c1Go0;
       c1GnI: // global
           Hp = Hp + 40;
           _s1CWY::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1Go3; else goto c1GnK;
       c1GnK: // global
           I64[Hp - 32] = sat_s1CX1_info;
           P64[Hp - 16] = _s1CWy::P64;
           P64[Hp - 8] = _c1Gjr::P64;
           P64[Hp] = _s1CWX::P64;
           I64[Sp + 40] = block_c1GnG_info;
           R2 = _c1Gjy::P64;
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = _s1CWA::P64;
           P64[Sp + 32] = Hp - 32;
           Sp = Sp + 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
       c1Go0: // global
           Hp = Hp + 40;
           _s1CWY::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1Go3; else goto c1Go2;
       c1Go3: // global
           HpAlloc = 40;
           R1 = _s1CWY::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Go2: // global
           I64[Hp - 32] = sat_s1CX9_info;
           P64[Hp - 16] = _s1CWy::P64;
           P64[Hp - 8] = _c1Gjr::P64;
           P64[Hp] = _s1CWX::P64;
           I64[Sp + 40] = block_c1GnZ_info;
           R2 = _c1Gjy::P64;
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = _s1CWA::P64;
           P64[Sp + 32] = Hp - 32;
           Sp = Sp + 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Gkf_info" {
     block_c1Gkf_info:
         const _c1Gkf;
         const 1673;
         const 4294967326;
         const S1D79_srt+48;
 },
 _c1GnG() //  [R1]
         { []
         }
     {offset
       c1GnG: // global
           if (R1 & 7 == 1) goto u1GCy; else goto c1GnV;
       u1GCy: // global
           Sp = Sp + 40;
           call _c1GvA() args: 0, res: 0, upd: 0;
       c1GnV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1GnY; else goto c1GnX;
       c1GnY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1GnX: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GnG_info" {
     block_c1GnG_info:
         const _c1GnG;
         const 900;
         const 30;
 },
 _c1GnZ() //  [R1]
         { []
         }
     {offset
       c1GnZ: // global
           if (R1 & 7 == 1) goto u1GCx; else goto c1God;
       u1GCx: // global
           Sp = Sp + 40;
           call _c1GvA() args: 0, res: 0, upd: 0;
       c1God: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Gog; else goto c1Gof;
       c1Gog: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Gof: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1GnZ_info" {
     block_c1GnZ_info:
         const _c1GnZ;
         const 900;
         const 30;
 },
 _c1GvA() //  []
         { []
         }
     {offset
       c1GvA: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.911762709 UTC

[section ""cstring" . Data.Bits.$trModule4_bytes" {
     Data.Bits.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.913971519 UTC

[section ""data" . Data.Bits.$trModule3_closure" {
     Data.Bits.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bits.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.915655171 UTC

[section ""cstring" . Data.Bits.$trModule2_bytes" {
     Data.Bits.$trModule2_bytes:
         I8[] [68,97,116,97,46,66,105,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.917594874 UTC

[section ""data" . Data.Bits.$trModule1_closure" {
     Data.Bits.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bits.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.919261674 UTC

[section ""data" . Data.Bits.$trModule_closure" {
     Data.Bits.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Bits.$trModule3_closure+1;
         const Data.Bits.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.921511847 UTC

[section ""data" . $krep_r1CDE_closure" {
     $krep_r1CDE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.923268045 UTC

[section ""data" . $krep1_r1CDF_closure" {
     $krep1_r1CDF_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.925006751 UTC

[section ""data" . $krep2_r1CDG_closure" {
     $krep2_r1CDG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.926739951 UTC

[section ""data" . $krep3_r1CDH_closure" {
     $krep3_r1CDH_closure:
         const :_con_info;
         const $krep1_r1CDF_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.92846756 UTC

[section ""data" . $krep4_r1CDI_closure" {
     $krep4_r1CDI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep3_r1CDH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.930550656 UTC

[section ""data" . $krep5_r1CDJ_closure" {
     $krep5_r1CDJ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r1CDF_closure+1;
         const $krep_r1CDE_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.93235653 UTC

[section ""data" . Data.Bits.$tcBits1_closure" {
     Data.Bits.$tcBits1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep2_r1CDG_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.934331637 UTC

[section ""data" . $krep6_r1CDK_closure" {
     $krep6_r1CDK_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.936041074 UTC

[section ""data" . $krep7_r1CDL_closure" {
     $krep7_r1CDL_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1CDK_closure+2;
         const $krep6_r1CDK_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.938244809 UTC

[section ""data" . $krep8_r1CDM_closure" {
     $krep8_r1CDM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1CDK_closure+2;
         const $krep7_r1CDL_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.939929083 UTC

[section ""data" . $krep9_r1CDN_closure" {
     $krep9_r1CDN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1CDK_closure+2;
         const $krep5_r1CDJ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.941950249 UTC

[section ""data" . $krep10_r1CDO_closure" {
     $krep10_r1CDO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1CDK_closure+2;
         const $krep4_r1CDI_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.943758537 UTC

[section ""data" . $krep11_r1CDP_closure" {
     $krep11_r1CDP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1CDK_closure+2;
         const $krep1_r1CDF_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.945901773 UTC

[section ""data" . $krep12_r1CDQ_closure" {
     $krep12_r1CDQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1CDK_closure+2;
         const $krep_r1CDE_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.947574713 UTC

[section ""data" . $krep13_r1CDR_closure" {
     $krep13_r1CDR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r1CDF_closure+1;
         const $krep6_r1CDK_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.949325994 UTC

[section ""data" . $krep14_r1CDS_closure" {
     $krep14_r1CDS_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1CDK_closure+2;
         const $krep13_r1CDR_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.950974802 UTC

[section ""data" . $krep15_r1CDT_closure" {
     $krep15_r1CDT_closure:
         const :_con_info;
         const $krep6_r1CDK_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.952781266 UTC

[section ""data" . $krep16_r1CDU_closure" {
     $krep16_r1CDU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Classes.$tcEq_closure;
         const $krep15_r1CDT_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.954911252 UTC

[section ""cstring" . Data.Bits.$tcBits3_bytes" {
     Data.Bits.$tcBits3_bytes:
         I8[] [66,105,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.956590475 UTC

[section ""data" . Data.Bits.$tcBits2_closure" {
     Data.Bits.$tcBits2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bits.$tcBits3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.958785692 UTC

[section ""data" . Data.Bits.$tcBits_closure" {
     Data.Bits.$tcBits_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Bits.$trModule_closure+1;
         const Data.Bits.$tcBits2_closure+1;
         const Data.Bits.$tcBits1_closure+4;
         const 7088815172979416363;
         const 4990916430057605838;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.960607684 UTC

[section ""data" . $krep17_r1CDV_closure" {
     $krep17_r1CDV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Bits.$tcBits_closure+1;
         const $krep15_r1CDT_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.962707704 UTC

[section ""data" . $krep18_r1CDW_closure" {
     $krep18_r1CDW_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r1CDP_closure+4;
         const $krep17_r1CDV_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.96437076 UTC

[section ""data" . $krep19_r1CDX_closure" {
     $krep19_r1CDX_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep18_r1CDW_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.96647174 UTC

[section ""data" . $krep20_r1CDY_closure" {
     $krep20_r1CDY_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep19_r1CDX_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.968137589 UTC

[section ""data" . $krep21_r1CDZ_closure" {
     $krep21_r1CDZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep20_r1CDY_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.96994339 UTC

[section ""data" . $krep22_r1CE0_closure" {
     $krep22_r1CE0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep21_r1CDZ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.972022922 UTC

[section ""data" . $krep23_r1CE1_closure" {
     $krep23_r1CE1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep22_r1CE0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.973744109 UTC

[section ""data" . $krep24_r1CE2_closure" {
     $krep24_r1CE2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep23_r1CE1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.975441104 UTC

[section ""data" . $krep25_r1CE3_closure" {
     $krep25_r1CE3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r1CDQ_closure+4;
         const $krep24_r1CE2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.977173023 UTC

[section ""data" . $krep26_r1CE4_closure" {
     $krep26_r1CE4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r1CDP_closure+4;
         const $krep25_r1CE3_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.979524638 UTC

[section ""data" . $krep27_r1CE5_closure" {
     $krep27_r1CE5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r1CDO_closure+4;
         const $krep26_r1CE4_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.981150557 UTC

[section ""data" . $krep28_r1CE6_closure" {
     $krep28_r1CE6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r1CDN_closure+4;
         const $krep27_r1CE5_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.982951251 UTC

[section ""data" . $krep29_r1CE7_closure" {
     $krep29_r1CE7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep28_r1CE6_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.984617935 UTC

[section ""data" . $krep30_r1CE8_closure" {
     $krep30_r1CE8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep29_r1CE7_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.986286047 UTC

[section ""data" . $krep31_r1CE9_closure" {
     $krep31_r1CE9_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep30_r1CE8_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.988301557 UTC

[section ""data" . $krep32_r1CEa_closure" {
     $krep32_r1CEa_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r1CDR_closure+4;
         const $krep31_r1CE9_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.990236198 UTC

[section ""data" . $krep33_r1CEb_closure" {
     $krep33_r1CEb_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1CDK_closure+2;
         const $krep32_r1CEa_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.991902108 UTC

[section ""data" . $krep34_r1CEc_closure" {
     $krep34_r1CEc_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep33_r1CEb_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.993575384 UTC

[section ""data" . $krep35_r1CEd_closure" {
     $krep35_r1CEd_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep34_r1CEc_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.995588862 UTC

[section ""data" . $krep36_r1CEe_closure" {
     $krep36_r1CEe_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r1CDL_closure+4;
         const $krep35_r1CEd_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.997652523 UTC

[section ""data" . $krep37_r1CEf_closure" {
     $krep37_r1CEf_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r1CDM_closure+4;
         const $krep36_r1CEe_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:24.999247491 UTC

[section ""data" . $krep38_r1CEg_closure" {
     $krep38_r1CEg_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r1CDM_closure+4;
         const $krep37_r1CEf_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.00082529 UTC

[section ""data" . $krep39_r1CEh_closure" {
     $krep39_r1CEh_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r1CDM_closure+4;
         const $krep38_r1CEg_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.002496367 UTC

[section ""data" . Data.Bits.$tc'C:Bits1_closure" {
     Data.Bits.$tc'C:Bits1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r1CDU_closure+1;
         const $krep39_r1CEh_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.004574106 UTC

[section ""cstring" . Data.Bits.$tc'C:Bits3_bytes" {
     Data.Bits.$tc'C:Bits3_bytes:
         I8[] [39,67,58,66,105,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.006193019 UTC

[section ""data" . Data.Bits.$tc'C:Bits2_closure" {
     Data.Bits.$tc'C:Bits2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bits.$tc'C:Bits3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.007900383 UTC

[section ""data" . Data.Bits.$tc'C:Bits_closure" {
     Data.Bits.$tc'C:Bits_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Bits.$trModule_closure+1;
         const Data.Bits.$tc'C:Bits2_closure+1;
         const Data.Bits.$tc'C:Bits1_closure+4;
         const 744071653035646959;
         const 2574978498160477882;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.009673284 UTC

[section ""cstring" . Data.Bits.$tcFiniteBits2_bytes" {
     Data.Bits.$tcFiniteBits2_bytes:
         I8[] [70,105,110,105,116,101,66,105,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.011313494 UTC

[section ""data" . Data.Bits.$tcFiniteBits1_closure" {
     Data.Bits.$tcFiniteBits1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bits.$tcFiniteBits2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.01380993 UTC

[section ""data" . Data.Bits.$tcFiniteBits_closure" {
     Data.Bits.$tcFiniteBits_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Bits.$trModule_closure+1;
         const Data.Bits.$tcFiniteBits1_closure+1;
         const Data.Bits.$tcBits1_closure+4;
         const 2363162769622202131;
         const 10110405838341883172;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.015492252 UTC

[section ""data" . $krep40_r1CEi_closure" {
     $krep40_r1CEi_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Bits.$tcFiniteBits_closure+1;
         const $krep15_r1CDT_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.017140712 UTC

[section ""data" . $krep41_r1CEj_closure" {
     $krep41_r1CEj_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r1CDP_closure+4;
         const $krep40_r1CEi_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.01886182 UTC

[section ""data" . $krep42_r1CEk_closure" {
     $krep42_r1CEk_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r1CDP_closure+4;
         const $krep41_r1CEj_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.020924265 UTC

[section ""data" . $krep43_r1CEl_closure" {
     $krep43_r1CEl_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r1CDP_closure+4;
         const $krep42_r1CEk_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.023088332 UTC

[section ""data" . Data.Bits.$tc'C:FiniteBits1_closure" {
     Data.Bits.$tc'C:FiniteBits1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r1CDV_closure+1;
         const $krep43_r1CEl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.024738321 UTC

[section ""cstring" . Data.Bits.$tc'C:FiniteBits3_bytes" {
     Data.Bits.$tc'C:FiniteBits3_bytes:
         I8[] [39,67,58,70,105,110,105,116,101,66,105,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.026466925 UTC

[section ""data" . Data.Bits.$tc'C:FiniteBits2_closure" {
     Data.Bits.$tc'C:FiniteBits2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bits.$tc'C:FiniteBits3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.028179192 UTC

[section ""data" . Data.Bits.$tc'C:FiniteBits_closure" {
     Data.Bits.$tc'C:FiniteBits_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Bits.$trModule_closure+1;
         const Data.Bits.$tc'C:FiniteBits2_closure+1;
         const Data.Bits.$tc'C:FiniteBits1_closure+4;
         const 7500562306525175158;
         const 16051895206261500648;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.031087725 UTC

[section ""data" . Data.Bits.C:FiniteBits_closure" {
     Data.Bits.C:FiniteBits_closure:
         const Data.Bits.C:FiniteBits_info;
 },
 Data.Bits.C:FiniteBits_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1GPd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1GPh; else goto c1GPg;
       c1GPh: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.C:FiniteBits_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1GPg: // global
           I64[Hp - 32] = Data.Bits.C:FiniteBits_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.C:FiniteBits_info" {
     Data.Bits.C:FiniteBits_info:
         const Data.Bits.C:FiniteBits_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.036572098 UTC

[section ""data" . Data.Bits.C:Bits_closure" {
     Data.Bits.C:Bits_closure:
         const Data.Bits.C:Bits_info;
 },
 Data.Bits.C:Bits_slow() //  [R1]
         { []
         }
     {offset
       c1GPo: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Bits.C:Bits_entry(R6,
                                       R5,
                                       R4,
                                       R3,
                                       R2,
                                       R1) args: 152, res: 0, upd: 8;
     }
 },
 Data.Bits.C:Bits_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1GPt: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto c1GPx; else goto c1GPw;
       c1GPx: // global
           HpAlloc = 192;
           R1 = Data.Bits.C:Bits_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 192, res: 0, upd: 8;
       c1GPw: // global
           I64[Hp - 184] = Data.Bits.C:Bits_con_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           P64[Hp - 152] = R5;
           P64[Hp - 144] = R6;
           P64[Hp - 136] = P64[Sp];
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 48];
           P64[Hp - 80] = P64[Sp + 56];
           P64[Hp - 72] = P64[Sp + 64];
           P64[Hp - 64] = P64[Sp + 72];
           P64[Hp - 56] = P64[Sp + 80];
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = P64[Sp + 96];
           P64[Hp - 32] = P64[Sp + 104];
           P64[Hp - 24] = P64[Sp + 112];
           P64[Hp - 16] = P64[Sp + 120];
           P64[Hp - 8] = P64[Sp + 128];
           P64[Hp] = P64[Sp + 136];
           R1 = Hp - 183;
           Sp = Sp + 144;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.C:Bits_info" {
     Data.Bits.C:Bits_info:
         const Data.Bits.C:Bits_entry;
         const 0;
         const 14;
         const 98784247808;
         const 0;
         const 23;
         const Data.Bits.C:Bits_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.042368008 UTC

[section ""cstring" . i1FaP_str" {
     i1FaP_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,66,105,116,115,46,67,58,70,105,110,105,116,101,66,105,116,115]
 },
 Data.Bits.C:FiniteBits_con_entry() //  [R1]
         { []
         }
     {offset
       c1GPX: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.C:FiniteBits_con_info" {
     Data.Bits.C:FiniteBits_con_info:
         const Data.Bits.C:FiniteBits_con_entry;
         const 4;
         const 1;
         const i1FaP_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.045633479 UTC

[section ""cstring" . i1FaR_str" {
     i1FaR_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,66,105,116,115,46,67,58,66,105,116,115]
 },
 Data.Bits.C:Bits_con_entry() //  [R1]
         { []
         }
     {offset
       c1GQ3: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.C:Bits_con_info" {
     Data.Bits.C:Bits_con_info:
         const Data.Bits.C:Bits_con_entry;
         const 23;
         const 1;
         const i1FaR_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:25.049623445 UTC

[section ""relreadonly" . S1D79_srt" {
     S1D79_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Bits.$fBitsInteger1_closure;
         const GHC.Integer.Type.shiftRInteger_closure;
         const Data.Bits.$fBitsInteger_$cshift_closure;
         const Data.Bits.$w$cshift_closure;
         const sat_s1COy_closure;
         const Data.Bits.$fBitsInteger3_closure;
         const Data.Bits.$fBitsInteger_$cbit_closure;
         const GHC.Integer.Type.complementInteger_closure;
         const Data.Bits.$fBitsInteger_$cclearBit_closure;
         const Data.Bits.$fBitsInteger_$ccomplementBit_closure;
         const Data.Bits.$fBitsInteger_$csetBit_closure;
         const Data.Bits.$fBitsInteger_$cshiftR_closure;
         const Data.Bits.$fBitsInteger_$crotateR_closure;
         const Data.Bits.bitDefault_closure;
         const Data.Bits.$fBitsInteger_$czeroBits_closure;
         const Data.Bits.testBitDefault_closure;
         const Data.Bits.$wpopCountDefault_closure;
         const Data.Bits.popCountDefault_closure;
         const GHC.Num.$fNumInteger_closure;
         const Data.Bits.$fBitsInteger_closure;
         const Data.Bits.$fBitsInteger_$cpopCount_closure;
         const Data.Bits.toIntegralSized_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.712459193 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:56:28.714616695 UTC

[section ""data" . Data.Bits.$p1FiniteBits_closure" {
     Data.Bits.$p1FiniteBits_closure:
         const Data.Bits.$p1FiniteBits_info;
 },
 Data.Bits.$p1FiniteBits_entry() //  [R2]
         { []
         }
     {offset
       c1Hbd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Hbe; else goto c1Hbf;
       c1Hbe: // global
           R2 = R2;
           R1 = Data.Bits.$p1FiniteBits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Hbf: // global
           I64[Sp - 8] = block_c1Hba_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Hbj; else goto c1Hbb;
       u1Hbj: // global
           call _c1Hba(R1) args: 0, res: 0, upd: 0;
       c1Hbb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$p1FiniteBits_info" {
     Data.Bits.$p1FiniteBits_info:
         const Data.Bits.$p1FiniteBits_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Hba() //  [R1]
         { []
         }
     {offset
       c1Hba: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hba_info" {
     block_c1Hba_info:
         const _c1Hba;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.720711124 UTC

[section ""data" . Data.Bits.finiteBitSize_closure" {
     Data.Bits.finiteBitSize_closure:
         const Data.Bits.finiteBitSize_info;
 },
 Data.Bits.finiteBitSize_entry() //  [R2]
         { []
         }
     {offset
       c1HbD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HbE; else goto c1HbF;
       c1HbE: // global
           R2 = R2;
           R1 = Data.Bits.finiteBitSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HbF: // global
           I64[Sp - 8] = block_c1HbA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HbJ; else goto c1HbB;
       u1HbJ: // global
           call _c1HbA(R1) args: 0, res: 0, upd: 0;
       c1HbB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.finiteBitSize_info" {
     Data.Bits.finiteBitSize_info:
         const Data.Bits.finiteBitSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HbA() //  [R1]
         { []
         }
     {offset
       c1HbA: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HbA_info" {
     block_c1HbA_info:
         const _c1HbA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.727609751 UTC

[section ""data" . Data.Bits.countLeadingZeros_closure" {
     Data.Bits.countLeadingZeros_closure:
         const Data.Bits.countLeadingZeros_info;
 },
 Data.Bits.countLeadingZeros_entry() //  [R2]
         { []
         }
     {offset
       c1Hc1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Hc2; else goto c1Hc3;
       c1Hc2: // global
           R2 = R2;
           R1 = Data.Bits.countLeadingZeros_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Hc3: // global
           I64[Sp - 8] = block_c1HbY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Hc7; else goto c1HbZ;
       u1Hc7: // global
           call _c1HbY(R1) args: 0, res: 0, upd: 0;
       c1HbZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.countLeadingZeros_info" {
     Data.Bits.countLeadingZeros_info:
         const Data.Bits.countLeadingZeros_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HbY() //  [R1]
         { []
         }
     {offset
       c1HbY: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HbY_info" {
     block_c1HbY_info:
         const _c1HbY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.733319767 UTC

[section ""data" . Data.Bits.countTrailingZeros_closure" {
     Data.Bits.countTrailingZeros_closure:
         const Data.Bits.countTrailingZeros_info;
 },
 Data.Bits.countTrailingZeros_entry() //  [R2]
         { []
         }
     {offset
       c1Hcp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Hcq; else goto c1Hcr;
       c1Hcq: // global
           R2 = R2;
           R1 = Data.Bits.countTrailingZeros_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Hcr: // global
           I64[Sp - 8] = block_c1Hcm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Hcv; else goto c1Hcn;
       u1Hcv: // global
           call _c1Hcm(R1) args: 0, res: 0, upd: 0;
       c1Hcn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.countTrailingZeros_info" {
     Data.Bits.countTrailingZeros_info:
         const Data.Bits.countTrailingZeros_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Hcm() //  [R1]
         { []
         }
     {offset
       c1Hcm: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hcm_info" {
     block_c1Hcm_info:
         const _c1Hcm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.739045101 UTC

[section ""data" . Data.Bits.$p1Bits_closure" {
     Data.Bits.$p1Bits_closure:
         const Data.Bits.$p1Bits_info;
 },
 Data.Bits.$p1Bits_entry() //  [R2]
         { []
         }
     {offset
       c1HcN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HcO; else goto c1HcP;
       c1HcO: // global
           R2 = R2;
           R1 = Data.Bits.$p1Bits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HcP: // global
           I64[Sp - 8] = block_c1HcK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HcT; else goto c1HcL;
       u1HcT: // global
           call _c1HcK(R1) args: 0, res: 0, upd: 0;
       c1HcL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$p1Bits_info" {
     Data.Bits.$p1Bits_info:
         const Data.Bits.$p1Bits_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HcK() //  [R1]
         { []
         }
     {offset
       c1HcK: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HcK_info" {
     block_c1HcK_info:
         const _c1HcK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.744849136 UTC

[section ""data" . Data.Bits..&._closure" {
     Data.Bits..&._closure:
         const Data.Bits..&._info;
 },
 Data.Bits..&._entry() //  [R2]
         { []
         }
     {offset
       c1Hdd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Hde; else goto c1Hdf;
       c1Hde: // global
           R2 = R2;
           R1 = Data.Bits..&._closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Hdf: // global
           I64[Sp - 8] = block_c1Hda_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Hdj; else goto c1Hdb;
       u1Hdj: // global
           call _c1Hda(R1) args: 0, res: 0, upd: 0;
       c1Hdb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits..&._info" {
     Data.Bits..&._info:
         const Data.Bits..&._entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Hda() //  [R1]
         { []
         }
     {offset
       c1Hda: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hda_info" {
     block_c1Hda_info:
         const _c1Hda;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.750945405 UTC

[section ""data" . Data.Bits..|._closure" {
     Data.Bits..|._closure:
         const Data.Bits..|._info;
 },
 Data.Bits..|._entry() //  [R2]
         { []
         }
     {offset
       c1HdB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HdC; else goto c1HdD;
       c1HdC: // global
           R2 = R2;
           R1 = Data.Bits..|._closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HdD: // global
           I64[Sp - 8] = block_c1Hdy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HdH; else goto c1Hdz;
       u1HdH: // global
           call _c1Hdy(R1) args: 0, res: 0, upd: 0;
       c1Hdz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits..|._info" {
     Data.Bits..|._info:
         const Data.Bits..|._entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Hdy() //  [R1]
         { []
         }
     {offset
       c1Hdy: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hdy_info" {
     block_c1Hdy_info:
         const _c1Hdy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.756756976 UTC

[section ""data" . Data.Bits.xor_closure" {
     Data.Bits.xor_closure:
         const Data.Bits.xor_info;
 },
 Data.Bits.xor_entry() //  [R2]
         { []
         }
     {offset
       c1HdZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1He0; else goto c1He1;
       c1He0: // global
           R2 = R2;
           R1 = Data.Bits.xor_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1He1: // global
           I64[Sp - 8] = block_c1HdW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1He5; else goto c1HdX;
       u1He5: // global
           call _c1HdW(R1) args: 0, res: 0, upd: 0;
       c1HdX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.xor_info" {
     Data.Bits.xor_info:
         const Data.Bits.xor_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HdW() //  [R1]
         { []
         }
     {offset
       c1HdW: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HdW_info" {
     block_c1HdW_info:
         const _c1HdW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.763126718 UTC

[section ""data" . Data.Bits.complement_closure" {
     Data.Bits.complement_closure:
         const Data.Bits.complement_info;
 },
 Data.Bits.complement_entry() //  [R2]
         { []
         }
     {offset
       c1Hen: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Heo; else goto c1Hep;
       c1Heo: // global
           R2 = R2;
           R1 = Data.Bits.complement_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Hep: // global
           I64[Sp - 8] = block_c1Hek_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Het; else goto c1Hel;
       u1Het: // global
           call _c1Hek(R1) args: 0, res: 0, upd: 0;
       c1Hel: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.complement_info" {
     Data.Bits.complement_info:
         const Data.Bits.complement_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Hek() //  [R1]
         { []
         }
     {offset
       c1Hek: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hek_info" {
     block_c1Hek_info:
         const _c1Hek;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.768853044 UTC

[section ""data" . Data.Bits.shift_closure" {
     Data.Bits.shift_closure:
         const Data.Bits.shift_info;
 },
 Data.Bits.shift_entry() //  [R2]
         { []
         }
     {offset
       c1HeL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HeM; else goto c1HeN;
       c1HeM: // global
           R2 = R2;
           R1 = Data.Bits.shift_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HeN: // global
           I64[Sp - 8] = block_c1HeI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HeR; else goto c1HeJ;
       u1HeR: // global
           call _c1HeI(R1) args: 0, res: 0, upd: 0;
       c1HeJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.shift_info" {
     Data.Bits.shift_info:
         const Data.Bits.shift_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HeI() //  [R1]
         { []
         }
     {offset
       c1HeI: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HeI_info" {
     block_c1HeI_info:
         const _c1HeI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.774659096 UTC

[section ""data" . Data.Bits.rotate_closure" {
     Data.Bits.rotate_closure:
         const Data.Bits.rotate_info;
 },
 Data.Bits.rotate_entry() //  [R2]
         { []
         }
     {offset
       c1Hf9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Hfa; else goto c1Hfb;
       c1Hfa: // global
           R2 = R2;
           R1 = Data.Bits.rotate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Hfb: // global
           I64[Sp - 8] = block_c1Hf6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Hff; else goto c1Hf7;
       u1Hff: // global
           call _c1Hf6(R1) args: 0, res: 0, upd: 0;
       c1Hf7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.rotate_info" {
     Data.Bits.rotate_info:
         const Data.Bits.rotate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Hf6() //  [R1]
         { []
         }
     {offset
       c1Hf6: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hf6_info" {
     block_c1Hf6_info:
         const _c1Hf6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.780769066 UTC

[section ""data" . Data.Bits.zeroBits_closure" {
     Data.Bits.zeroBits_closure:
         const Data.Bits.zeroBits_info;
 },
 Data.Bits.zeroBits_entry() //  [R2]
         { []
         }
     {offset
       c1Hfx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Hfy; else goto c1Hfz;
       c1Hfy: // global
           R2 = R2;
           R1 = Data.Bits.zeroBits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Hfz: // global
           I64[Sp - 8] = block_c1Hfu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HfD; else goto c1Hfv;
       u1HfD: // global
           call _c1Hfu(R1) args: 0, res: 0, upd: 0;
       c1Hfv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.zeroBits_info" {
     Data.Bits.zeroBits_info:
         const Data.Bits.zeroBits_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Hfu() //  [R1]
         { []
         }
     {offset
       c1Hfu: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hfu_info" {
     block_c1Hfu_info:
         const _c1Hfu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.786537491 UTC

[section ""data" . Data.Bits.bit_closure" {
     Data.Bits.bit_closure:
         const Data.Bits.bit_info;
 },
 Data.Bits.bit_entry() //  [R2]
         { []
         }
     {offset
       c1HfV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HfW; else goto c1HfX;
       c1HfW: // global
           R2 = R2;
           R1 = Data.Bits.bit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HfX: // global
           I64[Sp - 8] = block_c1HfS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Hg1; else goto c1HfT;
       u1Hg1: // global
           call _c1HfS(R1) args: 0, res: 0, upd: 0;
       c1HfT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.bit_info" {
     Data.Bits.bit_info:
         const Data.Bits.bit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HfS() //  [R1]
         { []
         }
     {offset
       c1HfS: // global
           R1 = P64[R1 + 71];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HfS_info" {
     block_c1HfS_info:
         const _c1HfS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.792417237 UTC

[section ""data" . Data.Bits.setBit_closure" {
     Data.Bits.setBit_closure:
         const Data.Bits.setBit_info;
 },
 Data.Bits.setBit_entry() //  [R2]
         { []
         }
     {offset
       c1Hgj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Hgk; else goto c1Hgl;
       c1Hgk: // global
           R2 = R2;
           R1 = Data.Bits.setBit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Hgl: // global
           I64[Sp - 8] = block_c1Hgg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Hgp; else goto c1Hgh;
       u1Hgp: // global
           call _c1Hgg(R1) args: 0, res: 0, upd: 0;
       c1Hgh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.setBit_info" {
     Data.Bits.setBit_info:
         const Data.Bits.setBit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Hgg() //  [R1]
         { []
         }
     {offset
       c1Hgg: // global
           R1 = P64[R1 + 79];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hgg_info" {
     block_c1Hgg_info:
         const _c1Hgg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.799459507 UTC

[section ""data" . Data.Bits.clearBit_closure" {
     Data.Bits.clearBit_closure:
         const Data.Bits.clearBit_info;
 },
 Data.Bits.clearBit_entry() //  [R2]
         { []
         }
     {offset
       c1HgH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HgI; else goto c1HgJ;
       c1HgI: // global
           R2 = R2;
           R1 = Data.Bits.clearBit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HgJ: // global
           I64[Sp - 8] = block_c1HgE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HgN; else goto c1HgF;
       u1HgN: // global
           call _c1HgE(R1) args: 0, res: 0, upd: 0;
       c1HgF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.clearBit_info" {
     Data.Bits.clearBit_info:
         const Data.Bits.clearBit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HgE() //  [R1]
         { []
         }
     {offset
       c1HgE: // global
           R1 = P64[R1 + 87];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HgE_info" {
     block_c1HgE_info:
         const _c1HgE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.805066381 UTC

[section ""data" . Data.Bits.complementBit_closure" {
     Data.Bits.complementBit_closure:
         const Data.Bits.complementBit_info;
 },
 Data.Bits.complementBit_entry() //  [R2]
         { []
         }
     {offset
       c1Hh5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Hh6; else goto c1Hh7;
       c1Hh6: // global
           R2 = R2;
           R1 = Data.Bits.complementBit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Hh7: // global
           I64[Sp - 8] = block_c1Hh2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Hhb; else goto c1Hh3;
       u1Hhb: // global
           call _c1Hh2(R1) args: 0, res: 0, upd: 0;
       c1Hh3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.complementBit_info" {
     Data.Bits.complementBit_info:
         const Data.Bits.complementBit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Hh2() //  [R1]
         { []
         }
     {offset
       c1Hh2: // global
           R1 = P64[R1 + 95];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hh2_info" {
     block_c1Hh2_info:
         const _c1Hh2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.810917101 UTC

[section ""data" . Data.Bits.testBit_closure" {
     Data.Bits.testBit_closure:
         const Data.Bits.testBit_info;
 },
 Data.Bits.testBit_entry() //  [R2]
         { []
         }
     {offset
       c1Hht: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Hhu; else goto c1Hhv;
       c1Hhu: // global
           R2 = R2;
           R1 = Data.Bits.testBit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Hhv: // global
           I64[Sp - 8] = block_c1Hhq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Hhz; else goto c1Hhr;
       u1Hhz: // global
           call _c1Hhq(R1) args: 0, res: 0, upd: 0;
       c1Hhr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.testBit_info" {
     Data.Bits.testBit_info:
         const Data.Bits.testBit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Hhq() //  [R1]
         { []
         }
     {offset
       c1Hhq: // global
           R1 = P64[R1 + 103];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hhq_info" {
     block_c1Hhq_info:
         const _c1Hhq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.816544404 UTC

[section ""data" . Data.Bits.bitSizeMaybe_closure" {
     Data.Bits.bitSizeMaybe_closure:
         const Data.Bits.bitSizeMaybe_info;
 },
 Data.Bits.bitSizeMaybe_entry() //  [R2]
         { []
         }
     {offset
       c1HhR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HhS; else goto c1HhT;
       c1HhS: // global
           R2 = R2;
           R1 = Data.Bits.bitSizeMaybe_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HhT: // global
           I64[Sp - 8] = block_c1HhO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HhX; else goto c1HhP;
       u1HhX: // global
           call _c1HhO(R1) args: 0, res: 0, upd: 0;
       c1HhP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.bitSizeMaybe_info" {
     Data.Bits.bitSizeMaybe_info:
         const Data.Bits.bitSizeMaybe_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HhO() //  [R1]
         { []
         }
     {offset
       c1HhO: // global
           R1 = P64[R1 + 111];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HhO_info" {
     block_c1HhO_info:
         const _c1HhO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.822876057 UTC

[section ""data" . Data.Bits.bitSize_closure" {
     Data.Bits.bitSize_closure:
         const Data.Bits.bitSize_info;
 },
 Data.Bits.bitSize_entry() //  [R2]
         { []
         }
     {offset
       c1Hif: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Hig; else goto c1Hih;
       c1Hig: // global
           R2 = R2;
           R1 = Data.Bits.bitSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Hih: // global
           I64[Sp - 8] = block_c1Hic_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Hil; else goto c1Hid;
       u1Hil: // global
           call _c1Hic(R1) args: 0, res: 0, upd: 0;
       c1Hid: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.bitSize_info" {
     Data.Bits.bitSize_info:
         const Data.Bits.bitSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Hic() //  [R1]
         { []
         }
     {offset
       c1Hic: // global
           R1 = P64[R1 + 119];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hic_info" {
     block_c1Hic_info:
         const _c1Hic;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.828792851 UTC

[section ""data" . Data.Bits.isSigned_closure" {
     Data.Bits.isSigned_closure:
         const Data.Bits.isSigned_info;
 },
 Data.Bits.isSigned_entry() //  [R2]
         { []
         }
     {offset
       c1HiD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HiE; else goto c1HiF;
       c1HiE: // global
           R2 = R2;
           R1 = Data.Bits.isSigned_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HiF: // global
           I64[Sp - 8] = block_c1HiA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HiJ; else goto c1HiB;
       u1HiJ: // global
           call _c1HiA(R1) args: 0, res: 0, upd: 0;
       c1HiB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.isSigned_info" {
     Data.Bits.isSigned_info:
         const Data.Bits.isSigned_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HiA() //  [R1]
         { []
         }
     {offset
       c1HiA: // global
           R1 = P64[R1 + 127];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HiA_info" {
     block_c1HiA_info:
         const _c1HiA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.835453238 UTC

[section ""data" . Data.Bits.shiftL_closure" {
     Data.Bits.shiftL_closure:
         const Data.Bits.shiftL_info;
 },
 Data.Bits.shiftL_entry() //  [R2]
         { []
         }
     {offset
       c1Hj1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Hj2; else goto c1Hj3;
       c1Hj2: // global
           R2 = R2;
           R1 = Data.Bits.shiftL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Hj3: // global
           I64[Sp - 8] = block_c1HiY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Hj7; else goto c1HiZ;
       u1Hj7: // global
           call _c1HiY(R1) args: 0, res: 0, upd: 0;
       c1HiZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.shiftL_info" {
     Data.Bits.shiftL_info:
         const Data.Bits.shiftL_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HiY() //  [R1]
         { []
         }
     {offset
       c1HiY: // global
           R1 = P64[R1 + 135];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HiY_info" {
     block_c1HiY_info:
         const _c1HiY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.841007156 UTC

[section ""data" . Data.Bits.unsafeShiftL_closure" {
     Data.Bits.unsafeShiftL_closure:
         const Data.Bits.unsafeShiftL_info;
 },
 Data.Bits.unsafeShiftL_entry() //  [R2]
         { []
         }
     {offset
       c1Hjp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Hjq; else goto c1Hjr;
       c1Hjq: // global
           R2 = R2;
           R1 = Data.Bits.unsafeShiftL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Hjr: // global
           I64[Sp - 8] = block_c1Hjm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Hjv; else goto c1Hjn;
       u1Hjv: // global
           call _c1Hjm(R1) args: 0, res: 0, upd: 0;
       c1Hjn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.unsafeShiftL_info" {
     Data.Bits.unsafeShiftL_info:
         const Data.Bits.unsafeShiftL_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Hjm() //  [R1]
         { []
         }
     {offset
       c1Hjm: // global
           R1 = P64[R1 + 143];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hjm_info" {
     block_c1Hjm_info:
         const _c1Hjm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.846762345 UTC

[section ""data" . Data.Bits.shiftR_closure" {
     Data.Bits.shiftR_closure:
         const Data.Bits.shiftR_info;
 },
 Data.Bits.shiftR_entry() //  [R2]
         { []
         }
     {offset
       c1HjN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HjO; else goto c1HjP;
       c1HjO: // global
           R2 = R2;
           R1 = Data.Bits.shiftR_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HjP: // global
           I64[Sp - 8] = block_c1HjK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HjT; else goto c1HjL;
       u1HjT: // global
           call _c1HjK(R1) args: 0, res: 0, upd: 0;
       c1HjL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.shiftR_info" {
     Data.Bits.shiftR_info:
         const Data.Bits.shiftR_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HjK() //  [R1]
         { []
         }
     {offset
       c1HjK: // global
           R1 = P64[R1 + 151];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HjK_info" {
     block_c1HjK_info:
         const _c1HjK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.8528281 UTC

[section ""data" . Data.Bits.unsafeShiftR_closure" {
     Data.Bits.unsafeShiftR_closure:
         const Data.Bits.unsafeShiftR_info;
 },
 Data.Bits.unsafeShiftR_entry() //  [R2]
         { []
         }
     {offset
       c1Hkb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Hkc; else goto c1Hkd;
       c1Hkc: // global
           R2 = R2;
           R1 = Data.Bits.unsafeShiftR_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Hkd: // global
           I64[Sp - 8] = block_c1Hk8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Hkh; else goto c1Hk9;
       u1Hkh: // global
           call _c1Hk8(R1) args: 0, res: 0, upd: 0;
       c1Hk9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.unsafeShiftR_info" {
     Data.Bits.unsafeShiftR_info:
         const Data.Bits.unsafeShiftR_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Hk8() //  [R1]
         { []
         }
     {offset
       c1Hk8: // global
           R1 = P64[R1 + 159];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hk8_info" {
     block_c1Hk8_info:
         const _c1Hk8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.858641358 UTC

[section ""data" . Data.Bits.rotateL_closure" {
     Data.Bits.rotateL_closure:
         const Data.Bits.rotateL_info;
 },
 Data.Bits.rotateL_entry() //  [R2]
         { []
         }
     {offset
       c1Hkz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HkA; else goto c1HkB;
       c1HkA: // global
           R2 = R2;
           R1 = Data.Bits.rotateL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HkB: // global
           I64[Sp - 8] = block_c1Hkw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HkF; else goto c1Hkx;
       u1HkF: // global
           call _c1Hkw(R1) args: 0, res: 0, upd: 0;
       c1Hkx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.rotateL_info" {
     Data.Bits.rotateL_info:
         const Data.Bits.rotateL_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Hkw() //  [R1]
         { []
         }
     {offset
       c1Hkw: // global
           R1 = P64[R1 + 167];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hkw_info" {
     block_c1Hkw_info:
         const _c1Hkw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.86456686 UTC

[section ""data" . Data.Bits.rotateR_closure" {
     Data.Bits.rotateR_closure:
         const Data.Bits.rotateR_info;
 },
 Data.Bits.rotateR_entry() //  [R2]
         { []
         }
     {offset
       c1HkX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HkY; else goto c1HkZ;
       c1HkY: // global
           R2 = R2;
           R1 = Data.Bits.rotateR_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HkZ: // global
           I64[Sp - 8] = block_c1HkU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Hl3; else goto c1HkV;
       u1Hl3: // global
           call _c1HkU(R1) args: 0, res: 0, upd: 0;
       c1HkV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.rotateR_info" {
     Data.Bits.rotateR_info:
         const Data.Bits.rotateR_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HkU() //  [R1]
         { []
         }
     {offset
       c1HkU: // global
           R1 = P64[R1 + 175];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HkU_info" {
     block_c1HkU_info:
         const _c1HkU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.871225122 UTC

[section ""data" . Data.Bits.popCount_closure" {
     Data.Bits.popCount_closure:
         const Data.Bits.popCount_info;
 },
 Data.Bits.popCount_entry() //  [R2]
         { []
         }
     {offset
       c1Hll: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Hlm; else goto c1Hln;
       c1Hlm: // global
           R2 = R2;
           R1 = Data.Bits.popCount_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Hln: // global
           I64[Sp - 8] = block_c1Hli_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Hlr; else goto c1Hlj;
       u1Hlr: // global
           call _c1Hli(R1) args: 0, res: 0, upd: 0;
       c1Hlj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.popCount_info" {
     Data.Bits.popCount_info:
         const Data.Bits.popCount_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Hli() //  [R1]
         { []
         }
     {offset
       c1Hli: // global
           R1 = P64[R1 + 183];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hli_info" {
     block_c1Hli_info:
         const _c1Hli;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.876214965 UTC

[section ""data" . Data.Bits.$fBitsBool2_closure" {
     Data.Bits.$fBitsBool2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.878045653 UTC

[section ""data" . Data.Bits.$fBitsBool1_closure" {
     Data.Bits.$fBitsBool1_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.880763556 UTC

[section ""data" . Data.Bits.$fBitsBool_$cpopCount_closure" {
     Data.Bits.$fBitsBool_$cpopCount_closure:
         const Data.Bits.$fBitsBool_$cpopCount_info;
 },
 Data.Bits.$fBitsBool_$cpopCount_entry() //  [R2]
         { []
         }
     {offset
       c1HlP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HlQ; else goto c1HlR;
       c1HlQ: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsBool_$cpopCount_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HlR: // global
           I64[Sp - 8] = block_c1HlI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HlY; else goto c1HlJ;
       u1HlY: // global
           call _c1HlI(R1) args: 0, res: 0, upd: 0;
       c1HlJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cpopCount_info" {
     Data.Bits.$fBitsBool_$cpopCount_info:
         const Data.Bits.$fBitsBool_$cpopCount_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HlI() //  [R1]
         { []
         }
     {offset
       c1HlI: // global
           if (R1 & 7 == 1) goto c1HlM; else goto c1HlN;
       c1HlM: // global
           R1 = Data.Bits.$fBitsBool2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1HlN: // global
           R1 = Data.Bits.$fBitsBool1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HlI_info" {
     block_c1HlI_info:
         const _c1HlI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.886881904 UTC

[section ""data" . Data.Bits.$fBitsBool_$cisSigned_closure" {
     Data.Bits.$fBitsBool_$cisSigned_closure:
         const Data.Bits.$fBitsBool_$cisSigned_info;
 },
 Data.Bits.$fBitsBool_$cisSigned_entry() //  []
         { []
         }
     {offset
       c1Hmh: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cisSigned_info" {
     Data.Bits.$fBitsBool_$cisSigned_info:
         const Data.Bits.$fBitsBool_$cisSigned_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.890256987 UTC

[section ""data" . Data.Bits.$fBitsBool_$cbitSize_closure" {
     Data.Bits.$fBitsBool_$cbitSize_closure:
         const Data.Bits.$fBitsBool_$cbitSize_info;
 },
 Data.Bits.$fBitsBool_$cbitSize_entry() //  []
         { []
         }
     {offset
       c1Hmu: // global
           R1 = Data.Bits.$fBitsBool1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cbitSize_info" {
     Data.Bits.$fBitsBool_$cbitSize_info:
         const Data.Bits.$fBitsBool_$cbitSize_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.893428928 UTC

[section ""data" . Data.Bits.$fBitsBool3_closure" {
     Data.Bits.$fBitsBool3_closure:
         const GHC.Base.Just_con_info;
         const Data.Bits.$fBitsBool1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.895430532 UTC

[section ""data" . Data.Bits.$fBitsBool_$cbitSizeMaybe_closure" {
     Data.Bits.$fBitsBool_$cbitSizeMaybe_closure:
         const Data.Bits.$fBitsBool_$cbitSizeMaybe_info;
 },
 Data.Bits.$fBitsBool_$cbitSizeMaybe_entry() //  []
         { []
         }
     {offset
       c1HmH: // global
           R1 = Data.Bits.$fBitsBool3_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cbitSizeMaybe_info" {
     Data.Bits.$fBitsBool_$cbitSizeMaybe_info:
         const Data.Bits.$fBitsBool_$cbitSizeMaybe_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.899710295 UTC

[section ""data" . Data.Bits.$fBitsBool_$ctestBit_closure" {
     Data.Bits.$fBitsBool_$ctestBit_closure:
         const Data.Bits.$fBitsBool_$ctestBit_info;
 },
 Data.Bits.$fBitsBool_$ctestBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HmW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HmX; else goto c1HmY;
       c1HmX: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsBool_$ctestBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HmY: // global
           I64[Sp - 16] = block_c1HmT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Hn6; else goto c1HmU;
       u1Hn6: // global
           call _c1HmT(R1) args: 0, res: 0, upd: 0;
       c1HmU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$ctestBit_info" {
     Data.Bits.$fBitsBool_$ctestBit_info:
         const Data.Bits.$fBitsBool_$ctestBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HmT() //  [R1]
         { []
         }
     {offset
       c1HmT: // global
           if (I64[R1 + 7] == 0) goto c1Hn5; else goto c1Hn4;
       c1Hn5: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1Hn4: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HmT_info" {
     block_c1HmT_info:
         const _c1HmT;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.907241018 UTC

[section ""data" . Data.Bits.$fBitsBool_$cbit_closure" {
     Data.Bits.$fBitsBool_$cbit_closure:
         const Data.Bits.$fBitsBool_$cbit_info;
 },
 Data.Bits.$fBitsBool_$cbit_entry() //  [R2]
         { []
         }
     {offset
       c1Hns: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Hnt; else goto c1Hnu;
       c1Hnt: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsBool_$cbit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Hnu: // global
           I64[Sp - 8] = block_c1Hnp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HnC; else goto c1Hnq;
       u1HnC: // global
           call _c1Hnp(R1) args: 0, res: 0, upd: 0;
       c1Hnq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cbit_info" {
     Data.Bits.$fBitsBool_$cbit_info:
         const Data.Bits.$fBitsBool_$cbit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Hnp() //  [R1]
         { []
         }
     {offset
       c1Hnp: // global
           if (I64[R1 + 7] == 0) goto c1HnB; else goto c1HnA;
       c1HnB: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1HnA: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hnp_info" {
     block_c1Hnp_info:
         const _c1Hnp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.912701039 UTC

[section ""data" . Data.Bits.$fBitsBool_$crotate_closure" {
     Data.Bits.$fBitsBool_$crotate_closure:
         const Data.Bits.$fBitsBool_$crotate_info;
 },
 Data.Bits.$fBitsBool_$crotate_entry() //  [R2]
         { []
         }
     {offset
       c1HnV: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$crotate_info" {
     Data.Bits.$fBitsBool_$crotate_info:
         const Data.Bits.$fBitsBool_$crotate_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.916526289 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cisSigned_closure" {
     Data.Bits.$fBitsInteger_$cisSigned_closure:
         const Data.Bits.$fBitsInteger_$cisSigned_info;
 },
 Data.Bits.$fBitsInteger_$cisSigned_entry() //  []
         { []
         }
     {offset
       c1Ho8: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cisSigned_info" {
     Data.Bits.$fBitsInteger_$cisSigned_info:
         const Data.Bits.$fBitsInteger_$cisSigned_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.919803037 UTC

[section ""cstring" . Data.Bits.$fBitsInteger2_bytes" {
     Data.Bits.$fBitsInteger2_bytes:
         I8[] [68,97,116,97,46,66,105,116,115,46,98,105,116,83,105,122,101,40,73,110,116,101,103,101,114,41]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.922293375 UTC

[section ""data" . Data.Bits.$fBitsInteger1_closure" {
     Data.Bits.$fBitsInteger1_closure:
         const Data.Bits.$fBitsInteger1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Bits.$fBitsInteger1_entry() //  [R1]
         { []
         }
     {offset
       c1Hoo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Hop; else goto c1Hoq;
       c1Hop: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Hoq: // global
           (_c1Hol::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1Hol::I64 == 0) goto c1Hon; else goto c1Hom;
       c1Hon: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1Hom: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1Hol::I64;
           R2 = Data.Bits.$fBitsInteger2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger1_info" {
     Data.Bits.$fBitsInteger1_info:
         const Data.Bits.$fBitsInteger1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.926593101 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cbitSize_closure" {
     Data.Bits.$fBitsInteger_$cbitSize_closure:
         const Data.Bits.$fBitsInteger_$cbitSize_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cbitSize_entry() //  []
         { []
         }
     {offset
       c1HoD: // global
           R2 = Data.Bits.$fBitsInteger1_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cbitSize_info" {
     Data.Bits.$fBitsInteger_$cbitSize_info:
         const Data.Bits.$fBitsInteger_$cbitSize_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1HoG_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.930090958 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cbitSizeMaybe_closure" {
     Data.Bits.$fBitsInteger_$cbitSizeMaybe_closure:
         const Data.Bits.$fBitsInteger_$cbitSizeMaybe_info;
 },
 Data.Bits.$fBitsInteger_$cbitSizeMaybe_entry() //  []
         { []
         }
     {offset
       c1HoP: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cbitSizeMaybe_info" {
     Data.Bits.$fBitsInteger_$cbitSizeMaybe_info:
         const Data.Bits.$fBitsInteger_$cbitSizeMaybe_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.934210288 UTC

[section ""data" . Data.Bits.$fBitsInteger_$ctestBit_closure" {
     Data.Bits.$fBitsInteger_$ctestBit_closure:
         const Data.Bits.$fBitsInteger_$ctestBit_info;
 },
 Data.Bits.$fBitsInteger_$ctestBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Hp5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Hp6; else goto c1Hp7;
       c1Hp6: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$ctestBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Hp7: // global
           I64[Sp - 16] = block_c1Hp2_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Hpb; else goto c1Hp3;
       u1Hpb: // global
           call _c1Hp2(R1) args: 0, res: 0, upd: 0;
       c1Hp3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$ctestBit_info" {
     Data.Bits.$fBitsInteger_$ctestBit_info:
         const Data.Bits.$fBitsInteger_$ctestBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Hp2() //  [R1]
         { []
         }
     {offset
       c1Hp2: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.testBitInteger_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hp2_info" {
     block_c1Hp2_info:
         const _c1Hp2;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.940787176 UTC

[section ""data" . Data.Bits.$fBitsInteger_$czeroBits_closure" {
     Data.Bits.$fBitsInteger_$czeroBits_closure:
         const Data.Bits.$fBitsInteger_$czeroBits_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Bits.$fBitsInteger_$czeroBits_entry() //  [R1]
         { []
         }
     {offset
       c1Hps: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Hpt; else goto c1Hpu;
       c1Hpt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Hpu: // global
           (_c1Hpp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1Hpp::I64 == 0) goto c1Hpr; else goto c1Hpq;
       c1Hpr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1Hpq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1Hpp::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$czeroBits_info" {
     Data.Bits.$fBitsInteger_$czeroBits_info:
         const Data.Bits.$fBitsInteger_$czeroBits_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.945611149 UTC

[section ""data" . Data.Bits.$w$cshift_closure" {
     Data.Bits.$w$cshift_closure:
         const Data.Bits.$w$cshift_info;
         const 0;
 },
 Data.Bits.$w$cshift_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HpO: // global
           if (%MO_S_Lt_W64(R3, 0)) goto c1HpM; else goto c1HpN;
       c1HpM: // global
           R3 = -R3;
           R2 = R2;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       c1HpN: // global
           R3 = R3;
           R2 = R2;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$w$cshift_info" {
     Data.Bits.$w$cshift_info:
         const Data.Bits.$w$cshift_entry;
         const 0;
         const 4294967310;
         const 8589934606;
         const S1HoG_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.949775224 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cshift_closure" {
     Data.Bits.$fBitsInteger_$cshift_closure:
         const Data.Bits.$fBitsInteger_$cshift_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cshift_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Hq4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Hq5; else goto c1Hq6;
       c1Hq5: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$cshift_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Hq6: // global
           I64[Sp - 16] = block_c1Hq1_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Hqa; else goto c1Hq2;
       u1Hqa: // global
           call _c1Hq1(R1) args: 0, res: 0, upd: 0;
       c1Hq2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cshift_info" {
     Data.Bits.$fBitsInteger_$cshift_info:
         const Data.Bits.$fBitsInteger_$cshift_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1HoG_srt+24;
 },
 _c1Hq1() //  [R1]
         { []
         }
     {offset
       c1Hq1: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Bits.$w$cshift_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hq1_info" {
     block_c1Hq1_info:
         const _c1Hq1;
         const 1;
         const 4294967326;
         const S1HoG_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.954925603 UTC

[section ""data" . sat_s1H0k_closure" {
     sat_s1H0k_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.956760592 UTC

[section ""data" . sat_s1H0l_closure" {
     sat_s1H0l_closure:
         const :_con_info;
         const sat_s1H0k_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.95940447 UTC

[section ""data" . Data.Bits.$fBitsInteger3_closure" {
     Data.Bits.$fBitsInteger3_closure:
         const Data.Bits.$fBitsInteger3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Bits.$fBitsInteger3_entry() //  [R1]
         { []
         }
     {offset
       c1Hqt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Hqu; else goto c1Hqv;
       c1Hqu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Hqv: // global
           (_c1Hqq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1Hqq::I64 == 0) goto c1Hqs; else goto c1Hqr;
       c1Hqs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1Hqr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1Hqq::I64;
           R3 = sat_s1H0l_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger3_info" {
     Data.Bits.$fBitsInteger3_info:
         const Data.Bits.$fBitsInteger3_entry;
         const 0;
         const 4294967317;
         const S1HoG_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.96435448 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cbit_closure" {
     Data.Bits.$fBitsInteger_$cbit_closure:
         const Data.Bits.$fBitsInteger_$cbit_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cbit_entry() //  [R2]
         { []
         }
     {offset
       c1HqM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HqN; else goto c1HqO;
       c1HqN: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$cbit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HqO: // global
           I64[Sp - 8] = block_c1HqJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HqZ; else goto c1HqK;
       u1HqZ: // global
           call _c1HqJ(R1) args: 0, res: 0, upd: 0;
       c1HqK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cbit_info" {
     Data.Bits.$fBitsInteger_$cbit_info:
         const Data.Bits.$fBitsInteger_$cbit_entry;
         const 0;
         const 210453397518;
         const 4294967301;
         const S1HoG_srt+16;
 },
 _c1HqJ() //  [R1]
         { []
         }
     {offset
       c1HqJ: // global
           _s1H0o::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H0o::I64, 0)) goto c1HqV; else goto c1HqW;
       c1HqV: // global
           R3 = -_s1H0o::I64;
           R2 = Data.Bits.$fBitsInteger3_closure;
           Sp = Sp + 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       c1HqW: // global
           R3 = _s1H0o::I64;
           R2 = Data.Bits.$fBitsInteger3_closure;
           Sp = Sp + 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HqJ_info" {
     block_c1HqJ_info:
         const _c1HqJ;
         const 0;
         const 73014444062;
         const S1HoG_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.971912859 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cclearBit_closure" {
     Data.Bits.$fBitsInteger_$cclearBit_closure:
         const Data.Bits.$fBitsInteger_$cclearBit_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cclearBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Hrh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Hri; else goto c1Hrj;
       c1Hri: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$cclearBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Hrj: // global
           I64[Sp - 16] = block_c1Hre_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HrR; else goto c1Hrf;
       u1HrR: // global
           call _c1Hre(R1) args: 0, res: 0, upd: 0;
       c1Hrf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cclearBit_info" {
     Data.Bits.$fBitsInteger_$cclearBit_info:
         const Data.Bits.$fBitsInteger_$cclearBit_entry;
         const 0;
         const 897648164878;
         const 8589934607;
         const S1HoG_srt+16;
 },
 _c1Hre() //  [R1]
         { []
         }
     {offset
       c1Hre: // global
           _s1H0u::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H0u::I64, 0)) goto c1Hrz; else goto c1HrL;
       c1Hrz: // global
           I64[Sp] = block_c1Hrt_info;
           R3 = -_s1H0u::I64;
           R2 = Data.Bits.$fBitsInteger3_closure;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c1HrL: // global
           I64[Sp] = block_c1HrG_info;
           R3 = _s1H0u::I64;
           R2 = Data.Bits.$fBitsInteger3_closure;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hre_info" {
     block_c1Hre_info:
         const _c1Hre;
         const 1;
         const 347892351006;
         const S1HoG_srt+16;
 },
 _c1Hrt() //  [R1]
         { []
         }
     {offset
       c1Hrt: // global
           I64[Sp] = block_c1Hrx_info;
           R2 = R1;
           call GHC.Integer.Type.complementInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hrt_info" {
     block_c1Hrt_info:
         const _c1Hrt;
         const 1;
         const 4294967326;
         const S1HoG_srt+64;
 },
 _c1Hrx() //  [R1]
         { []
         }
     {offset
       c1Hrx: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.andInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hrx_info" {
     block_c1Hrx_info:
         const _c1Hrx;
         const 1;
         const 30;
 },
 _c1HrG() //  [R1]
         { []
         }
     {offset
       c1HrG: // global
           I64[Sp] = block_c1HrK_info;
           R2 = R1;
           call GHC.Integer.Type.complementInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HrG_info" {
     block_c1HrG_info:
         const _c1HrG;
         const 1;
         const 4294967326;
         const S1HoG_srt+64;
 },
 _c1HrK() //  [R1]
         { []
         }
     {offset
       c1HrK: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.andInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HrK_info" {
     block_c1HrK_info:
         const _c1HrK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.985692928 UTC

[section ""data" . Data.Bits.$fBitsInteger_$ccomplementBit_closure" {
     Data.Bits.$fBitsInteger_$ccomplementBit_closure:
         const Data.Bits.$fBitsInteger_$ccomplementBit_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$ccomplementBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Hsp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Hsq; else goto c1Hsr;
       c1Hsq: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$ccomplementBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Hsr: // global
           I64[Sp - 16] = block_c1Hsm_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HsP; else goto c1Hsn;
       u1HsP: // global
           call _c1Hsm(R1) args: 0, res: 0, upd: 0;
       c1Hsn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$ccomplementBit_info" {
     Data.Bits.$fBitsInteger_$ccomplementBit_info:
         const Data.Bits.$fBitsInteger_$ccomplementBit_entry;
         const 0;
         const 1172526071822;
         const 8589934607;
         const S1HoG_srt+16;
 },
 _c1Hsm() //  [R1]
         { []
         }
     {offset
       c1Hsm: // global
           _s1H0E::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H0E::I64, 0)) goto c1HsD; else goto c1HsK;
       c1HsD: // global
           I64[Sp] = block_c1HsB_info;
           R3 = -_s1H0E::I64;
           R2 = Data.Bits.$fBitsInteger3_closure;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c1HsK: // global
           I64[Sp] = block_c1HsJ_info;
           R3 = _s1H0E::I64;
           R2 = Data.Bits.$fBitsInteger3_closure;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hsm_info" {
     block_c1Hsm_info:
         const _c1Hsm;
         const 1;
         const 73014444062;
         const S1HoG_srt+16;
 },
 _c1HsB() //  [R1]
         { []
         }
     {offset
       c1HsB: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.xorInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HsB_info" {
     block_c1HsB_info:
         const _c1HsB;
         const 1;
         const 30;
 },
 _c1HsJ() //  [R1]
         { []
         }
     {offset
       c1HsJ: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.xorInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HsJ_info" {
     block_c1HsJ_info:
         const _c1HsJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:28.995549006 UTC

[section ""data" . Data.Bits.$fBitsInteger_$csetBit_closure" {
     Data.Bits.$fBitsInteger_$csetBit_closure:
         const Data.Bits.$fBitsInteger_$csetBit_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$csetBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Htf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Htg; else goto c1Hth;
       c1Htg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$csetBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Hth: // global
           I64[Sp - 16] = block_c1Htc_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HtF; else goto c1Htd;
       u1HtF: // global
           call _c1Htc(R1) args: 0, res: 0, upd: 0;
       c1Htd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$csetBit_info" {
     Data.Bits.$fBitsInteger_$csetBit_info:
         const Data.Bits.$fBitsInteger_$csetBit_entry;
         const 0;
         const 2272037699598;
         const 8589934607;
         const S1HoG_srt+16;
 },
 _c1Htc() //  [R1]
         { []
         }
     {offset
       c1Htc: // global
           _s1H0M::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H0M::I64, 0)) goto c1Htt; else goto c1HtA;
       c1Htt: // global
           I64[Sp] = block_c1Htr_info;
           R3 = -_s1H0M::I64;
           R2 = Data.Bits.$fBitsInteger3_closure;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c1HtA: // global
           I64[Sp] = block_c1Htz_info;
           R3 = _s1H0M::I64;
           R2 = Data.Bits.$fBitsInteger3_closure;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Htc_info" {
     block_c1Htc_info:
         const _c1Htc;
         const 1;
         const 73014444062;
         const S1HoG_srt+16;
 },
 _c1Htr() //  [R1]
         { []
         }
     {offset
       c1Htr: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.orInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Htr_info" {
     block_c1Htr_info:
         const _c1Htr;
         const 1;
         const 30;
 },
 _c1Htz() //  [R1]
         { []
         }
     {offset
       c1Htz: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.orInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Htz_info" {
     block_c1Htz_info:
         const _c1Htz;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.004435087 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cunsafeShiftL_closure" {
     Data.Bits.$fBitsInteger_$cunsafeShiftL_closure:
         const Data.Bits.$fBitsInteger_$cunsafeShiftL_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cunsafeShiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Hu2: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshift_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cunsafeShiftL_info" {
     Data.Bits.$fBitsInteger_$cunsafeShiftL_info:
         const Data.Bits.$fBitsInteger_$cunsafeShiftL_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S1HoG_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.008211983 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cshiftL_closure" {
     Data.Bits.$fBitsInteger_$cshiftL_closure:
         const Data.Bits.$fBitsInteger_$cshiftL_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cshiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Hud: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshift_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cshiftL_info" {
     Data.Bits.$fBitsInteger_$cshiftL_info:
         const Data.Bits.$fBitsInteger_$cshiftL_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S1HoG_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.012531303 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cshiftR_closure" {
     Data.Bits.$fBitsInteger_$cshiftR_closure:
         const Data.Bits.$fBitsInteger_$cshiftR_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cshiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Hur: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Hus; else goto c1Hut;
       c1Hus: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$cshiftR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Hut: // global
           I64[Sp - 16] = block_c1Huo_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HuH; else goto c1Hup;
       u1HuH: // global
           call _c1Huo(R1) args: 0, res: 0, upd: 0;
       c1Hup: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cshiftR_info" {
     Data.Bits.$fBitsInteger_$cshiftR_info:
         const Data.Bits.$fBitsInteger_$cshiftR_entry;
         const 0;
         const 4402341478414;
         const 8589934607;
         const S1HoG_srt+16;
 },
 _c1Huo() //  [R1]
         { []
         }
     {offset
       c1Huo: // global
           _s1H0R::P64 = P64[Sp + 8];
           _s1H0V::I64 = -I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H0V::I64, 0)) goto c1HuD; else goto c1HuE;
       c1HuD: // global
           R3 = -_s1H0V::I64;
           R2 = _s1H0R::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       c1HuE: // global
           R3 = _s1H0V::I64;
           R2 = _s1H0R::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Huo_info" {
     block_c1Huo_info:
         const _c1Huo;
         const 1;
         const 4294967326;
         const S1HoG_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.019102508 UTC

[section ""data" . Data.Bits.$fBitsInteger_$cunsafeShiftR_closure" {
     Data.Bits.$fBitsInteger_$cunsafeShiftR_closure:
         const Data.Bits.$fBitsInteger_$cunsafeShiftR_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cunsafeShiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HuW: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshiftR_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cunsafeShiftR_info" {
     Data.Bits.$fBitsInteger_$cunsafeShiftR_info:
         const Data.Bits.$fBitsInteger_$cunsafeShiftR_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S1HoG_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.023779388 UTC

[section ""data" . Data.Bits.$fBitsInteger_$crotateR_closure" {
     Data.Bits.$fBitsInteger_$crotateR_closure:
         const Data.Bits.$fBitsInteger_$crotateR_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$crotateR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Hva: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Hvb; else goto c1Hvc;
       c1Hvb: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$crotateR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Hvc: // global
           I64[Sp - 16] = block_c1Hv7_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Hvq; else goto c1Hv8;
       u1Hvq: // global
           call _c1Hv7(R1) args: 0, res: 0, upd: 0;
       c1Hv8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$crotateR_info" {
     Data.Bits.$fBitsInteger_$crotateR_info:
         const Data.Bits.$fBitsInteger_$crotateR_entry;
         const 0;
         const 8800387989518;
         const 8589934607;
         const S1HoG_srt+16;
 },
 _c1Hv7() //  [R1]
         { []
         }
     {offset
       c1Hv7: // global
           _s1H0Y::P64 = P64[Sp + 8];
           _s1H12::I64 = -I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H12::I64, 0)) goto c1Hvm; else goto c1Hvn;
       c1Hvm: // global
           R3 = -_s1H12::I64;
           R2 = _s1H0Y::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       c1Hvn: // global
           R3 = _s1H12::I64;
           R2 = _s1H0Y::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hv7_info" {
     block_c1Hv7_info:
         const _c1Hv7;
         const 1;
         const 4294967326;
         const S1HoG_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.029685668 UTC

[section ""data" . Data.Bits.$fBitsInteger_$crotateL_closure" {
     Data.Bits.$fBitsInteger_$crotateL_closure:
         const Data.Bits.$fBitsInteger_$crotateL_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$crotateL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HvF: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshift_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$crotateL_info" {
     Data.Bits.$fBitsInteger_$crotateL_info:
         const Data.Bits.$fBitsInteger_$crotateL_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S1HoG_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.034069155 UTC

[section ""data" . Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_closure" {
     Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_closure:
         const Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_info;
 },
 Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_entry() //  [R2]
         { []
         }
     {offset
       c1HvX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HvY; else goto c1HvZ;
       c1HvY: // global
           R2 = R2;
           R1 = Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HvZ: // global
           I64[Sp - 8] = block_c1HvQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Hw6; else goto c1HvR;
       u1Hw6: // global
           call _c1HvQ(R1) args: 0, res: 0, upd: 0;
       c1HvR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_info" {
     Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_info:
         const Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HvQ() //  [R1]
         { []
         }
     {offset
       c1HvQ: // global
           if (R1 & 7 == 1) goto c1HvU; else goto c1HvV;
       c1HvU: // global
           R1 = Data.Bits.$fBitsBool1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1HvV: // global
           R1 = Data.Bits.$fBitsBool2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HvQ_info" {
     block_c1HvQ_info:
         const _c1HvQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.040304187 UTC

[section ""data" . Data.Bits.$fBitsInt_$cpopCount_closure" {
     Data.Bits.$fBitsInt_$cpopCount_closure:
         const Data.Bits.$fBitsInt_$cpopCount_info;
 },
 Data.Bits.$fBitsInt_$cpopCount_entry() //  [R2]
         { []
         }
     {offset
       c1Hws: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HwG; else goto c1HwH;
       c1HwG: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cpopCount_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HwH: // global
           I64[Sp - 8] = block_c1Hwp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HwL; else goto c1Hwq;
       u1HwL: // global
           call _c1Hwp(R1) args: 0, res: 0, upd: 0;
       c1Hwq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cpopCount_info" {
     Data.Bits.$fBitsInt_$cpopCount_info:
         const Data.Bits.$fBitsInt_$cpopCount_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Hwp() //  [R1]
         { []
         }
     {offset
       c1Hwp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HwK; else goto c1HwJ;
       c1HwK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HwJ: // global
           (_c1Hwy::I64) = call MO_PopCnt W64(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _c1Hwy::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hwp_info" {
     block_c1Hwp_info:
         const _c1Hwp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.047074756 UTC

[section ""data" . Data.Bits.$fBitsInt_$cunsafeShiftR_closure" {
     Data.Bits.$fBitsInt_$cunsafeShiftR_closure:
         const Data.Bits.$fBitsInt_$cunsafeShiftR_info;
 },
 Data.Bits.$fBitsInt_$cunsafeShiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Hx5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Hxh; else goto c1Hxi;
       c1Hxh: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cunsafeShiftR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Hxi: // global
           I64[Sp - 16] = block_c1Hx2_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Hxo; else goto c1Hx3;
       u1Hxo: // global
           call _c1Hx2(R1) args: 0, res: 0, upd: 0;
       c1Hx3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cunsafeShiftR_info" {
     Data.Bits.$fBitsInt_$cunsafeShiftR_info:
         const Data.Bits.$fBitsInt_$cunsafeShiftR_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Hx2() //  [R1]
         { []
         }
     {offset
       c1Hx2: // global
           I64[Sp] = block_c1Hx8_info;
           _s1H1g::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H1g::I64;
           if (R1 & 7 != 0) goto u1Hxn; else goto c1Hx9;
       u1Hxn: // global
           call _c1Hx8(R1) args: 0, res: 0, upd: 0;
       c1Hx9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hx2_info" {
     block_c1Hx2_info:
         const _c1Hx2;
         const 1;
         const 30;
 },
 _c1Hx8() //  [R1]
         { []
         }
     {offset
       c1Hx8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Hxm; else goto c1Hxl;
       c1Hxm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Hxl: // global
           _s1H1j::I64 = %MO_S_Shr_W64(I64[Sp + 8], I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1H1j::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hx8_info" {
     block_c1Hx8_info:
         const _c1Hx8;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.054959696 UTC

[section ""data" . lvl_r1CDD_closure" {
     lvl_r1CDD_closure:
         const GHC.Types.I#_con_info;
         const (-1);
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.058473678 UTC

[section ""data" . Data.Bits.$fBitsInt_$cshiftR_closure" {
     Data.Bits.$fBitsInt_$cshiftR_closure:
         const Data.Bits.$fBitsInt_$cshiftR_info;
 },
 Data.Bits.$fBitsInt_$cshiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HxP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HxT; else goto c1HxU;
       c1HxT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cshiftR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HxU: // global
           I64[Sp - 16] = block_c1HxM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Hyk; else goto c1HxN;
       u1Hyk: // global
           call _c1HxM(R1) args: 0, res: 0, upd: 0;
       c1HxN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cshiftR_info" {
     Data.Bits.$fBitsInt_$cshiftR_info:
         const Data.Bits.$fBitsInt_$cshiftR_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HxM() //  [R1]
         { []
         }
     {offset
       c1HxM: // global
           I64[Sp] = block_c1HxS_info;
           _s1H1n::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H1n::I64;
           if (R1 & 7 != 0) goto u1Hyj; else goto c1HxW;
       u1Hyj: // global
           call _c1HxS(R1) args: 0, res: 0, upd: 0;
       c1HxW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HxM_info" {
     block_c1HxM_info:
         const _c1HxM;
         const 1;
         const 30;
 },
 _c1HxS() //  [R1]
         { []
         }
     {offset
       c1HxS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Hy2; else goto c1Hy1;
       c1Hy2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Hy1: // global
           _s1H1n::I64 = I64[Sp + 8];
           _s1H1p::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H1p::I64, 64)) goto c1Hyb; else goto c1Hyi;
       c1Hyb: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = %MO_S_Shr_W64(_s1H1n::I64, _s1H1p::I64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1Hyi: // global
           if (%MO_S_Ge_W64(_s1H1n::I64, 0)) goto c1Hyg; else goto c1Hyh;
       c1Hyg: // global
           Hp = Hp - 16;
           R1 = Data.Bits.$fBitsBool2_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1Hyh: // global
           Hp = Hp - 16;
           R1 = lvl_r1CDD_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HxS_info" {
     block_c1HxS_info:
         const _c1HxS;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.067097673 UTC

[section ""data" . Data.Bits.$fBitsInt_$cunsafeShiftL_closure" {
     Data.Bits.$fBitsInt_$cunsafeShiftL_closure:
         const Data.Bits.$fBitsInt_$cunsafeShiftL_info;
 },
 Data.Bits.$fBitsInt_$cunsafeShiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HyM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HyY; else goto c1HyZ;
       c1HyY: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cunsafeShiftL_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HyZ: // global
           I64[Sp - 16] = block_c1HyJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Hz5; else goto c1HyK;
       u1Hz5: // global
           call _c1HyJ(R1) args: 0, res: 0, upd: 0;
       c1HyK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cunsafeShiftL_info" {
     Data.Bits.$fBitsInt_$cunsafeShiftL_info:
         const Data.Bits.$fBitsInt_$cunsafeShiftL_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HyJ() //  [R1]
         { []
         }
     {offset
       c1HyJ: // global
           I64[Sp] = block_c1HyP_info;
           _s1H1w::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H1w::I64;
           if (R1 & 7 != 0) goto u1Hz4; else goto c1HyQ;
       u1Hz4: // global
           call _c1HyP(R1) args: 0, res: 0, upd: 0;
       c1HyQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HyJ_info" {
     block_c1HyJ_info:
         const _c1HyJ;
         const 1;
         const 30;
 },
 _c1HyP() //  [R1]
         { []
         }
     {offset
       c1HyP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Hz3; else goto c1Hz2;
       c1Hz3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Hz2: // global
           _s1H1z::I64 = I64[Sp + 8] << I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1H1z::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HyP_info" {
     block_c1HyP_info:
         const _c1HyP;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.075944813 UTC

[section ""data" . Data.Bits.$fBitsInt_$cshiftL_closure" {
     Data.Bits.$fBitsInt_$cshiftL_closure:
         const Data.Bits.$fBitsInt_$cshiftL_info;
 },
 Data.Bits.$fBitsInt_$cshiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Hzv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Hzz; else goto c1HzA;
       c1Hzz: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cshiftL_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HzA: // global
           I64[Sp - 16] = block_c1Hzs_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HzU; else goto c1Hzt;
       u1HzU: // global
           call _c1Hzs(R1) args: 0, res: 0, upd: 0;
       c1Hzt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cshiftL_info" {
     Data.Bits.$fBitsInt_$cshiftL_info:
         const Data.Bits.$fBitsInt_$cshiftL_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Hzs() //  [R1]
         { []
         }
     {offset
       c1Hzs: // global
           I64[Sp] = block_c1Hzy_info;
           _s1H1D::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H1D::I64;
           if (R1 & 7 != 0) goto u1HzT; else goto c1HzC;
       u1HzT: // global
           call _c1Hzy(R1) args: 0, res: 0, upd: 0;
       c1HzC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hzs_info" {
     block_c1Hzs_info:
         const _c1Hzs;
         const 1;
         const 30;
 },
 _c1Hzy() //  [R1]
         { []
         }
     {offset
       c1Hzy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HzI; else goto c1HzH;
       c1HzI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HzH: // global
           _s1H1F::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H1F::I64, 64)) goto c1HzR; else goto c1HzS;
       c1HzR: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8] << _s1H1F::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1HzS: // global
           Hp = Hp - 16;
           R1 = Data.Bits.$fBitsBool2_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Hzy_info" {
     block_c1Hzy_info:
         const _c1Hzy;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.083727868 UTC

[section ""data" . Data.Bits.$fBitsInt_$cisSigned_closure" {
     Data.Bits.$fBitsInt_$cisSigned_closure:
         const Data.Bits.$fBitsInt_$cisSigned_info;
 },
 Data.Bits.$fBitsInt_$cisSigned_entry() //  []
         { []
         }
     {offset
       c1HAi: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cisSigned_info" {
     Data.Bits.$fBitsInt_$cisSigned_info:
         const Data.Bits.$fBitsInt_$cisSigned_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.088475997 UTC

[section ""data" . Data.Bits.$fBitsInt_$crotate_closure" {
     Data.Bits.$fBitsInt_$crotate_closure:
         const Data.Bits.$fBitsInt_$crotate_info;
 },
 Data.Bits.$fBitsInt_$crotate_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HAy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HAW; else goto c1HAX;
       c1HAW: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$crotate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HAX: // global
           I64[Sp - 16] = block_c1HAv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HB3; else goto c1HAw;
       u1HB3: // global
           call _c1HAv(R1) args: 0, res: 0, upd: 0;
       c1HAw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$crotate_info" {
     Data.Bits.$fBitsInt_$crotate_info:
         const Data.Bits.$fBitsInt_$crotate_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HAv() //  [R1]
         { []
         }
     {offset
       c1HAv: // global
           I64[Sp] = block_c1HAB_info;
           _s1H1M::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H1M::I64;
           if (R1 & 7 != 0) goto u1HB2; else goto c1HAC;
       u1HB2: // global
           call _c1HAB(R1) args: 0, res: 0, upd: 0;
       c1HAC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HAv_info" {
     block_c1HAv_info:
         const _c1HAv;
         const 1;
         const 30;
 },
 _c1HAB() //  [R1]
         { []
         }
     {offset
       c1HAB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HB1; else goto c1HB0;
       c1HB1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HB0: // global
           _s1H1P::I64 = I64[R1 + 7] & 63;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s1H1M::I64 = I64[Sp + 8];
           I64[Hp] = (_s1H1M::I64 << _s1H1P::I64) | (_s1H1M::I64 >> 64 - _s1H1P::I64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HAB_info" {
     block_c1HAB_info:
         const _c1HAB;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.098914589 UTC

[section ""data" . Data.Bits.$fBitsInt_$cshift_closure" {
     Data.Bits.$fBitsInt_$cshift_closure:
         const Data.Bits.$fBitsInt_$cshift_info;
 },
 Data.Bits.$fBitsInt_$cshift_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HBy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HBC; else goto c1HBD;
       c1HBC: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cshift_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HBD: // global
           I64[Sp - 16] = block_c1HBv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HCn; else goto c1HBw;
       u1HCn: // global
           call _c1HBv(R1) args: 0, res: 0, upd: 0;
       c1HBw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cshift_info" {
     Data.Bits.$fBitsInt_$cshift_info:
         const Data.Bits.$fBitsInt_$cshift_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HBv() //  [R1]
         { []
         }
     {offset
       c1HBv: // global
           I64[Sp] = block_c1HBB_info;
           _s1H1X::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H1X::I64;
           if (R1 & 7 != 0) goto u1HCm; else goto c1HBF;
       u1HCm: // global
           call _c1HBB(R1) args: 0, res: 0, upd: 0;
       c1HBF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HBv_info" {
     block_c1HBv_info:
         const _c1HBv;
         const 1;
         const 30;
 },
 _c1HBB() //  [R1]
         { []
         }
     {offset
       c1HBB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HBL; else goto c1HBK;
       c1HBL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HBK: // global
           _s1H1X::I64 = I64[Sp + 8];
           _s1H1Z::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H1Z::I64, 0)) goto c1HC9; else goto c1HCl;
       c1HC9: // global
           _s1H21::I64 = -_s1H1Z::I64;
           if (%MO_S_Lt_W64(_s1H21::I64, 64)) goto c1HC0; else goto c1HC7;
       c1HC0: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = %MO_S_Shr_W64(_s1H1X::I64, _s1H21::I64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1HC7: // global
           if (%MO_S_Ge_W64(_s1H1X::I64, 0)) goto c1HCk; else goto c1HC6;
       c1HC6: // global
           Hp = Hp - 16;
           R1 = lvl_r1CDD_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1HCl: // global
           if (%MO_S_Ge_W64(_s1H1Z::I64, 64)) goto c1HCk; else goto c1HCj;
       c1HCk: // global
           Hp = Hp - 16;
           R1 = Data.Bits.$fBitsBool2_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1HCj: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1H1X::I64 << _s1H1Z::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HBB_info" {
     block_c1HBB_info:
         const _c1HBB;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.10803935 UTC

[section ""data" . Data.Bits.$fBitsInt_$ccomplement_closure" {
     Data.Bits.$fBitsInt_$ccomplement_closure:
         const Data.Bits.$fBitsInt_$ccomplement_info;
 },
 Data.Bits.$fBitsInt_$ccomplement_entry() //  [R2]
         { []
         }
     {offset
       c1HCS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HCZ; else goto c1HD0;
       c1HCZ: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$ccomplement_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HD0: // global
           I64[Sp - 8] = block_c1HCP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HD4; else goto c1HCQ;
       u1HD4: // global
           call _c1HCP(R1) args: 0, res: 0, upd: 0;
       c1HCQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$ccomplement_info" {
     Data.Bits.$fBitsInt_$ccomplement_info:
         const Data.Bits.$fBitsInt_$ccomplement_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HCP() //  [R1]
         { []
         }
     {offset
       c1HCP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HD3; else goto c1HD2;
       c1HD3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HD2: // global
           _s1H2a::I64 = ~I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1H2a::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HCP_info" {
     block_c1HCP_info:
         const _c1HCP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.114613133 UTC

[section ""data" . Data.Bits.$fBitsInt_$cxor_closure" {
     Data.Bits.$fBitsInt_$cxor_closure:
         const Data.Bits.$fBitsInt_$cxor_info;
 },
 Data.Bits.$fBitsInt_$cxor_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HDo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HDA; else goto c1HDB;
       c1HDA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cxor_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HDB: // global
           I64[Sp - 16] = block_c1HDl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HDH; else goto c1HDm;
       u1HDH: // global
           call _c1HDl(R1) args: 0, res: 0, upd: 0;
       c1HDm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cxor_info" {
     Data.Bits.$fBitsInt_$cxor_info:
         const Data.Bits.$fBitsInt_$cxor_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HDl() //  [R1]
         { []
         }
     {offset
       c1HDl: // global
           I64[Sp] = block_c1HDr_info;
           _s1H2e::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H2e::I64;
           if (R1 & 7 != 0) goto u1HDG; else goto c1HDs;
       u1HDG: // global
           call _c1HDr(R1) args: 0, res: 0, upd: 0;
       c1HDs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HDl_info" {
     block_c1HDl_info:
         const _c1HDl;
         const 1;
         const 30;
 },
 _c1HDr() //  [R1]
         { []
         }
     {offset
       c1HDr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HDF; else goto c1HDE;
       c1HDF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HDE: // global
           _s1H2h::I64 = I64[Sp + 8] ^ I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1H2h::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HDr_info" {
     block_c1HDr_info:
         const _c1HDr;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.123108971 UTC

[section ""data" . Data.Bits.$fBitsInt_$c.|._closure" {
     Data.Bits.$fBitsInt_$c.|._closure:
         const Data.Bits.$fBitsInt_$c.|._info;
 },
 Data.Bits.$fBitsInt_$c.|._entry() //  [R2, R3]
         { []
         }
     {offset
       c1HE8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HEk; else goto c1HEl;
       c1HEk: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$c.|._closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HEl: // global
           I64[Sp - 16] = block_c1HE5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HEr; else goto c1HE6;
       u1HEr: // global
           call _c1HE5(R1) args: 0, res: 0, upd: 0;
       c1HE6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$c.|._info" {
     Data.Bits.$fBitsInt_$c.|._info:
         const Data.Bits.$fBitsInt_$c.|._entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HE5() //  [R1]
         { []
         }
     {offset
       c1HE5: // global
           I64[Sp] = block_c1HEb_info;
           _s1H2l::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H2l::I64;
           if (R1 & 7 != 0) goto u1HEq; else goto c1HEc;
       u1HEq: // global
           call _c1HEb(R1) args: 0, res: 0, upd: 0;
       c1HEc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HE5_info" {
     block_c1HE5_info:
         const _c1HE5;
         const 1;
         const 30;
 },
 _c1HEb() //  [R1]
         { []
         }
     {offset
       c1HEb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HEp; else goto c1HEo;
       c1HEp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HEo: // global
           _s1H2o::I64 = I64[Sp + 8] | I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1H2o::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HEb_info" {
     block_c1HEb_info:
         const _c1HEb;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.131424918 UTC

[section ""data" . Data.Bits.$fBitsInt_$c.&._closure" {
     Data.Bits.$fBitsInt_$c.&._closure:
         const Data.Bits.$fBitsInt_$c.&._info;
 },
 Data.Bits.$fBitsInt_$c.&._entry() //  [R2, R3]
         { []
         }
     {offset
       c1HES: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HF4; else goto c1HF5;
       c1HF4: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$c.&._closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HF5: // global
           I64[Sp - 16] = block_c1HEP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HFb; else goto c1HEQ;
       u1HFb: // global
           call _c1HEP(R1) args: 0, res: 0, upd: 0;
       c1HEQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$c.&._info" {
     Data.Bits.$fBitsInt_$c.&._info:
         const Data.Bits.$fBitsInt_$c.&._entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HEP() //  [R1]
         { []
         }
     {offset
       c1HEP: // global
           I64[Sp] = block_c1HEV_info;
           _s1H2s::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H2s::I64;
           if (R1 & 7 != 0) goto u1HFa; else goto c1HEW;
       u1HFa: // global
           call _c1HEV(R1) args: 0, res: 0, upd: 0;
       c1HEW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HEP_info" {
     block_c1HEP_info:
         const _c1HEP;
         const 1;
         const 30;
 },
 _c1HEV() //  [R1]
         { []
         }
     {offset
       c1HEV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HF9; else goto c1HF8;
       c1HF9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HF8: // global
           _s1H2v::I64 = I64[Sp + 8] & I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1H2v::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HEV_info" {
     block_c1HEV_info:
         const _c1HEV;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.140446631 UTC

[section ""data" . Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_closure" {
     Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_closure:
         const Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_info;
 },
 Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_entry() //  [R2]
         { []
         }
     {offset
       c1HFC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HFQ; else goto c1HFR;
       c1HFQ: // global
           R2 = R2;
           R1 = Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HFR: // global
           I64[Sp - 8] = block_c1HFz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HFV; else goto c1HFA;
       u1HFV: // global
           call _c1HFz(R1) args: 0, res: 0, upd: 0;
       c1HFA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_info" {
     Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_info:
         const Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HFz() //  [R1]
         { []
         }
     {offset
       c1HFz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HFU; else goto c1HFT;
       c1HFU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HFT: // global
           (_c1HFI::I64) = call MO_Ctz W64(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _c1HFI::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HFz_info" {
     block_c1HFz_info:
         const _c1HFz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.146590148 UTC

[section ""data" . Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_closure" {
     Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_closure:
         const Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_info;
 },
 Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_entry() //  [R2]
         { []
         }
     {offset
       c1HGh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HGv; else goto c1HGw;
       c1HGv: // global
           R2 = R2;
           R1 = Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HGw: // global
           I64[Sp - 8] = block_c1HGe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HGA; else goto c1HGf;
       u1HGA: // global
           call _c1HGe(R1) args: 0, res: 0, upd: 0;
       c1HGf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_info" {
     Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_info:
         const Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HGe() //  [R1]
         { []
         }
     {offset
       c1HGe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HGz; else goto c1HGy;
       c1HGz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HGy: // global
           (_c1HGn::I64) = call MO_Clz W64(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _c1HGn::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HGe_info" {
     block_c1HGe_info:
         const _c1HGe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.152167549 UTC

[section ""data" . Data.Bits.$fBitsInt1_closure" {
     Data.Bits.$fBitsInt1_closure:
         const GHC.Types.I#_con_info;
         const 64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.154376984 UTC

[section ""data" . Data.Bits.$fBitsInt_$cfiniteBitSize_closure" {
     Data.Bits.$fBitsInt_$cfiniteBitSize_closure:
         const Data.Bits.$fBitsInt_$cfiniteBitSize_info;
 },
 Data.Bits.$fBitsInt_$cfiniteBitSize_entry() //  []
         { []
         }
     {offset
       c1HGU: // global
           R1 = Data.Bits.$fBitsInt1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cfiniteBitSize_info" {
     Data.Bits.$fBitsInt_$cfiniteBitSize_info:
         const Data.Bits.$fBitsInt_$cfiniteBitSize_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.158672235 UTC

[section ""data" . Data.Bits.$fBitsWord_$cpopCount_closure" {
     Data.Bits.$fBitsWord_$cpopCount_closure:
         const Data.Bits.$fBitsWord_$cpopCount_info;
 },
 Data.Bits.$fBitsWord_$cpopCount_entry() //  [R2]
         { []
         }
     {offset
       c1HH9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HHk; else goto c1HHl;
       c1HHk: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cpopCount_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HHl: // global
           I64[Sp - 8] = block_c1HH6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HHp; else goto c1HH7;
       u1HHp: // global
           call _c1HH6(R1) args: 0, res: 0, upd: 0;
       c1HH7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cpopCount_info" {
     Data.Bits.$fBitsWord_$cpopCount_info:
         const Data.Bits.$fBitsWord_$cpopCount_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HH6() //  [R1]
         { []
         }
     {offset
       c1HH6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HHo; else goto c1HHn;
       c1HHo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HHn: // global
           (_c1HHc::I64) = call MO_PopCnt W64(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _c1HHc::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HH6_info" {
     block_c1HH6_info:
         const _c1HH6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.165861155 UTC

[section ""data" . Data.Bits.$fBitsWord_$cunsafeShiftR_closure" {
     Data.Bits.$fBitsWord_$cunsafeShiftR_closure:
         const Data.Bits.$fBitsWord_$cunsafeShiftR_info;
 },
 Data.Bits.$fBitsWord_$cunsafeShiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HHJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HHV; else goto c1HHW;
       c1HHV: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cunsafeShiftR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HHW: // global
           I64[Sp - 16] = block_c1HHG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HI2; else goto c1HHH;
       u1HI2: // global
           call _c1HHG(R1) args: 0, res: 0, upd: 0;
       c1HHH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cunsafeShiftR_info" {
     Data.Bits.$fBitsWord_$cunsafeShiftR_info:
         const Data.Bits.$fBitsWord_$cunsafeShiftR_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HHG() //  [R1]
         { []
         }
     {offset
       c1HHG: // global
           I64[Sp] = block_c1HHM_info;
           _s1H2R::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H2R::I64;
           if (R1 & 7 != 0) goto u1HI1; else goto c1HHN;
       u1HI1: // global
           call _c1HHM(R1) args: 0, res: 0, upd: 0;
       c1HHN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HHG_info" {
     block_c1HHG_info:
         const _c1HHG;
         const 1;
         const 30;
 },
 _c1HHM() //  [R1]
         { []
         }
     {offset
       c1HHM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HI0; else goto c1HHZ;
       c1HI0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HHZ: // global
           _s1H2U::I64 = I64[Sp + 8] >> I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1H2U::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HHM_info" {
     block_c1HHM_info:
         const _c1HHM;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.173962336 UTC

[section ""data" . Data.Bits.$fBitsWord1_closure" {
     Data.Bits.$fBitsWord1_closure:
         const GHC.Types.W#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.177508432 UTC

[section ""data" . Data.Bits.$fBitsWord_$cshiftR_closure" {
     Data.Bits.$fBitsWord_$cshiftR_closure:
         const Data.Bits.$fBitsWord_$cshiftR_info;
 },
 Data.Bits.$fBitsWord_$cshiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HIt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HIx; else goto c1HIy;
       c1HIx: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cshiftR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HIy: // global
           I64[Sp - 16] = block_c1HIq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HIS; else goto c1HIr;
       u1HIS: // global
           call _c1HIq(R1) args: 0, res: 0, upd: 0;
       c1HIr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cshiftR_info" {
     Data.Bits.$fBitsWord_$cshiftR_info:
         const Data.Bits.$fBitsWord_$cshiftR_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HIq() //  [R1]
         { []
         }
     {offset
       c1HIq: // global
           I64[Sp] = block_c1HIw_info;
           _s1H2Y::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H2Y::I64;
           if (R1 & 7 != 0) goto u1HIR; else goto c1HIA;
       u1HIR: // global
           call _c1HIw(R1) args: 0, res: 0, upd: 0;
       c1HIA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HIq_info" {
     block_c1HIq_info:
         const _c1HIq;
         const 1;
         const 30;
 },
 _c1HIw() //  [R1]
         { []
         }
     {offset
       c1HIw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HIG; else goto c1HIF;
       c1HIG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HIF: // global
           _s1H30::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H30::I64, 64)) goto c1HIP; else goto c1HIQ;
       c1HIP: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = I64[Sp + 8] >> _s1H30::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1HIQ: // global
           Hp = Hp - 16;
           R1 = Data.Bits.$fBitsWord1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HIw_info" {
     block_c1HIw_info:
         const _c1HIw;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.186245112 UTC

[section ""data" . Data.Bits.$fBitsWord_$cunsafeShiftL_closure" {
     Data.Bits.$fBitsWord_$cunsafeShiftL_closure:
         const Data.Bits.$fBitsWord_$cunsafeShiftL_info;
 },
 Data.Bits.$fBitsWord_$cunsafeShiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HJj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HJv; else goto c1HJw;
       c1HJv: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cunsafeShiftL_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HJw: // global
           I64[Sp - 16] = block_c1HJg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HJC; else goto c1HJh;
       u1HJC: // global
           call _c1HJg(R1) args: 0, res: 0, upd: 0;
       c1HJh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cunsafeShiftL_info" {
     Data.Bits.$fBitsWord_$cunsafeShiftL_info:
         const Data.Bits.$fBitsWord_$cunsafeShiftL_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HJg() //  [R1]
         { []
         }
     {offset
       c1HJg: // global
           I64[Sp] = block_c1HJm_info;
           _s1H36::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H36::I64;
           if (R1 & 7 != 0) goto u1HJB; else goto c1HJn;
       u1HJB: // global
           call _c1HJm(R1) args: 0, res: 0, upd: 0;
       c1HJn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HJg_info" {
     block_c1HJg_info:
         const _c1HJg;
         const 1;
         const 30;
 },
 _c1HJm() //  [R1]
         { []
         }
     {offset
       c1HJm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HJA; else goto c1HJz;
       c1HJA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HJz: // global
           _s1H39::I64 = I64[Sp + 8] << I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1H39::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HJm_info" {
     block_c1HJm_info:
         const _c1HJm;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.194765991 UTC

[section ""data" . Data.Bits.$fBitsWord_$cshiftL_closure" {
     Data.Bits.$fBitsWord_$cshiftL_closure:
         const Data.Bits.$fBitsWord_$cshiftL_info;
 },
 Data.Bits.$fBitsWord_$cshiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HK2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HK6; else goto c1HK7;
       c1HK6: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cshiftL_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HK7: // global
           I64[Sp - 16] = block_c1HJZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HKr; else goto c1HK0;
       u1HKr: // global
           call _c1HJZ(R1) args: 0, res: 0, upd: 0;
       c1HK0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cshiftL_info" {
     Data.Bits.$fBitsWord_$cshiftL_info:
         const Data.Bits.$fBitsWord_$cshiftL_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HJZ() //  [R1]
         { []
         }
     {offset
       c1HJZ: // global
           I64[Sp] = block_c1HK5_info;
           _s1H3d::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H3d::I64;
           if (R1 & 7 != 0) goto u1HKq; else goto c1HK9;
       u1HKq: // global
           call _c1HK5(R1) args: 0, res: 0, upd: 0;
       c1HK9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HJZ_info" {
     block_c1HJZ_info:
         const _c1HJZ;
         const 1;
         const 30;
 },
 _c1HK5() //  [R1]
         { []
         }
     {offset
       c1HK5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HKf; else goto c1HKe;
       c1HKf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HKe: // global
           _s1H3f::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H3f::I64, 64)) goto c1HKo; else goto c1HKp;
       c1HKo: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = I64[Sp + 8] << _s1H3f::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1HKp: // global
           Hp = Hp - 16;
           R1 = Data.Bits.$fBitsWord1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HK5_info" {
     block_c1HK5_info:
         const _c1HK5;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.202267459 UTC

[section ""data" . Data.Bits.$fBitsWord_$cisSigned_closure" {
     Data.Bits.$fBitsWord_$cisSigned_closure:
         const Data.Bits.$fBitsWord_$cisSigned_info;
 },
 Data.Bits.$fBitsWord_$cisSigned_entry() //  []
         { []
         }
     {offset
       c1HKP: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cisSigned_info" {
     Data.Bits.$fBitsWord_$cisSigned_info:
         const Data.Bits.$fBitsWord_$cisSigned_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.207897956 UTC

[section ""data" . Data.Bits.$fBitsWord_$crotate_closure" {
     Data.Bits.$fBitsWord_$crotate_closure:
         const Data.Bits.$fBitsWord_$crotate_info;
 },
 Data.Bits.$fBitsWord_$crotate_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HL5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1HL9; else goto c1HLa;
       c1HL9: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$crotate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HLa: // global
           I64[Sp - 16] = block_c1HL2_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HLO; else goto c1HL3;
       u1HLO: // global
           call _c1HL2(R1) args: 0, res: 0, upd: 0;
       c1HL3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$crotate_info" {
     Data.Bits.$fBitsWord_$crotate_info:
         const Data.Bits.$fBitsWord_$crotate_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HL2() //  [R1]
         { []
         }
     {offset
       c1HL2: // global
           I64[Sp - 8] = block_c1HL8_info;
           _s1H3l::P64 = R1;
           _s1H3m::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s1H3m::I64;
           P64[Sp + 8] = _s1H3l::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HLN; else goto c1HLc;
       u1HLN: // global
           call _c1HL8(R1) args: 0, res: 0, upd: 0;
       c1HLc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HL2_info" {
     block_c1HL2_info:
         const _c1HL2;
         const 1;
         const 30;
 },
 _c1HL8() //  [R1]
         { []
         }
     {offset
       c1HL8: // global
           _s1H3p::I64 = I64[R1 + 7] & 63;
           if (_s1H3p::I64 != 0) goto u1HLL; else goto c1HLH;
       u1HLL: // global
           I64[Sp + 16] = _s1H3p::I64;
           Sp = Sp + 8;
           call _c1HLl() args: 0, res: 0, upd: 0;
       c1HLH: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HL8_info" {
     block_c1HL8_info:
         const _c1HL8;
         const 66;
         const 30;
 },
 _c1HLl() //  []
         { []
         }
     {offset
       c1HLl: // global
           Hp = Hp + 16;
           _s1H3p::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c1HLE; else goto c1HLD;
       c1HLE: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c1HLk_info;
           R1 = _s1H3p::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1HLD: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           _s1H3m::I64 = I64[Sp];
           I64[Hp] = (_s1H3m::I64 << _s1H3p::I64) | (_s1H3m::I64 >> 64 - _s1H3p::I64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1HLk() //  [R1]
         { []
         }
     {offset
       c1HLk: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c1HLl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1HLk_info" {
     block_c1HLk_info:
         const _c1HLk;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.220739122 UTC

[section ""data" . Data.Bits.$fBitsWord_$cshift_closure" {
     Data.Bits.$fBitsWord_$cshift_closure:
         const Data.Bits.$fBitsWord_$cshift_info;
 },
 Data.Bits.$fBitsWord_$cshift_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HMt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HMx; else goto c1HMy;
       c1HMx: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cshift_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HMy: // global
           I64[Sp - 16] = block_c1HMq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HNc; else goto c1HMr;
       u1HNc: // global
           call _c1HMq(R1) args: 0, res: 0, upd: 0;
       c1HMr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cshift_info" {
     Data.Bits.$fBitsWord_$cshift_info:
         const Data.Bits.$fBitsWord_$cshift_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HMq() //  [R1]
         { []
         }
     {offset
       c1HMq: // global
           I64[Sp] = block_c1HMw_info;
           _s1H3x::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H3x::I64;
           if (R1 & 7 != 0) goto u1HNb; else goto c1HMA;
       u1HNb: // global
           call _c1HMw(R1) args: 0, res: 0, upd: 0;
       c1HMA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HMq_info" {
     block_c1HMq_info:
         const _c1HMq;
         const 1;
         const 30;
 },
 _c1HMw() //  [R1]
         { []
         }
     {offset
       c1HMw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HMG; else goto c1HMF;
       c1HMG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HMF: // global
           _s1H3x::I64 = I64[Sp + 8];
           _s1H3z::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H3z::I64, 0)) goto c1HMY; else goto c1HNa;
       c1HMY: // global
           _s1H3B::I64 = -_s1H3z::I64;
           if (%MO_S_Ge_W64(_s1H3B::I64, 64)) goto c1HN9; else goto c1HMV;
       c1HMV: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1H3x::I64 >> _s1H3B::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1HNa: // global
           if (%MO_S_Ge_W64(_s1H3z::I64, 64)) goto c1HN9; else goto c1HN8;
       c1HN9: // global
           Hp = Hp - 16;
           R1 = Data.Bits.$fBitsWord1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1HN8: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1H3x::I64 << _s1H3z::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HMw_info" {
     block_c1HMw_info:
         const _c1HMw;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.229559641 UTC

[section ""data" . Data.Bits.$fBitsWord_$ccomplement_closure" {
     Data.Bits.$fBitsWord_$ccomplement_closure:
         const Data.Bits.$fBitsWord_$ccomplement_info;
 },
 Data.Bits.$fBitsWord_$ccomplement_entry() //  [R2]
         { []
         }
     {offset
       c1HNG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HNN; else goto c1HNO;
       c1HNN: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$ccomplement_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HNO: // global
           I64[Sp - 8] = block_c1HND_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HNS; else goto c1HNE;
       u1HNS: // global
           call _c1HND(R1) args: 0, res: 0, upd: 0;
       c1HNE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$ccomplement_info" {
     Data.Bits.$fBitsWord_$ccomplement_info:
         const Data.Bits.$fBitsWord_$ccomplement_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HND() //  [R1]
         { []
         }
     {offset
       c1HND: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HNR; else goto c1HNQ;
       c1HNR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HNQ: // global
           _s1H3J::I64 = I64[R1 + 7] ^ 18446744073709551615;
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1H3J::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HND_info" {
     block_c1HND_info:
         const _c1HND;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.235984108 UTC

[section ""data" . Data.Bits.$fBitsWord_$cxor_closure" {
     Data.Bits.$fBitsWord_$cxor_closure:
         const Data.Bits.$fBitsWord_$cxor_info;
 },
 Data.Bits.$fBitsWord_$cxor_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HOd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HOp; else goto c1HOq;
       c1HOp: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cxor_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HOq: // global
           I64[Sp - 16] = block_c1HOa_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HOw; else goto c1HOb;
       u1HOw: // global
           call _c1HOa(R1) args: 0, res: 0, upd: 0;
       c1HOb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cxor_info" {
     Data.Bits.$fBitsWord_$cxor_info:
         const Data.Bits.$fBitsWord_$cxor_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HOa() //  [R1]
         { []
         }
     {offset
       c1HOa: // global
           I64[Sp] = block_c1HOg_info;
           _s1H3N::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H3N::I64;
           if (R1 & 7 != 0) goto u1HOv; else goto c1HOh;
       u1HOv: // global
           call _c1HOg(R1) args: 0, res: 0, upd: 0;
       c1HOh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HOa_info" {
     block_c1HOa_info:
         const _c1HOa;
         const 1;
         const 30;
 },
 _c1HOg() //  [R1]
         { []
         }
     {offset
       c1HOg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HOu; else goto c1HOt;
       c1HOu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HOt: // global
           _s1H3Q::I64 = I64[Sp + 8] ^ I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1H3Q::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HOg_info" {
     block_c1HOg_info:
         const _c1HOg;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.244395189 UTC

[section ""data" . Data.Bits.$fBitsWord_$c.|._closure" {
     Data.Bits.$fBitsWord_$c.|._closure:
         const Data.Bits.$fBitsWord_$c.|._info;
 },
 Data.Bits.$fBitsWord_$c.|._entry() //  [R2, R3]
         { []
         }
     {offset
       c1HOX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HP9; else goto c1HPa;
       c1HP9: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$c.|._closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HPa: // global
           I64[Sp - 16] = block_c1HOU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HPg; else goto c1HOV;
       u1HPg: // global
           call _c1HOU(R1) args: 0, res: 0, upd: 0;
       c1HOV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$c.|._info" {
     Data.Bits.$fBitsWord_$c.|._info:
         const Data.Bits.$fBitsWord_$c.|._entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HOU() //  [R1]
         { []
         }
     {offset
       c1HOU: // global
           I64[Sp] = block_c1HP0_info;
           _s1H3U::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H3U::I64;
           if (R1 & 7 != 0) goto u1HPf; else goto c1HP1;
       u1HPf: // global
           call _c1HP0(R1) args: 0, res: 0, upd: 0;
       c1HP1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HOU_info" {
     block_c1HOU_info:
         const _c1HOU;
         const 1;
         const 30;
 },
 _c1HP0() //  [R1]
         { []
         }
     {offset
       c1HP0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HPe; else goto c1HPd;
       c1HPe: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HPd: // global
           _s1H3X::I64 = I64[Sp + 8] | I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1H3X::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HP0_info" {
     block_c1HP0_info:
         const _c1HP0;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.252960905 UTC

[section ""data" . Data.Bits.$fBitsWord_$c.&._closure" {
     Data.Bits.$fBitsWord_$c.&._closure:
         const Data.Bits.$fBitsWord_$c.&._info;
 },
 Data.Bits.$fBitsWord_$c.&._entry() //  [R2, R3]
         { []
         }
     {offset
       c1HPH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HPT; else goto c1HPU;
       c1HPT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$c.&._closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HPU: // global
           I64[Sp - 16] = block_c1HPE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1HQ0; else goto c1HPF;
       u1HQ0: // global
           call _c1HPE(R1) args: 0, res: 0, upd: 0;
       c1HPF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$c.&._info" {
     Data.Bits.$fBitsWord_$c.&._info:
         const Data.Bits.$fBitsWord_$c.&._entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HPE() //  [R1]
         { []
         }
     {offset
       c1HPE: // global
           I64[Sp] = block_c1HPK_info;
           _s1H41::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H41::I64;
           if (R1 & 7 != 0) goto u1HPZ; else goto c1HPL;
       u1HPZ: // global
           call _c1HPK(R1) args: 0, res: 0, upd: 0;
       c1HPL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HPE_info" {
     block_c1HPE_info:
         const _c1HPE;
         const 1;
         const 30;
 },
 _c1HPK() //  [R1]
         { []
         }
     {offset
       c1HPK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HPY; else goto c1HPX;
       c1HPY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HPX: // global
           _s1H44::I64 = I64[Sp + 8] & I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1H44::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HPK_info" {
     block_c1HPK_info:
         const _c1HPK;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.262213287 UTC

[section ""data" . Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_closure" {
     Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_closure:
         const Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_info;
 },
 Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_entry() //  [R2]
         { []
         }
     {offset
       c1HQr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HQC; else goto c1HQD;
       c1HQC: // global
           R2 = R2;
           R1 = Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HQD: // global
           I64[Sp - 8] = block_c1HQo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HQH; else goto c1HQp;
       u1HQH: // global
           call _c1HQo(R1) args: 0, res: 0, upd: 0;
       c1HQp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_info" {
     Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_info:
         const Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HQo() //  [R1]
         { []
         }
     {offset
       c1HQo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HQG; else goto c1HQF;
       c1HQG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HQF: // global
           (_c1HQu::I64) = call MO_Ctz W64(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _c1HQu::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HQo_info" {
     block_c1HQo_info:
         const _c1HQo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.268774112 UTC

[section ""data" . Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_closure" {
     Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_closure:
         const Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_info;
 },
 Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_entry() //  [R2]
         { []
         }
     {offset
       c1HR3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1HRe; else goto c1HRf;
       c1HRe: // global
           R2 = R2;
           R1 = Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1HRf: // global
           I64[Sp - 8] = block_c1HR0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1HRj; else goto c1HR1;
       u1HRj: // global
           call _c1HR0(R1) args: 0, res: 0, upd: 0;
       c1HR1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_info" {
     Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_info:
         const Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1HR0() //  [R1]
         { []
         }
     {offset
       c1HR0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HRi; else goto c1HRh;
       c1HRi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HRh: // global
           (_c1HR6::I64) = call MO_Clz W64(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _c1HR6::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1HR0_info" {
     block_c1HR0_info:
         const _c1HR0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.274376008 UTC

[section ""data" . Data.Bits.$fBitsWord_$cfiniteBitSize_closure" {
     Data.Bits.$fBitsWord_$cfiniteBitSize_closure:
         const Data.Bits.$fBitsWord_$cfiniteBitSize_info;
 },
 Data.Bits.$fBitsWord_$cfiniteBitSize_entry() //  []
         { []
         }
     {offset
       c1HRC: // global
           R1 = Data.Bits.$fBitsInt1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cfiniteBitSize_info" {
     Data.Bits.$fBitsWord_$cfiniteBitSize_info:
         const Data.Bits.$fBitsWord_$cfiniteBitSize_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.280656945 UTC

[section ""data" . Data.Bits.$dmcountTrailingZeros_closure" {
     Data.Bits.$dmcountTrailingZeros_closure:
         const Data.Bits.$dmcountTrailingZeros_info;
 },
 $dBits_s1H4k_entry() //  [R1]
         { []
         }
     {offset
       c1HRW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HRX; else goto c1HRY;
       c1HRX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1HRY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.$p1FiniteBits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dBits_s1H4k_info" {
     $dBits_s1H4k_info:
         const $dBits_s1H4k_entry;
         const 1;
         const 16;
 },
 Data.Bits.$dmcountTrailingZeros_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HRZ: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c1HS0; else goto c1HS1;
       c1HS0: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$dmcountTrailingZeros_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HS1: // global
           I64[Sp - 24] = block_c1HRO_info;
           _s1H4g::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = _s1H4g::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call Data.Bits.finiteBitSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmcountTrailingZeros_info" {
     Data.Bits.$dmcountTrailingZeros_info:
         const Data.Bits.$dmcountTrailingZeros_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HRO() //  [R1]
         { []
         }
     {offset
       c1HRO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1HS4; else goto c1HS3;
       c1HS4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HS3: // global
           _s1H4j::I64 = I64[R1 + 7];
           I64[Hp - 16] = $dBits_s1H4k_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = 0;
           I64[Sp] = _s1H4j::I64;
           P64[Sp + 8] = Hp - 16;
           Sp = Sp - 8;
           call _c1HS8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1HRO_info" {
     block_c1HRO_info:
         const _c1HRO;
         const 2;
         const 30;
 },
 _c1HS8() //  []
         { []
         }
     {offset
       c1HS8: // global
           Hp = Hp + 16;
           _s1H4m::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c1HSc; else goto c1HSb;
       c1HSc: // global
           HpAlloc = 16;
           I64[Sp] = block_c1HS7_info;
           R1 = _s1H4m::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1HSb: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1H4m::I64;
           _c1HSd::P64 = Hp - 7;
           if (%MO_S_Lt_W64(_s1H4m::I64,
                            I64[Sp + 8])) goto c1HSj; else goto u1HSz;
       c1HSj: // global
           I64[Sp - 16] = block_c1HSh_info;
           R2 = P64[Sp + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[Sp + 24];
           P64[Sp - 24] = _c1HSd::P64;
           P64[Sp - 8] = _c1HSd::P64;
           Sp = Sp - 40;
           call Data.Bits.testBit_entry(R2) args: 32, res: 8, upd: 8;
       u1HSz: // global
           P64[Sp + 24] = _c1HSd::P64;
           Sp = Sp + 24;
           call _c1HSu() args: 0, res: 0, upd: 0;
     }
 },
 _c1HS7() //  [R1]
         { []
         }
     {offset
       c1HS7: // global
           I64[Sp] = R1;
           call _c1HS8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1HS7_info" {
     block_c1HS7_info:
         const _c1HS7;
         const 67;
         const 30;
 },
 _c1HSh() //  [R1]
         { []
         }
     {offset
       c1HSh: // global
           if (R1 & 7 == 1) goto c1HSp; else goto u1HSA;
       c1HSp: // global
           I64[Sp + 16] = I64[Sp + 16] + 1;
           Sp = Sp + 16;
           call _c1HS8() args: 0, res: 0, upd: 0;
       u1HSA: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call _c1HSu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1HSh_info" {
     block_c1HSh_info:
         const _c1HSh;
         const 389;
         const 30;
 },
 _c1HSu() //  []
         { []
         }
     {offset
       c1HSu: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.298100464 UTC

[section ""data" . Data.Bits.$dmcountLeadingZeros_closure" {
     Data.Bits.$dmcountLeadingZeros_closure:
         const Data.Bits.$dmcountLeadingZeros_info;
 },
 $dBits_s1H4v_entry() //  [R1]
         { []
         }
     {offset
       c1HTu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1HTv; else goto c1HTw;
       c1HTv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1HTw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.$p1FiniteBits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dBits_s1H4v_info" {
     $dBits_s1H4v_info:
         const $dBits_s1H4v_entry;
         const 1;
         const 16;
 },
 Data.Bits.$dmcountLeadingZeros_entry() //  [R2, R3]
         { []
         }
     {offset
       c1HTx: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c1HTy; else goto c1HTz;
       c1HTy: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$dmcountLeadingZeros_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HTz: // global
           I64[Sp - 24] = block_c1HTm_info;
           _s1H4r::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = _s1H4r::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call Data.Bits.finiteBitSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmcountLeadingZeros_info" {
     Data.Bits.$dmcountLeadingZeros_info:
         const Data.Bits.$dmcountLeadingZeros_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1HTm() //  [R1]
         { []
         }
     {offset
       c1HTm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1HTC; else goto c1HTB;
       c1HTC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1HTB: // global
           _s1H4u::I64 = I64[R1 + 7];
           I64[Hp - 16] = $dBits_s1H4v_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = _s1H4u::I64 - 1;
           I64[Sp] = _s1H4u::I64;
           P64[Sp + 8] = Hp - 16;
           Sp = Sp - 8;
           call _c1HUd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1HTm_info" {
     block_c1HTm_info:
         const _c1HTm;
         const 2;
         const 30;
 },
 _c1HUd() //  []
         { []
         }
     {offset
       c1HUd: // global
           Hp = Hp + 16;
           _s1H4F::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c1HUh; else goto c1HUg;
       c1HUh: // global
           HpAlloc = 16;
           I64[Sp] = block_c1HUc_info;
           R1 = _s1H4F::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1HUg: // global
           if (%MO_S_Ge_W64(_s1H4F::I64, 0)) goto c1HUo; else goto c1HUz;
       c1HUo: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1H4F::I64;
           I64[Sp - 8] = block_c1HUm_info;
           R2 = P64[Sp + 16];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 24];
           P64[Sp - 16] = Hp - 7;
           Sp = Sp - 32;
           call Data.Bits.testBit_entry(R2) args: 32, res: 8, upd: 8;
       c1HUz: // global
           Hp = Hp - 16;
           I64[Sp + 24] = _s1H4F::I64;
           Sp = Sp + 8;
           call _c1HTY() args: 0, res: 0, upd: 0;
     }
 },
 _c1HUc() //  [R1]
         { []
         }
     {offset
       c1HUc: // global
           I64[Sp] = R1;
           call _c1HUd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1HUc_info" {
     block_c1HUc_info:
         const _c1HUc;
         const 67;
         const 30;
 },
 _c1HUm() //  [R1]
         { []
         }
     {offset
       c1HUm: // global
           _s1H4F::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto c1HUu; else goto c1HUy;
       c1HUu: // global
           I64[Sp + 8] = _s1H4F::I64 - 1;
           Sp = Sp + 8;
           call _c1HUd() args: 0, res: 0, upd: 0;
       c1HUy: // global
           I64[Sp + 32] = _s1H4F::I64;
           Sp = Sp + 16;
           call _c1HTJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1HUm_info" {
     block_c1HUm_info:
         const _c1HUm;
         const 196;
         const 30;
 },
 _c1HTJ() //  []
         { []
         }
     {offset
       c1HTJ: // global
           Hp = Hp + 16;
           _s1H4x::I64 = I64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto c1HTU; else goto c1HTT;
       c1HTU: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c1HTI_info;
           R1 = _s1H4x::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1HTT: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp] + ((-1) - _s1H4x::I64);
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1HTI() //  [R1]
         { []
         }
     {offset
       c1HTI: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c1HTJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1HTI_info" {
     block_c1HTI_info:
         const _c1HTI;
         const 451;
         const 30;
 },
 _c1HTY() //  []
         { []
         }
     {offset
       c1HTY: // global
           Hp = Hp + 16;
           _s1H4B::I64 = I64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto c1HU9; else goto c1HU8;
       c1HU9: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c1HTX_info;
           R1 = _s1H4B::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1HU8: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp] + ((-1) - _s1H4B::I64);
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1HTX() //  [R1]
         { []
         }
     {offset
       c1HTX: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c1HTY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1HTX_info" {
     block_c1HTX_info:
         const _c1HTX;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.316395721 UTC

[section ""data" . Data.Bits.$dmrotateR_closure" {
     Data.Bits.$dmrotateR_closure:
         const Data.Bits.$dmrotateR_info;
 },
 sat_s1H4R_entry() //  [R1]
         { []
         }
     {offset
       c1HVZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1HW6; else goto c1HW7;
       c1HW6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1HW7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1HVW_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1HWb; else goto c1HVX;
       u1HWb: // global
           call _c1HVW(R1) args: 0, res: 0, upd: 0;
       c1HVX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H4R_info" {
     sat_s1H4R_info:
         const sat_s1H4R_entry;
         const 1;
         const 16;
 },
 _c1HVW() //  [R1]
         { []
         }
     {offset
       c1HVW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HWa; else goto c1HW9;
       c1HWa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1HW9: // global
           _s1H4Q::I64 = -I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1H4Q::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1HVW_info" {
     block_c1HVW_info:
         const _c1HVW;
         const 0;
         const 30;
 },
 Data.Bits.$dmrotateR_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1HWc: // global
           _s1H4N::P64 = R4;
           _s1H4M::P64 = R3;
           _s1H4L::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1HWd; else goto c1HWe;
       c1HWe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1HWg; else goto c1HWf;
       c1HWg: // global
           HpAlloc = 24;
           goto c1HWd;
       c1HWd: // global
           R4 = _s1H4N::P64;
           R3 = _s1H4M::P64;
           R2 = _s1H4L::P64;
           R1 = Data.Bits.$dmrotateR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HWf: // global
           I64[Hp - 16] = sat_s1H4R_info;
           P64[Hp] = _s1H4N::P64;
           R2 = _s1H4L::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1H4M::P64;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call Data.Bits.rotate_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmrotateR_info" {
     Data.Bits.$dmrotateR_info:
         const Data.Bits.$dmrotateR_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.324460231 UTC

[section ""data" . Data.Bits.$dmrotateL_closure" {
     Data.Bits.$dmrotateL_closure:
         const Data.Bits.$dmrotateL_info;
 },
 Data.Bits.$dmrotateL_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1HWF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1HWG; else goto c1HWH;
       c1HWG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$dmrotateL_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HWH: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call Data.Bits.rotate_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmrotateL_info" {
     Data.Bits.$dmrotateL_info:
         const Data.Bits.$dmrotateL_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.328507523 UTC

[section ""data" . Data.Bits.$dmunsafeShiftR_closure" {
     Data.Bits.$dmunsafeShiftR_closure:
         const Data.Bits.$dmunsafeShiftR_info;
 },
 Data.Bits.$dmunsafeShiftR_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1HWS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1HWT; else goto c1HWU;
       c1HWT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$dmunsafeShiftR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HWU: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call Data.Bits.shiftR_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmunsafeShiftR_info" {
     Data.Bits.$dmunsafeShiftR_info:
         const Data.Bits.$dmunsafeShiftR_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.333916278 UTC

[section ""data" . Data.Bits.$dmshiftR_closure" {
     Data.Bits.$dmshiftR_closure:
         const Data.Bits.$dmshiftR_info;
 },
 sat_s1H54_entry() //  [R1]
         { []
         }
     {offset
       c1HXc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1HXj; else goto c1HXk;
       c1HXj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1HXk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1HX9_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1HXo; else goto c1HXa;
       u1HXo: // global
           call _c1HX9(R1) args: 0, res: 0, upd: 0;
       c1HXa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H54_info" {
     sat_s1H54_info:
         const sat_s1H54_entry;
         const 1;
         const 16;
 },
 _c1HX9() //  [R1]
         { []
         }
     {offset
       c1HX9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1HXn; else goto c1HXm;
       c1HXn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1HXm: // global
           _s1H53::I64 = -I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1H53::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1HX9_info" {
     block_c1HX9_info:
         const _c1HX9;
         const 0;
         const 30;
 },
 Data.Bits.$dmshiftR_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1HXp: // global
           _s1H50::P64 = R4;
           _s1H4Z::P64 = R3;
           _s1H4Y::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1HXq; else goto c1HXr;
       c1HXr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1HXt; else goto c1HXs;
       c1HXt: // global
           HpAlloc = 24;
           goto c1HXq;
       c1HXq: // global
           R4 = _s1H50::P64;
           R3 = _s1H4Z::P64;
           R2 = _s1H4Y::P64;
           R1 = Data.Bits.$dmshiftR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HXs: // global
           I64[Hp - 16] = sat_s1H54_info;
           P64[Hp] = _s1H50::P64;
           R2 = _s1H4Y::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1H4Z::P64;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call Data.Bits.shift_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmshiftR_info" {
     Data.Bits.$dmshiftR_info:
         const Data.Bits.$dmshiftR_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.342703901 UTC

[section ""data" . Data.Bits.$dmunsafeShiftL_closure" {
     Data.Bits.$dmunsafeShiftL_closure:
         const Data.Bits.$dmunsafeShiftL_info;
 },
 Data.Bits.$dmunsafeShiftL_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1HXS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1HXT; else goto c1HXU;
       c1HXT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$dmunsafeShiftL_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HXU: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call Data.Bits.shiftL_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmunsafeShiftL_info" {
     Data.Bits.$dmunsafeShiftL_info:
         const Data.Bits.$dmunsafeShiftL_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.346865624 UTC

[section ""data" . Data.Bits.$dmshiftL_closure" {
     Data.Bits.$dmshiftL_closure:
         const Data.Bits.$dmshiftL_info;
 },
 Data.Bits.$dmshiftL_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1HY5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1HY6; else goto c1HY7;
       c1HY6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$dmshiftL_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HY7: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call Data.Bits.shift_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmshiftL_info" {
     Data.Bits.$dmshiftL_info:
         const Data.Bits.$dmshiftL_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.351468897 UTC

[section ""data" . Data.Bits.$dmcomplementBit_closure" {
     Data.Bits.$dmcomplementBit_closure:
         const Data.Bits.$dmcomplementBit_info;
 },
 sat_s1H5e_entry() //  [R1]
         { []
         }
     {offset
       c1HYm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1HYn; else goto c1HYo;
       c1HYn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1HYo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Bits.bit_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H5e_info" {
     sat_s1H5e_info:
         const sat_s1H5e_entry;
         const 2;
         const 18;
 },
 Data.Bits.$dmcomplementBit_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1HYp: // global
           _s1H5d::P64 = R4;
           _s1H5c::P64 = R3;
           _s1H5b::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1HYq; else goto c1HYr;
       c1HYr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1HYt; else goto c1HYs;
       c1HYt: // global
           HpAlloc = 32;
           goto c1HYq;
       c1HYq: // global
           R4 = _s1H5d::P64;
           R3 = _s1H5c::P64;
           R2 = _s1H5b::P64;
           R1 = Data.Bits.$dmcomplementBit_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HYs: // global
           I64[Hp - 24] = sat_s1H5e_info;
           P64[Hp - 8] = _s1H5b::P64;
           P64[Hp] = _s1H5d::P64;
           R2 = _s1H5b::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1H5c::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call Data.Bits.xor_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmcomplementBit_info" {
     Data.Bits.$dmcomplementBit_info:
         const Data.Bits.$dmcomplementBit_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.358968432 UTC

[section ""data" . Data.Bits.$dmclearBit_closure" {
     Data.Bits.$dmclearBit_closure:
         const Data.Bits.$dmclearBit_info;
 },
 sat_s1H5i_entry() //  [R1]
         { []
         }
     {offset
       c1HYV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1HYW; else goto c1HYX;
       c1HYW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1HYX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Bits.bit_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H5i_info" {
     sat_s1H5i_info:
         const sat_s1H5i_entry;
         const 2;
         const 18;
 },
 sat_s1H5j_entry() //  [R1]
         { []
         }
     {offset
       c1HYY: // global
           _s1H5j::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1HYZ; else goto c1HZ0;
       c1HZ0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1HZ2; else goto c1HZ1;
       c1HZ2: // global
           HpAlloc = 32;
           goto c1HYZ;
       c1HYZ: // global
           R1 = _s1H5j::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1HZ1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1H5j::P64;
           _s1H5f::P64 = P64[_s1H5j::P64 + 16];
           _s1H5h::P64 = P64[_s1H5j::P64 + 24];
           I64[Hp - 24] = sat_s1H5i_info;
           P64[Hp - 8] = _s1H5f::P64;
           P64[Hp] = _s1H5h::P64;
           R2 = _s1H5f::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call Data.Bits.complement_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H5j_info" {
     sat_s1H5j_info:
         const sat_s1H5j_entry;
         const 2;
         const 18;
 },
 Data.Bits.$dmclearBit_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1HZ3: // global
           _s1H5h::P64 = R4;
           _s1H5g::P64 = R3;
           _s1H5f::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1HZ4; else goto c1HZ5;
       c1HZ5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1HZ7; else goto c1HZ6;
       c1HZ7: // global
           HpAlloc = 32;
           goto c1HZ4;
       c1HZ4: // global
           R4 = _s1H5h::P64;
           R3 = _s1H5g::P64;
           R2 = _s1H5f::P64;
           R1 = Data.Bits.$dmclearBit_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HZ6: // global
           I64[Hp - 24] = sat_s1H5j_info;
           P64[Hp - 8] = _s1H5f::P64;
           P64[Hp] = _s1H5h::P64;
           R2 = _s1H5f::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1H5g::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call Data.Bits..&._entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmclearBit_info" {
     Data.Bits.$dmclearBit_info:
         const Data.Bits.$dmclearBit_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.367533706 UTC

[section ""data" . Data.Bits.$dmsetBit_closure" {
     Data.Bits.$dmsetBit_closure:
         const Data.Bits.$dmsetBit_info;
 },
 sat_s1H5n_entry() //  [R1]
         { []
         }
     {offset
       c1HZD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1HZE; else goto c1HZF;
       c1HZE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1HZF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Bits.bit_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H5n_info" {
     sat_s1H5n_info:
         const sat_s1H5n_entry;
         const 2;
         const 18;
 },
 Data.Bits.$dmsetBit_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1HZG: // global
           _s1H5m::P64 = R4;
           _s1H5l::P64 = R3;
           _s1H5k::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1HZH; else goto c1HZI;
       c1HZI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1HZK; else goto c1HZJ;
       c1HZK: // global
           HpAlloc = 32;
           goto c1HZH;
       c1HZH: // global
           R4 = _s1H5m::P64;
           R3 = _s1H5l::P64;
           R2 = _s1H5k::P64;
           R1 = Data.Bits.$dmsetBit_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1HZJ: // global
           I64[Hp - 24] = sat_s1H5n_info;
           P64[Hp - 8] = _s1H5k::P64;
           P64[Hp] = _s1H5m::P64;
           R2 = _s1H5k::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1H5l::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call Data.Bits..|._entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmsetBit_info" {
     Data.Bits.$dmsetBit_info:
         const Data.Bits.$dmsetBit_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.374480522 UTC

[section ""data" . Data.Bits.$dmzeroBits_closure" {
     Data.Bits.$dmzeroBits_closure:
         const Data.Bits.$dmzeroBits_info;
 },
 sat_s1H5p_entry() //  [R1]
         { []
         }
     {offset
       c1I08: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1I09; else goto c1I0a;
       c1I09: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1I0a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Bits.$fBitsBool2_closure+1;
           Sp = Sp - 32;
           call Data.Bits.bit_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H5p_info" {
     sat_s1H5p_info:
         const sat_s1H5p_entry;
         const 1;
         const 16;
 },
 Data.Bits.$dmzeroBits_entry() //  [R2]
         { []
         }
     {offset
       c1I0b: // global
           _s1H5o::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1I0c; else goto c1I0d;
       c1I0d: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1I0f; else goto c1I0e;
       c1I0f: // global
           HpAlloc = 24;
           goto c1I0c;
       c1I0c: // global
           R2 = _s1H5o::P64;
           R1 = Data.Bits.$dmzeroBits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1I0e: // global
           I64[Hp - 16] = sat_s1H5p_info;
           P64[Hp] = _s1H5o::P64;
           R2 = _s1H5o::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Data.Bits.$fBitsBool2_closure+1;
           Sp = Sp - 24;
           call Data.Bits.clearBit_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmzeroBits_info" {
     Data.Bits.$dmzeroBits_info:
         const Data.Bits.$dmzeroBits_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.381227527 UTC

[section ""data" . Data.Bits.$fBitsBool_$crotateL_closure" {
     Data.Bits.$fBitsBool_$crotateL_closure:
         const Data.Bits.$fBitsBool_$crotateL_info;
 },
 Data.Bits.$fBitsBool_$crotateL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1I0A: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsBool_$crotate_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$crotateL_info" {
     Data.Bits.$fBitsBool_$crotateL_info:
         const Data.Bits.$fBitsBool_$crotateL_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.384822876 UTC

[section ""data" . Data.Bits.$fBitsBool_$cshiftR_closure" {
     Data.Bits.$fBitsBool_$cshiftR_closure:
         const Data.Bits.$fBitsBool_$cshiftR_info;
 },
 Data.Bits.$fBitsBool_$cshiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1I0L: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsBool_$ctestBit_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cshiftR_info" {
     Data.Bits.$fBitsBool_$cshiftR_info:
         const Data.Bits.$fBitsBool_$cshiftR_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.388398431 UTC

[section ""data" . Data.Bits.$fBitsBool_$cunsafeShiftR_closure" {
     Data.Bits.$fBitsBool_$cunsafeShiftR_closure:
         const Data.Bits.$fBitsBool_$cunsafeShiftR_info;
 },
 Data.Bits.$fBitsBool_$cunsafeShiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1I0W: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsBool_$cshiftR_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cunsafeShiftR_info" {
     Data.Bits.$fBitsBool_$cunsafeShiftR_info:
         const Data.Bits.$fBitsBool_$cunsafeShiftR_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.391931765 UTC

[section ""data" . Data.Bits.$fBitsBool_$cshiftL_closure" {
     Data.Bits.$fBitsBool_$cshiftL_closure:
         const Data.Bits.$fBitsBool_$cshiftL_info;
 },
 Data.Bits.$fBitsBool_$cshiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1I17: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsBool_$ctestBit_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cshiftL_info" {
     Data.Bits.$fBitsBool_$cshiftL_info:
         const Data.Bits.$fBitsBool_$cshiftL_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.395422114 UTC

[section ""data" . Data.Bits.$fBitsBool_$cunsafeShiftL_closure" {
     Data.Bits.$fBitsBool_$cunsafeShiftL_closure:
         const Data.Bits.$fBitsBool_$cunsafeShiftL_info;
 },
 Data.Bits.$fBitsBool_$cunsafeShiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1I1i: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsBool_$cshiftL_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cunsafeShiftL_info" {
     Data.Bits.$fBitsBool_$cunsafeShiftL_info:
         const Data.Bits.$fBitsBool_$cunsafeShiftL_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.400689185 UTC

[section ""data" . Data.Bits.$fBitsBool_$ccomplementBit_closure" {
     Data.Bits.$fBitsBool_$ccomplementBit_closure:
         const Data.Bits.$fBitsBool_$ccomplementBit_info;
 },
 Data.Bits.$fBitsBool_$ccomplementBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1I1A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1I1B; else goto c1I1C;
       c1I1B: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsBool_$ccomplementBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1I1C: // global
           I64[Sp - 16] = block_c1I1t_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1I29; else goto c1I1u;
       u1I29: // global
           call _c1I1t(R1) args: 0, res: 0, upd: 0;
       c1I1u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$ccomplementBit_info" {
     Data.Bits.$fBitsBool_$ccomplementBit_info:
         const Data.Bits.$fBitsBool_$ccomplementBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1I1t() //  [R1]
         { []
         }
     {offset
       c1I1t: // global
           _s1H5r::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c1I1x; else goto c1I1y;
       c1I1x: // global
           I64[Sp + 8] = block_c1I1F_info;
           R1 = _s1H5r::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u1I27; else goto c1I1H;
       u1I27: // global
           call _c1I1F(R1) args: 0, res: 0, upd: 0;
       c1I1H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1I1y: // global
           I64[Sp + 8] = block_c1I1S_info;
           R1 = _s1H5r::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u1I28; else goto c1I1U;
       u1I28: // global
           call _c1I1S(R1) args: 0, res: 0, upd: 0;
       c1I1U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1I1t_info" {
     block_c1I1t_info:
         const _c1I1t;
         const 1;
         const 30;
 },
 _c1I1F() //  [R1]
         { []
         }
     {offset
       c1I1F: // global
           if (I64[R1 + 7] == 0) goto u1I25; else goto u1I26;
       u1I25: // global
           Sp = Sp + 8;
           call _c1I21() args: 0, res: 0, upd: 0;
       u1I26: // global
           Sp = Sp + 8;
           call _c1I22() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1I1F_info" {
     block_c1I1F_info:
         const _c1I1F;
         const 0;
         const 30;
 },
 _c1I1S() //  [R1]
         { []
         }
     {offset
       c1I1S: // global
           if (I64[R1 + 7] == 0) goto u1I23; else goto u1I24;
       u1I23: // global
           Sp = Sp + 8;
           call _c1I22() args: 0, res: 0, upd: 0;
       u1I24: // global
           Sp = Sp + 8;
           call _c1I21() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1I1S_info" {
     block_c1I1S_info:
         const _c1I1S;
         const 0;
         const 30;
 },
 _c1I22() //  []
         { []
         }
     {offset
       c1I22: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1I21() //  []
         { []
         }
     {offset
       c1I21: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.413591715 UTC

[section ""data" . Data.Bits.$fBitsBool_$cclearBit_closure" {
     Data.Bits.$fBitsBool_$cclearBit_closure:
         const Data.Bits.$fBitsBool_$cclearBit_info;
 },
 Data.Bits.$fBitsBool_$cclearBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1I2T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1I2U; else goto c1I2V;
       c1I2U: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsBool_$cclearBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1I2V: // global
           I64[Sp - 16] = block_c1I2M_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1I3g; else goto c1I2N;
       u1I3g: // global
           call _c1I2M(R1) args: 0, res: 0, upd: 0;
       c1I2N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$cclearBit_info" {
     Data.Bits.$fBitsBool_$cclearBit_info:
         const Data.Bits.$fBitsBool_$cclearBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1I2M() //  [R1]
         { []
         }
     {offset
       c1I2M: // global
           if (R1 & 7 == 1) goto u1I3c; else goto c1I2R;
       u1I3c: // global
           Sp = Sp + 16;
           call _c1I3b() args: 0, res: 0, upd: 0;
       c1I2R: // global
           _s1H5A::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1I31_info;
           R1 = _s1H5A::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u1I3e; else goto c1I33;
       u1I3e: // global
           call _c1I31(R1) args: 0, res: 0, upd: 0;
       c1I33: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1I2M_info" {
     block_c1I2M_info:
         const _c1I2M;
         const 1;
         const 30;
 },
 _c1I31() //  [R1]
         { []
         }
     {offset
       c1I31: // global
           if (I64[R1 + 7] == 0) goto u1I3d; else goto c1I3a;
       u1I3d: // global
           Sp = Sp + 8;
           call _c1I3b() args: 0, res: 0, upd: 0;
       c1I3a: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1I31_info" {
     block_c1I31_info:
         const _c1I31;
         const 0;
         const 30;
 },
 _c1I3b() //  []
         { []
         }
     {offset
       c1I3b: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.422273768 UTC

[section ""data" . Data.Bits.$fBitsBool_$csetBit_closure" {
     Data.Bits.$fBitsBool_$csetBit_closure:
         const Data.Bits.$fBitsBool_$csetBit_info;
 },
 Data.Bits.$fBitsBool_$csetBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1I3Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1I3R; else goto c1I3S;
       c1I3R: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsBool_$csetBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1I3S: // global
           I64[Sp - 16] = block_c1I3J_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1I3Z; else goto c1I3K;
       u1I3Z: // global
           call _c1I3J(R1) args: 0, res: 0, upd: 0;
       c1I3K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$csetBit_info" {
     Data.Bits.$fBitsBool_$csetBit_info:
         const Data.Bits.$fBitsBool_$csetBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1I3J() //  [R1]
         { []
         }
     {offset
       c1I3J: // global
           if (R1 & 7 == 1) goto c1I3N; else goto c1I3O;
       c1I3N: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Bits.$fBitsBool_$cbit_entry(R2) args: 8, res: 0, upd: 8;
       c1I3O: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1I3J_info" {
     block_c1I3J_info:
         const _c1I3J;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.428056738 UTC

[section ""data" . Data.Bits.$fBitsBool_$crotateR_closure" {
     Data.Bits.$fBitsBool_$crotateR_closure:
         const Data.Bits.$fBitsBool_$crotateR_info;
 },
 Data.Bits.$fBitsBool_$crotateR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1I4i: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsBool_$crotate_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsBool_$crotateR_info" {
     Data.Bits.$fBitsBool_$crotateR_info:
         const Data.Bits.$fBitsBool_$crotateR_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.431481596 UTC

[section ""data" . Data.Bits.$fBitsBool_closure" {
     Data.Bits.$fBitsBool_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Classes.$fEqBool_closure;
         const GHC.Classes.&&_closure+2;
         const GHC.Classes.||_closure+2;
         const GHC.Classes.$fEqBool_$c/=_closure+2;
         const GHC.Classes.not_closure+1;
         const Data.Bits.$fBitsBool_$ctestBit_closure+2;
         const Data.Bits.$fBitsBool_$crotate_closure+2;
         const GHC.Types.False_closure+1;
         const Data.Bits.$fBitsBool_$cbit_closure+1;
         const Data.Bits.$fBitsBool_$csetBit_closure+2;
         const Data.Bits.$fBitsBool_$cclearBit_closure+2;
         const Data.Bits.$fBitsBool_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsBool_$ctestBit_closure+2;
         const Data.Bits.$fBitsBool_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsBool_$cbitSize_closure+1;
         const Data.Bits.$fBitsBool_$cisSigned_closure+1;
         const Data.Bits.$fBitsBool_$cshiftL_closure+2;
         const Data.Bits.$fBitsBool_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsBool_$cshiftR_closure+2;
         const Data.Bits.$fBitsBool_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsBool_$crotateL_closure+2;
         const Data.Bits.$fBitsBool_$crotateR_closure+2;
         const Data.Bits.$fBitsBool_$cpopCount_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.434079111 UTC

[section ""data" . Data.Bits.$fFiniteBitsBool_closure" {
     Data.Bits.$fFiniteBitsBool_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Data.Bits.$fBitsBool_closure+1;
         const Data.Bits.$fBitsBool_$cbitSize_closure+1;
         const Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_closure+1;
         const Data.Bits.$fFiniteBitsBool_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.43759245 UTC

[section ""data" . Data.Bits.$dmrotate_closure" {
     Data.Bits.$dmrotate_closure:
         const Data.Bits.$dmrotate_info;
 },
 Data.Bits.$dmrotate_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1I4y: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1I4z; else goto c1I4A;
       c1I4z: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$dmrotate_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1I4A: // global
           I64[Sp - 24] = block_c1I4v_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1I4W; else goto c1I4w;
       u1I4W: // global
           call _c1I4v(R1) args: 0, res: 0, upd: 0;
       c1I4w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmrotate_info" {
     Data.Bits.$dmrotate_info:
         const Data.Bits.$dmrotate_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1I4v() //  [R1]
         { []
         }
     {offset
       c1I4v: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1I4F; else goto c1I4E;
       c1I4F: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1I4E: // global
           _s1H5I::P64 = P64[Sp + 8];
           _s1H5J::P64 = P64[Sp + 16];
           _s1H5M::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1H5M::I64, 0)) goto c1I4P; else goto c1I4Q;
       c1I4P: // global
           if (%MO_S_Le_W64(_s1H5M::I64, 0)) goto c1I4M; else goto c1I4N;
       c1I4M: // global
           Hp = Hp - 16;
           R1 = _s1H5J::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1I4N: // global
           Hp = Hp - 16;
           R2 = _s1H5I::P64;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s1H5J::P64;
           P64[Sp + 16] = R1;
           call Data.Bits.rotateL_entry(R2) args: 32, res: 0, upd: 8;
       c1I4Q: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -_s1H5M::I64;
           R2 = _s1H5I::P64;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s1H5J::P64;
           P64[Sp + 16] = Hp - 7;
           call Data.Bits.rotateR_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1I4v_info" {
     block_c1I4v_info:
         const _c1I4v;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.445579522 UTC

[section ""data" . Data.Bits.$dmshift_closure" {
     Data.Bits.$dmshift_closure:
         const Data.Bits.$dmshift_info;
 },
 Data.Bits.$dmshift_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1I5j: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1I5k; else goto c1I5l;
       c1I5k: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$dmshift_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1I5l: // global
           I64[Sp - 24] = block_c1I5g_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1I5H; else goto c1I5h;
       u1I5H: // global
           call _c1I5g(R1) args: 0, res: 0, upd: 0;
       c1I5h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$dmshift_info" {
     Data.Bits.$dmshift_info:
         const Data.Bits.$dmshift_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1I5g() //  [R1]
         { []
         }
     {offset
       c1I5g: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1I5q; else goto c1I5p;
       c1I5q: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1I5p: // global
           _s1H5R::P64 = P64[Sp + 8];
           _s1H5S::P64 = P64[Sp + 16];
           _s1H5V::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1H5V::I64, 0)) goto c1I5A; else goto c1I5B;
       c1I5A: // global
           if (%MO_S_Le_W64(_s1H5V::I64, 0)) goto c1I5x; else goto c1I5y;
       c1I5x: // global
           Hp = Hp - 16;
           R1 = _s1H5S::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1I5y: // global
           Hp = Hp - 16;
           R2 = _s1H5R::P64;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s1H5S::P64;
           P64[Sp + 16] = R1;
           call Data.Bits.shiftL_entry(R2) args: 32, res: 0, upd: 8;
       c1I5B: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -_s1H5V::I64;
           R2 = _s1H5R::P64;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s1H5S::P64;
           P64[Sp + 16] = Hp - 7;
           call Data.Bits.shiftR_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1I5g_info" {
     block_c1I5g_info:
         const _c1I5g;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.45384776 UTC

[section ""data" . Data.Bits.bitDefault_closure" {
     Data.Bits.bitDefault_closure:
         const Data.Bits.bitDefault_info;
         const 0;
 },
 sat_s1H63_entry() //  [R1]
         { []
         }
     {offset
       c1I65: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1I66; else goto c1I67;
       c1I66: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1I67: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Bits.$fBitsInteger3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H63_info" {
     sat_s1H63_info:
         const sat_s1H63_entry;
         const 1;
         const 4294967312;
         const S1HoG_srt+48;
 },
 Data.Bits.bitDefault_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1I68: // global
           _s1H62::P64 = R4;
           _s1H61::P64 = R3;
           _s1H60::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1I69; else goto c1I6a;
       c1I6a: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1I6c; else goto c1I6b;
       c1I6c: // global
           HpAlloc = 24;
           goto c1I69;
       c1I69: // global
           R4 = _s1H62::P64;
           R3 = _s1H61::P64;
           R2 = _s1H60::P64;
           R1 = Data.Bits.bitDefault_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1I6b: // global
           I64[Hp - 16] = sat_s1H63_info;
           P64[Hp] = _s1H61::P64;
           R2 = _s1H60::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _s1H62::P64;
           Sp = Sp - 24;
           call Data.Bits.shiftL_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.bitDefault_info" {
     Data.Bits.bitDefault_info:
         const Data.Bits.bitDefault_entry;
         const 0;
         const 1103806595086;
         const 12884901911;
         const S1HoG_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.461988204 UTC

[section ""data" . Data.Bits.testBitDefault_closure" {
     Data.Bits.testBitDefault_closure:
         const Data.Bits.testBitDefault_info;
         const 0;
 },
 sat_s1H6b_entry() //  [R1]
         { []
         }
     {offset
       c1I6A: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1I6B; else goto c1I6C;
       c1I6B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1I6C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Bits.$fBitsInteger_$czeroBits_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H6b_info" {
     sat_s1H6b_info:
         const sat_s1H6b_entry;
         const 1;
         const 4294967312;
         const S1HoG_srt+120;
 },
 sat_s1H69_entry() //  [R1]
         { []
         }
     {offset
       c1I6L: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1I6M; else goto c1I6N;
       c1I6M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1I6N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Bits.bit_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H69_info" {
     sat_s1H69_info:
         const sat_s1H69_entry;
         const 2;
         const 18;
 },
 sat_s1H6a_entry() //  [R1]
         { []
         }
     {offset
       c1I6O: // global
           _s1H6a::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1I6P; else goto c1I6Q;
       c1I6Q: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1I6S; else goto c1I6R;
       c1I6S: // global
           HpAlloc = 32;
           goto c1I6P;
       c1I6P: // global
           R1 = _s1H6a::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1I6R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1H6a::P64;
           _s1H64::P64 = P64[_s1H6a::P64 + 16];
           _s1H66::P64 = P64[_s1H6a::P64 + 24];
           _s1H67::P64 = P64[_s1H6a::P64 + 32];
           I64[Hp - 24] = sat_s1H69_info;
           P64[Hp - 8] = _s1H64::P64;
           P64[Hp] = _s1H67::P64;
           R2 = _s1H64::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s1H66::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 40;
           call Data.Bits..&._entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H6a_info" {
     sat_s1H6a_info:
         const sat_s1H6a_entry;
         const 3;
         const 15;
 },
 Data.Bits.testBitDefault_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1I6V: // global
           _s1H67::P64 = R5;
           _s1H66::P64 = R4;
           _s1H65::P64 = R3;
           _s1H64::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1I6W; else goto c1I6X;
       c1I6X: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c1I6Z; else goto c1I6Y;
       c1I6Z: // global
           HpAlloc = 64;
           goto c1I6W;
       c1I6W: // global
           R5 = _s1H67::P64;
           R4 = _s1H66::P64;
           R3 = _s1H65::P64;
           R2 = _s1H64::P64;
           R1 = Data.Bits.testBitDefault_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1I6Y: // global
           I64[Hp - 56] = sat_s1H6b_info;
           P64[Hp - 40] = _s1H65::P64;
           I64[Hp - 32] = sat_s1H6a_info;
           P64[Hp - 16] = _s1H64::P64;
           P64[Hp - 8] = _s1H66::P64;
           P64[Hp] = _s1H67::P64;
           I64[Sp - 24] = block_c1I6T_info;
           R2 = _s1H64::P64;
           P64[Sp - 16] = Hp - 56;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 24;
           call Data.Bits.$p1Bits_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.testBitDefault_info" {
     Data.Bits.testBitDefault_info:
         const Data.Bits.testBitDefault_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S1HoG_srt+120;
 },
 _c1I6T() //  [R1]
         { []
         }
     {offset
       c1I6T: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _c1I6w::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _c1I6w::P64;
           call GHC.Classes./=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1I6T_info" {
     block_c1I6T_info:
         const _c1I6T;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.47334716 UTC

[section ""data" . Data.Bits.$fBitsInt2_closure" {
     Data.Bits.$fBitsInt2_closure:
         const GHC.Base.Just_con_info;
         const Data.Bits.$fBitsInt1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.475548637 UTC

[section ""data" . Data.Bits.$fBitsWord_$cbitSizeMaybe_closure" {
     Data.Bits.$fBitsWord_$cbitSizeMaybe_closure:
         const Data.Bits.$fBitsWord_$cbitSizeMaybe_info;
 },
 Data.Bits.$fBitsWord_$cbitSizeMaybe_entry() //  []
         { []
         }
     {offset
       c1I7J: // global
           R1 = Data.Bits.$fBitsInt2_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cbitSizeMaybe_info" {
     Data.Bits.$fBitsWord_$cbitSizeMaybe_info:
         const Data.Bits.$fBitsWord_$cbitSizeMaybe_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.480073849 UTC

[section ""data" . Data.Bits.$fBitsWord_$cbit_closure" {
     Data.Bits.$fBitsWord_$cbit_closure:
         const Data.Bits.$fBitsWord_$cbit_info;
 },
 Data.Bits.$fBitsWord_$cbit_entry() //  [R2]
         { []
         }
     {offset
       c1I7Y: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1I7Z; else goto c1I80;
       c1I7Z: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cbit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1I80: // global
           I64[Sp - 8] = block_c1I7V_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1I8g; else goto c1I7W;
       u1I8g: // global
           call _c1I7V(R1) args: 0, res: 0, upd: 0;
       c1I7W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cbit_info" {
     Data.Bits.$fBitsWord_$cbit_info:
         const Data.Bits.$fBitsWord_$cbit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1I7V() //  [R1]
         { []
         }
     {offset
       c1I7V: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1I85; else goto c1I84;
       c1I85: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1I84: // global
           _s1H6f::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H6f::I64, 64)) goto c1I8e; else goto c1I8f;
       c1I8e: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = 1 << _s1H6f::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1I8f: // global
           Hp = Hp - 16;
           R1 = Data.Bits.$fBitsWord1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1I7V_info" {
     block_c1I7V_info:
         const _c1I7V;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.487494857 UTC

[section ""data" . Data.Bits.$fBitsWord_$ctestBit_closure" {
     Data.Bits.$fBitsWord_$ctestBit_closure:
         const Data.Bits.$fBitsWord_$ctestBit_info;
 },
 Data.Bits.$fBitsWord_$ctestBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1I8C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1I8G; else goto c1I8H;
       c1I8G: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$ctestBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1I8H: // global
           I64[Sp - 16] = block_c1I8z_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1I9d; else goto c1I8A;
       u1I9d: // global
           call _c1I8z(R1) args: 0, res: 0, upd: 0;
       c1I8A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$ctestBit_info" {
     Data.Bits.$fBitsWord_$ctestBit_info:
         const Data.Bits.$fBitsWord_$ctestBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1I8z() //  [R1]
         { []
         }
     {offset
       c1I8z: // global
           I64[Sp] = block_c1I8F_info;
           _s1H6l::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H6l::I64;
           if (R1 & 7 != 0) goto u1I9c; else goto c1I8J;
       u1I9c: // global
           call _c1I8F(R1) args: 0, res: 0, upd: 0;
       c1I8J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1I8z_info" {
     block_c1I8z_info:
         const _c1I8z;
         const 1;
         const 30;
 },
 _c1I8F() //  [R1]
         { []
         }
     {offset
       c1I8F: // global
           _s1H6n::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1H6n::I64, 64)) goto c1I9b; else goto c1I9a;
       c1I9a: // global
           if (I64[Sp + 8] & (1 << _s1H6n::I64) == 0) goto c1I9b; else goto c1I8Z;
       c1I9b: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1I8Z: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1I8F_info" {
     block_c1I8F_info:
         const _c1I8F;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.497835896 UTC

[section ""data" . Data.Bits.$fBitsWord_$crotateR_closure" {
     Data.Bits.$fBitsWord_$crotateR_closure:
         const Data.Bits.$fBitsWord_$crotateR_info;
 },
 Data.Bits.$fBitsWord_$crotateR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1I9H: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1I9L; else goto c1I9M;
       c1I9L: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$crotateR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1I9M: // global
           I64[Sp - 16] = block_c1I9E_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Iat; else goto c1I9F;
       u1Iat: // global
           call _c1I9E(R1) args: 0, res: 0, upd: 0;
       c1I9F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$crotateR_info" {
     Data.Bits.$fBitsWord_$crotateR_info:
         const Data.Bits.$fBitsWord_$crotateR_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1I9E() //  [R1]
         { []
         }
     {offset
       c1I9E: // global
           I64[Sp - 8] = block_c1I9K_info;
           _s1H6t::P64 = R1;
           _s1H6u::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s1H6u::I64;
           P64[Sp + 8] = _s1H6t::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Ias; else goto c1I9O;
       u1Ias: // global
           call _c1I9K(R1) args: 0, res: 0, upd: 0;
       c1I9O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1I9E_info" {
     block_c1I9E_info:
         const _c1I9E;
         const 1;
         const 30;
 },
 _c1I9K() //  [R1]
         { []
         }
     {offset
       c1I9K: // global
           _s1H6y::I64 = -I64[R1 + 7] & 63;
           if (_s1H6y::I64 != 0) goto u1Iaq; else goto c1Iam;
       u1Iaq: // global
           I64[Sp + 16] = _s1H6y::I64;
           Sp = Sp + 8;
           call _c1Ia0() args: 0, res: 0, upd: 0;
       c1Iam: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1I9K_info" {
     block_c1I9K_info:
         const _c1I9K;
         const 66;
         const 30;
 },
 _c1Ia0() //  []
         { []
         }
     {offset
       c1Ia0: // global
           Hp = Hp + 16;
           _s1H6y::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c1Iaj; else goto c1Iai;
       c1Iaj: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c1I9Z_info;
           R1 = _s1H6y::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1Iai: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           _s1H6u::I64 = I64[Sp];
           I64[Hp] = (_s1H6u::I64 << _s1H6y::I64) | (_s1H6u::I64 >> 64 - _s1H6y::I64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1I9Z() //  [R1]
         { []
         }
     {offset
       c1I9Z: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c1Ia0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1I9Z_info" {
     block_c1I9Z_info:
         const _c1I9Z;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.509473416 UTC

[section ""data" . Data.Bits.$fBitsWord_$ccomplementBit_closure" {
     Data.Bits.$fBitsWord_$ccomplementBit_closure:
         const Data.Bits.$fBitsWord_$ccomplementBit_info;
 },
 Data.Bits.$fBitsWord_$ccomplementBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Ib8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1Ibc; else goto c1Ibd;
       c1Ibc: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$ccomplementBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Ibd: // global
           I64[Sp - 16] = block_c1Ib5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1IbA; else goto c1Ib6;
       u1IbA: // global
           call _c1Ib5(R1) args: 0, res: 0, upd: 0;
       c1Ib6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$ccomplementBit_info" {
     Data.Bits.$fBitsWord_$ccomplementBit_info:
         const Data.Bits.$fBitsWord_$ccomplementBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Ib5() //  [R1]
         { []
         }
     {offset
       c1Ib5: // global
           I64[Sp - 8] = block_c1Ibb_info;
           _s1H6F::P64 = R1;
           _s1H6G::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s1H6G::I64;
           P64[Sp + 8] = _s1H6F::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Ibz; else goto c1Ibf;
       u1Ibz: // global
           call _c1Ibb(R1) args: 0, res: 0, upd: 0;
       c1Ibf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Ib5_info" {
     block_c1Ib5_info:
         const _c1Ib5;
         const 1;
         const 30;
 },
 _c1Ibb() //  [R1]
         { []
         }
     {offset
       c1Ibb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Ibl; else goto c1Ibk;
       c1Ibl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Ibk: // global
           _s1H6I::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H6I::I64, 64)) goto c1Ibx; else goto c1Iby;
       c1Ibx: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = I64[Sp + 8] ^ (1 << _s1H6I::I64);
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1Iby: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Ibb_info" {
     block_c1Ibb_info:
         const _c1Ibb;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.518822186 UTC

[section ""data" . Data.Bits.$fBitsWord_$cclearBit_closure" {
     Data.Bits.$fBitsWord_$cclearBit_closure:
         const Data.Bits.$fBitsWord_$cclearBit_info;
 },
 Data.Bits.$fBitsWord_$cclearBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Ic4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Ic8; else goto c1Ic9;
       c1Ic8: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$cclearBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Ic9: // global
           I64[Sp - 16] = block_c1Ic1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1IcE; else goto c1Ic2;
       u1IcE: // global
           call _c1Ic1(R1) args: 0, res: 0, upd: 0;
       c1Ic2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$cclearBit_info" {
     Data.Bits.$fBitsWord_$cclearBit_info:
         const Data.Bits.$fBitsWord_$cclearBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Ic1() //  [R1]
         { []
         }
     {offset
       c1Ic1: // global
           I64[Sp] = block_c1Ic7_info;
           _s1H6P::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H6P::I64;
           if (R1 & 7 != 0) goto u1IcD; else goto c1Icb;
       u1IcD: // global
           call _c1Ic7(R1) args: 0, res: 0, upd: 0;
       c1Icb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Ic1_info" {
     block_c1Ic1_info:
         const _c1Ic1;
         const 1;
         const 30;
 },
 _c1Ic7() //  [R1]
         { []
         }
     {offset
       c1Ic7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Ich; else goto c1Icg;
       c1Ich: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Icg: // global
           _s1H6P::I64 = I64[Sp + 8];
           _s1H6R::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H6R::I64, 64)) goto c1Icw; else goto c1IcC;
       c1Icw: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1H6P::I64 & (1 << _s1H6R::I64) ^ 18446744073709551615;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1IcC: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1H6P::I64 & 18446744073709551615;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Ic7_info" {
     block_c1Ic7_info:
         const _c1Ic7;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.528349881 UTC

[section ""data" . Data.Bits.$fBitsWord_$csetBit_closure" {
     Data.Bits.$fBitsWord_$csetBit_closure:
         const Data.Bits.$fBitsWord_$csetBit_info;
 },
 Data.Bits.$fBitsWord_$csetBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Idc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1Idg; else goto c1Idh;
       c1Idg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsWord_$csetBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Idh: // global
           I64[Sp - 16] = block_c1Id9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1IdE; else goto c1Ida;
       u1IdE: // global
           call _c1Id9(R1) args: 0, res: 0, upd: 0;
       c1Ida: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$csetBit_info" {
     Data.Bits.$fBitsWord_$csetBit_info:
         const Data.Bits.$fBitsWord_$csetBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Id9() //  [R1]
         { []
         }
     {offset
       c1Id9: // global
           I64[Sp - 8] = block_c1Idf_info;
           _s1H6Z::P64 = R1;
           _s1H70::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s1H70::I64;
           P64[Sp + 8] = _s1H6Z::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IdD; else goto c1Idj;
       u1IdD: // global
           call _c1Idf(R1) args: 0, res: 0, upd: 0;
       c1Idj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Id9_info" {
     block_c1Id9_info:
         const _c1Id9;
         const 1;
         const 30;
 },
 _c1Idf() //  [R1]
         { []
         }
     {offset
       c1Idf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Idp; else goto c1Ido;
       c1Idp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Ido: // global
           _s1H72::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H72::I64, 64)) goto c1IdB; else goto c1IdC;
       c1IdB: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = I64[Sp + 8] | (1 << _s1H72::I64);
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1IdC: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Idf_info" {
     block_c1Idf_info:
         const _c1Idf;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.537385929 UTC

[section ""data" . Data.Bits.$fBitsWord_$crotateL_closure" {
     Data.Bits.$fBitsWord_$crotateL_closure:
         const Data.Bits.$fBitsWord_$crotateL_info;
 },
 Data.Bits.$fBitsWord_$crotateL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Ie5: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsWord_$crotate_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsWord_$crotateL_info" {
     Data.Bits.$fBitsWord_$crotateL_info:
         const Data.Bits.$fBitsWord_$crotateL_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.540816882 UTC

[section ""data" . Data.Bits.$fBitsWord_closure" {
     Data.Bits.$fBitsWord_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Classes.$fEqWord_closure;
         const Data.Bits.$fBitsWord_$c.&._closure+2;
         const Data.Bits.$fBitsWord_$c.|._closure+2;
         const Data.Bits.$fBitsWord_$cxor_closure+2;
         const Data.Bits.$fBitsWord_$ccomplement_closure+1;
         const Data.Bits.$fBitsWord_$cshift_closure+2;
         const Data.Bits.$fBitsWord_$crotate_closure+2;
         const Data.Bits.$fBitsWord1_closure+1;
         const Data.Bits.$fBitsWord_$cbit_closure+1;
         const Data.Bits.$fBitsWord_$csetBit_closure+2;
         const Data.Bits.$fBitsWord_$cclearBit_closure+2;
         const Data.Bits.$fBitsWord_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsWord_$ctestBit_closure+2;
         const Data.Bits.$fBitsWord_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsWord_$cfiniteBitSize_closure+1;
         const Data.Bits.$fBitsWord_$cisSigned_closure+1;
         const Data.Bits.$fBitsWord_$cshiftL_closure+2;
         const Data.Bits.$fBitsWord_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsWord_$cshiftR_closure+2;
         const Data.Bits.$fBitsWord_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsWord_$crotateL_closure+2;
         const Data.Bits.$fBitsWord_$crotateR_closure+2;
         const Data.Bits.$fBitsWord_$cpopCount_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.542982276 UTC

[section ""data" . Data.Bits.$fFiniteBitsWord_closure" {
     Data.Bits.$fFiniteBitsWord_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Data.Bits.$fBitsWord_closure+1;
         const Data.Bits.$fBitsWord_$cfiniteBitSize_closure+1;
         const Data.Bits.$fFiniteBitsWord_$ccountLeadingZeros_closure+1;
         const Data.Bits.$fFiniteBitsWord_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.545167752 UTC

[section ""data" . Data.Bits.$fBitsInt_$cbitSizeMaybe_closure" {
     Data.Bits.$fBitsInt_$cbitSizeMaybe_closure:
         const Data.Bits.$fBitsInt_$cbitSizeMaybe_info;
 },
 Data.Bits.$fBitsInt_$cbitSizeMaybe_entry() //  []
         { []
         }
     {offset
       c1Iei: // global
           R1 = Data.Bits.$fBitsInt2_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cbitSizeMaybe_info" {
     Data.Bits.$fBitsInt_$cbitSizeMaybe_info:
         const Data.Bits.$fBitsInt_$cbitSizeMaybe_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.549053978 UTC

[section ""data" . Data.Bits.$fBitsInt_$crotateL_closure" {
     Data.Bits.$fBitsInt_$crotateL_closure:
         const Data.Bits.$fBitsInt_$crotateL_info;
 },
 Data.Bits.$fBitsInt_$crotateL_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Ieu: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInt_$crotate_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$crotateL_info" {
     Data.Bits.$fBitsInt_$crotateL_info:
         const Data.Bits.$fBitsInt_$crotateL_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.553764148 UTC

[section ""data" . Data.Bits.$fBitsInt_$crotateR_closure" {
     Data.Bits.$fBitsInt_$crotateR_closure:
         const Data.Bits.$fBitsInt_$crotateR_info;
 },
 Data.Bits.$fBitsInt_$crotateR_entry() //  [R2, R3]
         { []
         }
     {offset
       c1IeI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1If9; else goto c1Ifa;
       c1If9: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$crotateR_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Ifa: // global
           I64[Sp - 16] = block_c1IeF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Ifg; else goto c1IeG;
       u1Ifg: // global
           call _c1IeF(R1) args: 0, res: 0, upd: 0;
       c1IeG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$crotateR_info" {
     Data.Bits.$fBitsInt_$crotateR_info:
         const Data.Bits.$fBitsInt_$crotateR_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1IeF() //  [R1]
         { []
         }
     {offset
       c1IeF: // global
           I64[Sp] = block_c1IeL_info;
           _s1H7a::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H7a::I64;
           if (R1 & 7 != 0) goto u1Iff; else goto c1IeM;
       u1Iff: // global
           call _c1IeL(R1) args: 0, res: 0, upd: 0;
       c1IeM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IeF_info" {
     block_c1IeF_info:
         const _c1IeF;
         const 1;
         const 30;
 },
 _c1IeL() //  [R1]
         { []
         }
     {offset
       c1IeL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Ife; else goto c1Ifd;
       c1Ife: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Ifd: // global
           _s1H7d::I64 = -I64[R1 + 7] & 63;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s1H7a::I64 = I64[Sp + 8];
           I64[Hp] = (_s1H7a::I64 << _s1H7d::I64) | (_s1H7a::I64 >> 64 - _s1H7d::I64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IeL_info" {
     block_c1IeL_info:
         const _c1IeL;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.562690604 UTC

[section ""data" . Data.Bits.$fBitsInt_$cbit_closure" {
     Data.Bits.$fBitsInt_$cbit_closure:
         const Data.Bits.$fBitsInt_$cbit_info;
 },
 Data.Bits.$fBitsInt_$cbit_entry() //  [R2]
         { []
         }
     {offset
       c1IfL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1IfM; else goto c1IfN;
       c1IfM: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cbit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1IfN: // global
           I64[Sp - 8] = block_c1IfI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Ig3; else goto c1IfJ;
       u1Ig3: // global
           call _c1IfI(R1) args: 0, res: 0, upd: 0;
       c1IfJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cbit_info" {
     Data.Bits.$fBitsInt_$cbit_info:
         const Data.Bits.$fBitsInt_$cbit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1IfI() //  [R1]
         { []
         }
     {offset
       c1IfI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1IfS; else goto c1IfR;
       c1IfS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1IfR: // global
           _s1H7l::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H7l::I64, 64)) goto c1Ig1; else goto c1Ig2;
       c1Ig1: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = 1 << _s1H7l::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1Ig2: // global
           Hp = Hp - 16;
           R1 = Data.Bits.$fBitsBool2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IfI_info" {
     block_c1IfI_info:
         const _c1IfI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.570116871 UTC

[section ""data" . Data.Bits.$fBitsInt_$ctestBit_closure" {
     Data.Bits.$fBitsInt_$ctestBit_closure:
         const Data.Bits.$fBitsInt_$ctestBit_info;
 },
 Data.Bits.$fBitsInt_$ctestBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Igp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Igt; else goto c1Igu;
       c1Igt: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$ctestBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Igu: // global
           I64[Sp - 16] = block_c1Igm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Ih0; else goto c1Ign;
       u1Ih0: // global
           call _c1Igm(R1) args: 0, res: 0, upd: 0;
       c1Ign: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$ctestBit_info" {
     Data.Bits.$fBitsInt_$ctestBit_info:
         const Data.Bits.$fBitsInt_$ctestBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Igm() //  [R1]
         { []
         }
     {offset
       c1Igm: // global
           I64[Sp] = block_c1Igs_info;
           _s1H7r::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H7r::I64;
           if (R1 & 7 != 0) goto u1IgZ; else goto c1Igw;
       u1IgZ: // global
           call _c1Igs(R1) args: 0, res: 0, upd: 0;
       c1Igw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Igm_info" {
     block_c1Igm_info:
         const _c1Igm;
         const 1;
         const 30;
 },
 _c1Igs() //  [R1]
         { []
         }
     {offset
       c1Igs: // global
           _s1H7t::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1H7t::I64, 64)) goto c1IgY; else goto c1IgX;
       c1IgX: // global
           if (I64[Sp + 8] & (1 << _s1H7t::I64) == 0) goto c1IgY; else goto c1IgM;
       c1IgY: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1IgM: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Igs_info" {
     block_c1Igs_info:
         const _c1Igs;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.579788043 UTC

[section ""data" . Data.Bits.$fBitsInt_$csetBit_closure" {
     Data.Bits.$fBitsInt_$csetBit_closure:
         const Data.Bits.$fBitsInt_$csetBit_info;
 },
 Data.Bits.$fBitsInt_$csetBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Ihu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1Ihy; else goto c1Ihz;
       c1Ihy: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$csetBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Ihz: // global
           I64[Sp - 16] = block_c1Ihr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1IhW; else goto c1Ihs;
       u1IhW: // global
           call _c1Ihr(R1) args: 0, res: 0, upd: 0;
       c1Ihs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$csetBit_info" {
     Data.Bits.$fBitsInt_$csetBit_info:
         const Data.Bits.$fBitsInt_$csetBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Ihr() //  [R1]
         { []
         }
     {offset
       c1Ihr: // global
           I64[Sp - 8] = block_c1Ihx_info;
           _s1H7z::P64 = R1;
           _s1H7A::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s1H7A::I64;
           P64[Sp + 8] = _s1H7z::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IhV; else goto c1IhB;
       u1IhV: // global
           call _c1Ihx(R1) args: 0, res: 0, upd: 0;
       c1IhB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Ihr_info" {
     block_c1Ihr_info:
         const _c1Ihr;
         const 1;
         const 30;
 },
 _c1Ihx() //  [R1]
         { []
         }
     {offset
       c1Ihx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1IhH; else goto c1IhG;
       c1IhH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1IhG: // global
           _s1H7C::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H7C::I64, 64)) goto c1IhT; else goto c1IhU;
       c1IhT: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8] | (1 << _s1H7C::I64);
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1IhU: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Ihx_info" {
     block_c1Ihx_info:
         const _c1Ihx;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.589205506 UTC

[section ""data" . Data.Bits.$fBitsInt_$cclearBit_closure" {
     Data.Bits.$fBitsInt_$cclearBit_closure:
         const Data.Bits.$fBitsInt_$cclearBit_info;
 },
 Data.Bits.$fBitsInt_$cclearBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Iiq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Iiu; else goto c1Iiv;
       c1Iiu: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$cclearBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Iiv: // global
           I64[Sp - 16] = block_c1Iin_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Ij0; else goto c1Iio;
       u1Ij0: // global
           call _c1Iin(R1) args: 0, res: 0, upd: 0;
       c1Iio: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$cclearBit_info" {
     Data.Bits.$fBitsInt_$cclearBit_info:
         const Data.Bits.$fBitsInt_$cclearBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Iin() //  [R1]
         { []
         }
     {offset
       c1Iin: // global
           I64[Sp] = block_c1Iit_info;
           _s1H7J::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H7J::I64;
           if (R1 & 7 != 0) goto u1IiZ; else goto c1Iix;
       u1IiZ: // global
           call _c1Iit(R1) args: 0, res: 0, upd: 0;
       c1Iix: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Iin_info" {
     block_c1Iin_info:
         const _c1Iin;
         const 1;
         const 30;
 },
 _c1Iit() //  [R1]
         { []
         }
     {offset
       c1Iit: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1IiD; else goto c1IiC;
       c1IiD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1IiC: // global
           _s1H7J::I64 = I64[Sp + 8];
           _s1H7L::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H7L::I64, 64)) goto c1IiS; else goto c1IiY;
       c1IiS: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1H7J::I64 & ~(1 << _s1H7L::I64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1IiY: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1H7J::I64 & (-1);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Iit_info" {
     block_c1Iit_info:
         const _c1Iit;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.598663811 UTC

[section ""data" . Data.Bits.$fBitsInt_$ccomplementBit_closure" {
     Data.Bits.$fBitsInt_$ccomplementBit_closure:
         const Data.Bits.$fBitsInt_$ccomplementBit_info;
 },
 Data.Bits.$fBitsInt_$ccomplementBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Ijx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1IjB; else goto c1IjC;
       c1IjB: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.$fBitsInt_$ccomplementBit_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1IjC: // global
           I64[Sp - 16] = block_c1Iju_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1IjZ; else goto c1Ijv;
       u1IjZ: // global
           call _c1Iju(R1) args: 0, res: 0, upd: 0;
       c1Ijv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInt_$ccomplementBit_info" {
     Data.Bits.$fBitsInt_$ccomplementBit_info:
         const Data.Bits.$fBitsInt_$ccomplementBit_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1Iju() //  [R1]
         { []
         }
     {offset
       c1Iju: // global
           I64[Sp - 8] = block_c1IjA_info;
           _s1H7T::P64 = R1;
           _s1H7U::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s1H7U::I64;
           P64[Sp + 8] = _s1H7T::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IjY; else goto c1IjE;
       u1IjY: // global
           call _c1IjA(R1) args: 0, res: 0, upd: 0;
       c1IjE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Iju_info" {
     block_c1Iju_info:
         const _c1Iju;
         const 1;
         const 30;
 },
 _c1IjA() //  [R1]
         { []
         }
     {offset
       c1IjA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1IjK; else goto c1IjJ;
       c1IjK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1IjJ: // global
           _s1H7W::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s1H7W::I64, 64)) goto c1IjW; else goto c1IjX;
       c1IjW: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8] ^ (1 << _s1H7W::I64);
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1IjX: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IjA_info" {
     block_c1IjA_info:
         const _c1IjA;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.606437545 UTC

[section ""data" . Data.Bits.$fBitsInt_closure" {
     Data.Bits.$fBitsInt_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Classes.$fEqInt_closure;
         const Data.Bits.$fBitsInt_$c.&._closure+2;
         const Data.Bits.$fBitsInt_$c.|._closure+2;
         const Data.Bits.$fBitsInt_$cxor_closure+2;
         const Data.Bits.$fBitsInt_$ccomplement_closure+1;
         const Data.Bits.$fBitsInt_$cshift_closure+2;
         const Data.Bits.$fBitsInt_$crotate_closure+2;
         const Data.Bits.$fBitsBool2_closure+1;
         const Data.Bits.$fBitsInt_$cbit_closure+1;
         const Data.Bits.$fBitsInt_$csetBit_closure+2;
         const Data.Bits.$fBitsInt_$cclearBit_closure+2;
         const Data.Bits.$fBitsInt_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsInt_$ctestBit_closure+2;
         const Data.Bits.$fBitsInt_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsInt_$cfiniteBitSize_closure+1;
         const Data.Bits.$fBitsInt_$cisSigned_closure+1;
         const Data.Bits.$fBitsInt_$cshiftL_closure+2;
         const Data.Bits.$fBitsInt_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsInt_$cshiftR_closure+2;
         const Data.Bits.$fBitsInt_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsInt_$crotateL_closure+2;
         const Data.Bits.$fBitsInt_$crotateR_closure+2;
         const Data.Bits.$fBitsInt_$cpopCount_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.608766686 UTC

[section ""data" . Data.Bits.$fFiniteBitsInt_closure" {
     Data.Bits.$fFiniteBitsInt_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const Data.Bits.$fBitsInt_closure+1;
         const Data.Bits.$fBitsInt_$cfiniteBitSize_closure+1;
         const Data.Bits.$fFiniteBitsInt_$ccountLeadingZeros_closure+1;
         const Data.Bits.$fFiniteBitsInt_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.616088399 UTC

[section ""data" . Data.Bits.$wpopCountDefault_closure" {
     Data.Bits.$wpopCountDefault_closure:
         const Data.Bits.$wpopCountDefault_info;
         const 0;
 },
 lvl1_s1H83_entry() //  [R1]
         { []
         }
     {offset
       c1IkM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1IkN; else goto c1IkO;
       c1IkN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1IkO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Bits.$fBitsInteger3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_s1H83_info" {
     lvl1_s1H83_info:
         const lvl1_s1H83_entry;
         const 1;
         const 4294967312;
         const S1HoG_srt+48;
 },
 lvl2_s1H84_entry() //  [R1]
         { []
         }
     {offset
       c1IkR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1IkS; else goto c1IkT;
       c1IkS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1IkT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Bits.$fBitsInteger_$czeroBits_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s1H84_info" {
     lvl2_s1H84_info:
         const lvl2_s1H84_entry;
         const 1;
         const 4294967312;
         const S1HoG_srt+120;
 },
 sat_s1H8b_entry() //  [R1]
         { []
         }
     {offset
       c1Il1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1Il2; else goto c1Il3;
       c1Il2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Il3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H8b_info" {
     sat_s1H8b_info:
         const sat_s1H8b_entry;
         const 3;
         const 15;
 },
 sat_s1H8c_entry() //  [R1]
         { []
         }
     {offset
       c1Il4: // global
           _s1H8c::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1Il5; else goto c1Il6;
       c1Il6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1Il8; else goto c1Il7;
       c1Il8: // global
           HpAlloc = 40;
           goto c1Il5;
       c1Il5: // global
           R1 = _s1H8c::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Il7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1H8c::P64;
           _s1H80::P64 = P64[_s1H8c::P64 + 16];
           _s1H81::P64 = P64[_s1H8c::P64 + 24];
           _s1H83::P64 = P64[_s1H8c::P64 + 32];
           _s1H88::P64 = P64[_s1H8c::P64 + 40];
           I64[Hp - 32] = sat_s1H8b_info;
           P64[Hp - 16] = _s1H81::P64;
           P64[Hp - 8] = _s1H83::P64;
           P64[Hp] = _s1H88::P64;
           R2 = _s1H80::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s1H88::P64;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 40;
           call Data.Bits..&._entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H8c_info" {
     sat_s1H8c_info:
         const sat_s1H8c_entry;
         const 4;
         const 15;
 },
 Data.Bits.$wpopCountDefault_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1Il9: // global
           _s1H82::P64 = R4;
           _s1H81::P64 = R3;
           _s1H80::P64 = R2;
           if ((Sp + -88) < SpLim) (likely: False) goto c1Ila; else goto c1Ilb;
       c1Ilb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1Ild; else goto c1Ilc;
       c1Ild: // global
           HpAlloc = 48;
           goto c1Ila;
       c1Ila: // global
           R4 = _s1H82::P64;
           R3 = _s1H81::P64;
           R2 = _s1H80::P64;
           R1 = Data.Bits.$wpopCountDefault_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Ilc: // global
           I64[Hp - 40] = lvl1_s1H83_info;
           P64[Hp - 24] = _s1H81::P64;
           I64[Hp - 16] = lvl2_s1H84_info;
           P64[Hp] = _s1H81::P64;
           I64[Sp - 48] = block_c1Ikw_info;
           R2 = _s1H80::P64;
           P64[Sp - 40] = Hp - 40;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _s1H80::P64;
           P64[Sp - 16] = _s1H81::P64;
           P64[Sp - 8] = _s1H82::P64;
           Sp = Sp - 48;
           call Data.Bits.$p1Bits_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$wpopCountDefault_info" {
     Data.Bits.$wpopCountDefault_info:
         const Data.Bits.$wpopCountDefault_entry;
         const 0;
         const 10999411245070;
         const 12884901911;
         const S1HoG_srt+48;
 },
 _c1Ikw() //  [R1]
         { []
         }
     {offset
       c1Ikw: // global
           P64[Sp - 8] = P64[Sp + 40];
           I64[Sp] = 0;
           P64[Sp + 40] = R1;
           Sp = Sp - 8;
           call _c1IkC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Ikw_info" {
     block_c1Ikw_info:
         const _c1Ikw;
         const 5;
         const 30;
 },
 _c1IkC() //  []
         { []
         }
     {offset
       c1IkC: // global
           I64[Sp - 8] = block_c1IkF_info;
           R2 = P64[Sp + 48];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp];
           P64[Sp - 16] = P64[Sp + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c1IkF() //  [R1]
         { []
         }
     {offset
       c1IkF: // global
           _s1H87::I64 = I64[Sp + 16];
           if (R1 & 7 == 1) goto c1Ilh; else goto c1Ilo;
       c1Ilh: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1Ilk; else goto c1Ilj;
       c1Ilk: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Ilj: // global
           I64[Hp - 40] = sat_s1H8c_info;
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 16] = _s1H87::I64 + 1;
           P64[Sp + 8] = Hp - 40;
           Sp = Sp + 8;
           call _c1IkC() args: 0, res: 0, upd: 0;
       c1Ilo: // global
           R1 = _s1H87::I64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IkF_info" {
     block_c1IkF_info:
         const _c1IkF;
         const 135;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.633399886 UTC

[section ""data" . Data.Bits.popCountDefault_closure" {
     Data.Bits.popCountDefault_closure:
         const Data.Bits.popCountDefault_info;
         const 0;
 },
 Data.Bits.popCountDefault_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1ImC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1ImG; else goto c1ImH;
       c1ImG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.popCountDefault_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1ImH: // global
           I64[Sp - 8] = block_c1ImA_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Bits.$wpopCountDefault_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.popCountDefault_info" {
     Data.Bits.popCountDefault_info:
         const Data.Bits.popCountDefault_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1HoG_srt+136;
 },
 _c1ImA() //  [R1]
         { []
         }
     {offset
       c1ImA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1ImK; else goto c1ImJ;
       c1ImK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1ImJ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ImA_info" {
     block_c1ImA_info:
         const _c1ImA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.640075346 UTC

[section ""data" . Data.Bits.$fBitsInteger_closure" {
     Data.Bits.$fBitsInteger_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Integer.Type.$fEqInteger_closure;
         const GHC.Integer.Type.andInteger_closure+2;
         const GHC.Integer.Type.orInteger_closure+2;
         const GHC.Integer.Type.xorInteger_closure+2;
         const GHC.Integer.Type.complementInteger_closure+1;
         const Data.Bits.$fBitsInteger_$cshift_closure+2;
         const Data.Bits.$fBitsInteger_$cshift_closure+2;
         const Data.Bits.$fBitsInteger_$czeroBits_closure;
         const Data.Bits.$fBitsInteger_$cbit_closure+1;
         const Data.Bits.$fBitsInteger_$csetBit_closure+2;
         const Data.Bits.$fBitsInteger_$cclearBit_closure+2;
         const Data.Bits.$fBitsInteger_$ccomplementBit_closure+2;
         const Data.Bits.$fBitsInteger_$ctestBit_closure+2;
         const Data.Bits.$fBitsInteger_$cbitSizeMaybe_closure+1;
         const Data.Bits.$fBitsInteger_$cbitSize_closure+1;
         const Data.Bits.$fBitsInteger_$cisSigned_closure+1;
         const Data.Bits.$fBitsInteger_$cshiftL_closure+2;
         const Data.Bits.$fBitsInteger_$cunsafeShiftL_closure+2;
         const Data.Bits.$fBitsInteger_$cshiftR_closure+2;
         const Data.Bits.$fBitsInteger_$cunsafeShiftR_closure+2;
         const Data.Bits.$fBitsInteger_$crotateL_closure+2;
         const Data.Bits.$fBitsInteger_$crotateR_closure+2;
         const Data.Bits.$fBitsInteger_$cpopCount_closure+1;
         const 0;
 },
 section ""data" . Data.Bits.$fBitsInteger_$cpopCount_closure" {
     Data.Bits.$fBitsInteger_$cpopCount_closure:
         const Data.Bits.$fBitsInteger_$cpopCount_info;
         const 0;
 },
 Data.Bits.$fBitsInteger_$cpopCount_entry() //  [R2]
         { []
         }
     {offset
       c1In2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1In6; else goto c1In7;
       c1In6: // global
           R2 = R2;
           R1 = Data.Bits.$fBitsInteger_$cpopCount_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1In7: // global
           I64[Sp - 8] = block_c1In0_info;
           R4 = R2;
           R3 = GHC.Num.$fNumInteger_closure;
           R2 = Data.Bits.$fBitsInteger_closure+1;
           Sp = Sp - 8;
           call Data.Bits.$wpopCountDefault_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.$fBitsInteger_$cpopCount_info" {
     Data.Bits.$fBitsInteger_$cpopCount_info:
         const Data.Bits.$fBitsInteger_$cpopCount_entry;
         const 0;
         const 124554051598;
         const 4294967301;
         const S1HoG_srt+136;
 },
 _c1In0() //  [R1]
         { []
         }
     {offset
       c1In0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Ina; else goto c1In9;
       c1Ina: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1In9: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1In0_info" {
     block_c1In0_info:
         const _c1In0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.707225722 UTC

[section ""data" . Data.Bits.toIntegralSized_closure" {
     Data.Bits.toIntegralSized_closure:
         const Data.Bits.toIntegralSized_info;
         const 0;
 },
 sat_s1H8s_entry() //  [R1]
         { []
         }
     {offset
       c1InD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1InE; else goto c1InF;
       c1InE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1InF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Real.toInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H8s_info" {
     sat_s1H8s_info:
         const sat_s1H8s_entry;
         const 2;
         const 18;
 },
 y_s1H8p_entry() //  [R1]
         { []
         }
     {offset
       c1InI: // global
           _s1H8p::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1InM; else goto c1InN;
       c1InN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1InP; else goto c1InO;
       c1InP: // global
           HpAlloc = 32;
           goto c1InM;
       c1InM: // global
           R1 = _s1H8p::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1InO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1H8p::P64;
           _s1H8j::P64 = P64[_s1H8p::P64 + 16];
           _s1H8k::P64 = P64[_s1H8p::P64 + 24];
           _s1H8n::P64 = P64[_s1H8p::P64 + 32];
           I64[Hp - 24] = sat_s1H8s_info;
           P64[Hp - 8] = _s1H8j::P64;
           P64[Hp] = _s1H8n::P64;
           I64[Sp - 32] = block_c1InG_info;
           R2 = _s1H8k::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . y_s1H8p_info" {
     y_s1H8p_info:
         const y_s1H8p_entry;
         const 3;
         const 15;
 },
 _c1InG() //  [R1]
         { []
         }
     {offset
       c1InG: // global
           I64[Sp] = block_c1InL_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1InG_info" {
     block_c1InG_info:
         const _c1InG;
         const 1;
         const 30;
 },
 _c1InL() //  [R1]
         { []
         }
     {offset
       c1InL: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1InL_info" {
     block_c1InL_info:
         const _c1InL;
         const 1;
         const 30;
 },
 xSigned_s1H8v_entry() //  [R1]
         { []
         }
     {offset
       c1Io7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1Io8; else goto c1Io9;
       c1Io8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Io9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Bits.isSigned_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . xSigned_s1H8v_info" {
     xSigned_s1H8v_info:
         const xSigned_s1H8v_entry;
         const 2;
         const 18;
 },
 $dReal_s1H8w_entry() //  [R1]
         { []
         }
     {offset
       c1Ioe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Iof; else goto c1Iog;
       c1Iof: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Iog: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dReal_s1H8w_info" {
     $dReal_s1H8w_info:
         const $dReal_s1H8w_entry;
         const 1;
         const 16;
 },
 $dNum_s1H8x_entry() //  [R1]
         { []
         }
     {offset
       c1Iol: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Iom; else goto c1Ion;
       c1Iom: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Ion: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1H8x_info" {
     $dNum_s1H8x_info:
         const $dNum_s1H8x_entry;
         const 1;
         const 16;
 },
 $dOrd_s1H8y_entry() //  [R1]
         { []
         }
     {offset
       c1Ios: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Iot; else goto c1Iou;
       c1Iot: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Iou: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dOrd_s1H8y_info" {
     $dOrd_s1H8y_info:
         const $dOrd_s1H8y_entry;
         const 1;
         const 16;
 },
 sat_s1H8N_entry() //  [R1]
         { []
         }
     {offset
       c1Ipi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1Ipj; else goto c1Ipk;
       c1Ipj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Ipk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Bits.$fBitsInteger3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H8N_info" {
     sat_s1H8N_info:
         const sat_s1H8N_entry;
         const 1;
         const 4294967312;
         const S1HoG_srt+48;
 },
 sat_s1H8M_entry() //  [R1]
         { []
         }
     {offset
       c1Ipp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1Ipq; else goto c1Ipr;
       c1Ipq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Ipr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Bits.bit_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H8M_info" {
     sat_s1H8M_info:
         const sat_s1H8M_entry;
         const 2;
         const 18;
 },
 sat_s1H8O_entry() //  [R1]
         { []
         }
     {offset
       c1Ips: // global
           _s1H8O::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1Ipt; else goto c1Ipu;
       c1Ipu: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1Ipw; else goto c1Ipv;
       c1Ipw: // global
           HpAlloc = 56;
           goto c1Ipt;
       c1Ipt: // global
           R1 = _s1H8O::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Ipv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1H8O::P64;
           _s1H8l::P64 = P64[_s1H8O::P64 + 16];
           _s1H8x::P64 = P64[_s1H8O::P64 + 24];
           _s1H8K::P64 = P64[_s1H8O::P64 + 32];
           I64[Hp - 48] = sat_s1H8N_info;
           P64[Hp - 32] = _s1H8x::P64;
           I64[Hp - 24] = sat_s1H8M_info;
           P64[Hp - 8] = _s1H8l::P64;
           P64[Hp] = _s1H8K::P64;
           R2 = _s1H8x::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H8O_info" {
     sat_s1H8O_info:
         const sat_s1H8O_entry;
         const 3;
         const 4294967311;
         const S1HoG_srt+48;
 },
 sat_s1H8V_entry() //  [R1]
         { []
         }
     {offset
       c1IpH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1IpI; else goto c1IpJ;
       c1IpI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1IpJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Bits.$fBitsInteger3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H8V_info" {
     sat_s1H8V_info:
         const sat_s1H8V_entry;
         const 1;
         const 4294967312;
         const S1HoG_srt+48;
 },
 sat_s1H8T_entry() //  [R1]
         { []
         }
     {offset
       c1IpV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1Iq2; else goto c1Iq3;
       c1Iq2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Iq3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1IpS_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1Iq7; else goto c1IpT;
       u1Iq7: // global
           call _c1IpS(R1) args: 0, res: 0, upd: 0;
       c1IpT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H8T_info" {
     sat_s1H8T_info:
         const sat_s1H8T_entry;
         const 1;
         const 16;
 },
 _c1IpS() //  [R1]
         { []
         }
     {offset
       c1IpS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Iq6; else goto c1Iq5;
       c1Iq6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1Iq5: // global
           _s1H8S::I64 = I64[R1 + 7] - 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1H8S::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1IpS_info" {
     block_c1IpS_info:
         const _c1IpS;
         const 0;
         const 30;
 },
 sat_s1H8U_entry() //  [R1]
         { []
         }
     {offset
       c1Iq8: // global
           _s1H8U::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1Iq9; else goto c1Iqa;
       c1Iqa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1Iqc; else goto c1Iqb;
       c1Iqc: // global
           HpAlloc = 24;
           goto c1Iq9;
       c1Iq9: // global
           R1 = _s1H8U::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Iqb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1H8U::P64;
           _s1H8l::P64 = P64[_s1H8U::P64 + 16];
           _s1H8K::P64 = P64[_s1H8U::P64 + 24];
           I64[Hp - 16] = sat_s1H8T_info;
           P64[Hp] = _s1H8K::P64;
           R2 = _s1H8l::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Bits.bit_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H8U_info" {
     sat_s1H8U_info:
         const sat_s1H8U_entry;
         const 2;
         const 18;
 },
 sat_s1H8W_entry() //  [R1]
         { []
         }
     {offset
       c1Iqd: // global
           _s1H8W::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1Iqe; else goto c1Iqf;
       c1Iqf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1Iqh; else goto c1Iqg;
       c1Iqh: // global
           HpAlloc = 56;
           goto c1Iqe;
       c1Iqe: // global
           R1 = _s1H8W::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Iqg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1H8W::P64;
           _s1H8l::P64 = P64[_s1H8W::P64 + 16];
           _s1H8x::P64 = P64[_s1H8W::P64 + 24];
           _s1H8K::P64 = P64[_s1H8W::P64 + 32];
           I64[Hp - 48] = sat_s1H8V_info;
           P64[Hp - 32] = _s1H8x::P64;
           I64[Hp - 24] = sat_s1H8U_info;
           P64[Hp - 8] = _s1H8l::P64;
           P64[Hp] = _s1H8K::P64;
           R2 = _s1H8x::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1H8W_info" {
     sat_s1H8W_info:
         const sat_s1H8W_entry;
         const 3;
         const 4294967311;
         const S1HoG_srt+48;
 },
 sat_s1Hac_entry() //  [R1]
         { []
         }
     {offset
       c1Ire: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1Irl; else goto c1Irm;
       c1Irl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Irm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1Irb_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1Irq; else goto c1Irc;
       u1Irq: // global
           call _c1Irb(R1) args: 0, res: 0, upd: 0;
       c1Irc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Hac_info" {
     sat_s1Hac_info:
         const sat_s1Hac_entry;
         const 1;
         const 16;
 },
 _c1Irb() //  [R1]
         { []
         }
     {offset
       c1Irb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Irp; else goto c1Iro;
       c1Irp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1Iro: // global
           _s1Hab::I64 = I64[R1 + 7] - 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1Hab::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1Irb_info" {
     block_c1Irb_info:
         const _c1Irb;
         const 0;
         const 30;
 },
 sat_s1Had_entry() //  [R1]
         { []
         }
     {offset
       c1Irr: // global
           _s1Had::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1Irs; else goto c1Irt;
       c1Irt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1Irv; else goto c1Iru;
       c1Irv: // global
           HpAlloc = 24;
           goto c1Irs;
       c1Irs: // global
           R1 = _s1Had::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Iru: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1Had::P64;
           _s1H8l::P64 = P64[_s1Had::P64 + 16];
           _s1Ha8::P64 = P64[_s1Had::P64 + 24];
           I64[Hp - 16] = sat_s1Hac_info;
           P64[Hp] = _s1Ha8::P64;
           R2 = _s1H8l::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Bits.bit_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Had_info" {
     sat_s1Had_info:
         const sat_s1Had_entry;
         const 2;
         const 18;
 },
 sat_s1Hae_entry() //  [R1]
         { []
         }
     {offset
       c1Irw: // global
           _s1Hae::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1Irx; else goto c1Iry;
       c1Iry: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1IrA; else goto c1Irz;
       c1IrA: // global
           HpAlloc = 32;
           goto c1Irx;
       c1Irx: // global
           R1 = _s1Hae::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Irz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1Hae::P64;
           _s1H8l::P64 = P64[_s1Hae::P64 + 16];
           _s1H8x::P64 = P64[_s1Hae::P64 + 24];
           _s1Ha8::P64 = P64[_s1Hae::P64 + 32];
           I64[Hp - 24] = sat_s1Had_info;
           P64[Hp - 8] = _s1H8l::P64;
           P64[Hp] = _s1Ha8::P64;
           R2 = _s1H8x::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Hae_info" {
     sat_s1Hae_info:
         const sat_s1Hae_entry;
         const 3;
         const 15;
 },
 sat_s1Hai_entry() //  [R1]
         { []
         }
     {offset
       c1IrQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1IrR; else goto c1IrS;
       c1IrR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1IrS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Bits.$fBitsInteger_$czeroBits_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Hai_info" {
     sat_s1Hai_info:
         const sat_s1Hai_entry;
         const 1;
         const 4294967312;
         const S1HoG_srt+120;
 },
 Data.Bits.toIntegralSized_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1IrT: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c1IrU; else goto c1IrV;
       c1IrU: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.toIntegralSized_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1IrV: // global
           I64[Sp - 48] = block_c1Inr_info;
           _s1H8j::P64 = R2;
           R2 = R4;
           I64[Sp - 64] = stg_ap_p_info;
           P64[Sp - 56] = R6;
           P64[Sp - 40] = _s1H8j::P64;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 64;
           call Data.Bits.bitSizeMaybe_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.toIntegralSized_info" {
     Data.Bits.toIntegralSized_info:
         const Data.Bits.toIntegralSized_entry;
         const 0;
         const 283678294933518;
         const 21474836505;
         const S1HoG_srt+48;
 },
 _c1Inr() //  [R1]
         { []
         }
     {offset
       c1Inr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1IrY; else goto c1IrX;
       c1IrY: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1IrX: // global
           I64[Hp - 32] = y_s1H8p_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 40];
           I64[Sp - 8] = block_c1InV_info;
           R2 = P64[Sp + 32];
           I64[Sp - 24] = stg_ap_p_info;
           _c1Inv::P64 = Hp - 32;
           P64[Sp - 16] = _c1Inv::P64;
           P64[Sp] = R1;
           P64[Sp + 16] = _c1Inv::P64;
           Sp = Sp - 24;
           call Data.Bits.isSigned_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Inr_info" {
     block_c1Inr_info:
         const _c1Inr;
         const 5;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1InV() //  [R1]
         { []
         }
     {offset
       c1InV: // global
           I64[Sp] = block_c1InZ_info;
           R2 = P64[Sp + 40];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 24];
           P64[Sp + 40] = R1;
           Sp = Sp - 16;
           call Data.Bits.bitSizeMaybe_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1InV_info" {
     block_c1InV_info:
         const _c1InV;
         const 6;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1InZ() //  [R1]
         { []
         }
     {offset
       c1InZ: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c1Is5; else goto c1Is4;
       c1Is5: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Is4: // global
           I64[Hp - 96] = xSigned_s1H8v_info;
           P64[Hp - 80] = P64[Sp + 32];
           P64[Hp - 72] = P64[Sp + 48];
           I64[Hp - 64] = $dReal_s1H8w_info;
           P64[Hp - 48] = P64[Sp + 16];
           I64[Hp - 40] = $dNum_s1H8x_info;
           _c1Ioa::P64 = Hp - 64;
           P64[Hp - 24] = _c1Ioa::P64;
           I64[Hp - 16] = $dOrd_s1H8y_info;
           P64[Hp] = _c1Ioa::P64;
           I64[Sp - 24] = block_c1Is2_info;
           _s1H8u::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _s1H8u::P64;
           P64[Sp] = Hp - 40;
           P64[Sp + 16] = Hp - 96;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1IHp; else goto c1IEy;
       u1IHp: // global
           call _c1Is2(R1) args: 0, res: 0, upd: 0;
       c1IEy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1InZ_info" {
     block_c1InZ_info:
         const _c1InZ;
         const 6;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1Is2() //  [R1]
         { []
         }
     {offset
       c1Is2: // global
           _s1H8u::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c1IEF; else goto c1IEV;
       c1IEF: // global
           I64[Sp] = block_c1IEC_info;
           R1 = _s1H8u::P64;
           if (R1 & 7 != 0) goto u1IHz; else goto c1IEG;
       u1IHz: // global
           call _c1IEC(R1) args: 0, res: 0, upd: 0;
       c1IEG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1IEV: // global
           I64[Sp - 8] = block_c1IET_info;
           _s1HaY::P64 = P64[R1 + 6];
           R1 = _s1H8u::P64;
           P64[Sp] = _s1HaY::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IHA; else goto c1IEW;
       u1IHA: // global
           call _c1IET(R1) args: 0, res: 0, upd: 0;
       c1IEW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Is2_info" {
     block_c1Is2_info:
         const _c1Is2;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1IEC() //  [R1]
         { []
         }
     {offset
       c1IEC: // global
           if (R1 & 7 == 1) goto u1IGk; else goto u1IGl;
       u1IGk: // global
           Sp = Sp + 8;
           call _s1HaR() args: 0, res: 0, upd: 0;
       u1IGl: // global
           Sp = Sp + 8;
           call _s1H9W() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1IEC_info" {
     block_c1IEC_info:
         const _c1IEC;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1IET() //  [R1]
         { []
         }
     {offset
       c1IET: // global
           if (R1 & 7 == 1) goto u1IGh; else goto c1IFc;
       u1IGh: // global
           Sp = Sp + 16;
           call _s1H9W() args: 0, res: 0, upd: 0;
       c1IFc: // global
           I64[Sp] = block_c1IF5_info;
           _s1Hb0::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1Hb0::P64;
           if (R1 & 7 != 0) goto u1IJf; else goto c1IF6;
       u1IJf: // global
           call _c1IF5(R1) args: 0, res: 0, upd: 0;
       c1IF6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IET_info" {
     block_c1IET_info:
         const _c1IET;
         const 10;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1IF5() //  [R1]
         { []
         }
     {offset
       c1IF5: // global
           I64[Sp] = block_c1IFa_info;
           _s1Hb2::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1Hb2::I64;
           if (R1 & 7 != 0) goto u1IJh; else goto c1IFe;
       u1IJh: // global
           call _c1IFa(R1) args: 0, res: 0, upd: 0;
       c1IFe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IF5_info" {
     block_c1IF5_info:
         const _c1IF5;
         const 10;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1IFa() //  [R1]
         { []
         }
     {offset
       c1IFa: // global
           if (I64[Sp + 8] == I64[R1 + 7]) goto u1IGi; else goto u1IGj;
       u1IGi: // global
           Sp = Sp + 16;
           call _s1HaR() args: 0, res: 0, upd: 0;
       u1IGj: // global
           Sp = Sp + 16;
           call _s1H9W() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1IFa_info" {
     block_c1IFa_info:
         const _c1IFa;
         const 74;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _s1HaR() //  []
         { []
         }
     {offset
       s1HaR: // global
           I64[Sp - 8] = block_c1IDX_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IJA; else goto c1IDZ;
       u1IJA: // global
           call _c1IDX(R1) args: 0, res: 0, upd: 0;
       c1IDZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1IDX() //  [R1]
         { []
         }
     {offset
       c1IDX: // global
           _s1H8t::P64 = P64[Sp + 64];
           if (R1 & 7 == 1) goto c1IE6; else goto c1IEm;
       c1IE6: // global
           I64[Sp] = block_c1IE3_info;
           R1 = _s1H8t::P64;
           if (R1 & 7 != 0) goto u1IJ7; else goto c1IE7;
       u1IJ7: // global
           call _c1IE3(R1) args: 0, res: 0, upd: 0;
       c1IE7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1IEm: // global
           I64[Sp] = block_c1IEk_info;
           R1 = _s1H8t::P64;
           if (R1 & 7 != 0) goto u1IJ8; else goto c1IEn;
       u1IJ8: // global
           call _c1IEk(R1) args: 0, res: 0, upd: 0;
       c1IEn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IDX_info" {
     block_c1IDX_info:
         const _c1IDX;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1IE3() //  [R1]
         { []
         }
     {offset
       c1IE3: // global
           if (R1 & 7 == 1) goto u1IGo; else goto u1IGp;
       u1IGo: // global
           Sp = Sp + 8;
           call _s1H8z() args: 0, res: 0, upd: 0;
       u1IGp: // global
           Sp = Sp + 8;
           call _s1H9W() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1IE3_info" {
     block_c1IE3_info:
         const _c1IE3;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1IEk() //  [R1]
         { []
         }
     {offset
       c1IEk: // global
           if (R1 & 7 == 1) goto u1IGm; else goto u1IGn;
       u1IGm: // global
           Sp = Sp + 8;
           call _s1H9W() args: 0, res: 0, upd: 0;
       u1IGn: // global
           Sp = Sp + 8;
           call _s1H8z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1IEk_info" {
     block_c1IEk_info:
         const _c1IEk;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _s1H9W() //  []
         { []
         }
     {offset
       s1H9W: // global
           I64[Sp - 8] = block_c1Izs_info;
           R1 = P64[Sp + 56];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IJt; else goto c1IDx;
       u1IJt: // global
           call _c1Izs(R1) args: 0, res: 0, upd: 0;
       c1IDx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Izs() //  [R1]
         { []
         }
     {offset
       c1Izs: // global
           if (R1 & 7 == 1) goto u1IGq; else goto c1IDI;
       u1IGq: // global
           Sp = Sp + 8;
           call _s1H9Y() args: 0, res: 0, upd: 0;
       c1IDI: // global
           I64[Sp] = block_c1IDG_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u1IIv; else goto c1IDJ;
       u1IIv: // global
           call _c1IDG(R1) args: 0, res: 0, upd: 0;
       c1IDJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Izs_info" {
     block_c1Izs_info:
         const _c1Izs;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1IDG() //  [R1]
         { []
         }
     {offset
       c1IDG: // global
           if (R1 & 7 == 1) goto u1IGr; else goto u1IGs;
       u1IGr: // global
           Sp = Sp + 8;
           call _s1H8z() args: 0, res: 0, upd: 0;
       u1IGs: // global
           Sp = Sp + 8;
           call _s1H9Y() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1IDG_info" {
     block_c1IDG_info:
         const _c1IDG;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _s1H9Y() //  []
         { []
         }
     {offset
       s1H9Y: // global
           I64[Sp - 8] = block_c1Izu_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IJu; else goto c1ICY;
       u1IJu: // global
           call _c1Izu(R1) args: 0, res: 0, upd: 0;
       c1ICY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Izu() //  [R1]
         { []
         }
     {offset
       c1Izu: // global
           if (R1 & 7 == 1) goto c1ID5; else goto u1IGt;
       c1ID5: // global
           I64[Sp] = block_c1ID2_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto u1IIx; else goto c1ID6;
       u1IIx: // global
           call _c1ID2(R1) args: 0, res: 0, upd: 0;
       c1ID6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u1IGt: // global
           Sp = Sp + 8;
           call _s1Ha0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Izu_info" {
     block_c1Izu_info:
         const _c1Izu;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1ID2() //  [R1]
         { []
         }
     {offset
       c1ID2: // global
           if (R1 & 7 == 1) goto c1IDd; else goto u1IGu;
       c1IDd: // global
           I64[Sp] = block_c1IDa_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u1IJ1; else goto c1IDe;
       u1IJ1: // global
           call _c1IDa(R1) args: 0, res: 0, upd: 0;
       c1IDe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u1IGu: // global
           Sp = Sp + 8;
           call _s1Ha0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1ID2_info" {
     block_c1ID2_info:
         const _c1ID2;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1IDa() //  [R1]
         { []
         }
     {offset
       c1IDa: // global
           if (R1 & 7 == 1) goto u1IGv; else goto u1IGw;
       u1IGv: // global
           Sp = Sp + 8;
           call _s1H8z() args: 0, res: 0, upd: 0;
       u1IGw: // global
           Sp = Sp + 8;
           call _s1Ha0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1IDa_info" {
     block_c1IDa_info:
         const _c1IDa;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _s1Ha0() //  []
         { []
         }
     {offset
       s1Ha0: // global
           I64[Sp - 8] = block_c1IzA_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IJv; else goto c1ICp;
       u1IJv: // global
           call _c1IzA(R1) args: 0, res: 0, upd: 0;
       c1ICp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1IzA() //  [R1]
         { []
         }
     {offset
       c1IzA: // global
           _s1H8t::P64 = P64[Sp + 64];
           if (R1 & 7 == 1) goto c1ICw; else goto c1ICM;
       c1ICw: // global
           I64[Sp] = block_c1ICt_info;
           R1 = _s1H8t::P64;
           if (R1 & 7 != 0) goto u1IIz; else goto c1ICx;
       u1IIz: // global
           call _c1ICt(R1) args: 0, res: 0, upd: 0;
       c1ICx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1ICM: // global
           I64[Sp] = block_c1ICK_info;
           R1 = _s1H8t::P64;
           if (R1 & 7 != 0) goto u1IIA; else goto c1ICN;
       u1IIA: // global
           call _c1ICK(R1) args: 0, res: 0, upd: 0;
       c1ICN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IzA_info" {
     block_c1IzA_info:
         const _c1IzA;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1ICt() //  [R1]
         { []
         }
     {offset
       c1ICt: // global
           if (R1 & 7 == 1) goto u1IGz; else goto u1IGA;
       u1IGz: // global
           Sp = Sp + 8;
           call _s1Hax() args: 0, res: 0, upd: 0;
       u1IGA: // global
           Sp = Sp + 8;
           call _s1Hak() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1ICt_info" {
     block_c1ICt_info:
         const _c1ICt;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1ICK() //  [R1]
         { []
         }
     {offset
       c1ICK: // global
           if (R1 & 7 == 1) goto u1IGx; else goto u1IGy;
       u1IGx: // global
           Sp = Sp + 8;
           call _s1Hak() args: 0, res: 0, upd: 0;
       u1IGy: // global
           Sp = Sp + 8;
           call _s1Hax() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1ICK_info" {
     block_c1ICK_info:
         const _c1ICK;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _s1Hax() //  []
         { []
         }
     {offset
       s1Hax: // global
           I64[Sp - 8] = block_c1IBJ_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IJz; else goto c1IBL;
       u1IJz: // global
           call _c1IBJ(R1) args: 0, res: 0, upd: 0;
       c1IBL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1IBJ() //  [R1]
         { []
         }
     {offset
       c1IBJ: // global
           if (R1 & 7 == 1) goto u1IGB; else goto c1IBW;
       u1IGB: // global
           Sp = Sp + 8;
           call _s1Hak() args: 0, res: 0, upd: 0;
       c1IBW: // global
           I64[Sp - 8] = block_c1IBU_info;
           _s1Haz::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1Haz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IIQ; else goto c1IBX;
       u1IIQ: // global
           call _c1IBU(R1) args: 0, res: 0, upd: 0;
       c1IBX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IBJ_info" {
     block_c1IBJ_info:
         const _c1IBJ;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1IBU() //  [R1]
         { []
         }
     {offset
       c1IBU: // global
           if (R1 & 7 == 1) goto u1IGC; else goto c1ICd;
       u1IGC: // global
           Sp = Sp + 16;
           call _s1Hak() args: 0, res: 0, upd: 0;
       c1ICd: // global
           I64[Sp] = block_c1IC6_info;
           _s1HaB::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1HaB::P64;
           if (R1 & 7 != 0) goto u1IIS; else goto c1IC7;
       u1IIS: // global
           call _c1IC6(R1) args: 0, res: 0, upd: 0;
       c1IC7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IBU_info" {
     block_c1IBU_info:
         const _c1IBU;
         const 10;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _s1Hak() //  []
         { []
         }
     {offset
       s1Hak: // global
           I64[Sp - 8] = block_c1IAC_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IJy; else goto c1IAE;
       u1IJy: // global
           call _c1IAC(R1) args: 0, res: 0, upd: 0;
       c1IAE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1IAC() //  [R1]
         { []
         }
     {offset
       c1IAC: // global
           if (R1 & 7 == 1) goto c1IAL; else goto u1IGF;
       c1IAL: // global
           I64[Sp] = block_c1IAI_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto u1IIF; else goto c1IAM;
       u1IIF: // global
           call _c1IAI(R1) args: 0, res: 0, upd: 0;
       c1IAM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u1IGF: // global
           Sp = Sp + 8;
           call _s1Ha2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1IAC_info" {
     block_c1IAC_info:
         const _c1IAC;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1IAI() //  [R1]
         { []
         }
     {offset
       c1IAI: // global
           if (R1 & 7 == 1) goto u1IGG; else goto c1IAX;
       u1IGG: // global
           Sp = Sp + 8;
           call _s1Ha2() args: 0, res: 0, upd: 0;
       c1IAX: // global
           I64[Sp] = block_c1IAV_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto u1IIH; else goto c1IAY;
       u1IIH: // global
           call _c1IAV(R1) args: 0, res: 0, upd: 0;
       c1IAY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IAI_info" {
     block_c1IAI_info:
         const _c1IAI;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1IAV() //  [R1]
         { []
         }
     {offset
       c1IAV: // global
           if (R1 & 7 == 1) goto u1IGH; else goto c1IB9;
       u1IGH: // global
           Sp = Sp + 8;
           call _s1Ha2() args: 0, res: 0, upd: 0;
       c1IB9: // global
           I64[Sp - 8] = block_c1IB7_info;
           _s1Hap::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1Hap::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IIJ; else goto c1IBa;
       u1IIJ: // global
           call _c1IB7(R1) args: 0, res: 0, upd: 0;
       c1IBa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IAV_info" {
     block_c1IAV_info:
         const _c1IAV;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1IB7() //  [R1]
         { []
         }
     {offset
       c1IB7: // global
           if (R1 & 7 == 1) goto u1IGI; else goto c1IBq;
       u1IGI: // global
           Sp = Sp + 16;
           call _s1Ha2() args: 0, res: 0, upd: 0;
       c1IBq: // global
           I64[Sp] = block_c1IBj_info;
           _s1Har::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1Har::P64;
           if (R1 & 7 != 0) goto u1IIL; else goto c1IBk;
       u1IIL: // global
           call _c1IBj(R1) args: 0, res: 0, upd: 0;
       c1IBk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IB7_info" {
     block_c1IB7_info:
         const _c1IB7;
         const 10;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1IBj() //  [R1]
         { []
         }
     {offset
       c1IBj: // global
           I64[Sp] = block_c1IBo_info;
           _s1Hat::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1Hat::I64;
           if (R1 & 7 != 0) goto u1IIN; else goto c1IBs;
       u1IIN: // global
           call _c1IBo(R1) args: 0, res: 0, upd: 0;
       c1IBs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IBj_info" {
     block_c1IBj_info:
         const _c1IBj;
         const 10;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1IBo() //  [R1]
         { []
         }
     {offset
       c1IBo: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u1IGK; else goto u1IGJ;
       u1IGK: // global
           Sp = Sp + 16;
           call _s1Ha2() args: 0, res: 0, upd: 0;
       u1IGJ: // global
           Sp = Sp + 16;
           call _s1H8z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1IBo_info" {
     block_c1IBo_info:
         const _c1IBo;
         const 74;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1IC6() //  [R1]
         { []
         }
     {offset
       c1IC6: // global
           I64[Sp] = block_c1ICb_info;
           _s1HaD::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1HaD::I64;
           if (R1 & 7 != 0) goto u1IIU; else goto c1ICf;
       u1IIU: // global
           call _c1ICb(R1) args: 0, res: 0, upd: 0;
       c1ICf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IC6_info" {
     block_c1IC6_info:
         const _c1IC6;
         const 10;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1ICb() //  [R1]
         { []
         }
     {offset
       c1ICb: // global
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u1IGE; else goto u1IGD;
       u1IGE: // global
           Sp = Sp + 16;
           call _s1Ha2() args: 0, res: 0, upd: 0;
       u1IGD: // global
           Sp = Sp + 16;
           call _s1H8z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1ICb_info" {
     block_c1ICb_info:
         const _c1ICb;
         const 74;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _s1Ha2() //  []
         { []
         }
     {offset
       s1Ha2: // global
           I64[Sp - 8] = block_c1IrB_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IJw; else goto c1IrC;
       u1IJw: // global
           call _c1IrB(R1) args: 0, res: 0, upd: 0;
       c1IrC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1IrB() //  [R1]
         { []
         }
     {offset
       c1IrB: // global
           if (R1 & 7 == 1) goto u1IGL; else goto c1IAe;
       u1IGL: // global
           Sp = Sp + 8;
           call _s1Ha3() args: 0, res: 0, upd: 0;
       c1IAe: // global
           I64[Sp] = block_c1IrH_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto u1IHw; else goto c1IrI;
       u1IHw: // global
           call _c1IrH(R1) args: 0, res: 0, upd: 0;
       c1IrI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IrB_info" {
     block_c1IrB_info:
         const _c1IrB;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1IrH() //  [R1]
         { []
         }
     {offset
       c1IrH: // global
           if (R1 & 7 == 1) goto c1IAh; else goto u1IGM;
       c1IAh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1IAk; else goto c1IAj;
       c1IAk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1IAj: // global
           I64[Hp - 16] = sat_s1Hai_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_c1IAf_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = P64[Sp + 72];
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
       u1IGM: // global
           Sp = Sp + 8;
           call _s1Ha3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1IrH_info" {
     block_c1IrH_info:
         const _c1IrH;
         const 9;
         const 2203318222878;
         const S1HoG_srt+48;
 },
 _c1IAf() //  [R1]
         { []
         }
     {offset
       c1IAf: // global
           if (R1 & 7 == 1) goto u1IGN; else goto u1IGO;
       u1IGN: // global
           Sp = Sp + 80;
           call _c1IAq() args: 0, res: 0, upd: 0;
       u1IGO: // global
           Sp = Sp + 8;
           call _s1H8z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1IAf_info" {
     block_c1IAf_info:
         const _c1IAf;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _s1Ha3() //  []
         { []
         }
     {offset
       s1Ha3: // global
           I64[Sp - 8] = block_c1IqH_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IJx; else goto c1IqI;
       u1IJx: // global
           call _c1IqH(R1) args: 0, res: 0, upd: 0;
       c1IqI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1IqH() //  [R1]
         { []
         }
     {offset
       c1IqH: // global
           if (R1 & 7 == 1) goto u1IGP; else goto c1IzJ;
       u1IGP: // global
           Sp = Sp + 8;
           call _s1H8z() args: 0, res: 0, upd: 0;
       c1IzJ: // global
           I64[Sp] = block_c1IqN_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto u1IHr; else goto c1IqO;
       u1IHr: // global
           call _c1IqN(R1) args: 0, res: 0, upd: 0;
       c1IqO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IqH_info" {
     block_c1IqH_info:
         const _c1IqH;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1IqN() //  [R1]
         { []
         }
     {offset
       c1IqN: // global
           if (R1 & 7 == 1) goto u1IGQ; else goto c1IzP;
       u1IGQ: // global
           Sp = Sp + 8;
           call _s1H8z() args: 0, res: 0, upd: 0;
       c1IzP: // global
           I64[Sp] = block_c1IqT_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u1IHt; else goto c1IqU;
       u1IHt: // global
           call _c1IqT(R1) args: 0, res: 0, upd: 0;
       c1IqU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IqN_info" {
     block_c1IqN_info:
         const _c1IqN;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1IqT() //  [R1]
         { []
         }
     {offset
       c1IqT: // global
           if (R1 & 7 == 1) goto u1IGR; else goto c1IzV;
       u1IGR: // global
           Sp = Sp + 8;
           call _s1H8z() args: 0, res: 0, upd: 0;
       c1IzV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1IzY; else goto c1IzX;
       c1IzY: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1IzX: // global
           _s1Ha8::P64 = P64[R1 + 6];
           I64[Hp - 32] = sat_s1Hae_info;
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _s1Ha8::P64;
           I64[Sp] = block_c1IzU_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = P64[Sp + 72];
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IqT_info" {
     block_c1IqT_info:
         const _c1IqT;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1IzU() //  [R1]
         { []
         }
     {offset
       c1IzU: // global
           if (R1 & 7 == 1) goto u1IGS; else goto u1IGT;
       u1IGS: // global
           Sp = Sp + 80;
           call _c1IAq() args: 0, res: 0, upd: 0;
       u1IGT: // global
           Sp = Sp + 8;
           call _s1H8z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1IzU_info" {
     block_c1IzU_info:
         const _c1IzU;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _s1H8z() //  []
         { []
         }
     {offset
       s1H8z: // global
           I64[Sp - 8] = block_c1Is8_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IJk; else goto c1IyC;
       u1IJk: // global
           call _c1Is8(R1) args: 0, res: 0, upd: 0;
       c1IyC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Is8() //  [R1]
         { []
         }
     {offset
       c1Is8: // global
           _s1H8u::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c1IyJ; else goto c1IyZ;
       c1IyJ: // global
           I64[Sp] = block_c1IyG_info;
           R1 = _s1H8u::P64;
           if (R1 & 7 != 0) goto u1IHB; else goto c1IyK;
       u1IHB: // global
           call _c1IyG(R1) args: 0, res: 0, upd: 0;
       c1IyK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1IyZ: // global
           I64[Sp - 8] = block_c1IyX_info;
           _s1H9O::P64 = P64[R1 + 6];
           R1 = _s1H8u::P64;
           P64[Sp] = _s1H9O::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IHC; else goto c1Iz0;
       u1IHC: // global
           call _c1IyX(R1) args: 0, res: 0, upd: 0;
       c1Iz0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Is8_info" {
     block_c1Is8_info:
         const _c1Is8;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1IyG() //  [R1]
         { []
         }
     {offset
       c1IyG: // global
           if (R1 & 7 == 1) goto u1IGX; else goto u1IGY;
       u1IGX: // global
           Sp = Sp + 8;
           call _s1H9H() args: 0, res: 0, upd: 0;
       u1IGY: // global
           Sp = Sp + 8;
           call _s1H8A() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1IyG_info" {
     block_c1IyG_info:
         const _c1IyG;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1IyX() //  [R1]
         { []
         }
     {offset
       c1IyX: // global
           if (R1 & 7 == 1) goto u1IGU; else goto c1Izg;
       u1IGU: // global
           Sp = Sp + 16;
           call _s1H8A() args: 0, res: 0, upd: 0;
       c1Izg: // global
           I64[Sp] = block_c1Iz9_info;
           _s1H9Q::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1H9Q::P64;
           if (R1 & 7 != 0) goto u1IIq; else goto c1Iza;
       u1IIq: // global
           call _c1Iz9(R1) args: 0, res: 0, upd: 0;
       c1Iza: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IyX_info" {
     block_c1IyX_info:
         const _c1IyX;
         const 10;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1Iz9() //  [R1]
         { []
         }
     {offset
       c1Iz9: // global
           I64[Sp] = block_c1Ize_info;
           _s1H9S::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H9S::I64;
           if (R1 & 7 != 0) goto u1IIs; else goto c1Izi;
       u1IIs: // global
           call _c1Ize(R1) args: 0, res: 0, upd: 0;
       c1Izi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Iz9_info" {
     block_c1Iz9_info:
         const _c1Iz9;
         const 10;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1Ize() //  [R1]
         { []
         }
     {offset
       c1Ize: // global
           if (I64[Sp + 8] == I64[R1 + 7]) goto u1IGV; else goto u1IGW;
       u1IGV: // global
           Sp = Sp + 16;
           call _s1H9H() args: 0, res: 0, upd: 0;
       u1IGW: // global
           Sp = Sp + 16;
           call _s1H8A() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Ize_info" {
     block_c1Ize_info:
         const _c1Ize;
         const 74;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _s1H9H() //  []
         { []
         }
     {offset
       s1H9H: // global
           I64[Sp - 8] = block_c1IxV_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IJs; else goto c1IxX;
       u1IJs: // global
           call _c1IxV(R1) args: 0, res: 0, upd: 0;
       c1IxX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1IxV() //  [R1]
         { []
         }
     {offset
       c1IxV: // global
           _s1H8t::P64 = P64[Sp + 64];
           if (R1 & 7 == 1) goto c1Iy4; else goto c1Iyn;
       c1Iy4: // global
           I64[Sp] = block_c1Iy1_info;
           R1 = _s1H8t::P64;
           if (R1 & 7 != 0) goto u1IIk; else goto c1Iy5;
       u1IIk: // global
           call _c1Iy1(R1) args: 0, res: 0, upd: 0;
       c1Iy5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1Iyn: // global
           I64[Sp] = block_c1Iyl_info;
           R1 = _s1H8t::P64;
           if (R1 & 7 != 0) goto u1IIl; else goto c1Iyo;
       u1IIl: // global
           call _c1Iyl(R1) args: 0, res: 0, upd: 0;
       c1Iyo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IxV_info" {
     block_c1IxV_info:
         const _c1IxV;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1Iy1() //  [R1]
         { []
         }
     {offset
       c1Iy1: // global
           if (R1 & 7 == 1) goto c1Iyb; else goto u1IH0;
       c1Iyb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Iye; else goto c1Iyd;
       c1Iye: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Iyd: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 6;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u1IH0: // global
           Sp = Sp + 8;
           call _s1H8A() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Iy1_info" {
     block_c1Iy1_info:
         const _c1Iy1;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1Iyl() //  [R1]
         { []
         }
     {offset
       c1Iyl: // global
           if (R1 & 7 == 1) goto u1IGZ; else goto c1Iyy;
       u1IGZ: // global
           Sp = Sp + 8;
           call _s1H8A() args: 0, res: 0, upd: 0;
       c1Iyy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1IyB; else goto c1IyA;
       c1IyB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1IyA: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 6;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Iyl_info" {
     block_c1Iyl_info:
         const _c1Iyl;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _s1H8A() //  []
         { []
         }
     {offset
       s1H8A: // global
           I64[Sp - 8] = block_c1Isa_info;
           R1 = P64[Sp + 56];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IJl; else goto c1Ixs;
       u1IJl: // global
           call _c1Isa(R1) args: 0, res: 0, upd: 0;
       c1Ixs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Isa() //  [R1]
         { []
         }
     {offset
       c1Isa: // global
           if (R1 & 7 == 1) goto u1IH1; else goto c1IxD;
       u1IH1: // global
           Sp = Sp + 8;
           call _s1H8C() args: 0, res: 0, upd: 0;
       c1IxD: // global
           I64[Sp] = block_c1IxB_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u1IHD; else goto c1IxE;
       u1IHD: // global
           call _c1IxB(R1) args: 0, res: 0, upd: 0;
       c1IxE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Isa_info" {
     block_c1Isa_info:
         const _c1Isa;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1IxB() //  [R1]
         { []
         }
     {offset
       c1IxB: // global
           if (R1 & 7 == 1) goto c1IxK; else goto u1IH2;
       c1IxK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1IxN; else goto c1IxM;
       c1IxN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1IxM: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 6;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u1IH2: // global
           Sp = Sp + 8;
           call _s1H8C() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1IxB_info" {
     block_c1IxB_info:
         const _c1IxB;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _s1H8C() //  []
         { []
         }
     {offset
       s1H8C: // global
           I64[Sp - 8] = block_c1Isc_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IJm; else goto c1IwQ;
       u1IJm: // global
           call _c1Isc(R1) args: 0, res: 0, upd: 0;
       c1IwQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Isc() //  [R1]
         { []
         }
     {offset
       c1Isc: // global
           if (R1 & 7 == 1) goto c1IwX; else goto u1IH3;
       c1IwX: // global
           I64[Sp] = block_c1IwU_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto u1IHF; else goto c1IwY;
       u1IHF: // global
           call _c1IwU(R1) args: 0, res: 0, upd: 0;
       c1IwY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u1IH3: // global
           Sp = Sp + 8;
           call _s1H8E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Isc_info" {
     block_c1Isc_info:
         const _c1Isc;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1IwU() //  [R1]
         { []
         }
     {offset
       c1IwU: // global
           if (R1 & 7 == 1) goto c1Ix5; else goto u1IH4;
       c1Ix5: // global
           I64[Sp] = block_c1Ix2_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u1IIg; else goto c1Ix6;
       u1IIg: // global
           call _c1Ix2(R1) args: 0, res: 0, upd: 0;
       c1Ix6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u1IH4: // global
           Sp = Sp + 8;
           call _s1H8E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1IwU_info" {
     block_c1IwU_info:
         const _c1IwU;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1Ix2() //  [R1]
         { []
         }
     {offset
       c1Ix2: // global
           if (R1 & 7 == 1) goto c1Ixc; else goto u1IH5;
       c1Ixc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Ixf; else goto c1Ixe;
       c1Ixf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Ixe: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 6;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u1IH5: // global
           Sp = Sp + 8;
           call _s1H8E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Ix2_info" {
     block_c1Ix2_info:
         const _c1Ix2;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _s1H8E() //  []
         { []
         }
     {offset
       s1H8E: // global
           I64[Sp - 8] = block_c1Isi_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IJn; else goto c1Iwh;
       u1IJn: // global
           call _c1Isi(R1) args: 0, res: 0, upd: 0;
       c1Iwh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Isi() //  [R1]
         { []
         }
     {offset
       c1Isi: // global
           _s1H8t::P64 = P64[Sp + 64];
           if (R1 & 7 == 1) goto c1Iwo; else goto c1IwE;
       c1Iwo: // global
           I64[Sp] = block_c1Iwl_info;
           R1 = _s1H8t::P64;
           if (R1 & 7 != 0) goto u1IHH; else goto c1Iwp;
       u1IHH: // global
           call _c1Iwl(R1) args: 0, res: 0, upd: 0;
       c1Iwp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1IwE: // global
           I64[Sp] = block_c1IwC_info;
           R1 = _s1H8t::P64;
           if (R1 & 7 != 0) goto u1IHI; else goto c1IwF;
       u1IHI: // global
           call _c1IwC(R1) args: 0, res: 0, upd: 0;
       c1IwF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Isi_info" {
     block_c1Isi_info:
         const _c1Isi;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1Iwl() //  [R1]
         { []
         }
     {offset
       c1Iwl: // global
           if (R1 & 7 == 1) goto u1IH8; else goto u1IH9;
       u1IH8: // global
           Sp = Sp + 8;
           call _s1H9n() args: 0, res: 0, upd: 0;
       u1IH9: // global
           Sp = Sp + 8;
           call _s1H9a() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Iwl_info" {
     block_c1Iwl_info:
         const _c1Iwl;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1IwC() //  [R1]
         { []
         }
     {offset
       c1IwC: // global
           if (R1 & 7 == 1) goto u1IH6; else goto u1IH7;
       u1IH6: // global
           Sp = Sp + 8;
           call _s1H9a() args: 0, res: 0, upd: 0;
       u1IH7: // global
           Sp = Sp + 8;
           call _s1H9n() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1IwC_info" {
     block_c1IwC_info:
         const _c1IwC;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _s1H9n() //  []
         { []
         }
     {offset
       s1H9n: // global
           I64[Sp - 8] = block_c1Ivw_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IJr; else goto c1Ivy;
       u1IJr: // global
           call _c1Ivw(R1) args: 0, res: 0, upd: 0;
       c1Ivy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Ivw() //  [R1]
         { []
         }
     {offset
       c1Ivw: // global
           if (R1 & 7 == 1) goto u1IHa; else goto c1IvJ;
       u1IHa: // global
           Sp = Sp + 8;
           call _s1H9a() args: 0, res: 0, upd: 0;
       c1IvJ: // global
           I64[Sp - 8] = block_c1IvH_info;
           _s1H9p::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1H9p::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1II5; else goto c1IvK;
       u1II5: // global
           call _c1IvH(R1) args: 0, res: 0, upd: 0;
       c1IvK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Ivw_info" {
     block_c1Ivw_info:
         const _c1Ivw;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1IvH() //  [R1]
         { []
         }
     {offset
       c1IvH: // global
           if (R1 & 7 == 1) goto u1IHb; else goto c1Iw0;
       u1IHb: // global
           Sp = Sp + 16;
           call _s1H9a() args: 0, res: 0, upd: 0;
       c1Iw0: // global
           I64[Sp] = block_c1IvT_info;
           _s1H9r::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1H9r::P64;
           if (R1 & 7 != 0) goto u1II7; else goto c1IvU;
       u1II7: // global
           call _c1IvT(R1) args: 0, res: 0, upd: 0;
       c1IvU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IvH_info" {
     block_c1IvH_info:
         const _c1IvH;
         const 10;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _s1H9a() //  []
         { []
         }
     {offset
       s1H9a: // global
           I64[Sp - 8] = block_c1Iuk_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IJq; else goto c1Ium;
       u1IJq: // global
           call _c1Iuk(R1) args: 0, res: 0, upd: 0;
       c1Ium: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Iuk() //  [R1]
         { []
         }
     {offset
       c1Iuk: // global
           if (R1 & 7 == 1) goto c1Iut; else goto u1IHd;
       c1Iut: // global
           I64[Sp] = block_c1Iuq_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto u1IHV; else goto c1Iuu;
       u1IHV: // global
           call _c1Iuq(R1) args: 0, res: 0, upd: 0;
       c1Iuu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u1IHd: // global
           Sp = Sp + 8;
           call _s1H8G() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Iuk_info" {
     block_c1Iuk_info:
         const _c1Iuk;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1Iuq() //  [R1]
         { []
         }
     {offset
       c1Iuq: // global
           if (R1 & 7 == 1) goto u1IHe; else goto c1IuF;
       u1IHe: // global
           Sp = Sp + 8;
           call _s1H8G() args: 0, res: 0, upd: 0;
       c1IuF: // global
           I64[Sp] = block_c1IuD_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto u1IHX; else goto c1IuG;
       u1IHX: // global
           call _c1IuD(R1) args: 0, res: 0, upd: 0;
       c1IuG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Iuq_info" {
     block_c1Iuq_info:
         const _c1Iuq;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1IuD() //  [R1]
         { []
         }
     {offset
       c1IuD: // global
           if (R1 & 7 == 1) goto u1IHf; else goto c1IuR;
       u1IHf: // global
           Sp = Sp + 8;
           call _s1H8G() args: 0, res: 0, upd: 0;
       c1IuR: // global
           I64[Sp - 8] = block_c1IuP_info;
           _s1H9f::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1H9f::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IHZ; else goto c1IuS;
       u1IHZ: // global
           call _c1IuP(R1) args: 0, res: 0, upd: 0;
       c1IuS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IuD_info" {
     block_c1IuD_info:
         const _c1IuD;
         const 9;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1IuP() //  [R1]
         { []
         }
     {offset
       c1IuP: // global
           if (R1 & 7 == 1) goto u1IHg; else goto c1Iv8;
       u1IHg: // global
           Sp = Sp + 16;
           call _s1H8G() args: 0, res: 0, upd: 0;
       c1Iv8: // global
           I64[Sp] = block_c1Iv1_info;
           _s1H9h::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1H9h::P64;
           if (R1 & 7 != 0) goto u1II1; else goto c1Iv2;
       u1II1: // global
           call _c1Iv1(R1) args: 0, res: 0, upd: 0;
       c1Iv2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IuP_info" {
     block_c1IuP_info:
         const _c1IuP;
         const 10;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1Iv1() //  [R1]
         { []
         }
     {offset
       c1Iv1: // global
           I64[Sp] = block_c1Iv6_info;
           _s1H9j::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H9j::I64;
           if (R1 & 7 != 0) goto u1II3; else goto c1Iva;
       u1II3: // global
           call _c1Iv6(R1) args: 0, res: 0, upd: 0;
       c1Iva: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Iv1_info" {
     block_c1Iv1_info:
         const _c1Iv1;
         const 10;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1Iv6() //  [R1]
         { []
         }
     {offset
       c1Iv6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Ivg; else goto c1Ivf;
       c1Ivg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Ivf: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u1IHh; else goto c1Ivo;
       u1IHh: // global
           Sp = Sp + 16;
           call _c1Iwc() args: 0, res: 0, upd: 0;
       c1Ivo: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 56];
           R1 = Hp - 6;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Iv6_info" {
     block_c1Iv6_info:
         const _c1Iv6;
         const 74;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1IvT() //  [R1]
         { []
         }
     {offset
       c1IvT: // global
           I64[Sp] = block_c1IvY_info;
           _s1H9t::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1H9t::I64;
           if (R1 & 7 != 0) goto u1II9; else goto c1Iw2;
       u1II9: // global
           call _c1IvY(R1) args: 0, res: 0, upd: 0;
       c1Iw2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IvT_info" {
     block_c1IvT_info:
         const _c1IvT;
         const 10;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1IvY() //  [R1]
         { []
         }
     {offset
       c1IvY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Iw8; else goto c1Iw7;
       c1Iw8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Iw7: // global
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u1IHc; else goto c1Iwg;
       u1IHc: // global
           Sp = Sp + 16;
           call _c1Iwc() args: 0, res: 0, upd: 0;
       c1Iwg: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 56];
           R1 = Hp - 6;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IvY_info" {
     block_c1IvY_info:
         const _c1IvY;
         const 74;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1Iwc() //  []
         { []
         }
     {offset
       c1Iwc: // global
           Hp = Hp - 16;
           call _s1H8G() args: 0, res: 0, upd: 0;
     }
 },
 _s1H8G() //  []
         { []
         }
     {offset
       s1H8G: // global
           I64[Sp - 8] = block_c1Isk_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IJo; else goto c1It7;
       u1IJo: // global
           call _c1Isk(R1) args: 0, res: 0, upd: 0;
       c1It7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Isk() //  [R1]
         { []
         }
     {offset
       c1Isk: // global
           if (R1 & 7 == 1) goto u1IHi; else goto c1Iti;
       u1IHi: // global
           Sp = Sp + 8;
           call _s1H8H() args: 0, res: 0, upd: 0;
       c1Iti: // global
           I64[Sp] = block_c1Itg_info;
           R1 = P64[Sp + 64];
           if (R1 & 7 != 0) goto u1IHJ; else goto c1Itj;
       u1IHJ: // global
           call _c1Itg(R1) args: 0, res: 0, upd: 0;
       c1Itj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Isk_info" {
     block_c1Isk_info:
         const _c1Isk;
         const 1033;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1Itg() //  [R1]
         { []
         }
     {offset
       c1Itg: // global
           if (R1 & 7 == 1) goto c1Itq; else goto u1IHj;
       c1Itq: // global
           I64[Sp] = block_c1Itn_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto u1IHN; else goto c1Itr;
       u1IHN: // global
           call _c1Itn(R1) args: 0, res: 0, upd: 0;
       c1Itr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u1IHj: // global
           Sp = Sp + 8;
           call _s1H8H() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1Itg_info" {
     block_c1Itg_info:
         const _c1Itg;
         const 1033;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1Itn() //  [R1]
         { []
         }
     {offset
       c1Itn: // global
           if (R1 & 7 == 1) goto u1IHk; else goto c1ItC;
       u1IHk: // global
           Sp = Sp + 8;
           call _s1H8H() args: 0, res: 0, upd: 0;
       c1ItC: // global
           I64[Sp] = block_c1ItA_info;
           _s1H91::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 40] = _s1H91::P64;
           if (R1 & 7 != 0) goto u1IHP; else goto c1ItD;
       u1IHP: // global
           call _c1ItA(R1) args: 0, res: 0, upd: 0;
       c1ItD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Itn_info" {
     block_c1Itn_info:
         const _c1Itn;
         const 1545;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1ItA() //  [R1]
         { []
         }
     {offset
       c1ItA: // global
           if (R1 & 7 == 1) goto u1IHl; else goto c1ItT;
       u1IHl: // global
           Sp = Sp + 8;
           call _s1H8H() args: 0, res: 0, upd: 0;
       c1ItT: // global
           I64[Sp] = block_c1ItM_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u1IHR; else goto c1ItN;
       u1IHR: // global
           call _c1ItM(R1) args: 0, res: 0, upd: 0;
       c1ItN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ItA_info" {
     block_c1ItA_info:
         const _c1ItA;
         const 521;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1ItM() //  [R1]
         { []
         }
     {offset
       c1ItM: // global
           I64[Sp] = block_c1ItR_info;
           _s1H95::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _s1H95::I64;
           if (R1 & 7 != 0) goto u1IHT; else goto c1ItV;
       u1IHT: // global
           call _c1ItR(R1) args: 0, res: 0, upd: 0;
       c1ItV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ItM_info" {
     block_c1ItM_info:
         const _c1ItM;
         const 521;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1ItR() //  [R1]
         { []
         }
     {offset
       c1ItR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Iu1; else goto c1Iu0;
       c1Iu1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Iu0: // global
           if (%MO_S_Gt_W64(I64[R1 + 7],
                            I64[Sp + 40] + 1)) goto c1Iu8; else goto c1Iuc;
       c1Iu8: // global
           Hp = Hp - 16;
           Sp = Sp + 8;
           call _s1H8H() args: 0, res: 0, upd: 0;
       c1Iuc: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 6;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ItR_info" {
     block_c1ItR_info:
         const _c1ItR;
         const 1545;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _s1H8H() //  []
         { []
         }
     {offset
       s1H8H: // global
           I64[Sp - 8] = block_c1IoZ_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1IJp; else goto c1Ip0;
       u1IJp: // global
           call _c1IoZ(R1) args: 0, res: 0, upd: 0;
       c1Ip0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1IoZ() //  [R1]
         { []
         }
     {offset
       c1IoZ: // global
           if (R1 & 7 == 1) goto c1Isq; else goto c1Isv;
       c1Isq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Ist; else goto c1Iss;
       c1Ist: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Iss: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 48];
           R1 = Hp - 6;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1Isv: // global
           I64[Sp] = block_c1Ip5_info;
           _s1H8K::P64 = P64[R1 + 6];
           R1 = P64[Sp + 64];
           P64[Sp + 64] = _s1H8K::P64;
           if (R1 & 7 != 0) goto u1IHq; else goto c1Ip6;
       u1IHq: // global
           call _c1Ip5(R1) args: 0, res: 0, upd: 0;
       c1Ip6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IoZ_info" {
     block_c1IoZ_info:
         const _c1IoZ;
         const 1673;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1Ip5() //  [R1]
         { []
         }
     {offset
       c1Ip5: // global
           _c1Ioh::P64 = P64[Sp + 24];
           _c1Ioo::P64 = P64[Sp + 8];
           _s1H8l::P64 = P64[Sp + 56];
           _s1H8n::P64 = P64[Sp + 72];
           _s1H8K::P64 = P64[Sp + 64];
           if (R1 & 7 == 1) goto c1Isy; else goto c1IsQ;
       c1Isy: // global
           Hp = Hp + 40;
           _s1H8L::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1IsT; else goto c1IsA;
       c1IsA: // global
           I64[Hp - 32] = sat_s1H8O_info;
           P64[Hp - 16] = _s1H8l::P64;
           P64[Hp - 8] = _c1Ioh::P64;
           P64[Hp] = _s1H8K::P64;
           I64[Sp + 40] = block_c1Isw_info;
           R2 = _c1Ioo::P64;
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = _s1H8n::P64;
           P64[Sp + 32] = Hp - 32;
           Sp = Sp + 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
       c1IsQ: // global
           Hp = Hp + 40;
           _s1H8L::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1IsT; else goto c1IsS;
       c1IsT: // global
           HpAlloc = 40;
           R1 = _s1H8L::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1IsS: // global
           I64[Hp - 32] = sat_s1H8W_info;
           P64[Hp - 16] = _s1H8l::P64;
           P64[Hp - 8] = _c1Ioh::P64;
           P64[Hp] = _s1H8K::P64;
           I64[Sp + 40] = block_c1IsP_info;
           R2 = _c1Ioo::P64;
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = _s1H8n::P64;
           P64[Sp + 32] = Hp - 32;
           Sp = Sp + 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Ip5_info" {
     block_c1Ip5_info:
         const _c1Ip5;
         const 1673;
         const 4294967326;
         const S1HoG_srt+48;
 },
 _c1Isw() //  [R1]
         { []
         }
     {offset
       c1Isw: // global
           if (R1 & 7 == 1) goto u1IHo; else goto c1IsL;
       u1IHo: // global
           Sp = Sp + 40;
           call _c1IAq() args: 0, res: 0, upd: 0;
       c1IsL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1IsO; else goto c1IsN;
       c1IsO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1IsN: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Isw_info" {
     block_c1Isw_info:
         const _c1Isw;
         const 900;
         const 30;
 },
 _c1IsP() //  [R1]
         { []
         }
     {offset
       c1IsP: // global
           if (R1 & 7 == 1) goto u1IHn; else goto c1It3;
       u1IHn: // global
           Sp = Sp + 40;
           call _c1IAq() args: 0, res: 0, upd: 0;
       c1It3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1It6; else goto c1It5;
       c1It6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1It5: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1IsP_info" {
     block_c1IsP_info:
         const _c1IsP;
         const 900;
         const 30;
 },
 _c1IAq() //  []
         { []
         }
     {offset
       c1IAq: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.893791252 UTC

[section ""cstring" . Data.Bits.$trModule4_bytes" {
     Data.Bits.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.895556642 UTC

[section ""data" . Data.Bits.$trModule3_closure" {
     Data.Bits.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bits.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.897410517 UTC

[section ""cstring" . Data.Bits.$trModule2_bytes" {
     Data.Bits.$trModule2_bytes:
         I8[] [68,97,116,97,46,66,105,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.899161515 UTC

[section ""data" . Data.Bits.$trModule1_closure" {
     Data.Bits.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bits.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.900904471 UTC

[section ""data" . Data.Bits.$trModule_closure" {
     Data.Bits.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Bits.$trModule3_closure+1;
         const Data.Bits.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.903573323 UTC

[section ""data" . $krep_r1CDE_closure" {
     $krep_r1CDE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.905407222 UTC

[section ""data" . $krep1_r1CDF_closure" {
     $krep1_r1CDF_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.90715437 UTC

[section ""data" . $krep2_r1CDG_closure" {
     $krep2_r1CDG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.90895317 UTC

[section ""data" . $krep3_r1CDH_closure" {
     $krep3_r1CDH_closure:
         const :_con_info;
         const $krep1_r1CDF_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.910773954 UTC

[section ""data" . $krep4_r1CDI_closure" {
     $krep4_r1CDI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep3_r1CDH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.912580333 UTC

[section ""data" . $krep5_r1CDJ_closure" {
     $krep5_r1CDJ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r1CDF_closure+1;
         const $krep_r1CDE_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.914489251 UTC

[section ""data" . Data.Bits.$tcBits1_closure" {
     Data.Bits.$tcBits1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep2_r1CDG_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.916217883 UTC

[section ""data" . $krep6_r1CDK_closure" {
     $krep6_r1CDK_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.917960028 UTC

[section ""data" . $krep7_r1CDL_closure" {
     $krep7_r1CDL_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1CDK_closure+2;
         const $krep6_r1CDK_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.919685121 UTC

[section ""data" . $krep8_r1CDM_closure" {
     $krep8_r1CDM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1CDK_closure+2;
         const $krep7_r1CDL_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.921536795 UTC

[section ""data" . $krep9_r1CDN_closure" {
     $krep9_r1CDN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1CDK_closure+2;
         const $krep5_r1CDJ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.923277525 UTC

[section ""data" . $krep10_r1CDO_closure" {
     $krep10_r1CDO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1CDK_closure+2;
         const $krep4_r1CDI_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.925007687 UTC

[section ""data" . $krep11_r1CDP_closure" {
     $krep11_r1CDP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1CDK_closure+2;
         const $krep1_r1CDF_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.926887998 UTC

[section ""data" . $krep12_r1CDQ_closure" {
     $krep12_r1CDQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1CDK_closure+2;
         const $krep_r1CDE_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.929389868 UTC

[section ""data" . $krep13_r1CDR_closure" {
     $krep13_r1CDR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r1CDF_closure+1;
         const $krep6_r1CDK_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.931170521 UTC

[section ""data" . $krep14_r1CDS_closure" {
     $krep14_r1CDS_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1CDK_closure+2;
         const $krep13_r1CDR_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.932875804 UTC

[section ""data" . $krep15_r1CDT_closure" {
     $krep15_r1CDT_closure:
         const :_con_info;
         const $krep6_r1CDK_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.934838973 UTC

[section ""data" . $krep16_r1CDU_closure" {
     $krep16_r1CDU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Classes.$tcEq_closure;
         const $krep15_r1CDT_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.936524866 UTC

[section ""cstring" . Data.Bits.$tcBits3_bytes" {
     Data.Bits.$tcBits3_bytes:
         I8[] [66,105,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.93827942 UTC

[section ""data" . Data.Bits.$tcBits2_closure" {
     Data.Bits.$tcBits2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bits.$tcBits3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.940037687 UTC

[section ""data" . Data.Bits.$tcBits_closure" {
     Data.Bits.$tcBits_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Bits.$trModule_closure+1;
         const Data.Bits.$tcBits2_closure+1;
         const Data.Bits.$tcBits1_closure+4;
         const 7088815172979416363;
         const 4990916430057605838;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.941962645 UTC

[section ""data" . $krep17_r1CDV_closure" {
     $krep17_r1CDV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Bits.$tcBits_closure+1;
         const $krep15_r1CDT_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.943695479 UTC

[section ""data" . $krep18_r1CDW_closure" {
     $krep18_r1CDW_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r1CDP_closure+4;
         const $krep17_r1CDV_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.945526511 UTC

[section ""data" . $krep19_r1CDX_closure" {
     $krep19_r1CDX_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep18_r1CDW_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.947261169 UTC

[section ""data" . $krep20_r1CDY_closure" {
     $krep20_r1CDY_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep19_r1CDX_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.948983266 UTC

[section ""data" . $krep21_r1CDZ_closure" {
     $krep21_r1CDZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep20_r1CDY_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.952025894 UTC

[section ""data" . $krep22_r1CE0_closure" {
     $krep22_r1CE0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep21_r1CDZ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.953784578 UTC

[section ""data" . $krep23_r1CE1_closure" {
     $krep23_r1CE1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep22_r1CE0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.956248144 UTC

[section ""data" . $krep24_r1CE2_closure" {
     $krep24_r1CE2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep23_r1CE1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.957995122 UTC

[section ""data" . $krep25_r1CE3_closure" {
     $krep25_r1CE3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r1CDQ_closure+4;
         const $krep24_r1CE2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.959720342 UTC

[section ""data" . $krep26_r1CE4_closure" {
     $krep26_r1CE4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r1CDP_closure+4;
         const $krep25_r1CE3_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.961552153 UTC

[section ""data" . $krep27_r1CE5_closure" {
     $krep27_r1CE5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r1CDO_closure+4;
         const $krep26_r1CE4_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.963249401 UTC

[section ""data" . $krep28_r1CE6_closure" {
     $krep28_r1CE6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r1CDN_closure+4;
         const $krep27_r1CE5_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.96502709 UTC

[section ""data" . $krep29_r1CE7_closure" {
     $krep29_r1CE7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep28_r1CE6_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.968085161 UTC

[section ""data" . $krep30_r1CE8_closure" {
     $krep30_r1CE8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep29_r1CE7_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.969837097 UTC

[section ""data" . $krep31_r1CE9_closure" {
     $krep31_r1CE9_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep30_r1CE8_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.971563395 UTC

[section ""data" . $krep32_r1CEa_closure" {
     $krep32_r1CEa_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r1CDR_closure+4;
         const $krep31_r1CE9_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.97334577 UTC

[section ""data" . $krep33_r1CEb_closure" {
     $krep33_r1CEb_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1CDK_closure+2;
         const $krep32_r1CEa_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.975082116 UTC

[section ""data" . $krep34_r1CEc_closure" {
     $krep34_r1CEc_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep33_r1CEb_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.976819651 UTC

[section ""data" . $krep35_r1CEd_closure" {
     $krep35_r1CEd_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1CDS_closure+4;
         const $krep34_r1CEc_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.978585463 UTC

[section ""data" . $krep36_r1CEe_closure" {
     $krep36_r1CEe_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r1CDL_closure+4;
         const $krep35_r1CEd_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.980268464 UTC

[section ""data" . $krep37_r1CEf_closure" {
     $krep37_r1CEf_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r1CDM_closure+4;
         const $krep36_r1CEe_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.982685645 UTC

[section ""data" . $krep38_r1CEg_closure" {
     $krep38_r1CEg_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r1CDM_closure+4;
         const $krep37_r1CEf_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.984529615 UTC

[section ""data" . $krep39_r1CEh_closure" {
     $krep39_r1CEh_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r1CDM_closure+4;
         const $krep38_r1CEg_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.98628539 UTC

[section ""data" . Data.Bits.$tc'C:Bits1_closure" {
     Data.Bits.$tc'C:Bits1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r1CDU_closure+1;
         const $krep39_r1CEh_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.98787808 UTC

[section ""cstring" . Data.Bits.$tc'C:Bits3_bytes" {
     Data.Bits.$tc'C:Bits3_bytes:
         I8[] [39,67,58,66,105,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.989539111 UTC

[section ""data" . Data.Bits.$tc'C:Bits2_closure" {
     Data.Bits.$tc'C:Bits2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bits.$tc'C:Bits3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.991239307 UTC

[section ""data" . Data.Bits.$tc'C:Bits_closure" {
     Data.Bits.$tc'C:Bits_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Bits.$trModule_closure+1;
         const Data.Bits.$tc'C:Bits2_closure+1;
         const Data.Bits.$tc'C:Bits1_closure+4;
         const 744071653035646959;
         const 2574978498160477882;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.99298517 UTC

[section ""cstring" . Data.Bits.$tcFiniteBits2_bytes" {
     Data.Bits.$tcFiniteBits2_bytes:
         I8[] [70,105,110,105,116,101,66,105,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.994697616 UTC

[section ""data" . Data.Bits.$tcFiniteBits1_closure" {
     Data.Bits.$tcFiniteBits1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bits.$tcFiniteBits2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.996292522 UTC

[section ""data" . Data.Bits.$tcFiniteBits_closure" {
     Data.Bits.$tcFiniteBits_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Bits.$trModule_closure+1;
         const Data.Bits.$tcFiniteBits1_closure+1;
         const Data.Bits.$tcBits1_closure+4;
         const 2363162769622202131;
         const 10110405838341883172;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.998184077 UTC

[section ""data" . $krep40_r1CEi_closure" {
     $krep40_r1CEi_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Bits.$tcFiniteBits_closure+1;
         const $krep15_r1CDT_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:29.999910269 UTC

[section ""data" . $krep41_r1CEj_closure" {
     $krep41_r1CEj_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r1CDP_closure+4;
         const $krep40_r1CEi_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.00163186 UTC

[section ""data" . $krep42_r1CEk_closure" {
     $krep42_r1CEk_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r1CDP_closure+4;
         const $krep41_r1CEj_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.003374977 UTC

[section ""data" . $krep43_r1CEl_closure" {
     $krep43_r1CEl_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r1CDP_closure+4;
         const $krep42_r1CEk_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.005104144 UTC

[section ""data" . Data.Bits.$tc'C:FiniteBits1_closure" {
     Data.Bits.$tc'C:FiniteBits1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r1CDV_closure+1;
         const $krep43_r1CEl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.006919797 UTC

[section ""cstring" . Data.Bits.$tc'C:FiniteBits3_bytes" {
     Data.Bits.$tc'C:FiniteBits3_bytes:
         I8[] [39,67,58,70,105,110,105,116,101,66,105,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.009353679 UTC

[section ""data" . Data.Bits.$tc'C:FiniteBits2_closure" {
     Data.Bits.$tc'C:FiniteBits2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bits.$tc'C:FiniteBits3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.01105715 UTC

[section ""data" . Data.Bits.$tc'C:FiniteBits_closure" {
     Data.Bits.$tc'C:FiniteBits_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Bits.$trModule_closure+1;
         const Data.Bits.$tc'C:FiniteBits2_closure+1;
         const Data.Bits.$tc'C:FiniteBits1_closure+4;
         const 7500562306525175158;
         const 16051895206261500648;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.013643293 UTC

[section ""data" . Data.Bits.C:FiniteBits_closure" {
     Data.Bits.C:FiniteBits_closure:
         const Data.Bits.C:FiniteBits_info;
 },
 Data.Bits.C:FiniteBits_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1IWo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1IWs; else goto c1IWr;
       c1IWs: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bits.C:FiniteBits_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1IWr: // global
           I64[Hp - 32] = Data.Bits.C:FiniteBits_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.C:FiniteBits_info" {
     Data.Bits.C:FiniteBits_info:
         const Data.Bits.C:FiniteBits_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.019195329 UTC

[section ""data" . Data.Bits.C:Bits_closure" {
     Data.Bits.C:Bits_closure:
         const Data.Bits.C:Bits_info;
 },
 Data.Bits.C:Bits_slow() //  [R1]
         { []
         }
     {offset
       c1IWA: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Bits.C:Bits_entry(R6,
                                       R5,
                                       R4,
                                       R3,
                                       R2,
                                       R1) args: 152, res: 0, upd: 8;
     }
 },
 Data.Bits.C:Bits_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1IWF: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto c1IWJ; else goto c1IWI;
       c1IWJ: // global
           HpAlloc = 192;
           R1 = Data.Bits.C:Bits_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 192, res: 0, upd: 8;
       c1IWI: // global
           I64[Hp - 184] = Data.Bits.C:Bits_con_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           P64[Hp - 152] = R5;
           P64[Hp - 144] = R6;
           P64[Hp - 136] = P64[Sp];
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 48];
           P64[Hp - 80] = P64[Sp + 56];
           P64[Hp - 72] = P64[Sp + 64];
           P64[Hp - 64] = P64[Sp + 72];
           P64[Hp - 56] = P64[Sp + 80];
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = P64[Sp + 96];
           P64[Hp - 32] = P64[Sp + 104];
           P64[Hp - 24] = P64[Sp + 112];
           P64[Hp - 16] = P64[Sp + 120];
           P64[Hp - 8] = P64[Sp + 128];
           P64[Hp] = P64[Sp + 136];
           R1 = Hp - 183;
           Sp = Sp + 144;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.C:Bits_info" {
     Data.Bits.C:Bits_info:
         const Data.Bits.C:Bits_entry;
         const 0;
         const 14;
         const 98784247808;
         const 0;
         const 23;
         const Data.Bits.C:Bits_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.024600107 UTC

[section ""cstring" . i1IXb_str" {
     i1IXb_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,66,105,116,115,46,67,58,70,105,110,105,116,101,66,105,116,115]
 },
 Data.Bits.C:FiniteBits_con_entry() //  [R1]
         { []
         }
     {offset
       c1IXa: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.C:FiniteBits_con_info" {
     Data.Bits.C:FiniteBits_con_info:
         const Data.Bits.C:FiniteBits_con_entry;
         const 4;
         const 1;
         const i1IXb_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.028042192 UTC

[section ""cstring" . i1IXi_str" {
     i1IXi_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,66,105,116,115,46,67,58,66,105,116,115]
 },
 Data.Bits.C:Bits_con_entry() //  [R1]
         { []
         }
     {offset
       c1IXh: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bits.C:Bits_con_info" {
     Data.Bits.C:Bits_con_info:
         const Data.Bits.C:Bits_con_entry;
         const 23;
         const 1;
         const i1IXi_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.031196974 UTC

[section ""relreadonly" . S1HoG_srt" {
     S1HoG_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Bits.$fBitsInteger1_closure;
         const GHC.Integer.Type.shiftRInteger_closure;
         const Data.Bits.$fBitsInteger_$cshift_closure;
         const Data.Bits.$w$cshift_closure;
         const sat_s1H0l_closure;
         const Data.Bits.$fBitsInteger3_closure;
         const Data.Bits.$fBitsInteger_$cbit_closure;
         const GHC.Integer.Type.complementInteger_closure;
         const Data.Bits.$fBitsInteger_$cclearBit_closure;
         const Data.Bits.$fBitsInteger_$ccomplementBit_closure;
         const Data.Bits.$fBitsInteger_$csetBit_closure;
         const Data.Bits.$fBitsInteger_$cshiftR_closure;
         const Data.Bits.$fBitsInteger_$crotateR_closure;
         const Data.Bits.bitDefault_closure;
         const Data.Bits.$fBitsInteger_$czeroBits_closure;
         const Data.Bits.testBitDefault_closure;
         const Data.Bits.$wpopCountDefault_closure;
         const Data.Bits.popCountDefault_closure;
         const GHC.Num.$fNumInteger_closure;
         const Data.Bits.$fBitsInteger_closure;
         const Data.Bits.$fBitsInteger_$cpopCount_closure;
         const Data.Bits.toIntegralSized_closure;
 }]

