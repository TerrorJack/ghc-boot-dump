
==================== Output Cmm ====================
2018-03-16 16:07:30.542412771 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:30.543510844 UTC

[section ""data" . Data.STRef.modifySTRef1_closure" {
     Data.STRef.modifySTRef1_closure:
         const Data.STRef.modifySTRef1_info;
 },
 Data.STRef.modifySTRef1_entry() //  [R2, R3]
         { info_tbl: [(ccBwZ,
                       label: Data.STRef.modifySTRef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBwZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccBx0; else goto ccBx1;
       ccBx0: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.STRef.modifySTRef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccBx1: // global
           I64[Sp - 16] = block_ccBwW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucBxb; else goto ccBwX;
       ucBxb: // global
           call _ccBwW(R1) args: 0, res: 0, upd: 0;
       ccBwX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccBwW() //  [R1]
         { info_tbl: [(ccBwW,
                       label: block_ccBwW_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBwW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccBx6; else goto ccBx5;
       ccBx6: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccBx5: // global
           _scBwC::P64 = P64[R1 + 7];
           _scBwF::P64 = P64[_scBwC::P64 + 8];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _scBwF::P64;
           call MO_WriteBarrier();
           P64[_scBwC::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _scBwC::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.54490224 UTC

[section ""data" . Data.STRef.modifySTRef_closure" {
     Data.STRef.modifySTRef_closure:
         const Data.STRef.modifySTRef_info;
 },
 Data.STRef.modifySTRef_entry() //  [R2, R3]
         { info_tbl: [(ccBxg,
                       label: Data.STRef.modifySTRef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBxg: // global
           R3 = R3;
           R2 = R2;
           call Data.STRef.modifySTRef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.545958704 UTC

[section ""data" . Data.STRef.modifySTRef'1_closure" {
     Data.STRef.modifySTRef'1_closure:
         const Data.STRef.modifySTRef'1_info;
 },
 Data.STRef.modifySTRef'1_entry() //  [R2, R3]
         { info_tbl: [(ccBxq,
                       label: Data.STRef.modifySTRef'1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBxq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccBxr; else goto ccBxs;
       ccBxr: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.STRef.modifySTRef'1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccBxs: // global
           I64[Sp - 16] = block_ccBxn_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucBxC; else goto ccBxo;
       ucBxC: // global
           call _ccBxn(R1) args: 0, res: 0, upd: 0;
       ccBxo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccBxn() //  [R1]
         { info_tbl: [(ccBxn,
                       label: block_ccBxn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBxn: // global
           I64[Sp] = block_ccBxv_info;
           _scBwM::P64 = P64[R1 + 7];
           R2 = P64[_scBwM::P64 + 8];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scBwM::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccBxv() //  [R1]
         { info_tbl: [(ccBxv,
                       label: block_ccBxv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBxv: // global
           _scBwM::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_scBwM::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _scBwM::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.547273381 UTC

[section ""data" . Data.STRef.modifySTRef'_closure" {
     Data.STRef.modifySTRef'_closure:
         const Data.STRef.modifySTRef'_info;
 },
 Data.STRef.modifySTRef'_entry() //  [R2, R3]
         { info_tbl: [(ccBxH,
                       label: Data.STRef.modifySTRef'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBxH: // global
           R3 = R3;
           R2 = R2;
           call Data.STRef.modifySTRef'1_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.548027627 UTC

[section ""cstring" . Data.STRef.$trModule4_bytes" {
     Data.STRef.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.548611928 UTC

[section ""data" . Data.STRef.$trModule3_closure" {
     Data.STRef.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.STRef.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.549164829 UTC

[section ""cstring" . Data.STRef.$trModule2_bytes" {
     Data.STRef.$trModule2_bytes:
         I8[] [68,97,116,97,46,83,84,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.549788295 UTC

[section ""data" . Data.STRef.$trModule1_closure" {
     Data.STRef.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.STRef.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.550375385 UTC

[section ""data" . Data.STRef.$trModule_closure" {
     Data.STRef.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.STRef.$trModule3_closure+1;
         const Data.STRef.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.550958628 UTC

[section ""relreadonly" . ScBxK_srt" { ScBxK_srt:
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.551468189 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:30.552363438 UTC

[section ""data" . Data.STRef.modifySTRef1_closure" {
     Data.STRef.modifySTRef1_closure:
         const Data.STRef.modifySTRef1_info;
 },
 Data.STRef.modifySTRef1_entry() //  [R2, R3]
         { info_tbl: [(ccBxS,
                       label: Data.STRef.modifySTRef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBxS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccBxT; else goto ccBxU;
       ccBxT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.STRef.modifySTRef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccBxU: // global
           I64[Sp - 16] = block_ccBxP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucBy4; else goto ccBxQ;
       ucBy4: // global
           call _ccBxP(R1) args: 0, res: 0, upd: 0;
       ccBxQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccBxP() //  [R1]
         { info_tbl: [(ccBxP,
                       label: block_ccBxP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBxP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccBxZ; else goto ccBxY;
       ccBxZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccBxY: // global
           _scBwC::P64 = P64[R1 + 7];
           _scBwF::P64 = P64[_scBwC::P64 + 8];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _scBwF::P64;
           call MO_WriteBarrier();
           P64[_scBwC::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _scBwC::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.553708219 UTC

[section ""data" . Data.STRef.modifySTRef_closure" {
     Data.STRef.modifySTRef_closure:
         const Data.STRef.modifySTRef_info;
 },
 Data.STRef.modifySTRef_entry() //  [R2, R3]
         { info_tbl: [(ccBy9,
                       label: Data.STRef.modifySTRef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBy9: // global
           R3 = R3;
           R2 = R2;
           call Data.STRef.modifySTRef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.554788161 UTC

[section ""data" . Data.STRef.modifySTRef'1_closure" {
     Data.STRef.modifySTRef'1_closure:
         const Data.STRef.modifySTRef'1_info;
 },
 Data.STRef.modifySTRef'1_entry() //  [R2, R3]
         { info_tbl: [(ccByj,
                       label: Data.STRef.modifySTRef'1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccByj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccByk; else goto ccByl;
       ccByk: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.STRef.modifySTRef'1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccByl: // global
           I64[Sp - 16] = block_ccByg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucByv; else goto ccByh;
       ucByv: // global
           call _ccByg(R1) args: 0, res: 0, upd: 0;
       ccByh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccByg() //  [R1]
         { info_tbl: [(ccByg,
                       label: block_ccByg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccByg: // global
           I64[Sp] = block_ccByo_info;
           _scBwM::P64 = P64[R1 + 7];
           R2 = P64[_scBwM::P64 + 8];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scBwM::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccByo() //  [R1]
         { info_tbl: [(ccByo,
                       label: block_ccByo_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccByo: // global
           _scBwM::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_scBwM::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _scBwM::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.556141247 UTC

[section ""data" . Data.STRef.modifySTRef'_closure" {
     Data.STRef.modifySTRef'_closure:
         const Data.STRef.modifySTRef'_info;
 },
 Data.STRef.modifySTRef'_entry() //  [R2, R3]
         { info_tbl: [(ccByA,
                       label: Data.STRef.modifySTRef'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccByA: // global
           R3 = R3;
           R2 = R2;
           call Data.STRef.modifySTRef'1_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.556859669 UTC

[section ""cstring" . Data.STRef.$trModule4_bytes" {
     Data.STRef.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.557463857 UTC

[section ""data" . Data.STRef.$trModule3_closure" {
     Data.STRef.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.STRef.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.55807401 UTC

[section ""cstring" . Data.STRef.$trModule2_bytes" {
     Data.STRef.$trModule2_bytes:
         I8[] [68,97,116,97,46,83,84,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.558620713 UTC

[section ""data" . Data.STRef.$trModule1_closure" {
     Data.STRef.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.STRef.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.559177599 UTC

[section ""data" . Data.STRef.$trModule_closure" {
     Data.STRef.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.STRef.$trModule3_closure+1;
         const Data.STRef.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.559724716 UTC

[section ""relreadonly" . ScBxK_srt" { ScBxK_srt:
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.5605108 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:30.562020709 UTC

[section ""data" . Data.STRef.modifySTRef1_closure" {
     Data.STRef.modifySTRef1_closure:
         const Data.STRef.modifySTRef1_info;
 },
 Data.STRef.modifySTRef1_entry() //  [R2, R3]
         { info_tbl: [(ccByK,
                       label: Data.STRef.modifySTRef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccByK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccByL; else goto ccByM;
       ccByL: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.STRef.modifySTRef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccByM: // global
           I64[Sp - 16] = block_ccByH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucByW; else goto ccByI;
       ucByW: // global
           call _ccByH(R1) args: 0, res: 0, upd: 0;
       ccByI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccByH() //  [R1]
         { info_tbl: [(ccByH,
                       label: block_ccByH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccByH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccByR; else goto ccByQ;
       ccByR: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccByQ: // global
           _scBwC::P64 = P64[R1 + 7];
           _scBwF::P64 = P64[_scBwC::P64 + 8];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _scBwF::P64;
           call MO_WriteBarrier();
           P64[_scBwC::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _scBwC::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.568656464 UTC

[section ""data" . Data.STRef.modifySTRef_closure" {
     Data.STRef.modifySTRef_closure:
         const Data.STRef.modifySTRef_info;
 },
 Data.STRef.modifySTRef_entry() //  [R2, R3]
         { info_tbl: [(ccBze,
                       label: Data.STRef.modifySTRef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBze: // global
           R3 = R3;
           R2 = R2;
           call Data.STRef.modifySTRef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.572276177 UTC

[section ""data" . Data.STRef.modifySTRef'1_closure" {
     Data.STRef.modifySTRef'1_closure:
         const Data.STRef.modifySTRef'1_info;
 },
 Data.STRef.modifySTRef'1_entry() //  [R2, R3]
         { info_tbl: [(ccBzs,
                       label: Data.STRef.modifySTRef'1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBzs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccBzt; else goto ccBzu;
       ccBzt: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.STRef.modifySTRef'1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccBzu: // global
           I64[Sp - 16] = block_ccBzp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucBzE; else goto ccBzq;
       ucBzE: // global
           call _ccBzp(R1) args: 0, res: 0, upd: 0;
       ccBzq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccBzp() //  [R1]
         { info_tbl: [(ccBzp,
                       label: block_ccBzp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBzp: // global
           I64[Sp] = block_ccBzx_info;
           _scBwM::P64 = P64[R1 + 7];
           R2 = P64[_scBwM::P64 + 8];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scBwM::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccBzx() //  [R1]
         { info_tbl: [(ccBzx,
                       label: block_ccBzx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBzx: // global
           _scBwM::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_scBwM::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _scBwM::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.580420053 UTC

[section ""data" . Data.STRef.modifySTRef'_closure" {
     Data.STRef.modifySTRef'_closure:
         const Data.STRef.modifySTRef'_info;
 },
 Data.STRef.modifySTRef'_entry() //  [R2, R3]
         { info_tbl: [(ccBzX,
                       label: Data.STRef.modifySTRef'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBzX: // global
           R3 = R3;
           R2 = R2;
           call Data.STRef.modifySTRef'1_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.58366658 UTC

[section ""cstring" . Data.STRef.$trModule4_bytes" {
     Data.STRef.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.58579177 UTC

[section ""data" . Data.STRef.$trModule3_closure" {
     Data.STRef.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.STRef.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.587504132 UTC

[section ""cstring" . Data.STRef.$trModule2_bytes" {
     Data.STRef.$trModule2_bytes:
         I8[] [68,97,116,97,46,83,84,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.589133368 UTC

[section ""data" . Data.STRef.$trModule1_closure" {
     Data.STRef.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.STRef.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.590921145 UTC

[section ""data" . Data.STRef.$trModule_closure" {
     Data.STRef.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.STRef.$trModule3_closure+1;
         const Data.STRef.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.592631752 UTC

[section ""relreadonly" . ScBxK_srt" { ScBxK_srt:
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.636894735 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:30.639101286 UTC

[section ""data" . Data.STRef.modifySTRef1_closure" {
     Data.STRef.modifySTRef1_closure:
         const Data.STRef.modifySTRef1_info;
 },
 Data.STRef.modifySTRef1_entry() //  [R2, R3]
         { info_tbl: [(ccBAB,
                       label: Data.STRef.modifySTRef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBAB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccBAC; else goto ccBAD;
       ccBAC: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.STRef.modifySTRef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccBAD: // global
           I64[Sp - 16] = block_ccBAy_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucBAN; else goto ccBAz;
       ucBAN: // global
           call _ccBAy(R1) args: 0, res: 0, upd: 0;
       ccBAz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccBAy() //  [R1]
         { info_tbl: [(ccBAy,
                       label: block_ccBAy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBAy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccBAI; else goto ccBAH;
       ccBAI: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccBAH: // global
           _scBAe::P64 = P64[R1 + 7];
           _scBAh::P64 = P64[_scBAe::P64 + 8];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _scBAh::P64;
           call MO_WriteBarrier();
           P64[_scBAe::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _scBAe::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.645497463 UTC

[section ""data" . Data.STRef.modifySTRef_closure" {
     Data.STRef.modifySTRef_closure:
         const Data.STRef.modifySTRef_info;
 },
 Data.STRef.modifySTRef_entry() //  [R2, R3]
         { info_tbl: [(ccBB8,
                       label: Data.STRef.modifySTRef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBB8: // global
           R3 = R3;
           R2 = R2;
           call Data.STRef.modifySTRef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.649066493 UTC

[section ""data" . Data.STRef.modifySTRef'1_closure" {
     Data.STRef.modifySTRef'1_closure:
         const Data.STRef.modifySTRef'1_info;
 },
 Data.STRef.modifySTRef'1_entry() //  [R2, R3]
         { info_tbl: [(ccBBm,
                       label: Data.STRef.modifySTRef'1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBBm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccBBn; else goto ccBBo;
       ccBBn: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.STRef.modifySTRef'1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccBBo: // global
           I64[Sp - 16] = block_ccBBj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucBBy; else goto ccBBk;
       ucBBy: // global
           call _ccBBj(R1) args: 0, res: 0, upd: 0;
       ccBBk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccBBj() //  [R1]
         { info_tbl: [(ccBBj,
                       label: block_ccBBj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBBj: // global
           I64[Sp] = block_ccBBr_info;
           _scBAo::P64 = P64[R1 + 7];
           R2 = P64[_scBAo::P64 + 8];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scBAo::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccBBr() //  [R1]
         { info_tbl: [(ccBBr,
                       label: block_ccBBr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBBr: // global
           _scBAo::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_scBAo::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _scBAo::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.656545582 UTC

[section ""data" . Data.STRef.modifySTRef'_closure" {
     Data.STRef.modifySTRef'_closure:
         const Data.STRef.modifySTRef'_info;
 },
 Data.STRef.modifySTRef'_entry() //  [R2, R3]
         { info_tbl: [(ccBBU,
                       label: Data.STRef.modifySTRef'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccBBU: // global
           R3 = R3;
           R2 = R2;
           call Data.STRef.modifySTRef'1_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.659861657 UTC

[section ""cstring" . Data.STRef.$trModule4_bytes" {
     Data.STRef.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.661562303 UTC

[section ""data" . Data.STRef.$trModule3_closure" {
     Data.STRef.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.STRef.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.663233413 UTC

[section ""cstring" . Data.STRef.$trModule2_bytes" {
     Data.STRef.$trModule2_bytes:
         I8[] [68,97,116,97,46,83,84,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.664922181 UTC

[section ""data" . Data.STRef.$trModule1_closure" {
     Data.STRef.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.STRef.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.666589765 UTC

[section ""data" . Data.STRef.$trModule_closure" {
     Data.STRef.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.STRef.$trModule3_closure+1;
         const Data.STRef.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:30.668287256 UTC

[section ""relreadonly" . ScBC6_srt" { ScBC6_srt:
 }]

